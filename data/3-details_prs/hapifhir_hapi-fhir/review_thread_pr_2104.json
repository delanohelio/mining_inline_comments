{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMDQ0NTA0", "number": 2104, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxMTo0OFrOEoDLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0NTo1M1rOEoHTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMwNjE2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2104-empi-enhancements.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxMTo0OFrOHY6yQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToxNzoyMVrOHZMOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTAxMQ==", "bodyText": "new new", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495891011", "createdAt": "2020-09-28T12:11:48Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2104-empi-enhancements.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+type: add\n+issue: 2104\n+title: \"EMPI enhancements.  Added new IDENTIFIER matcher rule type that defines\n+a matcher where two resources share the same value for a particular identifier system,\n+or if no system is indicated, defines a matcher where two resources share any matching system,values\n+identifier.  Improved channel and batch troubleshooting logging.  Added new\n+new controller layer to support non-fhir apis.  Changed rule json format; replaced 'metric'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3NjY5OA==", "bodyText": "pew pew!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496176698", "createdAt": "2020-09-28T19:17:21Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2104-empi-enhancements.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+type: add\n+issue: 2104\n+title: \"EMPI enhancements.  Added new IDENTIFIER matcher rule type that defines\n+a matcher where two resources share the same value for a particular identifier system,\n+or if no system is indicated, defines a matcher where two resources share any matching system,values\n+identifier.  Improved channel and batch troubleshooting logging.  Added new\n+new controller layer to support non-fhir apis.  Changed rule json format; replaced 'metric'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTAxMQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMxMDQ0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxMzowM1rOHY60yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo0Nzo1MFrOHZNLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTY1Ng==", "bodyText": "should we remove forthcoming?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495891656", "createdAt": "2020-09-28T12:13:03Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MjIyNw==", "bodyText": "or add this link: [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495892227", "createdAt": "2020-09-28T12:14:11Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTY1Ng=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MjQ0MQ==", "bodyText": "aye", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496192441", "createdAt": "2020-09-28T19:47:50Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTY1Ng=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMxNjcwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNDo1M1rOHY64kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMzoxOToyN1rOHZXEwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MjYyNg==", "bodyText": "I don't actually think the line about possible_matches relates at all to this rule.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495892626", "createdAt": "2020-09-28T12:14:53Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n \n In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n \n This automatic linking is done via configurable matching rules that create links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCH.\n \n-It is important to note that before a resource is to be processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no attributes that the EMPI system cares about, EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time. \n+It is important to note that before a resource is processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no such attributes, then EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time.\n \n ## Design\n \n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+Below are some simplifying principles HAPI EMPI follows to reduce complexity and ensure data integrity.\n \n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only by the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only change them via [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n \n 1. Every Patient in the system has a MATCH link to at most one Person resource.\n \n-1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to at most one Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NzY3OA==", "bodyText": "It is awkwardly worded.  I have reworded it as follows.  Do you agree with it now?\nThe only Patient resources in the system that do not have a MATCH link are those that have the 'no-empi' tag or those that have POSSIBLE_MATCH links pending review.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496197678", "createdAt": "2020-09-28T19:57:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n \n In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n \n This automatic linking is done via configurable matching rules that create links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCH.\n \n-It is important to note that before a resource is to be processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no attributes that the EMPI system cares about, EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time. \n+It is important to note that before a resource is processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no such attributes, then EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time.\n \n ## Design\n \n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+Below are some simplifying principles HAPI EMPI follows to reduce complexity and ensure data integrity.\n \n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only by the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only change them via [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n \n 1. Every Patient in the system has a MATCH link to at most one Person resource.\n \n-1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to at most one Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MjYyNg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NDQ5OA==", "bodyText": "beautiful \ud83d\udc4d", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496354498", "createdAt": "2020-09-29T03:19:27Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n \n In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n \n This automatic linking is done via configurable matching rules that create links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCH.\n \n-It is important to note that before a resource is to be processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no attributes that the EMPI system cares about, EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time. \n+It is important to note that before a resource is processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no such attributes, then EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time.\n \n ## Design\n \n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+Below are some simplifying principles HAPI EMPI follows to reduce complexity and ensure data integrity.\n \n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only by the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only change them via [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n \n 1. Every Patient in the system has a MATCH link to at most one Person resource.\n \n-1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to at most one Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MjYyNg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMyMjMzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNjoyMFrOHY67tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo0ODo0NVrOHZNNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MzQzMQ==", "bodyText": "I suppose you must have changed the behaviour here then! Maybe I should have read the code before I read the docs... \ud83e\udd14", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495893431", "createdAt": "2020-09-28T12:16:20Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n \n In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n \n This automatic linking is done via configurable matching rules that create links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCH.\n \n-It is important to note that before a resource is to be processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no attributes that the EMPI system cares about, EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time. \n+It is important to note that before a resource is processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no such attributes, then EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time.\n \n ## Design\n \n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+Below are some simplifying principles HAPI EMPI follows to reduce complexity and ensure data integrity.\n \n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only by the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only change them via [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n \n 1. Every Patient in the system has a MATCH link to at most one Person resource.\n \n-1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to at most one Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n \n-1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, a unique UUID will be assigned as that Person's EID.\n \n-1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+1. A Person can not have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MjkwNg==", "bodyText": "hrm.  i assumed it was a typo.  i have reverted, deferring to your eid wisdom.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496192906", "createdAt": "2020-09-28T19:48:45Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -15,27 +15,27 @@ There are several resources that are used:\n \n # Automatic Linking\n \n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+With EMPI enabled, the default behavior of the EMPI is to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n \n In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n \n This automatic linking is done via configurable matching rules that create links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCH.\n \n-It is important to note that before a resource is to be processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no attributes that the EMPI system cares about, EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time. \n+It is important to note that before a resource is processed by EMPI, it is first checked to ensure that it has at least one attribute that the EMPI system cares about, as defined in the `empi-rules.json` file. If the incoming resource has no such attributes, then EMPI processing does not occur on it. In this case, no Person is created for them. If in the future that Patient is updated to contain attributes the EMPI system does concern itself with, it will be processed at that time.\n \n ## Design\n \n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+Below are some simplifying principles HAPI EMPI follows to reduce complexity and ensure data integrity.\n \n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only by the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only change them via [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n \n 1. Every Patient in the system has a MATCH link to at most one Person resource.\n \n-1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+1. Every Patient resource in the system that has been processed by EMPI has a MATCH link to at most one Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n \n-1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, a unique UUID will be assigned as that Person's EID.\n \n-1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+1. A Person can not have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MzQzMQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDMyODA3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoxNzo1OFrOHY6--w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo0OTo0N1rOHZNPjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NDI2Nw==", "bodyText": "Now that I'm reading these, do you think it makes sense to backtick-wrap these enum values to indicate they are actually part of the code?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495894267", "createdAt": "2020-09-28T12:17:58Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -61,21 +61,21 @@ Below are some simplifying principles HAPI EMPI enforces to reduce complexity an\n \n ### Possible rule match outcomes:\n \n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible outcomes:\n \n-* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n+* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is generated and used as the internal EID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MzQyMw==", "bodyText": "i vaguelly recall that backtick stuff shows up as red and is distracting, so should be used sparingly.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496193423", "createdAt": "2020-09-28T19:49:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -61,21 +61,21 @@ Below are some simplifying principles HAPI EMPI enforces to reduce complexity an\n \n ### Possible rule match outcomes:\n \n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible outcomes:\n \n-* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n+* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is generated and used as the internal EID.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NDI2Nw=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM1NDYyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNTowOFrOHY7Ojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozNzozM1rOHZTUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5ODI1NQ==", "bodyText": "I don't know why, but the It registers, it enables reads poorly in a list setting like this. Maybe change it to:\nblah blah the following actions occur automatically:\n\nThe MESSAGE subscription is enabled.\nTwo MESSAGE subscriptions called blah blah are created.\nThe EMPI Operations are registered with the server", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495898255", "createdAt": "2020-09-28T12:25:08Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -61,21 +61,21 @@ Below are some simplifying principles HAPI EMPI enforces to reduce complexity an\n \n ### Possible rule match outcomes:\n \n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible outcomes:\n \n-* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n+* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is generated and used as the internal EID.\n \n * CASE 2: All of the MATCH Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCH.\n \n * CASE 3: The MATCH Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCH.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n \n-* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, new POSSIBLE_MATCH links are created and await manual assignment to either NO_MATCH or MATCH.\n+* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, new POSSIBLE_MATCH links are created and await manual reassignment to either NO_MATCH or MATCH.\n \n # HAPI EMPI Technical Details\n \n When EMPI is enabled, the HAPI FHIR JPA Server does the following things on startup:\n \n 1. It enables the MESSAGE subscription type and starts up the internal subscription engine.\n 1. It creates two MESSAGE subscriptions, called 'empi-patient' and 'empi-practitioner' that match all incoming Patient and Practitioner resources and send them to an internal queue called \"empi\".  The JPA Server listens to this queue and links incoming resources to Persons.\n-1. It registers the `Patient/$match` operation.  See [$match](https://www.hl7.org/fhir/operation-patient-match.html) for a description of this operation.\n+1. It registers the [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MjkwNg==", "bodyText": "It is done", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496292906", "createdAt": "2020-09-28T23:37:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -61,21 +61,21 @@ Below are some simplifying principles HAPI EMPI enforces to reduce complexity an\n \n ### Possible rule match outcomes:\n \n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible outcomes:\n \n-* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n+* CASE 1: No MATCH and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCH.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is generated and used as the internal EID.\n \n * CASE 2: All of the MATCH Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCH.\n \n * CASE 3: The MATCH Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCH.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n \n-* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, new POSSIBLE_MATCH links are created and await manual assignment to either NO_MATCH or MATCH.\n+* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, new POSSIBLE_MATCH links are created and await manual reassignment to either NO_MATCH or MATCH.\n \n # HAPI EMPI Technical Details\n \n When EMPI is enabled, the HAPI FHIR JPA Server does the following things on startup:\n \n 1. It enables the MESSAGE subscription type and starts up the internal subscription engine.\n 1. It creates two MESSAGE subscriptions, called 'empi-patient' and 'empi-practitioner' that match all incoming Patient and Practitioner resources and send them to an internal queue called \"empi\".  The JPA Server listens to this queue and links incoming resources to Persons.\n-1. It registers the `Patient/$match` operation.  See [$match](https://www.hl7.org/fhir/operation-patient-match.html) for a description of this operation.\n+1. It registers the [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5ODI1NQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM2MjM5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNzoxOVrOHY7TSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0MDowMVrOHZTXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5OTQ2NA==", "bodyText": "empi -> EMPI", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495899464", "createdAt": "2020-09-28T12:27:19Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -1,8 +1,8 @@\n # EMPI Operations\n \n-Several operations exist that can be used to manage EMPI links. These operations are supplied by a [plain provider](/docs/server_plain/resource_providers.html#plain-providers) called [EmpiProvider](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/provider/EmpiProviderR4.html).\n+EMPI links are managed by EMPI Operations. These operations are supplied by a [plain provider](/docs/server_plain/resource_providers.html#plain-providers) called [EmpiProvider](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/provider/EmpiProviderR4.html).\n \n-In cases where the operation changes data, if a resource id parameter contains a version (e.g. `Person/123/_history/1`), then the operation will fail with a 409 CONFLICT if that is not the latest version of that resource.  This could be used to prevent update conflicts in an environment where multiple users are working on the same set of empi links.\n+In cases where the operation changes data, if a resource id parameter contains a version (e.g. `Person/123/_history/1`), then the operation will fail with a 409 CONFLICT if that is not the latest version of that resource.  This feature can be used to prevent update conflicts in an environment where multiple users are working on the same set of empi links.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5Mzc5NA==", "bodyText": "actually, \"empi link\" is always lower case in this document, as it is an entity.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496293794", "createdAt": "2020-09-28T23:40:01Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -1,8 +1,8 @@\n # EMPI Operations\n \n-Several operations exist that can be used to manage EMPI links. These operations are supplied by a [plain provider](/docs/server_plain/resource_providers.html#plain-providers) called [EmpiProvider](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/provider/EmpiProviderR4.html).\n+EMPI links are managed by EMPI Operations. These operations are supplied by a [plain provider](/docs/server_plain/resource_providers.html#plain-providers) called [EmpiProvider](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/provider/EmpiProviderR4.html).\n \n-In cases where the operation changes data, if a resource id parameter contains a version (e.g. `Person/123/_history/1`), then the operation will fail with a 409 CONFLICT if that is not the latest version of that resource.  This could be used to prevent update conflicts in an environment where multiple users are working on the same set of empi links.\n+In cases where the operation changes data, if a resource id parameter contains a version (e.g. `Person/123/_history/1`), then the operation will fail with a 409 CONFLICT if that is not the latest version of that resource.  This feature can be used to prevent update conflicts in an environment where multiple users are working on the same set of empi links.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5OTQ2NA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM2NzUzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyODo1OFrOHY7Wog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzozODozM1rOHZTVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMDMyMg==", "bodyText": "I don't know if I agree with pluralizing the endpoint name here. Is there precedent for a plural operation? I would say it makes more sense to fall in with the FHIR Standard, e.g. /baseR4/Patient not /baseR4/Patients", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495900322", "createdAt": "2020-09-28T12:28:58Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -55,10 +55,10 @@ Ue the `$empi-query-links` operation to view empi links.  The results returned a\n \n ### Example\n \n-Use an HTTP GET like `http://example.com/$empi-query-link?matchResult=POSSIBLE_MATCH` or an HTTP POST to the following URL to invoke this operation:\n+Use an HTTP GET like `http://example.com/$empi-query-links?matchResult=POSSIBLE_MATCH` or an HTTP POST to the following URL to invoke this operation:\n \n ```url\n-http://example.com/$empi-query-link\n+http://example.com/$empi-query-links", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MzI0OA==", "bodyText": "it's always been called links.  this was just correcting the documentation.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496293248", "createdAt": "2020-09-28T23:38:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -55,10 +55,10 @@ Ue the `$empi-query-links` operation to view empi links.  The results returned a\n \n ### Example\n \n-Use an HTTP GET like `http://example.com/$empi-query-link?matchResult=POSSIBLE_MATCH` or an HTTP POST to the following URL to invoke this operation:\n+Use an HTTP GET like `http://example.com/$empi-query-links?matchResult=POSSIBLE_MATCH` or an HTTP POST to the following URL to invoke this operation:\n \n ```url\n-http://example.com/$empi-query-link\n+http://example.com/$empi-query-links", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMDMyMg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM4MTUxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozMjo0MlrOHY7e6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0MDoyM1rOHZTYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjQ0MQ==", "bodyText": "yikes how did we miss this on first pass haha critieria.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495902441", "createdAt": "2020-09-28T12:32:42Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -537,7 +537,7 @@ This operation takes a single optional criteria parameter unless it is called on\n             <td>String</td>\n             <td>0..1</td>\n             <td>\n-            The search critiera used to filter resources.\n+            The search criteria used to filter resources.  An empty criteria will submit all resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MzkxMQ==", "bodyText": "yeeeeeeet koawabunga!!!!!!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496293911", "createdAt": "2020-09-28T23:40:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_operations.md", "diffHunk": "@@ -537,7 +537,7 @@ This operation takes a single optional criteria parameter unless it is called on\n             <td>String</td>\n             <td>0..1</td>\n             <td>\n-            The search critiera used to filter resources.\n+            The search criteria used to filter resources.  An empty criteria will submit all resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjQ0MQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM5ODA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozNzowOVrOHY7ooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0MjoyNVrOHZTaXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNDkyOA==", "bodyText": "Not positive if this spacing will show up correctly, but it looks like you've got 2 different indentation levels here", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495904928", "createdAt": "2020-09-28T12:37:09Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNTk0MA==", "bodyText": "Yeah I would run this through a prettifier if it hasn't been yet.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495905940", "createdAt": "2020-09-28T12:39:00Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNDkyOA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDQ5NQ==", "bodyText": "done.  she is pretty now.  per your request.  for prettiness.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496294495", "createdAt": "2020-09-28T23:42:25Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNDkyOA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQwNTk0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozOToyNlrOHY7tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0MzoyNlrOHZTbcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNjE3Ng==", "bodyText": "dead whitespace", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495906176", "createdAt": "2020-09-28T12:39:26Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [\n+    {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"phone\"]\n+        },\n+            {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"birthdate\"]\n+        },\n+\t\t\t\t{\n+\t\t\t\t\"resourceType\": \"*\",\n+\t\t\t\t\"searchParams\": [\"identifier\"]\n+\t\t}],\n+\"candidateFilterSearchParams\": [],\n+\"matchFields\": [\n+    {\n+    \"name\": \"birthday\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"birthDate\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"phone\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"telecom.value\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"firstname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+        {\n+    \"name\": \"firstname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    }\n+],\n+\"matchResultMap\": {\n+        \"firstname-meta,lastname-meta,birthday\": \"MATCH\",\n+        \"firstname-meta,lastname-meta,phone\": \"MATCH\",\n+        \"firstname-jaro,lastname-jaro,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,lastname-jaro,phone\": \"POSSIBLE_MATCH\",\n+        \"lastname-jaro,phone,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,phone,birthday\": \"POSSIBLE_MATCH\"\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDc3MQ==", "bodyText": "prettifying it fixed", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496294771", "createdAt": "2020-09-28T23:43:26Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [\n+    {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"phone\"]\n+        },\n+            {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"birthdate\"]\n+        },\n+\t\t\t\t{\n+\t\t\t\t\"resourceType\": \"*\",\n+\t\t\t\t\"searchParams\": [\"identifier\"]\n+\t\t}],\n+\"candidateFilterSearchParams\": [],\n+\"matchFields\": [\n+    {\n+    \"name\": \"birthday\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"birthDate\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"phone\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"telecom.value\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"firstname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+        {\n+    \"name\": \"firstname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    }\n+],\n+\"matchResultMap\": {\n+        \"firstname-meta,lastname-meta,birthday\": \"MATCH\",\n+        \"firstname-meta,lastname-meta,phone\": \"MATCH\",\n+        \"firstname-jaro,lastname-jaro,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,lastname-jaro,phone\": \"POSSIBLE_MATCH\",\n+        \"lastname-jaro,phone,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,phone,birthday\": \"POSSIBLE_MATCH\"\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNjE3Ng=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQwODM3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0MDowM1rOHY7u1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0Mzo1M1rOHZTb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNjUxOA==", "bodyText": "In", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495906518", "createdAt": "2020-09-28T12:40:03Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [\n+    {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"phone\"]\n+        },\n+            {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"birthdate\"]\n+        },\n+\t\t\t\t{\n+\t\t\t\t\"resourceType\": \"*\",\n+\t\t\t\t\"searchParams\": [\"identifier\"]\n+\t\t}],\n+\"candidateFilterSearchParams\": [],\n+\"matchFields\": [\n+    {\n+    \"name\": \"birthday\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"birthDate\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"phone\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"telecom.value\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"firstname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+        {\n+    \"name\": \"firstname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    }\n+],\n+\"matchResultMap\": {\n+        \"firstname-meta,lastname-meta,birthday\": \"MATCH\",\n+        \"firstname-meta,lastname-meta,phone\": \"MATCH\",\n+        \"firstname-jaro,lastname-jaro,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,lastname-jaro,phone\": \"POSSIBLE_MATCH\",\n+        \"lastname-jaro,phone,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,phone,birthday\": \"POSSIBLE_MATCH\"\n+\n+}\n }\n ```\n \n Here is a description of how each section of this document is configured.\n \n ### candidateSearchParams\n-These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.  The HAPI FHIR server executes each of these searches separately and then takes the union of the results, so you can think of these as `OR` criteria that cast a wide net for potential candidates.  In some EMPI systems, these \"pre-searches\" are called \"blocking\" searches (since they identify \"blocks\" of candidates that will be searched for matches).\n+These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday or the same phone number.  The HAPI FHIR server executes each of these searches separately and then takes the union of the results, so you can think of these as `OR` criteria that cast a wide net for potential candidates.  In some EMPI systems, these \"pre-searches\" are called \"blocking\" searches (since they identify \"blocks\" of candidates that will be searched for matches).  \n+\n+In if a list of searchParams is specified in a given candidateSearchParams item, then these search parameters are treated as `AND` parameters.  In the following candidateSearchParams definition, hapi-fhir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDg3Mg==", "bodyText": "mercd", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496294872", "createdAt": "2020-09-28T23:43:53Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -1,66 +1,103 @@\n # Rules\n \n-HAPI EMPI rules are managed via a single json document.\n+HAPI EMPI rules are defined in a single json document.\n \n-Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types and you would like to apply it to both practitioners and patients.\n \n Here is an example of a full HAPI EMPI rules json document:\n \n ```json\n {\n-\t\"candidateSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"given\", \"family\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParams\": [\"identifier\"]\n-\t\t},\n-\t\t{\n-\t\t\t\"resourceType\": \"Patient\",\n-\t\t\t\"searchParams\": [\"general-practitioner\"]\n-\t\t}\n-\t],\n-\t\"candidateFilterSearchParams\": [\n-\t\t{\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"searchParam\": \"active\",\n-\t\t\t\"fixedValue\": \"true\"\n-\t\t}\n-\t],\n-\t\"matchFields\": [\n-\t\t{\n-\t\t\t\"name\": \"cosine-given-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.given\",\n-\t\t\t\"metric\": \"COSINE\",\n-\t\t\t\"matchThreshold\": 0.8,\n-\t\t\t\"exact\": true\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"jaro-last-name\",\n-\t\t\t\"resourceType\": \"*\",\n-\t\t\t\"resourcePath\": \"name.family\",\n-\t\t\t\"metric\": \"JARO_WINKLER\",\n-\t\t\t\"matchThreshold\": 0.8\n-\t\t}\n-\t],\n-\t\"matchResultMap\": {\n-\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n-\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n-\t},\n-\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+    \"version\": \"1\",\n+\"candidateSearchParams\": [\n+    {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"phone\"]\n+        },\n+            {\n+            \"resourceType\": \"Patient\",\n+            \"searchParams\": [\"birthdate\"]\n+        },\n+\t\t\t\t{\n+\t\t\t\t\"resourceType\": \"*\",\n+\t\t\t\t\"searchParams\": [\"identifier\"]\n+\t\t}],\n+\"candidateFilterSearchParams\": [],\n+\"matchFields\": [\n+    {\n+    \"name\": \"birthday\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"birthDate\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"phone\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"telecom.value\",\n+            \"matcher\": {\n+                \"algorithm\": \"STRING\"\n+            }\n+    },\n+    {\n+    \"name\": \"firstname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-meta\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"matcher\": {\n+                \"algorithm\": \"METAPHONE\"\n+            }\n+    },\n+        {\n+    \"name\": \"firstname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.given\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    },\n+    {\n+    \"name\": \"lastname-jaro\",\n+    \"resourceType\": \"Patient\",\n+            \"resourcePath\": \"name.family\",\n+            \"similarity\": {\n+                \"algorithm\": \"JARO_WINKLER\",\n+                \"matchThreshold\": 0.80\n+            }\n+    }\n+],\n+\"matchResultMap\": {\n+        \"firstname-meta,lastname-meta,birthday\": \"MATCH\",\n+        \"firstname-meta,lastname-meta,phone\": \"MATCH\",\n+        \"firstname-jaro,lastname-jaro,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,lastname-jaro,phone\": \"POSSIBLE_MATCH\",\n+        \"lastname-jaro,phone,birthday\": \"POSSIBLE_MATCH\",\n+        \"firstname-jaro,phone,birthday\": \"POSSIBLE_MATCH\"\n+\n+}\n }\n ```\n \n Here is a description of how each section of this document is configured.\n \n ### candidateSearchParams\n-These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.  The HAPI FHIR server executes each of these searches separately and then takes the union of the results, so you can think of these as `OR` criteria that cast a wide net for potential candidates.  In some EMPI systems, these \"pre-searches\" are called \"blocking\" searches (since they identify \"blocks\" of candidates that will be searched for matches).\n+These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday or the same phone number.  The HAPI FHIR server executes each of these searches separately and then takes the union of the results, so you can think of these as `OR` criteria that cast a wide net for potential candidates.  In some EMPI systems, these \"pre-searches\" are called \"blocking\" searches (since they identify \"blocks\" of candidates that will be searched for matches).  \n+\n+In if a list of searchParams is specified in a given candidateSearchParams item, then these search parameters are treated as `AND` parameters.  In the following candidateSearchParams definition, hapi-fhir", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwNjUxOA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQ3NzQ0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo1NzoyMFrOHY8YdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0NToxOVrOHZTdiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNzE3Mg==", "bodyText": "Run all the json through a prettifier if possible", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495917172", "createdAt": "2020-09-28T12:57:20Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -102,56 +139,76 @@ For example, if the incoming patient looked like this:\n \n then the above `candidateSearchParams` and `candidateFilterSearchParams` would result in the following two consecutive searches for candidates:\n * `Patient?given=Peter,James&family=Chalmers&active=true`\n-* `Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345&active=true` \n- \n+* `Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345&active=true`\n+\n \n ### matchFields\n \n-Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of metrics: `Matcher` and `Similarity`.  Matcher metrics return a `true` or `false` directly, whereas Similarity metrics return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n+Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of matchFields: `matcher` and `similarity`.  `matcher` matchFields return a `true` or `false` directly, whereas `similarity` matchFields return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will only return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n \n-By default, all matchFields have `exact=false` which means that they will have all diacritical marks removed and converted to upper case before matching.  `exact=true` can be added to any matchField to compare the strings as they are originally capitalized and accented.\n+By default, all matchFields have `exact=false` which means that they will have all diacritical marks removed and all letters will be converted to upper case before matching.  `exact=true` can be added to any matchField to compare the strings as they are originally capitalized and accented.\n \n Here is a matcher matchField that uses the SOUNDEX matcher to determine whether two family names match.\n \n ```json\n {\n-\t\"name\": \"family-name-double-metaphone\",\n-\t\"resourceType\": \"*\",\n+\t\"name\": \"familyname-soundex\",\n+  \"resourceType\": \"*\",\n \t\"resourcePath\": \"name.family\",\n-\t\"metric\": \"SOUNDEX\"\n+\t\"matcher\": {\n+\t\t\t\"algorithm\": \"SOUNDEX\"\n+\t}\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTI1OQ==", "bodyText": "some are snippets so it's harder.  some of this was IntelliJ trying to be helpful", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295259", "createdAt": "2020-09-28T23:45:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -102,56 +139,76 @@ For example, if the incoming patient looked like this:\n \n then the above `candidateSearchParams` and `candidateFilterSearchParams` would result in the following two consecutive searches for candidates:\n * `Patient?given=Peter,James&family=Chalmers&active=true`\n-* `Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345&active=true` \n- \n+* `Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345&active=true`\n+\n \n ### matchFields\n \n-Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of metrics: `Matcher` and `Similarity`.  Matcher metrics return a `true` or `false` directly, whereas Similarity metrics return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n+Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of matchFields: `matcher` and `similarity`.  `matcher` matchFields return a `true` or `false` directly, whereas `similarity` matchFields return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will only return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n \n-By default, all matchFields have `exact=false` which means that they will have all diacritical marks removed and converted to upper case before matching.  `exact=true` can be added to any matchField to compare the strings as they are originally capitalized and accented.\n+By default, all matchFields have `exact=false` which means that they will have all diacritical marks removed and all letters will be converted to upper case before matching.  `exact=true` can be added to any matchField to compare the strings as they are originally capitalized and accented.\n \n Here is a matcher matchField that uses the SOUNDEX matcher to determine whether two family names match.\n \n ```json\n {\n-\t\"name\": \"family-name-double-metaphone\",\n-\t\"resourceType\": \"*\",\n+\t\"name\": \"familyname-soundex\",\n+  \"resourceType\": \"*\",\n \t\"resourcePath\": \"name.family\",\n-\t\"metric\": \"SOUNDEX\"\n+\t\"matcher\": {\n+\t\t\t\"algorithm\": \"SOUNDEX\"\n+\t}\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNzE3Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTMwNw==", "bodyText": "i manually cleaned up where i could", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295307", "createdAt": "2020-09-28T23:45:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -102,56 +139,76 @@ For example, if the incoming patient looked like this:\n \n then the above `candidateSearchParams` and `candidateFilterSearchParams` would result in the following two consecutive searches for candidates:\n * `Patient?given=Peter,James&family=Chalmers&active=true`\n-* `Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345&active=true` \n- \n+* `Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345&active=true`\n+\n \n ### matchFields\n \n-Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of metrics: `Matcher` and `Similarity`.  Matcher metrics return a `true` or `false` directly, whereas Similarity metrics return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n+Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of matchFields: `matcher` and `similarity`.  `matcher` matchFields return a `true` or `false` directly, whereas `similarity` matchFields return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will only return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n \n-By default, all matchFields have `exact=false` which means that they will have all diacritical marks removed and converted to upper case before matching.  `exact=true` can be added to any matchField to compare the strings as they are originally capitalized and accented.\n+By default, all matchFields have `exact=false` which means that they will have all diacritical marks removed and all letters will be converted to upper case before matching.  `exact=true` can be added to any matchField to compare the strings as they are originally capitalized and accented.\n \n Here is a matcher matchField that uses the SOUNDEX matcher to determine whether two family names match.\n \n ```json\n {\n-\t\"name\": \"family-name-double-metaphone\",\n-\t\"resourceType\": \"*\",\n+\t\"name\": \"familyname-soundex\",\n+  \"resourceType\": \"*\",\n \t\"resourcePath\": \"name.family\",\n-\t\"metric\": \"SOUNDEX\"\n+\t\"matcher\": {\n+\t\t\t\"algorithm\": \"SOUNDEX\"\n+\t}\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNzE3Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQ4ODQyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo1OTo0M1rOHY8e-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0NjoyNlrOHZTe1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxODg0Mw==", "bodyText": "Fill out javadocs, also theThe", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495918843", "createdAt": "2020-09-28T12:59:43Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDao.java", "diffHunk": "@@ -254,6 +255,15 @@\n \n \tRuntimeResourceDefinition validateCriteriaAndReturnResourceDefinition(String criteria);\n \n+\t/**\n+\t * Delete a list of resource Pids\n+\t * @param theUrl the original URL that triggered the delete\n+\t * @param theResourceIds\n+\t * @param theDeleteConflicts\n+\t * @param theTheRequest\n+\t * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTYzOA==", "bodyText": "done", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295638", "createdAt": "2020-09-28T23:46:26Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDao.java", "diffHunk": "@@ -254,6 +255,15 @@\n \n \tRuntimeResourceDefinition validateCriteriaAndReturnResourceDefinition(String criteria);\n \n+\t/**\n+\t * Delete a list of resource Pids\n+\t * @param theUrl the original URL that triggered the delete\n+\t * @param theResourceIds\n+\t * @param theDeleteConflicts\n+\t * @param theTheRequest\n+\t * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxODg0Mw=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU0NTEwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxMjowNFrOHY9AUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0NjowOVrOHZrXMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng==", "bodyText": "Interesting, why this change? I thought sending null would check all partitions.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495927376", "createdAt": "2020-09-28T13:12:04Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -438,7 +438,7 @@ public Long getPidOrNull(IBaseResource theResource) {\n \t\tif (retVal == null) {\n \t\t\tIIdType id = theResource.getIdElement();\n \t\t\ttry {\n-\t\t\t\tretVal = this.resolveResourcePersistentIds(null, id.getResourceType(), id.getIdPart()).getIdAsLong();\n+\t\t\t\tretVal = this.resolveResourcePersistentIds(RequestPartitionId.allPartitions(), id.getResourceType(), id.getIdPart()).getIdAsLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTc5Mg==", "bodyText": "null caused an NPE.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295792", "createdAt": "2020-09-28T23:47:02Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -438,7 +438,7 @@ public Long getPidOrNull(IBaseResource theResource) {\n \t\tif (retVal == null) {\n \t\t\tIIdType id = theResource.getIdElement();\n \t\t\ttry {\n-\t\t\t\tretVal = this.resolveResourcePersistentIds(null, id.getResourceType(), id.getIdPart()).getIdAsLong();\n+\t\t\t\tretVal = this.resolveResourcePersistentIds(RequestPartitionId.allPartitions(), id.getResourceType(), id.getIdPart()).getIdAsLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4Njc4Mg==", "bodyText": "wild", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496686782", "createdAt": "2020-09-29T12:45:58Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -438,7 +438,7 @@ public Long getPidOrNull(IBaseResource theResource) {\n \t\tif (retVal == null) {\n \t\t\tIIdType id = theResource.getIdElement();\n \t\t\ttry {\n-\t\t\t\tretVal = this.resolveResourcePersistentIds(null, id.getResourceType(), id.getIdPart()).getIdAsLong();\n+\t\t\t\tretVal = this.resolveResourcePersistentIds(RequestPartitionId.allPartitions(), id.getResourceType(), id.getIdPart()).getIdAsLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4Njg5Nw==", "bodyText": "stupid java", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496686897", "createdAt": "2020-09-29T12:46:09Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -438,7 +438,7 @@ public Long getPidOrNull(IBaseResource theResource) {\n \t\tif (retVal == null) {\n \t\t\tIIdType id = theResource.getIdElement();\n \t\t\ttry {\n-\t\t\t\tretVal = this.resolveResourcePersistentIds(null, id.getResourceType(), id.getIdPart()).getIdAsLong();\n+\t\t\t\tretVal = this.resolveResourcePersistentIds(RequestPartitionId.allPartitions(), id.getResourceType(), id.getIdPart()).getIdAsLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzM3Ng=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU3MDM4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxNzo1NlrOHY9Png==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0ODowNlrOHZTghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTI5NA==", "bodyText": "boot test? Not sure if this was included intentionally.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495931294", "createdAt": "2020-09-28T13:17:56Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/pom.xml", "diffHunk": "@@ -64,6 +64,11 @@\n \t\t\t<version>5.2.0-SNAPSHOT</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTk4OA==", "bodyText": "It's for @MockBean.  I'd prefer to pull that from somewhere else, but couldn't find it easily.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496295988", "createdAt": "2020-09-28T23:47:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/pom.xml", "diffHunk": "@@ -64,6 +64,11 @@\n \t\t\t<version>5.2.0-SNAPSHOT</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTI5NA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjA3MQ==", "bodyText": "lmk if you know of a better jar for picking up @MockBean", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296071", "createdAt": "2020-09-28T23:48:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/pom.xml", "diffHunk": "@@ -64,6 +64,11 @@\n \t\t\t<version>5.2.0-SNAPSHOT</version>\n \t\t\t<scope>test</scope>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n+\t\t\t<scope>test</scope>\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTI5NA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU3NDAzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxODo0OVrOHY9Rzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0ODo0N1rOHZThQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTg1NQ==", "bodyText": "Cool I didn't realize codecov bot was actually posting on individual lines. Nifty!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495931855", "createdAt": "2020-09-28T13:18:49Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -92,7 +92,7 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t\t\t\tourLog.trace(\"Not processing modified message for {}\", theMsg.getOperationType());\n \t\t\t}\n \t\t}catch (Exception e) {\n-\t\t\tlog(empiContext, \"Failure during EMPI processing: \" + e.getMessage());\n+\t\t\tlog(empiContext, \"Failure during EMPI processing: \" + e.getMessage(), e);\n \t\t} finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjI1OQ==", "bodyText": "?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296259", "createdAt": "2020-09-28T23:48:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -92,7 +92,7 @@ public void matchEmpiAndUpdateLinks(ResourceModifiedMessage theMsg) {\n \t\t\t\t\tourLog.trace(\"Not processing modified message for {}\", theMsg.getOperationType());\n \t\t\t}\n \t\t}catch (Exception e) {\n-\t\t\tlog(empiContext, \"Failure during EMPI processing: \" + e.getMessage());\n+\t\t\tlog(empiContext, \"Failure during EMPI processing: \" + e.getMessage(), e);\n \t\t} finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMTg1NQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU3Njg0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxOToyNVrOHY9TmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0OTo1N1rOHZTilg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMjMxMg==", "bodyText": "SUBMIT_RESOURCE as opposed to RESOURCES may be a better name here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495932312", "createdAt": "2020-09-28T13:19:25Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -111,13 +111,13 @@ private EmpiTransactionContext createEmpiContext(ResourceModifiedMessage theMsg)\n \t\tEmpiTransactionContext.OperationType empiOperation;\n \t\tswitch (theMsg.getOperationType()) {\n \t\t\tcase CREATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase UPDATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase MANUALLY_TRIGGERED:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.BATCH;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.SUBMIT_RESOURCES_TO_EMPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjU5OA==", "bodyText": "good call.  changed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296598", "createdAt": "2020-09-28T23:49:57Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/broker/EmpiMessageHandler.java", "diffHunk": "@@ -111,13 +111,13 @@ private EmpiTransactionContext createEmpiContext(ResourceModifiedMessage theMsg)\n \t\tEmpiTransactionContext.OperationType empiOperation;\n \t\tswitch (theMsg.getOperationType()) {\n \t\t\tcase CREATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.CREATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase UPDATE:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.UPDATE_RESOURCE;\n \t\t\t\tbreak;\n \t\t\tcase MANUALLY_TRIGGERED:\n-\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.BATCH;\n+\t\t\t\tempiOperation = EmpiTransactionContext.OperationType.SUBMIT_RESOURCES_TO_EMPI;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzMjMxMg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU5OTg3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyNDoyOFrOHY9htA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1MDo0MlrOHZTjfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNTkyNA==", "bodyText": "remove my", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495935924", "createdAt": "2020-09-28T13:24:28Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -217,4 +221,10 @@ EmpiLinkDeleteSvc empiLinkDeleteSvc() {\n \tEmpiResourceFilteringSvc empiResourceFilteringSvc() {\n \t\treturn new EmpiResourceFilteringSvc();\n \t}\n+\n+\t@Bean\n+\tEmpiControllerHelper empiProviderHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) { return new EmpiControllerHelper(theFhirContext, theResourceLoader); }\n+\n+\t@Bean\n+\tIEmpiControllerSvc myEmpiControllerSvc() {return new EmpiControllerSvcImpl(); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjgyOA==", "bodyText": "fixed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496296828", "createdAt": "2020-09-28T23:50:42Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/config/EmpiConsumerConfig.java", "diffHunk": "@@ -217,4 +221,10 @@ EmpiLinkDeleteSvc empiLinkDeleteSvc() {\n \tEmpiResourceFilteringSvc empiResourceFilteringSvc() {\n \t\treturn new EmpiResourceFilteringSvc();\n \t}\n+\n+\t@Bean\n+\tEmpiControllerHelper empiProviderHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) { return new EmpiControllerHelper(theFhirContext, theResourceLoader); }\n+\n+\t@Bean\n+\tIEmpiControllerSvc myEmpiControllerSvc() {return new EmpiControllerSvcImpl(); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNTkyNA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDYwODMyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyNjoyM1rOHY9m-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1MTo0MlrOHZTkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNzI3Mg==", "bodyText": "Maybe add a trace log on success? or does the sender already do that", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495937272", "createdAt": "2020-09-28T13:26:23Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -49,7 +53,10 @@ public void submitResourceToEmpiChannel(IBaseResource theResource) {\n \t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n \t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n \t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n-\t\tgetEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t\tboolean success = getEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"Failed to submit {} to EMPI Channel.\", resourceModifiedMessage.getPayloadId());\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NzA4Nw==", "bodyText": "logging does add a tiny overhead I'd prefer to avoid.  I found the current logging met my troubleshooting needs.  Can always add more in the future.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496297087", "createdAt": "2020-09-28T23:51:42Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiChannelSubmitterSvcImpl.java", "diffHunk": "@@ -49,7 +53,10 @@ public void submitResourceToEmpiChannel(IBaseResource theResource) {\n \t\tResourceModifiedMessage resourceModifiedMessage = new ResourceModifiedMessage(myFhirContext, theResource, ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n \t\tresourceModifiedMessage.setOperationType(ResourceModifiedMessage.OperationTypeEnum.MANUALLY_TRIGGERED);\n \t\tresourceModifiedJsonMessage.setPayload(resourceModifiedMessage);\n-\t\tgetEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t\tboolean success = getEmpiChannelProducer().send(resourceModifiedJsonMessage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"Failed to submit {} to EMPI Channel.\", resourceModifiedMessage.getPayloadId());\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNzI3Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDYzMDAyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiControllerSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozMToxNlrOHY90XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1NDo0N1rOHZTn3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDcwMQ==", "bodyText": "All these public methods should be javadocced if possible. I havent hit the interface, but if its done there, disregard this :P", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495940701", "createdAt": "2020-09-28T13:31:16Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiControllerSvcImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.api.IEmpiControllerSvc;\n+import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n+import ca.uhn.fhir.empi.api.IEmpiLinkUpdaterSvc;\n+import ca.uhn.fhir.empi.api.IEmpiPersonMergerSvc;\n+import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n+import ca.uhn.fhir.empi.provider.EmpiControllerHelper;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.jetbrains.annotations.Nullable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.stream.Stream;\n+\n+@Service\n+public class EmpiControllerSvcImpl implements IEmpiControllerSvc {\n+\t@Autowired\n+\tEmpiControllerHelper myEmpiControllerHelper;\n+\t@Autowired\n+\tIEmpiPersonMergerSvc myEmpiPersonMergerSvc;\n+\t@Autowired\n+\tIEmpiLinkQuerySvc myEmpiLinkQuerySvc;\n+\t@Autowired\n+\tIEmpiLinkUpdaterSvc myIEmpiLinkUpdaterSvc;\n+\n+\t@Override\n+\tpublic IAnyResource mergePersons(String theFromPersonId, String theToPersonId, EmpiTransactionContext theEmpiTransactionContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5Nzk0OA==", "bodyText": "These methods are 1:1 to provider methods.  I added a javadoc explaining the classes role in the system.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496297948", "createdAt": "2020-09-28T23:54:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiControllerSvcImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.uhn.fhir.jpa.empi.svc;\n+\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.api.IEmpiControllerSvc;\n+import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n+import ca.uhn.fhir.empi.api.IEmpiLinkUpdaterSvc;\n+import ca.uhn.fhir.empi.api.IEmpiPersonMergerSvc;\n+import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n+import ca.uhn.fhir.empi.provider.EmpiControllerHelper;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.jetbrains.annotations.Nullable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.stream.Stream;\n+\n+@Service\n+public class EmpiControllerSvcImpl implements IEmpiControllerSvc {\n+\t@Autowired\n+\tEmpiControllerHelper myEmpiControllerHelper;\n+\t@Autowired\n+\tIEmpiPersonMergerSvc myEmpiPersonMergerSvc;\n+\t@Autowired\n+\tIEmpiLinkQuerySvc myEmpiLinkQuerySvc;\n+\t@Autowired\n+\tIEmpiLinkUpdaterSvc myIEmpiLinkUpdaterSvc;\n+\n+\t@Override\n+\tpublic IAnyResource mergePersons(String theFromPersonId, String theToPersonId, EmpiTransactionContext theEmpiTransactionContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDcwMQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY0MDkwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozMzozNFrOHY960A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo1ODozMFrOHZTrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MjM1Mg==", "bodyText": "Something about returning JSON objects from an internal service class smells to me a bit. I feel as though that JSON-wrapping is the responsibility of the controller itself. What are your thoughts on this? Is it possible that some other service would call this service and want to operate on the actual non-json objects?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495942352", "createdAt": "2020-09-28T13:33:34Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5ODkzNQ==", "bodyText": "This JSON goes straight out to the user in cdr so it's not really \"internal\".  I agree it looks funny here, but taken with the cdr simplified REST api it makes sense.  I used a double Stream to avoid any memory overhead (that we'd incur if we instead returned List.)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496298935", "createdAt": "2020-09-28T23:58:30Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MjM1Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY0ODg2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozNToxNVrOHY9_dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0ODoxOVrOHZrcZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MzU0Mg==", "bodyText": "If this function needs to exist, should it not exist on the Model itself? i.e, knowledge of the json-serialization of the object should rest with the object itself?  So you could just do empiLink.toJson()", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495943542", "createdAt": "2020-09-28T13:35:15Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(null, null, EmpiMatchResultEnum.POSSIBLE_DUPLICATE, null);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink);\n-\t\t// TODO RC1 page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, false);\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream().map(this::toJson);\n \t}\n \n-\tprivate IBaseParameters parametersFromEmpiLinks(List<EmpiLink> theEmpiLinks, boolean includeResultAndSource) {\n-\t\tIBaseParameters retval = ParametersUtil.newInstance(myFhirContext);\n-\n-\t\tfor (EmpiLink empiLink : theEmpiLinks) {\n-\t\t\tIBase resultPart = ParametersUtil.addParameterToParameters(myFhirContext, retval, \"link\");\n-\t\t\tString personId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getPersonPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"personId\", personId);\n-\n-\t\t\tString targetId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getTargetPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"targetId\", targetId);\n-\n-\t\t\tif (includeResultAndSource) {\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"matchResult\", empiLink.getMatchResult().name());\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"linkSource\", empiLink.getLinkSource().name());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"eidMatch\", empiLink.getEidMatch());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"newPerson\", empiLink.getNewPerson());\n-\t\t\t\tParametersUtil.addPartDecimal(myFhirContext, resultPart, \"score\", empiLink.getScore());\n-\t\t\t}\n-\t\t}\n+\tprivate EmpiLinkJson toJson(EmpiLink theLink) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTM0Mg==", "bodyText": "Can't do that.  EmpiLink is a jpa entity whereas EmpiLinkJson is persistence independent (in hapi-server-empi).  If we ever support mongo in the future, it will need to have its own serializer.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496299342", "createdAt": "2020-09-28T23:59:54Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(null, null, EmpiMatchResultEnum.POSSIBLE_DUPLICATE, null);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink);\n-\t\t// TODO RC1 page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, false);\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream().map(this::toJson);\n \t}\n \n-\tprivate IBaseParameters parametersFromEmpiLinks(List<EmpiLink> theEmpiLinks, boolean includeResultAndSource) {\n-\t\tIBaseParameters retval = ParametersUtil.newInstance(myFhirContext);\n-\n-\t\tfor (EmpiLink empiLink : theEmpiLinks) {\n-\t\t\tIBase resultPart = ParametersUtil.addParameterToParameters(myFhirContext, retval, \"link\");\n-\t\t\tString personId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getPersonPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"personId\", personId);\n-\n-\t\t\tString targetId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getTargetPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"targetId\", targetId);\n-\n-\t\t\tif (includeResultAndSource) {\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"matchResult\", empiLink.getMatchResult().name());\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"linkSource\", empiLink.getLinkSource().name());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"eidMatch\", empiLink.getEidMatch());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"newPerson\", empiLink.getNewPerson());\n-\t\t\t\tParametersUtil.addPartDecimal(myFhirContext, resultPart, \"score\", empiLink.getScore());\n-\t\t\t}\n-\t\t}\n+\tprivate EmpiLinkJson toJson(EmpiLink theLink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MzU0Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4ODIzMA==", "bodyText": "Ah fair enough.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496688230", "createdAt": "2020-09-29T12:48:19Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiLinkQuerySvcImpl.java", "diffHunk": "@@ -20,73 +20,61 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiLinkJson;\n import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n import ca.uhn.fhir.empi.api.IEmpiLinkQuerySvc;\n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n import ca.uhn.fhir.jpa.empi.dao.EmpiLinkDaoSvc;\n import ca.uhn.fhir.jpa.entity.EmpiLink;\n-import ca.uhn.fhir.util.ParametersUtil;\n-import org.hl7.fhir.instance.model.api.IBase;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Example;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public class EmpiLinkQuerySvcImpl implements IEmpiLinkQuerySvc {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiLinkQuerySvcImpl.class);\n \n-\t@Autowired\n-\tFhirContext myFhirContext;\n \t@Autowired\n \tIdHelperService myIdHelperService;\n \t@Autowired\n \tEmpiLinkDaoSvc myEmpiLinkDaoSvc;\n \n \t@Override\n-\tpublic IBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(thePersonId, theTargetId, theMatchResult, theLinkSource);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream()\n \t\t\t.filter(empiLink -> empiLink.getMatchResult() != EmpiMatchResultEnum.POSSIBLE_DUPLICATE)\n-\t\t\t.collect(Collectors.toList());\n-\t\t// TODO RC1 KHS page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, true);\n+\t\t\t.map(this::toJson);\n \t}\n \n+\n+\n \t@Override\n-\tpublic IBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext) {\n+\tpublic Stream<EmpiLinkJson> getDuplicatePersons(EmpiTransactionContext theEmpiContext) {\n \t\tExample<EmpiLink> exampleLink = exampleLinkFromParameters(null, null, EmpiMatchResultEnum.POSSIBLE_DUPLICATE, null);\n-\t\tList<EmpiLink> empiLinks = myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink);\n-\t\t// TODO RC1 page results\n-\t\treturn parametersFromEmpiLinks(empiLinks, false);\n+\t\treturn myEmpiLinkDaoSvc.findEmpiLinkByExample(exampleLink).stream().map(this::toJson);\n \t}\n \n-\tprivate IBaseParameters parametersFromEmpiLinks(List<EmpiLink> theEmpiLinks, boolean includeResultAndSource) {\n-\t\tIBaseParameters retval = ParametersUtil.newInstance(myFhirContext);\n-\n-\t\tfor (EmpiLink empiLink : theEmpiLinks) {\n-\t\t\tIBase resultPart = ParametersUtil.addParameterToParameters(myFhirContext, retval, \"link\");\n-\t\t\tString personId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getPersonPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"personId\", personId);\n-\n-\t\t\tString targetId = myIdHelperService.resourceIdFromPidOrThrowException(empiLink.getTargetPid()).toVersionless().getValue();\n-\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"targetId\", targetId);\n-\n-\t\t\tif (includeResultAndSource) {\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"matchResult\", empiLink.getMatchResult().name());\n-\t\t\t\tParametersUtil.addPartString(myFhirContext, resultPart, \"linkSource\", empiLink.getLinkSource().name());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"eidMatch\", empiLink.getEidMatch());\n-\t\t\t\tParametersUtil.addPartBoolean(myFhirContext, resultPart, \"newPerson\", empiLink.getNewPerson());\n-\t\t\t\tParametersUtil.addPartDecimal(myFhirContext, resultPart, \"score\", empiLink.getScore());\n-\t\t\t}\n-\t\t}\n+\tprivate EmpiLinkJson toJson(EmpiLink theLink) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MzU0Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY1MTAxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozNTo0NFrOHY-Aww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozNTo0NFrOHY-Aww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Mzg3NQ==", "bodyText": "good catch", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495943875", "createdAt": "2020-09-28T13:35:44Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -20,27 +20,28 @@\n  * #L%\n  */\n \n+import ca.uhn.fhir.empi.log.Logs;\n import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n import ca.uhn.fhir.jpa.api.model.DeleteConflict;\n import ca.uhn.fhir.jpa.api.model.DeleteConflictList;\n import ca.uhn.fhir.jpa.api.model.ExpungeOptions;\n import ca.uhn.fhir.jpa.dao.expunge.ExpungeService;\n import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.api.server.storage.ResourcePersistentId;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.r4.model.IdType;\n import org.slf4j.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n \n import java.util.List;\n \n-import static org.slf4j.LoggerFactory.getLogger;\n-\n @Service\n public class EmpiPersonDeletingSvc {\n-\tprivate static final Logger ourLog = getLogger(EmpiPersonDeletingSvc.class);\n+\tprivate static final Logger ourLog = Logs.getEmpiTroubleshootingLog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY1OTQ3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozNzozNVrOHY-Fyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0ODo0NVrOHZrdbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NTE2Mw==", "bodyText": "I see you found a better way to handle cascading delete here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495945163", "createdAt": "2020-09-28T13:37:35Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -55,13 +56,17 @@\n \t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n \t * VersionConflictException\n \t *\n-\t * @param theLongs\n+\t * @param theResourcePids\n \t */\n \t@Transactional\n-\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\tpublic void deletePersonResourcesAndHandleConflicts(List<Long> theResourcePids) {\n+\t\tList<ResourcePersistentId> resourceIds = ResourcePersistentId.fromLongList(theResourcePids);\n+\t\tourLog.info(\"Deleting {} Person resources...\", resourceIds.size());\n \t\tDeleteConflictList\n \t\t\tdeleteConflictList = new DeleteConflictList();\n-\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao<?> resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.deletePidList(ProviderConstants.EMPI_CLEAR, resourceIds, deleteConflictList, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTcyMA==", "bodyText": "Sadly this change made no difference to performance.  This is what prompted my recent discussion in #coredev on rewriting how we do delete for expunge.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496299720", "createdAt": "2020-09-29T00:00:54Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -55,13 +56,17 @@\n \t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n \t * VersionConflictException\n \t *\n-\t * @param theLongs\n+\t * @param theResourcePids\n \t */\n \t@Transactional\n-\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\tpublic void deletePersonResourcesAndHandleConflicts(List<Long> theResourcePids) {\n+\t\tList<ResourcePersistentId> resourceIds = ResourcePersistentId.fromLongList(theResourcePids);\n+\t\tourLog.info(\"Deleting {} Person resources...\", resourceIds.size());\n \t\tDeleteConflictList\n \t\t\tdeleteConflictList = new DeleteConflictList();\n-\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao<?> resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.deletePidList(ProviderConstants.EMPI_CLEAR, resourceIds, deleteConflictList, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NTE2Mw=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4ODQ5Mw==", "bodyText": "Still reads cleaner!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496688493", "createdAt": "2020-09-29T12:48:45Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonDeletingSvc.java", "diffHunk": "@@ -55,13 +56,17 @@\n \t * Function which will delete all resources by their PIDs, and also delete any resources that were undeletable due to\n \t * VersionConflictException\n \t *\n-\t * @param theLongs\n+\t * @param theResourcePids\n \t */\n \t@Transactional\n-\tpublic void deleteResourcesAndHandleConflicts(List<Long> theLongs) {\n+\tpublic void deletePersonResourcesAndHandleConflicts(List<Long> theResourcePids) {\n+\t\tList<ResourcePersistentId> resourceIds = ResourcePersistentId.fromLongList(theResourcePids);\n+\t\tourLog.info(\"Deleting {} Person resources...\", resourceIds.size());\n \t\tDeleteConflictList\n \t\t\tdeleteConflictList = new DeleteConflictList();\n-\t\ttheLongs.stream().forEach(pid -> deleteCascade(pid, deleteConflictList));\n+\n+\t\tIFhirResourceDao<?> resourceDao = myDaoRegistry.getResourceDao(\"Person\");\n+\t\tresourceDao.deletePidList(ProviderConstants.EMPI_CLEAR, resourceIds, deleteConflictList, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NTE2Mw=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY3NDcxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0MDo1MFrOHY-O4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowMTo0MlrOHZTvug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzQ4OA==", "bodyText": "I thought we had previously dealt with the issue of empty candidateSearchParams? Maybe I'm misremembering", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495947488", "createdAt": "2020-09-28T13:40:50Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvc.java", "diffHunk": "@@ -56,15 +56,19 @@\n \t */\n \tpublic boolean shouldBeProcessed(IAnyResource theResource) {\n \t\tString resourceType = myFhirContext.getResourceType(theResource);\n-\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = empiSettings.getEmpiRules().getCandidateSearchParams();\n+\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = myEmpiSettings.getEmpiRules().getCandidateSearchParams();\n+\n+\t\tif (candidateSearchParams.isEmpty()) {\n+\t\t\treturn true;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5OTk2Mg==", "bodyText": "Ya I thought so too.  But this bug was here.  I wonder if it manifested in different ways for different scenarios...?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496299962", "createdAt": "2020-09-29T00:01:42Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/EmpiResourceFilteringSvc.java", "diffHunk": "@@ -56,15 +56,19 @@\n \t */\n \tpublic boolean shouldBeProcessed(IAnyResource theResource) {\n \t\tString resourceType = myFhirContext.getResourceType(theResource);\n-\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = empiSettings.getEmpiRules().getCandidateSearchParams();\n+\t\tList<EmpiResourceSearchParamJson> candidateSearchParams = myEmpiSettings.getEmpiRules().getCandidateSearchParams();\n+\n+\t\tif (candidateSearchParams.isEmpty()) {\n+\t\t\treturn true;\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzQ4OA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY4MzUxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiPersonFindingSvc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0Mjo1MVrOHY-UVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowMjo1OFrOHZTxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0ODg4Nw==", "bodyText": "Either change this line to Person Resources to match above line, or change above line to match Persons", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495948887", "createdAt": "2020-09-28T13:42:51Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiPersonFindingSvc.java", "diffHunk": "@@ -50,9 +50,9 @@\n \t * 0. First, check the incoming Resource for an EID. If it is present, and we can find a Person with this EID, it automatically matches.\n \t * 1. First, check link table for any entries where this baseresource is the target of a person. If found, return.\n \t * 2. If none are found, attempt to find Person Resources which link to this theResource.\n-\t * 3. If none are found, attempt to find Persons similar to our incoming resource based on the EMPI rules and similarity metrics.\n+\t * 3. If none are found, attempt to find Persons similar to our incoming resource based on the EMPI rules and field matchers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDM0MQ==", "bodyText": "I generally prefer to use Person Resources", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496300341", "createdAt": "2020-09-29T00:02:58Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/main/java/ca/uhn/fhir/jpa/empi/svc/candidate/EmpiPersonFindingSvc.java", "diffHunk": "@@ -50,9 +50,9 @@\n \t * 0. First, check the incoming Resource for an EID. If it is present, and we can find a Person with this EID, it automatically matches.\n \t * 1. First, check link table for any entries where this baseresource is the target of a person. If found, return.\n \t * 2. If none are found, attempt to find Person Resources which link to this theResource.\n-\t * 3. If none are found, attempt to find Persons similar to our incoming resource based on the EMPI rules and similarity metrics.\n+\t * 3. If none are found, attempt to find Persons similar to our incoming resource based on the EMPI rules and field matchers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0ODg4Nw=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY4NzQ5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0Mzo0MVrOHY-WtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNDoxM1rOHZTyWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTQ5Mg==", "bodyText": "may as well rename the member variable to match new class name.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495949492", "createdAt": "2020-09-28T13:43:41Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImplTest.java", "diffHunk": "@@ -17,7 +17,7 @@\n class EmpiBatchSvcImplTest extends BaseEmpiR4Test {\n \n \t@Autowired\n-\tIEmpiBatchSvc myEmpiBatchSvc;\n+    IEmpiSubmitSvc myEmpiBatchSvc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMDYzNQ==", "bodyText": "oops.  IJ is supposed to catch those for me!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496300635", "createdAt": "2020-09-29T00:04:13Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiBatchSvcImplTest.java", "diffHunk": "@@ -17,7 +17,7 @@\n class EmpiBatchSvcImplTest extends BaseEmpiR4Test {\n \n \t@Autowired\n-\tIEmpiBatchSvc myEmpiBatchSvc;\n+    IEmpiSubmitSvc myEmpiBatchSvc;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTQ5Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY4ODU1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiCandidateSearchCriteriaBuilderSvcTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0Mzo1NVrOHY-XWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0Mzo1NVrOHY-XWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTY1Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495949656", "createdAt": "2020-09-28T13:43:55Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiCandidateSearchCriteriaBuilderSvcTest.java", "diffHunk": "@@ -67,7 +67,18 @@ public void testIdentifier() {\n \t\tsearchParamJson.addSearchParam(\"identifier\");\n \t\tOptional<String> result = myEmpiCandidateSearchCriteriaBuilderSvc.buildResourceQueryString(\"Patient\", patient, Collections.emptyList(), searchParamJson);\n \t\tassertTrue(result.isPresent());\n-\t\tassertEquals(result.get(), \"Patient?identifier=urn:oid:1.2.36.146.595.217.0.1|12345\");\n+\t\tassertEquals(result.get(), \"Patient?identifier=urn%3Aoid%3A1.2.36.146.595.217.0.1%7C12345\");\n+\t}\n+\n+\t@Test\n+\tpublic void testIdentifierSpaceIsEscaped() {\n+\t\tPatient patient = new Patient();\n+\t\tpatient.addIdentifier().setSystem(\"urn:oid:1.2.36.146.595.217.0.1\").setValue(\"abc def\");\n+\t\tEmpiResourceSearchParamJson searchParamJson = new EmpiResourceSearchParamJson();\n+\t\tsearchParamJson.addSearchParam(\"identifier\");\n+\t\tOptional<String> result = myEmpiCandidateSearchCriteriaBuilderSvc.buildResourceQueryString(\"Patient\", patient, Collections.emptyList(), searchParamJson);\n+\t\tassertTrue(result.isPresent());\n+\t\tassertEquals(\"Patient?identifier=urn%3Aoid%3A1.2.36.146.595.217.0.1%7Cabc%20def\", result.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDY5MzI3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonMergerSvcTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0NDo1NlrOHY-aLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1MDowNlrOHZrg1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MDM4Mg==", "bodyText": "im confused about the point of this assert, I don't understand why this possibleLinkedTo plays into the test.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495950382", "createdAt": "2020-09-28T13:44:56Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonMergerSvcTest.java", "diffHunk": "@@ -144,21 +144,21 @@ public void emptyFromFullTo() {\n \tpublic void fromLinkToNoLink() {\n \t\tcreateEmpiLink(myFromPerson, myTargetPatient1);\n \n-\t\tmergePersons();\n-\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(myToPerson);\n+\t\tPerson mergedPerson = mergePersons();\n+\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(mergedPerson);\n \t\tassertEquals(1, links.size());\n-\t\tassertThat(myToPerson, is(possibleLinkedTo(myTargetPatient1)));\n+\t\tassertThat(mergedPerson, is(possibleLinkedTo(myTargetPatient1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTgyOA==", "bodyText": "It's all about the mergePersons() on line 147 which merges fromPerson into toPerson.\nI changed the API so that you now pass in a reference instead of a resource, and so needed to fix some tests.  Before it lazily took advantage of the way it was implemented.  This way is more clear.\nIn this case we're checking that if from has a link and to doesn't, then post merge the merged person has the link.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496301828", "createdAt": "2020-09-29T00:08:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonMergerSvcTest.java", "diffHunk": "@@ -144,21 +144,21 @@ public void emptyFromFullTo() {\n \tpublic void fromLinkToNoLink() {\n \t\tcreateEmpiLink(myFromPerson, myTargetPatient1);\n \n-\t\tmergePersons();\n-\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(myToPerson);\n+\t\tPerson mergedPerson = mergePersons();\n+\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(mergedPerson);\n \t\tassertEquals(1, links.size());\n-\t\tassertThat(myToPerson, is(possibleLinkedTo(myTargetPatient1)));\n+\t\tassertThat(mergedPerson, is(possibleLinkedTo(myTargetPatient1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MDM4Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4OTM2Ng==", "bodyText": "Ah I see, and that possible link was pre-existing.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496689366", "createdAt": "2020-09-29T12:50:06Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/java/ca/uhn/fhir/jpa/empi/svc/EmpiPersonMergerSvcTest.java", "diffHunk": "@@ -144,21 +144,21 @@ public void emptyFromFullTo() {\n \tpublic void fromLinkToNoLink() {\n \t\tcreateEmpiLink(myFromPerson, myTargetPatient1);\n \n-\t\tmergePersons();\n-\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(myToPerson);\n+\t\tPerson mergedPerson = mergePersons();\n+\t\tList<EmpiLink> links = myEmpiLinkDaoSvc.findEmpiLinksByPerson(mergedPerson);\n \t\tassertEquals(1, links.size());\n-\t\tassertThat(myToPerson, is(possibleLinkedTo(myTargetPatient1)));\n+\t\tassertThat(mergedPerson, is(possibleLinkedTo(myTargetPatient1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MDM4Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDcxMzQ3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiControllerSvc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0OToxMVrOHY-mPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowODozOFrOHZT3Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzQ2OA==", "bodyText": "Yeah add the javadocs here I suppose", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495953468", "createdAt": "2020-09-28T13:49:11Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiControllerSvc.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+\n+import javax.annotation.Nullable;\n+import java.util.stream.Stream;\n+\n+public interface IEmpiControllerSvc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTkxMA==", "bodyText": "see comment above", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496301910", "createdAt": "2020-09-29T00:08:38Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiControllerSvc.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package ca.uhn.fhir.empi.api;\n+\n+import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+\n+import javax.annotation.Nullable;\n+import java.util.stream.Stream;\n+\n+public interface IEmpiControllerSvc {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzQ2OA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDcxNDc0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiLinkQuerySvc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0OToyN1rOHY-nDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxMDoxNVrOHZT5KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzY3OQ==", "bodyText": "This could also use some javadocs", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495953679", "createdAt": "2020-09-28T13:49:27Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiLinkQuerySvc.java", "diffHunk": "@@ -21,12 +21,11 @@\n  */\n \n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n \n-public interface IEmpiLinkQuerySvc {\n-\tIBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext);\n-\n-\tIBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext);\n+import java.util.stream.Stream;\n \n+public interface IEmpiLinkQuerySvc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjM3Ng==", "bodyText": "I added a javadoc over the class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496302376", "createdAt": "2020-09-29T00:10:15Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/api/IEmpiLinkQuerySvc.java", "diffHunk": "@@ -21,12 +21,11 @@\n  */\n \n import ca.uhn.fhir.empi.model.EmpiTransactionContext;\n-import org.hl7.fhir.instance.model.api.IBaseParameters;\n import org.hl7.fhir.instance.model.api.IIdType;\n \n-public interface IEmpiLinkQuerySvc {\n-\tIBaseParameters queryLinks(IIdType thePersonId, IIdType theTargetId, EmpiMatchResultEnum theMatchResult, EmpiLinkSourceEnum theLinkSource, EmpiTransactionContext theEmpiContext);\n-\n-\tIBaseParameters getPossibleDuplicates(EmpiTransactionContext theEmpiContext);\n+import java.util.stream.Stream;\n \n+public interface IEmpiLinkQuerySvc {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MzY3OQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDcyNTExOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/model/EmpiTransactionContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1MTozOFrOHY-tKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxMDo1OFrOHZT58A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTI0MA==", "bodyText": "Hmm, I thought the original purpose of this enum was for EMPI to determine what the original resource change operation was for handling updates. Do we actually use all these enum values? I would imageine we want like, CREATE, UPDATE and then essentially INTERNAL_EMPI_OPERATION. Though I guess there's no harm in splitting them out.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495955240", "createdAt": "2020-09-28T13:51:38Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/model/EmpiTransactionContext.java", "diffHunk": "@@ -33,9 +33,13 @@\n \n \n \tpublic enum OperationType {\n-\t\tCREATE,\n-\t\tUPDATE,\n-\t\tBATCH,\n+\t\tCREATE_RESOURCE,\n+\t\tUPDATE_RESOURCE,\n+\t\tSUBMIT_RESOURCES_TO_EMPI,\n+\t\tQUERY_LINKS,\n+\t\tUPDATE_LINK,\n+\t\tDUPLICATE_PERSONS,\n+\t\tNOT_DUPLICATE,\n \t\tMERGE_PERSONS\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjU3Ng==", "bodyText": "The purpose of this is to record what the trigger was in the transaction logs.  The more detail the better I figure.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496302576", "createdAt": "2020-09-29T00:10:58Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/model/EmpiTransactionContext.java", "diffHunk": "@@ -33,9 +33,13 @@\n \n \n \tpublic enum OperationType {\n-\t\tCREATE,\n-\t\tUPDATE,\n-\t\tBATCH,\n+\t\tCREATE_RESOURCE,\n+\t\tUPDATE_RESOURCE,\n+\t\tSUBMIT_RESOURCES_TO_EMPI,\n+\t\tQUERY_LINKS,\n+\t\tUPDATE_LINK,\n+\t\tDUPLICATE_PERSONS,\n+\t\tNOT_DUPLICATE,\n \t\tMERGE_PERSONS\n \t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTI0MA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDc1MDY0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1Njo1MVrOHY-8zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0MzowNlrOHZt1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA==", "bodyText": "Why are some of these methods static?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495959244", "createdAt": "2020-09-28T13:56:51Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjgxMg==", "bodyText": "Funny I used to always ask James the same question.  And he'd reply, \"because they're static.\"  So Ima pull a James and respond, \"because they're static.\"  :-)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496302812", "createdAt": "2020-09-29T00:11:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5Mzc1Mg==", "bodyText": "I just find it weird to have a bean that exposes half of its API statically and half non-statically. I see that it is static, but it just seems kinda annoying for the developer. \"Do I have to call this function on the bean or the class?\". Didn't we land on a difference between Util and Helper a while ago? This isn't a blocker by any means, but it seems like this static functionality could be broken into a util class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496693752", "createdAt": "2020-09-29T12:56:34Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNzU0Nw==", "bodyText": "I agree, that's a good point.  It happened by accident.  I will fix.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496727547", "createdAt": "2020-09-29T13:43:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1OTI0NA=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDc2Mjg0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1OTozNVrOHY_Emg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxMzo0N1rOHZT8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MTI0Mg==", "bodyText": "This is technically false right? Subscriptions can be EMPI-managed. Not sure if that is relevant here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495961242", "createdAt": "2020-09-28T13:59:35Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {\n+\t\tif (theMatchResult == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn EmpiMatchResultEnum.valueOf(theMatchResult);\n+\t}\n+\n+\tpublic static EmpiLinkSourceEnum extractLinkSourceOrNull(String theLinkSource) {\n+\t\tif (theLinkSource == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn EmpiLinkSourceEnum.valueOf(theLinkSource);\n+\t}\n+\n+\tpublic static IIdType extractPersonIdDtOrNull(String theName, String thePersonId) {\n+\t\tif (thePersonId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getPersonIdDtOrThrowException(theName, thePersonId);\n+\t}\n+\n+\tpublic static IIdType extractTargetIdDtOrNull(String theName, String theTargetId) {\n+\t\tif (theTargetId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getTargetIdDtOrThrowException(theName, theTargetId);\n+\t}\n+\n+\tprivate static IdDt getPersonIdDtOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = new IdDt(theId);\n+\t\tif (!\"Person\".equals(personId.getResourceType()) ||\n+\t\t\tpersonId.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(theParamName + \" is '\" + theId + \"'.  must have form Person/<id> where <id> is the id of the person\");\n+\t\t}\n+\t\treturn personId;\n+\t}\n+\n+\tpublic static IIdType getTargetIdDtOrThrowException(String theParamName, String theId) {\n+\t\tIdDt targetId = new IdDt(theId);\n+\t\tString resourceType = targetId.getResourceType();\n+\t\tif (!EmpiUtil.supportedTargetType(resourceType) ||\n+\t\t\ttargetId.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(theParamName + \" is '\" + theId + \"'.  must have form Patient/<id> or Practitioner/<id> where <id> is the id of the resource\");\n+\t\t}\n+\t\treturn targetId;\n+\t}\n+\n+\tpublic void validateMergeResources(IAnyResource theFromPerson, IAnyResource theToPerson) {\n+\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, theFromPerson);\n+\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, theToPerson);\n+\t}\n+\n+\tpublic String toJson(IAnyResource theAnyResource) {\n+\t\treturn myFhirContext.newJsonParser().encodeResourceToString(theAnyResource);\n+\t}\n+\n+\tprivate void validateIsEmpiManaged(String theName, IAnyResource thePerson) {\n+\t\tif (!\"Person\".equals(myFhirContext.getResourceType(thePerson))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMzI4NA==", "bodyText": "EmpiManaged has a specific meaning in this context.   Probably not named the best...", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496303284", "createdAt": "2020-09-29T00:13:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiControllerHelper.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.uhn.fhir.empi.provider;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiConstants;\n+import ca.uhn.fhir.empi.api.EmpiLinkSourceEnum;\n+import ca.uhn.fhir.empi.api.EmpiMatchResultEnum;\n+import ca.uhn.fhir.empi.util.EmpiUtil;\n+import ca.uhn.fhir.model.primitive.IdDt;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.provider.ProviderConstants;\n+import ca.uhn.fhir.validation.IResourceLoader;\n+import org.hl7.fhir.instance.model.api.IAnyResource;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class EmpiControllerHelper {\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final IResourceLoader myResourceLoader;\n+\n+\t@Autowired\n+\tpublic EmpiControllerHelper(FhirContext theFhirContext, IResourceLoader theResourceLoader) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyResourceLoader = theResourceLoader;\n+\t}\n+\n+\tpublic void validateSameVersion(IAnyResource theResource, String theResourceId) {\n+\t\tString storedId = theResource.getIdElement().getValue();\n+\t\tif (hasVersionIdPart(theResourceId) && !storedId.equals(theResourceId)) {\n+\t\t\tthrow new ResourceVersionConflictException(\"Requested resource \" + theResourceId + \" is not the latest version.  Latest version is \" + storedId);\n+\t\t}\n+\t}\n+\n+\tprivate boolean hasVersionIdPart(String theId) {\n+\t\treturn new IdDt(theId).hasVersionIdPart();\n+\t}\n+\n+\tpublic IAnyResource getLatestPersonFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = getPersonIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(personId.toUnqualifiedVersionless());\n+\t}\n+\n+\n+\tpublic IAnyResource getLatestTargetFromIdOrThrowException(String theParamName, String theId) {\n+\t\tIIdType targetId = getTargetIdDtOrThrowException(theParamName, theId);\n+\t\treturn loadResource(targetId.toUnqualifiedVersionless());\n+\t}\n+\n+\tprotected IAnyResource loadResource(IIdType theResourceId) {\n+\t\tClass<? extends IBaseResource> resourceClass = myFhirContext.getResourceDefinition(theResourceId.getResourceType()).getImplementingClass();\n+\t\treturn (IAnyResource) myResourceLoader.load(resourceClass, theResourceId);\n+\t}\n+\n+\tpublic static EmpiMatchResultEnum extractMatchResultOrNull(String theMatchResult) {\n+\t\tif (theMatchResult == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn EmpiMatchResultEnum.valueOf(theMatchResult);\n+\t}\n+\n+\tpublic static EmpiLinkSourceEnum extractLinkSourceOrNull(String theLinkSource) {\n+\t\tif (theLinkSource == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn EmpiLinkSourceEnum.valueOf(theLinkSource);\n+\t}\n+\n+\tpublic static IIdType extractPersonIdDtOrNull(String theName, String thePersonId) {\n+\t\tif (thePersonId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getPersonIdDtOrThrowException(theName, thePersonId);\n+\t}\n+\n+\tpublic static IIdType extractTargetIdDtOrNull(String theName, String theTargetId) {\n+\t\tif (theTargetId == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getTargetIdDtOrThrowException(theName, theTargetId);\n+\t}\n+\n+\tprivate static IdDt getPersonIdDtOrThrowException(String theParamName, String theId) {\n+\t\tIdDt personId = new IdDt(theId);\n+\t\tif (!\"Person\".equals(personId.getResourceType()) ||\n+\t\t\tpersonId.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(theParamName + \" is '\" + theId + \"'.  must have form Person/<id> where <id> is the id of the person\");\n+\t\t}\n+\t\treturn personId;\n+\t}\n+\n+\tpublic static IIdType getTargetIdDtOrThrowException(String theParamName, String theId) {\n+\t\tIdDt targetId = new IdDt(theId);\n+\t\tString resourceType = targetId.getResourceType();\n+\t\tif (!EmpiUtil.supportedTargetType(resourceType) ||\n+\t\t\ttargetId.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(theParamName + \" is '\" + theId + \"'.  must have form Patient/<id> or Practitioner/<id> where <id> is the id of the resource\");\n+\t\t}\n+\t\treturn targetId;\n+\t}\n+\n+\tpublic void validateMergeResources(IAnyResource theFromPerson, IAnyResource theToPerson) {\n+\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_FROM_PERSON_ID, theFromPerson);\n+\t\tvalidateIsEmpiManaged(ProviderConstants.EMPI_MERGE_PERSONS_TO_PERSON_ID, theToPerson);\n+\t}\n+\n+\tpublic String toJson(IAnyResource theAnyResource) {\n+\t\treturn myFhirContext.newJsonParser().encodeResourceToString(theAnyResource);\n+\t}\n+\n+\tprivate void validateIsEmpiManaged(String theName, IAnyResource thePerson) {\n+\t\tif (!\"Person\".equals(myFhirContext.getResourceType(thePerson))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MTI0Mg=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg4Mjc1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNTowNFrOHZAM_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxNjoyMFrOHZT_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3OTc3NQ==", "bodyText": "If we are renaming the operation to SUBMIT anyhow, probably good to change the name of EmpiSubmitSvc.runEmpiOnAllTargetTypes to EmpiSubmitSvc.submitAllTargetTypesToEmpi", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495979775", "createdAt": "2020-09-28T14:25:04Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "diffHunk": "@@ -169,68 +152,67 @@ public Parameters notDuplicate(@OperationParam(name=ProviderConstants.EMPI_QUERY\n \t\t\t\t\t\t\t\t\t\t\t ServletRequestDetails theRequestDetails) {\n \n \t\tvalidateNotDuplicateParameters(thePersonId, theTargetId);\n-\t\tIAnyResource person = getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_UPDATE_LINK_PERSON_ID, thePersonId.getValue());\n-\t\tIAnyResource target = getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_UPDATE_LINK_TARGET_ID, theTargetId.getValue());\n-\t\tvalidateSameVersion(person, thePersonId);\n-\t\tvalidateSameVersion(target, theTargetId);\n+\t\tmyEmpiControllerSvc.notDuplicatePerson(thePersonId.getValue(), theTargetId.getValue(), createEmpiContext(theRequestDetails, EmpiTransactionContext.OperationType.NOT_DUPLICATE));\n \n-\t\treturn (Parameters) myEmpiLinkUpdaterSvc.notDuplicatePerson(person, target, createEmpiContext(theRequestDetails));\n+\t\tParameters retval = (Parameters) ParametersUtil.newInstance(myFhirContext);\n+\t\tParametersUtil.addParameterToParametersBoolean(myFhirContext, retval, \"success\", true);\n+\t\treturn retval;\n \t}\n \n-\t@Operation(name = ProviderConstants.OPERATION_EMPI_BATCH_RUN, idempotent = false, returnParameters = {\n+\t@Operation(name = ProviderConstants.OPERATION_EMPI_SUBMIT, idempotent = false, returnParameters = {\n \t\t@OperationParam(name = ProviderConstants.OPERATION_EMPI_BATCH_RUN_OUT_PARAM_SUBMIT_COUNT, type= IntegerType.class)\n \t})\n \tpublic Parameters empiBatchOnAllTargets(\n \t\t@OperationParam(name= ProviderConstants.EMPI_BATCH_RUN_CRITERIA,min = 0 , max = 1) StringType theCriteria,\n \t\tServletRequestDetails theRequestDetails) {\n \t\tString criteria = convertCriteriaToString(theCriteria);\n-\t\tlong submittedCount  = myEmpiBatchSvc.runEmpiOnAllTargetTypes(criteria);\n+\t\tlong submittedCount  = myEmpiSubmitSvc.runEmpiOnAllTargetTypes(criteria);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNDA5NQ==", "bodyText": "good call.  done\nfixed all the other ones too", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496304095", "createdAt": "2020-09-29T00:16:20Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/provider/EmpiProviderR4.java", "diffHunk": "@@ -169,68 +152,67 @@ public Parameters notDuplicate(@OperationParam(name=ProviderConstants.EMPI_QUERY\n \t\t\t\t\t\t\t\t\t\t\t ServletRequestDetails theRequestDetails) {\n \n \t\tvalidateNotDuplicateParameters(thePersonId, theTargetId);\n-\t\tIAnyResource person = getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_UPDATE_LINK_PERSON_ID, thePersonId.getValue());\n-\t\tIAnyResource target = getLatestPersonFromIdOrThrowException(ProviderConstants.EMPI_UPDATE_LINK_TARGET_ID, theTargetId.getValue());\n-\t\tvalidateSameVersion(person, thePersonId);\n-\t\tvalidateSameVersion(target, theTargetId);\n+\t\tmyEmpiControllerSvc.notDuplicatePerson(thePersonId.getValue(), theTargetId.getValue(), createEmpiContext(theRequestDetails, EmpiTransactionContext.OperationType.NOT_DUPLICATE));\n \n-\t\treturn (Parameters) myEmpiLinkUpdaterSvc.notDuplicatePerson(person, target, createEmpiContext(theRequestDetails));\n+\t\tParameters retval = (Parameters) ParametersUtil.newInstance(myFhirContext);\n+\t\tParametersUtil.addParameterToParametersBoolean(myFhirContext, retval, \"success\", true);\n+\t\treturn retval;\n \t}\n \n-\t@Operation(name = ProviderConstants.OPERATION_EMPI_BATCH_RUN, idempotent = false, returnParameters = {\n+\t@Operation(name = ProviderConstants.OPERATION_EMPI_SUBMIT, idempotent = false, returnParameters = {\n \t\t@OperationParam(name = ProviderConstants.OPERATION_EMPI_BATCH_RUN_OUT_PARAM_SUBMIT_COUNT, type= IntegerType.class)\n \t})\n \tpublic Parameters empiBatchOnAllTargets(\n \t\t@OperationParam(name= ProviderConstants.EMPI_BATCH_RUN_CRITERIA,min = 0 , max = 1) StringType theCriteria,\n \t\tServletRequestDetails theRequestDetails) {\n \t\tString criteria = convertCriteriaToString(theCriteria);\n-\t\tlong submittedCount  = myEmpiBatchSvc.runEmpiOnAllTargetTypes(criteria);\n+\t\tlong submittedCount  = myEmpiSubmitSvc.runEmpiOnAllTargetTypes(criteria);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3OTc3NQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5MTE2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNjo1MlrOHZASLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxODoyM1rOHZUB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTEwMQ==", "bodyText": "This function signature can be changed to just take the field match, it can extract similarity internally. Nitpick though /shrug", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495981101", "createdAt": "2020-09-28T14:26:52Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -99,18 +100,18 @@ private void validateMatchFields(EmpiRulesJson theEmpiRulesJson) {\n \t\t\t\tthrow new ConfigurationException(\"Two MatchFields have the same name '\" + fieldMatch.getName() + \"'\");\n \t\t\t}\n \t\t\tnames.add(fieldMatch.getName());\n-\t\t\tvalidateThreshold(fieldMatch);\n+\t\t\tif (fieldMatch.getSimilarity() != null) {\n+\t\t\t\tvalidateSimilarity(fieldMatch, fieldMatch.getSimilarity());\n+\t\t\t} else if (fieldMatch.getMatcher() == null) {\n+\t\t\t\tthrow new ConfigurationException(\"MatchField \" + fieldMatch.getName() + \" has neither a similarity nor a matcher.  At least one must be present.\");\n+\t\t\t}\n \t\t\tvalidatePath(fieldMatch);\n \t\t}\n \t}\n \n-\tprivate void validateThreshold(EmpiFieldMatchJson theFieldMatch) {\n-\t\tif (theFieldMatch.getMetric().isSimilarity()) {\n-\t\t\tif (theFieldMatch.getMatchThreshold() == null) {\n-\t\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" requires a matchThreshold\");\n-\t\t\t}\n-\t\t} else if (theFieldMatch.getMatchThreshold() != null) {\n-\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" should not have a matchThreshold\");\n+\tprivate void validateSimilarity(EmpiFieldMatchJson theFieldMatch, EmpiSimilarityJson theSimilarity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNDYxNw==", "bodyText": "good call.  fixed.  this was a holdover from the refactoring.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496304617", "createdAt": "2020-09-29T00:18:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -99,18 +100,18 @@ private void validateMatchFields(EmpiRulesJson theEmpiRulesJson) {\n \t\t\t\tthrow new ConfigurationException(\"Two MatchFields have the same name '\" + fieldMatch.getName() + \"'\");\n \t\t\t}\n \t\t\tnames.add(fieldMatch.getName());\n-\t\t\tvalidateThreshold(fieldMatch);\n+\t\t\tif (fieldMatch.getSimilarity() != null) {\n+\t\t\t\tvalidateSimilarity(fieldMatch, fieldMatch.getSimilarity());\n+\t\t\t} else if (fieldMatch.getMatcher() == null) {\n+\t\t\t\tthrow new ConfigurationException(\"MatchField \" + fieldMatch.getName() + \" has neither a similarity nor a matcher.  At least one must be present.\");\n+\t\t\t}\n \t\t\tvalidatePath(fieldMatch);\n \t\t}\n \t}\n \n-\tprivate void validateThreshold(EmpiFieldMatchJson theFieldMatch) {\n-\t\tif (theFieldMatch.getMetric().isSimilarity()) {\n-\t\t\tif (theFieldMatch.getMatchThreshold() == null) {\n-\t\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" requires a matchThreshold\");\n-\t\t\t}\n-\t\t} else if (theFieldMatch.getMatchThreshold() != null) {\n-\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" should not have a matchThreshold\");\n+\tprivate void validateSimilarity(EmpiFieldMatchJson theFieldMatch, EmpiSimilarityJson theSimilarity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTEwMQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDg5NTY2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiFieldMatchJson.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNzo1MVrOHZAU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1Nzo1OVrOHZr1sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgwNQ==", "bodyText": "Not sure if its necessary, but you could close the  tag", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495981805", "createdAt": "2020-09-28T14:27:51Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiFieldMatchJson.java", "diffHunk": "@@ -20,45 +20,38 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.empi.rules.metric.EmpiMetricEnum;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiMatchEvaluation;\n+import ca.uhn.fhir.empi.rules.matcher.EmpiMatcherEnum;\n import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.hl7.fhir.instance.model.api.IBase;\n \n import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n \n /**\n  * Contains all business data for determining if a match exists on a particular field, given:\n- *\n- * 1. A {@link EmpiMetricEnum} which determines the actual similarity values.\n+ * <p>\n+ * 1. A {@link EmpiMatcherEnum} which determines the actual similarity values.\n  * 2. A given resource type (e.g. Patient)\n  * 3. A given FHIRPath expression for finding the particular primitive to be used for comparison. (e.g. name.given)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjIzNg==", "bodyText": "okiiiiiiii", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496196236", "createdAt": "2020-09-28T19:55:03Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiFieldMatchJson.java", "diffHunk": "@@ -20,45 +20,38 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.empi.rules.metric.EmpiMetricEnum;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiMatchEvaluation;\n+import ca.uhn.fhir.empi.rules.matcher.EmpiMatcherEnum;\n import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.hl7.fhir.instance.model.api.IBase;\n \n import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n \n /**\n  * Contains all business data for determining if a match exists on a particular field, given:\n- *\n- * 1. A {@link EmpiMetricEnum} which determines the actual similarity values.\n+ * <p>\n+ * 1. A {@link EmpiMatcherEnum} which determines the actual similarity values.\n  * 2. A given resource type (e.g. Patient)\n  * 3. A given FHIRPath expression for finding the particular primitive to be used for comparison. (e.g. name.given)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgwNQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5NDcwNA==", "bodyText": "heh I tried to type <p> in my previous comment, but it just...made a new paragraph, not sure what I was expecting.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496694704", "createdAt": "2020-09-29T12:57:59Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiFieldMatchJson.java", "diffHunk": "@@ -20,45 +20,38 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.empi.rules.metric.EmpiMetricEnum;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.api.EmpiMatchEvaluation;\n+import ca.uhn.fhir.empi.rules.matcher.EmpiMatcherEnum;\n import ca.uhn.fhir.model.api.IModelJson;\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.hl7.fhir.instance.model.api.IBase;\n \n import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n \n /**\n  * Contains all business data for determining if a match exists on a particular field, given:\n- *\n- * 1. A {@link EmpiMetricEnum} which determines the actual similarity values.\n+ * <p>\n+ * 1. A {@link EmpiMatcherEnum} which determines the actual similarity values.\n  * 2. A given resource type (e.g. Patient)\n  * 3. A given FHIRPath expression for finding the particular primitive to be used for comparison. (e.g. name.given)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgwNQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk1OTYyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MToyMVrOHZA7wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0Mjo1MVrOHZrO3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTc0NQ==", "bodyText": "I thought DTs were DSTU2? Is this canonical?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495991745", "createdAt": "2020-09-28T14:41:21Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTA1Mg==", "bodyText": "Dts are version independent.  E.g. we use IdDt all over the place.  I wanted to implement the data type so the connection to it was clear.  But it is superfluous.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305052", "createdAt": "2020-09-29T00:20:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTc0NQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4NDc2NQ==", "bodyText": "Ah interesting, I was under the impression that since all STU3+ code I saw IDType() everywhere, that this was stu-specifc.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496684765", "createdAt": "2020-09-29T12:42:51Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTc0NQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk2NTkwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MjozOFrOHZA_hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyMDo1MVrOHZUEdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MjcwOQ==", "bodyText": "Might as well use accessors here", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495992709", "createdAt": "2020-09-28T14:42:38Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;\n+\n+\t@Override\n+\tpublic UriDt getSystemElement() {\n+\t\treturn mySystem;\n+\t}\n+\n+\t@Override\n+\tpublic StringDt getValueElement() {\n+\t\treturn myValue;\n+\t}\n+\n+\t@Override\n+\tpublic CanonicalIdentifier setSystem(String theUri) {\n+\t\tmySystem = new UriDt((theUri));\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic CanonicalIdentifier setValue(String theString) {\n+\t\tmyValue = new StringDt(theString);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic <T extends IElement> List<T> getAllPopulatedChildElementsOfType(Class<T> theType) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\tif (mySystem != null && !mySystem.isEmpty()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (myValue != null && !myValue.isEmpty()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object theO) {\n+\t\tif (this == theO) return true;\n+\n+\t\tif (theO == null || getClass() != theO.getClass()) return false;\n+\n+\t\tCanonicalIdentifier that = (CanonicalIdentifier) theO;\n+\n+\t\treturn new EqualsBuilder()\n+\t\t\t.append(mySystem, that.mySystem)\n+\t\t\t.append(myValue, that.myValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTI3MA==", "bodyText": "That's generated code.  Maybe I picked the wrong values when I ran it?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305270", "createdAt": "2020-09-29T00:20:51Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/CanonicalIdentifier.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.model.api.IElement;\n+import ca.uhn.fhir.model.base.composite.BaseIdentifierDt;\n+import ca.uhn.fhir.model.primitive.StringDt;\n+import ca.uhn.fhir.model.primitive.UriDt;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+import java.util.List;\n+\n+/**\n+ * Version independent identifier\n+ */\n+public class CanonicalIdentifier extends BaseIdentifierDt {\n+\tUriDt mySystem;\n+\tStringDt myValue;\n+\n+\t@Override\n+\tpublic UriDt getSystemElement() {\n+\t\treturn mySystem;\n+\t}\n+\n+\t@Override\n+\tpublic StringDt getValueElement() {\n+\t\treturn myValue;\n+\t}\n+\n+\t@Override\n+\tpublic CanonicalIdentifier setSystem(String theUri) {\n+\t\tmySystem = new UriDt((theUri));\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic CanonicalIdentifier setValue(String theString) {\n+\t\tmyValue = new StringDt(theString);\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic <T extends IElement> List<T> getAllPopulatedChildElementsOfType(Class<T> theType) {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\t@Override\n+\tpublic boolean isEmpty() {\n+\t\tif (mySystem != null && !mySystem.isEmpty()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (myValue != null && !myValue.isEmpty()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object theO) {\n+\t\tif (this == theO) return true;\n+\n+\t\tif (theO == null || getClass() != theO.getClass()) return false;\n+\n+\t\tCanonicalIdentifier that = (CanonicalIdentifier) theO;\n+\n+\t\treturn new EqualsBuilder()\n+\t\t\t.append(mySystem, that.mySystem)\n+\t\t\t.append(myValue, that.myValue)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MjcwOQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk3MTM0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/IdentifierUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0Mzo0N1rOHZBC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyMTowM1rOHZUEng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MzU5OQ==", "bodyText": "Is this a TODO for now, or for later?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495993599", "createdAt": "2020-09-28T14:43:47Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/IdentifierUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import org.hl7.fhir.instance.model.api.IBase;\n+\n+public class IdentifierUtil {\n+\tpublic static CanonicalIdentifier identifierDtFromIdentifier(IBase theIdentifier) {\n+\t\tCanonicalIdentifier retval = new CanonicalIdentifier();\n+\n+\t\t// TODO add other fields like \"use\" etc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTMxMA==", "bodyText": "later.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305310", "createdAt": "2020-09-29T00:21:03Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/util/IdentifierUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ca.uhn.fhir.empi.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR - Enterprise Master Patient Index\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.rest.server.exceptions.InternalErrorException;\n+import org.hl7.fhir.instance.model.api.IBase;\n+\n+public class IdentifierUtil {\n+\tpublic static CanonicalIdentifier identifierDtFromIdentifier(IBase theIdentifier) {\n+\t\tCanonicalIdentifier retval = new CanonicalIdentifier();\n+\n+\t\t// TODO add other fields like \"use\" etc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MzU5OQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk4MTU1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/matcher/StringMatcherR4Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0NTo1M1rOHZBJFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoyMjowN1rOHZUFtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NTE1OQ==", "bodyText": "namadega?! a quick google reveals nothing. What is this?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r495995159", "createdAt": "2020-09-28T14:45:53Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/matcher/StringMatcherR4Test.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package ca.uhn.fhir.empi.rules.matcher;\n+\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumeration;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class StringMatcherR4Test extends BaseMatcherR4Test {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(StringMatcherR4Test.class);\n+\tpublic static final String LEFT = \"namadega\";\n+\tpublic static final String RIGHT = \"namaedga\";\n+\n+\t@Test\n+\tpublic void testNamadega() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwNTU5MQ==", "bodyText": "It is a person's name.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2104#discussion_r496305591", "createdAt": "2020-09-29T00:22:07Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/matcher/StringMatcherR4Test.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package ca.uhn.fhir.empi.rules.matcher;\n+\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumeration;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class StringMatcherR4Test extends BaseMatcherR4Test {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(StringMatcherR4Test.class);\n+\tpublic static final String LEFT = \"namadega\";\n+\tpublic static final String RIGHT = \"namaedga\";\n+\n+\t@Test\n+\tpublic void testNamadega() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NTE1OQ=="}, "originalCommit": {"oid": "0c5398959c332c56db94cd93be3e9a2b3b51ab92"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1801, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}