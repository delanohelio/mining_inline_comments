{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDQ4NTIz", "number": 1873, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoyMjo0MVrOEAS5eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozMDo0MFrOEATBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzQ1MDgxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoyMjo0MVrOGbfOxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo1MjowOVrOGbt4zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NjQyMQ==", "bodyText": "Why not 0000-01-01 and 9999-12-31 ?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431476421", "createdAt": "2020-05-27T22:22:41Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "diffHunk": "@@ -50,6 +54,8 @@\n \t\t\"http://hl7.org/fhir/StructureDefinition/*\")));\n \n \tpublic static final String DEFAULT_WEBSOCKET_CONTEXT_PATH = \"/websocket\";\n+\tprotected static final String DEFAULT_PERIOD_INDEX_START_OF_TIME = \"1700-01-01\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NjkyOQ==", "bodyText": "Someone might want to store genealogy data (or even ancestral disease information) that predates this date.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431476929", "createdAt": "2020-05-27T22:23:53Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "diffHunk": "@@ -50,6 +54,8 @@\n \t\t\"http://hl7.org/fhir/StructureDefinition/*\")));\n \n \tpublic static final String DEFAULT_WEBSOCKET_CONTEXT_PATH = \"/websocket\";\n+\tprotected static final String DEFAULT_PERIOD_INDEX_START_OF_TIME = \"1700-01-01\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NjQyMQ=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NzE1NQ==", "bodyText": "On the other hand, we should check that these dates work okay on the main databases, esp the timestamp versions of them.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431477155", "createdAt": "2020-05-27T22:24:34Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "diffHunk": "@@ -50,6 +54,8 @@\n \t\t\"http://hl7.org/fhir/StructureDefinition/*\")));\n \n \tpublic static final String DEFAULT_WEBSOCKET_CONTEXT_PATH = \"/websocket\";\n+\tprotected static final String DEFAULT_PERIOD_INDEX_START_OF_TIME = \"1700-01-01\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NjQyMQ=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNjU1OA==", "bodyText": "Did a bit of digging into supported limits in databases:\n\n\nJDBC Timestamp Datatype Low Value -4713 and High Value 9999\nMySQL 8: the range for DATETIME values is '1000-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999`\nPostgresql 12: Timestamp [without time zone] Low Value 4713 BC and High Value 294276 AD\nOracle: Timestamp Low Value 4712 BC and High Value 9999 CE\nH2: datetime2 Low Value -4713 and High Value 9999\n\n\nI'm gonna go with 1001 - 9000 for safety", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431716558", "createdAt": "2020-05-28T09:52:09Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "diffHunk": "@@ -50,6 +54,8 @@\n \t\t\"http://hl7.org/fhir/StructureDefinition/*\")));\n \n \tpublic static final String DEFAULT_WEBSOCKET_CONTEXT_PATH = \"/websocket\";\n+\tprotected static final String DEFAULT_PERIOD_INDEX_START_OF_TIME = \"1700-01-01\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NjQyMQ=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzQ2MzIwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoyNzo1MlrOGbfWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMToxOToyMlrOGbwqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3ODQyMg==", "bodyText": "I'm surprised you didn't need the DatePredicate logic.  I guess those queries just never worked?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431478422", "createdAt": "2020-05-27T22:27:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "diffHunk": "@@ -677,6 +677,16 @@ private void addDate_Period(String theResourceType, Set<ResourceIndexedSearchPar\n \t\tString endAsString = extractValueAsString(myPeriodEndValueChild, theValue);\n \n \t\tif (start != null || end != null) {\n+\n+\t\t\tif (start == null) {\n+\t\t\t\tstart = myModelConfig.getPeriodIndexStartOfTime().getValue();\n+\t\t\t\tstartAsString = myModelConfig.getPeriodIndexStartOfTime().getValueAsString();\n+\t\t\t}\n+\t\t\tif (end == null) {\n+\t\t\t\tend = myModelConfig.getPeriodIndexEndOfTime().getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2MTkyOA==", "bodyText": "Yup. I'm happy about that aspect of this change, no modifications to the search predicate logic were required.\nIt's not as bad as it maybe seemed- Date range searches almost all worked, there are only 2 cases that didn't:\n\nIndexed period with a lower bound and no upper bound, and then a search by date where the selector is gt ( a value > the lower bound)\nIndexed period with an upper bound and no lower bound, and then a search by date where the selector is lt ( a value < the upper bound)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431761928", "createdAt": "2020-05-28T11:19:22Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "diffHunk": "@@ -677,6 +677,16 @@ private void addDate_Period(String theResourceType, Set<ResourceIndexedSearchPar\n \t\tString endAsString = extractValueAsString(myPeriodEndValueChild, theValue);\n \n \t\tif (start != null || end != null) {\n+\n+\t\t\tif (start == null) {\n+\t\t\t\tstart = myModelConfig.getPeriodIndexStartOfTime().getValue();\n+\t\t\t\tstartAsString = myModelConfig.getPeriodIndexStartOfTime().getValueAsString();\n+\t\t\t}\n+\t\t\tif (end == null) {\n+\t\t\t\tend = myModelConfig.getPeriodIndexEndOfTime().getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3ODQyMg=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzQ2NTk5OnYy", "diffSide": "LEFT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4Test.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoyOTowN1rOGbfYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMToxOTo0N1rOGbwq2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3ODg2OA==", "bodyText": "Did this case just not work, so the assert was commented out?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431478868", "createdAt": "2020-05-27T22:29:07Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4Test.java", "diffHunk": "@@ -1118,143 +1118,6 @@ public void testCreateWrongType() {\n \t\t}\n \t}\n \n-\t@Test\n-\tpublic void testDatePeriodParamEndOnly() {\n-\t\t{\n-\t\t\tEncounter enc = new Encounter();\n-\t\t\tenc.addIdentifier().setSystem(\"testDatePeriodParam\").setValue(\"02\");\n-\t\t\tenc.getPeriod().getEndElement().setValueAsString(\"2001-01-02\");\n-\t\t\tmyEncounterDao.create(enc, mySrd);\n-\t\t}\n-\t\tSearchParameterMap params;\n-\t\tList<Encounter> encs;\n-\n-\t\tparams = new SearchParameterMap();\n-\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(null, \"2001-01-03\"));\n-\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n-\t\tencs = toList(myEncounterDao.search(params));\n-\t\tassertEquals(1, encs.size());\n-\n-\t\tparams = new SearchParameterMap();\n-\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(\"2001-01-01\", \"2001-01-03\"));\n-\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n-\t\t// encs = toList(ourEncounterDao.search(params));\n-\t\t// assertEquals(1, encs.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc1OTg4Mw==", "bodyText": "These tests weren't actually removed, I just moved them from FhirResourceDaoR4Test to FhirResourceDaoR4SearchNoFtTest.java in order to make them easier to find (that's where all the tests for the other search datatypes were, no idea why the date ones were here!)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431759883", "createdAt": "2020-05-28T11:15:06Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4Test.java", "diffHunk": "@@ -1118,143 +1118,6 @@ public void testCreateWrongType() {\n \t\t}\n \t}\n \n-\t@Test\n-\tpublic void testDatePeriodParamEndOnly() {\n-\t\t{\n-\t\t\tEncounter enc = new Encounter();\n-\t\t\tenc.addIdentifier().setSystem(\"testDatePeriodParam\").setValue(\"02\");\n-\t\t\tenc.getPeriod().getEndElement().setValueAsString(\"2001-01-02\");\n-\t\t\tmyEncounterDao.create(enc, mySrd);\n-\t\t}\n-\t\tSearchParameterMap params;\n-\t\tList<Encounter> encs;\n-\n-\t\tparams = new SearchParameterMap();\n-\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(null, \"2001-01-03\"));\n-\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n-\t\tencs = toList(myEncounterDao.search(params));\n-\t\tassertEquals(1, encs.size());\n-\n-\t\tparams = new SearchParameterMap();\n-\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(\"2001-01-01\", \"2001-01-03\"));\n-\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n-\t\t// encs = toList(ourEncounterDao.search(params));\n-\t\t// assertEquals(1, encs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3ODg2OA=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2MjEzOQ==", "bodyText": "Uncommented in the other class, and it does work now!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431762139", "createdAt": "2020-05-28T11:19:47Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4Test.java", "diffHunk": "@@ -1118,143 +1118,6 @@ public void testCreateWrongType() {\n \t\t}\n \t}\n \n-\t@Test\n-\tpublic void testDatePeriodParamEndOnly() {\n-\t\t{\n-\t\t\tEncounter enc = new Encounter();\n-\t\t\tenc.addIdentifier().setSystem(\"testDatePeriodParam\").setValue(\"02\");\n-\t\t\tenc.getPeriod().getEndElement().setValueAsString(\"2001-01-02\");\n-\t\t\tmyEncounterDao.create(enc, mySrd);\n-\t\t}\n-\t\tSearchParameterMap params;\n-\t\tList<Encounter> encs;\n-\n-\t\tparams = new SearchParameterMap();\n-\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(null, \"2001-01-03\"));\n-\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n-\t\tencs = toList(myEncounterDao.search(params));\n-\t\tassertEquals(1, encs.size());\n-\n-\t\tparams = new SearchParameterMap();\n-\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(\"2001-01-01\", \"2001-01-03\"));\n-\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n-\t\t// encs = toList(ourEncounterDao.search(params));\n-\t\t// assertEquals(1, encs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3ODg2OA=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzQ3MDExOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozMDo0MFrOGbfazQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMToyMDowNlrOGbwrfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3OTUwMQ==", "bodyText": "Does this work now if you uncomment it?  Should it work?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431479501", "createdAt": "2020-05-27T22:30:40Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -1690,6 +1691,338 @@ public void testSearchDateWrongParam() {\n \n \t}\n \n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDateTime_NoUpperBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getStartElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// ge -> above the lower bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> above the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDate_NoUpperBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getStartElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// ge -> above the lower bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> above the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDateTime_NoLowerBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getEndElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// le -> above the upper bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> above the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\n+\t\t// ge -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDate_NoLowerBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getEndElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// le -> above the upper bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> above the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\n+\t\t// ge -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDatePeriodParamEndOnly() {\n+\t\t{\n+\t\t\tEncounter enc = new Encounter();\n+\t\t\tenc.addIdentifier().setSystem(\"testDatePeriodParam\").setValue(\"02\");\n+\t\t\tenc.getPeriod().getEndElement().setValueAsString(\"2001-01-02\");\n+\t\t\tmyEncounterDao.create(enc, mySrd);\n+\t\t}\n+\t\tSearchParameterMap params;\n+\t\tList<Encounter> encs;\n+\n+\t\tparams = new SearchParameterMap();\n+\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(null, \"2001-01-03\"));\n+\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n+\t\tencs = toList(myEncounterDao.search(params));\n+\t\tassertEquals(1, encs.size());\n+\n+\t\tparams = new SearchParameterMap();\n+\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(\"2001-01-01\", \"2001-01-03\"));\n+\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n+\t\t// encs = toList(ourEncounterDao.search(params));\n+\t\t// assertEquals(1, encs.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc1OTAyMg==", "bodyText": "Ah good call! It totally does.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431759022", "createdAt": "2020-05-28T11:13:17Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -1690,6 +1691,338 @@ public void testSearchDateWrongParam() {\n \n \t}\n \n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDateTime_NoUpperBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getStartElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// ge -> above the lower bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> above the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDate_NoUpperBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getStartElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// ge -> above the lower bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> above the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDateTime_NoLowerBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getEndElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// le -> above the upper bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> above the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\n+\t\t// ge -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDate_NoLowerBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getEndElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// le -> above the upper bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> above the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\n+\t\t// ge -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDatePeriodParamEndOnly() {\n+\t\t{\n+\t\t\tEncounter enc = new Encounter();\n+\t\t\tenc.addIdentifier().setSystem(\"testDatePeriodParam\").setValue(\"02\");\n+\t\t\tenc.getPeriod().getEndElement().setValueAsString(\"2001-01-02\");\n+\t\t\tmyEncounterDao.create(enc, mySrd);\n+\t\t}\n+\t\tSearchParameterMap params;\n+\t\tList<Encounter> encs;\n+\n+\t\tparams = new SearchParameterMap();\n+\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(null, \"2001-01-03\"));\n+\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n+\t\tencs = toList(myEncounterDao.search(params));\n+\t\tassertEquals(1, encs.size());\n+\n+\t\tparams = new SearchParameterMap();\n+\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(\"2001-01-01\", \"2001-01-03\"));\n+\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n+\t\t// encs = toList(ourEncounterDao.search(params));\n+\t\t// assertEquals(1, encs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3OTUwMQ=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc2MjMwMA==", "bodyText": "Indeed it does!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1873#discussion_r431762300", "createdAt": "2020-05-28T11:20:06Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -1690,6 +1691,338 @@ public void testSearchDateWrongParam() {\n \n \t}\n \n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDateTime_NoUpperBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getStartElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// ge -> above the lower bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> above the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDate_NoUpperBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getStartElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// ge -> above the lower bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> above the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the lower bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDateTime_NoLowerBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getEndElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// le -> above the upper bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> above the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T13:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\n+\t\t// ge -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-26T11:00:00Z\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDateRangeOnPeriod_SearchByDate_NoLowerBound() {\n+\t\tEncounter enc = new Encounter();\n+\t\tenc.getPeriod().getEndElement().setValueAsString(\"2020-05-26T12:00:00Z\");\n+\t\tString id1 = myEncounterDao.create(enc).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\trunInTransaction(()->{\n+\t\t\tourLog.info(\"Date indexes:\\n * {}\", myResourceIndexedSearchParamDateDao.findAll().stream().map(t->t.toString()).collect(Collectors.joining(\"\\n * \")));\n+\t\t});\n+\n+\t\t// le -> above the upper bound\n+\t\tSearchParameterMap map = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tIBundleProvider results = myEncounterDao.search(map);\n+\t\tList<String> ids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// le -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"le2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\n+\t\t// ge -> above the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-27\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, empty());\n+\n+\t\t// ge -> Below the upper bound\n+\t\tmap = SearchParameterMap.newSynchronous();\n+\t\tmap.add(Encounter.SP_DATE, new DateParam(\"ge2020-05-25\"));\n+\t\tmyCaptureQueriesListener.clear();\n+\t\tresults = myEncounterDao.search(map);\n+\t\tids = toUnqualifiedVersionlessIdValues(results);\n+\t\tmyCaptureQueriesListener.logSelectQueriesForCurrentThread();\n+\t\tassertThat(ids, contains(id1));\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testDatePeriodParamEndOnly() {\n+\t\t{\n+\t\t\tEncounter enc = new Encounter();\n+\t\t\tenc.addIdentifier().setSystem(\"testDatePeriodParam\").setValue(\"02\");\n+\t\t\tenc.getPeriod().getEndElement().setValueAsString(\"2001-01-02\");\n+\t\t\tmyEncounterDao.create(enc, mySrd);\n+\t\t}\n+\t\tSearchParameterMap params;\n+\t\tList<Encounter> encs;\n+\n+\t\tparams = new SearchParameterMap();\n+\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(null, \"2001-01-03\"));\n+\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n+\t\tencs = toList(myEncounterDao.search(params));\n+\t\tassertEquals(1, encs.size());\n+\n+\t\tparams = new SearchParameterMap();\n+\t\tparams.add(Encounter.SP_DATE, new DateRangeParam(\"2001-01-01\", \"2001-01-03\"));\n+\t\tparams.add(Encounter.SP_IDENTIFIER, new TokenParam(\"testDatePeriodParam\", \"02\"));\n+\t\t// encs = toList(ourEncounterDao.search(params));\n+\t\t// assertEquals(1, encs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3OTUwMQ=="}, "originalCommit": {"oid": "9e5be6f5c6ab47c0f09947bdb809bf156629badf"}, "originalPosition": 226}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1839, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}