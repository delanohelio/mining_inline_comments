{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NTE1ODQx", "number": 2083, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoxMjowM1rOFz_YOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoxMjowM1rOFz_YOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkwMDYwMDg4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoxMjowM1rOJL0VUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwODozMDo0NVrOJL6Djg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM3MTUzOA==", "bodyText": "I think this accidentally changes the way thread pool was working before. According to javadoc this acts similar to single thread executor (because core pool size is 1 and queue is unbounded -> it won't increase the thread count). This default leads to pretty large performance degradation because all searches are ran with the same thread. Before this change SearchCoordinatorSvcImpl used unbounded thread pool that always immediately created a new thread.\nhttps://www.baeldung.com/java-threadpooltaskexecutor-core-vs-max-poolsize (and also note the reject policy if queue is full and pool is in maximum)\nping @jamesagnew\nAt least I think this should be documented that the thread pool is now acting differently and may need configuration.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2083#discussion_r616371538", "createdAt": "2021-04-20T06:12:03Z", "author": {"login": "tuomoa"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java", "diffHunk": "@@ -262,6 +262,14 @@ public ISearchResultCacheSvc searchResultCacheSvc() {\n \t\treturn new DatabaseSearchResultCacheSvcImpl();\n \t}\n \n+\t@Bean\n+\tpublic ThreadPoolTaskExecutor searchCoordinatorThreadFactory() {\n+\t\tfinal ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aecbfff59dcc245ceb876d3b64593922063c8aea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjQ2NTI5NA==", "bodyText": "Oh, nicely spotted. This is unintended (not something I was aware of when making this PR).\nPlease feel free to make a new PR that fixes this, restoring the original ExecutorService functionality, but still as a Spring ThreadPoolTaskExecutor (such that TaskDecorators can still be used)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2083#discussion_r616465294", "createdAt": "2021-04-20T08:30:45Z", "author": {"login": "ttntrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/config/BaseConfig.java", "diffHunk": "@@ -262,6 +262,14 @@ public ISearchResultCacheSvc searchResultCacheSvc() {\n \t\treturn new DatabaseSearchResultCacheSvcImpl();\n \t}\n \n+\t@Bean\n+\tpublic ThreadPoolTaskExecutor searchCoordinatorThreadFactory() {\n+\t\tfinal ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM3MTUzOA=="}, "originalCommit": {"oid": "aecbfff59dcc245ceb876d3b64593922063c8aea"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1789, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}