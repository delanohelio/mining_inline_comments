{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODI1MTMx", "number": 1941, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo1N1rOEJpu9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo1N1rOEJpu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2NDA0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3PhoneticSearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMTo1N1rOGqQPWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyOTowNlrOGqQ-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTQ1MQ==", "bodyText": "Whoa, you can do a soundex on an address line?! Cool...\nI'm assuming it normalizes the word component and leaves the numbers or something?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1941#discussion_r446959451", "createdAt": "2020-06-29T13:11:57Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3PhoneticSearchNoFtTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package ca.uhn.fhir.jpa.dao.dstu3;\n+\n+import ca.uhn.fhir.context.phonetic.ApacheEncoder;\n+import ca.uhn.fhir.context.phonetic.PhoneticEncoderEnum;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamString;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.registry.ISearchParamRegistry;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import org.apache.commons.codec.language.Soundex;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.Patient;\n+import org.hl7.fhir.dstu3.model.SearchParameter;\n+import org.hl7.fhir.dstu3.model.StringType;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertThat;\n+\n+public class FhirResourceDaoDstu3PhoneticSearchNoFtTest extends BaseJpaDstu3Test {\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(FhirResourceDaoDstu3PhoneticSearchNoFtTest.class);\n+\tpublic static final String GALE = \"Gale\";\n+\tpublic static final String GAIL = \"Gail\";\n+\tpublic static final String NAME_SOUNDEX_SP = \"nameSoundex\";\n+\tpublic static final String ADDRESS_LINE_SOUNDEX_SP = \"addressLineSoundex\";\n+\tprivate static final String BOB = \"BOB\";\n+\tprivate static final String ADDRESS = \"123 Nohili St\";\n+\tprivate static final String ADDRESS_CLOSE = \"123 Nohily St\";\n+\tprivate static final String ADDRESS_FAR = \"123 College St\";\n+\n+\t@Autowired\n+\tISearchParamRegistry mySearchParamRegistry;\n+\n+\t@Before\n+\tpublic void beforeDisableResultReuse() {\n+\t\tmyDaoConfig.setIndexMissingFields(DaoConfig.IndexEnabledEnum.DISABLED);\n+\t\tmyDaoConfig.setReuseCachedSearchResultsForMillis(null);\n+\t\tmyDaoConfig.setFetchSizeDefaultMaximum(new DaoConfig().getFetchSizeDefaultMaximum());\n+\n+\t\tcreateSoundexSearchParameter(NAME_SOUNDEX_SP, PhoneticEncoderEnum.SOUNDEX, \"Patient.name\");\n+\t\tcreateSoundexSearchParameter(ADDRESS_LINE_SOUNDEX_SP, PhoneticEncoderEnum.SOUNDEX, \"Patient.address.line\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb4f3e309874cc6858bdff9549ab8499bfd2ad9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTU0MA==", "bodyText": "I didn't test that.  That's a good point--I wouldn't be surprised if it stripped the numbers out.  I'll create a new task to test that and tweak as necessary.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1941#discussion_r446971540", "createdAt": "2020-06-29T13:29:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3PhoneticSearchNoFtTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package ca.uhn.fhir.jpa.dao.dstu3;\n+\n+import ca.uhn.fhir.context.phonetic.ApacheEncoder;\n+import ca.uhn.fhir.context.phonetic.PhoneticEncoderEnum;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.model.entity.ResourceIndexedSearchParamString;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.jpa.searchparam.registry.ISearchParamRegistry;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import org.apache.commons.codec.language.Soundex;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.Patient;\n+import org.hl7.fhir.dstu3.model.SearchParameter;\n+import org.hl7.fhir.dstu3.model.StringType;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertThat;\n+\n+public class FhirResourceDaoDstu3PhoneticSearchNoFtTest extends BaseJpaDstu3Test {\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(FhirResourceDaoDstu3PhoneticSearchNoFtTest.class);\n+\tpublic static final String GALE = \"Gale\";\n+\tpublic static final String GAIL = \"Gail\";\n+\tpublic static final String NAME_SOUNDEX_SP = \"nameSoundex\";\n+\tpublic static final String ADDRESS_LINE_SOUNDEX_SP = \"addressLineSoundex\";\n+\tprivate static final String BOB = \"BOB\";\n+\tprivate static final String ADDRESS = \"123 Nohili St\";\n+\tprivate static final String ADDRESS_CLOSE = \"123 Nohily St\";\n+\tprivate static final String ADDRESS_FAR = \"123 College St\";\n+\n+\t@Autowired\n+\tISearchParamRegistry mySearchParamRegistry;\n+\n+\t@Before\n+\tpublic void beforeDisableResultReuse() {\n+\t\tmyDaoConfig.setIndexMissingFields(DaoConfig.IndexEnabledEnum.DISABLED);\n+\t\tmyDaoConfig.setReuseCachedSearchResultsForMillis(null);\n+\t\tmyDaoConfig.setFetchSizeDefaultMaximum(new DaoConfig().getFetchSizeDefaultMaximum());\n+\n+\t\tcreateSoundexSearchParameter(NAME_SOUNDEX_SP, PhoneticEncoderEnum.SOUNDEX, \"Patient.name\");\n+\t\tcreateSoundexSearchParameter(ADDRESS_LINE_SOUNDEX_SP, PhoneticEncoderEnum.SOUNDEX, \"Patient.address.line\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTQ1MQ=="}, "originalCommit": {"oid": "8eb4f3e309874cc6858bdff9549ab8499bfd2ad9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1881, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}