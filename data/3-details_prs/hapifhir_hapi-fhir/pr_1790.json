{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTI1NDYz", "number": 1790, "title": "Decouple subscription submission / matching", "bodyText": "", "createdAt": "2020-04-03T11:44:21Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790", "merged": true, "mergeCommit": {"oid": "1c738b903d647f9904221369f4c514ea9eeae1c5"}, "closed": true, "closedAt": "2020-04-08T22:08:28Z", "author": {"login": "jamesagnew"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTo66wAH2gAyMzk4MTI1NDYzOmUxMTQyZjQwNDMxOTBhOTcwYzBmZWNlNDQ5OTVhM2Y5MWMxOWE0M2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVvVlEAH2gAyMzk4MTI1NDYzOjBlNDQ3ODYzMjAzOGVjMzc0NGJlZDYzNmQxM2Q5NzYyN2NiMGNjYTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1142f4043190a970c0fece44995a3f91c19a43d", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e1142f4043190a970c0fece44995a3f91c19a43d", "committedDate": "2020-04-02T09:31:12Z", "message": "Start work on subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6baf1995c9e23bbfeb4770bc471ceffe64d0ead5", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/6baf1995c9e23bbfeb4770bc471ceffe64d0ead5", "committedDate": "2020-04-03T00:30:19Z", "message": "Work on subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b4d8e0e32f9b44d3f85e63f149af9c400e674b", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/43b4d8e0e32f9b44d3f85e63f149af9c400e674b", "committedDate": "2020-04-03T01:15:07Z", "message": "Work on subscriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470063e8ab349f9ef548f8d7a499f232e5ed247d", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/470063e8ab349f9ef548f8d7a499f232e5ed247d", "committedDate": "2020-04-03T01:19:54Z", "message": "Subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c6024fa14576d8a3a953d6eac8b877d6ed549b0", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7c6024fa14576d8a3a953d6eac8b877d6ed549b0", "committedDate": "2020-04-03T11:43:21Z", "message": "More work on subscriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68db40d057b961f4fe3b91b5d6d99227d1922a71", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/68db40d057b961f4fe3b91b5d6d99227d1922a71", "committedDate": "2020-04-03T12:07:39Z", "message": "Queue factory cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fef447afeebd6a82eb39f5a88939fc616f757f31", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/fef447afeebd6a82eb39f5a88939fc616f757f31", "committedDate": "2020-04-04T20:07:01Z", "message": "Work on subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79da1578cb45ac6213e15689a2188106421bab29", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/79da1578cb45ac6213e15689a2188106421bab29", "committedDate": "2020-04-05T00:04:32Z", "message": "Subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a28c0c0609cb1a96fdec73a4205acf6a72c41b8", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0a28c0c0609cb1a96fdec73a4205acf6a72c41b8", "committedDate": "2020-04-05T11:21:05Z", "message": "Work on subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0884663d27024bdd681bdc8a3e9ec32fc4d19f0", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/d0884663d27024bdd681bdc8a3e9ec32fc4d19f0", "committedDate": "2020-04-05T15:34:47Z", "message": "Work on subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40d0c27ae3d743909595fab45a50c4f8143c8b29", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/40d0c27ae3d743909595fab45a50c4f8143c8b29", "committedDate": "2020-04-05T22:43:27Z", "message": "Work on subscription cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b78205c218a1bf5df7661a6dbceb0e184b8085cb", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b78205c218a1bf5df7661a6dbceb0e184b8085cb", "committedDate": "2020-04-06T21:00:45Z", "message": "Ongoing cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "826ba6458a461bf96883effc3864cd126045238f", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/826ba6458a461bf96883effc3864cd126045238f", "committedDate": "2020-04-07T00:15:41Z", "message": "Subscription work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347ecc7d516d35091b28699dba83e7c2c3ba0d9a", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/347ecc7d516d35091b28699dba83e7c2c3ba0d9a", "committedDate": "2020-04-07T13:39:14Z", "message": "Tests passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2205d2306ce25fd84cb6a39d21d7ef52bb634436", "committedDate": "2020-04-07T14:56:05Z", "message": "Move resource provider factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47786660d5c4a734600c1de16b238975df19265a", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/47786660d5c4a734600c1de16b238975df19265a", "committedDate": "2020-04-07T17:58:24Z", "message": "Test fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjIwMTMw", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#pullrequestreview-389220130", "createdAt": "2020-04-07T15:15:33Z", "commit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "state": "APPROVED", "comments": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToxNTozNFrOGCIk1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyNToxOVrOGCStsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg5MDgzNw==", "bodyText": "Love changes like this.  No good reason for a Dao to have a SP Registry.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404890837", "createdAt": "2020-04-07T15:15:34Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IDao.java", "diffHunk": "@@ -43,14 +41,8 @@\n \n \tFhirContext getContext();\n \n-\t/**\n-\t * Populate all of the runtime dependencies that a bundle provider requires in order to work\n-\t */\n-\tvoid injectDependenciesIntoBundleProvider(PersistedJpaBundleProvider theProvider);\n-\n \tIBaseResource toResource(BaseHasResource theEntity, boolean theForHistoryOperation);\n \n \t<R extends IBaseResource> R toResource(Class<R> theResourceType, IBaseResourceEntity theEntity, Collection<ResourceTag> theTagList, boolean theForHistoryOperation);\n \n-\tISearchParamRegistry getSearchParamRegistry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNjI5Mg==", "bodyText": "Nice!\nI remember needing this for something.  I look forward to seeing how you solved that.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404906292", "createdAt": "2020-04-07T15:35:05Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/BasePredicateBuilder.java", "diffHunk": "@@ -51,15 +55,13 @@\n \tDaoConfig myDaoConfig;\n \n \tboolean myDontUseHashesForSearch;\n-\tfinal IDao myCallingDao;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNDEyNA==", "bodyText": "Nice!\nCurious why you use name and not type here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404914124", "createdAt": "2020-04-07T15:45:17Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProviderFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package ca.uhn.fhir.jpa.search;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n+import ca.uhn.fhir.jpa.dao.ISearchBuilder;\n+import ca.uhn.fhir.jpa.entity.Search;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+\n+public class PersistedJpaBundleProviderFactory {\n+\n+\t@Autowired\n+\tprivate ApplicationContext myApplicationContext;\n+\n+\tpublic PersistedJpaBundleProvider newInstance(RequestDetails theRequest, String theUuid) {\n+\t\tObject retVal = myApplicationContext.getBean(BaseConfig.PERSISTED_JPA_BUNDLE_PROVIDER, theRequest, theUuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMzU5OA==", "bodyText": "These are all over the place.  Nice you cleaned them up.  I wonder how they got in there in the first place...?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404923598", "createdAt": "2020-04-07T15:57:40Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2.java", "diffHunk": "@@ -572,7 +578,7 @@ public MetaDt metaGetOperation(RequestDetails theRequestDetails) {\n \t\treturn retVal;\n \t}\n \n-\tprivate ca.uhn.fhir.jpa.dao.IFhirResourceDao<? extends IBaseResource> toDao(UrlParts theParts, String theVerb, String theUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNzA3MQ==", "bodyText": "These aren't JpaConstants.  Can we have a ProviderConstants class where we put all the provider params?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404927071", "createdAt": "2020-04-07T16:01:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/SubscriptionTriggeringProvider.java", "diffHunk": "@@ -47,17 +45,17 @@\n \n \t@Operation(name = JpaConstants.OPERATION_TRIGGER_SUBSCRIPTION)\n \tpublic IBaseParameters triggerSubscription(\n-\t\t@OperationParam(name = RESOURCE_ID, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"uri\") List<IPrimitiveType<String>> theResourceIds,\n-\t\t@OperationParam(name = SEARCH_URL, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"string\") List<IPrimitiveType<String>> theSearchUrls\n+\t\t@OperationParam(name = JpaConstants.SUBSCRIPTION_TRIGGERING_PARAM_RESOURCE_ID, min = 0, max = OperationParam.MAX_UNLIMITED, typeName = \"uri\") List<IPrimitiveType<String>> theResourceIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyODQyNA==", "bodyText": "This is a big improvement", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404928424", "createdAt": "2020-04-07T16:03:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/DatabaseBackedPagingProvider.java", "diffHunk": "@@ -57,8 +59,7 @@ public DatabaseBackedPagingProvider(int theSize) {\n \n \t@Override\n \tpublic synchronized IBundleProvider retrieveResultList(RequestDetails theRequestDetails, String theId) {\n-\t\tIFhirSystemDao<?, ?> systemDao = myDaoRegistry.getSystemDao();\n-\t\tPersistedJpaBundleProvider provider = new PersistedJpaBundleProvider(theRequestDetails, theId, systemDao, mySearchBuilderFactory);\n+\t\tPersistedJpaBundleProvider provider = myPersistedJpaBundleProviderFactory.newInstance(theRequestDetails, theId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTQyMQ==", "bodyText": "jetbrains.\nhttps://gitlab.com/simpatico.ai/cdr/-/wikis/HOW-TO#how-to-get-intellij-to-use-the-preferred-null-annotations", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404931421", "createdAt": "2020-04-07T16:08:07Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java", "diffHunk": "@@ -36,11 +38,19 @@\n import ca.uhn.fhir.jpa.util.InterceptorUtil;\n import ca.uhn.fhir.jpa.util.JpaInterceptorBroadcaster;\n import ca.uhn.fhir.model.primitive.InstantDt;\n-import ca.uhn.fhir.rest.api.server.*;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.api.server.IPreResourceAccessDetails;\n+import ca.uhn.fhir.rest.api.server.IPreResourceShowDetails;\n+import ca.uhn.fhir.rest.api.server.RequestDetails;\n+import ca.uhn.fhir.rest.api.server.SimplePreResourceAccessDetails;\n+import ca.uhn.fhir.rest.api.server.SimplePreResourceShowDetails;\n import ca.uhn.fhir.rest.server.servlet.ServletRequestDetails;\n+import com.google.common.annotations.VisibleForTesting;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTcwMw==", "bodyText": "lambda?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404931703", "createdAt": "2020-04-07T16:08:30Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaBundleProvider.java", "diffHunk": "@@ -220,13 +252,11 @@ public InstantDt getPublished() {\n \t@Nonnull\n \t@Override\n \tpublic List<IBaseResource> getResources(final int theFromIndex, final int theToIndex) {\n-\t\tensureDependenciesInjected();\n-\n-\t\tTransactionTemplate template = new TransactionTemplate(myPlatformTransactionManager);\n+\t\tTransactionTemplate template = new TransactionTemplate(myTxManager);\n \n \t\ttemplate.execute(new TransactionCallbackWithoutResult() {\n \t\t\t@Override\n-\t\t\tprotected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n+\t\t\tprotected void doInTransactionWithoutResult(@NotNull TransactionStatus theStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMzU5OQ==", "bodyText": "YAY You did my TODO!   \ud83d\ude04\ud83d\ude04\ud83d\ude04", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404933599", "createdAt": "2020-04-07T16:11:05Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java", "diffHunk": "@@ -44,21 +46,23 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Scope(\"prototype\")\n+@Component\n public class PersistedJpaSearchFirstPageBundleProvider extends PersistedJpaBundleProvider {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(PersistedJpaSearchFirstPageBundleProvider.class);\n \tprivate SearchTask mySearchTask;\n \tprivate ISearchBuilder mySearchBuilder;\n \tprivate Search mySearch;\n-\tprivate PlatformTransactionManager myTxManager;\n \n-\t// TODO KHS too many collaborators.  This should be a prototype bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNDUyOQ==", "bodyText": "I assume these annotations aren't required since you're not using @Lookup?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404934529", "createdAt": "2020-04-07T16:12:25Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/search/PersistedJpaSearchFirstPageBundleProvider.java", "diffHunk": "@@ -44,21 +46,23 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+@Scope(\"prototype\")\n+@Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNjU1MQ==", "bodyText": "I see this in quite a few places.  Curious why you chose to bind the result tighter to the interface?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404936551", "createdAt": "2020-04-07T16:15:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/api/ITermReadSvc.java", "diffHunk": "@@ -107,7 +107,7 @@\n \t/**\n \t * Version independent\n \t */\n-\tValidateCodeResult validateCodeIsInPreExpandedValueSet(ValidationOptions theOptions, IBaseResource theValueSet, String theSystem, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept);\n+\tIFhirResourceDaoValueSet.ValidateCodeResult validateCodeIsInPreExpandedValueSet(ValidationOptions theOptions, IBaseResource theValueSet, String theSystem, String theCode, String theDisplay, IBaseDatatype theCoding, IBaseDatatype theCodeableConcept);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NDA2OA==", "bodyText": "fascinating.  I didn't realize that mockito any() used to match null and now no longer does", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r404994068", "createdAt": "2020-04-07T17:40:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/search/SearchCoordinatorSvcImplTest.java", "diffHunk": "@@ -107,16 +138,17 @@ public void before() {\n \n \t\twhen(myTxManager.getTransaction(any())).thenReturn(mock(TransactionStatus.class));\n \n-\t\tdoAnswer(theInvocation -> {\n-\t\t\tPersistedJpaBundleProvider provider = (PersistedJpaBundleProvider) theInvocation.getArguments()[0];\n-\t\t\tprovider.setSearchCoordinatorSvc(mySvc);\n-\t\t\tprovider.setPlatformTransactionManager(myTxManager);\n-\t\t\tprovider.setSearchCacheSvc(mySearchCacheSvc);\n-\t\t\tprovider.setEntityManager(myEntityManager);\n-\t\t\tprovider.setContext(ourCtx);\n-\t\t\tprovider.setInterceptorBroadcaster(myInterceptorBroadcaster);\n-\t\t\treturn null;\n-\t\t}).when(myCallingDao).injectDependenciesIntoBundleProvider(any(PersistedJpaBundleProvider.class));\n+\t\twhen(myPersistedJpaBundleProviderFactory.newInstanceFirstPage(nullable(RequestDetails.class), nullable(Search.class), nullable(SearchCoordinatorSvcImpl.SearchTask.class), nullable(ISearchBuilder.class))).thenAnswer(t->{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMTA4OQ==", "bodyText": "Options sounds like an enum.\nMaybe ChannelConsumerConfig?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405001089", "createdAt": "2020-04-07T17:52:10Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/ChannelConsumerOptions.java", "diffHunk": "@@ -20,12 +20,24 @@\n  * #L%\n  */\n \n-import org.springframework.messaging.SubscribableChannel;\n+public class ChannelConsumerOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMzQ4NA==", "bodyText": "I like the getOrCreate part.\nMan naming is so hard.  I don't feel like I'm getting a channel back when I call this.  I feel like I'm getting something back that receives stuff from a channel.  But I'm having trouble coming up with a better name.  ReceivingChannel?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405003484", "createdAt": "2020-04-07T17:55:56Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package ca.uhn.fhir.jpa.subscription.channel.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * This interface is the factory for Queue Channels, which are the low level abstraction over a\n+ * queue (e.g. memory queue, JMS queue, Kafka stream, etc.) for any purpose.\n+ */\n+public interface IChannelFactory {\n+\n+\t/**\n+\t * Create a channel that is used to receive messages from the queue.\n+\t *\n+\t * <p>\n+\t * Implementations can choose to return the same object for multiple invocations of this method (and {@link #getOrCreateReceiver(String, Class, ChannelConsumerOptions)}\n+\t * when invoked with the same {@literal theChannelName} if they need to, or they can create a new instance.\n+\t * </p>\n+\t *\n+\t * @param theChannelName The actual underlying queue name\n+\t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n+\t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n+\t *                       both {@link #getOrCreateReceiver} and\n+\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       even though this object is used to configure the sender only. We do this because the factory\n+\t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n+\t *                       the config details to be known regardless of which method is returned first.\n+\t */\n+\tIChannelReceiver getOrCreateReceiver(String theChannelName, Class<?> theMessageType, ChannelConsumerOptions theConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNTY1OQ==", "bodyText": "Same here.  Sounds like I get something that produces stuff onto a channel rather than the channel itself.  Maybe SendingChannel?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405005659", "createdAt": "2020-04-07T17:59:20Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package ca.uhn.fhir.jpa.subscription.channel.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * This interface is the factory for Queue Channels, which are the low level abstraction over a\n+ * queue (e.g. memory queue, JMS queue, Kafka stream, etc.) for any purpose.\n+ */\n+public interface IChannelFactory {\n+\n+\t/**\n+\t * Create a channel that is used to receive messages from the queue.\n+\t *\n+\t * <p>\n+\t * Implementations can choose to return the same object for multiple invocations of this method (and {@link #getOrCreateReceiver(String, Class, ChannelConsumerOptions)}\n+\t * when invoked with the same {@literal theChannelName} if they need to, or they can create a new instance.\n+\t * </p>\n+\t *\n+\t * @param theChannelName The actual underlying queue name\n+\t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n+\t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n+\t *                       both {@link #getOrCreateReceiver} and\n+\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       even though this object is used to configure the sender only. We do this because the factory\n+\t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n+\t *                       the config details to be known regardless of which method is returned first.\n+\t */\n+\tIChannelReceiver getOrCreateReceiver(String theChannelName, Class<?> theMessageType, ChannelConsumerOptions theConfig);\n+\n+\t/**\n+\t * Create a channel that is used to send messages to the queue.\n+\t *\n+\t * <p>\n+\t * Implementations can choose to return the same object for multiple invocations of this method (and {@link #getOrCreateReceiver(String, Class, ChannelConsumerOptions)}\n+\t * when invoked with the same {@literal theChannelName} if they need to, or they can create a new instance.\n+\t * </p>\n+\t *\n+\t * @param theChannelName The actual underlying queue name\n+\t * @param theMessageType The object type that will be placed on this queue. Objects will be Jackson-annotated structures.\n+\t * @param theConfig      Contains the configuration for subscribers. Note that this parameter is provided for\n+\t *                       both {@link #getOrCreateReceiver} and\n+\t *                       {@link #getOrCreateSender(String, Class, ChannelConsumerOptions)}\n+\t *                       even though this object is used to configure the sender only. We do this because the factory\n+\t *                       may want to create a single object to be used for both the sender and receiver, so this allows\n+\t *                       the config details to be known regardless of which method is returned first.\n+\t */\n+\tIChannelProducer getOrCreateSender(String theChannelName, Class<?> theMessageType, ChannelConsumerOptions theConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzIyNA==", "bodyText": "Add @PreDestroy stop() to shutdown all of these?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405007224", "createdAt": "2020-04-07T18:01:44Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/impl/LinkedBlockingChannelFactory.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package ca.uhn.fhir.jpa.subscription.channel.impl;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import ca.uhn.fhir.util.StopWatch;\n+import org.apache.commons.lang3.concurrent.BasicThreadFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LinkedBlockingChannelFactory implements IChannelFactory {\n+\n+\tprivate Map<String, LinkedBlockingChannel> myChannels = Collections.synchronizedMap(new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzY1Nw==", "bodyText": "I really like the idea of the factory also being the registry.  It's Spring like.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405007657", "createdAt": "2020-04-07T18:02:26Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/api/IChannelFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package ca.uhn.fhir.jpa.subscription.channel.api;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+/**\n+ * This interface is the factory for Queue Channels, which are the low level abstraction over a\n+ * queue (e.g. memory queue, JMS queue, Kafka stream, etc.) for any purpose.\n+ */\n+public interface IChannelFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjcyNw==", "bodyText": "encapsulation doesn't quite feel right here.\ncan you remove newConfigForMatchingChannel and replace it with getDeliveryChannelConcurrentConsumerOptions() that returns a ConsumerOptions object instead of an int?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405012727", "createdAt": "2020-04-07T18:10:48Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.subscription.channel.subscription;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import org.apache.commons.lang3.Validate;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.SubscribableChannel;\n+import org.springframework.messaging.support.AbstractSubscribableChannel;\n+import org.springframework.messaging.support.ChannelInterceptor;\n+\n+public class SubscriptionChannelFactory {\n+\n+\tprivate final IChannelFactory myQueueChannelFactory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionChannelFactory(IChannelFactory theQueueChannelFactory) {\n+\t\tValidate.notNull(theQueueChannelFactory);\n+\t\tmyQueueChannelFactory = theQueueChannelFactory;\n+\t}\n+\n+\tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tpublic IChannelProducer newMatchingSendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newMatchingReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjg2Ng==", "bodyText": "Unused parameter.  See above.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405012866", "createdAt": "2020-04-07T18:11:02Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.subscription.channel.subscription;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import org.apache.commons.lang3.Validate;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.SubscribableChannel;\n+import org.springframework.messaging.support.AbstractSubscribableChannel;\n+import org.springframework.messaging.support.ChannelInterceptor;\n+\n+public class SubscriptionChannelFactory {\n+\n+\tprivate final IChannelFactory myQueueChannelFactory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionChannelFactory(IChannelFactory theQueueChannelFactory) {\n+\t\tValidate.notNull(theQueueChannelFactory);\n+\t\tmyQueueChannelFactory = theQueueChannelFactory;\n+\t}\n+\n+\tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tpublic IChannelProducer newMatchingSendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newMatchingReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tprotected ChannelConsumerOptions newConfigForDeliveryChannel(ChannelConsumerOptions theOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjk3Ng==", "bodyText": "Unused parameter theOptions", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405012976", "createdAt": "2020-04-07T18:11:17Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.uhn.fhir.jpa.subscription.channel.subscription;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.ChannelConsumerOptions;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import org.apache.commons.lang3.Validate;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.SubscribableChannel;\n+import org.springframework.messaging.support.AbstractSubscribableChannel;\n+import org.springframework.messaging.support.ChannelInterceptor;\n+\n+public class SubscriptionChannelFactory {\n+\n+\tprivate final IChannelFactory myQueueChannelFactory;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionChannelFactory(IChannelFactory theQueueChannelFactory) {\n+\t\tValidate.notNull(theQueueChannelFactory);\n+\t\tmyQueueChannelFactory = theQueueChannelFactory;\n+\t}\n+\n+\tpublic IChannelProducer newDeliverySendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newDeliveryReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForDeliveryChannel(theOptions);\n+\t\tIChannelReceiver channel = myQueueChannelFactory.getOrCreateReceiver(theChannelName, ResourceDeliveryJsonMessage.class, config);\n+\t\treturn new BroadcastingSubscribableChannelWrapper(channel);\n+\t}\n+\n+\tpublic IChannelProducer newMatchingSendingChannel(String theChannelName, ChannelConsumerOptions theOptions) {\n+\t\tChannelConsumerOptions config = newConfigForMatchingChannel(theOptions);\n+\t\treturn myQueueChannelFactory.getOrCreateSender(theChannelName, ResourceModifiedJsonMessage.class, config);\n+\t}\n+\n+\tpublic IChannelReceiver newMatchingReceivingChannel(String theChannelName, ChannelConsumerOptions theOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxNDQ2OA==", "bodyText": "Is this cache redundant with the cache in the IChannelFactory?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405014468", "createdAt": "2020-04-07T18:13:46Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionChannelRegistry.java", "diffHunk": "@@ -20,100 +20,94 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n-import ca.uhn.fhir.jpa.subscription.module.cache.ActiveSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.cache.SubscriptionRegistry;\n-import com.google.common.annotations.VisibleForTesting;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelProducer;\n+import ca.uhn.fhir.jpa.subscription.channel.api.IChannelReceiver;\n+import ca.uhn.fhir.jpa.subscription.match.registry.ActiveSubscription;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionRegistry;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.MultimapBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.MessageChannel;\n import org.springframework.messaging.MessageHandler;\n-import org.springframework.messaging.SubscribableChannel;\n-import org.springframework.stereotype.Component;\n \n-import java.util.Collection;\n+import java.util.Map;\n import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n \n-@Component\n public class SubscriptionChannelRegistry {\n \tprivate static final Logger ourLog = LoggerFactory.getLogger(SubscriptionRegistry.class);\n \n-\tprivate final SubscriptionChannelCache mySubscriptionChannelCache = new SubscriptionChannelCache();\n+\tprivate final SubscriptionChannelCache myDeliveryReceiverChannels = new SubscriptionChannelCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMDE3MQ==", "bodyText": "To stay consistent with your other prototype bean constructors, maybe call these newSubs... instead of getSubs...\nBy the way, in retrospect, I believe your explicit getBean() creation code is more maintainable than the opaque @lookup I was using before.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405020171", "createdAt": "2020-04-07T18:23:12Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/channel/subscription/SubscriptionDeliveryHandlerFactory.java", "diffHunk": "@@ -20,30 +20,28 @@\n  * #L%\n  */\n \n-import ca.uhn.fhir.jpa.subscription.module.CanonicalSubscriptionChannelType;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.SubscriptionDeliveringRestHookSubscriber;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.email.IEmailSender;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.email.SubscriptionDeliveringEmailSubscriber;\n-import org.springframework.beans.factory.annotation.Lookup;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscriptionChannelType;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.email.IEmailSender;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.email.SubscriptionDeliveringEmailSubscriber;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.resthook.SubscriptionDeliveringRestHookSubscriber;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.messaging.MessageHandler;\n-import org.springframework.stereotype.Component;\n \n import java.util.Optional;\n \n-@Component\n public class SubscriptionDeliveryHandlerFactory {\n \tprivate IEmailSender myEmailSender;\n \n-\t@Lookup\n-\tprotected SubscriptionDeliveringEmailSubscriber getSubscriptionDeliveringEmailSubscriber(IEmailSender myEmailSender) {\n-\t\t// stub method since this is a @Lookup\n-\t\tthrow new IllegalStateException();\n+\t@Autowired\n+\tprivate ApplicationContext myApplicationContext;\n+\n+\tprotected SubscriptionDeliveringEmailSubscriber getSubscriptionDeliveringEmailSubscriber(IEmailSender theEmailSender) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNDI1NQ==", "bodyText": "As in other places, when you remove @ComponentScan, the @Scope(\"prototype\") moves from the @component to the @bean.  So I think you can remove all these and just leave the ones with the @bean annotations.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405024255", "createdAt": "2020-04-07T18:29:57Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/email/SubscriptionDeliveringEmailSubscriber.java", "diffHunk": "@@ -22,23 +22,21 @@\n \n import ca.uhn.fhir.context.FhirContext;\n import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n-import ca.uhn.fhir.jpa.subscription.module.CanonicalSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.BaseSubscriptionDeliverySubscriber;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.ResourceDeliveryMessage;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscription;\n+import ca.uhn.fhir.jpa.subscription.match.deliver.BaseSubscriptionDeliverySubscriber;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceDeliveryMessage;\n import ca.uhn.fhir.rest.api.EncodingEnum;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import static org.apache.commons.lang3.StringUtils.*;\n \n-@Component\n @Scope(\"prototype\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjU3NA==", "bodyText": "I'd be inclined to remove this abstraction since we no longer support subscriptions without daos", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405026574", "createdAt": "2020-04-07T18:33:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/deliver/DaoResourceRetriever.java", "diffHunk": "@@ -22,26 +22,38 @@\n \n import ca.uhn.fhir.context.FhirContext;\n import ca.uhn.fhir.context.RuntimeResourceDefinition;\n-import ca.uhn.fhir.jpa.dao.DaoRegistry;\n-import ca.uhn.fhir.jpa.dao.IFhirResourceDao;\n-import ca.uhn.fhir.jpa.subscription.module.cache.ActiveSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.subscriber.IResourceRetriever;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.subscription.match.registry.ActiveSubscription;\n import ca.uhn.fhir.rest.server.exceptions.ResourceGoneException;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n \n-@Service\n public class DaoResourceRetriever implements IResourceRetriever {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyODk0NA==", "bodyText": "omg this is so much cleaner!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405028944", "createdAt": "2020-04-07T18:37:40Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/matcher/subscriber/SubscriptionActivatingSubscriber.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package ca.uhn.fhir.jpa.subscription.match.matcher.subscriber;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Subscription Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.subscription.model.CanonicalSubscriptionChannelType;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedJsonMessage;\n+import ca.uhn.fhir.jpa.subscription.model.ResourceModifiedMessage;\n+import ca.uhn.fhir.jpa.subscription.match.matcher.matching.SubscriptionStrategyEvaluator;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionCanonicalizer;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionConstants;\n+import ca.uhn.fhir.jpa.subscription.match.registry.SubscriptionRegistry;\n+import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n+import ca.uhn.fhir.util.SubscriptionUtil;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.MessagingException;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Responsible for transitioning subscription resources from REQUESTED to ACTIVE\n+ * Once activated, the subscription is added to the SubscriptionRegistry.\n+ * <p>\n+ * Also validates criteria.  If invalid, rejects the subscription without persisting the subscription.\n+ */\n+public class SubscriptionActivatingSubscriber extends BaseSubscriberForSubscriptionResources implements MessageHandler {\n+\tprivate Logger ourLog = LoggerFactory.getLogger(SubscriptionActivatingSubscriber.class);\n+\t@Autowired\n+\tprivate SubscriptionRegistry mySubscriptionRegistry;\n+\t@Autowired\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate SubscriptionCanonicalizer mySubscriptionCanonicalizer;\n+\t@Autowired\n+\tprivate DaoConfig myDaoConfig;\n+\t@Autowired\n+\tprivate SubscriptionStrategyEvaluator mySubscriptionStrategyEvaluator;\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic SubscriptionActivatingSubscriber() {\n+\t\tsuper();\n+\t}\n+\n+\t@Override\n+\tpublic void handleMessage(@Nonnull Message<?> theMessage) throws MessagingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNjA4MA==", "bodyText": "Wow.  This is a big change.  I like it.  Decouples the sender from the receiver which is how queues are supposed to work.  Will make testing this stuff more robust--Over the months I maintained this code, I spent a lot of time in this method dealing with sender/reciever pairing.  Decoupling it should make it simpler and cleaner.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405036080", "createdAt": "2020-04-07T18:49:23Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/submit/interceptor/SubscriptionMatcherInterceptor.java", "diffHunk": "@@ -66,41 +65,38 @@ public SubscriptionMatcherInterceptor() {\n \t\tsuper();\n \t}\n \n-\tpublic void start() {\n+\t@EventListener(classes = {ContextRefreshedEvent.class})\n+\tpublic void startIfNeeded() {\n \t\tif (myMatchingChannel == null) {\n-\t\t\tmyMatchingChannel = mySubscriptionChannelFactory.newMatchingChannel(SUBSCRIPTION_MATCHING_CHANNEL_NAME);\n-\t\t}\n-\t\tmyMatchingChannel.subscribe(mySubscriptionMatchingSubscriber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NTE5MA==", "bodyText": "Want to draw your attention to the TODO below in case it is relevant to the changes you made", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405045190", "createdAt": "2020-04-07T19:04:22Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/main/java/ca/uhn/fhir/jpa/subscription/match/registry/SubscriptionLoader.java", "diffHunk": "@@ -80,18 +83,14 @@ public void syncSubscriptions() {\n \t\t}\n \t}\n \n-\t@VisibleForTesting\n-\tvoid acquireSemaphoreForUnitTest() throws InterruptedException {\n-\t\tmySyncSubscriptionsSemaphore.acquire();\n-\t}\n-\n-\n \t@PostConstruct\n \tpublic void scheduleJob() {\n \t\tScheduledJobDefinition jobDetail = new ScheduledJobDefinition();\n \t\tjobDetail.setId(getClass().getName());\n \t\tjobDetail.setJobClass(Job.class);\n \t\tmySchedulerService.scheduleLocalJob(DateUtils.MILLIS_PER_MINUTE, jobDetail);\n+\n+\t\tsyncSubscriptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0ODc0Nw==", "bodyText": "nice test!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405048747", "createdAt": "2020-04-07T19:10:50Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/submit/interceptor/SubscriptionSubmitInterceptorLoaderTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.subscription.submit.interceptor;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n+import ca.uhn.fhir.jpa.model.sched.ISchedulerService;\n+import ca.uhn.fhir.jpa.searchparam.config.SearchParamConfig;\n+import ca.uhn.fhir.jpa.searchparam.registry.ISearchParamProvider;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.SubscriptionChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.submit.config.SubscriptionSubmitterConfig;\n+import org.hl7.fhir.dstu2.model.Subscription;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(classes = {\n+\tSubscriptionSubmitterConfig.class,\n+\tSearchParamConfig.class,\n+\tSubscriptionSubmitInterceptorLoaderTest.MyConfig.class\n+})\n+public class SubscriptionSubmitInterceptorLoaderTest {\n+\n+\t@MockBean\n+\tprivate ISearchParamProvider mySearchParamProvider;\n+\t@MockBean\n+\tprivate ISchedulerService mySchedulerService;\n+\t@MockBean\n+\tprivate IInterceptorService myInterceptorService;\n+\t@MockBean\n+\tprivate IValidationSupport myValidationSupport;\n+\t@MockBean\n+\tprivate SubscriptionChannelFactory mySubscriptionChannelFactory;\n+\t@MockBean\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@Autowired\n+\tprivate SubscriptionSubmitInterceptorLoader mySubscriptionSubmitInterceptorLoader;\n+\t@Autowired\n+\tprivate SubscriptionMatcherInterceptor mySubscriptionMatcherInterceptor;\n+\n+\t/**\n+\t * It should be possible to run only the {@link SubscriptionSubmitterConfig} without the\n+\t * {@link ca.uhn.fhir.jpa.subscription.match.config.SubscriptionProcessorConfig}\n+\t */\n+\t@Test\n+\tpublic void testLoaderCanRunWithoutProcessorConfigLoaded() {\n+\t\tverify(myInterceptorService, times(1)).registerInterceptor(eq(mySubscriptionMatcherInterceptor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTc4Mw==", "bodyText": "Is this test still relevant?  Maybe for mongo?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405049783", "createdAt": "2020-04-07T19:12:40Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/match/matcher/matching/DaoSubscriptionMatcherTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package ca.uhn.fhir.jpa.subscription.match.matcher.matching;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.support.IValidationSupport;\n+import ca.uhn.fhir.interceptor.api.IInterceptorService;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n+import ca.uhn.fhir.jpa.model.sched.ISchedulerService;\n+import ca.uhn.fhir.jpa.searchparam.config.SearchParamConfig;\n+import ca.uhn.fhir.jpa.searchparam.registry.ISearchParamProvider;\n+import ca.uhn.fhir.jpa.subscription.channel.subscription.SubscriptionChannelFactory;\n+import ca.uhn.fhir.jpa.subscription.match.config.SubscriptionProcessorConfig;\n+import ca.uhn.fhir.jpa.subscription.submit.config.SubscriptionSubmitterConfig;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+import static org.junit.Assert.*;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(classes = {\n+\tSubscriptionProcessorConfig.class,\n+\tSearchParamConfig.class,\n+\tDaoSubscriptionMatcherTest.MyConfig.class\n+})\n+public class DaoSubscriptionMatcherTest {\n+\n+\t@Autowired(required = false)\n+\tprivate PlatformTransactionManager myTxManager;\n+\t@Autowired\n+\tprivate DaoSubscriptionMatcher mySvc;\n+\t@MockBean\n+\tprivate ModelConfig myModelConfig;\n+\t@MockBean\n+\tprivate DaoConfig myDaoConfig;\n+\t@MockBean\n+\tprivate ISearchParamProvider mySearchParamProvider;\n+\t@MockBean\n+\tprivate ISchedulerService mySchedulerService;\n+\t@MockBean\n+\tprivate IInterceptorService myInterceptorService;\n+\t@MockBean\n+\tprivate DaoRegistry myDaoRegistry;\n+\t@MockBean\n+\tprivate IValidationSupport myValidationSupport;\n+\t@MockBean\n+\tprivate SubscriptionChannelFactory mySubscriptionChannelFactory;\n+\n+\t/**\n+\t * Make sure that if we're only running the {@link SubscriptionSubmitterConfig}, we don't need\n+\t * a transaction manager\n+\t */\n+\t@Test\n+\tpublic void testSubmitterCanRunWithoutTransactionManager() {\n+\t\tassertNull(myTxManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MDU0Mg==", "bodyText": "This test still looks useful.  Consider keeping it.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405050542", "createdAt": "2020-04-07T19:13:59Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionLoaderTest.java", "diffHunk": "@@ -1,69 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.cache;\n-\n-import ca.uhn.fhir.jpa.subscription.module.cache.SubscriptionLoader;\n-import ca.uhn.fhir.jpa.subscription.module.config.MockFhirClientSubscriptionProvider;\n-import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n-import org.hl7.fhir.dstu3.model.Subscription;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-public class SubscriptionLoaderTest extends BaseBlockingQueueSubscribableChannelDstu3Test {\n-\tprivate static final int MOCK_FHIR_CLIENT_FAILURES = 3;\n-\t@Autowired\n-\tprivate MockFhirClientSubscriptionProvider myMockFhirClientSubscriptionProvider;\n-\n-\t@Before\n-\tpublic void setFailCount() {\n-\t\tmyMockFhirClientSubscriptionProvider.setFailCount(MOCK_FHIR_CLIENT_FAILURES);\n-\t}\n-\n-\t@After\n-\tpublic void restoreFailCount() {\n-\t\tmyMockFhirClientSubscriptionProvider.setFailCount(0);\n-\t}\n-\n-\t@Test\n-\tpublic void testSubscriptionLoaderFhirClientDown() throws Exception {\n-\t\tString payload = \"application/fhir+json\";\n-\n-\t\tString criteria1 = \"Observation?code=SNOMED-CT|\" + myCode + \"&_format=xml\";\n-\t\tString criteria2 = \"Observation?code=SNOMED-CT|\" + myCode + \"111&_format=xml\";\n-\n-\t\tList<Subscription> subs = new ArrayList<>();\n-\t\tsubs.add(makeActiveSubscription(criteria1, payload, ourListenerServerBase));\n-\t\tsubs.add(makeActiveSubscription(criteria2, payload, ourListenerServerBase));\n-\n-\t\tmySubscriptionActivatedPost.setExpectedCount(2);\n-\t\tinitSubscriptionLoader(subs, \"uuid\");\n-\t\tmySubscriptionActivatedPost.awaitExpected();\n-\t\tassertEquals(0, myMockFhirClientSubscriptionProvider.getFailCount());\n-\t}\n-\n-\n-\t@Test\n-\tpublic void testMultipleThreadsDontBlock() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTM2Ng==", "bodyText": "This test should not be deleted.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405051366", "createdAt": "2020-04-07T19:15:31Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistrySharedTest.java", "diffHunk": "@@ -1,44 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.cache;\n-\n-import ca.uhn.fhir.jpa.subscription.module.CanonicalSubscription;\n-import ca.uhn.fhir.jpa.subscription.module.channel.ISubscriptionDeliveryChannelNamer;\n-import org.hl7.fhir.dstu3.model.Subscription;\n-import org.junit.Test;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Primary;\n-import org.springframework.test.annotation.DirtiesContext;\n-\n-@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\n-public class SubscriptionRegistrySharedTest extends BaseSubscriptionRegistryTest {\n-\n-\tprivate static final String OTHER_ID = \"OTHER_ID\";\n-\n-\t@Configuration\n-\tpublic static class SpringConfig {\n-\t\t@Primary\n-\t\t@Bean\n-\t\tISubscriptionDeliveryChannelNamer subscriptionDeliveryChannelNamer() {\n-\t\t\treturn new SharedNamer();\n-\t\t}\n-\n-\t\tprivate class SharedNamer implements ISubscriptionDeliveryChannelNamer {\n-\t\t\t@Override\n-\t\t\tpublic String nameFromSubscription(CanonicalSubscription theCanonicalSubscription) {\n-\t\t\t\treturn \"shared\";\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testTwoSubscriptionsOneChannel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjUxNA==", "bodyText": "These are important tests that shouldn't be deleted.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405052514", "createdAt": "2020-04-07T19:17:34Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/cache/SubscriptionRegistryTest.java", "diffHunk": "@@ -1,59 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.cache;\n-\n-import org.hl7.fhir.dstu3.model.Subscription;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-public class SubscriptionRegistryTest extends BaseSubscriptionRegistryTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NDk4Nw==", "bodyText": "These are important tests that shouldn't be deleted.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405054987", "createdAt": "2020-04-07T19:21:50Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR3Test.java", "diffHunk": "@@ -1,645 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.matcher;\n-\n-import ca.uhn.fhir.context.FhirContext;\n-import ca.uhn.fhir.jpa.model.entity.ModelConfig;\n-import ca.uhn.fhir.jpa.searchparam.matcher.InMemoryMatchResult;\n-import ca.uhn.fhir.jpa.searchparam.matcher.SearchParamMatcher;\n-import ca.uhn.fhir.jpa.subscription.module.BaseSubscriptionDstu3Test;\n-import ca.uhn.fhir.rest.api.server.IBundleProvider;\n-import ca.uhn.fhir.rest.server.SimpleBundleProvider;\n-import ca.uhn.fhir.util.UrlUtil;\n-import org.hl7.fhir.dstu3.model.*;\n-import org.hl7.fhir.dstu3.model.codesystems.MedicationRequestCategory;\n-import org.hl7.fhir.instance.model.api.IBaseResource;\n-import org.hl7.fhir.instance.model.api.IIdType;\n-import org.junit.After;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import static org.junit.Assert.*;\n-\n-public class InMemorySubscriptionMatcherR3Test extends BaseSubscriptionDstu3Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTQ2OQ==", "bodyText": "These are important tests that shouldn't be deleted.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405055469", "createdAt": "2020-04-07T19:22:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/SubscriptionStrategyEvaluatorTest.java", "diffHunk": "@@ -1,53 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.matcher;\n-\n-import ca.uhn.fhir.jpa.subscription.module.BaseSubscriptionDstu3Test;\n-import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.matchers.JUnitMatchers.containsString;\n-\n-public class SubscriptionStrategyEvaluatorTest extends BaseSubscriptionDstu3Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjY2Mw==", "bodyText": "Deleted test.  Is this functionality tested elsewhere?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405056663", "createdAt": "2020-04-07T19:24:47Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionCheckingSubscriberTest.java", "diffHunk": "@@ -1,119 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.subscriber;\n-\n-import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n-import ca.uhn.fhir.rest.api.Constants;\n-import org.hl7.fhir.dstu3.model.CodeableConcept;\n-import org.hl7.fhir.dstu3.model.Coding;\n-import org.hl7.fhir.dstu3.model.IdType;\n-import org.hl7.fhir.dstu3.model.Observation;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Tests copied from jpa.subscription.resthook.RestHookTestDstu3Test\n- */\n-public class SubscriptionCheckingSubscriberTest extends BaseBlockingQueueSubscribableChannelDstu3Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1Njk0NQ==", "bodyText": "Deleted test.  Is this functionality tested elsewhere?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1790#discussion_r405056945", "createdAt": "2020-04-07T19:25:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-subscription/src/test/java/ca/uhn/fhir/jpa/subscription/module/subscriber/SubscriptionMatchingSubscriberTest.java", "diffHunk": "@@ -1,78 +0,0 @@\n-package ca.uhn.fhir.jpa.subscription.module.subscriber;\n-\n-import ca.uhn.fhir.jpa.subscription.module.standalone.BaseBlockingQueueSubscribableChannelDstu3Test;\n-import ca.uhn.fhir.rest.api.Constants;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-/**\n- * Tests copied from jpa.subscription.resthook.RestHookTestDstu3Test\n- */\n-public class SubscriptionMatchingSubscriberTest extends BaseBlockingQueueSubscribableChannelDstu3Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2205d2306ce25fd84cb6a39d21d7ef52bb634436"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edc30568f257187aa94caaafd937ae4a45c9eaf0", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/edc30568f257187aa94caaafd937ae4a45c9eaf0", "committedDate": "2020-04-07T23:07:07Z", "message": "Address review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a77d839c3b8df8d5684b1aced7d1ea156988178", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8a77d839c3b8df8d5684b1aced7d1ea156988178", "committedDate": "2020-04-07T23:09:44Z", "message": "One more change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5b5e344cad775ec11a94a6a4db0e877b9e0384d", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a5b5e344cad775ec11a94a6a4db0e877b9e0384d", "committedDate": "2020-04-07T23:54:45Z", "message": "Test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e4478632038ec3744bed636d13d97627cb0cca8", "author": {"user": {"login": "jamesagnew", "name": "James Agnew"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/0e4478632038ec3744bed636d13d97627cb0cca8", "committedDate": "2020-04-08T22:07:36Z", "message": "Add changelog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4038, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}