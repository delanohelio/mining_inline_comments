{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjQyOTY0", "number": 1826, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyOTozM1rOD58UyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0Mjo0NVrOD58o5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDgzNzg1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyOTozM1rOGRgBEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyOTozM1rOGRgBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzUzNg==", "bodyText": "We are in the process of removing the use of @Service and @Component and explicitly auto constructing all of our beans (too many issues over time caused by component auto-discovery glitches..). I'd be inclined to call this class IgInstallerSvc for consistency with how other services are named, and can it be created via  @Bean method in BaseConfig?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421003536", "createdAt": "2020-05-06T18:29:33Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDgzOTgzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMDowM1rOGRgCRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMDowM1rOGRgCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzg0Ng==", "bodyText": "Please use field autowiring for consistency", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421003846", "createdAt": "2020-05-06T18:30:03Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg2ODI5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNzoxNFrOGRgTsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjozNDowMlrOGVN2Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA==", "bodyText": "This could probably be made version independent by using the terser (FhirContext#newFhirTerser()) to access field values using paths (e.g. myCtx.newFhirTerser().getSingleValueOrNull(\"url\"); )\nThat would reduce the maintenance burden in the long run and avoid issues where a fix gets accidentally applied to one version only", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421008304", "createdAt": "2020-05-06T18:37:14Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MDYxNA==", "bodyText": "Good point, haven't had a look at the terser before now - seems perfect for the job, however, when trying to access the the uniqueId of a NamingSystem I'm running into trouble: Extracting the value of a StringType in a version independentent way using the FhirTerser#getSingleValueOrNull throws the following exception:\njava.lang.IllegalArgumentException: Target is not a composite type: org.hl7.fhir.dstu3.model.StringType\nat ca.uhn.fhir.util.FhirTerser.getSingleValueOrNull(FhirTerser.java:230)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421470614", "createdAt": "2020-05-07T12:38:46Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzMTEyMw==", "bodyText": "You can't add .value to the end of the terser expression.. Just use the path without that part, and the result will be of type IPrimitiveype. You can call getValueAsString() on that.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r423131123", "createdAt": "2020-05-11T15:38:13Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5OTIyOA==", "bodyText": "Okay - hmm - is this refactoring necessary for the PR to be accepted (it works as is)? I understand the release of version 5.0.0 is in two days. I can submit the refactoring within a week, but I'm a bit preoccupied the next couple of days.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r423999228", "createdAt": "2020-05-12T20:02:22Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwMDE5OQ==", "bodyText": "Fixed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r424900199", "createdAt": "2020-05-14T06:34:02Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SearchUtilitiesImpl.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import ca.uhn.fhir.rest.param.UriParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SearchUtilitiesImpl {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(SearchUtilitiesImpl.class);\n+\n+\tprivate static final String WARNING_MULTIPLE_METADATA_RESOURCES_WITH_UNIQUE_URL =\n+\t\t\"Expected 1 MetadataResource with globally unique URL {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_NAMINGSYSTEM_RESOURCES_WITH_UNIQUE_ID =\n+\t\t\"Expected 1 NamingSystem with unique ID {}, found {}. Will not attempt to update resource.\";\n+\tprivate static final String WARNING_MULTIPLE_SUBSCRIPTION_RESOURCES_WITH_ID =\n+\t\t\"Expected 1 Subscription with ID {}, found {}. Will not attempt to update resource.\";\n+\n+\tpublic static SearchUtilities forR5() {\n+\t\treturn new SearchUtilities() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwODMwNA=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg3MzA5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozODozMFrOGRgWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0MDo1OVrOGR_ELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTA2MQ==", "bodyText": "Could you just autowire in an instance of IValidationSupport and call its generateSnapshot method? I think that would replace this class entirely and avoid the use of an unwrapped snapshot generator", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421009061", "createdAt": "2020-05-06T18:38:30Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoStructureDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+public class SnapshotGeneratorImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMjIzOQ==", "bodyText": "Yes - combined with the terser to perform a version-independent check if a StructureDefinition already has a snapshot. Updated.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421512239", "createdAt": "2020-05-07T13:40:59Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/SnapshotGeneratorImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDaoStructureDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+\n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+public class SnapshotGeneratorImpl {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTA2MQ=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg3NTQ0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozOToxMVrOGRgYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNDo0M1rOGSJC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTQ0Ng==", "bodyText": "We definitely can't have unit tests making external calls to an HTTP server outside the project. Could this be replaced with a local Jetty server simulating the right calls?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421009446", "createdAt": "2020-05-06T18:39:11Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.dstu3.BaseJpaDstu3Test;\n+import org.hl7.fhir.dstu3.model.StructureDefinition;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.*;\n+\n+public class IgInstallerTestDstu3 extends BaseJpaDstu3Test {\n+\n+\t@Autowired\n+\tprivate DaoConfig daoConfig;\n+\t@Autowired\n+\tprivate IgInstaller igInstaller;\n+\n+\t@Before\n+\tpublic void before() {\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/vs/*\");\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/cs/*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTc2Ng==", "bodyText": "Fixed by only testing IGs that reside locally under src/main/resources", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421675766", "createdAt": "2020-05-07T17:34:43Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/packages/IgInstallerTestDstu3.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.dao.dstu3.BaseJpaDstu3Test;\n+import org.hl7.fhir.dstu3.model.StructureDefinition;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static org.junit.Assert.*;\n+\n+public class IgInstallerTestDstu3 extends BaseJpaDstu3Test {\n+\n+\t@Autowired\n+\tprivate DaoConfig daoConfig;\n+\t@Autowired\n+\tprivate IgInstaller igInstaller;\n+\n+\t@Before\n+\tpublic void before() {\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/vs/*\");\n+\t\tdaoConfig.addTreatReferencesAsLogical(\"http://ehealth.sundhed.dk/cs/*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwOTQ0Ng=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg3OTg5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDoyMFrOGRgawQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTozOTo0MFrOGTh75A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw==", "bodyText": "I'm always nervous about having boolean flags as an indicator of success. Could we just use exceptions? It would probably be sufficient to throw an InternalErrorException in the event that something fails", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421010113", "createdAt": "2020-05-06T18:40:20Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQwMzc1NA==", "bodyText": "Hmm.. The InternalErrorException indicates that the server has failed at processing the incoming (client) request. Which I believe is a bit misleading error to raise if the IG installation fails.\nWhat do you think about using a custom subclass 'ImplementationGuideInstallationException' of RuntimeException?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421403754", "createdAt": "2020-05-07T10:30:42Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzMjEzMg==", "bodyText": "Yup that works", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r423132132", "createdAt": "2020-05-11T15:39:40Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDExMw=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg4OTM0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0Mjo0NVrOGRggoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo1ODozOVrOGR3Wjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTYxNg==", "bodyText": "Just confirming- Do the unit tests cover this? (Not sure why codecov failed to run on this PR... definitely not your fault, it has been flaky lately..)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421011616", "createdAt": "2020-05-06T18:42:45Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {\n+\t\tif (enabled) {\n+\t\t\ttry  {\n+\t\t\t\treturn install(NpmPackage.fromPackage(toInputStream(url)));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from URL {}\", url, e);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate InputStream toInputStream(String url) throws IOException {\n+\t\tURL u = new URL(url);\n+\t\tURLConnection c = u.openConnection();\n+\t\treturn c.getInputStream();\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG from a file on disk or the Simplifier repo using\n+\t * the {@link PackageCacheManager}.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param id of the package, or name of folder in filesystem\n+\t * @param version of package, or path to folder in filesystem\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String id, String version) {\n+\t\tif (enabled) {\n+\t\t\ttry {\n+\t\t\t\treturn install(packageCacheManager.loadPackage(id, version));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from packages.fhir.org or \" +\n+\t\t\t\t\t\"file on disk using ID {} and version {}\", id, version, e);\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Installs a package and its dependencies.\n+\t *\n+\t * Fails fast if one of its dependencies could not be installed.\n+\t *\n+\t * @return success of the installation\n+\t */\n+\tprivate boolean install(NpmPackage npmPackage) {\n+\t\tString name = npmPackage.getNpm().get(\"name\").getAsString();\n+\t\tString version = npmPackage.getNpm().get(\"version\").getAsString();\n+\t\tString packageFhirVersion = npmPackage.fhirVersion();\n+\t\tif (!isCompatibleWithCurrentFhirVersion(packageFhirVersion)) {\n+\t\t\tourLog.warn(\"Cannot install package {}#{}, FHIR versions mismatch (expected <={}, package uses {})\",\n+\t\t\t\tname, version, fhirContext.getVersion().getVersion().getFhirVersionString(), packageFhirVersion);\n+\t\t\treturn false;\n+\t\t}\n+\t\tboolean success = fetchAndInstallDependencies(npmPackage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"An error occoured when installing dependencies for the package {}#{}\", name, version);\n+\t\t\treturn false;\n+\t\t}\n+\t\tourLog.info(\"Installing package: {}#{}\", name, version);\n+\t\tfor (String type : SUPPORTED_RESOURCE_TYPES) {\n+\t\t\tCollection<IBaseResource> resources = parseResourcesOfType(type, npmPackage);\n+\t\t\tif (type.equals(\"StructureDefinition\")) {\n+\t\t\t\tresources = snapshotGenerator.generateFrom(resources);\n+\t\t\t}\n+\t\t\tourLog.info(String.format(\"creating or updating %s resources of type %s\", resources.size(), type));\n+\n+\t\t\tresources.stream().forEach(r -> createOrUpdate(r));\n+\t\t}\n+\t\tourLog.info(String.format(\"Finished installation of package: %s#%s\", name, version));\n+\t\treturn true;\n+\t}\n+\n+\tprivate boolean fetchAndInstallDependencies(NpmPackage npmPackage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NTg3MA==", "bodyText": "Yes - they could be more exhaustive though. I'll look into implementing more tests if I find the time.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1826#discussion_r421385870", "createdAt": "2020-05-07T09:58:39Z", "author": {"login": "mzgtrifork"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/packages/IgInstaller.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package ca.uhn.fhir.jpa.packages;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.api.dao.DaoRegistry;\n+import ca.uhn.fhir.jpa.api.dao.IFhirResourceDao;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import com.google.gson.Gson;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.utilities.cache.NpmPackage;\n+import org.hl7.fhir.utilities.cache.PackageCacheManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.event.ContextStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.*;\n+\n+@Service\n+public class IgInstaller {\n+\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(IgInstaller.class);\n+\n+\tboolean enabled = true;\n+\tprivate FhirContext fhirContext;\n+\tprivate DaoRegistry daoRegistry;\n+\tprivate PackageCacheManager packageCacheManager;\n+\n+\tprivate String[] SUPPORTED_RESOURCE_TYPES = new String[]\n+\t\t{ \"NamingSystem\",\n+\t\t\t\"CodeSystem\",\n+\t\t\t\"ValueSet\",\n+\t\t\t\"StructureDefinition\",\n+\t\t\t\"ConceptMap\",\n+\t\t\t\"SearchParameter\",\n+\t\t\t\"Subscription\" };\n+\n+\tprivate SearchUtilities searchUtilities;\n+\tprivate SnapshotGenerator snapshotGenerator;\n+\n+\t@Autowired\n+\tpublic IgInstaller(FhirContext fhirContext, DaoRegistry daoRegistry) {\n+\t\tthis.fhirContext = fhirContext;\n+\t\tthis.daoRegistry = daoRegistry;\n+\n+\t\tIFhirResourceDao structureDefinitionDao = daoRegistry.getResourceDao(\"StructureDefinition\");\n+\n+\t\tswitch (fhirContext.getVersion().getVersion()) {\n+\t\t\tcase R5: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR5();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR5(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R4: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forR4();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forR4(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase DSTU3: {\n+\t\t\t\tsearchUtilities = SearchUtilitiesImpl.forDstu3();\n+\t\t\t\tsnapshotGenerator = SnapshotGeneratorImpl.forDstu3(structureDefinitionDao);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tdefault: {\n+\t\t\t\tourLog.info(\"IG installation not supported for version: {}\", fhirContext.getVersion().getVersion());\n+\t\t\t\tenabled = false;\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tpackageCacheManager = new PackageCacheManager(true, 1);\n+\t\t} catch (IOException e) {\n+\t\t\tourLog.error(\"Unable to initialize PackageCacheManager: {}\", e);\n+\t\t\tenabled = false;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG tarball (with its dependencies) from the specified url.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param url of IG tarball\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String url) {\n+\t\tif (enabled) {\n+\t\t\ttry  {\n+\t\t\t\treturn install(NpmPackage.fromPackage(toInputStream(url)));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from URL {}\", url, e);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate InputStream toInputStream(String url) throws IOException {\n+\t\tURL u = new URL(url);\n+\t\tURLConnection c = u.openConnection();\n+\t\treturn c.getInputStream();\n+\t}\n+\n+\t/**\n+\t * Loads and installs an IG from a file on disk or the Simplifier repo using\n+\t * the {@link PackageCacheManager}.\n+\t *\n+\t * Installs the IG by persisting instances of the following types of resources:\n+\t *\n+\t * - NamingSystem, CodeSystem, ValueSet, StructureDefinition (with snapshots),\n+\t *   ConceptMap, SearchParameter, Subscription\n+\t *\n+\t * Creates the resources if non-existent, updates them otherwise.\n+\t *\n+\t * @param id of the package, or name of folder in filesystem\n+\t * @param version of package, or path to folder in filesystem\n+\t * @return success of the installation\n+\t */\n+\tpublic boolean install(String id, String version) {\n+\t\tif (enabled) {\n+\t\t\ttry {\n+\t\t\t\treturn install(packageCacheManager.loadPackage(id, version));\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tourLog.error(\"Could not load implementation guide from packages.fhir.org or \" +\n+\t\t\t\t\t\"file on disk using ID {} and version {}\", id, version, e);\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Installs a package and its dependencies.\n+\t *\n+\t * Fails fast if one of its dependencies could not be installed.\n+\t *\n+\t * @return success of the installation\n+\t */\n+\tprivate boolean install(NpmPackage npmPackage) {\n+\t\tString name = npmPackage.getNpm().get(\"name\").getAsString();\n+\t\tString version = npmPackage.getNpm().get(\"version\").getAsString();\n+\t\tString packageFhirVersion = npmPackage.fhirVersion();\n+\t\tif (!isCompatibleWithCurrentFhirVersion(packageFhirVersion)) {\n+\t\t\tourLog.warn(\"Cannot install package {}#{}, FHIR versions mismatch (expected <={}, package uses {})\",\n+\t\t\t\tname, version, fhirContext.getVersion().getVersion().getFhirVersionString(), packageFhirVersion);\n+\t\t\treturn false;\n+\t\t}\n+\t\tboolean success = fetchAndInstallDependencies(npmPackage);\n+\t\tif (!success) {\n+\t\t\tourLog.error(\"An error occoured when installing dependencies for the package {}#{}\", name, version);\n+\t\t\treturn false;\n+\t\t}\n+\t\tourLog.info(\"Installing package: {}#{}\", name, version);\n+\t\tfor (String type : SUPPORTED_RESOURCE_TYPES) {\n+\t\t\tCollection<IBaseResource> resources = parseResourcesOfType(type, npmPackage);\n+\t\t\tif (type.equals(\"StructureDefinition\")) {\n+\t\t\t\tresources = snapshotGenerator.generateFrom(resources);\n+\t\t\t}\n+\t\t\tourLog.info(String.format(\"creating or updating %s resources of type %s\", resources.size(), type));\n+\n+\t\t\tresources.stream().forEach(r -> createOrUpdate(r));\n+\t\t}\n+\t\tourLog.info(String.format(\"Finished installation of package: %s#%s\", name, version));\n+\t\treturn true;\n+\t}\n+\n+\tprivate boolean fetchAndInstallDependencies(NpmPackage npmPackage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTYxNg=="}, "originalCommit": {"oid": "5e925b9e6f0c7d1491434283d64da22cb5bd6928"}, "originalPosition": 176}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1955, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}