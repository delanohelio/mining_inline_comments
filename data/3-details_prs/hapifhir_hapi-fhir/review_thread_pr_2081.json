{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Mjg1NDYz", "number": 2081, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo0NTo1OFrOEoO8mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo0NzowOFrOEpGAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjIzMzg1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo0NTo1OFrOHZNIAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1NTozN1rOHZ8aPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA==", "bodyText": "This is no longer a version-independent concept. Consider renaming this to something more appropriate (e.g. Concept or VersionOptionalConcept).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496191490", "createdAt": "2020-09-28T19:45:58Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java", "diffHunk": "@@ -40,7 +41,12 @@ public VersionIndependentConcept(String theSystem, String theCode) {\n \t}\n \n \tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n+\t\tthis(theSystem, theCode, theDisplay, null);\n+\t}\n+\n+\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg1ODc4NQ==", "bodyText": "I understood the name of this class as being related to the FHIR version rather than Concept version, but I can see how this might be confusing. Renamed to FhirVersionIndependentConcept.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496858785", "createdAt": "2020-09-29T16:10:05Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java", "diffHunk": "@@ -40,7 +41,12 @@ public VersionIndependentConcept(String theSystem, String theCode) {\n \t}\n \n \tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n+\t\tthis(theSystem, theCode, theDisplay, null);\n+\t}\n+\n+\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NjIwNQ==", "bodyText": "Ah, I think you're absolutely right. My bad.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496966205", "createdAt": "2020-09-29T18:55:37Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/VersionIndependentConcept.java", "diffHunk": "@@ -40,7 +41,12 @@ public VersionIndependentConcept(String theSystem, String theCode) {\n \t}\n \n \tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay) {\n+\t\tthis(theSystem, theCode, theDisplay, null);\n+\t}\n+\n+\tpublic VersionIndependentConcept(String theSystem, String theCode, String theDisplay, String theSystemVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MTQ5MA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjI0NjkzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/resources/ca/uhn/fhir/i18n/hapi-messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo1MDowMVrOHZNQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo1MDowMVrOHZNQEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MzU1NA==", "bodyText": "Nitpick: for consistency with similar messages.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrlAndVersion=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\", ConceptMap.version \"{1}\", already have one with resource ID: {2}\n          \n          \n            \n            ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrlAndVersion=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\" and ConceptMap.version \"{1}\", already have one with resource ID: {2}", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496193554", "createdAt": "2020-09-28T19:50:01Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-base/src/main/resources/ca/uhn/fhir/i18n/hapi-messages.properties", "diffHunk": "@@ -141,9 +143,13 @@ ca.uhn.fhir.jpa.binstore.BinaryAccessProvider.unknownType=Content in resource of\n \n \n ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateCodeSystemUrl=Can not create multiple CodeSystem resources with CodeSystem.url \"{0}\", already have one with resource ID: {1}\n+ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateCodeSystemUrlAndVersion=Can not create multiple CodeSystem resources with CodeSystem.url \"{0}\" and CodeSystem.version \"{1}\", already have one with resource ID: {2}\n ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrl=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\", already have one with resource ID: {1}\n+ca.uhn.fhir.jpa.term.BaseTermReadSvcImpl.cannotCreateDuplicateConceptMapUrlAndVersion=Can not create multiple ConceptMap resources with ConceptMap.url \"{0}\", ConceptMap.version \"{1}\", already have one with resource ID: {2}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjI1MzY2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2081-multiple-version-code-systems.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo1MjowNVrOHZNUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyODowMlrOHZ28TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NDYzMg==", "bodyText": "Consider separating this out into multiple changelog entries (e.g. one general to terminology, and one specific to LOINC).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496194632", "createdAt": "2020-09-28T19:52:05Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2081-multiple-version-code-systems.yaml", "diffHunk": "@@ -0,0 +1,5 @@\n+---\n+type: add\n+issue: 2081\n+title: \"Terminology loader for LOINC and operations for CodeSystem, ValueSet and ConcepMap will now support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NjYyMA==", "bodyText": "Broken this out into three change logs, one for general terminology, one for LOINC loader and one for the addition of CodeSystem validate-code operation.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496876620", "createdAt": "2020-09-29T16:28:02Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/changelog/5_2_0/2081-multiple-version-code-systems.yaml", "diffHunk": "@@ -0,0 +1,5 @@\n+---\n+type: add\n+issue: 2081\n+title: \"Terminology loader for LOINC and operations for CodeSystem, ValueSet and ConcepMap will now support", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NDYzMg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjI1Njk0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoCodeSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo1Mjo1MVrOHZNWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo1Mjo1MVrOHZNWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NTExNg==", "bodyText": "Surprised we didn't already support this. Good catch!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496195116", "createdAt": "2020-09-28T19:52:51Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/dao/IFhirResourceDaoCodeSystem.java", "diffHunk": "@@ -42,6 +42,8 @@\n \n \tSubsumesResult subsumes(IPrimitiveType<String> theCodeA, IPrimitiveType<String> theCodeB, IPrimitiveType<String> theSystem, CD theCodingA, CD theCodingB, RequestDetails theRequestDetails);\n \n+\tIValidationSupport.CodeValidationResult validateCode(IIdType theCodeSystemId, IPrimitiveType<String> theCodeSystemUrl, IPrimitiveType<String> theVersion, IPrimitiveType<String> theCode, IPrimitiveType<String> theDisplay, CD theCoding, CC theCodeableConcept, RequestDetails theRequestDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjI2NTc4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTo1NTozM1rOHZNbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyOTo0OFrOHZ3A9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjUyNA==", "bodyText": "Nitpick: these kinds of comments add unnecessary visual noise; the method names should be descriptive enough.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496196524", "createdAt": "2020-09-28T19:55:33Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java", "diffHunk": "@@ -58,6 +61,32 @@ public void setResourceId(Long theResourceId) {\n \t\tmyResourceId = theResourceId;\n \t}\n \n+\t//-- url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NzgxMw==", "bodyText": "Removed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496877813", "createdAt": "2020-09-29T16:29:48Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationQuery.java", "diffHunk": "@@ -58,6 +61,32 @@ public void setResourceId(Long theResourceId) {\n \t\tmyResourceId = theResourceId;\n \t}\n \n+\t//-- url", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjUyNA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjM1MzYxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoyNDowOFrOHZOS9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1ODozOFrOHZ8g5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw==", "bodyText": "This seems incomplete to me. It's good to store a ConceptMap version as you do for CodeSystem and ValueSet; this is equivalent to the conceptMapVersion in parameter in the spec for ConceptMap$translate. However, I think what's required is support for the version in parameter, which corresponds to CodeSystem.version. The response should then include CodeSystem.version in any matches. We rarely refer to a specific ConceptMap; but we are interested in mapping for a particular version of the concept's CodeSystem.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496210677", "createdAt": "2020-09-28T20:24:08Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationRequest.java", "diffHunk": "@@ -24,15 +27,15 @@\n import org.hl7.fhir.r4.model.BooleanType;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.StringType;\n import org.hl7.fhir.r4.model.UriType;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n public class TranslationRequest {\n \tprivate CodeableConcept myCodeableConcept;\n \tprivate Long myResourceId;\n \tprivate BooleanType myReverse;\n+\tprivate UriType myUrl;\n+\tprivate StringType myConceptMapVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MDQ0Ng==", "bodyText": "The CodeSystem.version is actually captured, where provided, in the myCodeableConcept property. Specifically the TranslationRequest is instantiated by the translate method in the ConceptMap resource provider classes and the codeableConcept property in the request is created and/or populated from the parameters provided to the translate method.  The resource provider translate methods all support CodeSystem.version as a parameter and include these when creating/populating the codeableConcept property.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496890446", "createdAt": "2020-09-29T16:48:50Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationRequest.java", "diffHunk": "@@ -24,15 +27,15 @@\n import org.hl7.fhir.r4.model.BooleanType;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.StringType;\n import org.hl7.fhir.r4.model.UriType;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n public class TranslationRequest {\n \tprivate CodeableConcept myCodeableConcept;\n \tprivate Long myResourceId;\n \tprivate BooleanType myReverse;\n+\tprivate UriType myUrl;\n+\tprivate StringType myConceptMapVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzkxMA==", "bodyText": "Terrific. Thanks!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496967910", "createdAt": "2020-09-29T18:58:38Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-api/src/main/java/ca/uhn/fhir/jpa/api/model/TranslationRequest.java", "diffHunk": "@@ -24,15 +27,15 @@\n import org.hl7.fhir.r4.model.BooleanType;\n import org.hl7.fhir.r4.model.CodeableConcept;\n import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.StringType;\n import org.hl7.fhir.r4.model.UriType;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n public class TranslationRequest {\n \tprivate CodeableConcept myCodeableConcept;\n \tprivate Long myResourceId;\n \tprivate BooleanType myReverse;\n+\tprivate UriType myUrl;\n+\tprivate StringType myConceptMapVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMDY3Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjM2NDg4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoyNzozMVrOHZOZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo1MDo0MlrOHbLXRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA==", "bodyText": "This looks like we're assuming the version most recently updated is also the latest/current version. This needs to be documented somewhere; or we need a clearer way of identifying the current version. For example, a flag supported by an enum with values such as historical|current|draft.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496212404", "createdAt": "2020-09-28T20:27:31Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjEwOQ==", "bodyText": "This assumption is correct. We opted for this approach for reasons of performance and simplicity. The HFJ_RESOURCE table is already indexed by update date/time and so need to add a new indexed column on the terminology tables. Also, this will avoid the need to update terminology table rows for previous version when uploading a new version.\nI agree however that this should be better documented. Renaming this query to be getTermConceptMapEntitiesByUrlOrderByMostRecentUpdate to make this clearer. Also will add a note to this effect as part of planned changes to the HAPI FHIR documentation.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496906109", "createdAt": "2020-09-29T17:14:18Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2OTcxOQ==", "bodyText": "What would be the impact of adding a new column for this flag and indexing on it? You would only need to update one other row when uploading a new version (set the previous current to historical, for example).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496969719", "createdAt": "2020-09-29T19:01:50Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE4NzE0Mg==", "bodyText": "The impact would arise due to increasing the number of table write operations that would need to be done each time a new version is loaded (note that I am assuming we would have to do something similar for ValueSet). On top of the table writes, there would be additional overhead to query for the previous current version and to update the index on the column when it is changed.\nPerhaps I am overestimating the impact, but at the same time I am not seeing much of a benefit to adding a new column that would justify the added complexity and performance overhead.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497187142", "createdAt": "2020-09-30T01:02:33Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NjYxNQ==", "bodyText": "Fair enough, @IanMMarshall. I'm torn between the two approaches.\nIf an implementer only ever loads terminology sequentially in order of versions, this is a non-issue. However, any updates to previous versions will require any subsequent versions to be updated/reloaded. I think this may be a good point for @jamesagnew to weigh in on.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497586615", "createdAt": "2020-09-30T15:07:38Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1OTc4Mw==", "bodyText": "I agree, I am not sure I am happy with this approach myself (i.e. that a site may need to reload current version after updating a previous version). One other point that I forgot to mention however that eventually tipped me towards the current approach, is the fact that the FHIR specification does not provide any mechanism for specifying that a particular version is the current version. In the terminology loader, we could easily add a config parameter to say that the version being loaded is current, but what if a site is loading or updating terminology using the REST APIs?\nI figured that making the latest update the current version was likely the simplest and most consistent way we could manage this until we come to some type of agreement on how this might be otherwise managed by the REST APIs.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498259783", "createdAt": "2020-10-01T13:50:42Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermConceptMapDao.java", "diffHunk": "@@ -36,6 +39,17 @@\n \t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myResourcePid = :resource_pid\")\n \tOptional<TermConceptMap> findTermConceptMapByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n-\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url\")\n+\t// Keep backwards compatibility, recommend to use findTermConceptMapByUrlAndNullVersion instead\n+\t@Deprecated\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n \tOptional<TermConceptMap> findTermConceptMapByUrl(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(\"SELECT cm FROM TermConceptMap cm WHERE cm.myUrl = :url and cm.myVersion is null\")\n+\tOptional<TermConceptMap> findTermConceptMapByUrlAndNullVersion(@Param(\"url\") String theUrl);\n+\t\n+\t@Query(value=\"SELECT cm FROM TermConceptMap cm INNER JOIN ResourceTable r ON r.myId = cm.myResourcePid WHERE cm.myUrl = :url ORDER BY r.myUpdated DESC\") ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjQwNA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjM3MTk3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDoyOTozNVrOHZOd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1OTozMlrOHZ6cfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMzUwMg==", "bodyText": "It's best practice to include a comment why this was deprecated.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496213502", "createdAt": "2020-09-28T20:29:35Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java", "diffHunk": "@@ -28,17 +28,29 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n+import java.util.List;\n import java.util.Optional;\n \n public interface ITermValueSetDao extends JpaRepository<TermValueSet, Long> {\n \n \t@Query(\"SELECT vs FROM TermValueSet vs WHERE vs.myResourcePid = :resource_pid\")\n \tOptional<TermValueSet> findByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n+\t@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNDAxMg==", "bodyText": "Good catch. Done.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496934012", "createdAt": "2020-09-29T17:59:32Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/ITermValueSetDao.java", "diffHunk": "@@ -28,17 +28,29 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n+import java.util.List;\n import java.util.Optional;\n \n public interface ITermValueSetDao extends JpaRepository<TermValueSet, Long> {\n \n \t@Query(\"SELECT vs FROM TermValueSet vs WHERE vs.myResourcePid = :resource_pid\")\n \tOptional<TermValueSet> findByResourcePid(@Param(\"resource_pid\") Long theResourcePid);\n \n+\t@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMzUwMg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQwMjQxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDozODo1MVrOHZOwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozMzoxNFrOHbNVww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg==", "bodyText": "I'm not sure I understand this change. Can you explain why it's necessary?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496218216", "createdAt": "2020-09-28T20:38:51Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0MjI1OQ==", "bodyText": "Previously, there was only one ResourceTable row for a given CodeSystem with a specified URL. If a new version of the CodeSystem was loaded, it essentially resulted in an update of the existing resource and so there was never a need to update the resource ID of the CodeSystem resource in the TermCodeSystem table.\nNow that we are supporting multiple versions, there can be multiple ResourceTable rows for a given CodeSystem (each version will have a CodeSystem resource). We only want the TermCodeSystem to be linked to the ResourceTable row for the most recently updated CodeSystem version, and as such I needed to make this column updatable so that we could update it whenever a new version was loaded.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496942259", "createdAt": "2020-09-29T18:13:44Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MjExMQ==", "bodyText": "Understood. So for each version of a given code system, we will have a distinct CodeSystem resource and a row on ResourceTable.\nOnly the current / most recently updated code system will have a row on TermCodeSystem. Is that right?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496972111", "createdAt": "2020-09-29T19:06:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5MzgxMA==", "bodyText": "I suspect I'm misunderstanding something here but here goes:\nA given resource (e.g. CodeSystem) will have a single row on ResourceTable (the latest version) and one or more rows on ResourceHistoryTable (one for each version).\nIn the terminology tables, we have TermCodeSystem and TermCodeSystemVersion.\nA row on TermCodeSystem should identify the one row in ResourceTable (latest), and also identify a row on TermCodeSystemVersion (the current version).\nTo date, we've only ever supported a single version so we've had a one-to-one for TermCodeSystem and TermCodeSystemVersion.\nIt seems to me TermCodeSystemVersion should correspond to a row on ResourceHistoryTable, not ResourceTable. So we could have a single versioned resource for a CodeSystem, identify the latest in TermCodeSystem, and access its history via TermCodeSystemVersion.\nI thought that was the purpose of the TermCodeSystemVersion table but I'm probably mistaken. It just strikes me as a code smell that we will create distinct resources and ResourceTable records for each version of CodeSystem.version.\nSanity check: am I making sense?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496993810", "createdAt": "2020-09-29T19:32:32Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxNTI0OQ==", "bodyText": "In response to your questions:\n\nUnderstood. So for each version of a given code system, we will have a distinct CodeSystem resource and a row on ResourceTable.\nOnly the current / most recently updated code system will have a row on TermCodeSystem. Is that right?\n\nThis is correct.\nIn regards to:\n\nIt seems to me TermCodeSystemVersion should correspond to a row on ResourceHistoryTable, not ResourceTable. So we could have a single versioned resource for a CodeSystem, identify the latest in TermCodeSystem, and access its history via TermCodeSystemVersion.\n\nI disagree. My understanding of ResourceHistoryTable is that it is used to show a state history for a given resource. It tracks how and when a resource was created, updated and possibly deleted. The versions in ResourceHistoryTable shows the current state of a Resource after a given point of time. This to me is different from the meaning of CodeSystem.version which is used to represent a given release or published implementation of a CodeSystem. If each new version of a CodeSystem replaces (i.e. invalidates or inactivates) all previous versions, then yes, I think the versioning of CodeSystem would be analogous to the versioning of resources in ResourceTable and ResourceHistoryTable. However, my understanding of the motivation for this change is the idea that there can be multiple actively supported versions of a CodeSystem. As such, I think that each version of a CodeSystem (version in this case meaning CodeSystem.version which is defined outside of the CDR) should be represented by a separate resource.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497715249", "createdAt": "2020-09-30T18:26:54Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwMzIyMA==", "bodyText": "Ah, this is really interesting. I think you're right about multiple actively supported versions. I think I agree with you. I expect @jamesagnew will agree as well.\nLet's make sure I understand:\nSo we should have multiple CodeSystem resources with the same value for CodeSystem.url - one for each value of CodeSystem.version. Each resource will have its own row on ResourceTable and one or more rows on ResourceHistoryTable.\nThen we should have a single row on TermCodeSystem for all of the CodeSystem resources with the same value for CodeSystem.url. We will have one row on TermCodeSystemVersion for each value of CodeSystem.version for that value of CodeSystem.url, and the single row on TermCodeSystem will point to the \"current\" or \"latest\" version on TermCodeSystemVersion.\nFor operations where the version isn't provided, we look up the \"current\" or \"latest\" on TermCodeSystemVersion via TermCodeSystem for that value of CodeSystem.url.\nFor operations where the version is provided, we look it up directly in TermCodeSystemVersion.\nIs that right? Is this also how it works for ValueSets now?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497803220", "createdAt": "2020-09-30T21:11:58Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTA1Ng==", "bodyText": "Yes, this is how I expect it should be working for CodeSystems, ValueSets and ConceptMaps (I recognize that ConceptMaps are separate, but the mappings themselves would be to a specific CodeSystem version and so I think they would necessarily have to be linked to the CodeSystem version as well).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498265056", "createdAt": "2020-10-01T13:57:39Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MjE2Mw==", "bodyText": "Okay. Thanks for fielding my questions. I understand we also identify the ValueSet and ConceptMap versions different in the terminology tables (i.e. no equivalent to TermCodeSystemVersion entity). Thanks again!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498292163", "createdAt": "2020-10-01T14:33:14Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/entity/TermCodeSystem.java", "diffHunk": "@@ -58,7 +58,7 @@\n \t@Column(name = \"PID\")\n \tprivate Long myPid;\n \t@OneToOne(fetch = FetchType.LAZY)\n-\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = false, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))\n+\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false, updatable = true, foreignKey = @ForeignKey(name = \"FK_TRMCODESYSTEM_RES\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQxNTYzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo0Mjo0M1rOHZO4dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo0Mjo0M1rOHZO4dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyMDI3Nw==", "bodyText": "Nitpick: for consistency and easier reading.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,\n          \n          \n            \n            \t\t@OperationParam(name = \"version\", min = 0, max = 1) StringType theVersion,", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496220277", "createdAt": "2020-09-28T20:42:43Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/provider/dstu3/BaseJpaResourceProviderCodeSystemDstu3.java", "diffHunk": "@@ -84,13 +90,18 @@ public Parameters subsumes(\n \t\t@OperationParam(name = \"system\", min = 0, max = 1) UriType theSystem,\n \t\t@OperationParam(name = \"codingA\", min = 0, max = 1) Coding theCodingA,\n \t\t@OperationParam(name = \"codingB\", min = 0, max = 1) Coding theCodingB,\n+\t\t@OperationParam(name=\"version\", min=0, max=1) StringType theVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQ2MDUxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo1NjoxOVrOHZPTvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0ODozM1rOHZ-pog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzI2Mg==", "bodyText": "Consider another name for this. This is CodeSystem.url and possibly also CodeSystem.version. CodeSystem.identifier is unrelated, and we probably want to avoid confusing the two.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496227262", "createdAt": "2020-09-28T20:56:19Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -793,7 +845,13 @@ private Boolean expandValueSetHandleIncludeOrExcludeUsingDatabase(IValueSetConce\n \t\t/*\n \t\t * Filters\n \t\t */\n-\t\thandleFilters(bool, theSystem, qb, theIncludeOrExclude);\n+\t\tString codeSystemIdentifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMjkxNA==", "bodyText": "Renamed to codeSystemUrlAndVersion.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497002914", "createdAt": "2020-09-29T19:48:33Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -793,7 +845,13 @@ private Boolean expandValueSetHandleIncludeOrExcludeUsingDatabase(IValueSetConce\n \t\t/*\n \t\t * Filters\n \t\t */\n-\t\thandleFilters(bool, theSystem, qb, theIncludeOrExclude);\n+\t\tString codeSystemIdentifier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzI2Mg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQ2MzA1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo1NzowMVrOHZPVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0OTo0MFrOHZ-r5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzY0Mg==", "bodyText": "Typo? Loing versus Loinc?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496227642", "createdAt": "2020-09-28T20:57:01Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -926,36 +984,36 @@ private void handleFilter(String theSystem, QueryBuilder theQb, BooleanJunction<\n \t\t\t\tbreak;\n \t\t\tcase \"concept\":\n \t\t\tcase \"code\":\n-\t\t\t\thandleFilterConceptAndCode(theSystem, theQb, theBool, theFilter);\n+\t\t\t\thandleFilterConceptAndCode(theCodeSystemIdentifier, theQb, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"parent\":\n \t\t\tcase \"child\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincParentChild(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincParentChild(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"ancestor\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincAncestor(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincAncestor(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"descendant\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincDescendant(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincDescendant(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"copyright\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincCopyright(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincCopyright(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\thandleFilterRegex(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t}\n \t}\n \n-\tprivate boolean isCodeSystemLoingOrThrowInvalidRequestException(String theSystem, String theProperty) {\n-\t\tif (!isCodeSystemLoinc(theSystem)) {\n-\t\t\tthrow new InvalidRequestException(\"Invalid filter, property \" + theProperty + \" is LOINC-specific and cannot be used with system: \" + theSystem);\n+\tprivate void isCodeSystemLoingOrThrowInvalidRequestException(String theSystemIdentifier, String theProperty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMzQ5NA==", "bodyText": "Yeah, I guess I should have fixed the name of this method when I made the other changes. Corrected.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497003494", "createdAt": "2020-09-29T19:49:40Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -926,36 +984,36 @@ private void handleFilter(String theSystem, QueryBuilder theQb, BooleanJunction<\n \t\t\t\tbreak;\n \t\t\tcase \"concept\":\n \t\t\tcase \"code\":\n-\t\t\t\thandleFilterConceptAndCode(theSystem, theQb, theBool, theFilter);\n+\t\t\t\thandleFilterConceptAndCode(theCodeSystemIdentifier, theQb, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"parent\":\n \t\t\tcase \"child\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincParentChild(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincParentChild(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"ancestor\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincAncestor(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincAncestor(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"descendant\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincDescendant(theSystem, theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincDescendant(theCodeSystemIdentifier, theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tcase \"copyright\":\n-\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theSystem, theFilter.getProperty());\n-\t\t\t\thandleFilterLoincCopyright(theQb, theBool, theFilter);\n+\t\t\t\tisCodeSystemLoingOrThrowInvalidRequestException(theCodeSystemIdentifier, theFilter.getProperty());\n+\t\t\t\thandleFilterLoincCopyright(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\thandleFilterRegex(theBool, theFilter);\n \t\t\t\tbreak;\n \t\t}\n \t}\n \n-\tprivate boolean isCodeSystemLoingOrThrowInvalidRequestException(String theSystem, String theProperty) {\n-\t\tif (!isCodeSystemLoinc(theSystem)) {\n-\t\t\tthrow new InvalidRequestException(\"Invalid filter, property \" + theProperty + \" is LOINC-specific and cannot be used with system: \" + theSystem);\n+\tprivate void isCodeSystemLoingOrThrowInvalidRequestException(String theSystemIdentifier, String theProperty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyNzY0Mg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQ3MDg3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo1OToyNVrOHZPZ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTowODo0NlrOHaiVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ==", "bodyText": "I'm not sure I understand this comment. What does it mean?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496228841", "createdAt": "2020-09-28T20:59:25Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1920,6 +2069,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElementTarget> cachedTargets;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 674}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNTQzOQ==", "bodyText": "I think it was supposed to say get the latest ConceptMapVersion if the TranslationRequest has url but no ConceptMapVersion. Changed this to get the latest ConceptMapVersion if theTranslationRequest has ConceptMap url but no ConceptMap version to make it clearer..", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497005439", "createdAt": "2020-09-29T19:53:21Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1920,6 +2069,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElementTarget> cachedTargets;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 674}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NzQ2MQ==", "bodyText": "Works for me!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497587461", "createdAt": "2020-09-30T15:08:46Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -1920,6 +2069,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElementTarget> cachedTargets;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyODg0MQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 674}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQ3MjkyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDo1OTo1NlrOHZPbHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo1NDowOFrOHZ-1Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTE1MA==", "bodyText": "Same comment. What does it mean?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496229150", "createdAt": "2020-09-28T20:59:56Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2003,6 +2173,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElement> cachedElements;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 709}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwNTgzOA==", "bodyText": "Same response.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497005838", "createdAt": "2020-09-29T19:54:08Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2003,6 +2173,12 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \t\tList<TermConceptMapGroupElement> cachedElements;\n \t\tArrayList<Predicate> predicates;\n \t\tCoding coding;\n+\n+\t\t//-- get the latest ConceptMapVersion if theTranslationRequest has url, but ConceptMapVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTE1MA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 709}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQ3NTkxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTowMDo1MFrOHZPc1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1OTozMVrOHaBu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ==", "bodyText": "What is the failure?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496229589", "createdAt": "2020-09-28T21:00:50Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2057,6 +2248,7 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \n \t\t\t\t\twhile (scrollableResultsIterator.hasNext()) {\n \t\t\t\t\t\tTermConceptMapGroupElement nextElement = scrollableResultsIterator.next();\n+\t\t\t\t\t\t// TODO: The invocation of the size() below does not seem to be necessary but for some reason, removing it causes tests in TerminologySvcImplR4Test to fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 743}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNzcwNg==", "bodyText": "The test methods throw an exception:\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: ca.uhn.fhir.jpa.entity.TermConceptMapGroupElement.myConceptMapGroupElementTargets, could not initialize proxy - no Session\nThe exception appears to be triggered when the test methods attempt to log TermConceptMapGroupElement elements. I could have simply removed the log statements from the test class, but I was not sure if this was indicative of another reason why the size() method is called below, so I made the note to look into this further later.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497017706", "createdAt": "2020-09-29T20:16:38Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2057,6 +2248,7 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \n \t\t\t\t\twhile (scrollableResultsIterator.hasNext()) {\n \t\t\t\t\t\tTermConceptMapGroupElement nextElement = scrollableResultsIterator.next();\n+\t\t\t\t\t\t// TODO: The invocation of the size() below does not seem to be necessary but for some reason, removing it causes tests in TerminologySvcImplR4Test to fail.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 743}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MzQzMQ==", "bodyText": "Gotcha. That's weird.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497053431", "createdAt": "2020-09-29T20:59:31Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/BaseTermReadSvcImpl.java", "diffHunk": "@@ -2057,6 +2248,7 @@ ConceptSubsumptionOutcome testForSubsumption(FullTextEntityManager theEntityMana\n \n \t\t\t\t\twhile (scrollableResultsIterator.hasNext()) {\n \t\t\t\t\t\tTermConceptMapGroupElement nextElement = scrollableResultsIterator.next();\n+\t\t\t\t\t\t// TODO: The invocation of the size() below does not seem to be necessary but for some reason, removing it causes tests in TerminologySvcImplR4Test to fail.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIyOTU4OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 743}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjQ4NTgwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTowMzozNVrOHZPiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDoyMDo0NVrOHZ_sbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMTA1MQ==", "bodyText": "Is this referring to CodeSystem.version or a TermCodeSystemVersion? The log output may be misleading since TermCodeSystemVersion is internal and specific to HAPI FHIR whereas end-users will be more familiar with CodeSystem.version.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496231051", "createdAt": "2020-09-28T21:03:35Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java", "diffHunk": "@@ -231,6 +231,15 @@ public void deleteCodeSystem(TermCodeSystem theCodeSystem) {\n \t\t});\n \t}\n \n+\t@Override\n+\t@Transactional(propagation = Propagation.NEVER)\n+\tpublic void deleteCodeSystemVersion(TermCodeSystemVersion theCodeSystemVersion) {\n+\t\t// Delete TermCodeSystemVersion\n+\t\tourLog.info(\" * Deleting code system version {}\", theCodeSystemVersion.getCodeSystemVersionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMDAxMg==", "bodyText": "Good point. I was essentially adapting a message logged by a similar method, deleteCodeSystem which does the same thing for TermCodeSystem. I have updated the message to explicitly say Deleting TermCodeSystemVersion ....", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497020012", "createdAt": "2020-09-29T20:20:45Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermCodeSystemStorageSvcImpl.java", "diffHunk": "@@ -231,6 +231,15 @@ public void deleteCodeSystem(TermCodeSystem theCodeSystem) {\n \t\t});\n \t}\n \n+\t@Override\n+\t@Transactional(propagation = Propagation.NEVER)\n+\tpublic void deleteCodeSystemVersion(TermCodeSystemVersion theCodeSystemVersion) {\n+\t\t// Delete TermCodeSystemVersion\n+\t\tourLog.info(\" * Deleting code system version {}\", theCodeSystemVersion.getCodeSystemVersionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMTA1MQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUwMDAxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermLoaderSvcImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTowNzo0M1rOHZPq5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1OToxOVrOHaBuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ==", "bodyText": "Is it safe to set a specific version when one wasn't provided? This seems dangerous to me. Perhaps this should be a required property that triggers a failure when omitted?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496233189", "createdAt": "2020-09-28T21:07:43Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermLoaderSvcImpl.java", "diffHunk": "@@ -494,12 +499,20 @@ UploadStatistics processLoincFiles(LoadedFileDescriptors theDescriptors, Request\n \t\treturn new UploadStatistics(conceptCount, target);\n \t}\n \n-\tprivate ValueSet getValueSetLoincAll() {\n+\tprivate ValueSet getValueSetLoincAll(Properties theUploadProperties) {\n \t\tValueSet retVal = new ValueSet();\n \n-\t\tretVal.setId(\"loinc-all\");\n+\t\tString codeSystemVersionId = theUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = \"loinc-all\" + \"-\" + codeSystemVersionId;\n+\t\t} else {\n+\t\t\tvalueSetId = \"loinc-all\";\n+\t\t\tcodeSystemVersionId = \"1.0.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0MDk1NQ==", "bodyText": "I actually did this for backwards compatibility (it was previously setting the version to 1.0.0 before these changes). If no version is specified, it should basically populate the version the same way as before.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497040955", "createdAt": "2020-09-29T20:47:12Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermLoaderSvcImpl.java", "diffHunk": "@@ -494,12 +499,20 @@ UploadStatistics processLoincFiles(LoadedFileDescriptors theDescriptors, Request\n \t\treturn new UploadStatistics(conceptCount, target);\n \t}\n \n-\tprivate ValueSet getValueSetLoincAll() {\n+\tprivate ValueSet getValueSetLoincAll(Properties theUploadProperties) {\n \t\tValueSet retVal = new ValueSet();\n \n-\t\tretVal.setId(\"loinc-all\");\n+\t\tString codeSystemVersionId = theUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = \"loinc-all\" + \"-\" + codeSystemVersionId;\n+\t\t} else {\n+\t\t\tvalueSetId = \"loinc-all\";\n+\t\t\tcodeSystemVersionId = \"1.0.0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MzIzMg==", "bodyText": "Gotcha. I'm not sure I like it but I do understand it.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497053232", "createdAt": "2020-09-29T20:59:19Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/TermLoaderSvcImpl.java", "diffHunk": "@@ -494,12 +499,20 @@ UploadStatistics processLoincFiles(LoadedFileDescriptors theDescriptors, Request\n \t\treturn new UploadStatistics(conceptCount, target);\n \t}\n \n-\tprivate ValueSet getValueSetLoincAll() {\n+\tprivate ValueSet getValueSetLoincAll(Properties theUploadProperties) {\n \t\tValueSet retVal = new ValueSet();\n \n-\t\tretVal.setId(\"loinc-all\");\n+\t\tString codeSystemVersionId = theUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = \"loinc-all\" + \"-\" + codeSystemVersionId;\n+\t\t} else {\n+\t\t\tvalueSetId = \"loinc-all\";\n+\t\t\tcodeSystemVersionId = \"1.0.0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzMzE4OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUxMzgzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxMTo1OVrOHZPzOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxNDowN1rOHbMb3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ==", "bodyText": "Will appending the version to the resource ID break existing solutions that depend on or expect the versionless resource ID?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496235321", "createdAt": "2020-09-28T21:11:59Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1OTk0NA==", "bodyText": "I am a bit unclear on whether a solution should ever be depending on specific IDs for accessing resources. That aside, the new functionality will only append version to the resource ID if one is provided in configuration. If there is a need to support implementations that depend on the old non-versioned resource IDs, it will still be possible to load LOINC terminology without specifying a version, which will result in a copy of the terminology being loaded with the non-versioned Resource IDs.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497059944", "createdAt": "2020-09-29T21:06:55Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MDgwNQ==", "bodyText": "So a versioned implementation would have ValueSet/loinc-all-2.3.4 (for example), and the implementer would need to account for this change if they were previously expecting ValueSet/loinc-all. Conversely, a non-versioned implementation would happily continue using ValueSet/loinc-all. Do I have that right?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497590805", "createdAt": "2020-09-30T15:13:05Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2NTU1MQ==", "bodyText": "Yes, this is my understanding as well.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498265551", "createdAt": "2020-10-01T13:58:14Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NzM0Mg==", "bodyText": "Thanks!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r498277342", "createdAt": "2020-10-01T14:14:07Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/BaseLoincTop2000LabResultsHandler.java", "diffHunk": "@@ -41,7 +42,12 @@\n \n \tpublic BaseLoincTop2000LabResultsHandler(Map<String, TermConcept> theCode2concept, List<ValueSet> theValueSets, String theValueSetId, String theValueSetUri, String theValueSetName, List<ConceptMap> theConceptMaps, Properties theUploadProperties) {\n \t\tsuper(theCode2concept, theValueSets, theConceptMaps, theUploadProperties);\n-\t\tmyValueSetId = theValueSetId;\n+\t\tString versionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (versionId != null) {\n+\t\t\tmyValueSetId = theValueSetId + \"-\" + versionId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTMyMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUxNjY5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincAnswerListHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxMjo1NVrOHZP01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTowNzowOVrOHaCI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTczNQ==", "bodyText": "Same concern about appending version to the standard resource ID. I'm sure this happens repeatedly so I won't call it out again.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496235735", "createdAt": "2020-09-28T21:12:55Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincAnswerListHandler.java", "diffHunk": "@@ -74,7 +74,14 @@ public void accept(CSVRecord theRecord) {\n \t\t}\n \n \t\t// Answer list ValueSet\n-\t\tValueSet vs = getValueSet(answerListId, \"http://loinc.org/vs/\" + answerListId, answerListName, LOINC_ANSWERLIST_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tString codeSystemVersionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = answerListId + \"-\" + codeSystemVersionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MDA1MQ==", "bodyText": "See my comment above.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497060051", "createdAt": "2020-09-29T21:07:09Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincAnswerListHandler.java", "diffHunk": "@@ -74,7 +74,14 @@ public void accept(CSVRecord theRecord) {\n \t\t}\n \n \t\t// Answer list ValueSet\n-\t\tValueSet vs = getValueSet(answerListId, \"http://loinc.org/vs/\" + answerListId, answerListName, LOINC_ANSWERLIST_VERSION.getCode());\n+\t\tString valueSetId;\n+\t\tString codeSystemVersionId = myUploadProperties.getProperty(LOINC_CODESYSTEM_VERSION.getCode());\n+\t\tif (codeSystemVersionId != null) {\n+\t\t\tvalueSetId = answerListId + \"-\" + codeSystemVersionId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNTczNQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUyMjA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincUploadPropertiesEnum.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNDo0MVrOHZP4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToxNDoxNlrOHailxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA==", "bodyText": "This probably shouldn't be optional.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496236558", "createdAt": "2020-09-28T21:14:41Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincUploadPropertiesEnum.java", "diffHunk": "@@ -96,6 +96,9 @@\n \t/*\n \t * OPTIONAL\n \t */\n+\t// This is the version identifier for the LOINC code system\n+\tLOINC_CODESYSTEM_VERSION(\"loinc.codesystem.version\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MTA5MA==", "bodyText": "As mentioned in previous comments, my intention here was to preserve the previous functionality where possible and as such I made the version optional. If no version is specified, then a non-versioned instance of LOINC will be loaded and will be accessible via non-versioned operations.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497061090", "createdAt": "2020-09-29T21:09:13Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincUploadPropertiesEnum.java", "diffHunk": "@@ -96,6 +96,9 @@\n \t/*\n \t * OPTIONAL\n \t */\n+\t// This is the version identifier for the LOINC code system\n+\tLOINC_CODESYSTEM_VERSION(\"loinc.codesystem.version\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MTc0OA==", "bodyText": "Gotcha. At some point I think we may want to make this mandatory but I accept your reasoning here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497591748", "createdAt": "2020-09-30T15:14:16Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/term/loinc/LoincUploadPropertiesEnum.java", "diffHunk": "@@ -96,6 +96,9 @@\n \t/*\n \t * OPTIONAL\n \t */\n+\t// This is the version identifier for the LOINC code system\n+\tLOINC_CODESYSTEM_VERSION(\"loinc.codesystem.version\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNjU1OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUzMDYwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/resources/ca/uhn/fhir/jpa/term/loinc/loincupload.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxNzoxNFrOHZP86Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToxMTo1NFrOHaCSCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzgwMQ==", "bodyText": "So if this is omitted, the CodeSystem.version will always be 1.0.0 regardless of the version of LOINC loaded. Is that correct? Again, I'm not sure that's safe.\nWhat happens where CodeSystem.version is left unpopulated? Alternatively, perhaps we need a configuration item somewhere in DaoConfig that determines whether or not we keep multiple versions of LOINC.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496237801", "createdAt": "2020-09-28T21:17:14Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/main/resources/ca/uhn/fhir/jpa/term/loinc/loincupload.properties", "diffHunk": "@@ -61,6 +61,10 @@ loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersVa\n ### OPTIONAL ###\n ################\n \n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MjQwOQ==", "bodyText": "As mentioned previously, the LOINC CodeSystem.version was always being set to 1.0.0 and as such I preserved this functionality in cases where an implementation does not otherwise explicitly specify a CodeSystem.version.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497062409", "createdAt": "2020-09-29T21:11:54Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/main/resources/ca/uhn/fhir/jpa/term/loinc/loincupload.properties", "diffHunk": "@@ -61,6 +61,10 @@ loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersVa\n ### OPTIONAL ###\n ################\n \n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzgwMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUzODI3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxOTo0OFrOHZQBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxOTo0OFrOHZQBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTAxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n          \n          \n            \n            \tpublic void testConceptMapFindTermConceptMapByUrl() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496239010", "createdAt": "2020-09-28T21:19:48Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjUzODk2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxOTo1OVrOHZQB_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMToxOTo1OVrOHZQB_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzOTEwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlDifferentVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496239102", "createdAt": "2020-09-28T21:19:59Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/dstu3/FhirResourceDaoDstu3ConceptMapTest.java", "diffHunk": "@@ -98,4 +107,74 @@ protected void doInTransactionWithoutResult(TransactionStatus theStatus) {\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ2MjI3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowOToxMFrOHZsTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowOToxMFrOHZsTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjI5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapFindTermConceptMapByUrl() {\n          \n          \n            \n            \tpublic void testConceptMapFindTermConceptMapByUrl() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702290", "createdAt": "2020-09-29T13:09:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ2MzM3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowOToyNFrOHZsT8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowOToyNFrOHZsT8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlDifferentVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702450", "createdAt": "2020-09-29T13:09:24Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ2NTQ0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowOTo1OFrOHZsVXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzowOTo1OFrOHZsVXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwMjgxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {\n          \n          \n            \n            \tpublic void testConceptMapTwoConceptMapWithSameUrlOneWithoutVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496702812", "createdAt": "2020-09-29T13:09:58Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4ConceptMapTest.java", "diffHunk": "@@ -1148,5 +1154,74 @@ public void testUploadAndApplyR4DemoConceptMap() throws IOException {\n \t\tassertEquals(\"S52.209A\", outcome.getMatches().get(0).getConcept().getCode());\n \t}\n \n+\t@Test\n+\tpublic void testConcaptMapFindTermConceptMapByUrl() {\n+\t\t\t\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpConceptMapList = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, CM_URL);\n+\t\tassertEquals(1, theExpConceptMapList.size());\n+\t\tassertEquals(CM_URL, theExpConceptMapList.get(0).getUrl());\n+\t\t\n+\t}\n+\n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlDifferentVersion() {\n+\t\t\t\t\n+\t\tString theUrl = \"http://loinc.org/property/analyte-suffix\";\n+\t\tConceptMap theConceptMap1 = new ConceptMap();\n+\t\tConceptMap theConceptMap2 = new ConceptMap();\n+\t\t\n+\t\ttheConceptMap1.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name1\").setVersion(\"v1\");\n+\t\ttheConceptMap2.setUrl(theUrl).setStatus(PublicationStatus.ACTIVE).setName(\"name2\").setVersion(\"v2\");\n+\t\t\n+\t\tmyConceptMapDao.create(theConceptMap1);\n+\t\tmyConceptMapDao.create(theConceptMap2);\n+\t\t\n+\t\tOptional<TermConceptMap> theExpConceptMapV1 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v1\");\n+\t\tOptional<TermConceptMap> theExpConceptMapV2 = myTermConceptMapDao.findTermConceptMapByUrlAndVersion(theUrl, \"v2\");\n+\t\t\n+\t\tassertTrue(theExpConceptMapV1.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV1.get().getUrl());\n+\t\tassertEquals(\"v1\", theExpConceptMapV1.get().getVersion());\n+\t\t\n+\t\tassertTrue(theExpConceptMapV2.isPresent());\n+\t\tassertEquals(theUrl, theExpConceptMapV2.get().getUrl());\n+\t\tassertEquals(\"v2\", theExpConceptMapV2.get().getVersion());\n+\n+\t\t// should return the latest one which is v2\n+\t\tPageable page = PageRequest.of(0, 1);\n+\t\tList<TermConceptMap> theExpSecondOne = myTermConceptMapDao.getTermConceptMapEntitiesByUrlOrderByVersion(page, theUrl);\n+\t\t\n+\t\tassertEquals(1, theExpSecondOne.size());\n+\t\tassertEquals(theUrl, theExpSecondOne.get(0).getUrl());\n+\t\tassertEquals(\"v2\", theExpSecondOne.get(0).getVersion());\n+\t}\n \n+\t@Test\n+\tpublic void testConcaptMapTwoConceptMapWithSameUrlOneWithoutVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ4NzAwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNDo1NlrOHZsiqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNDo1NlrOHZsiqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjIxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_v2() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706219", "createdAt": "2020-09-29T13:14:56Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ4OTI2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNToyMVrOHZskBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNToyMVrOHZskBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_v1() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706565", "createdAt": "2020-09-29T13:15:21Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ5MDY2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNTozOVrOHZsk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNTozOVrOHZsk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjgwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706802", "createdAt": "2020-09-29T13:15:39Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ5MTc1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNTo1NFrOHZslng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNTo1NFrOHZslng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNjk3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion_null_v1() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496706974", "createdAt": "2020-09-29T13:15:54Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTQ5MzQwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNjoxN1rOHZsmnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoxNjoxN1rOHZsmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNzIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {\n          \n          \n            \n            \tpublic void testTranslateWithVersionedConceptMapUrl_NoVersion_null_v2() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496707229", "createdAt": "2020-09-29T13:16:17Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/dstu3/ResourceProviderDstu3ConceptMapTest.java", "diffHunk": "@@ -114,4 +126,550 @@ public void testTranslateByCodeSystemsAndSourceCodeOneToMany() {\n \t\tpart = getPartByName(param, \"source\");\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithConceptMapUrlAndVersion() {\n+\t\t\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\t\t\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v2() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v2.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v2\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with ConceptMap v1.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"conceptMapVersion\").setValue(new StringType(\"v1\"));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v1 since v1 specified.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"12222\", coding.getCode());\n+\t\tassertEquals(\"Target Code 12222\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, \"v1\", \"12222\", \"Target Code 12222\");\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v1() {\n+\n+\t\tString url = \"http://url\";\n+\t\tcreateConceptMap(url, null, \"12222\", \"Target Code 12222\"); // first version is null\n+\t\tcreateConceptMap(url, \"v2\", \"13333\", \"Target Code 13333\");\n+\t\t\t\t \t\t\n+\t\t// Call translate with no ConceptMap version.\n+\t\tParameters inParams = new Parameters();\n+\t\tinParams.addParameter().setName(\"url\").setValue(new UriType(url));\n+\t\tinParams.addParameter().setName(\"system\").setValue(new UriType(CS_URL));\n+\t\tinParams.addParameter().setName(\"targetsystem\").setValue(new UriType(CS_URL_2));\n+\t\tinParams.addParameter().setName(\"code\").setValue(new CodeType(\"11111\"));\n+\n+\t\tourLog.info(\"Request Parameters:\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(inParams));\n+\n+\t\tParameters respParams = ourClient\n+\t\t\t.operation()\n+\t\t\t.onType(ConceptMap.class)\n+\t\t\t.named(\"translate\")\n+\t\t\t.withParameters(inParams)\n+\t\t\t.execute();\n+\n+\t\tourLog.info(\"Response Parameters\\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(respParams));\n+\n+\t\t// Should return v2 since v2 is the most recently updated version.\n+\t\tParametersParameterComponent param = getParameterByName(respParams, \"result\");\n+\t\tassertTrue(((BooleanType) param.getValue()).booleanValue());\n+\n+\t\tparam = getParameterByName(respParams, \"message\");\n+\t\tassertEquals(\"Matches found!\", ((StringType) param.getValue()).getValueAsString());\n+\n+\t\tassertEquals(1, getNumberOfParametersByName(respParams, \"match\"));\n+\t\tparam = getParametersByName(respParams, \"match\").get(0);\n+\t\tassertEquals(3, param.getPart().size());\n+\t\tParametersParameterComponent part = getPartByName(param, \"equivalence\");\n+\t\tassertEquals(\"equal\", ((CodeType) part.getValue()).getValueAsString());\n+\t\tpart = getPartByName(param, \"concept\");\n+\t\tCoding coding = (Coding) part.getValue();\n+\t\tassertEquals(\"13333\", coding.getCode());\n+\t\tassertEquals(\"Target Code 13333\", coding.getDisplay());\n+\t\tassertFalse(coding.getUserSelected());\n+\t\tassertEquals(CS_URL_2, coding.getSystem());\n+\t\tassertEquals(\"Version 2\", coding.getVersion());\n+\t\tpart = getPartByName(param, \"source\");\n+\t\tassertEquals(url, ((UriType) part.getValue()).getValueAsString());\n+\t}\n+\n+\t@Test\n+\tpublic void testTranslateWithVersionedConcaptMapUrl_NoVersion_null_v2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTU2MzczOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozMTowOFrOHZtRsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToxNzowN1rOHaiuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA==", "bodyText": "Is it actually a requirement to modify CodeSystem.name? It strikes me as unusual that we would be modifying the content of the resource beyond its version and timestamp.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496718258", "createdAt": "2020-09-29T13:31:08Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java", "diffHunk": "@@ -416,5 +426,25 @@ public void testSubsumesOnCodings_Disjoint() {\n \t\tassertEquals(ConceptSubsumptionOutcome.NOTSUBSUMED.toCode(), ((CodeType) respParam.getParameter().get(0).getValue()).getValue());\n \t}\n \n+\t@Test\n+\tpublic void testUpdateCodeSystemName() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MDMzMA==", "bodyText": "You are correct, I do not believe that there is a requirement to modify CodeSystem.name. I cannot recall the details, but I believe the intent here was to provide basic test coverage for another case being flagged by the Code Cov check e.g. where an existing CodeSystem was being updated (i.e. but no change to URL or version).\nHave updated the method name to reflect what I think was the true intention of this test.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497080330", "createdAt": "2020-09-29T21:48:12Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java", "diffHunk": "@@ -416,5 +426,25 @@ public void testSubsumesOnCodings_Disjoint() {\n \t\tassertEquals(ConceptSubsumptionOutcome.NOTSUBSUMED.toCode(), ((CodeType) respParam.getParameter().get(0).getValue()).getValue());\n \t}\n \n+\t@Test\n+\tpublic void testUpdateCodeSystemName() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MzkyNA==", "bodyText": "Gotcha. Thanks!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497593924", "createdAt": "2020-09-30T15:17:07Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemTest.java", "diffHunk": "@@ -416,5 +426,25 @@ public void testSubsumesOnCodings_Disjoint() {\n \t\tassertEquals(ConceptSubsumptionOutcome.NOTSUBSUMED.toCode(), ((CodeType) respParam.getParameter().get(0).getValue()).getValue());\n \t}\n \n+\t@Test\n+\tpublic void testUpdateCodeSystemName() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODI1OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTU2NzUwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozMjowMVrOHZtUEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozMjowMVrOHZtUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODg2Nw==", "bodyText": "Nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static final String CS_ACMS_URL = \"http://acme.org\";\n          \n          \n            \n            \tprivate static final String CS_ACME_URL = \"http://acme.org\";", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496718867", "createdAt": "2020-09-29T13:32:01Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {\n+\n+\tprivate static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(ResourceProviderR4CodeSystemValidationTest.class);\n+\n+\tprivate IIdType myCsId;\n+\tprivate static final String CS_ACMS_URL = \"http://acme.org\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTU4ODQ3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozNjoyMlrOHZthKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo1Mjo0M1rOHaDf0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIxNg==", "bodyText": "It looks like all of the tests in this class are related to the CodeSystem$validate-code operation, and not the validation of a CodeSystem itself. Consider renaming.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496722216", "createdAt": "2020-09-29T13:36:22Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4MjMyMQ==", "bodyText": "Renamed class to ResourceProviderR4CodeSystemValidateCodeTest.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497082321", "createdAt": "2020-09-29T21:52:43Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIxNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTYxNDI2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0MTozOFrOHZtxWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToxODoyMFrOHaix-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA==", "bodyText": "I'm curious: why did you chose to create ResourceProviderR4CodeSystemValidationTest and ResourceProviderR4CodeSystemVersionedTest instead of simply adding your tests to ResourceProviderR4CodeSystemTest?\nWith CodeSystem tests spread across multiple classes, discoverability is reduced. It also increases the likelihood that some tests might not be updated in light of future modifications. This goes for the multiple ValueSet and ConceptMap test classes as well; however, I won't call it out again. : )", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496726360", "createdAt": "2020-09-29T13:41:38Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExMDM0OQ==", "bodyText": "I cannot speak to ResourceProviderR4CodeSystemVersionedTest as this was created by Frank. I opted to duplicate and rename the classes for a couple of reasons:\n\n\nIn many cases, I found I was simply duplicating most of the methods in the classes, but with a different Before setup. As such, it was much more efficient to simply duplicate the class.\n\n\nI wanted to ensure that the original, non-versioned functionality was not affected by the changes. The easiest way to do this was to keep the original tests intact as much as possible.\n\n\nPersonally, I am not sure how important it is for tests to be discoverable. In the case of future modifications, it should only be necessary to modify tests if those modifications break tests, in which case they will become discoverable.\nFor the ResourceProviderR4CodeSystemVersionedTest class, I have merged this into ResourceProviderR4CodeSystemTest.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497110349", "createdAt": "2020-09-29T22:51:11Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NDg3NQ==", "bodyText": "Understood. Thanks for the explanation!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497594875", "createdAt": "2020-09-30T15:18:20Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4CodeSystemValidationTest.java", "diffHunk": "@@ -0,0 +1,560 @@\n+package ca.uhn.fhir.jpa.provider.r4;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.hl7.fhir.r4.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r4.model.CodeType;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Parameters;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.hl7.fhir.r4.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+\n+public class ResourceProviderR4CodeSystemValidationTest extends BaseResourceProviderR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNjM2MA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTYyOTU3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0NDo0MVrOHZt7HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0NDo0MVrOHZt7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyODg2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testTranslateWithConcaptMapUrlAndVersion() {\n          \n          \n            \n            \tpublic void testTranslateWithConceptMapUrlAndVersion() {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496728861", "createdAt": "2020-09-29T13:44:41Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -870,6 +885,90 @@ public void testTranslateUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithConcaptMapUrlAndVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTYzNzQ1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0NjoxNlrOHZuAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjo1MzoyNFrOHaFT7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDE0NA==", "bodyText": "Please do a search and replace for all instances of \"concapt\". Should be \"concept\". : )", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496730144", "createdAt": "2020-09-29T13:46:16Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -1621,6 +1720,89 @@ public void testTranslateWithReverseUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithReverseConcaptMapUrlAndVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzExMjA0NA==", "bodyText": "Done.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497112044", "createdAt": "2020-09-29T22:53:24Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4ConceptMapTest.java", "diffHunk": "@@ -1621,6 +1720,89 @@ public void testTranslateWithReverseUsingPredicatesWithTargetValueSet() {\n \t\tassertEquals(CM_URL, ((UriType) part.getValue()).getValueAsString());\n \t}\n \n+\t@Test\n+\tpublic void testTranslateWithReverseConcaptMapUrlAndVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMDE0NA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTc1MDk3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowODozN1rOHZvGNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToxODo1NFrOHaizig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw==", "bodyText": "What is the difference between this class and TerminologyLoaderSvcLoincTest? Are these integration tests?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496748087", "createdAt": "2020-09-29T14:08:37Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MDEyNg==", "bodyText": "These are not integration tests. I'm not sure why they're in their own class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496750126", "createdAt": "2020-09-29T14:11:15Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1MDg4MQ==", "bodyText": "The difference between the two is that the TerminologyLoaderSvcLoincTest class uses mock implementations of the TermCodeStorageSvc and TermDeferredStorageSvc whereas the TerminologyLoaderSvcLoincIntegratedTest uses real implementations created by Spring. I admit the name could be confusing. I have renamed it to TerminologyLoaderSvcLoincJpaTest to indicate that it is tied into other JPA services.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497150881", "createdAt": "2020-09-29T23:47:01Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NTI3NA==", "bodyText": "Gotcha. Thanks!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497595274", "createdAt": "2020-09-30T15:18:54Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/term/TerminologyLoaderSvcLoincIntegratedTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package ca.uhn.fhir.jpa.term;\n+\n+import ca.uhn.fhir.jpa.dao.r4.BaseJpaR4Test;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystem;\n+import ca.uhn.fhir.jpa.entity.TermCodeSystemVersion;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.hl7.fhir.r4.model.CodeSystem;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TerminologyLoaderSvcLoincIntegratedTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0ODA4Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTc3MjAwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxMzowMFrOHZvTbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToxOToxNlrOHai0pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA==", "bodyText": "FWIW, we usually add tests for new functionality to the tests for the latest version of FHIR, and only update older versions as necessary. It's nice to have all of the additional tests though. :D", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496751468", "createdAt": "2020-09-29T14:13:00Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package ca.uhn.fhir.jpa.provider.r5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import org.hl7.fhir.r4.model.codesystems.ConceptSubsumptionOutcome;\n+import org.hl7.fhir.r5.model.Enumerations;\n+import org.hl7.fhir.r5.model.Coding;\n+import org.hl7.fhir.r5.model.BooleanType;\n+import org.hl7.fhir.r5.model.CodeSystem;\n+import org.hl7.fhir.r5.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r5.model.CodeType;\n+import org.hl7.fhir.r5.model.Parameters;\n+import org.hl7.fhir.r5.model.StringType;\n+import org.hl7.fhir.r5.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+\n+public class ResourceProviderR5CodeSystemTest extends BaseResourceProviderR5Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NDI1OQ==", "bodyText": "I added these tests because the Code Cov checker was flagging a bunch of changes that were not covered by tests, so I figured better safe than sorry.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496954259", "createdAt": "2020-09-29T18:34:19Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package ca.uhn.fhir.jpa.provider.r5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import org.hl7.fhir.r4.model.codesystems.ConceptSubsumptionOutcome;\n+import org.hl7.fhir.r5.model.Enumerations;\n+import org.hl7.fhir.r5.model.Coding;\n+import org.hl7.fhir.r5.model.BooleanType;\n+import org.hl7.fhir.r5.model.CodeSystem;\n+import org.hl7.fhir.r5.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r5.model.CodeType;\n+import org.hl7.fhir.r5.model.Parameters;\n+import org.hl7.fhir.r5.model.StringType;\n+import org.hl7.fhir.r5.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+\n+public class ResourceProviderR5CodeSystemTest extends BaseResourceProviderR5Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NTU1Ng==", "bodyText": "Ah, of course. Thank you!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497595556", "createdAt": "2020-09-30T15:19:16Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r5/ResourceProviderR5CodeSystemTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package ca.uhn.fhir.jpa.provider.r5;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import ca.uhn.fhir.jpa.api.model.DaoMethodOutcome;\n+import ca.uhn.fhir.jpa.model.entity.ResourceTable;\n+import ca.uhn.fhir.jpa.model.util.JpaConstants;\n+import org.hl7.fhir.r4.model.codesystems.ConceptSubsumptionOutcome;\n+import org.hl7.fhir.r5.model.Enumerations;\n+import org.hl7.fhir.r5.model.Coding;\n+import org.hl7.fhir.r5.model.BooleanType;\n+import org.hl7.fhir.r5.model.CodeSystem;\n+import org.hl7.fhir.r5.model.CodeSystem.ConceptDefinitionComponent;\n+import org.hl7.fhir.r5.model.CodeType;\n+import org.hl7.fhir.r5.model.Parameters;\n+import org.hl7.fhir.r5.model.StringType;\n+import org.hl7.fhir.r5.model.UriType;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.io.IOException;\n+\n+public class ResourceProviderR5CodeSystemTest extends BaseResourceProviderR5Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MTQ2OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTc5ODUwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxNzo1OVrOHZvjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo0Nzo0OVrOHaHtyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTYwNg==", "bodyText": "Again, this should probably be mandatory.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496755606", "createdAt": "2020-09-29T14:17:59Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1MTQzMw==", "bodyText": "Per my earlier comments, I opted to make this optional so as to maintain backwards compatibility.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497151433", "createdAt": "2020-09-29T23:47:49Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTYwNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTgwMTgyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxODo0MlrOHZvlxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToyMDozMlrOHai4aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjE2Nw==", "bodyText": "Worth investigating: will this version and the LOINC version above ever actually be different? Same goes for the loinc.conceptmap.version below.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496756167", "createdAt": "2020-09-29T14:18:42Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67\n+\n+# This is the version identifier for the answer list file\n+## Key may be omitted\n+loinc.answerlist.version=Beta.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1NjI5OQ==", "bodyText": "Frank and I discussed this previously with James and decided that we should leave it to sites doing the loading to decide what version to assign to the ConceptMap and answer lists. As part of the documentation updates, I intend to make it clear that if the code system is being versioned, then the code system version will need to be incorporated into these version settings (to ensure that existing versions do not get overwritten).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497156299", "createdAt": "2020-09-29T23:54:50Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67\n+\n+# This is the version identifier for the answer list file\n+## Key may be omitted\n+loinc.answerlist.version=Beta.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjE2Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5NjUyMw==", "bodyText": "Makes sense to me. Thanks!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497596523", "createdAt": "2020-09-30T15:20:32Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v267_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# Answer lists (ValueSets of potential answers/values for LOINC \"questions\")\n+## File must be present\n+loinc.answerlist.file=AccessoryFiles/AnswerFile/AnswerList.csv\n+# Answer list links (connects LOINC observation codes to answer list codes)\n+## File must be present\n+loinc.answerlist.link.file=AccessoryFiles/AnswerFile/LoincAnswerListLink.csv\n+\n+# Document ontology\n+## File must be present\n+loinc.document.ontology.file=AccessoryFiles/DocumentOntology/DocumentOntology.csv\n+\n+# LOINC codes\n+## File must be present\n+loinc.file=LoincTable/Loinc.csv\n+\n+# LOINC hierarchy\n+## File must be present\n+loinc.hierarchy.file=AccessoryFiles/MultiAxialHierarchy/MultiAxialHierarchy.csv\n+\n+# IEEE medical device codes\n+## File must be present\n+loinc.ieee.medical.device.code.mapping.table.file=AccessoryFiles/LoincIeeeMedicalDeviceCodeMappingTable/LoincIeeeMedicalDeviceCodeMappingTable.csv\n+\n+# Imaging document codes\n+## File must be present\n+loinc.imaging.document.codes.file=AccessoryFiles/ImagingDocuments/ImagingDocumentCodes.csv\n+\n+# Part\n+## File must be present\n+loinc.part.file=AccessoryFiles/PartFile/Part.csv\n+\n+# Part link\n+## File must be present\n+loinc.part.link.primary.file=AccessoryFiles/PartFile/LoincPartLink_Primary.csv\n+loinc.part.link.supplementary.file=AccessoryFiles/PartFile/LoincPartLink_Supplementary.csv\n+\n+# Part related code mapping\n+## File must be present\n+loinc.part.related.code.mapping.file=AccessoryFiles/PartFile/PartRelatedCodeMapping.csv\n+\n+# RSNA playbook\n+## File must be present\n+loinc.rsna.playbook.file=AccessoryFiles/LoincRsnaRadiologyPlaybook/LoincRsnaRadiologyPlaybook.csv\n+\n+# Top 2000 codes - SI\n+## File must be present\n+loinc.top2000.common.lab.results.si.file=AccessoryFiles/Top2000Results/SI/Top2000CommonLabResultsSi.csv\n+# Top 2000 codes - US\n+## File must be present\n+loinc.top2000.common.lab.results.us.file=AccessoryFiles/Top2000Results/US/Top2000CommonLabResultsUs.csv\n+\n+# Universal lab order ValueSet\n+## File must be present\n+loinc.universal.lab.order.valueset.file=AccessoryFiles/LoincUniversalLabOrdersValueSet/LoincUniversalLabOrdersValueSet.csv\n+\n+################\n+### OPTIONAL ###\n+################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.67\n+\n+# This is the version identifier for the answer list file\n+## Key may be omitted\n+loinc.answerlist.version=Beta.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NjE2Nw=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTgwNTk4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v268_loincupload.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxOToyOVrOHZvocQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo1Njo0MlrOHaIGNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1Njg0OQ==", "bodyText": "This is in the mandatory section but the comment indicates it is optional.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496756849", "createdAt": "2020-09-29T14:19:29Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v268_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.68", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1NzY4NQ==", "bodyText": "Good catch. This should have been in the optional section. Now fixed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497157685", "createdAt": "2020-09-29T23:56:42Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/resources/loinc/v268_loincupload.properties", "diffHunk": "@@ -0,0 +1,87 @@\n+#################\n+### MANDATORY ###\n+#################\n+\n+# This is the version identifier for the LOINC code system\n+## Key may be omitted if only a single version of LOINC is being kept.\n+loinc.codesystem.version=2.68", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1Njg0OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTgyMDY3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyMjoxM1rOHZvxWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNToyMjozOFrOHai-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ==", "bodyText": "Is there a potential issue with migration when reusing an index name?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496759131", "createdAt": "2020-09-29T14:22:13Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1ODg0MQ==", "bodyText": "I do not believe so given that the old index is being dropped before the new index is being added. I tested the migration myself and again when I deployed on the LOINC dev box and did not detect any issues.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497158841", "createdAt": "2020-09-29T23:58:34Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5Nzk5Mw==", "bodyText": "Cool. I'm always a little wary of such changes with migration tasks. Thanks for validating it.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497597993", "createdAt": "2020-09-30T15:22:38Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTEzMQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTgyMjA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyMjozMFrOHZvyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo1OTo1NlrOHaIOYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTM1OQ==", "bodyText": "Same. Duplicate index name?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496759359", "createdAt": "2020-09-29T14:22:30Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");\n+\n+\t\t//Term CodeSystem Version and Term ValueSet Version\n+\t\tBuilder.BuilderWithTableName trmCodeSystemVer = version.onTable(\"TRM_CODESYSTEM_VER\");\n+\t\ttrmCodeSystemVer.addIndex(\"20200923.1\", \"IDX_CODESYSTEM_AND_VER\").unique(true).withColumns(\"CODESYSTEM_PID\", \"CS_VERSION_ID\");\n+\t\tBuilder.BuilderWithTableName trmValueSet = version.onTable(\"TRM_VALUESET\");\n+\t\ttrmValueSet.addColumn(\"20200923.2\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermValueSet.MAX_VER_LENGTH);\n+\t\ttrmValueSet.dropIndex(\"20200923.3\", \"IDX_VALUESET_URL\");\n+\t\ttrmValueSet.addIndex(\"20200923.4\", \"IDX_VALUESET_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTc3OA==", "bodyText": "Same answer as before. I do not believe this is an issue as the old index is being dropped. As per my previous comment, I have tested this (with PostgreSQL) and there were no issues.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497159778", "createdAt": "2020-09-29T23:59:56Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -141,6 +143,20 @@ protected void init510() {\n \n \t\t//EMPI Target Type\n \t\tempiLink.addColumn(\"20200727.1\",\"TARGET_TYPE\").nullable().type(ColumnTypeEnum.STRING, EmpiLink.TARGET_TYPE_LENGTH);\n+\n+\t\t//ConceptMap add version for search\n+\t\tBuilder.BuilderWithTableName trmConceptMap = version.onTable(\"TRM_CONCEPT_MAP\");\n+\t\ttrmConceptMap.addColumn(\"20200910.1\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermConceptMap.MAX_VER_LENGTH);\n+\t\ttrmConceptMap.dropIndex(\"20200910.2\", \"IDX_CONCEPT_MAP_URL\");\n+\t\ttrmConceptMap.addIndex(\"20200910.3\", \"IDX_CONCEPT_MAP_URL\").unique(true).withColumns(\"URL\", \"VER\");\n+\n+\t\t//Term CodeSystem Version and Term ValueSet Version\n+\t\tBuilder.BuilderWithTableName trmCodeSystemVer = version.onTable(\"TRM_CODESYSTEM_VER\");\n+\t\ttrmCodeSystemVer.addIndex(\"20200923.1\", \"IDX_CODESYSTEM_AND_VER\").unique(true).withColumns(\"CODESYSTEM_PID\", \"CS_VERSION_ID\");\n+\t\tBuilder.BuilderWithTableName trmValueSet = version.onTable(\"TRM_VALUESET\");\n+\t\ttrmValueSet.addColumn(\"20200923.2\", \"VER\").nullable().type(ColumnTypeEnum.STRING, TermValueSet.MAX_VER_LENGTH);\n+\t\ttrmValueSet.dropIndex(\"20200923.3\", \"IDX_VALUESET_URL\");\n+\t\ttrmValueSet.addIndex(\"20200923.4\", \"IDX_VALUESET_URL\").unique(true).withColumns(\"URL\", \"VER\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTM1OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTgzNTQwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyNToxMFrOHZv6tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoxODoyM1rOHaI_Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTUyNg==", "bodyText": "Neat. Codecov includes a warning right in the diff! I guess you need to add some tests.\nCheck warning on line 338 in hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java\nCodecov\n/ codecov/patch\nhapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java#L337-L338\nAdded lines #L337 - L338 were not covered by tests", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496761526", "createdAt": "2020-09-29T14:25:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -326,6 +326,48 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MjMwNg==", "bodyText": "OK, I overlooked this when merging Frank's changes. I have added a test to exercise this in the R5 CodeSystem resource provider test.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497172306", "createdAt": "2020-09-30T00:18:23Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/CommonCodeSystemsTerminologyService.java", "diffHunk": "@@ -326,6 +326,48 @@ public static String getValueSetUrl(@Nonnull IBaseResource theValueSet) {\n \t\treturn url;\n \t}\n \n+\tpublic static String getCodeSystemUrl(@Nonnull IBaseResource theCodeSystem) {\n+\t\tString url;\n+\t\tswitch (theCodeSystem.getStructureFhirVersionEnum()) {\n+\t\t\tcase R4: {\n+\t\t\t\turl = ((org.hl7.fhir.r4.model.CodeSystem) theCodeSystem).getUrl();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase R5: {\n+\t\t\t\turl = ((org.hl7.fhir.r5.model.CodeSystem) theCodeSystem).getUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTUyNg=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg0NTgzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyNzoxMFrOHZwBPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyMDowM1rOHaJD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzE5OQ==", "bodyText": "theWantSystemIdentifier is the system and version? Not an actual identifier in the context of a resource. Consider a more appropriate name.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496763199", "createdAt": "2020-09-29T14:27:10Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -91,23 +91,23 @@ public ValueSetExpansionOutcome expandValueSet(ValidationSupportContext theValid\n \t\treturn new ValueSetExpansionOutcome(expansion, null);\n \t}\n \n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3MzUwMQ==", "bodyText": "Renamed it to theWantSystemUrlAndVersion.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497173501", "createdAt": "2020-09-30T00:20:03Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -91,23 +91,23 @@ public ValueSetExpansionOutcome expandValueSet(ValidationSupportContext theValid\n \t\treturn new ValueSetExpansionOutcome(expansion, null);\n \t}\n \n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetToCanonical(ValidationSupportContext theValidationSupportContext, IBaseResource theValueSetToExpand, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzE5OQ=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTg0ODA2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyNzozN1rOHZwCug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMDoyNDoxOVrOHaJPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzU3OA==", "bodyText": "There are more Codecov warnings in this class.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r496763578", "createdAt": "2020-09-29T14:27:37Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -145,26 +142,59 @@ public CodeValidationResult validateCode(ValidationSupportContext theValidationS\n \t\t\t\treturn null;\n \t\t\t}\n \t\t} else {\n+\t\t\tString codeSystemUrl;\n+\t\t\tString codeSystemVersion = null;\n+\t\t\tint codeSystemVersionIndex = theCodeSystem.indexOf(\"|\");\n+\t\t\tif (codeSystemVersionIndex > -1) {\n+\t\t\t\tcodeSystemUrl = theCodeSystem.substring(0, codeSystemVersionIndex);\n+\t\t\t\tcodeSystemVersion = theCodeSystem.substring(codeSystemVersionIndex + 1);\n+\t\t\t} else {\n+\t\t\t\tcodeSystemUrl = theCodeSystem;\n+\t\t\t}\n \t\t\tswitch (myCtx.getVersion().getVersion()) {\n \t\t\t\tcase DSTU2_HL7ORG:\n-\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n-\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n-\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(theCodeSystem)));\n+\t\t\t\t\tif (codeSystemVersion != null) {\n+\t\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n+\t\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n+\t\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(codeSystemUrl).setVersion(codeSystemVersion)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3NjQyMQ==", "bodyText": "I have backed out the changes for DSTU2. I think this was a copy and paste error seeing there was never any intention to support code system versioning for DSTU2.\nAdded test coverage for DSTU3 and R5 changes.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497176421", "createdAt": "2020-09-30T00:24:19Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -145,26 +142,59 @@ public CodeValidationResult validateCode(ValidationSupportContext theValidationS\n \t\t\t\treturn null;\n \t\t\t}\n \t\t} else {\n+\t\t\tString codeSystemUrl;\n+\t\t\tString codeSystemVersion = null;\n+\t\t\tint codeSystemVersionIndex = theCodeSystem.indexOf(\"|\");\n+\t\t\tif (codeSystemVersionIndex > -1) {\n+\t\t\t\tcodeSystemUrl = theCodeSystem.substring(0, codeSystemVersionIndex);\n+\t\t\t\tcodeSystemVersion = theCodeSystem.substring(codeSystemVersionIndex + 1);\n+\t\t\t} else {\n+\t\t\t\tcodeSystemUrl = theCodeSystem;\n+\t\t\t}\n \t\t\tswitch (myCtx.getVersion().getVersion()) {\n \t\t\t\tcase DSTU2_HL7ORG:\n-\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n-\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n-\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(theCodeSystem)));\n+\t\t\t\t\tif (codeSystemVersion != null) {\n+\t\t\t\t\t\tvs = new org.hl7.fhir.dstu2.model.ValueSet()\n+\t\t\t\t\t\t\t.setCompose(new org.hl7.fhir.dstu2.model.ValueSet.ValueSetComposeComponent()\n+\t\t\t\t\t\t\t\t.addInclude(new org.hl7.fhir.dstu2.model.ValueSet.ConceptSetComponent().setSystem(codeSystemUrl).setVersion(codeSystemVersion)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MzU3OA=="}, "originalCommit": {"oid": "42b4e9ae02f33baa02a49b523a10935275155b7f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTI1NDA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo0NzowOFrOHakEKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjowNTo1MVrOHa3xKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxNTkxNA==", "bodyText": "You changed some but not all of theWantSystemIdentifier to theWantSystemUrlAndVersion. Quick search across the project found 19 instances of theWantSystemIdentifier remaining.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497615914", "createdAt": "2020-09-30T15:47:08Z", "author": {"login": "dmuylwyk"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -314,7 +349,7 @@ public LookupCodeResult lookupCode(ValidationSupportContext theValidationSupport\n \t}\n \n \t@Nullable\n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzODcyOA==", "bodyText": "Changed all of the remaining theWantSystemIdentifier references to theWantSystemUrlAndVersion", "url": "https://github.com/hapifhir/hapi-fhir/pull/2081#discussion_r497938728", "createdAt": "2020-10-01T02:05:51Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-validation/src/main/java/org/hl7/fhir/common/hapi/validation/support/InMemoryTerminologyServerValidationSupport.java", "diffHunk": "@@ -314,7 +349,7 @@ public LookupCodeResult lookupCode(ValidationSupportContext theValidationSupport\n \t}\n \n \t@Nullable\n-\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystem, @Nullable String theWantCode) {\n+\tprivate org.hl7.fhir.r5.model.ValueSet expandValueSetDstu2Hl7Org(ValidationSupportContext theValidationSupportContext, ValueSet theInput, @Nullable String theWantSystemIdentifier, @Nullable String theWantCode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxNTkxNA=="}, "originalCommit": {"oid": "dc3443665cebadb957d29caa0a7c8ea9a26bc9f3"}, "originalPosition": 275}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1787, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}