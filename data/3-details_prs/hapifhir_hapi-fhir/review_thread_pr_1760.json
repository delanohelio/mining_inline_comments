{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTEyOTk4", "number": 1760, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozMzo1OVrODoxbHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNTowMlrODoxdCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDc5Mzg4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozMzo1OVrOF3huTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozMzo1OVrOF3huTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2ODUyNQ==", "bodyText": "Nice, great message.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1760#discussion_r393768525", "createdAt": "2020-03-17T15:33:59Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderReference.java", "diffHunk": "@@ -317,24 +332,46 @@ private Predicate addPredicateReferenceWithChain(String theResourceName, String\n \t\t\t\torValues.add(chainValue);\n \t\t\t}\n \n+\n \t\t\tSubquery<Long> subQ = createLinkSubquery(foundChainMatch, chain, subResourceName, orValues, theRequest);\n \n \t\t\tPredicate pathPredicate = createResourceLinkPathPredicate(theResourceName, theParamName, theJoin);\n \t\t\tPredicate pidPredicate = theJoin.get(\"myTargetResourcePid\").in(subQ);\n-\t\t\tPredicate andPredicate = myBuilder.and(pathPredicate, pidPredicate);\n+\t\t\tPredicate andPredicate = myCriteriaBuilder.and(pathPredicate, pidPredicate);\n \t\t\ttheCodePredicates.add(andPredicate);\n-\n+\t\t\tcandidateTargetTypes.add(nextType);\n \t\t}\n \n \t\tif (!foundChainMatch) {\n-\t\t\tthrow new InvalidRequestException(myContext.getLocalizer().getMessage(BaseHapiFhirResourceDao.class, \"invalidParameterChain\", theParamName + '.' + theRef.getChain()));\n+\t\t\tthrow new InvalidRequestException(myContext.getLocalizer().getMessage(BaseHapiFhirResourceDao.class, \"invalidParameterChain\", theParamName + '.' + theReferenceParam.getChain()));\n+\t\t}\n+\n+\t\tif (candidateTargetTypes.size() > 1) {\n+\t\t\twarnAboutPerformanceOnUnqualifiedResources(theParamName, theRequest, candidateTargetTypes);\n \t\t}\n \n-\t\tPredicate predicate = myBuilder.or(toArray(theCodePredicates));\n+\t\tPredicate predicate = myCriteriaBuilder.or(toArray(theCodePredicates));\n \t\tmyQueryRoot.addPredicate(predicate);\n \t\treturn predicate;\n \t}\n \n+\tprivate void warnAboutPerformanceOnUnqualifiedResources(String theParamName, RequestDetails theRequest, List<Class<? extends IBaseResource>> theCandidateTargetTypes) {\n+\t\tString message = new StringBuilder()\n+\t\t\t.append(\"This search uses an unqualified resource(a parameter in a chain without a resource type). \")\n+\t\t\t.append(\"This is less efficient than using a qualified type. \")\n+\t\t\t.append(\"[\" + theParamName + \"] resolves to [\"+ theCandidateTargetTypes.stream().map(Class::getSimpleName).collect(Collectors.joining(\",\")) +\"].\")\n+\t\t\t.append(\"If you know what you're looking for, try qualifying it like this: \")\n+\t\t\t.append(theCandidateTargetTypes.stream().map(cls -> \"[\" +cls.getSimpleName() +\":\"+theParamName+\"]\").collect(Collectors.joining(\" or \")))\n+\t\t\t.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f872ffb5153311045f6042727ed1199a5ced0de"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDc5ODgxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/MatchResourceUrlService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNTowMlrOF3hxYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNTowMlrOF3hxYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTMxNA==", "bodyText": "One meta comment I'll drop here: This needs a changelog", "url": "https://github.com/hapifhir/hapi-fhir/pull/1760#discussion_r393769314", "createdAt": "2020-03-17T15:35:02Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/MatchResourceUrlService.java", "diffHunk": "@@ -81,7 +81,6 @@\n \t\t\t\t.add(StorageProcessingMessage.class, message);\n \t\t\tJpaInterceptorBroadcaster.doCallHooks(myInterceptorBroadcaster, theRequest, Pointcut.JPA_PERFTRACE_INFO, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f872ffb5153311045f6042727ed1199a5ced0de"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1926, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}