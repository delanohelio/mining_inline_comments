{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MzI3MDE4", "number": 2261, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowOToyN1rOFK2kOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTowMzo1OVrOFM9g6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI0MDg4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowOToyN1rOINt1Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMTowMjoyOVrOIOA-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MzMwMw==", "bodyText": "Could we move all the UCUM stuff up into hapi-fhir-jpaserver-model or hapi-fhir-jpaserve-base? Putting this dependency in hapi-fhir-base could cause issues since the base project gets pulled into all kinds of environments where UCUM wouldn't work (e.g. android phones)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551253303", "createdAt": "2021-01-04T11:09:27Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/pom.xml", "diffHunk": "@@ -64,6 +64,12 @@\n \t\t<!-- <dependency> <groupId>xerces</groupId> <artifactId>xercesImpl</artifactId> \n \t\t\t<version>2.11.0</version> <optional>true</optional> </dependency> -->\n \n+\t\t<!--  FHIR  -->\n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2Njk1OA==", "bodyText": "Will move to hapi-fhir-jpaserver-model", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551566958", "createdAt": "2021-01-04T21:02:29Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-base/pom.xml", "diffHunk": "@@ -64,6 +64,12 @@\n \t\t<!-- <dependency> <groupId>xerces</groupId> <artifactId>xercesImpl</artifactId> \n \t\t\t<version>2.11.0</version> <optional>true</optional> </dependency> -->\n \n+\t\t<!--  FHIR  -->\n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MzMwMw=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI2MDk0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNTo1N1rOINuAhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMTowMzozOFrOIOBAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjE5Nw==", "bodyText": "I think calling this feature \"ucum support\" is perhaps a bit too vague, since there are other ways you can use UCUM (e.g. for validation) even with this featured turned off.\nHow about getNormalizedQuantitySearch...?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551256197", "createdAt": "2021-01-04T11:15:57Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "diffHunk": "@@ -585,4 +588,44 @@ private static void validateTreatBaseUrlsAsLocal(String theUrl) {\n \t\t}\n \n \t}\n+\n+\t/**\n+\t * Set the UCUM service support level\n+     * \n+\t * <p>\n+\t * The default value is {@link UcumSupportLevelEnum#UCUM_NOT_SUPPORTED} which is current behavior.\n+\t * </p>\n+\t * <p>\n+\t * Here is the UCUM service support level\n+\t *    <ul>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_NOT_SUPPORTED}, default, Quantity is stored in {@link ResourceIndexedSearchParamQuantity} only and it is used by searching.</li>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_STORAGE_SUPPORTED}, Quantity is stored in both {@link ResourceIndexedSearchParamQuantity} and {@link ResourceIndexedSearchParamQuantityNormalized}, but {@link ResourceIndexedSearchParamQuantity} is used by searching.</li>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_SEARCH_SUPPORTED}, Quantity is stored in both {@link ResourceIndexedSearchParamQuantity} and {@link ResourceIndexedSearchParamQuantityNormalized}, {@link ResourceIndexedSearchParamQuantityNormalized} is used by searching.</li>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_FULL_SUPPORTED}, Quantity is stored in only in {@link ResourceIndexedSearchParamQuantityNormalized}, {@link ResourceIndexedSearchParamQuantityNormalized} is used by searching. NOTE\uff1a this option is not supported yet.</li>\n+\t *     </ul>\n+\t * </p>\n+\t *\n+\t * @since 5.3.0\n+\t */\n+\tpublic UcumSupportLevelEnum getUcumSupportLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NzQ2Nw==", "bodyText": "Will rename", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551567467", "createdAt": "2021-01-04T21:03:38Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ModelConfig.java", "diffHunk": "@@ -585,4 +588,44 @@ private static void validateTreatBaseUrlsAsLocal(String theUrl) {\n \t\t}\n \n \t}\n+\n+\t/**\n+\t * Set the UCUM service support level\n+     * \n+\t * <p>\n+\t * The default value is {@link UcumSupportLevelEnum#UCUM_NOT_SUPPORTED} which is current behavior.\n+\t * </p>\n+\t * <p>\n+\t * Here is the UCUM service support level\n+\t *    <ul>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_NOT_SUPPORTED}, default, Quantity is stored in {@link ResourceIndexedSearchParamQuantity} only and it is used by searching.</li>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_STORAGE_SUPPORTED}, Quantity is stored in both {@link ResourceIndexedSearchParamQuantity} and {@link ResourceIndexedSearchParamQuantityNormalized}, but {@link ResourceIndexedSearchParamQuantity} is used by searching.</li>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_SEARCH_SUPPORTED}, Quantity is stored in both {@link ResourceIndexedSearchParamQuantity} and {@link ResourceIndexedSearchParamQuantityNormalized}, {@link ResourceIndexedSearchParamQuantityNormalized} is used by searching.</li>\n+\t *       <li>{@link UcumSupportLevelEnum#UCUM_FULL_SUPPORTED}, Quantity is stored in only in {@link ResourceIndexedSearchParamQuantityNormalized}, {@link ResourceIndexedSearchParamQuantityNormalized} is used by searching. NOTE\uff1a this option is not supported yet.</li>\n+\t *     </ul>\n+\t * </p>\n+\t *\n+\t * @since 5.3.0\n+\t */\n+\tpublic UcumSupportLevelEnum getUcumSupportLevel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjE5Nw=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI2MzY4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNjo0NlrOINuCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjowNjowOFrOIOC2GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjU3OQ==", "bodyText": "It should be 530 at this point. Version 5.2.0 is already released.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551256579", "createdAt": "2021-01-04T11:16:46Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -83,6 +83,32 @@ protected void init520() {\n \t\t\t.addForeignKey(\"20201029.3\", \"FK_EMPI_LINK_GOLDEN_RESOURCE\")\n \t\t\t.toColumn(\"GOLDEN_RESOURCE_PID\")\n \t\t\t.references(\"HFJ_RESOURCE\", \"RES_ID\");\n+\t\t\n+\t\t// Version 520 or 530?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2OTQ4OQ==", "bodyText": "hapi-fhir/hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java\n    \n    \n         Line 73\n      in\n      86f254c\n    \n    \n    \n    \n\n        \n          \n           init520(); // 20201029 - Present \n        \n    \n  \n\n\n520 was added after 5.2.0 was released. Should it be changed to 530. There is no migration task for 520 @jamesagnew", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551569489", "createdAt": "2021-01-04T21:08:10Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -83,6 +83,32 @@ protected void init520() {\n \t\t\t.addForeignKey(\"20201029.3\", \"FK_EMPI_LINK_GOLDEN_RESOURCE\")\n \t\t\t.toColumn(\"GOLDEN_RESOURCE_PID\")\n \t\t\t.references(\"HFJ_RESOURCE\", \"RES_ID\");\n+\t\t\n+\t\t// Version 520 or 530?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjU3OQ=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3NTY1MQ==", "bodyText": "@frankjtao oh haha! Yeah, this should be renamed please. Good catch!", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551575651", "createdAt": "2021-01-04T21:21:17Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -83,6 +83,32 @@ protected void init520() {\n \t\t\t.addForeignKey(\"20201029.3\", \"FK_EMPI_LINK_GOLDEN_RESOURCE\")\n \t\t\t.toColumn(\"GOLDEN_RESOURCE_PID\")\n \t\t\t.references(\"HFJ_RESOURCE\", \"RES_ID\");\n+\t\t\n+\t\t// Version 520 or 530?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjU3OQ=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU4OTUyNg==", "bodyText": "I have added a new field SP_QUANTITY_NRML_PRESENT to the ResourceTable, after deploying the war to my local server (tomcat+postgresql), the field is set to NULL instead false for the existing column, is this normal? @jamesagnew", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551589526", "createdAt": "2021-01-04T21:51:48Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -83,6 +83,32 @@ protected void init520() {\n \t\t\t.addForeignKey(\"20201029.3\", \"FK_EMPI_LINK_GOLDEN_RESOURCE\")\n \t\t\t.toColumn(\"GOLDEN_RESOURCE_PID\")\n \t\t\t.references(\"HFJ_RESOURCE\", \"RES_ID\");\n+\t\t\n+\t\t// Version 520 or 530?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjU3OQ=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU5MzgxMw==", "bodyText": "@frankjtao yup, it'll default to null. You should set your code up to treat null as if it was false so that it doesn't cause any issues for people who are migrating.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551593813", "createdAt": "2021-01-04T21:58:21Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -83,6 +83,32 @@ protected void init520() {\n \t\t\t.addForeignKey(\"20201029.3\", \"FK_EMPI_LINK_GOLDEN_RESOURCE\")\n \t\t\t.toColumn(\"GOLDEN_RESOURCE_PID\")\n \t\t\t.references(\"HFJ_RESOURCE\", \"RES_ID\");\n+\t\t\n+\t\t// Version 520 or 530?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjU3OQ=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU5NzU5Mg==", "bodyText": "The field is set to boolean  in the Hibernate mapping, it should be take care of by Hibernate.\n\n  \n    \n      hapi-fhir/hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ResourceTable.java\n    \n    \n         Line 158\n      in\n      6683a22\n    \n    \n    \n    \n\n        \n          \n           private boolean myParamsQuantityNormalizedPopulated; \n        \n    \n  \n\n @jamesagnew", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551597592", "createdAt": "2021-01-04T22:06:08Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -83,6 +83,32 @@ protected void init520() {\n \t\t\t.addForeignKey(\"20201029.3\", \"FK_EMPI_LINK_GOLDEN_RESOURCE\")\n \t\t\t.toColumn(\"GOLDEN_RESOURCE_PID\")\n \t\t\t.references(\"HFJ_RESOURCE\", \"RES_ID\");\n+\t\t\n+\t\t// Version 520 or 530?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NjU3OQ=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI3NTAxOnYy", "diffSide": "LEFT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderHasParamR4Test.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMDoxNVrOINuISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMDoxNVrOINuISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1ODE4Nw==", "bodyText": "Thanks for removing this. Always appreciate when people clean up test cruft as they find them! :)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551258187", "createdAt": "2021-01-04T11:20:15Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderHasParamR4Test.java", "diffHunk": "@@ -163,7 +163,6 @@ public void testMultipleHasParametersOfSameType() throws Exception {\n \t\tourLog.info(\"uri = \" + uri);\n \t\t\n \t\tList<String> ids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n-\t\tSystem.out.println(\"ids.size() = \" + ids.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI4MjA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMjozNlrOINuMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyMjozNlrOINuMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1OTIwOQ==", "bodyText": "Not that it makes much difference, but just to match the style we usually use in these tests can you move this line up into the @AfterEach method in this test class (or create one if there isn't already one)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551259209", "createdAt": "2021-01-04T11:22:36Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -2959,6 +3062,32 @@ public void testSearchQuantityWrongParam() {\n \n \t}\n \n+\t@Test\n+\tpublic void testSearchQuantityWithUcumSearchSupported() {\n+\t\t\n+\t\tmyModelConfig.setUcumSearchSupported();\n+\t\tCondition c1 = new Condition();\n+\t\tc1.setAbatement(new Range().setLow(new SimpleQuantity().setValue(1L)).setHigh(new SimpleQuantity().setValue(1L)));\n+\t\tString id1 = myConditionDao.create(c1).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\tCondition c2 = new Condition();\n+\t\tc2.setOnset(new Range().setLow(new SimpleQuantity().setValue(1L)).setHigh(new SimpleQuantity().setValue(1L)));\n+\t\tString id2 = myConditionDao.create(c2).getId().toUnqualifiedVersionless().getValue();\n+\n+\t\t{\n+\t\t\tIBundleProvider found = myConditionDao.search(new SearchParameterMap().setLoadSynchronous(true).add(Condition.SP_ABATEMENT_AGE, new QuantityParam(\"1\")));\n+\t\t\tassertThat(toUnqualifiedVersionlessIdValues(found), containsInAnyOrder(id1));\n+\t\t\tassertEquals(1, found.size().intValue());\n+\t\t}\n+\t\t{\n+\t\t\tIBundleProvider found = myConditionDao.search(new SearchParameterMap().setLoadSynchronous(true).add(Condition.SP_ONSET_AGE, new QuantityParam(\"1\")));\n+\t\t\tassertThat(toUnqualifiedVersionlessIdValues(found), containsInAnyOrder(id2));\n+\t\t\tassertEquals(1, found.size().intValue());\n+\t\t}\n+\n+\t\tmyModelConfig.setUcumNotSupported();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 332}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTMyOTk0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTozODowNFrOINunrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzoxMDoyMVrOIOwL-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NjIyMw==", "bodyText": "It's possible I just missed these, but there are a couple of cases I don't see tests for that I think would be good to add:\n\n\nUcum Search Enabled, but search using a quantity that has an invalid UCUM code, e.g. \"system\":\"http://unitsofmeasure.org\", \"code\": \"FOO\", \"value\": 100 (I think we should make sure this can be performed, just in case the UCUM library is missing a real unit)\n\n\nUcum Search Enabled, but search using a quantity that isn't UCUM, e.g. \"system\":\"http://bar\", \"code\": \"FOO\", \"value\": 100\n\n\nUcum Search Enabled, then use an OR expression combining UCUM and non-UCUM query, e.g. `Observation?value-quantity=100|http://unitsofmeasure|cm,100|foo|cm", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551266223", "createdAt": "2021-01-04T11:38:04Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -2959,6 +3062,32 @@ public void testSearchQuantityWrongParam() {\n \n \t}\n \n+\t@Test\n+\tpublic void testSearchQuantityWithUcumSearchSupported() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM0MDQ3Mg==", "bodyText": "Add test cases to cover the above scenario", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r552340472", "createdAt": "2021-01-06T03:10:21Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -2959,6 +3062,32 @@ public void testSearchQuantityWrongParam() {\n \n \t}\n \n+\t@Test\n+\tpublic void testSearchQuantityWithUcumSearchSupported() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NjIyMw=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0ODA5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4CreateTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NDozNlrOINuydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzoxNjo1M1rOIOwSKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODk4Mg==", "bodyText": "It's possible I just missed these, but there are a couple of cases I don't see tests for that I think would be good to add:\n\nUcum Storage supported - Make sure we create rows in both the standard and normalized quantity index tables\nUcum Search supported - Make sure we create rows in both the standard and normalized quantity index tables", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551268982", "createdAt": "2021-01-04T11:44:36Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4CreateTest.java", "diffHunk": "@@ -1,40 +1,47 @@\n package ca.uhn.fhir.jpa.dao.r4;\n \n-import ca.uhn.fhir.jpa.api.config.DaoConfig;\n-import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n-import ca.uhn.fhir.rest.param.StringParam;\n-import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n-import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n-import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n-import ca.uhn.fhir.util.TestUtil;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+import java.util.List;\n+\n import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.hl7.fhir.r4.model.Bundle;\n import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.DecimalType;\n import org.hl7.fhir.r4.model.Enumerations;\n import org.hl7.fhir.r4.model.IdType;\n import org.hl7.fhir.r4.model.Observation;\n import org.hl7.fhir.r4.model.Organization;\n import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Quantity;\n import org.hl7.fhir.r4.model.SampledData;\n import org.hl7.fhir.r4.model.SearchParameter;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.data.domain.PageRequest;\n \n-import java.io.IOException;\n-import java.util.Date;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n+import ca.uhn.fhir.util.UcumServiceUtil;\n \n public class FhirResourceDaoR4CreateTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM0MjA1Ng==", "bodyText": "@jamesagnew\nUcum Storage support is covered at \n  \n    \n      hapi-fhir/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java\n    \n    \n         Line 1346\n      in\n      c78e2af\n    \n    \n    \n    \n\n        \n          \n           runInTransaction(() -> { \n        \n    \n  \n\n\nUcum Search Support is covered at \n  \n    \n      hapi-fhir/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java\n    \n    \n         Line 1256\n      in\n      c78e2af\n    \n    \n    \n    \n\n        \n          \n           runInTransaction(() -> {", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r552342056", "createdAt": "2021-01-06T03:16:53Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4CreateTest.java", "diffHunk": "@@ -1,40 +1,47 @@\n package ca.uhn.fhir.jpa.dao.r4;\n \n-import ca.uhn.fhir.jpa.api.config.DaoConfig;\n-import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n-import ca.uhn.fhir.rest.param.StringParam;\n-import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n-import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n-import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n-import ca.uhn.fhir.util.TestUtil;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Date;\n+import java.util.List;\n+\n import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n import org.hl7.fhir.instance.model.api.IIdType;\n import org.hl7.fhir.r4.model.Bundle;\n import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.DecimalType;\n import org.hl7.fhir.r4.model.Enumerations;\n import org.hl7.fhir.r4.model.IdType;\n import org.hl7.fhir.r4.model.Observation;\n import org.hl7.fhir.r4.model.Organization;\n import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Quantity;\n import org.hl7.fhir.r4.model.SampledData;\n import org.hl7.fhir.r4.model.SearchParameter;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.data.domain.PageRequest;\n \n-import java.io.IOException;\n-import java.util.Date;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.matchesPattern;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n+import ca.uhn.fhir.jpa.api.config.DaoConfig;\n+import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.QuantityParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceVersionConflictException;\n+import ca.uhn.fhir.rest.server.exceptions.UnprocessableEntityException;\n+import ca.uhn.fhir.util.UcumServiceUtil;\n \n public class FhirResourceDaoR4CreateTest extends BaseJpaR4Test {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODk4Mg=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM1NzMxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/UcumServiceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0Nzo0NFrOINu36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzoxODoyMlrOIOwU-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MDM3OQ==", "bodyText": "Not related to this line, but adding a comment here: Could you also add tests to InMemorySubscriptionMatcherR4Test with normalized search mode enabled, just to make sure that enabling this new mode doesn't break the in-memory search mode (this feature is used for subscription processing)", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r551270379", "createdAt": "2021-01-04T11:47:44Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/UcumServiceUtil.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package ca.uhn.fhir.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM0Mjc3OQ==", "bodyText": "Good catch, I have found a bug in the inmemory search. It's fixed and added more test cases in InMemorySubscriptionMatcherR4Test  @jamesagnew", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r552342779", "createdAt": "2021-01-06T03:18:22Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/util/UcumServiceUtil.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package ca.uhn.fhir.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MDM3OQ=="}, "originalCommit": {"oid": "6683a22057f85bdcf0f680e5c67091bc3e9a21d7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Nzg5ODAyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxODo1NTo0M1rOIQdf1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNjoyMTo1MFrOIQwl9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEzMTQxMg==", "bodyText": "Is there a reason that a second patient is being added here? Seems to be identical to the first patient and none of the assertions in this test seem to involve this second patient.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554131412", "createdAt": "2021-01-08T18:55:43Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -4050,6 +4083,168 @@ public void testSearchReturnsSearchDate() throws Exception {\n \t\tassertTrue(value.before(after), new InstantDt(value) + \" should be before \" + new InstantDt(after));\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported() throws Exception {\n+\t\t\n+\t\tmyDaoConfig.getModelConfig().setNormalizedQuantitySearchSupported();\n+\t\tIIdType pid0;\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tpid0 = myPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tmyPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ0NDI3OA==", "bodyText": "It's a cut/paste, the second patient is removed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554444278", "createdAt": "2021-01-09T16:21:50Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -4050,6 +4083,168 @@ public void testSearchReturnsSearchDate() throws Exception {\n \t\tassertTrue(value.before(after), new InstantDt(value) + \" should be before \" + new InstantDt(after));\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported() throws Exception {\n+\t\t\n+\t\tmyDaoConfig.getModelConfig().setNormalizedQuantitySearchSupported();\n+\t\tIIdType pid0;\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tpid0 = myPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tmyPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEzMTQxMg=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzkxMzY3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTowMDo0MlrOIQdpag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNjoyMzowNVrOIQwmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEzMzg2Ng==", "bodyText": "Once again, just curious whether this second patient is required for this test.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554133866", "createdAt": "2021-01-08T19:00:42Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -4050,6 +4083,168 @@ public void testSearchReturnsSearchDate() throws Exception {\n \t\tassertTrue(value.before(after), new InstantDt(value) + \" should be before \" + new InstantDt(after));\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported() throws Exception {\n+\t\t\n+\t\tmyDaoConfig.getModelConfig().setNormalizedQuantitySearchSupported();\n+\t\tIIdType pid0;\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tpid0 = myPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tmyPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(125.12)).setUnit(\"CM\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\"));\n+\t\t\t\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(13.45)).setUnit(\"DM\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"dm\"));\n+\t\t\t\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(1.45)).setUnit(\"M\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"m\"));\n+\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\t\t\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(25)).setUnit(\"CM\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\"));\n+\t\t\t\t\t\t\t\t\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\t\t\n+\t\t// > 1m\n+\t\tString uri = ourServerBase + \"/Observation?code-value-quantity=http://\" + UrlUtil.escapeUrlParam(\"loinc.org|2345-7$gt1|http://unitsofmeasure.org|m\");\n+\t\tourLog.info(\"uri = \" + uri);\n+\t\tList<String> ids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n+\t\tassertEquals(3, ids.size());\n+\t\t\n+\t\t//>= 100cm\n+\t\turi = ourServerBase + \"/Observation?code-value-quantity=http://\" + UrlUtil.escapeUrlParam(\"loinc.org|2345-7$gt100|http://unitsofmeasure.org|cm\");\n+\t\tourLog.info(\"uri = \" + uri);\n+\t\tids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n+\t\tassertEquals(3, ids.size());\n+\n+\t\t//>= 10dm\n+\t\turi = ourServerBase + \"/Observation?code-value-quantity=http://\" + UrlUtil.escapeUrlParam(\"loinc.org|2345-7$gt10|http://unitsofmeasure.org|dm\");\n+\t\tourLog.info(\"uri = \" + uri);\n+\t\tids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n+\t\tassertEquals(3, ids.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported_CombineUCUMOrNonUCUM() throws Exception {\n+\t\t\n+\t\tmyDaoConfig.getModelConfig().setNormalizedQuantitySearchSupported();\n+\t\tIIdType pid0;\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tpid0 = myPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tmyPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ0NDM5MA==", "bodyText": "The second patient is removed.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554444390", "createdAt": "2021-01-09T16:23:05Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/provider/r4/ResourceProviderR4Test.java", "diffHunk": "@@ -4050,6 +4083,168 @@ public void testSearchReturnsSearchDate() throws Exception {\n \t\tassertTrue(value.before(after), new InstantDt(value) + \" should be before \" + new InstantDt(after));\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported() throws Exception {\n+\t\t\n+\t\tmyDaoConfig.getModelConfig().setNormalizedQuantitySearchSupported();\n+\t\tIIdType pid0;\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tpid0 = myPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tmyPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(125.12)).setUnit(\"CM\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\"));\n+\t\t\t\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(13.45)).setUnit(\"DM\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"dm\"));\n+\t\t\t\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(1.45)).setUnit(\"M\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"m\"));\n+\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\t\t\n+\t\t{\n+\t\t\tObservation obs = new Observation();\n+\t\t\tobs.addIdentifier().setSystem(\"urn:system\").setValue(\"FOO\");\n+\t\t\tobs.getSubject().setReferenceElement(pid0);\n+\t\t\tCodeableConcept cc = obs.getCode();\n+\t\t\tcc.addCoding().setCode(\"2345-7\").setSystem(\"http://loinc.org\");\n+\t\t\tobs.setValue(new Quantity().setValueElement(new DecimalType(25)).setUnit(\"CM\").setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\"));\n+\t\t\t\t\t\t\t\t\n+\t\t\tmyObservationDao.create(obs, mySrd);\n+\t\t\t\n+\t\t\tourLog.info(\"Observation: \\n\" + myFhirCtx.newJsonParser().setPrettyPrint(true).encodeResourceToString(obs));\n+\t\t}\n+\t\t\n+\t\t// > 1m\n+\t\tString uri = ourServerBase + \"/Observation?code-value-quantity=http://\" + UrlUtil.escapeUrlParam(\"loinc.org|2345-7$gt1|http://unitsofmeasure.org|m\");\n+\t\tourLog.info(\"uri = \" + uri);\n+\t\tList<String> ids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n+\t\tassertEquals(3, ids.size());\n+\t\t\n+\t\t//>= 100cm\n+\t\turi = ourServerBase + \"/Observation?code-value-quantity=http://\" + UrlUtil.escapeUrlParam(\"loinc.org|2345-7$gt100|http://unitsofmeasure.org|cm\");\n+\t\tourLog.info(\"uri = \" + uri);\n+\t\tids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n+\t\tassertEquals(3, ids.size());\n+\n+\t\t//>= 10dm\n+\t\turi = ourServerBase + \"/Observation?code-value-quantity=http://\" + UrlUtil.escapeUrlParam(\"loinc.org|2345-7$gt10|http://unitsofmeasure.org|dm\");\n+\t\tourLog.info(\"uri = \" + uri);\n+\t\tids = searchAndReturnUnqualifiedVersionlessIdValues(uri);\n+\t\tassertEquals(3, ids.size());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported_CombineUCUMOrNonUCUM() throws Exception {\n+\t\t\n+\t\tmyDaoConfig.getModelConfig().setNormalizedQuantitySearchSupported();\n+\t\tIIdType pid0;\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tpid0 = myPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\t{\n+\t\t\tPatient patient = new Patient();\n+\t\t\tpatient.addIdentifier().setSystem(\"urn:system\").setValue(\"001\");\n+\t\t\tpatient.addName().setFamily(\"Tester\").addGiven(\"Joe\");\n+\t\t\tmyPatientDao.create(patient, mySrd).getId().toUnqualifiedVersionless();\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEzMzg2Ng=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Nzk2MDEwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR4Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOToxNjoyM1rOIQeF_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNzoyMzoxOVrOIQw-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0MTE4Mg==", "bodyText": "Do we maybe need to reset the ModelConfig settings between tests?", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554141182", "createdAt": "2021-01-08T19:16:23Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR4Test.java", "diffHunk": "@@ -235,7 +240,90 @@ public void testComponentQuantityEquals() {\n \t\tSearchParameterMap params = new SearchParameterMap().setLoadSynchronous(true).add(param, v1);\n \t\tassertMatched(o1, params);\n \t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported() {\n+\t\t\n+\t\tmyModelConfig.setNormalizedQuantitySearchSupported();\n+\t\t\n+\t\t\n+\t\tObservation o1 = new Observation();\n+\t\to1.addComponent()\n+\t\t\t.setCode(new CodeableConcept().addCoding(new Coding().setSystem(\"http://foo\").setCode(\"cm\")))\n+\t\t\t.setValue(new Quantity().setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\").setValue(150));\n+\n+\t\tString param1 = Observation.SP_COMPONENT_VALUE_QUANTITY;\n+\n+\t\tQuantityParam v1 = new QuantityParam(null, 1.5, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"m\");\n+\t\tSearchParameterMap params1 = new SearchParameterMap().setLoadSynchronous(true).add(param1, v1);\n+\t\tassertMatched(o1, params1);\n+\t\t\n+\t\tObservation o2 = new Observation();\n+\t\to2.addComponent()\n+\t\t\t.setCode(new CodeableConcept().addCoding(new Coding().setSystem(\"http://foo\").setCode(\"cm\")))\n+\t\t\t.setValue(new Quantity().setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\").setValue(150));\n+\n+\t\tString param2 = Observation.SP_COMPONENT_VALUE_QUANTITY;\n+\n+\t\tQuantityParam v2 = new QuantityParam(null, 15, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"dm\");\n+\t\tSearchParameterMap params2 = new SearchParameterMap().setLoadSynchronous(true).add(param2, v2);\n+\t\tassertMatched(o2, params2);\n+\n+\t\tv2 = new QuantityParam(null, 150, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"cm\");\n+\t\tparams2 = new SearchParameterMap().setLoadSynchronous(true).add(param2, v2);\n+\t\tassertMatched(o2, params2);\n+\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported_InvalidUCUMUnit() {\n+\t\tmyModelConfig.setNormalizedQuantitySearchSupported();\n+\t\t\t\t\n+\t\tObservation o1 = new Observation();\n+\t\to1.addComponent()\n+\t\t\t.setCode(new CodeableConcept().addCoding(new Coding().setSystem(\"http://bar\").setCode(\"foo\")))\n+\t\t\t.setValue(new Quantity().setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"foo\").setValue(150));\n \n+\t\tString param1 = Observation.SP_COMPONENT_VALUE_QUANTITY;\n+\n+\t\tQuantityParam v1 = new QuantityParam(null, 150, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"foo\");\n+\t\tSearchParameterMap params1 = new SearchParameterMap().setLoadSynchronous(true).add(param1, v1);\n+\t\tassertMatched(o1, params1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported_NoSystem() {\n+\t\tmyModelConfig.setNormalizedQuantitySearchSupported();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ1MDU4MA==", "bodyText": "added reset in @AfterEach", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554450580", "createdAt": "2021-01-09T17:23:19Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/subscription/module/matcher/InMemorySubscriptionMatcherR4Test.java", "diffHunk": "@@ -235,7 +240,90 @@ public void testComponentQuantityEquals() {\n \t\tSearchParameterMap params = new SearchParameterMap().setLoadSynchronous(true).add(param, v1);\n \t\tassertMatched(o1, params);\n \t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported() {\n+\t\t\n+\t\tmyModelConfig.setNormalizedQuantitySearchSupported();\n+\t\t\n+\t\t\n+\t\tObservation o1 = new Observation();\n+\t\to1.addComponent()\n+\t\t\t.setCode(new CodeableConcept().addCoding(new Coding().setSystem(\"http://foo\").setCode(\"cm\")))\n+\t\t\t.setValue(new Quantity().setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\").setValue(150));\n+\n+\t\tString param1 = Observation.SP_COMPONENT_VALUE_QUANTITY;\n+\n+\t\tQuantityParam v1 = new QuantityParam(null, 1.5, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"m\");\n+\t\tSearchParameterMap params1 = new SearchParameterMap().setLoadSynchronous(true).add(param1, v1);\n+\t\tassertMatched(o1, params1);\n+\t\t\n+\t\tObservation o2 = new Observation();\n+\t\to2.addComponent()\n+\t\t\t.setCode(new CodeableConcept().addCoding(new Coding().setSystem(\"http://foo\").setCode(\"cm\")))\n+\t\t\t.setValue(new Quantity().setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"cm\").setValue(150));\n+\n+\t\tString param2 = Observation.SP_COMPONENT_VALUE_QUANTITY;\n+\n+\t\tQuantityParam v2 = new QuantityParam(null, 15, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"dm\");\n+\t\tSearchParameterMap params2 = new SearchParameterMap().setLoadSynchronous(true).add(param2, v2);\n+\t\tassertMatched(o2, params2);\n+\n+\t\tv2 = new QuantityParam(null, 150, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"cm\");\n+\t\tparams2 = new SearchParameterMap().setLoadSynchronous(true).add(param2, v2);\n+\t\tassertMatched(o2, params2);\n+\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported_InvalidUCUMUnit() {\n+\t\tmyModelConfig.setNormalizedQuantitySearchSupported();\n+\t\t\t\t\n+\t\tObservation o1 = new Observation();\n+\t\to1.addComponent()\n+\t\t\t.setCode(new CodeableConcept().addCoding(new Coding().setSystem(\"http://bar\").setCode(\"foo\")))\n+\t\t\t.setValue(new Quantity().setSystem(UcumServiceUtil.UCUM_CODESYSTEM_URL).setCode(\"foo\").setValue(150));\n \n+\t\tString param1 = Observation.SP_COMPONENT_VALUE_QUANTITY;\n+\n+\t\tQuantityParam v1 = new QuantityParam(null, 150, UcumServiceUtil.UCUM_CODESYSTEM_URL, \"foo\");\n+\t\tSearchParameterMap params1 = new SearchParameterMap().setLoadSynchronous(true).add(param1, v1);\n+\t\tassertMatched(o1, params1);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testSearchWithNormalizedQuantitySearchSupported_NoSystem() {\n+\t\tmyModelConfig.setNormalizedQuantitySearchSupported();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0MTE4Mg=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Nzk4NjEyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOToyNTowOFrOIQeVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMTo1ODoyMlrOIQypIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0NTIyNw==", "bodyText": "RES_TYPE should be a STRING of length 100, not a LONG.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554145227", "createdAt": "2021-01-08T19:25:08Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML\n+\t\tversion.addIdGenerator(\"20201222.1\", \"SEQ_SPIDX_QUANTITY_NRML\");\n+\t\tBuilder.BuilderAddTableByColumns pkg = version.addTableByColumns(\"20201222.2\", \"HFJ_SPIDX_QUANTITY_NRML\", \"SP_ID\");\n+\t\tpkg.addColumn(\"RES_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"RES_TYPE\").nonNullable().type(ColumnTypeEnum.LONG);\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3Nzg1Nw==", "bodyText": "The Column Type for the RES_TYPE still needs to be fixed (RES_TYPE is a STRING not a LONG).", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554477857", "createdAt": "2021-01-09T21:58:22Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML\n+\t\tversion.addIdGenerator(\"20201222.1\", \"SEQ_SPIDX_QUANTITY_NRML\");\n+\t\tBuilder.BuilderAddTableByColumns pkg = version.addTableByColumns(\"20201222.2\", \"HFJ_SPIDX_QUANTITY_NRML\", \"SP_ID\");\n+\t\tpkg.addColumn(\"RES_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"RES_TYPE\").nonNullable().type(ColumnTypeEnum.LONG);\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0NTIyNw=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Nzk5Njg1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOToyODoyOFrOIQecRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNzozODozM1rOIQxEjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0Njg4Nw==", "bodyText": "I think SP_VALUE should be of type FLOAT rather than LONG.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554146887", "createdAt": "2021-01-08T19:28:28Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML\n+\t\tversion.addIdGenerator(\"20201222.1\", \"SEQ_SPIDX_QUANTITY_NRML\");\n+\t\tBuilder.BuilderAddTableByColumns pkg = version.addTableByColumns(\"20201222.2\", \"HFJ_SPIDX_QUANTITY_NRML\", \"SP_ID\");\n+\t\tpkg.addColumn(\"RES_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"RES_TYPE\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"SP_UPDATED\").nullable().type(ColumnTypeEnum.DATE_TIMESTAMP);\t\n+\t\tpkg.addColumn(\"SP_MISSING\").nonNullable().type(ColumnTypeEnum.BOOLEAN);\t\n+\t\tpkg.addColumn(\"SP_NAME\").nonNullable().type(ColumnTypeEnum.STRING, 100);\n+\t\tpkg.addColumn(\"SP_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\t\n+\t\tpkg.addColumn(\"SP_SYSTEM\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"SP_UNITS\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_AND_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_SYS_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"SP_VALUE\").nullable().type(ColumnTypeEnum.LONG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ1MjEwOA==", "bodyText": "Changed to FLOAT", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554452108", "createdAt": "2021-01-09T17:38:33Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML\n+\t\tversion.addIdGenerator(\"20201222.1\", \"SEQ_SPIDX_QUANTITY_NRML\");\n+\t\tBuilder.BuilderAddTableByColumns pkg = version.addTableByColumns(\"20201222.2\", \"HFJ_SPIDX_QUANTITY_NRML\", \"SP_ID\");\n+\t\tpkg.addColumn(\"RES_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"RES_TYPE\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"SP_UPDATED\").nullable().type(ColumnTypeEnum.DATE_TIMESTAMP);\t\n+\t\tpkg.addColumn(\"SP_MISSING\").nonNullable().type(ColumnTypeEnum.BOOLEAN);\t\n+\t\tpkg.addColumn(\"SP_NAME\").nonNullable().type(ColumnTypeEnum.STRING, 100);\n+\t\tpkg.addColumn(\"SP_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\t\n+\t\tpkg.addColumn(\"SP_SYSTEM\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"SP_UNITS\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_AND_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_SYS_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"SP_VALUE\").nullable().type(ColumnTypeEnum.LONG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0Njg4Nw=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODAyOTUzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTozOTo1MFrOIQewlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNzo1NTo0MFrOIQxLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1MjA4Nw==", "bodyText": "I believe that all of the code related to HFJ_SPIDX_QUANTITY_NRML should appear in this method after task \"20210104.2\", i.e. the tasks should be ordered based on the date that they were added so that the 20210122.* tasks are executed after the 20210104.* tasks.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554152087", "createdAt": "2021-01-08T19:39:50Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ1Mzc4MA==", "bodyText": "Moved to the end and changed the date to 20210109", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554453780", "createdAt": "2021-01-09T17:55:40Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1MjA4Nw=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODA2NDE5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTo1MTo0NFrOIQfF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNzo1ODozNVrOIQxNQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1NzU2MQ==", "bodyText": "I do not see this foreign key referenced in the entity class for HFJ_SPIDX_QUANTITY_NRML. I do not think you need to include this in the migration.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554157561", "createdAt": "2021-01-08T19:51:44Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML\n+\t\tversion.addIdGenerator(\"20201222.1\", \"SEQ_SPIDX_QUANTITY_NRML\");\n+\t\tBuilder.BuilderAddTableByColumns pkg = version.addTableByColumns(\"20201222.2\", \"HFJ_SPIDX_QUANTITY_NRML\", \"SP_ID\");\n+\t\tpkg.addColumn(\"RES_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"RES_TYPE\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"SP_UPDATED\").nullable().type(ColumnTypeEnum.DATE_TIMESTAMP);\t\n+\t\tpkg.addColumn(\"SP_MISSING\").nonNullable().type(ColumnTypeEnum.BOOLEAN);\t\n+\t\tpkg.addColumn(\"SP_NAME\").nonNullable().type(ColumnTypeEnum.STRING, 100);\n+\t\tpkg.addColumn(\"SP_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\t\n+\t\tpkg.addColumn(\"SP_SYSTEM\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"SP_UNITS\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_AND_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_SYS_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"SP_VALUE\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addIndex(\"20201222.3\", \"IDX_SP_QNTY_NRML_HASH\").unique(false).withColumns(\"HASH_IDENTITY\",\"SP_VALUE\");\n+\t\tpkg.addIndex(\"20201222.4\", \"IDX_SP_QNTY_NRML_HASH_UN\").unique(false).withColumns(\"HASH_IDENTITY_AND_UNITS\",\"SP_VALUE\");\n+\t\tpkg.addIndex(\"20201222.5\", \"IDX_SP_QNTY_NRML_HASH_SYSUN\").unique(false).withColumns(\"HASH_IDENTITY_SYS_UNITS\",\"SP_VALUE\");\n+\t\tpkg.addIndex(\"20201222.6\", \"IDX_SP_QNTY_NRML_UPDATED\").unique(false).withColumns(\"SP_UPDATED\");\n+\t\tpkg.addIndex(\"20201222.7\", \"IDX_SP_QNTY_NRML_RESID\").unique(false).withColumns(\"RES_ID\");\n+\t\tpkg.addForeignKey(\"20201222.8\", \"FK_QNTY_NRML_RESID\").toColumn(\"RES_ID\").references(\"HFJ_RESOURCE\", \"RES_ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ1NDMzNw==", "bodyText": "The foreign key is defined entity via the relationship at\n@ManyToOne(optional = false, fetch = FetchType.LAZY, cascade = {})\n\t@JoinColumn(name = \"RES_ID\", referencedColumnName = \"RES_ID\", nullable = false)\n\tprivate ResourceTable myResource;\n\nI checked the postgreSQL database, the foreign key is generated by hibernate. Not sure it should be added to the migration task or not. I have commented out for now", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554454337", "createdAt": "2021-01-09T17:58:35Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-migrate/src/main/java/ca/uhn/fhir/jpa/migrate/tasks/HapiFhirJpaMigrationTasks.java", "diffHunk": "@@ -76,12 +76,40 @@ public HapiFhirJpaMigrationTasks(Set<String> theFlags) {\n \n \tprivate void init530() {\n \t\tBuilder version = forVersion(VersionEnum.V5_3_0);\n+\t\n+\t\t//-- Add new Table, HFJ_SPIDX_QUANTITY_NRML\n+\t\tversion.addIdGenerator(\"20201222.1\", \"SEQ_SPIDX_QUANTITY_NRML\");\n+\t\tBuilder.BuilderAddTableByColumns pkg = version.addTableByColumns(\"20201222.2\", \"HFJ_SPIDX_QUANTITY_NRML\", \"SP_ID\");\n+\t\tpkg.addColumn(\"RES_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"RES_TYPE\").nonNullable().type(ColumnTypeEnum.LONG);\t\n+\t\tpkg.addColumn(\"SP_UPDATED\").nullable().type(ColumnTypeEnum.DATE_TIMESTAMP);\t\n+\t\tpkg.addColumn(\"SP_MISSING\").nonNullable().type(ColumnTypeEnum.BOOLEAN);\t\n+\t\tpkg.addColumn(\"SP_NAME\").nonNullable().type(ColumnTypeEnum.STRING, 100);\n+\t\tpkg.addColumn(\"SP_ID\").nonNullable().type(ColumnTypeEnum.LONG);\t\t\n+\t\tpkg.addColumn(\"SP_SYSTEM\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"SP_UNITS\").nullable().type(ColumnTypeEnum.STRING, 200);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_AND_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY_SYS_UNITS\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"HASH_IDENTITY\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addColumn(\"SP_VALUE\").nullable().type(ColumnTypeEnum.LONG);\n+\t\tpkg.addIndex(\"20201222.3\", \"IDX_SP_QNTY_NRML_HASH\").unique(false).withColumns(\"HASH_IDENTITY\",\"SP_VALUE\");\n+\t\tpkg.addIndex(\"20201222.4\", \"IDX_SP_QNTY_NRML_HASH_UN\").unique(false).withColumns(\"HASH_IDENTITY_AND_UNITS\",\"SP_VALUE\");\n+\t\tpkg.addIndex(\"20201222.5\", \"IDX_SP_QNTY_NRML_HASH_SYSUN\").unique(false).withColumns(\"HASH_IDENTITY_SYS_UNITS\",\"SP_VALUE\");\n+\t\tpkg.addIndex(\"20201222.6\", \"IDX_SP_QNTY_NRML_UPDATED\").unique(false).withColumns(\"SP_UPDATED\");\n+\t\tpkg.addIndex(\"20201222.7\", \"IDX_SP_QNTY_NRML_RESID\").unique(false).withColumns(\"RES_ID\");\n+\t\tpkg.addForeignKey(\"20201222.8\", \"FK_QNTY_NRML_RESID\").toColumn(\"RES_ID\").references(\"HFJ_RESOURCE\", \"RES_ID\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1NzU2MQ=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODE0NTU5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/UcumServiceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDoxOToxMFrOIQf5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxNzoyMjoyMlrOIQw-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE3MDY3Ng==", "bodyText": "Nitpick - file header is duplicated here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554170676", "createdAt": "2021-01-08T20:19:10Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/UcumServiceUtil.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package ca.uhn.fhir.jpa.model.util;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2021 Smile CDR, Inc.\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2021 Smile CDR, Inc.\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ1MDQ5Ng==", "bodyText": "Removed the dup file header", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554450496", "createdAt": "2021-01-09T17:22:22Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/util/UcumServiceUtil.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package ca.uhn.fhir.jpa.model.util;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2021 Smile CDR, Inc.\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR Model\n+ * %%\n+ * Copyright (C) 2014 - 2021 Smile CDR, Inc.\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE3MDY3Ng=="}, "originalCommit": {"oid": "9559c569a44535280b6ca290f298bd980972d346"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTM1MDgzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ResourceTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTowMzo1OVrOIQ6pEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMjoxNDoyNFrOIQ796Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwODkxNA==", "bodyText": "Just discovered a problem with this field that occurs during DB migration. It appears that during startup when a new column is added to an existing table that has rows in it, it will also attempt to populate the column with null values. However primitive types cannot be null and so this causes errors.\nI think the safest option to fix this problem is to type this column as a java Boolean class rather than as a boolean primitive.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554608914", "createdAt": "2021-01-10T19:03:59Z", "author": {"login": "IanMMarshall"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ResourceTable.java", "diffHunk": "@@ -149,6 +146,22 @@\n \t@Column(name = \"SP_QUANTITY_PRESENT\")\n \t@OptimisticLock(excluded = true)\n \tprivate boolean myParamsQuantityPopulated;\n+\t\n+\t/**\n+\t * Added to support UCUM conversion\n+\t * since 5.3.0\n+\t */\n+\t@OneToMany(mappedBy = \"myResource\", cascade = {}, fetch = FetchType.LAZY, orphanRemoval = false)\n+\t@OptimisticLock(excluded = true)\n+\tprivate Collection<ResourceIndexedSearchParamQuantityNormalized> myParamsQuantityNormalized;\n+\t\n+\t/**\n+\t * Added to support UCUM conversion\n+\t * since 5.3.0\n+\t */\n+\t@Column(name = \"SP_QUANTITY_NRML_PRESENT\")\n+\t@OptimisticLock(excluded = true)\n+\tprivate boolean myParamsQuantityNormalizedPopulated;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713ee773e80eb99dfe2ed932c72b3868d6ac7e6c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYzMDYzMw==", "bodyText": "Changed to Boolean class, tested on local server.", "url": "https://github.com/hapifhir/hapi-fhir/pull/2261#discussion_r554630633", "createdAt": "2021-01-10T22:14:24Z", "author": {"login": "frankjtao"}, "path": "hapi-fhir-jpaserver-model/src/main/java/ca/uhn/fhir/jpa/model/entity/ResourceTable.java", "diffHunk": "@@ -149,6 +146,22 @@\n \t@Column(name = \"SP_QUANTITY_PRESENT\")\n \t@OptimisticLock(excluded = true)\n \tprivate boolean myParamsQuantityPopulated;\n+\t\n+\t/**\n+\t * Added to support UCUM conversion\n+\t * since 5.3.0\n+\t */\n+\t@OneToMany(mappedBy = \"myResource\", cascade = {}, fetch = FetchType.LAZY, orphanRemoval = false)\n+\t@OptimisticLock(excluded = true)\n+\tprivate Collection<ResourceIndexedSearchParamQuantityNormalized> myParamsQuantityNormalized;\n+\t\n+\t/**\n+\t * Added to support UCUM conversion\n+\t * since 5.3.0\n+\t */\n+\t@Column(name = \"SP_QUANTITY_NRML_PRESENT\")\n+\t@OptimisticLock(excluded = true)\n+\tprivate boolean myParamsQuantityNormalizedPopulated;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYwODkxNA=="}, "originalCommit": {"oid": "713ee773e80eb99dfe2ed932c72b3868d6ac7e6c"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1755, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}