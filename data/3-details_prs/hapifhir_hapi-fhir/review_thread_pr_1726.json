{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjQwMDk4", "number": 1726, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxNDo1MlrODiL6_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoyMjo0M1rODiL9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTczNTAzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxNDo1MlrOFtTb7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo0ODo0M1rOFuGrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODY4Nw==", "bodyText": "if it wasn't for the newJoin flag, I'd suggest a putIfAbsent here...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383048687", "createdAt": "2020-02-23T23:14:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -56,7 +60,18 @@ public Predicate addPredicate(String theResourceName,\n \t\t\t\t\t\t\t\t\t\t\tList<? extends IQueryParameterType> theList,\n \t\t\t\t\t\t\t\t\t\t\tSearchFilterParser.CompareOperation operation) {\n \n-\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = createJoin(SearchBuilderJoinEnum.DATE, theParamName);\n+\t\tboolean newJoin = false;\n+\t\tif (myJoinMap == null) {\n+\t\t\tmyJoinMap = new HashMap<>();\n+\t\t}\n+\t\tString key = theResourceName + \" \" + theParamName;\n+\n+\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = myJoinMap.get(key);\n+\t\tif (join == null) {\n+\t\t\tjoin = createJoin(SearchBuilderJoinEnum.DATE, theParamName);\n+\t\t\tmyJoinMap.put(key, join);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4ODMxNg==", "bodyText": "Heh yup", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383888316", "createdAt": "2020-02-25T13:48:43Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -56,7 +60,18 @@ public Predicate addPredicate(String theResourceName,\n \t\t\t\t\t\t\t\t\t\t\tList<? extends IQueryParameterType> theList,\n \t\t\t\t\t\t\t\t\t\t\tSearchFilterParser.CompareOperation operation) {\n \n-\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = createJoin(SearchBuilderJoinEnum.DATE, theParamName);\n+\t\tboolean newJoin = false;\n+\t\tif (myJoinMap == null) {\n+\t\t\tmyJoinMap = new HashMap<>();\n+\t\t}\n+\t\tString key = theResourceName + \" \" + theParamName;\n+\n+\t\tJoin<ResourceTable, ResourceIndexedSearchParamDate> join = myJoinMap.get(key);\n+\t\tif (join == null) {\n+\t\t\tjoin = createJoin(SearchBuilderJoinEnum.DATE, theParamName);\n+\t\t\tmyJoinMap.put(key, join);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODY4Nw=="}, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTczNjgzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxNzowNlrOFtTc1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxNzowNlrOFtTc1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0ODkxOQ==", "bodyText": "The fact this change was so easy is a testament to how well designed your solution was in the first place.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383048919", "createdAt": "2020-02-23T23:17:06Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/predicate/PredicateBuilderDate.java", "diffHunk": "@@ -77,7 +92,14 @@ public Predicate addPredicate(String theResourceName,\n \t\t}\n \n \t\tPredicate orPredicates = myBuilder.or(toArray(codePredicates));\n-\t\tmyQueryRoot.addPredicate(orPredicates);\n+\n+\t\tif (newJoin) {\n+\t\t\tPredicate identityAndValuePredicate = combineParamIndexPredicateWithParamNamePredicate(theResourceName, theParamName, join, orPredicates);\n+\t\t\tmyQueryRoot.addPredicate(identityAndValuePredicate);\n+\t\t} else {\n+\t\t\tmyQueryRoot.addPredicate(orPredicates);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTczODM5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoxOToxNVrOFtTdnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzo0OTozMlrOFuGtcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTExOQ==", "bodyText": "calling this obs1 is confusing.  I'd just call them both obs", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383049119", "createdAt": "2020-02-23T23:19:15Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4ODc1NA==", "bodyText": "Good call, done", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383888754", "createdAt": "2020-02-25T13:49:32Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTExOQ=="}, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTczOTUyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoyMDo0OVrOFtTeOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoyMDo0OVrOFtTeOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTI3NA==", "bodyText": "This is beautiful.  That captures query listener is the best!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383049274", "createdAt": "2020-02-23T23:20:49Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobsId2 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTc0MDgxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzoyMjo0M1rOFtTe5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowODowNVrOFuRjMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTQ0NA==", "bodyText": "Consider adding a couple of period searches for good measure.  I'd recommend a test with two periods that overlap.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r383049444", "createdAt": "2020-02-23T23:22:43Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobsId2 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"hash_identity\"));\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"sp_value_low\"));\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP and 1 instance of another\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tparams.add(\"date\", new DateParam(\"gt2019-06-05\"));\n+\t\t\tparams.add(\"date\", new DateParam(\"lt2019-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"hash_identity\"));\n+\t\t\tassertEquals(searchQuery, 4, StringUtils.countMatches(searchQuery.toLowerCase(), \"sp_value_low\"));\n+\t\t}\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjM1NA==", "bodyText": "done", "url": "https://github.com/hapifhir/hapi-fhir/pull/1726#discussion_r384066354", "createdAt": "2020-02-25T19:08:05Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4SearchNoFtTest.java", "diffHunk": "@@ -3258,6 +3258,73 @@ public void testSearchWithDate() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testSearchWithDateAndReusesExistingJoin() {\n+\t\t// Add a search parameter to Observation.issued, so that between that one\n+\t\t// and the existing one on Observation.effective, we have 2 date search parameters\n+\t\t// on the same resource\n+\t\t{\n+\t\t\tSearchParameter sp = new SearchParameter();\n+\t\t\tsp.setStatus(Enumerations.PublicationStatus.ACTIVE);\n+\t\t\tsp.addBase(\"Observation\");\n+\t\t\tsp.setType(Enumerations.SearchParamType.DATE);\n+\t\t\tsp.setCode(\"issued\");\n+\t\t\tsp.setExpression(\"Observation.issued\");\n+\t\t\tmySearchParameterDao.create(sp);\n+\t\t\tmySearchParamRegistry.forceRefresh();\n+\t\t}\n+\n+\t\t// Dates are reversed on these two observations\n+\t\tIIdType obsId1;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobsId1 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\t\tIIdType obsId2;\n+\t\t{\n+\t\t\tObservation obs1 = new Observation();\n+\t\t\tobs1.setIssuedElement(new InstantType(\"2019-06-06T12:00:00Z\"));\n+\t\t\tobs1.setEffective(new InstantType(\"2020-06-06T12:00:00Z\"));\n+\t\t\tobsId2 = myObservationDao.create(obs1).getId().toUnqualifiedVersionless();\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));\n+\t\t\tassertEquals(searchQuery, 1, StringUtils.countMatches(searchQuery.toLowerCase(), \"hash_identity\"));\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"sp_value_low\"));\n+\t\t}\n+\n+\t\t// Two AND instances of 1 SP and 1 instance of another\n+\t\t{\n+\t\t\tmyCaptureQueriesListener.clear();\n+\t\t\tSearchParameterMap params = new SearchParameterMap();\n+\t\t\tparams.setLoadSynchronous(true);\n+\t\t\tparams.add(\"issued\", new DateParam(\"ge2020-06-05\"));\n+\t\t\tparams.add(\"issued\", new DateParam(\"lt2020-06-07\"));\n+\t\t\tparams.add(\"date\", new DateParam(\"gt2019-06-05\"));\n+\t\t\tparams.add(\"date\", new DateParam(\"lt2019-06-07\"));\n+\t\t\tList<IIdType> patients = toUnqualifiedVersionlessIds(myObservationDao.search(params));\n+\t\t\tassertThat(patients, contains(obsId1));\n+\t\t\tString searchQuery = myCaptureQueriesListener.getSelectQueriesForCurrentThread().get(0).getSql(true, true);\n+\t\t\tourLog.info(\"Search query:\\n{}\", searchQuery);\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"join\"));\n+\t\t\tassertEquals(searchQuery, 2, StringUtils.countMatches(searchQuery.toLowerCase(), \"hash_identity\"));\n+\t\t\tassertEquals(searchQuery, 4, StringUtils.countMatches(searchQuery.toLowerCase(), \"sp_value_low\"));\n+\t\t}\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0OTQ0NA=="}, "originalCommit": {"oid": "f1698ba7a3672a5fa1cf7b86ca18651ed9f1261c"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1908, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}