{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzI3MDg2", "number": 1821, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0Nzo1MVrOD4E6-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyOTo1NFrOD4HiCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI3NDgxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0Nzo1MVrOGOsy-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0MToxN1rOGQNO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzE5NQ==", "bodyText": "I think this is a kind of request, not a kind of partition id, so I'd go with \"PartitionIdRequest\".", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418067195", "createdAt": "2020-04-30T14:47:51Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NTY2Ng==", "bodyText": "Hmmm this is fun. TBH I kind of feel the opposite.. It's a \"request partition ID\", meaning the partition ID for a request. PartitionIdRequest sounds to me more like it's a request FOR a partition ID, which is the opposite of what it is really..... I don't know, I don't know...", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418575666", "createdAt": "2020-05-01T14:51:07Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzE5NQ=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0NzIxNQ==", "bodyText": "oh funny when I initially suggested adding \"Request\" to the name, I wasn't thinking of it in in the http request sense, but more like \"I'm asking for a partition id\".  Because the answer could come back, \"no such partition exists\" which would be a failed outcome on that request.  But I see it's confusing because Request already means something in the framework.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419647215", "createdAt": "2020-05-04T18:41:17Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzE5NQ=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTMxODQ5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1NzozOFrOGOtPPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo1MjoxOFrOGPL3SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NDQyOQ==", "bodyText": "nitpick: I used to write it this way, but I think it's not obvious what it's doing.  Even though it's more code, I think it's clearer to write:\nif (myPartitionId == null) {\n  return \"null\"\n}\nreturn myPartitionId.toString();", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418074429", "createdAt": "2020-04-30T14:57:38Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -64,7 +86,17 @@ public String toString() {\n \t * Returns the partition ID (numeric) as a string, or the string \"null\"\n \t */\n \tpublic String getPartitionIdStringOrNullString() {\n-\t\treturn defaultIfNull(myPartitionId, \"null\").toString();\n+\t\treturn defaultIfNull(getPartitionId(), \"null\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NjIwMA==", "bodyText": "Fair enough, have changed it", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418576200", "createdAt": "2020-05-01T14:52:18Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -64,7 +86,17 @@ public String toString() {\n \t * Returns the partition ID (numeric) as a string, or the string \"null\"\n \t */\n \tpublic String getPartitionIdStringOrNullString() {\n-\t\treturn defaultIfNull(myPartitionId, \"null\").toString();\n+\t\treturn defaultIfNull(getPartitionId(), \"null\").toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NDQyOQ=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTMzMDg2OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTowMDoxNFrOGOtXPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo1Mjo1MlrOGPL4Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NjQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * key will be of type {@link ca.uhn.fhir.interceptor.model.PersistedPartitionId}.\n          \n          \n            \n            \t * key will be of type {@link ca.uhn.fhir.interceptor.model.RequestPartitionId}.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418076476", "createdAt": "2020-04-30T15:00:14Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java", "diffHunk": "@@ -264,6 +264,13 @@\n \tpublic static final String PARAM_FHIRPATH = \"_fhirpath\";\n \tpublic static final String PARAM_TYPE = \"_type\";\n \n+\t/**\n+\t * {@link org.hl7.fhir.instance.model.api.IBaseResource#getUserData(String) User metadata key} used\n+\t * to store the partition ID (if any) associated with the given resource. Value for this\n+\t * key will be of type {@link ca.uhn.fhir.interceptor.model.PersistedPartitionId}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NjQxOQ==", "bodyText": "I am surprised IJ didn't auto fix that when I refactored.... Weird.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418576419", "createdAt": "2020-05-01T14:52:52Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/api/Constants.java", "diffHunk": "@@ -264,6 +264,13 @@\n \tpublic static final String PARAM_FHIRPATH = \"_fhirpath\";\n \tpublic static final String PARAM_TYPE = \"_type\";\n \n+\t/**\n+\t * {@link org.hl7.fhir.instance.model.api.IBaseResource#getUserData(String) User metadata key} used\n+\t * to store the partition ID (if any) associated with the given resource. Value for this\n+\t * key will be of type {@link ca.uhn.fhir.interceptor.model.PersistedPartitionId}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3NjQ3Ng=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTM0MjQzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTowMzowMVrOGOtevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo1MzozN1rOGPL5Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3ODM5OA==", "bodyText": "rather than static, why not make it an instance method?  (default method since it's an interface)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418078398", "createdAt": "2020-04-30T15:03:01Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java", "diffHunk": "@@ -33,5 +33,9 @@\n \tboolean hasValue();\n \t\n \tIPrimitiveType<T> setValue(T theValue) throws IllegalArgumentException;\n-\t\n+\n+\tstatic <T> T toValueOrNull(IPrimitiveType<T> thePrimitiveType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NjcxOQ==", "bodyText": "I thought about that, but the whole point is that it can accept null.. If it was an instance method it could not do that", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418576719", "createdAt": "2020-05-01T14:53:37Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/org/hl7/fhir/instance/model/api/IPrimitiveType.java", "diffHunk": "@@ -33,5 +33,9 @@\n \tboolean hasValue();\n \t\n \tIPrimitiveType<T> setValue(T theValue) throws IllegalArgumentException;\n-\t\n+\n+\tstatic <T> T toValueOrNull(IPrimitiveType<T> thePrimitiveType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3ODM5OA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTM2ODc5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTowOTowOVrOGOtv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo0OTo0NFrOGPNcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4Mjc4OQ==", "bodyText": "This looks risky.  What if I have a tenantId that is the same name as a legit path?  Is there some other way in the request we can track whether the tenandId has been appended?  (e.g. in a custom header)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418082789", "createdAt": "2020-04-30T15:09:09Z", "author": {"login": "fil512"}, "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java", "diffHunk": "@@ -81,6 +81,10 @@ public void request(IRestfulClient theClient, IHttpRequest theRequest) {\n \n \t\tValidate.isTrue(requestUri.startsWith(serverBase), \"Request URI %s does not start with server base %s\", requestUri, serverBase);\n \n+\t\tif (requestUri.startsWith(serverBase + \"/\" + tenantId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NzA0Nw==", "bodyText": "Hmm... Thinking on this now", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418577047", "createdAt": "2020-05-01T14:54:17Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java", "diffHunk": "@@ -81,6 +81,10 @@ public void request(IRestfulClient theClient, IHttpRequest theRequest) {\n \n \t\tValidate.isTrue(requestUri.startsWith(serverBase), \"Request URI %s does not start with server base %s\", requestUri, serverBase);\n \n+\t\tif (requestUri.startsWith(serverBase + \"/\" + tenantId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4Mjc4OQ=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwMjAyNg==", "bodyText": "Ok, figured out a way to track where the URL actually came from.. If it came from the outside world as opposed to being generated, we won't tweak it", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418602026", "createdAt": "2020-05-01T15:49:44Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-client/src/main/java/ca/uhn/fhir/rest/client/interceptor/UrlTenantSelectionInterceptor.java", "diffHunk": "@@ -81,6 +81,10 @@ public void request(IRestfulClient theClient, IHttpRequest theRequest) {\n \n \t\tValidate.isTrue(requestUri.startsWith(serverBase), \"Request URI %s does not start with server base %s\", requestUri, serverBase);\n \n+\t\tif (requestUri.startsWith(serverBase + \"/\" + tenantId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4Mjc4OQ=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTM4NzY3OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToxMzoxOFrOGOt7pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NToyNlrOGQNYPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4NTc5OA==", "bodyText": "This SNIPPET stuff is so incredibly awesome!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418085798", "createdAt": "2020-04-30T15:13:18Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "diffHunk": "@@ -60,6 +61,29 @@ public void createProxy() {\n       // END SNIPPET: proxy\n    }\n \n+\n+   public void tenantId() {\n+   \t// START SNIPPET: tenantId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0OTU5Ng==", "bodyText": "Agree!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419649596", "createdAt": "2020-05-04T18:45:26Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "diffHunk": "@@ -60,6 +61,29 @@ public void createProxy() {\n       // END SNIPPET: proxy\n    }\n \n+\n+   public void tenantId() {\n+   \t// START SNIPPET: tenantId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4NTc5OA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQwMjI1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToxNjo1MlrOGOuFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToxNjo1MlrOGOuFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4ODIzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"123\").execute();\n          \n          \n            \n            \t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"456\").execute();\n          \n      \n    \n    \n  \n\nI'm worried people might get the impression you can have the same id in different partitions.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418088234", "createdAt": "2020-04-30T15:16:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/java/ca/uhn/hapi/fhir/docs/ClientExamples.java", "diffHunk": "@@ -60,6 +61,29 @@ public void createProxy() {\n       // END SNIPPET: proxy\n    }\n \n+\n+   public void tenantId() {\n+   \t// START SNIPPET: tenantId\n+\t\tFhirContext ctx = FhirContext.forR4();\n+\n+\t\t// Create the client\n+\t\tIGenericClient genericClient = ctx.newRestfulGenericClient(\"http://localhost:9999/fhir\");\n+\n+\t\t// Register the interceptor\n+\t\tUrlTenantSelectionInterceptor tenantSelection = new UrlTenantSelectionInterceptor();\n+\t\tgenericClient.registerInterceptor(tenantSelection);\n+\n+\t\t// Read from tenant A\n+\t\ttenantSelection.setTenantId(\"TENANT-A\");\n+\t\tPatient patientA = genericClient.read().resource(Patient.class).withId(\"123\").execute();\n+\n+\t\t// Read from tenant B\n+\t\ttenantSelection.setTenantId(\"TENANT-B\");\n+\t\tPatient patientB = genericClient.read().resource(Patient.class).withId(\"123\").execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQyMjQwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/client/examples.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMTozNlrOGOuR4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMTozNlrOGOuR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5MTQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this kind of scenario, we want to look up the Patient record and reference it from the newly created observation. In the event that no Patient record already exists with the given identifier, a new one will be created and the Observation will reference it. This is known in FHIR as a [Conditional Create](http://hl7.org/fhir/http.html#ccreate).\n          \n          \n            \n            In this scenario, we want to look up the Patient record and reference it from the newly created Observation. In the event that no Patient record already exists with the given identifier, a new one will be created and the Observation will reference it. This is known in FHIR as a [Conditional Create](http://hl7.org/fhir/http.html#ccreate).", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418091490", "createdAt": "2020-04-30T15:21:36Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/client/examples.md", "diffHunk": "@@ -2,79 +2,63 @@\n \n This page contains examples of how to use the client to perform complete tasks. If you have an example you could contribute, we'd love to hear from you!\n \n-# Transaction With Placeholder IDs\n+# Transaction With Conditional Create\n \n-The following example shows how to post a transaction with two resources, where one resource contains a reference to the other. A temporary ID (a UUID) is used as an ID to refer to, and this ID will be replaced by the server by\ta permanent ID.\n+The following example demonstrates a common scenario: How to create a new piece of data for a Patient (in this case, an Observation) where the identifier of the Patient is known, but the ID is not.\n \n-```java\n-{{snippet:classpath:/ca/uhn/hapi/fhir/docs/ClientTransactionExamples.java|conditional}}\n-```\n+In this kind of scenario, we want to look up the Patient record and reference it from the newly created observation. In the event that no Patient record already exists with the given identifier, a new one will be created and the Observation will reference it. This is known in FHIR as a [Conditional Create](http://hl7.org/fhir/http.html#ccreate).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQzMTA4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyMzozM1rOGOuXYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NjozOFrOGQNa7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5Mjg5Nw==", "bodyText": "General question not related to this line: Do you handle the case where an update operation changes the partition id of the resource?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418092897", "createdAt": "2020-04-30T15:23:33Z", "author": {"login": "fil512"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md", "diffHunk": "@@ -328,5 +328,7 @@ None of the limitations listed here are considered permanent. Over time the HAPI\n    * ConceptMap\n \n * **Search Parameters are not partitioned**: There is only one set of SearchParameter resources for the entire system, and any search parameters will apply to resources in all partitions. All SearchParameter resources must be stored in the default partition.\n+\n+* **Cross-partition History Operations are not supported**: It is not possible to perform a `_history` operation that spans all partitions (`_history` does work when applied to a single partition however). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MDI4Ng==", "bodyText": "Update operations can not affect the partition ID - It is set and maintained from the time the resource is created.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419650286", "createdAt": "2020-05-04T18:46:38Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa/partitioning.md", "diffHunk": "@@ -328,5 +328,7 @@ None of the limitations listed here are considered permanent. Over time the HAPI\n    * ConceptMap\n \n * **Search Parameters are not partitioned**: There is only one set of SearchParameter resources for the entire system, and any search parameters will apply to resources in all partitions. All SearchParameter resources must be stored in the default partition.\n+\n+* **Cross-partition History Operations are not supported**: It is not possible to perform a `_history` operation that spans all partitions (`_history` does work when applied to a single partition however). ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5Mjg5Nw=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ0MDgxOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNTo0MFrOGOudag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NzozMFrOGQNc2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDQ0Mg==", "bodyText": "gurgle", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418094442", "createdAt": "2020-04-30T15:25:40Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java", "diffHunk": "@@ -35,36 +35,37 @@\n \n public interface IResourceHistoryTableDao extends JpaRepository<ResourceHistoryTable, Long> {\n \n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myUpdated >= :cutoff\")\n-\tint countForAllResourceTypes(\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t\")\n-\tint countForAllResourceTypes(\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id AND t.myUpdated >= :cutoff\")\n-\tint countForResourceInstance(\n-\t\t@Param(\"id\") Long theId,\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id\")\n-\tint countForResourceInstance(\n-\t\t@Param(\"id\") Long theId\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type AND t.myUpdated >= :cutoff\")\n-\tint countForResourceType(\n-\t\t@Param(\"type\") String theType,\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type\")\n-\tint countForResourceType(\n-\t\t@Param(\"type\") String theType\n-\t);\n+\t// FIXME: remove commented", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MDc3OQ==", "bodyText": "oops! gone", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419650779", "createdAt": "2020-05-04T18:47:30Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/data/IResourceHistoryTableDao.java", "diffHunk": "@@ -35,36 +35,37 @@\n \n public interface IResourceHistoryTableDao extends JpaRepository<ResourceHistoryTable, Long> {\n \n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myUpdated >= :cutoff\")\n-\tint countForAllResourceTypes(\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t\")\n-\tint countForAllResourceTypes(\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id AND t.myUpdated >= :cutoff\")\n-\tint countForResourceInstance(\n-\t\t@Param(\"id\") Long theId,\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceId = :id\")\n-\tint countForResourceInstance(\n-\t\t@Param(\"id\") Long theId\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type AND t.myUpdated >= :cutoff\")\n-\tint countForResourceType(\n-\t\t@Param(\"type\") String theType,\n-\t\t@Temporal(value = TemporalType.TIMESTAMP) @Param(\"cutoff\") Date theCutoff\n-\t);\n-\n-\t@Query(\"SELECT COUNT(*) FROM ResourceHistoryTable t WHERE t.myResourceType = :type\")\n-\tint countForResourceType(\n-\t\t@Param(\"type\") String theType\n-\t);\n+\t// FIXME: remove commented", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDQ0Mg=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ3MDM4OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTozMjo0MVrOGOuw4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTozMjo0MVrOGOuw4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5OTQyNg==", "bodyText": "Nice.  This is a really elegant way to manage this cache.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418099426", "createdAt": "2020-04-30T15:32:41Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/index/IdHelperService.java", "diffHunk": "@@ -389,6 +385,36 @@ public void clearCache() {\n \t\t\t.build();\n \t}\n \n+\tpublic Map<Long, Optional<String>> translatePidsToForcedIds(Set<Long> thePids) {\n+\t\tMap<Long, Optional<String>> retVal = new HashMap<>(myForcedIdCache.getAllPresent(thePids));\n+\n+\t\tList<Long> remainingPids = thePids\n+\t\t\t.stream()\n+\t\t\t.filter(t -> !retVal.containsKey(t))\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\tnew QueryChunker<Long>().chunk(remainingPids, t->{\n+\t\t\tList<ForcedId> forcedIds = myForcedIdDao.findAllById(t);\n+\t\t\tfor (ForcedId forcedId : forcedIds) {\n+\t\t\t\tLong nextResourcePid = forcedId.getResourceId();\n+\t\t\t\tOptional<String> nextForcedId = Optional.of(forcedId.getForcedId());\n+\t\t\t\tretVal.put(nextResourcePid, nextForcedId);\n+\t\t\t\tmyForcedIdCache.put(nextResourcePid, nextForcedId);\n+\t\t\t}\n+\t\t});\n+\n+\t\tremainingPids = thePids\n+\t\t\t.stream()\n+\t\t\t.filter(t -> !retVal.containsKey(t))\n+\t\t\t.collect(Collectors.toList());\n+\t\tfor (Long nextResourcePid : remainingPids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ3NTgzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTozNDowMVrOGOu0YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0OTowMFrOGQNgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMDMyMA==", "bodyText": "Nice you got rid of a meaningful null.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418100320", "createdAt": "2020-04-30T15:34:01Z", "author": {"login": "fil512"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {\n+\t\tsuper();\n+\t\tmyPartitionDate = null;\n+\t\tmyPartitionName = null;\n+\t\tmyPartitionId = null;\n+\t\tmyAllPartitions = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MTY3Mw==", "bodyText": "Yeah I had this nagging feeling (guess it was a code smell) that this would lead to subtle bugs eventually....", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419651673", "createdAt": "2020-05-04T18:49:00Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-base/src/main/java/ca/uhn/fhir/interceptor/model/RequestPartitionId.java", "diffHunk": "@@ -26,35 +26,57 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n \n+/**\n+ * @since 5.0.0\n+ */\n public class RequestPartitionId {\n \n-\tprivate final Integer myPartitionId;\n+\tprivate static final RequestPartitionId ALL_PARTITIONS = new RequestPartitionId();\n \tprivate final LocalDate myPartitionDate;\n+\tprivate final boolean myAllPartitions;\n+\tprivate final Integer myPartitionId;\n \tprivate final String myPartitionName;\n \n \t/**\n-\t * Constructor\n+\t * Constructor for a single partition\n \t */\n \tprivate RequestPartitionId(@Nullable String thePartitionName, @Nullable Integer thePartitionId, @Nullable LocalDate thePartitionDate) {\n-\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionId = thePartitionId;\n+\t\tmyPartitionName = thePartitionName;\n \t\tmyPartitionDate = thePartitionDate;\n+\t\tmyAllPartitions = false;\n \t}\n \n-\tpublic String getPartitionName() {\n-\t\treturn myPartitionName;\n+\t/**\n+\t * Constructor for all partitions\n+\t */\n+\tprivate RequestPartitionId() {\n+\t\tsuper();\n+\t\tmyPartitionDate = null;\n+\t\tmyPartitionName = null;\n+\t\tmyPartitionId = null;\n+\t\tmyAllPartitions = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMDMyMA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ4Mzg5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTozNjowNFrOGOu5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo1MjoyMVrOGQNoAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMTY3NQ==", "bodyText": "nitpick: Replace numbered comments with methods", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418101675", "createdAt": "2020-04-30T15:36:04Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "diffHunk": "@@ -924,6 +918,17 @@ public IBaseResource toResource(BaseHasResource theEntity, boolean theForHistory\n \n \t\t}\n \n+\t\t// 7. Add partition information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzYzMw==", "bodyText": "Agree in general, but don't want to refaxctor this existing method right now", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419653633", "createdAt": "2020-05-04T18:52:21Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirDao.java", "diffHunk": "@@ -924,6 +918,17 @@ public IBaseResource toResource(BaseHasResource theEntity, boolean theForHistory\n \n \t\t}\n \n+\t\t// 7. Add partition information", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMTY3NQ=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUxMDM1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0MjowN1rOGOvKIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0OTozNlrOGQNhqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNTg5MA==", "bodyText": "How do you decide if a class is a Service or a Svc?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418105890", "createdAt": "2020-04-30T15:42:07Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -216,7 +216,7 @@ public DaoMethodOutcome create(T theResource, String theIfNoneExist, boolean the\n \t\t\ttheResource.setUserData(JpaConstants.RESOURCE_ID_SERVER_ASSIGNED, Boolean.TRUE);\n \t\t}\n \n-\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource);\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource, getResourceName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjIxMA==", "bodyText": "Or just a Helper?\nI've been using Helper for instance helpers and Util for static helpers.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418106210", "createdAt": "2020-04-30T15:42:36Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -216,7 +216,7 @@ public DaoMethodOutcome create(T theResource, String theIfNoneExist, boolean the\n \t\t\ttheResource.setUserData(JpaConstants.RESOURCE_ID_SERVER_ASSIGNED, Boolean.TRUE);\n \t\t}\n \n-\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource);\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource, getResourceName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNTg5MA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MjAxMA==", "bodyText": "GUess it should be Svc based on today's conversation", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419652010", "createdAt": "2020-05-04T18:49:36Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -216,7 +216,7 @@ public DaoMethodOutcome create(T theResource, String theIfNoneExist, boolean the\n \t\t\ttheResource.setUserData(JpaConstants.RESOURCE_ID_SERVER_ASSIGNED, Boolean.TRUE);\n \t\t}\n \n-\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource);\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineCreatePartitionForRequest(theRequestDetails, theResource, getResourceName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNTg5MA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTUzNTYwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo0ODoxOVrOGOvawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo1MjowMVrOGQNnHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMDE0Ng==", "bodyText": "I know it's probably too late for this comment, but seeing this code here makes me wonder: are there pieces of the partition filter that could be implemented as a consent interceptor?  (clearly when it's a predicate added to a query this doesn't make sense--but there are parts of the code like this where it's not a part of the query and might be more clearly expressed as a consent interceptor...?)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418110146", "createdAt": "2020-04-30T15:48:19Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -1005,19 +1000,19 @@ public BaseHasResource readEntity(IIdType theId, RequestDetails theRequest) {\n \tpublic BaseHasResource readEntity(IIdType theId, boolean theCheckForForcedId, RequestDetails theRequest) {\n \t\tvalidateResourceTypeAndThrowInvalidRequestException(theId);\n \n-\t\t@Nullable RequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n \t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(requestPartitionId, getResourceName(), theId.getIdPart());\n \t\tBaseHasResource entity = myEntityManager.find(ResourceTable.class, pid.getIdAsLong());\n \n \t\t// Verify that the resource is for the correct partition\n-\t\tif (requestPartitionId != null) {\n+\t\tif (!requestPartitionId.isAllPartitions()) {\n \t\t\tif (requestPartitionId.getPartitionId() == null) {\n \t\t\t\tif (entity.getPartitionId() != null) {\n \t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n \t\t\t\t}\n \t\t\t} else if (entity.getPartitionId() != null) {\n-\t\t\t\tif (!entity.getPartitionId().getPartitionId().equals(requestPartitionId.getPartitionId())) {\n+\t\t\t\tif (!requestPartitionId.getPartitionId().equals(entity.getPartitionId().getPartitionId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzQwNA==", "bodyText": "The problem with the consent interceptor is that it is applied to resources -after- the SQL query has taken place, so it's really intended for stuations where you expect the majority of resources to not be filtered out...That is an issue with the way consent interceptor works right now, but I think it makes it not a great place for this logic", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419653404", "createdAt": "2020-05-04T18:52:01Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/BaseHapiFhirResourceDao.java", "diffHunk": "@@ -1005,19 +1000,19 @@ public BaseHasResource readEntity(IIdType theId, RequestDetails theRequest) {\n \tpublic BaseHasResource readEntity(IIdType theId, boolean theCheckForForcedId, RequestDetails theRequest) {\n \t\tvalidateResourceTypeAndThrowInvalidRequestException(theId);\n \n-\t\t@Nullable RequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n+\t\tRequestPartitionId requestPartitionId = myRequestPartitionHelperService.determineReadPartitionForRequest(theRequest, getResourceName());\n \t\tResourcePersistentId pid = myIdHelperService.resolveResourcePersistentIds(requestPartitionId, getResourceName(), theId.getIdPart());\n \t\tBaseHasResource entity = myEntityManager.find(ResourceTable.class, pid.getIdAsLong());\n \n \t\t// Verify that the resource is for the correct partition\n-\t\tif (requestPartitionId != null) {\n+\t\tif (!requestPartitionId.isAllPartitions()) {\n \t\t\tif (requestPartitionId.getPartitionId() == null) {\n \t\t\t\tif (entity.getPartitionId() != null) {\n \t\t\t\t\tourLog.debug(\"Performing a read for PartitionId={} but entity has partition: {}\", requestPartitionId, entity.getPartitionId());\n \t\t\t\t\tentity = null;\n \t\t\t\t}\n \t\t\t} else if (entity.getPartitionId() != null) {\n-\t\t\t\tif (!entity.getPartitionId().getPartitionId().equals(requestPartitionId.getPartitionId())) {\n+\t\t\t\tif (!requestPartitionId.getPartitionId().equals(entity.getPartitionId().getPartitionId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMDE0Ng=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU1NTcyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1Mjo0NlrOGOvnQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoxMDo0NFrOGQQVzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng==", "bodyText": "Never used.  If this is called to build the cache, maybe don't store the results?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418113346", "createdAt": "2020-04-30T15:52:46Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.interceptor.api.IInterceptorBroadcaster;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.entity.ResourceHistoryTable;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.Nullable;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.jpa.dao.SearchBuilder.toPredicateArray;\n+\n+/**\n+ * The HistoryBuilder is responsible for building history queries\n+ */\n+public class HistoryBuilder {\n+\n+\tprivate final String myResourceType;\n+\tprivate final Long myResourceId;\n+\tprivate final Date myRangeStartInclusive;\n+\tprivate final Date myRangeEndInclusive;\n+\t@Autowired\n+\tprotected IInterceptorBroadcaster myInterceptorBroadcaster;\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\t@Autowired\n+\tprivate PartitionSettings myPartitionSettings;\n+\t@Autowired\n+\tprivate FhirContext myCtx;\n+\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic HistoryBuilder(@Nullable String theResourceType, @Nullable Long theResourceId, @Nullable Date theRangeStartInclusive, @Nullable Date theRangeEndInclusive) {\n+\t\tmyResourceType = theResourceType;\n+\t\tmyResourceId = theResourceId;\n+\t\tmyRangeStartInclusive = theRangeStartInclusive;\n+\t\tmyRangeEndInclusive = theRangeEndInclusive;\n+\t}\n+\n+\tpublic Long fetchCount(RequestPartitionId thePartitionId) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\t\tcriteriaQuery.select(cb.count(from));\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tTypedQuery<Long> query = myEntityManager.createQuery(criteriaQuery);\n+\t\treturn query.getSingleResult();\n+\t}\n+\n+\t@SuppressWarnings(\"OptionalIsPresent\")\n+\tpublic List<ResourceHistoryTable> fetchEntities(RequestPartitionId thePartitionId, int theFromIndex, int theToIndex) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<ResourceHistoryTable> criteriaQuery = cb.createQuery(ResourceHistoryTable.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tfrom.fetch(\"myProvenance\", JoinType.LEFT);\n+\n+\t\tcriteriaQuery.orderBy(cb.desc(from.get(\"myUpdated\")));\n+\n+\t\tTypedQuery<ResourceHistoryTable> query = myEntityManager.createQuery(criteriaQuery);\n+\n+\t\tquery.setFirstResult(theFromIndex);\n+\t\tquery.setMaxResults(theToIndex - theFromIndex);\n+\n+\t\tList<ResourceHistoryTable> tables = query.getResultList();\n+\t\tif (tables.size() > 0) {\n+\t\t\tImmutableListMultimap<Long, ResourceHistoryTable> resourceIdToHistoryEntries = Multimaps.index(tables, ResourceHistoryTable::getResourceId);\n+\n+\t\t\tMap<Long, Optional<String>> pidToForcedId = myIdHelperService.translatePidsToForcedIds(resourceIdToHistoryEntries.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1NTI0NA==", "bodyText": "@fil512 I'm not sure I follow this comment", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419655244", "createdAt": "2020-05-04T18:55:12Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.interceptor.api.IInterceptorBroadcaster;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.entity.ResourceHistoryTable;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.Nullable;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.jpa.dao.SearchBuilder.toPredicateArray;\n+\n+/**\n+ * The HistoryBuilder is responsible for building history queries\n+ */\n+public class HistoryBuilder {\n+\n+\tprivate final String myResourceType;\n+\tprivate final Long myResourceId;\n+\tprivate final Date myRangeStartInclusive;\n+\tprivate final Date myRangeEndInclusive;\n+\t@Autowired\n+\tprotected IInterceptorBroadcaster myInterceptorBroadcaster;\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\t@Autowired\n+\tprivate PartitionSettings myPartitionSettings;\n+\t@Autowired\n+\tprivate FhirContext myCtx;\n+\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic HistoryBuilder(@Nullable String theResourceType, @Nullable Long theResourceId, @Nullable Date theRangeStartInclusive, @Nullable Date theRangeEndInclusive) {\n+\t\tmyResourceType = theResourceType;\n+\t\tmyResourceId = theResourceId;\n+\t\tmyRangeStartInclusive = theRangeStartInclusive;\n+\t\tmyRangeEndInclusive = theRangeEndInclusive;\n+\t}\n+\n+\tpublic Long fetchCount(RequestPartitionId thePartitionId) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\t\tcriteriaQuery.select(cb.count(from));\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tTypedQuery<Long> query = myEntityManager.createQuery(criteriaQuery);\n+\t\treturn query.getSingleResult();\n+\t}\n+\n+\t@SuppressWarnings(\"OptionalIsPresent\")\n+\tpublic List<ResourceHistoryTable> fetchEntities(RequestPartitionId thePartitionId, int theFromIndex, int theToIndex) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<ResourceHistoryTable> criteriaQuery = cb.createQuery(ResourceHistoryTable.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tfrom.fetch(\"myProvenance\", JoinType.LEFT);\n+\n+\t\tcriteriaQuery.orderBy(cb.desc(from.get(\"myUpdated\")));\n+\n+\t\tTypedQuery<ResourceHistoryTable> query = myEntityManager.createQuery(criteriaQuery);\n+\n+\t\tquery.setFirstResult(theFromIndex);\n+\t\tquery.setMaxResults(theToIndex - theFromIndex);\n+\n+\t\tList<ResourceHistoryTable> tables = query.getResultList();\n+\t\tif (tables.size() > 0) {\n+\t\t\tImmutableListMultimap<Long, ResourceHistoryTable> resourceIdToHistoryEntries = Multimaps.index(tables, ResourceHistoryTable::getResourceId);\n+\n+\t\t\tMap<Long, Optional<String>> pidToForcedId = myIdHelperService.translatePidsToForcedIds(resourceIdToHistoryEntries.keySet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1NjY3OA==", "bodyText": "IntelliJ twas telling me that the pidToForcedId variable is never used.  So I'm suggesting either delete the line, or if the call to translatePidsToForcedIds() is important because it's building a cache, then call it but don't store the return value.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419656678", "createdAt": "2020-05-04T18:57:29Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.interceptor.api.IInterceptorBroadcaster;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.entity.ResourceHistoryTable;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.Nullable;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.jpa.dao.SearchBuilder.toPredicateArray;\n+\n+/**\n+ * The HistoryBuilder is responsible for building history queries\n+ */\n+public class HistoryBuilder {\n+\n+\tprivate final String myResourceType;\n+\tprivate final Long myResourceId;\n+\tprivate final Date myRangeStartInclusive;\n+\tprivate final Date myRangeEndInclusive;\n+\t@Autowired\n+\tprotected IInterceptorBroadcaster myInterceptorBroadcaster;\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\t@Autowired\n+\tprivate PartitionSettings myPartitionSettings;\n+\t@Autowired\n+\tprivate FhirContext myCtx;\n+\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic HistoryBuilder(@Nullable String theResourceType, @Nullable Long theResourceId, @Nullable Date theRangeStartInclusive, @Nullable Date theRangeEndInclusive) {\n+\t\tmyResourceType = theResourceType;\n+\t\tmyResourceId = theResourceId;\n+\t\tmyRangeStartInclusive = theRangeStartInclusive;\n+\t\tmyRangeEndInclusive = theRangeEndInclusive;\n+\t}\n+\n+\tpublic Long fetchCount(RequestPartitionId thePartitionId) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\t\tcriteriaQuery.select(cb.count(from));\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tTypedQuery<Long> query = myEntityManager.createQuery(criteriaQuery);\n+\t\treturn query.getSingleResult();\n+\t}\n+\n+\t@SuppressWarnings(\"OptionalIsPresent\")\n+\tpublic List<ResourceHistoryTable> fetchEntities(RequestPartitionId thePartitionId, int theFromIndex, int theToIndex) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<ResourceHistoryTable> criteriaQuery = cb.createQuery(ResourceHistoryTable.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tfrom.fetch(\"myProvenance\", JoinType.LEFT);\n+\n+\t\tcriteriaQuery.orderBy(cb.desc(from.get(\"myUpdated\")));\n+\n+\t\tTypedQuery<ResourceHistoryTable> query = myEntityManager.createQuery(criteriaQuery);\n+\n+\t\tquery.setFirstResult(theFromIndex);\n+\t\tquery.setMaxResults(theToIndex - theFromIndex);\n+\n+\t\tList<ResourceHistoryTable> tables = query.getResultList();\n+\t\tif (tables.size() > 0) {\n+\t\t\tImmutableListMultimap<Long, ResourceHistoryTable> resourceIdToHistoryEntries = Multimaps.index(tables, ResourceHistoryTable::getResourceId);\n+\n+\t\t\tMap<Long, Optional<String>> pidToForcedId = myIdHelperService.translatePidsToForcedIds(resourceIdToHistoryEntries.keySet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5ODEyNw==", "bodyText": "Ah ok.. refactored.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r419698127", "createdAt": "2020-05-04T20:10:44Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/HistoryBuilder.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package ca.uhn.fhir.jpa.dao;\n+\n+/*\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.interceptor.api.IInterceptorBroadcaster;\n+import ca.uhn.fhir.interceptor.model.RequestPartitionId;\n+import ca.uhn.fhir.jpa.dao.index.IdHelperService;\n+import ca.uhn.fhir.jpa.model.config.PartitionSettings;\n+import ca.uhn.fhir.jpa.model.cross.ResourcePersistentId;\n+import ca.uhn.fhir.jpa.model.entity.ResourceHistoryTable;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.annotation.Nullable;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.JoinType;\n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static ca.uhn.fhir.jpa.dao.SearchBuilder.toPredicateArray;\n+\n+/**\n+ * The HistoryBuilder is responsible for building history queries\n+ */\n+public class HistoryBuilder {\n+\n+\tprivate final String myResourceType;\n+\tprivate final Long myResourceId;\n+\tprivate final Date myRangeStartInclusive;\n+\tprivate final Date myRangeEndInclusive;\n+\t@Autowired\n+\tprotected IInterceptorBroadcaster myInterceptorBroadcaster;\n+\t@PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+\tprotected EntityManager myEntityManager;\n+\t@Autowired\n+\tprivate PartitionSettings myPartitionSettings;\n+\t@Autowired\n+\tprivate FhirContext myCtx;\n+\n+\n+\t/**\n+\t * Constructor\n+\t */\n+\tpublic HistoryBuilder(@Nullable String theResourceType, @Nullable Long theResourceId, @Nullable Date theRangeStartInclusive, @Nullable Date theRangeEndInclusive) {\n+\t\tmyResourceType = theResourceType;\n+\t\tmyResourceId = theResourceId;\n+\t\tmyRangeStartInclusive = theRangeStartInclusive;\n+\t\tmyRangeEndInclusive = theRangeEndInclusive;\n+\t}\n+\n+\tpublic Long fetchCount(RequestPartitionId thePartitionId) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\t\tcriteriaQuery.select(cb.count(from));\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tTypedQuery<Long> query = myEntityManager.createQuery(criteriaQuery);\n+\t\treturn query.getSingleResult();\n+\t}\n+\n+\t@SuppressWarnings(\"OptionalIsPresent\")\n+\tpublic List<ResourceHistoryTable> fetchEntities(RequestPartitionId thePartitionId, int theFromIndex, int theToIndex) {\n+\t\tCriteriaBuilder cb = myEntityManager.getCriteriaBuilder();\n+\t\tCriteriaQuery<ResourceHistoryTable> criteriaQuery = cb.createQuery(ResourceHistoryTable.class);\n+\t\tRoot<ResourceHistoryTable> from = criteriaQuery.from(ResourceHistoryTable.class);\n+\n+\t\taddPredicatesToQuery(cb, thePartitionId, criteriaQuery, from);\n+\n+\t\tfrom.fetch(\"myProvenance\", JoinType.LEFT);\n+\n+\t\tcriteriaQuery.orderBy(cb.desc(from.get(\"myUpdated\")));\n+\n+\t\tTypedQuery<ResourceHistoryTable> query = myEntityManager.createQuery(criteriaQuery);\n+\n+\t\tquery.setFirstResult(theFromIndex);\n+\t\tquery.setMaxResults(theToIndex - theFromIndex);\n+\n+\t\tList<ResourceHistoryTable> tables = query.getResultList();\n+\t\tif (tables.size() > 0) {\n+\t\t\tImmutableListMultimap<Long, ResourceHistoryTable> resourceIdToHistoryEntries = Multimaps.index(tables, ResourceHistoryTable::getResourceId);\n+\n+\t\t\tMap<Long, Optional<String>> pidToForcedId = myIdHelperService.translatePidsToForcedIds(resourceIdToHistoryEntries.keySet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzM0Ng=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU3NTM2OnYy", "diffSide": "LEFT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NzoyNVrOGOv0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1NzoyNVrOGOv0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNjYzNQ==", "bodyText": "Good call.  I fell victim to \"Gosh this is so cool\" syndrome here.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418116635", "createdAt": "2020-04-30T15:57:25Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "diffHunk": "@@ -21,12 +21,20 @@\n  */\n \n import ca.uhn.fhir.jpa.api.dao.IDao;\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Lookup;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.stereotype.Service;\n \n-@Service\n-public abstract class SearchBuilderFactory {\n-\t@Lookup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTU4MDcwOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTo1ODo1MlrOGOv3qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoxNToxNVrOGPOJWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzU0NA==", "bodyText": "Need to optimize imports across this whole MR.  (lmk if you haven't seen this before.)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418117544", "createdAt": "2020-04-30T15:58:52Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "diffHunk": "@@ -21,12 +21,20 @@\n  */\n \n import ca.uhn.fhir.jpa.api.dao.IDao;\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Lookup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMzU5Mw==", "bodyText": "Will do", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418613593", "createdAt": "2020-05-01T16:15:15Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/SearchBuilderFactory.java", "diffHunk": "@@ -21,12 +21,20 @@\n  */\n \n import ca.uhn.fhir.jpa.api.dao.IDao;\n+import ca.uhn.fhir.jpa.config.BaseConfig;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Lookup;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExNzU0NA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTYxMjg0OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowNjo1MVrOGOwMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyNDo1MFrOGPOZFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMjg1NA==", "bodyText": "Love it!!", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418122854", "createdAt": "2020-04-30T16:06:51Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * As always, Oracle can't handle things that other databases don't mind.. In this\n+ * case it doesn't like more than ~1000 IDs in a single load, so we break this up\n+ * if it's lots of IDs. I suppose maybe we should be doing this as a join anyhow\n+ * but this should work too. Sigh.\n+ */\n+public class QueryChunker<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxNzYyMA==", "bodyText": ":)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418617620", "createdAt": "2020-05-01T16:24:50Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/util/QueryChunker.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ca.uhn.fhir.jpa.util;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR JPA Server\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.jpa.dao.SearchBuilder;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * As always, Oracle can't handle things that other databases don't mind.. In this\n+ * case it doesn't like more than ~1000 IDs in a single load, so we break this up\n+ * if it's lots of IDs. I suppose maybe we should be doing this as a join anyhow\n+ * but this should work too. Sigh.\n+ */\n+public class QueryChunker<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMjg1NA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTYyMTE1OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjowODo1MVrOGOwRog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyNTozOVrOGPOabw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyNDE5NA==", "bodyText": "this assert doesn't cover the case where there are 4..", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418124194", "createdAt": "2020-04-30T16:08:51Z", "author": {"login": "fil512"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java", "diffHunk": "@@ -246,6 +247,117 @@ public void testReferenceToForcedId_DeletesDisabled() {\n \n \t}\n \n+\t@Test\n+\tpublic void testHistory_Server() {\n+\t\trunInTransaction(() -> {\n+\t\t\tPatient p = new Patient();\n+\t\t\tp.setId(\"A\");\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"1\");\n+\t\t\tmyPatientDao.update(p).getId().toUnqualified();\n+\n+\t\t\tp = new Patient();\n+\t\t\tp.setId(\"B\");\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"2\");\n+\t\t\tmyPatientDao.update(p).getId().toUnqualified();\n+\n+\t\t\tp = new Patient();\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"2\");\n+\t\t\tmyPatientDao.create(p).getId().toUnqualified();\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();\n+\t\trunInTransaction(() -> {\n+\t\t\tIBundleProvider history = mySystemDao.history(null, null, null);\n+\t\t\tassertEquals(3, history.getResources(0, 3).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxNzk2Nw==", "bodyText": "Good call, fixed", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418617967", "createdAt": "2020-05-01T16:25:39Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/r4/FhirResourceDaoR4QueryCountTest.java", "diffHunk": "@@ -246,6 +247,117 @@ public void testReferenceToForcedId_DeletesDisabled() {\n \n \t}\n \n+\t@Test\n+\tpublic void testHistory_Server() {\n+\t\trunInTransaction(() -> {\n+\t\t\tPatient p = new Patient();\n+\t\t\tp.setId(\"A\");\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"1\");\n+\t\t\tmyPatientDao.update(p).getId().toUnqualified();\n+\n+\t\t\tp = new Patient();\n+\t\t\tp.setId(\"B\");\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"2\");\n+\t\t\tmyPatientDao.update(p).getId().toUnqualified();\n+\n+\t\t\tp = new Patient();\n+\t\t\tp.addIdentifier().setSystem(\"urn:system\").setValue(\"2\");\n+\t\t\tmyPatientDao.create(p).getId().toUnqualified();\n+\t\t});\n+\n+\t\tmyCaptureQueriesListener.clear();\n+\t\trunInTransaction(() -> {\n+\t\t\tIBundleProvider history = mySystemDao.history(null, null, null);\n+\t\t\tassertEquals(3, history.getResources(0, 3).size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyNDE5NA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY2NzIyOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMTowMVrOGOwwIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyNjozN1rOGPOcLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMjAwMg==", "bodyText": "This method name is confusing but I'm struggling to think of a better name.  sizeOrThrowException()?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418132002", "createdAt": "2020-04-30T16:21:01Z", "author": {"login": "fil512"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java", "diffHunk": "@@ -163,4 +164,12 @@ default boolean isEmpty() {\n \t\treturn getResources(0, 1).isEmpty();\n \t}\n \n+\t/**\n+\t * Returns the value of {@link #size()} and throws a {@link NullPointerException} of it is null\n+\t */\n+\tdefault int sizeNotNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODQxNA==", "bodyText": "I went with sizeOrThrowNpe()", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418618414", "createdAt": "2020-05-01T16:26:37Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-server/src/main/java/ca/uhn/fhir/rest/api/server/IBundleProvider.java", "diffHunk": "@@ -163,4 +164,12 @@ default boolean isEmpty() {\n \t\treturn getResources(0, 1).isEmpty();\n \t}\n \n+\t/**\n+\t * Returns the value of {@link #size()} and throws a {@link NullPointerException} of it is null\n+\t */\n+\tdefault int sizeNotNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMjAwMg=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcwMjQ5OnYy", "diffSide": "RIGHT", "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyOTo1NFrOGOxGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoyNTo1MVrOGPOavw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzY5OA==", "bodyText": "This is super cool.  I've added it to our next meeting agenda.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418137698", "createdAt": "2020-04-30T16:29:54Z", "author": {"login": "fil512"}, "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package ca.uhn.fhir.test.utilities;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Test Utilities\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseReference;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.ICompositeType;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * This is an experiment to see if we can make test data creation for storage unit tests a bit more readable.\n+ */\n+@SuppressWarnings({\"unchecked\", \"ConstantConditions\"})\n+public interface ITestDataBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxODA0Nw==", "bodyText": "Perfect", "url": "https://github.com/hapifhir/hapi-fhir/pull/1821#discussion_r418618047", "createdAt": "2020-05-01T16:25:51Z", "author": {"login": "jamesagnew"}, "path": "hapi-fhir-test-utilities/src/main/java/ca/uhn/fhir/test/utilities/ITestDataBuilder.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package ca.uhn.fhir.test.utilities;\n+\n+/*-\n+ * #%L\n+ * HAPI FHIR Test Utilities\n+ * %%\n+ * Copyright (C) 2014 - 2020 University Health Network\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ */\n+\n+import ca.uhn.fhir.context.BaseRuntimeChildDefinition;\n+import ca.uhn.fhir.context.BaseRuntimeElementCompositeDefinition;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.context.RuntimeResourceDefinition;\n+import org.hl7.fhir.instance.model.api.IBaseReference;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.instance.model.api.ICompositeType;\n+import org.hl7.fhir.instance.model.api.IIdType;\n+import org.hl7.fhir.instance.model.api.IPrimitiveType;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * This is an experiment to see if we can make test data creation for storage unit tests a bit more readable.\n+ */\n+@SuppressWarnings({\"unchecked\", \"ConstantConditions\"})\n+public interface ITestDataBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzY5OA=="}, "originalCommit": {"oid": "a82518eb48c09e505d15473393c69e581f665879"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1952, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}