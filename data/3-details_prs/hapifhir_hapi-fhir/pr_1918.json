{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzgzODE1", "number": 1918, "title": "Empi 28 matchers", "bodyText": "Add new rule matchers\nUpdate documentation\nImprove json validation", "createdAt": "2020-06-11T23:35:19Z", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918", "merged": true, "mergeCommit": {"oid": "d164e2d45057b85cbe12b3bdb5536f5cab019525"}, "closed": true, "closedAt": "2020-06-14T21:15:57Z", "author": {"login": "fil512"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpmzczAH2gAyNDMzMzgzODE1OmNhZDdjODY0OGE3NmU3MTM1MmY1OGI1MTVjOWE3YzYwZjhjM2Q1ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrRVpDgH2gAyNDMzMzgzODE1OjRmN2QxMzFiMTQ1ODdjNTFjNTI1YWVhNTVhZjZkMTlmNWFiN2MyY2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cad7c8648a76e71352f58b515c9a7c60f8c3d5ef", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/cad7c8648a76e71352f58b515c9a7c60f8c3d5ef", "committedDate": "2020-06-09T15:29:34Z", "message": "adding matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df461fc8c5cf9897d894c12fe52e0618ca417890", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/df461fc8c5cf9897d894c12fe52e0618ca417890", "committedDate": "2020-06-09T16:27:34Z", "message": "reorganize resource matching api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6e3cdda5061376ece7f7ffe58953e428df59cd", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2c6e3cdda5061376ece7f7ffe58953e428df59cd", "committedDate": "2020-06-09T19:40:53Z", "message": "added precision sensitive date matcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393a24b17155b909c3956006ffa8cd9d7f371a8c", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/393a24b17155b909c3956006ffa8cd9d7f371a8c", "committedDate": "2020-06-09T22:57:50Z", "message": "stricter rules validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab8d608396ba5348566af737dff8802fc747a81d", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ab8d608396ba5348566af737dff8802fc747a81d", "committedDate": "2020-06-09T23:10:52Z", "message": "validate thresholds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977a3281ea8263ecca9d5ba808475ff1ab71d4c5", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/977a3281ea8263ecca9d5ba808475ff1ab71d4c5", "committedDate": "2020-06-09T23:32:51Z", "message": "validate paths.  with FIXMES"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "227519a128a8a66ffedc846575ba32c206bf8fc8", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/227519a128a8a66ffedc846575ba32c206bf8fc8", "committedDate": "2020-06-10T16:06:21Z", "message": "validate searchparams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ccf21feb639c643ddf4540da219ffbab36798a9", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5ccf21feb639c643ddf4540da219ffbab36798a9", "committedDate": "2020-06-10T16:08:19Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f297036eeccdf56523e43218f7de8a8e64a1ef34", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f297036eeccdf56523e43218f7de8a8e64a1ef34", "committedDate": "2020-06-10T16:15:01Z", "message": "fix merge compile error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03b246cfc5216b641087fb56b09e197ac3fb812", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b03b246cfc5216b641087fb56b09e197ac3fb812", "committedDate": "2020-06-10T17:26:45Z", "message": "add soundex, validate no duplicate names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dbb5b9456306c115619d560b39187118d292546", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4dbb5b9456306c115619d560b39187118d292546", "committedDate": "2020-06-10T19:21:11Z", "message": "add normalize substring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894a7e35daed288bd4e1d7c4d1f01beae5d9a8d4", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/894a7e35daed288bd4e1d7c4d1f01beae5d9a8d4", "committedDate": "2020-06-10T20:46:57Z", "message": "add exact field to matcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01daffbc7bc8881a98f43207572950461685418", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f01daffbc7bc8881a98f43207572950461685418", "committedDate": "2020-06-10T21:07:51Z", "message": "EXACT -> STRING, exact=true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52c8bd711b693d1fb013fda16ead2dcbaca8947a", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/52c8bd711b693d1fb013fda16ead2dcbaca8947a", "committedDate": "2020-06-10T21:14:19Z", "message": "cleanup test method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13aafbc3d500543c623d35099abd76a839e88083", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/13aafbc3d500543c623d35099abd76a839e88083", "committedDate": "2020-06-10T23:11:35Z", "message": "match test passes with fixmes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8b6cd10d43412d7411e9ae3176c3fef29ddb2f", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9a8b6cd10d43412d7411e9ae3176c3fef29ddb2f", "committedDate": "2020-06-11T00:01:59Z", "message": "fixed vector matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b53243aeaaac02480a8b08b3769c410f2647331e", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b53243aeaaac02480a8b08b3769c410f2647331e", "committedDate": "2020-06-11T00:02:17Z", "message": "fixed vector matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb7d35186046b40facbc35f6141de1fc3a5217c", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/acb7d35186046b40facbc35f6141de1fc3a5217c", "committedDate": "2020-06-11T17:49:39Z", "message": "updating documentation and fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daeb89c05f5cc791194a1a8a7740427338e67e26", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/daeb89c05f5cc791194a1a8a7740427338e67e26", "committedDate": "2020-06-11T18:48:35Z", "message": "updated rules documentation with latest matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2f706e4d75d848da0cf60d3a2327b77a83a05a", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3c2f706e4d75d848da0cf60d3a2327b77a83a05a", "committedDate": "2020-06-11T18:49:40Z", "message": "updated rules documentation with latest matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ac92ad735c206d068f3dd47b66bef912ac58c02", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/1ac92ad735c206d068f3dd47b66bef912ac58c02", "committedDate": "2020-06-11T19:03:16Z", "message": "created eid page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce96b70930cba5cb8d39670b81ee5a34148144b8", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/ce96b70930cba5cb8d39670b81ee5a34148144b8", "committedDate": "2020-06-11T21:17:54Z", "message": "eid documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f82cbd5e0f36e3c388f313e824f4401015651d88", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/f82cbd5e0f36e3c388f313e824f4401015651d88", "committedDate": "2020-06-11T21:29:38Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3642f82a843a453760d3e3d0cac9818f3563ea", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/3c3642f82a843a453760d3e3d0cac9818f3563ea", "committedDate": "2020-06-11T22:00:14Z", "message": "pre-review cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b219dc72110dfe88cc4bd8040a2b89f7531a750", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/5b219dc72110dfe88cc4bd8040a2b89f7531a750", "committedDate": "2020-06-11T22:13:29Z", "message": "clean up beans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/42f4af1de1547183743e8b3d66e00eef53d4a67e", "committedDate": "2020-06-11T23:28:37Z", "message": "disentangling beans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e4c58dde41529f47cc391ec48fc8ed7f54762e", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/c3e4c58dde41529f47cc391ec48fc8ed7f54762e", "committedDate": "2020-06-12T01:04:12Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dfe289adb80e8baf38edab3f34d69d22df75a8a", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/7dfe289adb80e8baf38edab3f34d69d22df75a8a", "committedDate": "2020-06-12T02:05:24Z", "message": "noop to trigger CI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODQ2NDQy", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#pullrequestreview-429846442", "createdAt": "2020-06-12T15:43:04Z", "commit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "state": "APPROVED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0MzowNFrOGjIvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxNToxN1rOGjLtpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NjU2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            HAPI EMPI keeps track of which links were automatically established vs manually verified.  Manual links always take precedence over automatic links.  Once a link for a patient has been manually verified, HAPI EMPI won't touch it.\n          \n          \n            \n            HAPI EMPI keeps track of which links were automatically established vs manually verified.  Manual links always take precedence over automatic links.  Once a link for a patient has been manually verified, HAPI EMPI won't modify or remove it.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439496560", "createdAt": "2020-06-12T15:43:04Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md", "diffHunk": "@@ -1,158 +1,37 @@\n-# Enterprise Master Person Index (EMPI)\n+# EMPI Getting Started\n \n-HAPI FHIR 5.0.0 introduced preliminary support for **EMPI**.\n+## Introduction\n+\n+HAPI FHIR 5.1.0 introduces preliminary support for **EMPI**.\n \n An EMPI allows for links to be created and maintained between different Patient and/or Practitioner resources. These links are used to indicate the fact that different Patient/Practitioner resources are known or believed to refer to the same actual (real world) person.\n \n-These links may be created and updated using different combinations of automatic linking as well as manual linking.\n+These links may be created and updated using different combinations of automatic linking and manual linking.\n \n-Note: The following sections describe linking between Patient and Person resources. The same information applies for linking between Practitioner and Person, but for readability it is not repeated.\n+Note: This documentation describes EMPI for Patient resources. The same information applies for Practitioner resources.  You can substitute \"Practitioner\" for \"Patient\" anywhere it appears in this documentation.\n \n ## Working Example\n \n-The [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project contains a complete working example of the HAPI EMPI feature and documentation about how to enable and configure it. You may wish to browse its source to see how this works.\n-\n-## Person linking in FHIR\n-\n-Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n-\n-<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n-\n-There are several resources that are used:\n-\n-* Patient - Represents the record of a person who receives healthcare services\n-* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n-\n-# Automatic Linking\n-\n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n-\n-In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n-\n-This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n-\n-## Design Principles\n-\n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n-\n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n-\n-1. Every Patient in the system has a MATCH link to at most one Person resource.\n-\n-1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n-\n-1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n-\n-1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n-\n-1. Two different Person resources cannot have the same EID.\n-\n-1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n-\n-## Links\n-\n-1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n-\n-1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n-\n-1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n-\n-1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n-\n-### Possible rule match outcomes:\n-\n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n-\n-* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n-\n-* CASE 2: All of the MATCHED Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCHED.\n-\n-* CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n-\n-* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, empi-link records are created with POSSIBLE_MATCH outcome and await manual assignment to either NO_MATCH or MATCHED.  Person resources are not changed.\n-\n-# Rules\n-\n-HAPI EMPI rules are managed via a single json document.  This document contains a version.  empi-links derived from these rules are marked with this version.  The following configuration is stored in the rules:\n-\n-* **resourceSearchParams**: These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"birthdate\"\n-}, {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"identifier\"\n-} ]\n-```\n-\n-* **filterSearchParams** When searching for match candidates, only resources that match this filter are considered.  E.g. you may wish to only search for Patients for which active=true.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"active\",\n-    \"fixedValue\" : \"true\"\n-} ]\n-```\n-\n-* **matchFields** Once the match candidates have been found, they are then each assigned a match vector that marks which fields match.  The match vector is determined by a list of matchFields.  Each matchField defines a name, distance metric, a success threshold, a resource type, and resource path to check. For example:\n-```json\n-{\n-    \"name\" : \"given-name-cosine\",\n-    \"resourceType\" : \"Patient\",\n-    \"resourcePath\" : \"name.given\",\n-    \"metric\" : \"COSINE\",\n-    \"matchThreshold\" : 0.8\n-}\n-```\n+A complete working example of HAPI EMPI can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n \n-Note that in all the above json, valid options for `resourceType` are `Patient`, `Practitioner`, and `All`. Use `All` if the criteria is identical across both resource types, and you would like to apply the pre-search to both practitioners and patients.\n+## Overview\n \n-The following metrics are currently supported:\n-* JARO_WINKLER\n-* COSINE\n-* JACCARD\n-* NORMALIZED_LEVENSCHTEIN\n-* SORENSEN_DICE\n-* STANDARD_NAME_ANY_ORDER\n-* EXACT_NAME_ANY_ORDER\n-* STANDARD_NAME_FIRST_AND_LAST\n-* EXACT_NAME_FIRST_AND_LAST\n+To get up and running with HAPI EMPI, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#empi-settings].  \n \n-See [java-string-similarity](https://github.com/tdebatty/java-string-similarity) for a description of the first five metrics.  For the last four, STANDARd means ignore case and accents whereas EXACT must match casing and accents exactly.  Name any order matches first and last names irrespective of order, whereas FIRST_AND_LAST metrics require the name match to be in order.\n+Once EMPI is enabled, the next thing you will want to do is configure your [EMPI Rules](/hapi-fhir/docs/server_jpa_empi/empi_rules.html)\n \n-* **matchResultMap** A map which converts combinations of successful matchFields into an EMPI Match Result score for overall matching of a given pair of resources.\n+HAPI EMPI watches for incoming Patient resources and automatically links them to Person resources based on these rules.  For example, if the rules indicate that any two patients with the same ssn, birthdate and first and last name are the same person, then two different Patient resources with matching values for these attributes will automatically be linked to the same Person resource.  If no existing resources match the incoming Patient, then a new Person resource will be created and linked to the incoming Patient.\n \n-```json\n-\"matchResultMap\" : {\n-    \"given-name-cosine\" : \"POSSIBLE_MATCH\",\n-    \"given-name-jaro, last-name-jaro\" : \"MATCH\"\n-}\n-```\n+Based on how well two patients match, the EMPI Rules may link the Patient to the Person as a MATCH or a POSSIBLE_MATCH.  In the case of a POSSIBLE_MATCH, a user will need to later use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either confirm the link as a MATCH, or mark the link as a NO_MATCH in which case HAPI EMPI will create a new Person for them.\n \n-* **eidSystem**: The external EID system that the HAPI EMPI system should expect to see on incoming Patient resources. Must be a valid URI.\n+Another thing that can happen in the linking process is HAPI EMPI can determine that two Person resources may be duplicates.  In this case, it marks them as POSSIBLE_DUPLICATE and the user can use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either merge the two Persons or mark them as NO_MATCH in which case HAPI EMPI will know not to mark them as possible duplicates in the future.\n \n-# Enterprise Identifiers\n+HAPI EMPI keeps track of which links were automatically established vs manually verified.  Manual links always take precedence over automatic links.  Once a link for a patient has been manually verified, HAPI EMPI won't touch it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzAwMw==", "bodyText": "Are we supposed to use the word installation instead of server here? I remember this being a discussion with other people that I had concerning docs. I may be wrong though", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439497003", "createdAt": "2020-06-12T15:43:57Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md", "diffHunk": "@@ -1,158 +1,37 @@\n-# Enterprise Master Person Index (EMPI)\n+# EMPI Getting Started\n \n-HAPI FHIR 5.0.0 introduced preliminary support for **EMPI**.\n+## Introduction\n+\n+HAPI FHIR 5.1.0 introduces preliminary support for **EMPI**.\n \n An EMPI allows for links to be created and maintained between different Patient and/or Practitioner resources. These links are used to indicate the fact that different Patient/Practitioner resources are known or believed to refer to the same actual (real world) person.\n \n-These links may be created and updated using different combinations of automatic linking as well as manual linking.\n+These links may be created and updated using different combinations of automatic linking and manual linking.\n \n-Note: The following sections describe linking between Patient and Person resources. The same information applies for linking between Practitioner and Person, but for readability it is not repeated.\n+Note: This documentation describes EMPI for Patient resources. The same information applies for Practitioner resources.  You can substitute \"Practitioner\" for \"Patient\" anywhere it appears in this documentation.\n \n ## Working Example\n \n-The [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project contains a complete working example of the HAPI EMPI feature and documentation about how to enable and configure it. You may wish to browse its source to see how this works.\n-\n-## Person linking in FHIR\n-\n-Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n-\n-<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n-\n-There are several resources that are used:\n-\n-* Patient - Represents the record of a person who receives healthcare services\n-* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n-\n-# Automatic Linking\n-\n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n-\n-In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n-\n-This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n-\n-## Design Principles\n-\n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n-\n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n-\n-1. Every Patient in the system has a MATCH link to at most one Person resource.\n-\n-1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n-\n-1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n-\n-1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n-\n-1. Two different Person resources cannot have the same EID.\n-\n-1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n-\n-## Links\n-\n-1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n-\n-1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n-\n-1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n-\n-1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n-\n-### Possible rule match outcomes:\n-\n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n-\n-* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n-\n-* CASE 2: All of the MATCHED Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCHED.\n-\n-* CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n-\n-* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, empi-link records are created with POSSIBLE_MATCH outcome and await manual assignment to either NO_MATCH or MATCHED.  Person resources are not changed.\n-\n-# Rules\n-\n-HAPI EMPI rules are managed via a single json document.  This document contains a version.  empi-links derived from these rules are marked with this version.  The following configuration is stored in the rules:\n-\n-* **resourceSearchParams**: These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"birthdate\"\n-}, {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"identifier\"\n-} ]\n-```\n-\n-* **filterSearchParams** When searching for match candidates, only resources that match this filter are considered.  E.g. you may wish to only search for Patients for which active=true.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"active\",\n-    \"fixedValue\" : \"true\"\n-} ]\n-```\n-\n-* **matchFields** Once the match candidates have been found, they are then each assigned a match vector that marks which fields match.  The match vector is determined by a list of matchFields.  Each matchField defines a name, distance metric, a success threshold, a resource type, and resource path to check. For example:\n-```json\n-{\n-    \"name\" : \"given-name-cosine\",\n-    \"resourceType\" : \"Patient\",\n-    \"resourcePath\" : \"name.given\",\n-    \"metric\" : \"COSINE\",\n-    \"matchThreshold\" : 0.8\n-}\n-```\n+A complete working example of HAPI EMPI can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n \n-Note that in all the above json, valid options for `resourceType` are `Patient`, `Practitioner`, and `All`. Use `All` if the criteria is identical across both resource types, and you would like to apply the pre-search to both practitioners and patients.\n+## Overview\n \n-The following metrics are currently supported:\n-* JARO_WINKLER\n-* COSINE\n-* JACCARD\n-* NORMALIZED_LEVENSCHTEIN\n-* SORENSEN_DICE\n-* STANDARD_NAME_ANY_ORDER\n-* EXACT_NAME_ANY_ORDER\n-* STANDARD_NAME_FIRST_AND_LAST\n-* EXACT_NAME_FIRST_AND_LAST\n+To get up and running with HAPI EMPI, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#empi-settings].  \n \n-See [java-string-similarity](https://github.com/tdebatty/java-string-similarity) for a description of the first five metrics.  For the last four, STANDARd means ignore case and accents whereas EXACT must match casing and accents exactly.  Name any order matches first and last names irrespective of order, whereas FIRST_AND_LAST metrics require the name match to be in order.\n+Once EMPI is enabled, the next thing you will want to do is configure your [EMPI Rules](/hapi-fhir/docs/server_jpa_empi/empi_rules.html)\n \n-* **matchResultMap** A map which converts combinations of successful matchFields into an EMPI Match Result score for overall matching of a given pair of resources.\n+HAPI EMPI watches for incoming Patient resources and automatically links them to Person resources based on these rules.  For example, if the rules indicate that any two patients with the same ssn, birthdate and first and last name are the same person, then two different Patient resources with matching values for these attributes will automatically be linked to the same Person resource.  If no existing resources match the incoming Patient, then a new Person resource will be created and linked to the incoming Patient.\n \n-```json\n-\"matchResultMap\" : {\n-    \"given-name-cosine\" : \"POSSIBLE_MATCH\",\n-    \"given-name-jaro, last-name-jaro\" : \"MATCH\"\n-}\n-```\n+Based on how well two patients match, the EMPI Rules may link the Patient to the Person as a MATCH or a POSSIBLE_MATCH.  In the case of a POSSIBLE_MATCH, a user will need to later use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either confirm the link as a MATCH, or mark the link as a NO_MATCH in which case HAPI EMPI will create a new Person for them.\n \n-* **eidSystem**: The external EID system that the HAPI EMPI system should expect to see on incoming Patient resources. Must be a valid URI.\n+Another thing that can happen in the linking process is HAPI EMPI can determine that two Person resources may be duplicates.  In this case, it marks them as POSSIBLE_DUPLICATE and the user can use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either merge the two Persons or mark them as NO_MATCH in which case HAPI EMPI will know not to mark them as possible duplicates in the future.\n \n-# Enterprise Identifiers\n+HAPI EMPI keeps track of which links were automatically established vs manually verified.  Manual links always take precedence over automatic links.  Once a link for a patient has been manually verified, HAPI EMPI won't touch it.\n \n-An Enterprise Identifier(EID) is a unique identifier that can be attached to Patients or Practitioners. Each implementation is expected to use exactly one EID system for incoming resources, \n-defined in the mentioned `empi-rules.json` file. If a Patient or Practitioner with a valid EID is added to the system, that EID will be copied over to the Person that was matched. In the case that \n-the incoming Patient or Practitioner had no EID assigned, an internal EID will be created for it. There are thus two classes of EID. Internal EIDs, created by HAPI-EMPI, and External EIDs, provided \n-by the install. \n+## EMPI Settings\n \n-There are many edge cases for determining what will happen in merge and update scenarios, which will be provided in future documentation.\n-    \n-    \n-# HAPI EMPI Technical Details\n+Follow these steps to enable EMPI on the server:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The [EmpiSettings](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html) bean contains configuration settings related to EMPI within the server. To enable Empi, the [setEnabled(boolean)](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html#setEnabled(boolean)) property should be enabled.\n          \n          \n            \n            The [EmpiSettings](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html) bean contains configuration settings related to EMPI within the server. To enable EMPI, the [setEnabled(boolean)](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html#setEnabled(boolean)) property should be enabled.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439497252", "createdAt": "2020-06-12T15:44:25Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md", "diffHunk": "@@ -1,158 +1,37 @@\n-# Enterprise Master Person Index (EMPI)\n+# EMPI Getting Started\n \n-HAPI FHIR 5.0.0 introduced preliminary support for **EMPI**.\n+## Introduction\n+\n+HAPI FHIR 5.1.0 introduces preliminary support for **EMPI**.\n \n An EMPI allows for links to be created and maintained between different Patient and/or Practitioner resources. These links are used to indicate the fact that different Patient/Practitioner resources are known or believed to refer to the same actual (real world) person.\n \n-These links may be created and updated using different combinations of automatic linking as well as manual linking.\n+These links may be created and updated using different combinations of automatic linking and manual linking.\n \n-Note: The following sections describe linking between Patient and Person resources. The same information applies for linking between Practitioner and Person, but for readability it is not repeated.\n+Note: This documentation describes EMPI for Patient resources. The same information applies for Practitioner resources.  You can substitute \"Practitioner\" for \"Patient\" anywhere it appears in this documentation.\n \n ## Working Example\n \n-The [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project contains a complete working example of the HAPI EMPI feature and documentation about how to enable and configure it. You may wish to browse its source to see how this works.\n-\n-## Person linking in FHIR\n-\n-Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n-\n-<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n-\n-There are several resources that are used:\n-\n-* Patient - Represents the record of a person who receives healthcare services\n-* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n-\n-# Automatic Linking\n-\n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n-\n-In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n-\n-This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n-\n-## Design Principles\n-\n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n-\n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n-\n-1. Every Patient in the system has a MATCH link to at most one Person resource.\n-\n-1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n-\n-1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n-\n-1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n-\n-1. Two different Person resources cannot have the same EID.\n-\n-1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n-\n-## Links\n-\n-1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n-\n-1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n-\n-1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n-\n-1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n-\n-### Possible rule match outcomes:\n-\n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n-\n-* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n-\n-* CASE 2: All of the MATCHED Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCHED.\n-\n-* CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n-\n-* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, empi-link records are created with POSSIBLE_MATCH outcome and await manual assignment to either NO_MATCH or MATCHED.  Person resources are not changed.\n-\n-# Rules\n-\n-HAPI EMPI rules are managed via a single json document.  This document contains a version.  empi-links derived from these rules are marked with this version.  The following configuration is stored in the rules:\n-\n-* **resourceSearchParams**: These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"birthdate\"\n-}, {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"identifier\"\n-} ]\n-```\n-\n-* **filterSearchParams** When searching for match candidates, only resources that match this filter are considered.  E.g. you may wish to only search for Patients for which active=true.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"active\",\n-    \"fixedValue\" : \"true\"\n-} ]\n-```\n-\n-* **matchFields** Once the match candidates have been found, they are then each assigned a match vector that marks which fields match.  The match vector is determined by a list of matchFields.  Each matchField defines a name, distance metric, a success threshold, a resource type, and resource path to check. For example:\n-```json\n-{\n-    \"name\" : \"given-name-cosine\",\n-    \"resourceType\" : \"Patient\",\n-    \"resourcePath\" : \"name.given\",\n-    \"metric\" : \"COSINE\",\n-    \"matchThreshold\" : 0.8\n-}\n-```\n+A complete working example of HAPI EMPI can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n \n-Note that in all the above json, valid options for `resourceType` are `Patient`, `Practitioner`, and `All`. Use `All` if the criteria is identical across both resource types, and you would like to apply the pre-search to both practitioners and patients.\n+## Overview\n \n-The following metrics are currently supported:\n-* JARO_WINKLER\n-* COSINE\n-* JACCARD\n-* NORMALIZED_LEVENSCHTEIN\n-* SORENSEN_DICE\n-* STANDARD_NAME_ANY_ORDER\n-* EXACT_NAME_ANY_ORDER\n-* STANDARD_NAME_FIRST_AND_LAST\n-* EXACT_NAME_FIRST_AND_LAST\n+To get up and running with HAPI EMPI, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#empi-settings].  \n \n-See [java-string-similarity](https://github.com/tdebatty/java-string-similarity) for a description of the first five metrics.  For the last four, STANDARd means ignore case and accents whereas EXACT must match casing and accents exactly.  Name any order matches first and last names irrespective of order, whereas FIRST_AND_LAST metrics require the name match to be in order.\n+Once EMPI is enabled, the next thing you will want to do is configure your [EMPI Rules](/hapi-fhir/docs/server_jpa_empi/empi_rules.html)\n \n-* **matchResultMap** A map which converts combinations of successful matchFields into an EMPI Match Result score for overall matching of a given pair of resources.\n+HAPI EMPI watches for incoming Patient resources and automatically links them to Person resources based on these rules.  For example, if the rules indicate that any two patients with the same ssn, birthdate and first and last name are the same person, then two different Patient resources with matching values for these attributes will automatically be linked to the same Person resource.  If no existing resources match the incoming Patient, then a new Person resource will be created and linked to the incoming Patient.\n \n-```json\n-\"matchResultMap\" : {\n-    \"given-name-cosine\" : \"POSSIBLE_MATCH\",\n-    \"given-name-jaro, last-name-jaro\" : \"MATCH\"\n-}\n-```\n+Based on how well two patients match, the EMPI Rules may link the Patient to the Person as a MATCH or a POSSIBLE_MATCH.  In the case of a POSSIBLE_MATCH, a user will need to later use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either confirm the link as a MATCH, or mark the link as a NO_MATCH in which case HAPI EMPI will create a new Person for them.\n \n-* **eidSystem**: The external EID system that the HAPI EMPI system should expect to see on incoming Patient resources. Must be a valid URI.\n+Another thing that can happen in the linking process is HAPI EMPI can determine that two Person resources may be duplicates.  In this case, it marks them as POSSIBLE_DUPLICATE and the user can use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either merge the two Persons or mark them as NO_MATCH in which case HAPI EMPI will know not to mark them as possible duplicates in the future.\n \n-# Enterprise Identifiers\n+HAPI EMPI keeps track of which links were automatically established vs manually verified.  Manual links always take precedence over automatic links.  Once a link for a patient has been manually verified, HAPI EMPI won't touch it.\n \n-An Enterprise Identifier(EID) is a unique identifier that can be attached to Patients or Practitioners. Each implementation is expected to use exactly one EID system for incoming resources, \n-defined in the mentioned `empi-rules.json` file. If a Patient or Practitioner with a valid EID is added to the system, that EID will be copied over to the Person that was matched. In the case that \n-the incoming Patient or Practitioner had no EID assigned, an internal EID will be created for it. There are thus two classes of EID. Internal EIDs, created by HAPI-EMPI, and External EIDs, provided \n-by the install. \n+## EMPI Settings\n \n-There are many edge cases for determining what will happen in merge and update scenarios, which will be provided in future documentation.\n-    \n-    \n-# HAPI EMPI Technical Details\n+Follow these steps to enable EMPI on the server:\n \n-When EMPI is enabled, the HAPI FHIR JPA Server does the following things on startup:\n+The [EmpiSettings](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html) bean contains configuration settings related to EMPI within the server. To enable Empi, the [setEnabled(boolean)](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html#setEnabled(boolean)) property should be enabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzUwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See [EMPI EID Settings](/hapi-fhir/docs/server_jpa_empi/empi_eid.html#empi-eid-settings) for a description of the eid related settings.\n          \n          \n            \n            See [EMPI EID Settings](/hapi-fhir/docs/server_jpa_empi/empi_eid.html#empi-eid-settings) for a description of the EID-related settings.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439497501", "createdAt": "2020-06-12T15:44:52Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md", "diffHunk": "@@ -1,158 +1,37 @@\n-# Enterprise Master Person Index (EMPI)\n+# EMPI Getting Started\n \n-HAPI FHIR 5.0.0 introduced preliminary support for **EMPI**.\n+## Introduction\n+\n+HAPI FHIR 5.1.0 introduces preliminary support for **EMPI**.\n \n An EMPI allows for links to be created and maintained between different Patient and/or Practitioner resources. These links are used to indicate the fact that different Patient/Practitioner resources are known or believed to refer to the same actual (real world) person.\n \n-These links may be created and updated using different combinations of automatic linking as well as manual linking.\n+These links may be created and updated using different combinations of automatic linking and manual linking.\n \n-Note: The following sections describe linking between Patient and Person resources. The same information applies for linking between Practitioner and Person, but for readability it is not repeated.\n+Note: This documentation describes EMPI for Patient resources. The same information applies for Practitioner resources.  You can substitute \"Practitioner\" for \"Patient\" anywhere it appears in this documentation.\n \n ## Working Example\n \n-The [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project contains a complete working example of the HAPI EMPI feature and documentation about how to enable and configure it. You may wish to browse its source to see how this works.\n-\n-## Person linking in FHIR\n-\n-Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n-\n-<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n-\n-There are several resources that are used:\n-\n-* Patient - Represents the record of a person who receives healthcare services\n-* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n-\n-# Automatic Linking\n-\n-With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n-\n-In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n-\n-This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n-\n-## Design Principles\n-\n-Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n-\n-1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n-\n-1. Every Patient in the system has a MATCH link to at most one Person resource.\n-\n-1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n-\n-1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n-\n-1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n-\n-1. Two different Person resources cannot have the same EID.\n-\n-1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n-\n-## Links\n-\n-1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n-\n-1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n-\n-1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n-\n-1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n-\n-### Possible rule match outcomes:\n-\n-When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n-\n-* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n-\n-* CASE 2: All of the MATCHED Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCHED.\n-\n-* CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n-\n-* CASE 4: Only POSSIBLE_MATCH outcomes -> In this case, empi-link records are created with POSSIBLE_MATCH outcome and await manual assignment to either NO_MATCH or MATCHED.  Person resources are not changed.\n-\n-# Rules\n-\n-HAPI EMPI rules are managed via a single json document.  This document contains a version.  empi-links derived from these rules are marked with this version.  The following configuration is stored in the rules:\n-\n-* **resourceSearchParams**: These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"birthdate\"\n-}, {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"identifier\"\n-} ]\n-```\n-\n-* **filterSearchParams** When searching for match candidates, only resources that match this filter are considered.  E.g. you may wish to only search for Patients for which active=true.\n-```json\n-[ {\n-    \"resourceType\" : \"Patient\",\n-    \"searchParam\" : \"active\",\n-    \"fixedValue\" : \"true\"\n-} ]\n-```\n-\n-* **matchFields** Once the match candidates have been found, they are then each assigned a match vector that marks which fields match.  The match vector is determined by a list of matchFields.  Each matchField defines a name, distance metric, a success threshold, a resource type, and resource path to check. For example:\n-```json\n-{\n-    \"name\" : \"given-name-cosine\",\n-    \"resourceType\" : \"Patient\",\n-    \"resourcePath\" : \"name.given\",\n-    \"metric\" : \"COSINE\",\n-    \"matchThreshold\" : 0.8\n-}\n-```\n+A complete working example of HAPI EMPI can be found in the [JPA Server Starter](/hapi-fhir/docs/server_jpa/get_started.html) project. You may wish to browse its source to see how it is set up.\n \n-Note that in all the above json, valid options for `resourceType` are `Patient`, `Practitioner`, and `All`. Use `All` if the criteria is identical across both resource types, and you would like to apply the pre-search to both practitioners and patients.\n+## Overview\n \n-The following metrics are currently supported:\n-* JARO_WINKLER\n-* COSINE\n-* JACCARD\n-* NORMALIZED_LEVENSCHTEIN\n-* SORENSEN_DICE\n-* STANDARD_NAME_ANY_ORDER\n-* EXACT_NAME_ANY_ORDER\n-* STANDARD_NAME_FIRST_AND_LAST\n-* EXACT_NAME_FIRST_AND_LAST\n+To get up and running with HAPI EMPI, either enable it using the `hapi.properties` file in the JPA Server Starter, or follow the instructions below to (enable it in HAPI FHIR directly)[#empi-settings].  \n \n-See [java-string-similarity](https://github.com/tdebatty/java-string-similarity) for a description of the first five metrics.  For the last four, STANDARd means ignore case and accents whereas EXACT must match casing and accents exactly.  Name any order matches first and last names irrespective of order, whereas FIRST_AND_LAST metrics require the name match to be in order.\n+Once EMPI is enabled, the next thing you will want to do is configure your [EMPI Rules](/hapi-fhir/docs/server_jpa_empi/empi_rules.html)\n \n-* **matchResultMap** A map which converts combinations of successful matchFields into an EMPI Match Result score for overall matching of a given pair of resources.\n+HAPI EMPI watches for incoming Patient resources and automatically links them to Person resources based on these rules.  For example, if the rules indicate that any two patients with the same ssn, birthdate and first and last name are the same person, then two different Patient resources with matching values for these attributes will automatically be linked to the same Person resource.  If no existing resources match the incoming Patient, then a new Person resource will be created and linked to the incoming Patient.\n \n-```json\n-\"matchResultMap\" : {\n-    \"given-name-cosine\" : \"POSSIBLE_MATCH\",\n-    \"given-name-jaro, last-name-jaro\" : \"MATCH\"\n-}\n-```\n+Based on how well two patients match, the EMPI Rules may link the Patient to the Person as a MATCH or a POSSIBLE_MATCH.  In the case of a POSSIBLE_MATCH, a user will need to later use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either confirm the link as a MATCH, or mark the link as a NO_MATCH in which case HAPI EMPI will create a new Person for them.\n \n-* **eidSystem**: The external EID system that the HAPI EMPI system should expect to see on incoming Patient resources. Must be a valid URI.\n+Another thing that can happen in the linking process is HAPI EMPI can determine that two Person resources may be duplicates.  In this case, it marks them as POSSIBLE_DUPLICATE and the user can use [EMPI Operations](/hapi-fhir/docs/server_jpa_empi/empi_operations.html) to either merge the two Persons or mark them as NO_MATCH in which case HAPI EMPI will know not to mark them as possible duplicates in the future.\n \n-# Enterprise Identifiers\n+HAPI EMPI keeps track of which links were automatically established vs manually verified.  Manual links always take precedence over automatic links.  Once a link for a patient has been manually verified, HAPI EMPI won't touch it.\n \n-An Enterprise Identifier(EID) is a unique identifier that can be attached to Patients or Practitioners. Each implementation is expected to use exactly one EID system for incoming resources, \n-defined in the mentioned `empi-rules.json` file. If a Patient or Practitioner with a valid EID is added to the system, that EID will be copied over to the Person that was matched. In the case that \n-the incoming Patient or Practitioner had no EID assigned, an internal EID will be created for it. There are thus two classes of EID. Internal EIDs, created by HAPI-EMPI, and External EIDs, provided \n-by the install. \n+## EMPI Settings\n \n-There are many edge cases for determining what will happen in merge and update scenarios, which will be provided in future documentation.\n-    \n-    \n-# HAPI EMPI Technical Details\n+Follow these steps to enable EMPI on the server:\n \n-When EMPI is enabled, the HAPI FHIR JPA Server does the following things on startup:\n+The [EmpiSettings](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html) bean contains configuration settings related to EMPI within the server. To enable Empi, the [setEnabled(boolean)](/hapi-fhir/apidocs/hapi-fhir-server-empi/ca/uhn/fhir/empi/rules/config/EmpiSettings.html#setEnabled(boolean)) property should be enabled.\n \n-1. HAPI EMPI stores the extra link details in a table called `MPI_LINK`.\n-1. Each record in an `MPI_LINK` table corresponds to a `link.target` entry on a Person resource.  HAPI EMPI uses the following convention for the Person.link.assurance level:\n-    1. Level 1: not used\n-    1. Level 2: POSSIBLE_MATCH\n-    1. Level 3: AUTO MATCHED\n-    1. Level 4: MANUAL MATCHED\n-1. It enables the MESSAGE subscription type and starts up the internal subscription engine.\n-1. It creates two MESSAGE subscriptions, called 'empi-patient' and 'empi-practitioner' that match all incoming Patient and Practitioner resources and send them to an internal queue called \"empi\".  The JPA Server listens to this queue and links incoming resources to Persons.\n-1. It registers the `Patient/$match` operation.  See [$match](https://www.hl7.org/fhir/operation-patient-match.html) for a description of this operation.\n-1. It registers a new dao interceptor that restricts access to EMPI managed Person records.\n+See [EMPI EID Settings](/hapi-fhir/docs/server_jpa_empi/empi_eid.html#empi-eid-settings) for a description of the eid related settings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDIzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n          \n          \n            \n            This automatic linking is done via configurable matching rules that create links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439500234", "createdAt": "2020-06-12T15:49:55Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMzg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n          \n          \n            \n            1. When a new Patient resource is created/updated it is then compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439503885", "createdAt": "2020-06-12T15:56:35Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwNDUxNg==", "bodyText": "Now that I'm reading this a bunch it strikes me as odd that that we use NO_MATCH (descriptive), POSSIBLE_MATCH(descriptive), MATCHED(past tense). It would probably be a huge pain to change now but is there a reason that we didn't pick MATCH", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439504516", "createdAt": "2020-06-12T15:57:50Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwNDg1MQ==", "bodyText": "May be worthwhile to drop a link to the FHIR docs for Person.link here", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439504851", "createdAt": "2020-06-12T15:58:32Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n+\n+1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwNTU2MA==", "bodyText": "This is not necessarily true I think. Consider the NO_MATCH scenario. There is no related link.target on a person for NO_MATCH, and same for possible duplicate. (or am I wrong and we do add the links in these cases? If memory serves, we only add links for MATCHED, POSSIBLE_MATCH)", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439505560", "createdAt": "2020-06-12T15:59:54Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n+\n+1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n+\n+1. HAPI EMPI stores these extra link details in a table called `MPI_LINK`.\n+\n+1. Each record in an `MPI_LINK` table corresponds to a `link.target` entry on a Person resource.  HAPI EMPI uses the following convention for the Person.link.assurance level:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyOTk1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n          \n          \n            \n            * CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCH.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439529953", "createdAt": "2020-06-12T16:44:03Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n+\n+1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n+\n+1. HAPI EMPI stores these extra link details in a table called `MPI_LINK`.\n+\n+1. Each record in an `MPI_LINK` table corresponds to a `link.target` entry on a Person resource.  HAPI EMPI uses the following convention for the Person.link.assurance level:\n+    1. Level 1: not used\n+    1. Level 2: POSSIBLE_MATCH\n+    1. Level 3: AUTO MATCHED\n+    1. Level 4: MANUAL MATCHED\n+\n+### Possible rule match outcomes:\n+\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+\n+* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n+\n+* CASE 2: All of the MATCHED Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCHED.\n+\n+* CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMDAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n          \n          \n            \n            * CASE 1: No MATCHED and no POSSIBLE_MATCH outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439530031", "createdAt": "2020-06-12T16:44:12Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n+\n+1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n+\n+1. HAPI EMPI stores these extra link details in a table called `MPI_LINK`.\n+\n+1. Each record in an `MPI_LINK` table corresponds to a `link.target` entry on a Person resource.  HAPI EMPI uses the following convention for the Person.link.assurance level:\n+    1. Level 1: not used\n+    1. Level 2: POSSIBLE_MATCH\n+    1. Level 3: AUTO MATCHED\n+    1. Level 4: MANUAL MATCHED\n+\n+### Possible rule match outcomes:\n+\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+\n+* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMDIxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.\n          \n          \n            \n            * CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCH.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439530213", "createdAt": "2020-06-12T16:44:33Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# EMPI Implementation Details\n+\n+This section describes details of how EMPI functionality is implemented in HAPI FHIR.\n+\n+## Person linking in FHIR\n+\n+Because HAPI EMPI is implemented on the HAPI JPA Server, it uses the FHIR model to represent roles and links. The following illustration shows an example of how these links work.\n+\n+<a href=\"/hapi-fhir/docs/images/empi-links.svg\"><img src=\"/hapi-fhir/docs/images/empi-links.svg\" alt=\"EMPI links\" style=\"margin-left: 15px; margin-bottom: 15px; width: 500px;\" /></a>\n+\n+There are several resources that are used:\n+\n+* Patient - Represents the record of a person who receives healthcare services\n+* Person - Represents a master record with links to one or more Patient and/or Practitioner resources that belong to the same person\n+\n+# Automatic Linking\n+\n+With EMPI enabled, the basic default behavior of the EMPI is simply to create a new Person record for every Patient that is created such that there is a 1:1 relationship between them. Any relinking is then expected to be done manually (i.e. via the forthcoming empi operations).\n+\n+In a typical configuration it is often desirable to have links be created automatically using matching rules. For example, you might decide that if a Patient shares the same name, gender, and date of birth as another Patient, you have at least a little confidence that they are the same Person.\n+\n+This automatic linking is done via configurable matching rules that create a links between Patients and Persons.  Based on the strength of the match configured in these rules, the link will be set to either POSSIBLE_MATCH or MATCHED.\n+\n+## Design\n+\n+Below are some simplifying principles HAPI EMPI enforces to reduce complexity and ensure data integrity.\n+\n+1. When EMPI is enabled on a HAPI FHIR server, any Person resource in the repository that has the \"hapi-empi\" tag is considered read-only via the FHIR endpoint.  These Person resources are managed exclusively by HAPI EMPI.  Users can only directly change them via special empi operations.  In most cases, users will indirectly change them by creating and updating Patient and Practitioner (\"Patient\") resources.  For the rest of this document, assume \"Person\" refers to a \"hapi-empi\" tagged Person resource.\n+\n+1. Every Patient in the system has a MATCH link to at most one Person resource.\n+\n+1. Every Patient resource in the system has a MATCH link to a Person resource unless that Patient has the \"no-empi\" tag or it has POSSIBLE_MATCH links pending review.\n+\n+1. The HAPI EMPI rules define a single identifier system that holds the external enterprise id (\"EID\").  If a Patient has an external EID, then the Person it links to always has the same EID. If a patient has no EID when it arrives, the person created from this patient is given an internal EID.\n+\n+1. A Person can have both an internal EID(auto-created by HAPI), and an external EID (provided by an external system).\n+\n+1. Two different Person resources cannot have the same EID.\n+\n+1. Patient resources are only ever compared to Person resources via this EID.  For all other matches, Patient resources are only ever compared to Patient resources and Practitioner resources are only ever compared to Practitioner resources.\n+\n+## Links\n+\n+1. HAPI EMPI manages empi-link records (\"links\") that link a Patient resource to a Person resource.  When these are created/updated by matching rules, the links are marked as AUTO.  When these links are changed manually, they are marked as MANUAL.\n+\n+1. Once a link has been manually assigned as NO_MATCH or MATCHED, the system will not change it.\n+\n+1. When a new Patient resource is created/updated then it is compared to all other Patient resources in the repository.  The outcome of each of these comparisons is either NO_MATCH, POSSIBLE_MATCH or MATCHED.\n+\n+1. Whenever a MATCHED link is established between a Patient resource and a Person resource, that Patient is always added to that Person resource links.  All MATCHED links have corresponding Person resource links and all Person resource links have corresponding MATCHED empi-link records.  You can think of the fields of the empi-link records as extra meta-data associated with each Person.link.target.\n+\n+1. HAPI EMPI stores these extra link details in a table called `MPI_LINK`.\n+\n+1. Each record in an `MPI_LINK` table corresponds to a `link.target` entry on a Person resource.  HAPI EMPI uses the following convention for the Person.link.assurance level:\n+    1. Level 1: not used\n+    1. Level 2: POSSIBLE_MATCH\n+    1. Level 3: AUTO MATCHED\n+    1. Level 4: MANUAL MATCHED\n+\n+### Possible rule match outcomes:\n+\n+When a new Patient resource is compared with all other resources of that type in the repository, there are four possible cases:\n+\n+* CASE 1: No MATCHED and no POSSIBLE_MATCHED outcomes -> a new Person resource is created and linked to that Patient as MATCHED.  All fields are copied from the Patient to the Person.  If the incoming resource has an EID, it is copied to the Person.  Otherwise a new UUID is created and used as the internal EID.\n+\n+* CASE 2: All of the MATCHED Patient resources are already linked to the same Person -> a new Link is created between the new Patient and that Person and is set to MATCHED.\n+\n+* CASE 3: The MATCHED Patient resources link to more than one Person -> Mark all links as POSSIBLE_MATCHED.  All other Person resources are marked as POSSIBLE_DUPLICATE of this first Person.  These duplicates are manually reviewed later and either merged or marked as NO_MATCH and the system will no longer consider them as a POSSIBLE_DUPLICATE going forward. POSSIBLE_DUPLICATE is the only link type that can have a Person as both the source and target of the link.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNTM1OQ==", "bodyText": "We should probably say what the filename is", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439535359", "createdAt": "2020-06-12T16:54:57Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -0,0 +1,265 @@\n+# Rules\n+\n+HAPI EMPI rules are managed via a single json document.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzODU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **matchFields** Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField return `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of metrics: `Matcher` and `Similarity`.  Matcher metrics return a `true` or `false` directly, whereas Similarity metrics return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.\n          \n          \n            \n            * **matchFields** Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField returns `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of metrics: `Matcher` and `Similarity`.  Matcher metrics return a `true` or `false` directly, whereas Similarity metrics return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439538558", "createdAt": "2020-06-12T17:01:10Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md", "diffHunk": "@@ -0,0 +1,265 @@\n+# Rules\n+\n+HAPI EMPI rules are managed via a single json document.\n+\n+Note that in all the following configuration, valid options for `resourceType` are `Patient`, `Practitioner`, and `*`. Use `*` if the criteria is identical across both resource types, and you would like to apply it to both practitioners and patients.\n+\n+Here is an example of a full HAPI EMPI rules json document:\n+\n+```json\n+{\n+\t\"candidateSearchParams\": [\n+\t\t{\n+\t\t\t\"resourceType\": \"Patient\",\n+\t\t\t\"searchParam\": \"birthdate\"\n+\t\t},\n+\t\t{\n+\t\t\t\"resourceType\": \"*\",\n+\t\t\t\"searchParam\": \"identifier\"\n+\t\t},\n+\t\t{\n+\t\t\t\"resourceType\": \"Patient\",\n+\t\t\t\"searchParam\": \"general-practitioner\"\n+\t\t}\n+\t],\n+\t\"candidateFilterSearchParams\": [\n+\t\t{\n+\t\t\t\"resourceType\": \"*\",\n+\t\t\t\"searchParam\": \"active\",\n+\t\t\t\"fixedValue\": \"true\"\n+\t\t}\n+\t],\n+\t\"matchFields\": [\n+\t\t{\n+\t\t\t\"name\": \"cosine-given-name\",\n+\t\t\t\"resourceType\": \"*\",\n+\t\t\t\"resourcePath\": \"name.given\",\n+\t\t\t\"metric\": \"COSINE\",\n+\t\t\t\"matchThreshold\": 0.8,\n+\t\t\t\"exact\": true\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"jaro-last-name\",\n+\t\t\t\"resourceType\": \"*\",\n+\t\t\t\"resourcePath\": \"name.family\",\n+\t\t\t\"metric\": \"JARO_WINKLER\",\n+\t\t\t\"matchThreshold\": 0.8\n+\t\t}\n+\t],\n+\t\"matchResultMap\": {\n+\t\t\"cosine-given-name\" : \"POSSIBLE_MATCH\",\n+\t\t\"cosine-given-name,jaro-last-name\" : \"MATCH\"\n+\t},\n+\t\"eidSystem\": \"http://company.io/fhir/NamingSystem/custom-eid-system\"\n+}\n+```\n+\n+Here is a description of how each section of this document is configured.\n+\n+* **candidateSearchParams**: These define fields which must have at least one exact match before two resources are considered for matching.  This is like a list of \"pre-searches\" that find potential candidates for matches, to avoid the expensive operation of running a match score calculation on all resources in the system.  E.g. you may only wish to consider matching two Patients if they either share at least one identifier in common or have the same birthday.  The HAPI FHIR server executes each of these searches separately and then takes the union of the results, so you can think of these as `OR` criteria that cast a wide net for potential candidates.  In some EMPI systems, these \"pre-searches\" are called \"blocking\" searches (since they identify \"blocks\" of candidates that will be searched for matches).\n+```json\n+[ {\n+    \"resourceType\" : \"Patient\",\n+    \"searchParam\" : \"birthdate\"\n+}, {\n+    \"resourceType\" : \"Patient\",\n+    \"searchParam\" : \"identifier\"\n+} ]\n+```\n+\n+* **candidateFilterSearchParams** When searching for match candidates, only resources that match this filter are considered.  E.g. you may wish to only search for Patients for which active=true.  Another way to think of these filters is all of them are \"AND\"ed with each candidateSearchParam above.\n+```json\n+[ {\n+    \"resourceType\" : \"Patient\",\n+    \"searchParam\" : \"active\",\n+    \"fixedValue\" : \"true\"\n+} ]\n+```\n+\n+* **matchFields** Once the match candidates have been found, they are then each compared to the incoming Patient resource.  This comparison is made across a list of `matchField`s.  Each matchField return `true` or `false` indicating whether the candidate and the incoming Patient match on that field.   There are two types of metrics: `Matcher` and `Similarity`.  Matcher metrics return a `true` or `false` directly, whereas Similarity metrics return a score between 0.0 (no match) and 1.0 (exact match) and this score is translated to a `true/false` via a `matchThreshold`.  E.g. if a `JARO_WINKLER` matchField is configured with a `matchThreshold` of 0.8 then that matchField will return `true` if the `JARO_WINKLER` similarity evaluates to a score >= 8.0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MDczMw==", "bodyText": "What does removing this mean exactly?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439540733", "createdAt": "2020-06-12T17:05:43Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-empi/src/test/resources/logback-test.xml", "diffHunk": "@@ -59,7 +59,7 @@\n \t\t\t<maxFileSize>5MB</maxFileSize>\n \t\t</triggeringPolicy>\n \t\t<encoder>\n-\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n${log.stackfilter.pattern}</pattern>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTE0NA==", "bodyText": "Can we constant * out to a constant called ALL_EMPI_RESOURCE_TYPES or something?", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439541144", "createdAt": "2020-06-12T17:06:31Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -21,20 +21,141 @@\n  */\n \n import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.rules.json.EmpiFieldMatchJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiFilterSearchParamJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiResourceSearchParamJson;\n import ca.uhn.fhir.empi.rules.json.EmpiRulesJson;\n+import ca.uhn.fhir.parser.DataFormatException;\n+import ca.uhn.fhir.rest.server.util.ISearchParamRetriever;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.HashSet;\n+import java.util.Set;\n \n @Service\n public class EmpiRuleValidator {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiRuleValidator.class);\n+\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final ISearchParamRetriever mySearchParamRetriever;\n+\tprivate final Class<? extends IBaseResource> myPatientClass;\n+\tprivate final Class<? extends IBaseResource> myPractitionerClass;\n+\tprivate final FhirTerser myTerser;\n+\n+\t@Autowired\n+\tpublic EmpiRuleValidator(FhirContext theFhirContext, ISearchParamRetriever theSearchParamRetriever) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyPatientClass = theFhirContext.getResourceDefinition(\"Patient\").getImplementingClass();\n+\t\tmyPractitionerClass = theFhirContext.getResourceDefinition(\"Practitioner\").getImplementingClass();\n+\t\tmyTerser = myFhirContext.newTerser();\n+\t\tmySearchParamRetriever = theSearchParamRetriever;\n+\t}\n \n \tpublic void validate(EmpiRulesJson theEmpiRulesJson) {\n+\t\tvalidateSearchParams(theEmpiRulesJson);\n+\t\tvalidateMatchFields(theEmpiRulesJson);\n \t\tvalidateSystemIsUri(theEmpiRulesJson);\n \t}\n \n+\tprivate void validateSearchParams(EmpiRulesJson theEmpiRulesJson) {\n+\t\tfor (EmpiResourceSearchParamJson searchParam : theEmpiRulesJson.getCandidateSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateSearchParams\", searchParam.getResourceType(), searchParam.getSearchParam());\n+\t\t}\n+\t\tfor (EmpiFilterSearchParamJson filter : theEmpiRulesJson.getCandidateFilterSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateFilterSearchParams\", filter.getResourceType(), filter.getSearchParam());\n+\t\t}\n+\t}\n+\n+\tprivate void validateSearchParam(String theFieldName, String theTheResourceType, String theTheSearchParam) {\n+\t\tif (\"*\".equals(theTheResourceType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MTQxNQ==", "bodyText": "Nice, this is a good idea \ud83d\udc4d", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439541415", "createdAt": "2020-06-12T17:07:02Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/config/EmpiRuleValidator.java", "diffHunk": "@@ -21,20 +21,141 @@\n  */\n \n import ca.uhn.fhir.context.ConfigurationException;\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.empi.rules.json.EmpiFieldMatchJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiFilterSearchParamJson;\n+import ca.uhn.fhir.empi.rules.json.EmpiResourceSearchParamJson;\n import ca.uhn.fhir.empi.rules.json.EmpiRulesJson;\n+import ca.uhn.fhir.parser.DataFormatException;\n+import ca.uhn.fhir.rest.server.util.ISearchParamRetriever;\n+import ca.uhn.fhir.util.FhirTerser;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.util.HashSet;\n+import java.util.Set;\n \n @Service\n public class EmpiRuleValidator {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(EmpiRuleValidator.class);\n+\n+\tprivate final FhirContext myFhirContext;\n+\tprivate final ISearchParamRetriever mySearchParamRetriever;\n+\tprivate final Class<? extends IBaseResource> myPatientClass;\n+\tprivate final Class<? extends IBaseResource> myPractitionerClass;\n+\tprivate final FhirTerser myTerser;\n+\n+\t@Autowired\n+\tpublic EmpiRuleValidator(FhirContext theFhirContext, ISearchParamRetriever theSearchParamRetriever) {\n+\t\tmyFhirContext = theFhirContext;\n+\t\tmyPatientClass = theFhirContext.getResourceDefinition(\"Patient\").getImplementingClass();\n+\t\tmyPractitionerClass = theFhirContext.getResourceDefinition(\"Practitioner\").getImplementingClass();\n+\t\tmyTerser = myFhirContext.newTerser();\n+\t\tmySearchParamRetriever = theSearchParamRetriever;\n+\t}\n \n \tpublic void validate(EmpiRulesJson theEmpiRulesJson) {\n+\t\tvalidateSearchParams(theEmpiRulesJson);\n+\t\tvalidateMatchFields(theEmpiRulesJson);\n \t\tvalidateSystemIsUri(theEmpiRulesJson);\n \t}\n \n+\tprivate void validateSearchParams(EmpiRulesJson theEmpiRulesJson) {\n+\t\tfor (EmpiResourceSearchParamJson searchParam : theEmpiRulesJson.getCandidateSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateSearchParams\", searchParam.getResourceType(), searchParam.getSearchParam());\n+\t\t}\n+\t\tfor (EmpiFilterSearchParamJson filter : theEmpiRulesJson.getCandidateFilterSearchParams()) {\n+\t\t\tvalidateSearchParam(\"candidateFilterSearchParams\", filter.getResourceType(), filter.getSearchParam());\n+\t\t}\n+\t}\n+\n+\tprivate void validateSearchParam(String theFieldName, String theTheResourceType, String theTheSearchParam) {\n+\t\tif (\"*\".equals(theTheResourceType)) {\n+\t\t\tvalidateResourceSearchParam(theFieldName, \"Patient\", theTheSearchParam);\n+\t\t\tvalidateResourceSearchParam(theFieldName, \"Practitioner\", theTheSearchParam);\n+\t\t} else {\n+\t\t\tvalidateResourceSearchParam(theFieldName, theTheResourceType, theTheSearchParam);\n+\t\t}\n+\t}\n+\n+\tprivate void validateResourceSearchParam(String theFieldName, String theResourceType, String theSearchParam) {\n+\t\tif (mySearchParamRetriever.getActiveSearchParam(theResourceType, theSearchParam) == null) {\n+\t\t\tthrow new ConfigurationException(\"Error in \" + theFieldName + \": \" + theResourceType + \" does not have a search parameter called '\" + theSearchParam + \"'\");\n+\t\t}\n+\t}\n+\n+\tprivate void validateMatchFields(EmpiRulesJson theEmpiRulesJson) {\n+\t\tSet<String> names = new HashSet<>();\n+\t\tfor (EmpiFieldMatchJson fieldMatch : theEmpiRulesJson.getMatchFields()) {\n+\t\t\tif (names.contains(fieldMatch.getName())) {\n+\t\t\t\tthrow new ConfigurationException(\"Two MatchFields have the same name '\" + fieldMatch.getName() + \"'\");\n+\t\t\t}\n+\t\t\tnames.add(fieldMatch.getName());\n+\t\t\tvalidateThreshold(fieldMatch);\n+\t\t\tvalidatePath(fieldMatch);\n+\t\t}\n+\t}\n+\n+\tprivate void validateThreshold(EmpiFieldMatchJson theFieldMatch) {\n+\t\tif (theFieldMatch.getMetric().isSimilarity()) {\n+\t\t\tif (theFieldMatch.getMatchThreshold() == null) {\n+\t\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" requires a matchThreshold\");\n+\t\t\t}\n+\t\t} else if (theFieldMatch.getMatchThreshold() != null) {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" metric \" + theFieldMatch.getMetric() + \" should not have a matchThreshold\");\n+\t\t}\n+\t}\n+\n+\tprivate void validatePath(EmpiFieldMatchJson theFieldMatch) {\n+\t\tString resourceType = theFieldMatch.getResourceType();\n+\t\tif (\"*\".equals(resourceType)) {\n+\t\t\tvalidatePatientPath(theFieldMatch);\n+\t\t\tvalidatePractitionerPath(theFieldMatch);\n+\t\t} else if (\"Patient\".equals(resourceType)) {\n+\t\t\tvalidatePatientPath(theFieldMatch);\n+\t\t} else if (\"Practitioner\".equals(resourceType)) {\n+\t\t\tvalidatePractitionerPath(theFieldMatch);\n+\t\t} else {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" + theFieldMatch.getName() + \" has unknown resourceType \" + resourceType);\n+\t\t}\n+\t}\n+\n+\tprivate void validatePatientPath(EmpiFieldMatchJson theFieldMatch) {\n+\t\ttry {\n+\t\t\tmyTerser.getDefinition(myPatientClass, \"Patient.\" + theFieldMatch.getResourcePath());\n+\t\t} catch (DataFormatException|ConfigurationException e) {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" +\n+\t\t\t\ttheFieldMatch.getName() +\n+\t\t\t\t\" resourceType \" +\n+\t\t\t\ttheFieldMatch.getResourceType() +\n+\t\t\t\t\" has invalid path '\" + theFieldMatch.getResourcePath() + \"'.  \" +\n+\t\t\t\te.getMessage());\n+\t\t}\n+\t}\n+\n+\tprivate void validatePractitionerPath(EmpiFieldMatchJson theFieldMatch) {\n+\t\ttry {\n+\t\t\tmyTerser.getDefinition(myPractitionerClass, \"Practitioner.\" + theFieldMatch.getResourcePath());\n+\t\t} catch (DataFormatException e) {\n+\t\t\tthrow new ConfigurationException(\"MatchField \" +\n+\t\t\t\ttheFieldMatch.getName() +\n+\t\t\t\t\" resourceType \" +\n+\t\t\t\ttheFieldMatch.getResourceType() +\n+\t\t\t\t\" has invalid path '\" + theFieldMatch.getResourcePath() + \"'.  \" +\n+\t\t\t\te.getMessage());\n+\t\t}\n+\t}\n+\n \tprivate void validateSystemIsUri(EmpiRulesJson theEmpiRulesJson) {\n+\t\tif (theEmpiRulesJson.getEnterpriseEIDSystem() == null) {\n+\t\t\treturn;\n+\t\t}\n+\n \t\ttry {\n \t\t\tnew URI(theEmpiRulesJson.getEnterpriseEIDSystem());\n \t\t} catch (URISyntaxException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MjI4OQ==", "bodyText": "This will help in debugging", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439542289", "createdAt": "2020-06-12T17:09:01Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/json/EmpiRulesJson.java", "diffHunk": "@@ -142,6 +141,18 @@ public String getFieldMatchNamesForVector(long theVector) {\n \t\treturn myVectorMatchResultMap.getFieldMatchNames(theVector);\n \t}\n \n+\tpublic String getDetailedFieldMatchResultForUnmatchedVector(long theVector) {\n+\t\tList<String> fieldMatchResult = new ArrayList<>();\n+\t\tfor (int i = 0; i < myMatchFieldJsonList.size(); ++i) {\n+\t\t\tif ((theVector & (1 << i)) == 0) {\n+\t\t\t\tfieldMatchResult.add(myMatchFieldJsonList.get(i).getName() + \": NO\");\n+\t\t\t} else {\n+\t\t\t\tfieldMatchResult.add(myMatchFieldJsonList.get(i).getName() + \": YES\");\n+\t\t\t}\n+\t\t}\n+\t\treturn String.join(\"\\n\" ,fieldMatchResult);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NDA5NA==", "bodyText": "nitpick: I usually do Log formatting with {} instead of string concatenation", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439544094", "createdAt": "2020-06-12T17:12:49Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/main/java/ca/uhn/fhir/empi/rules/metric/matcher/StringEncoderMatcher.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package ca.uhn.fhir.empi.rules.metric.matcher;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class StringEncoderMatcher implements IEmpiStringMatcher {\n+\tprivate static final Logger ourLog = LoggerFactory.getLogger(StringEncoderMatcher.class);\n+\n+\tprivate final StringEncoder myStringEncoder;\n+\n+\tpublic StringEncoderMatcher(StringEncoder theStringEncoder) {\n+\t\tmyStringEncoder = theStringEncoder;\n+\t}\n+\n+\t@Override\n+\tpublic boolean matches(String theLeftString, String theRightString) {\n+\t\ttry {\n+\t\t\treturn myStringEncoder.encode(theLeftString).equals(myStringEncoder.encode(theRightString));\n+\t\t} catch (EncoderException e) {\n+\t\t\tourLog.error(\"Failed to match strings '\" + theLeftString + \"' and '\" + theRightString + \"' using encoder \" + myStringEncoder.getClass().getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTAyMw==", "bodyText": "BaseR4MatcherTest may be a better name", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439545023", "createdAt": "2020-06-12T17:14:48Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/metric/matcher/BaseMatcherTest.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package ca.uhn.fhir.empi.rules.metric.matcher;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+\n+public abstract class BaseMatcherTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0NTI1Mw==", "bodyText": "so cool", "url": "https://github.com/hapifhir/hapi-fhir/pull/1918#discussion_r439545253", "createdAt": "2020-06-12T17:15:17Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-server-empi/src/test/java/ca/uhn/fhir/empi/rules/metric/matcher/StringMatcherTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package ca.uhn.fhir.empi.rules.metric.matcher;\n+\n+import ca.uhn.fhir.empi.rules.metric.EmpiMetricEnum;\n+import org.hl7.fhir.r4.model.BooleanType;\n+import org.hl7.fhir.r4.model.DateType;\n+import org.hl7.fhir.r4.model.Enumeration;\n+import org.hl7.fhir.r4.model.Enumerations;\n+import org.hl7.fhir.r4.model.StringType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class StringMatcherTest extends BaseMatcherTest {\n+\t@Test\n+\tpublic void testMetaphone() {\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Durie\"), new StringType(\"dury\")));\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Balo\"), new StringType(\"ballo\")));\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Hans Peter\"), new StringType(\"Hanspeter\")));\n+\t\tassertTrue(match(EmpiMetricEnum.METAPHONE, new StringType(\"Lawson\"), new StringType(\"Law son\")));\n+\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Allsop\"), new StringType(\"Allsob\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Gevne\"), new StringType(\"Geve\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Bruce\"), new StringType(\"Bruch\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Smith\"), new StringType(\"Schmidt\")));\n+\t\tassertFalse(match(EmpiMetricEnum.METAPHONE, new StringType(\"Jyothi\"), new StringType(\"Jyoti\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42f4af1de1547183743e8b3d66e00eef53d4a67e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e026d156a3f0d5e188529250da815e68616062ee", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/e026d156a3f0d5e188529250da815e68616062ee", "committedDate": "2020-06-12T18:55:39Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c3f0dbe1f77ca7ee8dd32e95ba3b1fa877fc80", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/95c3f0dbe1f77ca7ee8dd32e95ba3b1fa877fc80", "committedDate": "2020-06-12T18:58:43Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679326bb62b82da740e0454cf628ca656159be67", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/679326bb62b82da740e0454cf628ca656159be67", "committedDate": "2020-06-12T18:59:15Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e270cc1f28db6576db5be693c13b5a6057076b", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/30e270cc1f28db6576db5be693c13b5a6057076b", "committedDate": "2020-06-12T19:00:14Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e19c76df9f9b31321f994edbbf35c7abfe97ff0", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/8e19c76df9f9b31321f994edbbf35c7abfe97ff0", "committedDate": "2020-06-12T19:00:56Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9851968a6bf73c2db7a6732eba28bf5e701c3244", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/9851968a6bf73c2db7a6732eba28bf5e701c3244", "committedDate": "2020-06-12T19:03:25Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b954ee3451e5de95ca1408ee01e5c0089363694d", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/b954ee3451e5de95ca1408ee01e5c0089363694d", "committedDate": "2020-06-12T19:03:54Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_details.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a282e74023aff8a10ecc652a15b9ef76b42b5892", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/a282e74023aff8a10ecc652a15b9ef76b42b5892", "committedDate": "2020-06-12T19:17:20Z", "message": "Update hapi-fhir-docs/src/main/resources/ca/uhn/hapi/fhir/docs/server_jpa_empi/empi_rules.md\n\nCo-authored-by: Tadgh <tadgh@cs.toronto.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73081eb554021114a3ab124ef8213866f3648d52", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/73081eb554021114a3ab124ef8213866f3648d52", "committedDate": "2020-06-13T00:53:46Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d6eaaab24310f9a220af586d9047611fddb640e", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/2d6eaaab24310f9a220af586d9047611fddb640e", "committedDate": "2020-06-13T18:02:18Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc7be2e93797e19922168b671542cd79946b1cdc", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/dc7be2e93797e19922168b671542cd79946b1cdc", "committedDate": "2020-06-13T18:03:35Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99315d4577d3eb5c65f26bd7d5c20deeaff30aad", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/99315d4577d3eb5c65f26bd7d5c20deeaff30aad", "committedDate": "2020-06-13T18:06:11Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149574c0d497bd00b20093a9e743a2226af5aae2", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/149574c0d497bd00b20093a9e743a2226af5aae2", "committedDate": "2020-06-13T18:19:07Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "957c5f9f1e3c162415640d54bdced32856393225", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/957c5f9f1e3c162415640d54bdced32856393225", "committedDate": "2020-06-13T18:22:33Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f7d131b14587c51c525aea55af6d19f5ab7c2cf", "author": {"user": {"login": "fil512", "name": "Ken Stevens"}}, "url": "https://github.com/hapifhir/hapi-fhir/commit/4f7d131b14587c51c525aea55af6d19f5ab7c2cf", "committedDate": "2020-06-14T19:36:51Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into empi-28-matchers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3954, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}