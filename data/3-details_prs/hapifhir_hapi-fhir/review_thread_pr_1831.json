{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTIzNzE5", "number": 1831, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1NToxMlrOD5cPYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1NToxMlrOD5cPYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTU4MTEzOnYy", "diffSide": "RIGHT", "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1NToxMlrOGQtY9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1NToxMlrOGQtY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NDA2OA==", "bodyText": "Heya james, I took a whack at refactoring this, since i didn't like how we were relying on nullity of a Boolean. How does this look? Is this the logic you were encapsulating? Tests seem to pass against it\n\tpublic static boolean tokenTextIndexingEnabledForSearchParam(ModelConfig theModelConfig, RuntimeSearchParam theSearchParam) {\n\t\tOptional<Boolean> oSuppressForSearchParam = theSearchParam.getExtensions(JpaConstants.EXT_SEARCHPARAM_TOKEN_SUPPRESS_TEXT_INDEXING).stream()\n\t\t\t.map(IBaseExtension::getValue)\n\t\t\t.map(val -> (IPrimitiveType<?>) val)\n\t\t\t.map(IPrimitiveType::getValueAsString)\n\t\t\t.map(Boolean::parseBoolean)\n\t\t\t.findFirst();\n\n\t\t//if the SP doesn't care, use the system default.\n\t\tif (!oSuppressForSearchParam.isPresent()) {\n\t\t\treturn !theModelConfig.isSuppressStringIndexingInTokens();\n\t\t//If the SP does care, use its value.\n\t\t} else {\n\t\t\tboolean suppressForSearchParam = oSuppressForSearchParam.get();\n\t\tourLog.trace(\"{} text indexing for SearchParameter {}\", suppressForSearchParam? \"Suppressing\": \"Not Suppressing\", theSearchParam.getName());\n\t\treturn !suppressForSearchParam;\n\t\t}\n\t}", "url": "https://github.com/hapifhir/hapi-fhir/pull/1831#discussion_r420174068", "createdAt": "2020-05-05T14:55:12Z", "author": {"login": "tadgh"}, "path": "hapi-fhir-jpaserver-searchparam/src/main/java/ca/uhn/fhir/jpa/searchparam/extractor/BaseSearchParamExtractor.java", "diffHunk": "@@ -1112,6 +1128,32 @@ public void extract(SearchParamSet<BaseResourceIndexedSearchParam> params, Runti\n \t\t}\n \t}\n \n+\tpublic static boolean tokenTextIndexingEnabledForSearchParam(ModelConfig theModelConfig, RuntimeSearchParam theSearchParam) {\n+\t\tBoolean suppressViaSearchParam = null;\n+\t\tList<IBaseExtension<?, ?>> suppressExt = theSearchParam.getExtensions(JpaConstants.EXT_SEARCHPARAM_TOKEN_SUPPRESS_TEXT_INDEXING);\n+\t\tif (suppressExt.size() > 0) {\n+\t\t\tIPrimitiveType<?> value = (IPrimitiveType<?>) suppressExt.get(0).getValue();\n+\t\t\tif (\"true\".equals(value.getValueAsString())) {\n+\t\t\t\tourLog.trace(\"Suppressing text indexing for SearchParameter {}\", theSearchParam.getName());\n+\t\t\t\tsuppressViaSearchParam = true;\n+\t\t\t} else if (\"false\".equals(value.getValueAsString())) {\n+\t\t\t\tourLog.trace(\"Not suppressing text indexing for SearchParameter {}\", theSearchParam.getName());\n+\t\t\t\tsuppressViaSearchParam = false;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (theModelConfig.isSuppressStringIndexingInTokens()) {\n+\t\t\tif (!Boolean.FALSE.equals(suppressViaSearchParam))\n+\t\t\t\treturn false;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190cac2b1c3971c7c9f0259f7a99b808a8d7fee4"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1959, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}