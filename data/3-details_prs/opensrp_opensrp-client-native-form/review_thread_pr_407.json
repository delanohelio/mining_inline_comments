{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMjc2NDUz", "number": 407, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowMDozM1rOEiZJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoxMToyMlrOE00t5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDk5MDgwOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowMDozM1rOHQPYgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo1MTowOFrOHljstg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTI5Nw==", "bodyText": "This validation logic may not be necessary after this merges #476.\nThis count can be retrieved from the count object.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486791297", "createdAt": "2020-09-11T06:00:33Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -130,13 +134,51 @@ protected void onPostExecute(List<View> result) {\n         }\n \n         try {\n-            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null);\n+            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null, widgetArgs.getStepName(), false);\n         } catch (Exception e) {\n             Timber.e(e);\n         }\n \n         hideProgressDialog();\n         doneButton.setImageResource(R.drawable.ic_done_green);\n+\n+        //for validation\n+        validationCleanUp();\n+\n+    }\n+\n+    private void validationCleanUp() {\n+        doneButton.setTag(R.id.is_repeating_group_generated, true);\n+\n+        LinearLayout referenceLayout = (LinearLayout) ((LinearLayout) parent).getChildAt(0);\n+        MaterialEditText materialEditText = (MaterialEditText) referenceLayout.getChildAt(0);\n+        materialEditText.setError(null);\n+\n+        widgetArgs.getFormFragment().getJsonApi().getAppExecutors().diskIO().execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JSONObject step = ((JsonApi) widgetArgs.getContext()).getmJSONObject().getJSONObject(widgetArgs.getStepName());\n+                    JSONArray fields = step.getJSONArray(FIELDS);\n+                    String key = widgetArgs.getJsonObject().optString(KEY);\n+                    for (int i = 0; i < fields.length(); i++) {\n+                        JSONObject object = fields.optJSONObject(i);\n+                        String fieldKey = object.optString(KEY);\n+                        if (fieldKey.equals(key)) {\n+                            String strNumOfRepeatedGroups = object.optString(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT);\n+                            int currentCount = numRepeatingGroups;\n+                            if (StringUtils.isNotBlank(strNumOfRepeatedGroups)) {\n+                                currentCount += Integer.parseInt(strNumOfRepeatedGroups);\n+                            }\n+                            object.put(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT, currentCount);\n+                            break;\n+                        }\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxMTQyOA==", "bodyText": "It is since #476 does not ensure the repeating group is actually created ... it only checks for text change", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486911428", "createdAt": "2020-09-11T09:32:39Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -130,13 +134,51 @@ protected void onPostExecute(List<View> result) {\n         }\n \n         try {\n-            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null);\n+            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null, widgetArgs.getStepName(), false);\n         } catch (Exception e) {\n             Timber.e(e);\n         }\n \n         hideProgressDialog();\n         doneButton.setImageResource(R.drawable.ic_done_green);\n+\n+        //for validation\n+        validationCleanUp();\n+\n+    }\n+\n+    private void validationCleanUp() {\n+        doneButton.setTag(R.id.is_repeating_group_generated, true);\n+\n+        LinearLayout referenceLayout = (LinearLayout) ((LinearLayout) parent).getChildAt(0);\n+        MaterialEditText materialEditText = (MaterialEditText) referenceLayout.getChildAt(0);\n+        materialEditText.setError(null);\n+\n+        widgetArgs.getFormFragment().getJsonApi().getAppExecutors().diskIO().execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JSONObject step = ((JsonApi) widgetArgs.getContext()).getmJSONObject().getJSONObject(widgetArgs.getStepName());\n+                    JSONArray fields = step.getJSONArray(FIELDS);\n+                    String key = widgetArgs.getJsonObject().optString(KEY);\n+                    for (int i = 0; i < fields.length(); i++) {\n+                        JSONObject object = fields.optJSONObject(i);\n+                        String fieldKey = object.optString(KEY);\n+                        if (fieldKey.equals(key)) {\n+                            String strNumOfRepeatedGroups = object.optString(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT);\n+                            int currentCount = numRepeatingGroups;\n+                            if (StringUtils.isNotBlank(strNumOfRepeatedGroups)) {\n+                                currentCount += Integer.parseInt(strNumOfRepeatedGroups);\n+                            }\n+                            object.put(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT, currentCount);\n+                            break;\n+                        }\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTI5Nw=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMzUyMA==", "bodyText": "It can be modified to only write into the count object after repeating group generation. And that can be used to verify the generation was done.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r489403520", "createdAt": "2020-09-16T12:39:07Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -130,13 +134,51 @@ protected void onPostExecute(List<View> result) {\n         }\n \n         try {\n-            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null);\n+            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null, widgetArgs.getStepName(), false);\n         } catch (Exception e) {\n             Timber.e(e);\n         }\n \n         hideProgressDialog();\n         doneButton.setImageResource(R.drawable.ic_done_green);\n+\n+        //for validation\n+        validationCleanUp();\n+\n+    }\n+\n+    private void validationCleanUp() {\n+        doneButton.setTag(R.id.is_repeating_group_generated, true);\n+\n+        LinearLayout referenceLayout = (LinearLayout) ((LinearLayout) parent).getChildAt(0);\n+        MaterialEditText materialEditText = (MaterialEditText) referenceLayout.getChildAt(0);\n+        materialEditText.setError(null);\n+\n+        widgetArgs.getFormFragment().getJsonApi().getAppExecutors().diskIO().execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JSONObject step = ((JsonApi) widgetArgs.getContext()).getmJSONObject().getJSONObject(widgetArgs.getStepName());\n+                    JSONArray fields = step.getJSONArray(FIELDS);\n+                    String key = widgetArgs.getJsonObject().optString(KEY);\n+                    for (int i = 0; i < fields.length(); i++) {\n+                        JSONObject object = fields.optJSONObject(i);\n+                        String fieldKey = object.optString(KEY);\n+                        if (fieldKey.equals(key)) {\n+                            String strNumOfRepeatedGroups = object.optString(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT);\n+                            int currentCount = numRepeatingGroups;\n+                            if (StringUtils.isNotBlank(strNumOfRepeatedGroups)) {\n+                                currentCount += Integer.parseInt(strNumOfRepeatedGroups);\n+                            }\n+                            object.put(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT, currentCount);\n+                            break;\n+                        }\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTI5Nw=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzMTQ1MQ==", "bodyText": "will update this", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501531451", "createdAt": "2020-10-08T08:16:31Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -130,13 +134,51 @@ protected void onPostExecute(List<View> result) {\n         }\n \n         try {\n-            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null);\n+            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null, widgetArgs.getStepName(), false);\n         } catch (Exception e) {\n             Timber.e(e);\n         }\n \n         hideProgressDialog();\n         doneButton.setImageResource(R.drawable.ic_done_green);\n+\n+        //for validation\n+        validationCleanUp();\n+\n+    }\n+\n+    private void validationCleanUp() {\n+        doneButton.setTag(R.id.is_repeating_group_generated, true);\n+\n+        LinearLayout referenceLayout = (LinearLayout) ((LinearLayout) parent).getChildAt(0);\n+        MaterialEditText materialEditText = (MaterialEditText) referenceLayout.getChildAt(0);\n+        materialEditText.setError(null);\n+\n+        widgetArgs.getFormFragment().getJsonApi().getAppExecutors().diskIO().execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JSONObject step = ((JsonApi) widgetArgs.getContext()).getmJSONObject().getJSONObject(widgetArgs.getStepName());\n+                    JSONArray fields = step.getJSONArray(FIELDS);\n+                    String key = widgetArgs.getJsonObject().optString(KEY);\n+                    for (int i = 0; i < fields.length(); i++) {\n+                        JSONObject object = fields.optJSONObject(i);\n+                        String fieldKey = object.optString(KEY);\n+                        if (fieldKey.equals(key)) {\n+                            String strNumOfRepeatedGroups = object.optString(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT);\n+                            int currentCount = numRepeatingGroups;\n+                            if (StringUtils.isNotBlank(strNumOfRepeatedGroups)) {\n+                                currentCount += Integer.parseInt(strNumOfRepeatedGroups);\n+                            }\n+                            object.put(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT, currentCount);\n+                            break;\n+                        }\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTI5Nw=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0NDI0Ng==", "bodyText": "This update can be tracked here #504", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r509144246", "createdAt": "2020-10-21T09:51:08Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -130,13 +134,51 @@ protected void onPostExecute(List<View> result) {\n         }\n \n         try {\n-            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null);\n+            ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null, widgetArgs.getStepName(), false);\n         } catch (Exception e) {\n             Timber.e(e);\n         }\n \n         hideProgressDialog();\n         doneButton.setImageResource(R.drawable.ic_done_green);\n+\n+        //for validation\n+        validationCleanUp();\n+\n+    }\n+\n+    private void validationCleanUp() {\n+        doneButton.setTag(R.id.is_repeating_group_generated, true);\n+\n+        LinearLayout referenceLayout = (LinearLayout) ((LinearLayout) parent).getChildAt(0);\n+        MaterialEditText materialEditText = (MaterialEditText) referenceLayout.getChildAt(0);\n+        materialEditText.setError(null);\n+\n+        widgetArgs.getFormFragment().getJsonApi().getAppExecutors().diskIO().execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JSONObject step = ((JsonApi) widgetArgs.getContext()).getmJSONObject().getJSONObject(widgetArgs.getStepName());\n+                    JSONArray fields = step.getJSONArray(FIELDS);\n+                    String key = widgetArgs.getJsonObject().optString(KEY);\n+                    for (int i = 0; i < fields.length(); i++) {\n+                        JSONObject object = fields.optJSONObject(i);\n+                        String fieldKey = object.optString(KEY);\n+                        if (fieldKey.equals(key)) {\n+                            String strNumOfRepeatedGroups = object.optString(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT);\n+                            int currentCount = numRepeatingGroups;\n+                            if (StringUtils.isNotBlank(strNumOfRepeatedGroups)) {\n+                                currentCount += Integer.parseInt(strNumOfRepeatedGroups);\n+                            }\n+                            object.put(JsonFormConstants.REPEATING_GROUPS_GENERATED_COUNT, currentCount);\n+                            break;\n+                        }\n+                    }\n+                } catch (JSONException e) {\n+                    Timber.e(e);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTI5Nw=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDk5NTI3OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowMjo0NlrOHQPbKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzowMDoxNFrOHdyG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTk3OQ==", "bodyText": "Any reason for changing the method signature? This is a public method which could be called elsewhere.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486791979", "createdAt": "2020-09-11T06:02:46Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -309,7 +310,8 @@ private static String cleanConditionString(String conditionStringRaw) {\n         return conditionString.replaceAll(\"  \", \" \");\n     }\n \n-    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType, Context context, Map<String, List<Map<String, Object>>> rulesFileMap) throws JSONException {\n+    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxNDk2MQ==", "bodyText": "The step field is useful for it to be used elsewhere, on top of that that the step field is needed to ensure that only the fields that have that step prefix (address) will be converted during dynamic rules creating process", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486914961", "createdAt": "2020-09-11T09:36:21Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -309,7 +310,8 @@ private static String cleanConditionString(String conditionStringRaw) {\n         return conditionString.replaceAll(\"  \", \" \");\n     }\n \n-    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType, Context context, Map<String, List<Map<String, Object>>> rulesFileMap) throws JSONException {\n+    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTk3OQ=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNjA2Ng==", "bodyText": "Is this a bug fix? If not, a method can be added that has the same signature with the added step parameter and retain the original method which will now call the new method with a null step value. Then perform the new operations only if step is not null.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r489406066", "createdAt": "2020-09-16T12:43:10Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -309,7 +310,8 @@ private static String cleanConditionString(String conditionStringRaw) {\n         return conditionString.replaceAll(\"  \", \" \");\n     }\n \n-    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType, Context context, Map<String, List<Map<String, Object>>> rulesFileMap) throws JSONException {\n+    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTk3OQ=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk5MTczMA==", "bodyText": "yeah it is", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r500991730", "createdAt": "2020-10-07T13:00:14Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -309,7 +310,8 @@ private static String cleanConditionString(String conditionStringRaw) {\n         return conditionString.replaceAll(\"  \", \" \");\n     }\n \n-    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType, Context context, Map<String, List<Map<String, Object>>> rulesFileMap) throws JSONException {\n+    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MTk3OQ=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAwMDc0OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowNToxMlrOHQPeeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowNToxMlrOHQPeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MjgyNA==", "bodyText": "Not clear what this does, please add a comment or move to a descriptive method.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486792824", "createdAt": "2020-09-11T06:05:12Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "diffHunk": "@@ -98,14 +99,31 @@\n \n         setRepeatingGroupNumLimits();\n \n+        //get the generated number of groups\n+        final String generatedGroupsCount = jsonObject.optString(REPEATING_GROUPS_GENERATED_COUNT);\n+\n+\n         // Enables us to fetch this value from a previous edit_text & disable this one\n-        retrieveRepeatingGroupCountFromRemoteReferenceEditText(rootLayout, (JsonApi) context, referenceEditText, remoteReferenceEditText);\n+        if (StringUtils.isBlank(generatedGroupsCount)) { ///generate only once\n+            retrieveRepeatingGroupCountFromRemoteReferenceEditText(rootLayout, (JsonApi) context, referenceEditText, remoteReferenceEditText);\n+        }\n+\n         setUpReferenceEditText(referenceEditText, referenceEditTextHint, repeatingGroupLabel);\n \n         // Disable the done button if the reference edit text being used is remote & has a valid value\n         if (isRemoteReferenceValueUsed(referenceEditText)) {\n             doneButton.setVisibility(View.GONE);\n         } else {\n+            if (StringUtils.isNotBlank(generatedGroupsCount)) {\n+                formFragment.getJsonApi().getAppExecutors().mainThread().execute(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        referenceEditText.setText(generatedGroupsCount);\n+                    }\n+                });\n+                doneButton.setTag(R.id.is_repeating_group_generated, true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAwMjc1OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowNjoyMFrOHQPfwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowNjoyMFrOHQPfwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MzE1NA==", "bodyText": "https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#r486791297", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486793154", "createdAt": "2020-09-11T06:06:20Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "diffHunk": "@@ -98,14 +99,31 @@\n \n         setRepeatingGroupNumLimits();\n \n+        //get the generated number of groups\n+        final String generatedGroupsCount = jsonObject.optString(REPEATING_GROUPS_GENERATED_COUNT);\n+\n+\n         // Enables us to fetch this value from a previous edit_text & disable this one\n-        retrieveRepeatingGroupCountFromRemoteReferenceEditText(rootLayout, (JsonApi) context, referenceEditText, remoteReferenceEditText);\n+        if (StringUtils.isBlank(generatedGroupsCount)) { ///generate only once\n+            retrieveRepeatingGroupCountFromRemoteReferenceEditText(rootLayout, (JsonApi) context, referenceEditText, remoteReferenceEditText);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAxMTA5OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "isResolved": false, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxMDowMFrOHQPkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo1ODowNVrOHlt2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA==", "bodyText": "Is this skip logic only relevant to wizard forms? Could it also be useful in other forms and in that case better placed in the JsonFormFragment?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486794400", "createdAt": "2020-09-11T06:10:00Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NDYwNw==", "bodyText": "i mean skip logic is only relevant if there is more than one step .... Why would single step forms need a skip logic?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486954607", "createdAt": "2020-09-11T10:24:23Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMTI4Nw==", "bodyText": "JsonFormFragment is not solely for single step forms.\nJsonFormFragment is the parent to JsonWizardFormFragment so why not have the code there for apps that extend either fragment?\nWe are currently using this functionality so this would be a breaking change and it's not clear that it's necessary to make this migration.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r489401287", "createdAt": "2020-09-16T12:35:14Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMDU4NA==", "bodyText": "I think that when two classes share a feature is when the super class should have some 'initializing' code with some customization on the child. In this case skipping step is only a feature for JsonWizardFormFragment hence i dont see the need for this. I would suggest you use JsonWizardFormFragment in your implementation since its a child class and will have all that JsonFormFragment has.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501000584", "createdAt": "2020-10-07T13:13:22Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxMDY1NA==", "bodyText": "I'm not sure I understand this. Why is skipping a step only unique to (or needed in) the JsonWizardFormFragment and not in the JsonFormFragment? Isn't this feature useful for all kinds of forms and not just wizard forms?\nIt's not ideal to switch to JsonWizardFormFragment since we (and perhaps other implementations):\n\nDon't need the extra features it provides\nHave custom a JsonFormFragment that has overridden behaviour from the parent class.\nRelated to 2, have made some assumptions when working with JsonFormFragment which may be broken when migrating to JsonWizardFormFragment.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501510654", "createdAt": "2020-10-08T07:41:16Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzNTUyNQ==", "bodyText": "Question.\nHow are you using the skipping step feature in a JsonFormFragment in your implementation? It cant be to skip step since you only have one step .... Am curious.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501535525", "createdAt": "2020-10-08T08:23:19Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1ODI2NQ==", "bodyText": "I think there's some confusion around how JsonFormFragment works. JsonFormFragment does support multi-step forms. We have multiple multi-step forms in our implementation, one of which benefits from skipping blanks steps.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501558265", "createdAt": "2020-10-08T08:58:52Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MTA2Ng==", "bodyText": "To be clear you use JsonFormFragment in the above form??? if not could i see how you currently use skipping step feature in JsonFormFragment in your implementation.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501571066", "createdAt": "2020-10-08T09:19:02Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMTE2OA==", "bodyText": "I use JsonFormFragment for all forms. And this form has skip feature enabled.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r502231168", "createdAt": "2020-10-09T07:12:20Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMTA1MA==", "bodyText": "I think you should change that ... i.e you should use JsonFormFragment for single step forms and JsonWizardFormFragment for multi-step forms.\nBy the way skipping step feature was in JsonWizardFormFragment before you added it to JsonFormFragment", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r502311050", "createdAt": "2020-10-09T09:39:57Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyODAyMw==", "bodyText": "Is there a reason to use JsonFormFragment for single step forms only? I don't believe that's a requirement atm.\nI moved it to JsonFormFragment because, again, it's useful for all types of forms, not just JsonWizardFormFragment forms. If another implementation wanted to extend JsonFormFragment, it could still benefit from the feature.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r502328023", "createdAt": "2020-10-09T10:12:24Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyODcxOQ==", "bodyText": "Please also address why I should not be concerned about the three points I raised #407 (comment).", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r502328719", "createdAt": "2020-10-09T10:13:54Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1MzY1OQ==", "bodyText": "@dubdabasoduba can also way in but the skipping of steps is only used on JsonWizardFormFragment for ANC forms. It would be ideal if the logic is moved to JsonWizardFormFragment since one can only skip steps in a wizard.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r509153659", "createdAt": "2020-10-21T10:05:47Z", "author": {"login": "githengi"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxMDUxMg==", "bodyText": "@githengi I'm not sure I follow, why can steps only be skipped on wizards?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r509310512", "createdAt": "2020-10-21T13:58:05Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonWizardFormFragment.java", "diffHunk": "@@ -253,6 +263,121 @@ public void updateVisibilityOfNextAndSave(boolean next, boolean save) {\n         }\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /***\n+     * Adds a property 'skipped=true' to a step object if the step is skipped\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void markStepAsSkipped(JSONObject formStep) {\n+        try {\n+            formStep.put(\"skipped\", true);\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+        }\n+    }\n+\n+    /***\n+     * Skips blank steps when next is clicked on the json wizard forms.\n+     * @param step {@link JSONObject}\n+     */\n+\n+    public void skipStepsOnNextPressed(String step) {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(step);\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next) && (!getJsonApi().isNextStepRelevant() && !nextStepHasNoSkipLogic())) {\n+                markStepAsSkipped(formStep);\n+                getJsonApi().setNextStep(next);\n+                next();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n+     */\n+    public void skipStepOnPreviousPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject currentFormStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = currentFormStep.optString(JsonFormConstants.NEXT, \"\");\n+            int currentFormStepNumber = getFormStepNumber(next);\n+            for (int i = currentFormStepNumber; i >= 1; i--) {\n+                JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n+                if (formStep != null) {\n+                    checkIfStepIsBlank(formStep);\n+                    if (shouldSkipStep()) {\n+                        getFragmentManager().popBackStack();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * should not be used alone, use with {@link #nextStepHasNoSkipLogic()}\n+     * Checks if a given step is blank due to relevance hiding all the widgets\n+     *\n+     * @param formStep {@link JSONObject}\n+     */\n+    private void checkIfStepIsBlank(JSONObject formStep) {\n+        try {\n+            if (formStep.has(JsonFormConstants.FIELDS)) {\n+                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject field = fields.getJSONObject(i);\n+                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n+                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n+                        if (isVisible) {\n+                            setShouldSkipStep(false);\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }\n+        }\n+        return formNumber;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDQwMA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAxMjY3OnYy", "diffSide": "LEFT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxMDo0OFrOHQPllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzoxNzoyM1rOHdy06w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDY0Ng==", "bodyText": "Why remove this here?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486794646", "createdAt": "2020-09-11T06:10:48Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -670,72 +672,4 @@ public void setOnFieldsInvalid(OnFieldsInvalid onFieldsInvalid) {\n     public static NativeFormsProperties getNativeFormProperties() {\n         return nativeFormProperties;\n     }\n-\n-    /**\n-     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n-     */\n-    public void skipStepsOnNextPressed() {\n-        JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n-        String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n-        if (StringUtils.isNotEmpty(next)) {\n-            checkIfStepIsBlank(formStep);\n-            if (shouldSkipStep()) {\n-                next();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n-     */\n-    public void skipStepOnPreviousPressed() {\n-        int currentFormStepNumber = getFormStepNumber();\n-        for (int i = currentFormStepNumber; i >= 1; i--) {\n-            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n-            if (formStep != null) {\n-                checkIfStepIsBlank(formStep);\n-                if (shouldSkipStep()) {\n-                    getFragmentManager().popBackStack();\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n-\n-    /**\n-     * Checks if a given step is blank due to relevance hidding all the widgets\n-     *\n-     * @param formStep {@link JSONObject}\n-     */\n-    private void checkIfStepIsBlank(JSONObject formStep) {\n-        try {\n-            if (formStep.has(JsonFormConstants.FIELDS)) {\n-                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n-                for (int i = 0; i < fields.length(); i++) {\n-                    JSONObject field = fields.getJSONObject(i);\n-                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n-                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n-                        if (isVisible) {\n-                            setShouldSkipStep(false);\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n-        }\n-    }\n-\n-    /**\n-     * Returns the current form step number which is used to figure out which steps to pop\n-     * when previous is clicked.\n-     *\n-     * @return formNumber {@link Integer}\n-     */\n-    private int getFormStepNumber() {\n-        return Integer.parseInt(getArguments().getString(JsonFormConstants.STEPNAME).substring(4));\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTA4MA==", "bodyText": "The implementation and logic changed  .... has it broken you code?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486955080", "createdAt": "2020-09-11T10:25:20Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -670,72 +672,4 @@ public void setOnFieldsInvalid(OnFieldsInvalid onFieldsInvalid) {\n     public static NativeFormsProperties getNativeFormProperties() {\n         return nativeFormProperties;\n     }\n-\n-    /**\n-     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n-     */\n-    public void skipStepsOnNextPressed() {\n-        JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n-        String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n-        if (StringUtils.isNotEmpty(next)) {\n-            checkIfStepIsBlank(formStep);\n-            if (shouldSkipStep()) {\n-                next();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n-     */\n-    public void skipStepOnPreviousPressed() {\n-        int currentFormStepNumber = getFormStepNumber();\n-        for (int i = currentFormStepNumber; i >= 1; i--) {\n-            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n-            if (formStep != null) {\n-                checkIfStepIsBlank(formStep);\n-                if (shouldSkipStep()) {\n-                    getFragmentManager().popBackStack();\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n-\n-    /**\n-     * Checks if a given step is blank due to relevance hidding all the widgets\n-     *\n-     * @param formStep {@link JSONObject}\n-     */\n-    private void checkIfStepIsBlank(JSONObject formStep) {\n-        try {\n-            if (formStep.has(JsonFormConstants.FIELDS)) {\n-                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n-                for (int i = 0; i < fields.length(); i++) {\n-                    JSONObject field = fields.getJSONObject(i);\n-                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n-                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n-                        if (isVisible) {\n-                            setShouldSkipStep(false);\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n-        }\n-    }\n-\n-    /**\n-     * Returns the current form step number which is used to figure out which steps to pop\n-     * when previous is clicked.\n-     *\n-     * @return formNumber {@link Integer}\n-     */\n-    private int getFormStepNumber() {\n-        return Integer.parseInt(getArguments().getString(JsonFormConstants.STEPNAME).substring(4));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDY0Ng=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMTQ0Ng==", "bodyText": "#407 (comment)", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r489401446", "createdAt": "2020-09-16T12:35:31Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -670,72 +672,4 @@ public void setOnFieldsInvalid(OnFieldsInvalid onFieldsInvalid) {\n     public static NativeFormsProperties getNativeFormProperties() {\n         return nativeFormProperties;\n     }\n-\n-    /**\n-     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n-     */\n-    public void skipStepsOnNextPressed() {\n-        JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n-        String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n-        if (StringUtils.isNotEmpty(next)) {\n-            checkIfStepIsBlank(formStep);\n-            if (shouldSkipStep()) {\n-                next();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n-     */\n-    public void skipStepOnPreviousPressed() {\n-        int currentFormStepNumber = getFormStepNumber();\n-        for (int i = currentFormStepNumber; i >= 1; i--) {\n-            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n-            if (formStep != null) {\n-                checkIfStepIsBlank(formStep);\n-                if (shouldSkipStep()) {\n-                    getFragmentManager().popBackStack();\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n-\n-    /**\n-     * Checks if a given step is blank due to relevance hidding all the widgets\n-     *\n-     * @param formStep {@link JSONObject}\n-     */\n-    private void checkIfStepIsBlank(JSONObject formStep) {\n-        try {\n-            if (formStep.has(JsonFormConstants.FIELDS)) {\n-                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n-                for (int i = 0; i < fields.length(); i++) {\n-                    JSONObject field = fields.getJSONObject(i);\n-                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n-                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n-                        if (isVisible) {\n-                            setShouldSkipStep(false);\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n-        }\n-    }\n-\n-    /**\n-     * Returns the current form step number which is used to figure out which steps to pop\n-     * when previous is clicked.\n-     *\n-     * @return formNumber {@link Integer}\n-     */\n-    private int getFormStepNumber() {\n-        return Integer.parseInt(getArguments().getString(JsonFormConstants.STEPNAME).substring(4));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDY0Ng=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMzQ5OQ==", "bodyText": "Could you consider using JsonWizardFormFragment?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501003499", "createdAt": "2020-10-07T13:17:23Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -670,72 +672,4 @@ public void setOnFieldsInvalid(OnFieldsInvalid onFieldsInvalid) {\n     public static NativeFormsProperties getNativeFormProperties() {\n         return nativeFormProperties;\n     }\n-\n-    /**\n-     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n-     */\n-    public void skipStepsOnNextPressed() {\n-        JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n-        String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n-        if (StringUtils.isNotEmpty(next)) {\n-            checkIfStepIsBlank(formStep);\n-            if (shouldSkipStep()) {\n-                next();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Skips blank by relevance steps when previous is clicked on the json wizard forms.\n-     */\n-    public void skipStepOnPreviousPressed() {\n-        int currentFormStepNumber = getFormStepNumber();\n-        for (int i = currentFormStepNumber; i >= 1; i--) {\n-            JSONObject formStep = getJsonApi().getmJSONObject().optJSONObject(JsonFormConstants.STEP + i);\n-            if (formStep != null) {\n-                checkIfStepIsBlank(formStep);\n-                if (shouldSkipStep()) {\n-                    getFragmentManager().popBackStack();\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n-\n-    /**\n-     * Checks if a given step is blank due to relevance hidding all the widgets\n-     *\n-     * @param formStep {@link JSONObject}\n-     */\n-    private void checkIfStepIsBlank(JSONObject formStep) {\n-        try {\n-            if (formStep.has(JsonFormConstants.FIELDS)) {\n-                JSONArray fields = formStep.getJSONArray(JsonFormConstants.FIELDS);\n-                for (int i = 0; i < fields.length(); i++) {\n-                    JSONObject field = fields.getJSONObject(i);\n-                    if (field.has(JsonFormConstants.TYPE) && !JsonFormConstants.HIDDEN.equals(field.getString(JsonFormConstants.TYPE))) {\n-                        boolean isVisible = field.optBoolean(JsonFormConstants.IS_VISIBLE, true);\n-                        if (isVisible) {\n-                            setShouldSkipStep(false);\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        } catch (JSONException e) {\n-            Timber.e(e, \"%s --> checkIfStepIsBlank\", this.getClass().getCanonicalName());\n-        }\n-    }\n-\n-    /**\n-     * Returns the current form step number which is used to figure out which steps to pop\n-     * when previous is clicked.\n-     *\n-     * @return formNumber {@link Integer}\n-     */\n-    private int getFormStepNumber() {\n-        return Integer.parseInt(getArguments().getString(JsonFormConstants.STEPNAME).substring(4));\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NDY0Ng=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAxNzA5OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxMjo1MFrOHQPoSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzoxNTo0OFrOHdywfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NTMzOQ==", "bodyText": "What is this doing? Please add a comment.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486795339", "createdAt": "2020-09-11T06:12:50Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -380,10 +376,18 @@ public void hideKeyBoard() {\n \n     @Override\n     public void transactThis(JsonFormFragment next) {\n+        if (getFragmentManager().getBackStackEntryCount() > 0) { //Note: first step is not usually added to backStackEntry\n+            FragmentManager.BackStackEntry stackEntry = getFragmentManager().getBackStackEntryAt(getFragmentManager().getBackStackEntryCount() - 1);\n+            if (StringUtils.isNotBlank(stackEntry.getName()) &&\n+                    stackEntry.getName().equalsIgnoreCase(next.getArguments().getString(JsonFormConstants.STEPNAME))) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NTY2Ng==", "bodyText": "It prevents a very rare edge case whereby same fragment gets added twice in the fragment stack", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486955666", "createdAt": "2020-09-11T10:26:37Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -380,10 +376,18 @@ public void hideKeyBoard() {\n \n     @Override\n     public void transactThis(JsonFormFragment next) {\n+        if (getFragmentManager().getBackStackEntryCount() > 0) { //Note: first step is not usually added to backStackEntry\n+            FragmentManager.BackStackEntry stackEntry = getFragmentManager().getBackStackEntryAt(getFragmentManager().getBackStackEntryCount() - 1);\n+            if (StringUtils.isNotBlank(stackEntry.getName()) &&\n+                    stackEntry.getName().equalsIgnoreCase(next.getArguments().getString(JsonFormConstants.STEPNAME))) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NTMzOQ=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwMjAyNQ==", "bodyText": "Please add this as a comment, it wouldn't be obvious unless you explained it to someone.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r489402025", "createdAt": "2020-09-16T12:36:28Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -380,10 +376,18 @@ public void hideKeyBoard() {\n \n     @Override\n     public void transactThis(JsonFormFragment next) {\n+        if (getFragmentManager().getBackStackEntryCount() > 0) { //Note: first step is not usually added to backStackEntry\n+            FragmentManager.BackStackEntry stackEntry = getFragmentManager().getBackStackEntryAt(getFragmentManager().getBackStackEntryCount() - 1);\n+            if (StringUtils.isNotBlank(stackEntry.getName()) &&\n+                    stackEntry.getName().equalsIgnoreCase(next.getArguments().getString(JsonFormConstants.STEPNAME))) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NTMzOQ=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMjM2Ng==", "bodyText": "ok", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r501002366", "createdAt": "2020-10-07T13:15:48Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -380,10 +376,18 @@ public void hideKeyBoard() {\n \n     @Override\n     public void transactThis(JsonFormFragment next) {\n+        if (getFragmentManager().getBackStackEntryCount() > 0) { //Note: first step is not usually added to backStackEntry\n+            FragmentManager.BackStackEntry stackEntry = getFragmentManager().getBackStackEntryAt(getFragmentManager().getBackStackEntryCount() - 1);\n+            if (StringUtils.isNotBlank(stackEntry.getName()) &&\n+                    stackEntry.getName().equalsIgnoreCase(next.getArguments().getString(JsonFormConstants.STEPNAME))) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NTMzOQ=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAyMjYwOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/interfaces/JsonApi.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxNToxMlrOHQPrhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0NTowMVrOHlef6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NjE2NA==", "bodyText": "This is a public method. Changing method signature is a possible breaking change.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486796164", "createdAt": "2020-09-11T06:15:12Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/interfaces/JsonApi.java", "diffHunk": "@@ -95,7 +99,7 @@ void addOnActivityRequestPermissionResultListener(Integer requestCode,\n \n     void setmJSONObject(JSONObject jsonObject);\n \n-    void updateGenericPopupSecondaryValues(JSONArray jsonArray);\n+    void updateGenericPopupSecondaryValues(JSONArray jsonArray, String stepName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTA0OQ==", "bodyText": "This is a major version and changes will likely occur. This has been added to only filter on current step so that forms with multiple steps all the steps are not evaluated when a step is being loaded", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r509059049", "createdAt": "2020-10-21T07:45:01Z", "author": {"login": "githengi"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/interfaces/JsonApi.java", "diffHunk": "@@ -95,7 +99,7 @@ void addOnActivityRequestPermissionResultListener(Integer requestCode,\n \n     void setmJSONObject(JSONObject jsonObject);\n \n-    void updateGenericPopupSecondaryValues(JSONArray jsonArray);\n+    void updateGenericPopupSecondaryValues(JSONArray jsonArray, String stepName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NjE2NA=="}, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAzMTEyOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxODo0N1rOHQPwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxODo0N1rOHQPwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NzQ2OA==", "bodyText": "This is a public method. Changing method signature is a possible breaking change.\nIs this a major version change? If so, please ignore all such comments.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486797468", "createdAt": "2020-09-11T06:18:47Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -270,79 +301,169 @@ public void refreshHiddenViews(boolean popup) {\n                 if (viewData.has(JsonFormConstants.HIDDEN) && viewData.getBoolean(JsonFormConstants.HIDDEN)) {\n                     toggleViewVisibility(curView, false, popup);\n                 }\n-            } catch (Exception e) {\n+            } catch (JSONException e) {\n                 Timber.e(e);\n             }\n         }\n     }\n \n     @Override\n-    public void refreshSkipLogic(String parentKey, String childKey, boolean popup) {\n+    public void refreshSkipLogic(String parentKey, String childKey, boolean popup, String stepName, boolean isForNextStep) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAzMjM5OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxOToyNFrOHQPxYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoxOToyNFrOHQPxYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NzY2Nw==", "bodyText": "https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#r486797468", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486797667", "createdAt": "2020-09-11T06:19:24Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -270,79 +301,169 @@ public void refreshHiddenViews(boolean popup) {\n                 if (viewData.has(JsonFormConstants.HIDDEN) && viewData.getBoolean(JsonFormConstants.HIDDEN)) {\n                     toggleViewVisibility(curView, false, popup);\n                 }\n-            } catch (Exception e) {\n+            } catch (JSONException e) {\n                 Timber.e(e);\n             }\n         }\n     }\n \n     @Override\n-    public void refreshSkipLogic(String parentKey, String childKey, boolean popup) {\n+    public void refreshSkipLogic(String parentKey, String childKey, boolean popup, String stepName, boolean isForNextStep) {\n         initComparisons();\n-        View[] views = skipLogicViews.values().toArray(new View[0]);\n-        for (View curView : views) {\n-            addRelevance(curView, popup);\n+        Set<String> viewsIds = skipLogicDependencyMap.get(stepName + \"_\" + parentKey);\n+        if (parentKey == null || childKey == null) {\n+            for (View curView : skipLogicViews.values()) {\n+                if (isForNextStep && isNextStepRelevant()) {\n+                    break;\n+                }\n+                addRelevance(curView, popup, isForNextStep);\n+            }\n+        } else if (viewsIds == null) {\n+            for (String curViewId : skipLogicViews.keySet()) {\n+                //skip any relevance by rules engine since the these components are not affected either way.\n+                // Run relevance for native relevance functions as these are first and not optimized currently\n+                if (isForNextStep && isNextStepRelevant()) {\n+                    break;\n+                }\n+                if (!skipLogicDependencyMap.containsKey(curViewId)) {\n+                    addRelevance(skipLogicViews.get(curViewId), popup, isForNextStep);\n+                }\n+            }\n+        } else {\n+            for (String viewId : viewsIds) {\n+                if (isForNextStep && isNextStepRelevant()) {\n+                    break;\n+                }\n+                addRelevance(skipLogicViews.get(viewId), popup, isForNextStep);\n+            }\n         }\n     }\n \n+\n+    public Pair<String[], JSONObject> getCalculationAddressAndValue(View view) throws JSONException {\n+        String calculationTag = (String) view.getTag(R.id.calculation);\n+        String widgetKey = (String) view.getTag(R.id.key);\n+        String stepName = ((String) view.getTag(R.id.address)).split(\":\")[0];\n+        if (calculationTag != null && calculationTag.length() > 0) {\n+            JSONObject calculation = new JSONObject(calculationTag);\n+            Iterator<String> keys = calculation.keys();\n+\n+            while (keys.hasNext()) {\n+                String curKey = keys.next();\n+\n+                JSONObject curCalculation = calculation.getJSONObject(curKey);\n+                JSONObject valueSource = new JSONObject();\n+                if (calculation.has(JsonFormConstants.SRC)) {\n+                    valueSource = calculation.getJSONObject(JsonFormConstants.SRC);\n+                }\n+                String[] address = getAddressFromMap(widgetKey, stepName, JsonFormConstants.CALCULATION);\n+                if (address == null && curCalculation.has(JsonFormConstants.JSON_FORM_KEY.EX_RULES)) {\n+                    JSONObject exRulesObject = curCalculation.getJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                    if (exRulesObject.has(RuleConstant.RULES_DYNAMIC)) {\n+                        address = getDynamicRulesEngineAddress(curKey, curCalculation, view, JsonFormConstants.CALCULATION);\n+                    } else {\n+                        address = getRulesEngineAddress(curKey, curCalculation, view, JsonFormConstants.CALCULATION);\n+                    }\n+                }\n+                return new Pair<>(address, valueSource);\n+            }\n+        }\n+        return null;\n+    }\n+\n     @Override\n-    public void refreshCalculationLogic(String parentKey, String childKey, boolean popup) {\n-        Collection<View> views = calculationLogicViews.values();\n-        for (View curView : views) {\n-            String calculationTag = (String) curView.getTag(R.id.calculation);\n-            String widgetKey = (String) curView.getTag(R.id.key);\n-            String stepName = ((String) curView.getTag(R.id.address)).split(\":\")[0];\n-            if (calculationTag != null && calculationTag.length() > 0) {\n-                try {\n-                    JSONObject calculation = new JSONObject(calculationTag);\n-                    Iterator<String> keys = calculation.keys();\n+    public void refreshCalculationLogic(String parentKey, String childKey, boolean popup, String stepName, boolean isForNextStep) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAzNjk0OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMTowN1rOHQP0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMTowN1rOHQP0Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5ODM1MA==", "bodyText": "https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#r486797468", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486798350", "createdAt": "2020-09-11T06:21:07Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -554,8 +713,25 @@ protected void initiateFormUpdate(JSONObject json) {\n \n \n     @Override\n-    public void updateGenericPopupSecondaryValues(JSONArray jsonArray) {\n+    public void updateGenericPopupSecondaryValues(JSONArray jsonArray, String stepName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 484}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTAzODg1OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjowMlrOHQP1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjowMlrOHQP1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5ODY0NQ==", "bodyText": "https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#r486797468", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486798645", "createdAt": "2020-09-11T06:22:02Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -1304,20 +1494,20 @@ private boolean doComparison(String value, JSONObject comparison) throws Excepti\n         return args;\n     }\n \n-    protected void refreshMediaLogic(String key, String value) {\n+    protected void refreshMediaLogic(String key, String value, String stepName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 863}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA0MDMzOnYy", "diffSide": "LEFT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjo0M1rOHQP2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjoyMjo0M1rOHQP2Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5ODg4Mw==", "bodyText": "https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#r486797468", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r486798883", "createdAt": "2020-09-11T06:22:43Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/activities/JsonFormActivity.java", "diffHunk": "@@ -933,48 +1083,65 @@ protected void onResume() {\n         EventBus.getDefault().register(this);\n     }\n \n-    protected void addRelevance(View view, boolean popup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373621fd0c938f947a4312ec561465d029a12526"}, "originalPosition": 634}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODE1OTk5OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1MTowMlrOHsvnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyODowNVrOHsxQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3OTU0Nw==", "bodyText": "I think nextFormNumber.substring(4, 5) should be   nextFormNumber.substring(4) instead. Consider a form with two digit steps e.g. step10 for example.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516679547", "createdAt": "2020-11-03T13:51:02Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -271,6 +271,146 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         return super.onOptionsItemSelected(item);\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwMjA5Ng==", "bodyText": "Also, do we need this complex logic to extract the current step? Wasn't this working? https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#diff-4af3b3a5f5179b96a2f8051da8ad980ec341e72fc18aa4bd23f0cbc2c2216845L738?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516702096", "createdAt": "2020-11-03T14:22:26Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -271,6 +271,146 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         return super.onOptionsItemSelected(item);\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3OTU0Nw=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNjM3Nw==", "bodyText": "I don't think there's a constraint on NF that guarantees a step's next value has to be +1 of it's current value. In RDT, we have steps that don't even have a next value.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516706377", "createdAt": "2020-11-03T14:28:05Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -271,6 +271,146 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         return super.onOptionsItemSelected(item);\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3OTU0Nw=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODE2ODE2OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1MzowMFrOHsvsug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1MzowMFrOHsvsug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MDg5MA==", "bodyText": "Can this be simplified to formNumber = currentFormNumber > 0 ? currentFormNumber : 1 since a step is not expected to ever be negative?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516680890", "createdAt": "2020-11-03T13:53:00Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -271,6 +271,146 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         return super.onOptionsItemSelected(item);\n     }\n \n+    /**\n+     * Skips blank by relevance steps when next is clicked on the json wizard forms.\n+     */\n+    public void skipLoadedStepsOnNextPressed() {\n+        if (skipBlankSteps()) {\n+            JSONObject formStep = getStep(getArguments().getString(JsonFormConstants.STEPNAME));\n+            String next = formStep.optString(JsonFormConstants.NEXT, \"\");\n+            if (StringUtils.isNotEmpty(next)) {\n+                checkIfStepIsBlank(formStep);\n+                if (shouldSkipStep() && !stepHasNoSkipLogic(JsonFormConstants.STEP1)) {\n+                    getJsonApi().setNextStep(next);\n+                    markStepAsSkipped(formStep);\n+                    next();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the current form step number when given than steps next step number.\n+     * This number is used to figure out which steps to pop when previous is clicked.\n+     *\n+     * @param nextFormNumber {@link String}\n+     * @return formNumber {@link Integer}\n+     */\n+    private int getFormStepNumber(String nextFormNumber) {\n+        int formNumber = 0;\n+        if (StringUtils.isNotBlank(nextFormNumber)) {\n+            int currentFormNumber = Integer.parseInt(nextFormNumber.substring(4, 5)) - 1;\n+            if (currentFormNumber > 0) {\n+                formNumber = currentFormNumber;\n+            } else if (currentFormNumber == 0) {\n+                formNumber = 1;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODI1MTI3OnYy", "diffSide": "LEFT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoxMToyMlrOHswfQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoyNDoxNlrOHtNZOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ==", "bodyText": "@bennsimon any idea why the skip blank step logic still doesn't work for JsonFormFragments? Seems related to this code being removed and moved to JsonWizardFormFragmentPresenter https://github.com/OpenSRP/opensrp-client-native-form/pull/407/files#diff-026e337bf5459fc5eee13061b659364e67ba948390ac996edef6fb3feae6ca3dR53.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516693825", "createdAt": "2020-11-03T14:11:22Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5NDY2MA==", "bodyText": "Blank steps are not being skipped on both back and next press on the JsonFormFragment.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516694660", "createdAt": "2020-11-03T14:12:22Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxMTcxOA==", "bodyText": "check this out https://github.com/OpenSRP/opensrp-client-native-form/blob/b6bdad0041abc719e125725fd53efb4325705d99/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/presenters/JsonWizardFormFragmentPresenter.java#L43 ...", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516711718", "createdAt": "2020-11-03T14:34:48Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxODY3NQ==", "bodyText": "Ok, can we move this call back to onResume? https://github.com/OpenSRP/opensrp-client-native-form/blob/b6bdad0041abc719e125725fd53efb4325705d99/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/presenters/JsonWizardFormFragmentPresenter.java#L53", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516718675", "createdAt": "2020-11-03T14:43:04Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxOTE0OA==", "bodyText": "and would that solve the backpress issues as well?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516719148", "createdAt": "2020-11-03T14:43:42Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0MDIxMw==", "bodyText": "JsonFormFragmentPresenter has onNextClick you can copy the changes from JsonWizardFormFragmentPresenter ...\nOk, can we move this call back to onResume?\nNo dont move this", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516740213", "createdAt": "2020-11-03T15:11:55Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc0MTk3OA==", "bodyText": "Check this too https://github.com/OpenSRP/opensrp-client-native-form/blob/abe02b5e496ed17dbfbb48cb569bd257b12480c0/android-json-form-wizard/src/main/java/com/vijay/jsonwizard/presenters/JsonFormFragmentPresenter.java#L286", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r516741978", "createdAt": "2020-11-03T15:14:18Z", "author": {"login": "bennsimon"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NzQxOA==", "bodyText": "Moving to JsonFormFragmentPresenter doesn't seem to work. Could you take a look? #512", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/407#discussion_r517167418", "createdAt": "2020-11-04T08:24:16Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/fragments/JsonFormFragment.java", "diffHunk": "@@ -225,19 +229,15 @@ public void setmJsonApi(JsonApi mJsonApi) {\n     @Override\n     public void onResume() {\n         super.onResume();\n-\n-        if (!skipBlankSteps()) { return; }\n-\n-        if (!getJsonApi().isPreviousPressed()) {\n-            skipStepsOnNextPressed();\n-        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MzgyNQ=="}, "originalCommit": {"oid": "b6bdad0041abc719e125725fd53efb4325705d99"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2042, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}