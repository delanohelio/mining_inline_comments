{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzM4MTU1", "number": 372, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMzozNFrODnILtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTo0MDoxNVrODnIXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzU1MTI0OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMzozNFrOF08arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMzozNFrOF08arA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MDE0MA==", "bodyText": "Move this to colors.xml", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/372#discussion_r391060140", "createdAt": "2020-03-11T15:33:34Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -47,15 +47,15 @@\n \n public class AttachRepeatingGroupTask extends AsyncTask<Void, Void, List<View>> {\n \n-    private LinearLayout rootLayout;\n+    protected final int REPEATING_GROUP_LABEL_TEXT_COLOR = R.color.black;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35ff30bfa67cf79753e542be83cf4b5a2bccf7d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzU1MjA5OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMzo0NVrOF08bNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozMzo0NVrOF08bNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MDI3Nw==", "bodyText": "Use timber", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/372#discussion_r391060277", "createdAt": "2020-03-11T15:33:45Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/task/AttachRepeatingGroupTask.java", "diffHunk": "@@ -131,7 +131,7 @@ protected void onPostExecute(List<View> result) {\n \n         try {\n             ((JsonApi) widgetArgs.getContext()).invokeRefreshLogic(null, false, null, null);\n-        } catch (Exception e){\n+        } catch (Exception e) {\n             e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35ff30bfa67cf79753e542be83cf4b5a2bccf7d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzU2NjQ2OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozNjo1NlrOF08ksw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozNjo1NlrOF08ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MjcwNw==", "bodyText": "Use better variable names", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/372#discussion_r391062707", "createdAt": "2020-03-11T15:36:56Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -285,6 +284,143 @@ public static void resetRadioButtonsSpecifyText(RadioButton button) throws JSONE\n \n     }\n \n+    @NonNull\n+    private static String cleanToken(String conditionTokenRaw) {\n+        String conditionToken = conditionTokenRaw.trim();\n+\n+        for (int i = 0; i < conditionToken.length(); i++) {\n+            if (JAVA_OPERATORS.contains(conditionToken.charAt(i))) {\n+                if (i == 0) {\n+                    conditionToken = cleanToken(conditionToken.substring(1));\n+                } else {\n+                    conditionToken = conditionToken.substring(0, conditionToken.indexOf(conditionToken.charAt(i)));\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return conditionToken;\n+    }\n+\n+    public static List<String> getConditionKeys(String condition) {\n+        String cleanString = cleanConditionString(condition);\n+        String[] conditionTokens = cleanString.split(\" \");\n+        Map<String, Boolean> conditionKeys = new HashMap<>();\n+\n+        for (String token : conditionTokens) {\n+            if (token.contains(RuleConstant.STEP) || token.contains(RuleConstant.PREFIX.GLOBAL)) {\n+                String conditionToken = cleanToken(token);\n+                conditionKeys.put(conditionToken, true);\n+            }\n+        }\n+\n+        return new ArrayList<>(conditionKeys.keySet());\n+    }\n+\n+    private static String cleanConditionString(String conditionStringRaw) {\n+        String conditionString = conditionStringRaw;\n+\n+        for (String token : PREFICES_OF_INTEREST) {\n+\n+            conditionString = conditionString.replaceAll(token, \" \" + token);\n+        }\n+\n+        return conditionString.replaceAll(\"  \", \" \");\n+    }\n+\n+    public static Iterable<Object> readYamlFile(String fileName, Context context) {\n+        Yaml yaml = new Yaml();\n+        InputStreamReader inputStreamReader;\n+        Iterable<Object> objectIterable = null;\n+        try {\n+            inputStreamReader = new InputStreamReader(context.getAssets().open(fileName));\n+            objectIterable = yaml.loadAll(inputStreamReader);\n+        } catch (IOException e) {\n+            Timber.e(e);\n+        }\n+\n+        return objectIterable;\n+    }\n+\n+    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType, Context context, Map<String, List<Map<String, Object>>> rulesFileMap) throws JSONException {\n+        JSONObject rules = element.optJSONObject(ruleType);\n+        if (rules != null) {\n+            if (rules.has(RuleConstant.RULES_ENGINE) && context != null) {\n+                JSONObject jsonRulesEngineObject = rules.optJSONObject(RuleConstant.RULES_ENGINE);\n+                JSONObject jsonExRules = jsonRulesEngineObject.optJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                String fileName = JsonFormConstants.RULE + jsonExRules.optString(RuleConstant.RULES_DYNAMIC);\n+\n+                if (!rulesFileMap.containsKey(fileName)) {\n+                    Iterable<Object> objectIterable = readYamlFile(fileName, context);\n+                    List<Map<String, Object>> arrayList = new ArrayList<>();\n+                    while (objectIterable.iterator().hasNext()) {\n+                        Map<String, Object> map = (Map<String, Object>) objectIterable.iterator().next();\n+                        if (map != null) {\n+                            arrayList.add(map);\n+                        }\n+                    }\n+                    rulesFileMap.put(fileName, arrayList);\n+                }\n+\n+                List<Map<String, Object>> mapArrayList = rulesFileMap.get(fileName);\n+\n+                JSONArray jsonArrayRules = new JSONArray();\n+                JSONObject keyJsonObject = new JSONObject();\n+                keyJsonObject.put(KEY, uniqueId);\n+                jsonArrayRules.put(keyJsonObject);\n+                for (Map<String, Object> map : mapArrayList) {\n+                    JSONObject jsonRulesDynamicObject = new JSONObject();\n+                    String strCondition = (String) map.get(RuleConstant.CONDITION);\n+                    List<String> conditionKeys = getConditionKeys(strCondition);\n+                    for (String conditionKey : conditionKeys) {\n+                        strCondition = strCondition.replace(conditionKey, conditionKey + \"_\" + uniqueId);\n+                    }\n+                    jsonRulesDynamicObject.put(RuleConstant.NAME, String.valueOf(map.get(RuleConstant.NAME)).concat(\"_\").concat(uniqueId));\n+                    jsonRulesDynamicObject.put(RuleConstant.DESCRIPTION, String.valueOf(map.get(RuleConstant.DESCRIPTION)).concat(\"_\").concat(uniqueId));\n+                    jsonRulesDynamicObject.put(RuleConstant.PRIORITY, map.get(RuleConstant.PRIORITY));\n+                    jsonRulesDynamicObject.put(RuleConstant.ACTIONS, ((ArrayList<String>) map.get(RuleConstant.ACTIONS)).get(0));\n+                    jsonRulesDynamicObject.put(RuleConstant.CONDITION, String.valueOf(strCondition));\n+                    jsonArrayRules.put(jsonRulesDynamicObject);\n+                }\n+\n+                jsonExRules.put(RuleConstant.RULES_DYNAMIC, jsonArrayRules);\n+\n+            } else {\n+                String currKey = rules.keys().next();\n+                JSONObject rulesObj = rules.getJSONObject(currKey);\n+                String newKey = currKey + \"_\" + uniqueId;\n+                rules.remove(currKey);\n+                rules.put(newKey, rulesObj);\n+            }\n+        }\n+\n+    }\n+\n+    public static NativeFormsProperties getProperties(Context context) {\n+        NativeFormsProperties properties = new NativeFormsProperties();\n+\n+        try {\n+            AssetManager assetManager = context.getAssets();\n+            InputStream inputStream = assetManager.open(\"app.properties\");\n+            properties.load(inputStream);\n+        } catch (Exception var4) {\n+            Timber.e(var4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35ff30bfa67cf79753e542be83cf4b5a2bccf7d"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzU4MTA5OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTo0MDoxNVrOF08uLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTo0MDoxNVrOF08uLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2NTEzNA==", "bodyText": "Move app.properties to a constant file", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/372#discussion_r391065134", "createdAt": "2020-03-11T15:40:15Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -285,6 +284,143 @@ public static void resetRadioButtonsSpecifyText(RadioButton button) throws JSONE\n \n     }\n \n+    @NonNull\n+    private static String cleanToken(String conditionTokenRaw) {\n+        String conditionToken = conditionTokenRaw.trim();\n+\n+        for (int i = 0; i < conditionToken.length(); i++) {\n+            if (JAVA_OPERATORS.contains(conditionToken.charAt(i))) {\n+                if (i == 0) {\n+                    conditionToken = cleanToken(conditionToken.substring(1));\n+                } else {\n+                    conditionToken = conditionToken.substring(0, conditionToken.indexOf(conditionToken.charAt(i)));\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return conditionToken;\n+    }\n+\n+    public static List<String> getConditionKeys(String condition) {\n+        String cleanString = cleanConditionString(condition);\n+        String[] conditionTokens = cleanString.split(\" \");\n+        Map<String, Boolean> conditionKeys = new HashMap<>();\n+\n+        for (String token : conditionTokens) {\n+            if (token.contains(RuleConstant.STEP) || token.contains(RuleConstant.PREFIX.GLOBAL)) {\n+                String conditionToken = cleanToken(token);\n+                conditionKeys.put(conditionToken, true);\n+            }\n+        }\n+\n+        return new ArrayList<>(conditionKeys.keySet());\n+    }\n+\n+    private static String cleanConditionString(String conditionStringRaw) {\n+        String conditionString = conditionStringRaw;\n+\n+        for (String token : PREFICES_OF_INTEREST) {\n+\n+            conditionString = conditionString.replaceAll(token, \" \" + token);\n+        }\n+\n+        return conditionString.replaceAll(\"  \", \" \");\n+    }\n+\n+    public static Iterable<Object> readYamlFile(String fileName, Context context) {\n+        Yaml yaml = new Yaml();\n+        InputStreamReader inputStreamReader;\n+        Iterable<Object> objectIterable = null;\n+        try {\n+            inputStreamReader = new InputStreamReader(context.getAssets().open(fileName));\n+            objectIterable = yaml.loadAll(inputStreamReader);\n+        } catch (IOException e) {\n+            Timber.e(e);\n+        }\n+\n+        return objectIterable;\n+    }\n+\n+    public static void buildRulesWithUniqueId(JSONObject element, String uniqueId, String ruleType, Context context, Map<String, List<Map<String, Object>>> rulesFileMap) throws JSONException {\n+        JSONObject rules = element.optJSONObject(ruleType);\n+        if (rules != null) {\n+            if (rules.has(RuleConstant.RULES_ENGINE) && context != null) {\n+                JSONObject jsonRulesEngineObject = rules.optJSONObject(RuleConstant.RULES_ENGINE);\n+                JSONObject jsonExRules = jsonRulesEngineObject.optJSONObject(JsonFormConstants.JSON_FORM_KEY.EX_RULES);\n+                String fileName = JsonFormConstants.RULE + jsonExRules.optString(RuleConstant.RULES_DYNAMIC);\n+\n+                if (!rulesFileMap.containsKey(fileName)) {\n+                    Iterable<Object> objectIterable = readYamlFile(fileName, context);\n+                    List<Map<String, Object>> arrayList = new ArrayList<>();\n+                    while (objectIterable.iterator().hasNext()) {\n+                        Map<String, Object> map = (Map<String, Object>) objectIterable.iterator().next();\n+                        if (map != null) {\n+                            arrayList.add(map);\n+                        }\n+                    }\n+                    rulesFileMap.put(fileName, arrayList);\n+                }\n+\n+                List<Map<String, Object>> mapArrayList = rulesFileMap.get(fileName);\n+\n+                JSONArray jsonArrayRules = new JSONArray();\n+                JSONObject keyJsonObject = new JSONObject();\n+                keyJsonObject.put(KEY, uniqueId);\n+                jsonArrayRules.put(keyJsonObject);\n+                for (Map<String, Object> map : mapArrayList) {\n+                    JSONObject jsonRulesDynamicObject = new JSONObject();\n+                    String strCondition = (String) map.get(RuleConstant.CONDITION);\n+                    List<String> conditionKeys = getConditionKeys(strCondition);\n+                    for (String conditionKey : conditionKeys) {\n+                        strCondition = strCondition.replace(conditionKey, conditionKey + \"_\" + uniqueId);\n+                    }\n+                    jsonRulesDynamicObject.put(RuleConstant.NAME, String.valueOf(map.get(RuleConstant.NAME)).concat(\"_\").concat(uniqueId));\n+                    jsonRulesDynamicObject.put(RuleConstant.DESCRIPTION, String.valueOf(map.get(RuleConstant.DESCRIPTION)).concat(\"_\").concat(uniqueId));\n+                    jsonRulesDynamicObject.put(RuleConstant.PRIORITY, map.get(RuleConstant.PRIORITY));\n+                    jsonRulesDynamicObject.put(RuleConstant.ACTIONS, ((ArrayList<String>) map.get(RuleConstant.ACTIONS)).get(0));\n+                    jsonRulesDynamicObject.put(RuleConstant.CONDITION, String.valueOf(strCondition));\n+                    jsonArrayRules.put(jsonRulesDynamicObject);\n+                }\n+\n+                jsonExRules.put(RuleConstant.RULES_DYNAMIC, jsonArrayRules);\n+\n+            } else {\n+                String currKey = rules.keys().next();\n+                JSONObject rulesObj = rules.getJSONObject(currKey);\n+                String newKey = currKey + \"_\" + uniqueId;\n+                rules.remove(currKey);\n+                rules.put(newKey, rulesObj);\n+            }\n+        }\n+\n+    }\n+\n+    public static NativeFormsProperties getProperties(Context context) {\n+        NativeFormsProperties properties = new NativeFormsProperties();\n+\n+        try {\n+            AssetManager assetManager = context.getAssets();\n+            InputStream inputStream = assetManager.open(\"app.properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35ff30bfa67cf79753e542be83cf4b5a2bccf7d"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2026, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}