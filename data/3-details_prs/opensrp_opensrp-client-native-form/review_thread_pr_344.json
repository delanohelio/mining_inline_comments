{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDM5MDE1", "number": 344, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1MTo0NVrODZvSpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoxNzo1OFrODZvovg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE1ODEyOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1MTo0NVrOFgS_bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1MTo0NVrOFgS_bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQwOTkwMA==", "bodyText": "This might force everyone enable Java8 compatibility. Please test this version of native forms with an app that has not enable java 8 compatibility", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/344#discussion_r369409900", "createdAt": "2020-01-22T07:51:45Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/build.gradle", "diffHunk": "@@ -49,6 +50,11 @@ android {\n             includeAndroidResources = true\n         }\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331554df4c5a69794fe95733e44e1c4257eb2b60"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE2NjIwOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1NTozMVrOFgTEdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNzo1NTozMVrOFgTEdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMTE5MA==", "bodyText": "Might need to check the length here to avoid errors when you reference indexes that do not exist", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/344#discussion_r369411190", "createdAt": "2020-01-22T07:55:31Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "diffHunk": "@@ -79,33 +89,79 @@\n         final MaterialEditText referenceEditText = rootLayout.findViewById(R.id.reference_edit_text);\n         final String referenceEditTextHint = jsonObject.optString(REFERENCE_EDIT_TEXT_HINT, context.getString(R.string.enter_number_of_repeating_group_items));\n         final String repeatingGroupLabel = jsonObject.optString(REPEATING_GROUP_LABEL, context.getString(R.string.repeating_group_item));\n+        String remoteReferenceEditText = jsonObject.optString(REFERENCE_EDIT_TEXT);\n+\n+        // Enables us to fetch this value from a previous edit_text & disable this one\n+        retrieveRepeatingGroupCountFromRemoteReferenceEditText((JsonApi) context, referenceEditText, remoteReferenceEditText);\n         setUpReferenceEditText(referenceEditText, referenceEditTextHint, repeatingGroupLabel);\n \n-        doneButton = rootLayout.findViewById(R.id.btn_repeating_group_done);\n-        doneButton.setOnClickListener(new View.OnClickListener() {\n-            @Override\n-            public void onClick(View v) {\n-                addOnDoneAction(referenceEditText);\n-            }\n-        });\n+        // Disable the done button if the reference edit text being used is remote & has a valid value\n+        if (isRemoteReferenceValueUsed) {\n+            doneButton.setVisibility(View.GONE);\n+        } else {\n+            doneButton.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    addOnDoneAction(referenceEditText);\n+                }\n+            });\n+        }\n \n         ((JsonApi) context).addFormDataView(referenceEditText);\n \n         return views;\n     }\n \n+    private void retrieveRepeatingGroupCountFromRemoteReferenceEditText(@NonNull JsonApi context, @NonNull MaterialEditText referenceEditText, @Nullable String remoteReferenceEditTextAddress) throws JSONException {\n+        if (!TextUtils.isEmpty(remoteReferenceEditTextAddress) && remoteReferenceEditTextAddress.contains(\":\")) {\n+            String finalRemoteReferenceEditTextAddress = remoteReferenceEditTextAddress.trim();\n+            String[] addressSections = finalRemoteReferenceEditTextAddress.split(\":\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331554df4c5a69794fe95733e44e1c4257eb2b60"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzE4NTA4OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODowNToxM1rOFgTQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODowNToxM1rOFgTQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxNDE4Ng==", "bodyText": "Use StringUtils.isNotBlank it even checks for white spaces https://javakeypoint.wordpress.com/2018/01/18/stringutils-isnotempty-vs-stringutils-isnotblank/", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/344#discussion_r369414186", "createdAt": "2020-01-22T08:05:13Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "diffHunk": "@@ -79,33 +89,79 @@\n         final MaterialEditText referenceEditText = rootLayout.findViewById(R.id.reference_edit_text);\n         final String referenceEditTextHint = jsonObject.optString(REFERENCE_EDIT_TEXT_HINT, context.getString(R.string.enter_number_of_repeating_group_items));\n         final String repeatingGroupLabel = jsonObject.optString(REPEATING_GROUP_LABEL, context.getString(R.string.repeating_group_item));\n+        String remoteReferenceEditText = jsonObject.optString(REFERENCE_EDIT_TEXT);\n+\n+        // Enables us to fetch this value from a previous edit_text & disable this one\n+        retrieveRepeatingGroupCountFromRemoteReferenceEditText((JsonApi) context, referenceEditText, remoteReferenceEditText);\n         setUpReferenceEditText(referenceEditText, referenceEditTextHint, repeatingGroupLabel);\n \n-        doneButton = rootLayout.findViewById(R.id.btn_repeating_group_done);\n-        doneButton.setOnClickListener(new View.OnClickListener() {\n-            @Override\n-            public void onClick(View v) {\n-                addOnDoneAction(referenceEditText);\n-            }\n-        });\n+        // Disable the done button if the reference edit text being used is remote & has a valid value\n+        if (isRemoteReferenceValueUsed) {\n+            doneButton.setVisibility(View.GONE);\n+        } else {\n+            doneButton.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    addOnDoneAction(referenceEditText);\n+                }\n+            });\n+        }\n \n         ((JsonApi) context).addFormDataView(referenceEditText);\n \n         return views;\n     }\n \n+    private void retrieveRepeatingGroupCountFromRemoteReferenceEditText(@NonNull JsonApi context, @NonNull MaterialEditText referenceEditText, @Nullable String remoteReferenceEditTextAddress) throws JSONException {\n+        if (!TextUtils.isEmpty(remoteReferenceEditTextAddress) && remoteReferenceEditTextAddress.contains(\":\")) {\n+            String finalRemoteReferenceEditTextAddress = remoteReferenceEditTextAddress.trim();\n+            String[] addressSections = finalRemoteReferenceEditTextAddress.split(\":\");\n+            String remoteReferenceEditTextStep = addressSections[0];\n+            String remoteReferenceEditTextKey = addressSections[1];\n+            JSONObject stepJsonObject = context.getmJSONObject().optJSONObject(remoteReferenceEditTextStep);\n+\n+            if (stepJsonObject != null) {\n+                JSONArray fields = stepJsonObject.optJSONArray(FIELDS);\n+\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject stepField = fields.optJSONObject(i);\n+                    if (stepField != null && stepField.has(KEY) && stepField.getString(KEY).equals(remoteReferenceEditTextKey)) {\n+                        String fieldValue = stepField.optString(VALUE);\n+\n+                        if (!TextUtils.isEmpty(fieldValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331554df4c5a69794fe95733e44e1c4257eb2b60"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzIxNDcwOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoxNzo1OFrOFgTh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoxNzo1OFrOFgTh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxODc0OQ==", "bodyText": "Rename this parameter from v to something more readable", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/344#discussion_r369418749", "createdAt": "2020-01-22T08:17:58Z", "author": {"login": "dubdabasoduba"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/widgets/RepeatingGroupFactory.java", "diffHunk": "@@ -79,33 +89,79 @@\n         final MaterialEditText referenceEditText = rootLayout.findViewById(R.id.reference_edit_text);\n         final String referenceEditTextHint = jsonObject.optString(REFERENCE_EDIT_TEXT_HINT, context.getString(R.string.enter_number_of_repeating_group_items));\n         final String repeatingGroupLabel = jsonObject.optString(REPEATING_GROUP_LABEL, context.getString(R.string.repeating_group_item));\n+        String remoteReferenceEditText = jsonObject.optString(REFERENCE_EDIT_TEXT);\n+\n+        // Enables us to fetch this value from a previous edit_text & disable this one\n+        retrieveRepeatingGroupCountFromRemoteReferenceEditText((JsonApi) context, referenceEditText, remoteReferenceEditText);\n         setUpReferenceEditText(referenceEditText, referenceEditTextHint, repeatingGroupLabel);\n \n-        doneButton = rootLayout.findViewById(R.id.btn_repeating_group_done);\n-        doneButton.setOnClickListener(new View.OnClickListener() {\n-            @Override\n-            public void onClick(View v) {\n-                addOnDoneAction(referenceEditText);\n-            }\n-        });\n+        // Disable the done button if the reference edit text being used is remote & has a valid value\n+        if (isRemoteReferenceValueUsed) {\n+            doneButton.setVisibility(View.GONE);\n+        } else {\n+            doneButton.setOnClickListener(new View.OnClickListener() {\n+                @Override\n+                public void onClick(View v) {\n+                    addOnDoneAction(referenceEditText);\n+                }\n+            });\n+        }\n \n         ((JsonApi) context).addFormDataView(referenceEditText);\n \n         return views;\n     }\n \n+    private void retrieveRepeatingGroupCountFromRemoteReferenceEditText(@NonNull JsonApi context, @NonNull MaterialEditText referenceEditText, @Nullable String remoteReferenceEditTextAddress) throws JSONException {\n+        if (!TextUtils.isEmpty(remoteReferenceEditTextAddress) && remoteReferenceEditTextAddress.contains(\":\")) {\n+            String finalRemoteReferenceEditTextAddress = remoteReferenceEditTextAddress.trim();\n+            String[] addressSections = finalRemoteReferenceEditTextAddress.split(\":\");\n+            String remoteReferenceEditTextStep = addressSections[0];\n+            String remoteReferenceEditTextKey = addressSections[1];\n+            JSONObject stepJsonObject = context.getmJSONObject().optJSONObject(remoteReferenceEditTextStep);\n+\n+            if (stepJsonObject != null) {\n+                JSONArray fields = stepJsonObject.optJSONArray(FIELDS);\n+\n+                for (int i = 0; i < fields.length(); i++) {\n+                    JSONObject stepField = fields.optJSONObject(i);\n+                    if (stepField != null && stepField.has(KEY) && stepField.getString(KEY).equals(remoteReferenceEditTextKey)) {\n+                        String fieldValue = stepField.optString(VALUE);\n+\n+                        if (!TextUtils.isEmpty(fieldValue)) {\n+                            try {\n+                                remoteReferenceValue = Integer.parseInt(fieldValue);\n+                                isRemoteReferenceValueUsed = true;\n+\n+                                // Start the repeating groups\n+                                attachRepeatingGroup(referenceEditText.getParent().getParent(), remoteReferenceValue);\n+                            } catch (NumberFormatException ex) {\n+                                Timber.e(ex);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     private void setUpReferenceEditText(final MaterialEditText referenceEditText, String referenceEditTextHint, String repeatingGroupLabel) throws JSONException {\n+        // We should disable this edit_text if another referenced edit text is being used\n         Context context = widgetArgs.getContext();\n-        referenceEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n-            @Override\n-            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n-                if (actionId == EditorInfo.IME_ACTION_DONE) {\n-                    addOnDoneAction(v);\n-                    return true;\n+        if (isRemoteReferenceValueUsed) {\n+            referenceEditText.setVisibility(View.GONE);\n+        } else {\n+            referenceEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n+                @Override\n+                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331554df4c5a69794fe95733e44e1c4257eb2b60"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2074, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}