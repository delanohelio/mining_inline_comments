{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NDU0NDcx", "number": 403, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo1NzoyOVrODzvbyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozNDoyNlrOEUoV1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTgxMTMxOnYy", "diffSide": "RIGHT", "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo1NzoyOVrOGIV0aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyMToxMFrOG44GRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ==", "bodyText": "This class looks very similar to  com.vijay.jsonwizard.domain.Form.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411399275", "createdAt": "2020-04-20T13:57:29Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.smartregister.nativeform.domain;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+import org.smartregister.nativeform.util.ResourceType;\n+\n+import java.util.Set;\n+\n+public class ConfigForm {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fab70629397ae47d6f6ff502ff1451fd2f444e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3NzM5Mg==", "bodyText": "This was by design, its a wrapper class to enable serialization and deserialization of the Form class. The shortcoming with the form class is it has links to dynamic referenced constants\nIt's converted back to form here\norg.smartregister.nativeform.domain.ConfigForm#toForm", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412277392", "createdAt": "2020-04-21T15:17:29Z", "author": {"login": "rkodev"}, "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.smartregister.nativeform.domain;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+import org.smartregister.nativeform.util.ResourceType;\n+\n+import java.util.Set;\n+\n+public class ConfigForm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, "originalCommit": {"oid": "7fab70629397ae47d6f6ff502ff1451fd2f444e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNTkxMw==", "bodyText": "Is there no way to share common fields using inheritance?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412725913", "createdAt": "2020-04-22T07:08:21Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.smartregister.nativeform.domain;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+import org.smartregister.nativeform.util.ResourceType;\n+\n+import java.util.Set;\n+\n+public class ConfigForm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, "originalCommit": {"oid": "7fab70629397ae47d6f6ff502ff1451fd2f444e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MDkzMQ==", "bodyText": "Direct inheritance is not possible in this case. Unless the config object changes the names of the parameters, getters and setters will not work.  All these fields are changing types\n\n    private int homeAsUpIndicator;\n\n    private int actionBarBackground;\n    private int navigationBackground;\n\n    private int backIcon;\n\nto\n    private Integer homeAsUpIndicator;\n\n    private String actionBarBackground;\n    private String navigationBackground;\n\n    private String backIcon;", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462290931", "createdAt": "2020-07-29T13:18:44Z", "author": {"login": "rkodev"}, "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.smartregister.nativeform.domain;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+import org.smartregister.nativeform.util.ResourceType;\n+\n+import java.util.Set;\n+\n+public class ConfigForm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, "originalCommit": {"oid": "7fab70629397ae47d6f6ff502ff1451fd2f444e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MjU1MA==", "bodyText": "Cool.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462292550", "createdAt": "2020-07-29T13:21:10Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/domain/ConfigForm.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.smartregister.nativeform.domain;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+import org.smartregister.nativeform.util.ResourceType;\n+\n+import java.util.Set;\n+\n+public class ConfigForm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5OTI3NQ=="}, "originalCommit": {"oid": "7fab70629397ae47d6f6ff502ff1451fd2f444e4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk4NjIyOnYy", "diffSide": "RIGHT", "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMTowNlrOGIXdkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNToyNjo0MVrOGJL4ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjE5Mw==", "bodyText": "json.form this appears throughout the code, maybe use a constant in it's place?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411426193", "createdAt": "2020-04-20T14:31:06Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NTQxMg==", "bodyText": "Also, snake case? :)", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411445412", "createdAt": "2020-04-20T14:55:13Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjE5Mw=="}, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4NTA4Ng==", "bodyText": "resolved", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412285086", "createdAt": "2020-04-21T15:26:41Z", "author": {"login": "rkodev"}, "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNjE5Mw=="}, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAwMDE4OnYy", "diffSide": "RIGHT", "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMzo0N1rOGIXl-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMzo0N1rOGIXl-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODM0NA==", "bodyText": "Snake case?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411428344", "createdAt": "2020-04-20T14:33:47Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : image_source) {\n+                    exportDirectory(assetManager, sourceDir, context, root, true);\n+                }\n+\n+                readForms(context, presenter);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n+        String[] local_assets = assetManager.list(sourceDir);\n+        if (local_assets != null && local_assets.length > 0) {\n+            for (String assetName : local_assets) {\n+                // export all in\n+                try {\n+\n+                    // if the assetName is a folder extract this\n+                    String[] child_assets = assetManager.list(sourceDir + \"/\" + assetName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAyMDg2OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozODowNVrOGIXyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoxMDo0M1rOGJm4Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTYxMg==", "bodyText": "Why not use convertStreamToString here?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411431612", "createdAt": "2020-04-20T14:38:05Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import timber.log.Timber;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n+        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+    }\n+\n+    @Override\n+    public JSONObject getFormFromFile(Context context, String fileName) {\n+        try {\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n+\n+            InputStream inputStream = context.getAssets()\n+                    .open(newFileName);\n+\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n+                    \"UTF-8\"));\n+            String jsonString;\n+            StringBuilder stringBuilder = new StringBuilder();\n+            while ((jsonString = reader.readLine()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI4ODc5OA==", "bodyText": "The file reader util resides in the sample directory but Asset File Reader exists in the native form directory", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412288798", "createdAt": "2020-04-21T15:31:20Z", "author": {"login": "rkodev"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import timber.log.Timber;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n+        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+    }\n+\n+    @Override\n+    public JSONObject getFormFromFile(Context context, String fileName) {\n+        try {\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n+\n+            InputStream inputStream = context.getAssets()\n+                    .open(newFileName);\n+\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n+                    \"UTF-8\"));\n+            String jsonString;\n+            StringBuilder stringBuilder = new StringBuilder();\n+            while ((jsonString = reader.readLine()) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTYxMg=="}, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNzM4Mg==", "bodyText": "Wouldn't it be easier to move the file reader utils to the native form library then?\nThese will be useful to other apps as well.", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r412727382", "createdAt": "2020-04-22T07:10:43Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import timber.log.Timber;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n+        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+    }\n+\n+    @Override\n+    public JSONObject getFormFromFile(Context context, String fileName) {\n+        try {\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n+\n+            InputStream inputStream = context.getAssets()\n+                    .open(newFileName);\n+\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream,\n+                    \"UTF-8\"));\n+            String jsonString;\n+            StringBuilder stringBuilder = new StringBuilder();\n+            while ((jsonString = reader.readLine()) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTYxMg=="}, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjAyNjA4OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozOTowN1rOGIX11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozOTowN1rOGIX11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjQwNw==", "bodyText": "Why not use getFileInputStream here?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411432407", "createdAt": "2020-04-20T14:39:07Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import timber.log.Timber;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));\n+        return MVELRuleFactory.createRulesFrom(bufferedReader);\n+    }\n+\n+    @Override\n+    public JSONObject getFormFromFile(Context context, String fileName) {\n+        try {\n+            String newFileName = \"json.form/\" + fileName + \".json\";\n+\n+            InputStream inputStream = context.getAssets()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA5NjkyOnYy", "diffSide": "RIGHT", "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1Mjo0NVrOGIYglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoxNDozNVrOG430cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzM1MA==", "bodyText": "Snake case?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r411443350", "createdAt": "2020-04-20T14:52:45Z", "author": {"login": "vincent-karuri"}, "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : image_source) {\n+                    exportDirectory(assetManager, sourceDir, context, root, true);\n+                }\n+\n+                readForms(context, presenter);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n+        String[] local_assets = assetManager.list(sourceDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4Nzk4Nw==", "bodyText": "Resolved", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462287987", "createdAt": "2020-07-29T13:14:35Z", "author": {"login": "rkodev"}, "path": "sample/src/main/java/org/smartregister/nativeform/interactor/FormTesterInteractor.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package org.smartregister.nativeform.interactor;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+import android.os.Environment;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.support.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.domain.Form;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.smartregister.nativeform.contract.FormTesterContract;\n+import org.smartregister.nativeform.domain.ConfigForm;\n+import org.smartregister.nativeform.domain.JsonForm;\n+import org.smartregister.nativeform.util.FileReaderUtil;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class FormTesterInteractor implements FormTesterContract.Interactor {\n+    private Gson gson = null;\n+    private ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+    @Override\n+    public void exportDefaultForms(Context context, FormTesterContract.Presenter presenter) {\n+        executorService.execute(() -> {\n+            AssetManager assetManager = context.getAssets();\n+            try {\n+                String root = verifyOrCreateDiskDirectory();\n+\n+                String[] image_source = {\"json.form\", \"json.form.config\", \"img\", \"image\", \"rule\"};\n+                for (String sourceDir : image_source) {\n+                    exportDirectory(assetManager, sourceDir, context, root, true);\n+                }\n+\n+                readForms(context, presenter);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    private void exportDirectory(AssetManager assetManager, String sourceDir, Context context, String root, boolean createRoot) throws IOException {\n+        String[] local_assets = assetManager.list(sourceDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzM1MA=="}, "originalCommit": {"oid": "9040cb1ee36ec10938b460948e8fc7a11e35a0c9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTQ4MzA1OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzozMDo0MVrOG5XSdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzozMDo0MVrOG5XSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMzU3NQ==", "bodyText": "You can use Timber", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r462803575", "createdAt": "2020-07-30T07:30:41Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/utils/Utils.java", "diffHunk": "@@ -803,6 +808,16 @@ public static String formatDateToPattern(String date, String inputFormat, String\n         format = new SimpleDateFormat(outputFormat);\n         return format.format(newDate);\n     }\n+\n+    public static int getResourceId(Context context, String name, ResourceType resourceType)\n+    {\n+        try {\n+            return context.getResources().getIdentifier(name, resourceType.getType(), context.getPackageName());\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5348ec346467b4aef3414100d8f2985e942f8656"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDYyNDAzOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDoyMToyNFrOG67ezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1NTozMFrOG680hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0NTEzMw==", "bodyText": "Why not call getFileInputStream(Context context, String fileName) here?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464445133", "createdAt": "2020-08-03T14:21:24Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+import com.vijay.jsonwizard.utils.Utils;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5fffd6b1e65b485e2736ec3619bea96645af7fb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2NDQxMQ==", "bodyText": "The return type is different. InputStream vs InputStreamReader", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464464411", "createdAt": "2020-08-03T14:51:07Z", "author": {"login": "rkodev"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+import com.vijay.jsonwizard.utils.Utils;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0NTEzMw=="}, "originalCommit": {"oid": "b5fffd6b1e65b485e2736ec3619bea96645af7fb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2NzA3Ng==", "bodyText": "cool", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464467076", "createdAt": "2020-08-03T14:55:30Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/main/java/com/vijay/jsonwizard/filesource/AssetsFileSource.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+\n+import com.vijay.jsonwizard.constants.JsonFormConstants;\n+import com.vijay.jsonwizard.interfaces.FormFileSource;\n+import com.vijay.jsonwizard.utils.Utils;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.jeasy.rules.mvel.MVELRuleFactory;\n+import org.json.JSONObject;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+/***\n+ * used to read files stored on the APP's asset folder\n+ *\n+ */\n+public class AssetsFileSource implements FormFileSource {\n+\n+    public static AssetsFileSource INSTANCE = new AssetsFileSource();\n+\n+    private AssetsFileSource() {\n+    }\n+\n+    @Override\n+    public Rules getRulesFromFile(Context context, String fileName) throws Exception {\n+        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(context.getAssets().open(fileName)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0NTEzMw=="}, "originalCommit": {"oid": "b5fffd6b1e65b485e2736ec3619bea96645af7fb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDY3MDIyOnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozMjoyNlrOG6764w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1NjozOFrOG683gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjMyMw==", "bodyText": "Wouldn't it be better to verify that the content is as expected and not just that it's not empty?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464452323", "createdAt": "2020-08-03T14:32:26Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.os.Environment;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Environment.class})\n+public class DiskFileSourceTest {\n+\n+    @Rule\n+    public TemporaryFolder storageDirectory = new TemporaryFolder();\n+\n+    @Mock\n+    private Context context;\n+\n+    private DiskFileSource diskFileSource = Mockito.spy(DiskFileSource.INSTANCE);\n+\n+    @Mock\n+    private File externalFile;\n+\n+    @Before\n+    public void setUp() {\n+        Mockito.doReturn(\"/tmp/downloads\").when(externalFile).toString();\n+\n+        PowerMockito.mockStatic(Environment.class);\n+        Mockito.when(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)).thenReturn(externalFile);\n+    }\n+\n+    @Test\n+    public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n+\n+        String specifiedString = \"1\";\n+        String relevance = \"---\\n\" +\n+                \"name: step1_last_name\\n\" +\n+                \"description: last_name\\n\" +\n+                \"priority: 1\\n\" +\n+                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"actions:\\n\" +\n+                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+\n+        InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n+        Mockito.doReturn(inputStream).when(diskFileSource).getInputStream(Mockito.any(File.class));\n+\n+        Rules rules = diskFileSource.getRulesFromFile(context, \"test_rule\");\n+        Assert.assertFalse(rules.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Nzg0Mg==", "bodyText": "The responsibility of the interface is to return the Rules Object when given a rule but not to verify that the Rule object works.  i.e Given a syntactically correct input of type A, you expect an output or type B", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464467842", "createdAt": "2020-08-03T14:56:38Z", "author": {"login": "rkodev"}, "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.os.Environment;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Environment.class})\n+public class DiskFileSourceTest {\n+\n+    @Rule\n+    public TemporaryFolder storageDirectory = new TemporaryFolder();\n+\n+    @Mock\n+    private Context context;\n+\n+    private DiskFileSource diskFileSource = Mockito.spy(DiskFileSource.INSTANCE);\n+\n+    @Mock\n+    private File externalFile;\n+\n+    @Before\n+    public void setUp() {\n+        Mockito.doReturn(\"/tmp/downloads\").when(externalFile).toString();\n+\n+        PowerMockito.mockStatic(Environment.class);\n+        Mockito.when(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)).thenReturn(externalFile);\n+    }\n+\n+    @Test\n+    public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n+\n+        String specifiedString = \"1\";\n+        String relevance = \"---\\n\" +\n+                \"name: step1_last_name\\n\" +\n+                \"description: last_name\\n\" +\n+                \"priority: 1\\n\" +\n+                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"actions:\\n\" +\n+                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+\n+        InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n+        Mockito.doReturn(inputStream).when(diskFileSource).getInputStream(Mockito.any(File.class));\n+\n+        Rules rules = diskFileSource.getRulesFromFile(context, \"test_rule\");\n+        Assert.assertFalse(rules.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjMyMw=="}, "originalCommit": {"oid": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDY3MTA3OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozMjozN1rOG677bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1Njo0N1rOG683_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjQ2Mw==", "bodyText": "Wouldn't it be better to verify that the content is as expected and not just that it's not empty?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464452463", "createdAt": "2020-08-03T14:32:37Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AssetsFileSourceTest {\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private AssetManager assetManager;\n+\n+    private AssetsFileSource assetsFileSource = AssetsFileSource.INSTANCE;\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    public void testInstanceIsNoNull() {\n+        Assert.assertNotNull(AssetsFileSource.INSTANCE);\n+    }\n+\n+    @Test\n+    public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n+        String specifiedString = \"1\";\n+        String relevance = \"---\\n\" +\n+                \"name: step1_last_name\\n\" +\n+                \"description: last_name\\n\" +\n+                \"priority: 1\\n\" +\n+                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"actions:\\n\" +\n+                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+\n+\n+        Mockito.when(context.getAssets()).thenReturn(assetManager);\n+        InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n+        Mockito.when(assetManager.open(\"rule/test\")).thenReturn(inputStream);\n+\n+        Rules rules = assetsFileSource.getRulesFromFile(context, \"rule/test\");\n+        Assert.assertFalse(rules.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Nzk2NA==", "bodyText": "The responsibility of the interface is to return the Rules Object when given a rule but not to verify that the Rule object works. i.e Given a syntactically correct input of type A, you expect an output or type B", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464467964", "createdAt": "2020-08-03T14:56:47Z", "author": {"login": "rkodev"}, "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/AssetsFileSourceTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AssetsFileSourceTest {\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private AssetManager assetManager;\n+\n+    private AssetsFileSource assetsFileSource = AssetsFileSource.INSTANCE;\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    public void testInstanceIsNoNull() {\n+        Assert.assertNotNull(AssetsFileSource.INSTANCE);\n+    }\n+\n+    @Test\n+    public void testGetRulesFromFileConvertsFileToRules() throws Exception {\n+        String specifiedString = \"1\";\n+        String relevance = \"---\\n\" +\n+                \"name: step1_last_name\\n\" +\n+                \"description: last_name\\n\" +\n+                \"priority: 1\\n\" +\n+                \"condition: \\\"step1_first_Name.equalsIgnoreCase('Doe')\\\"\\n\" +\n+                \"actions:\\n\" +\n+                \"    - \\\"calculation = \" + specifiedString + \"\\\"\";\n+\n+\n+        Mockito.when(context.getAssets()).thenReturn(assetManager);\n+        InputStream inputStream = new ByteArrayInputStream(relevance.getBytes());\n+        Mockito.when(assetManager.open(\"rule/test\")).thenReturn(inputStream);\n+\n+        Rules rules = assetsFileSource.getRulesFromFile(context, \"rule/test\");\n+        Assert.assertFalse(rules.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MjQ2Mw=="}, "originalCommit": {"oid": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDY3OTI2OnYy", "diffSide": "RIGHT", "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozNDoyNlrOG68ARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozNDoyNlrOG68ARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1MzcwMw==", "bodyText": "Do you need to spy the SUT? Is there an alternative?", "url": "https://github.com/opensrp/opensrp-client-native-form/pull/403#discussion_r464453703", "createdAt": "2020-08-03T14:34:26Z", "author": {"login": "vincent-karuri"}, "path": "android-json-form-wizard/src/test/java/com/vijay/jsonwizard/filesource/DiskFileSourceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.vijay.jsonwizard.filesource;\n+\n+import android.content.Context;\n+import android.os.Environment;\n+\n+import org.jeasy.rules.api.Rules;\n+import org.json.JSONObject;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Environment.class})\n+public class DiskFileSourceTest {\n+\n+    @Rule\n+    public TemporaryFolder storageDirectory = new TemporaryFolder();\n+\n+    @Mock\n+    private Context context;\n+\n+    private DiskFileSource diskFileSource = Mockito.spy(DiskFileSource.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a12cdfb2e6875ffb1f7163cf995f388a4d6584"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2039, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}