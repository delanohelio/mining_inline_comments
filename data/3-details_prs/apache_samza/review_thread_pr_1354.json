{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExODYyMzAw", "number": 1354, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoyMToxNFrOD4cdtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozNDoxOFrOD4cr2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTEzMjA1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/JobCoordinatorLaunchUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoyMToxNFrOGPRncA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozODo1NFrOGPSGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MDQ0OA==", "bodyText": "nit pick: new CoordinatorStreamStore(CoordinatorStreamUtil.buildCoordinatorStreamConfig(fullConfig), new MetricsRegistryMap());", "url": "https://github.com/apache/samza/pull/1354#discussion_r418670448", "createdAt": "2020-05-01T18:21:14Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/JobCoordinatorLaunchUtil.java", "diffHunk": "@@ -57,14 +58,17 @@ public static void run(SamzaApplication app, Config config) {\n       throw new SamzaException(\"Only support single remote job is supported.\");\n     }\n \n-    Config finalConfig = jobConfigs.get(0);\n+    Config fullConfig = jobConfigs.get(0);\n+    MetricsRegistryMap metrics = new MetricsRegistryMap();\n+    MetadataStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODM3NA==", "bodyText": "Cannot do it because the same MetricsRegistryMap needs to be passed in ClusterBasedJobCoordinator's constructor as well.", "url": "https://github.com/apache/samza/pull/1354#discussion_r418678374", "createdAt": "2020-05-01T18:38:54Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/JobCoordinatorLaunchUtil.java", "diffHunk": "@@ -57,14 +58,17 @@ public static void run(SamzaApplication app, Config config) {\n       throw new SamzaException(\"Only support single remote job is supported.\");\n     }\n \n-    Config finalConfig = jobConfigs.get(0);\n+    Config fullConfig = jobConfigs.get(0);\n+    MetricsRegistryMap metrics = new MetricsRegistryMap();\n+    MetadataStore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MDQ0OA=="}, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTEzNTgyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/config/JobConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoyMjoyOVrOGPRp0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozODoxMlrOGPSFNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTA1OQ==", "bodyText": "Could we use the\npublic boolean isAutosizingConfig(String configParam)\nmethod in JobConfig for this?", "url": "https://github.com/apache/samza/pull/1354#discussion_r418671059", "createdAt": "2020-05-01T18:22:29Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/config/JobConfig.java", "diffHunk": "@@ -132,7 +132,7 @@\n \n   // Auto-sizing related configs that take precedence over respective sizing confings job.container.count, etc,\n   // *only* when job.autosizing.enabled is true. Otherwise current behavior is maintained.\n-  private static final String JOB_AUTOSIZING_CONFIG_PREFIX = \"job.autosizing.\"; // used to determine if a config is related to autosizing\n+  public static final String JOB_AUTOSIZING_CONFIG_PREFIX = \"job.autosizing.\"; // used to determine if a config is related to autosizing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODA3MQ==", "bodyText": "Updated", "url": "https://github.com/apache/samza/pull/1354#discussion_r418678071", "createdAt": "2020-05-01T18:38:12Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/config/JobConfig.java", "diffHunk": "@@ -132,7 +132,7 @@\n \n   // Auto-sizing related configs that take precedence over respective sizing confings job.container.count, etc,\n   // *only* when job.autosizing.enabled is true. Otherwise current behavior is maintained.\n-  private static final String JOB_AUTOSIZING_CONFIG_PREFIX = \"job.autosizing.\"; // used to determine if a config is related to autosizing\n+  public static final String JOB_AUTOSIZING_CONFIG_PREFIX = \"job.autosizing.\"; // used to determine if a config is related to autosizing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTA1OQ=="}, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE2MzMyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozMjoyMFrOGPR7mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo0MTowOFrOGPSKgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTYxMA==", "bodyText": "should we call it readAutosizingConfigs?", "url": "https://github.com/apache/samza/pull/1354#discussion_r418675610", "createdAt": "2020-05-01T18:32:20Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3OTQyNQ==", "bodyText": "We can make it specific to autosizing too, or we can make it generic so we may expand this method to include more when necessary, which do you prefer?", "url": "https://github.com/apache/samza/pull/1354#discussion_r418679425", "createdAt": "2020-05-01T18:41:08Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTYxMA=="}, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE2ODI2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozNDoxOFrOGPR-2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoyMzoyMVrOGQVqPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ==", "bodyText": "Could be simplified along the lines of\nJobConfig jobConfig = new JobConfig(config);\nlaunchConfig = config.map().filter(jobConfig.isAutosizingConfig(key))", "url": "https://github.com/apache/samza/pull/1354#discussion_r418676441", "createdAt": "2020-05-01T18:34:18Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {\n+    if (!config.getBoolean(JobConfig.JOB_AUTOSIZING_ENABLED, false)) {\n+      new MapConfig()\n+    } else {\n+      val config = readConfigFromCoordinatorStream(metadataStore)\n+      val launchConfig: util.Map[String, String] = new util.HashMap[String, String]()\n+      for ((key:String, value:String) <- config.asScala) {\n+        if (key.startsWith(JobConfig.JOB_AUTOSIZING_CONFIG_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3OTA5MQ==", "bodyText": "I was planning to do it, but it seems that this is in Scala and I cannot do\nconfig.entrySet().stream().map().collect()\ndo you know how to do it in scala?", "url": "https://github.com/apache/samza/pull/1354#discussion_r418679091", "createdAt": "2020-05-01T18:40:22Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {\n+    if (!config.getBoolean(JobConfig.JOB_AUTOSIZING_ENABLED, false)) {\n+      new MapConfig()\n+    } else {\n+      val config = readConfigFromCoordinatorStream(metadataStore)\n+      val launchConfig: util.Map[String, String] = new util.HashMap[String, String]()\n+      for ((key:String, value:String) <- config.asScala) {\n+        if (key.startsWith(JobConfig.JOB_AUTOSIZING_CONFIG_PREFIX)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ=="}, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2MDU1Mw==", "bodyText": "How about\nlaunchConfig = config.asScala.filterKeys(x => JobConfig.isAutosizingConfig(x))", "url": "https://github.com/apache/samza/pull/1354#discussion_r419760553", "createdAt": "2020-05-04T22:13:59Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {\n+    if (!config.getBoolean(JobConfig.JOB_AUTOSIZING_ENABLED, false)) {\n+      new MapConfig()\n+    } else {\n+      val config = readConfigFromCoordinatorStream(metadataStore)\n+      val launchConfig: util.Map[String, String] = new util.HashMap[String, String]()\n+      for ((key:String, value:String) <- config.asScala) {\n+        if (key.startsWith(JobConfig.JOB_AUTOSIZING_CONFIG_PREFIX)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ=="}, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4NTI3Nw==", "bodyText": "This is great!", "url": "https://github.com/apache/samza/pull/1354#discussion_r419785277", "createdAt": "2020-05-04T23:23:21Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {\n+    if (!config.getBoolean(JobConfig.JOB_AUTOSIZING_ENABLED, false)) {\n+      new MapConfig()\n+    } else {\n+      val config = readConfigFromCoordinatorStream(metadataStore)\n+      val launchConfig: util.Map[String, String] = new util.HashMap[String, String]()\n+      for ((key:String, value:String) <- config.asScala) {\n+        if (key.startsWith(JobConfig.JOB_AUTOSIZING_CONFIG_PREFIX)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ=="}, "originalCommit": {"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1412, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}