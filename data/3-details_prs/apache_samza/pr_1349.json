{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjE5Mzgz", "number": 1349, "title": "SAMZA-2514: Refactor codes to make runWithClassLoader method more generic", "bodyText": "Issues\nCurrently, we define the runWithClassLoader method in ClusterBasedJobCoordinator to support split deployment. However, the job container needs a similar runWithClassLoader method to support split deployment. So we'd better make the runWithClassLoader method more generic, then LocalContainerRunner can just use it.\nChanges\nAdd new util class SplitDeploymentUtil  to define generic runWithClassLoader method.\nTests\n\n All unit tests are passed\n\nAPI Changes\nNone\nUpgrade Instructions\nNone\nUsage Instructions\nNone", "createdAt": "2020-04-23T00:48:02Z", "url": "https://github.com/apache/samza/pull/1349", "merged": true, "mergeCommit": {"oid": "e86951f102c7a854d343b1f80dc2796be29c9c81"}, "closed": true, "closedAt": "2020-04-24T16:40:25Z", "author": {"login": "alnzng"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaVFAJgBqjMyNjMzMTA2OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcao7esgH2gAyNDA3NjE5MzgzOjIyYjNkNDQwYTQyMzU1ZDNjY2M1MjU5YjE5NGExZTNiYjdkY2E1Yjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a52c6cead3d4d9d081e1c2c77edb85ec8d552291", "author": {"user": {"login": "alnzng", "name": "Alan Zhang"}}, "url": "https://github.com/apache/samza/commit/a52c6cead3d4d9d081e1c2c77edb85ec8d552291", "committedDate": "2020-04-23T00:44:12Z", "message": "Refactor codes to make runWithClassLoader method more generic\n\nSigned-off-by: Alan Zhang <shuai.xyz@gmail.com>"}, "afterCommit": {"oid": "b783b865a5f19ec07a4d28ded2604170125b466b", "author": {"user": {"login": "alnzng", "name": "Alan Zhang"}}, "url": "https://github.com/apache/samza/commit/b783b865a5f19ec07a4d28ded2604170125b466b", "committedDate": "2020-04-23T04:21:20Z", "message": "Refactor codes to make runWithClassLoader method more generic\n\nSigned-off-by: Alan Zhang <shuai.xyz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3c780c51511a9414ca15555230474b0c1b4e45", "author": {"user": {"login": "alnzng", "name": "Alan Zhang"}}, "url": "https://github.com/apache/samza/commit/8a3c780c51511a9414ca15555230474b0c1b4e45", "committedDate": "2020-04-23T05:17:19Z", "message": "Refactor codes to make runWithClassLoader method more generic\n\nSigned-off-by: Alan Zhang <shuai.xyz@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b783b865a5f19ec07a4d28ded2604170125b466b", "author": {"user": {"login": "alnzng", "name": "Alan Zhang"}}, "url": "https://github.com/apache/samza/commit/b783b865a5f19ec07a4d28ded2604170125b466b", "committedDate": "2020-04-23T04:21:20Z", "message": "Refactor codes to make runWithClassLoader method more generic\n\nSigned-off-by: Alan Zhang <shuai.xyz@gmail.com>"}, "afterCommit": {"oid": "8a3c780c51511a9414ca15555230474b0c1b4e45", "author": {"user": {"login": "alnzng", "name": "Alan Zhang"}}, "url": "https://github.com/apache/samza/commit/8a3c780c51511a9414ca15555230474b0c1b4e45", "committedDate": "2020-04-23T05:17:19Z", "message": "Refactor codes to make runWithClassLoader method more generic\n\nSigned-off-by: Alan Zhang <shuai.xyz@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTU4NzM5", "url": "https://github.com/apache/samza/pull/1349#pullrequestreview-399558739", "createdAt": "2020-04-24T00:07:45Z", "commit": {"oid": "8a3c780c51511a9414ca15555230474b0c1b4e45"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNzo0NlrOGLBDjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNzo0NlrOGLBDjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDgxNQ==", "bodyText": "Minor: Could you please update the method name in the log message?", "url": "https://github.com/apache/samza/pull/1349#discussion_r414204815", "createdAt": "2020-04-24T00:07:46Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/util/SplitDeploymentUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.util;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.config.ShellCommandConfig;\n+\n+\n+public final class SplitDeploymentUtil {\n+\n+  /**\n+   * The split deployment feature uses system env {@code ShellCommandConfig.ENV_SPLIT_DEPLOYMENT_ENABLED} to represent\n+   * if the user chooses to enable it.\n+   * This function helps to detect if the split deployment feature is enabled.\n+   *\n+   * @return true if split deployment is enabled; vice versa\n+   */\n+  public static boolean isSplitDeploymentEnabled() {\n+    return Boolean.parseBoolean(System.getenv(ShellCommandConfig.ENV_SPLIT_DEPLOYMENT_ENABLED));\n+  }\n+\n+  /**\n+   * Execute the runner class using a separate isolated classloader.\n+   * @param classLoader {@link ClassLoader} to use to load the runner class which will run\n+   * @param originalRunnerClass {@link Class} for which will be executed with the new class loader.\n+   * @param runMethodName run method name of runner class\n+   * @param runMethodArgs arguments to pass to run method\n+   */\n+  public static void runWithClassLoader(ClassLoader classLoader, Class<?> originalRunnerClass, String runMethodName,\n+      String[] runMethodArgs) {\n+    // need to use the isolated classloader to load run method and then execute using that new class\n+    Class<?> runnerClass;\n+    try {\n+      runnerClass = classLoader.loadClass(originalRunnerClass.getName());\n+    } catch (ClassNotFoundException e) {\n+      throw new SamzaException(String.format(\n+          \"Isolation was enabled, but unable to find %s in isolated classloader\", originalRunnerClass.getName()), e);\n+    }\n+\n+    // save the current context classloader so it can be reset after finishing the call to run method\n+    ClassLoader previousContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    // this is needed because certain libraries (e.g. log4j) use the context classloader\n+    Thread.currentThread().setContextClassLoader(classLoader);\n+\n+    try {\n+      executeRunForRunnerClass(runnerClass, runMethodName, runMethodArgs);\n+    } finally {\n+      // reset the context class loader; it's good practice, and could be important when running a test suite\n+      Thread.currentThread().setContextClassLoader(previousContextClassLoader);\n+    }\n+  }\n+\n+  private static void executeRunForRunnerClass(Class<?> runnerClass, String runMethodName, String[] runMethodArgs) {\n+    Method runMethod;\n+    try {\n+      runMethod = runnerClass.getDeclaredMethod(runMethodName, String[].class);\n+    } catch (NoSuchMethodException e) {\n+      throw new SamzaException(String.format(\"Isolation was enabled, but unable to find %s method\", runMethodName), e);\n+    }\n+    // only sets accessible flag for this method instance\n+    runMethod.setAccessible(true);\n+\n+    try {\n+      // wrapping args in object array so that args is passed as a single argument to the method\n+      runMethod.invoke(null, new Object[]{runMethodArgs});\n+    } catch (IllegalAccessException | InvocationTargetException e) {\n+      throw new SamzaException(\"Exception while executing runClusterBasedJobCoordinator method\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3c780c51511a9414ca15555230474b0c1b4e45"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b3d440a42355d3ccc5259b194a1e3bb7dca5b8", "author": {"user": {"login": "alnzng", "name": "Alan Zhang"}}, "url": "https://github.com/apache/samza/commit/22b3d440a42355d3ccc5259b194a1e3bb7dca5b8", "committedDate": "2020-04-24T03:29:17Z", "message": "fix wrong method name in exception message\n\nSigned-off-by: Alan Zhang <shuai.xyz@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4571, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}