{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1Nzc2NDEw", "number": 1411, "title": "SAMZA-2577 : Adding support for Async-Logger in Log4j2 Stream Appender", "bodyText": "Problem:\nIn both StreamAppender for log4j1 and log4j2 a blocking queue is used to coordinate between the append()-ing threads and a single thread send()-ing to Kafka.\nThis is a bounded, blocking, lock-synchronized queue.\nTo avoid deadlock scenarios (see SAMZA-1537), the append()-ing threads have a timeout of 2 seconds, after which the log message is discarded and the queue is drained.\nThis means in case of message bursts, threads calling append() may block for upto 2 seconds, and may continually be stuck in this pattern, leading to processing stalls and lowered throughput.\nSolutions for Log4j2\nSolution 1. Enable async logger in log4j2, since they are supported and provided in log4j2.https://logging.apache.org/log4j/2.x/manual/async.html.\nIn using this capability, the blocking-queue in StreamAppender is not required because the logger itself will be asynchronous, and so append() threads can directly call systemProducer.send().\nHowever, if async loggers are not used then this queue based mechanism, to give the append()-ing threads an \"async\" illusion, is required.\nSolution 2. Continue using the blocking bounded lock-based queue, but make the queue size and timeout configurable. Users can then tune this to account for message bursts.\nSolution 3. Move to use a lock-less queue, e.g., ConcurrentLinkedQueue (unbounded) or\nimplement a bounded lock-less queue, or use [open-source implementations|https://stackoverflow.com/questions/20890554/lock-free-circular-array].\nAppend()-ing threads will no longer need to block or timeout. However the caller may busy-wait or need a fixed-rate or fixed-sleep-time to avoid busy waits, since a lock-less queue is non blocking.\nIt uses CAS operations.\nFor log4j2, we will adopt Solution 1.", "createdAt": "2020-08-10T23:12:41Z", "url": "https://github.com/apache/samza/pull/1411", "merged": true, "mergeCommit": {"oid": "2b11d9408d9b32aca3a6e3d0aecc36b496608576"}, "closed": true, "closedAt": "2020-08-12T13:29:11Z", "author": {"login": "rmatharu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9qV35AH2gAyNDY1Nzc2NDEwOjM0MTZkMWY0MWRkM2ViMjA0YWRhYmI5ZmVhNTg5MjM0ZWNhMTE5NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-LbA9gFqTQ2NTkxNDc3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3416d1f41dd3eb204adabb9fea589234eca11946", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/3416d1f41dd3eb204adabb9fea589234eca11946", "committedDate": "2020-08-10T22:55:22Z", "message": "Adding support for Async-Logger in Log4j2 Stream Appender"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4382489c0a99e02c754534a6ca96a3af0c3fe6", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/9d4382489c0a99e02c754534a6ca96a3af0c3fe6", "committedDate": "2020-08-10T23:26:23Z", "message": "Revert \"Adding support for Async-Logger in Log4j2 Stream Appender\"\n\nThis reverts commit 3416d1f41dd3eb204adabb9fea589234eca11946."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d051709e4a37b3b6e677dedb3a8138fa6d20abeb", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/d051709e4a37b3b6e677dedb3a8138fa6d20abeb", "committedDate": "2020-08-10T23:35:49Z", "message": "Adding support for Async-Logger in Log4j2 Stream Appender"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deff09544d9728b84b52290e03b40e93ed2c66c9", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/deff09544d9728b84b52290e03b40e93ed2c66c9", "committedDate": "2020-08-10T23:41:35Z", "message": "Updating MockSystemProducerAppender"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f", "committedDate": "2020-08-11T05:22:49Z", "message": "Checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDI1NDI2", "url": "https://github.com/apache/samza/pull/1411#pullrequestreview-465425426", "createdAt": "2020-08-11T21:00:36Z", "commit": {"oid": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMDozNlrOG_JEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMzo0NlrOG_JK1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MjE1Nw==", "bodyText": "Now that you have cached keyBytes at the instance level, can we get rid of the local keyBytes byte array?", "url": "https://github.com/apache/samza/pull/1411#discussion_r468862157", "createdAt": "2020-08-11T21:00:36Z", "author": {"login": "mynameborat"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -397,15 +425,7 @@ private void startTransferThread() {\n       Runnable transferFromQueueToSystem = () -> {\n         while (!Thread.currentThread().isInterrupted()) {\n           try {\n-            byte[] serializedLogEvent = logQueue.take();\n-\n-            metrics.logMessagesBytesSent.inc(serializedLogEvent.length);\n-            metrics.logMessagesCountSent.inc();\n-\n-            OutgoingMessageEnvelope outgoingMessageEnvelope =\n-                new OutgoingMessageEnvelope(systemStream, keyBytes, serializedLogEvent);\n-            systemProducer.send(SOURCE, outgoingMessageEnvelope);\n-\n+            sendEventToSystemProducer(logQueue.take());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MzcwMw==", "bodyText": "Capturing our offline conversation - \"We will need this to replaced with System.err as the recursion will drop this message in the event of not able to acquire the lock within the timeout\"", "url": "https://github.com/apache/samza/pull/1411#discussion_r468863703", "createdAt": "2020-08-11T21:03:46Z", "author": {"login": "mynameborat"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -239,6 +227,46 @@ public void append(LogEvent event) {\n     }\n   }\n \n+  /**\n+   * If async-Logger is enabled, the log-event is sent directly to the systemProducer. Else, the event is serialized\n+   * and added to a bounded blocking queue, before returning to the \"synchronous\" caller.\n+   * @param event the log event to append\n+   * @throws InterruptedException\n+   */\n+  private void handleEvent(LogEvent event) throws InterruptedException {\n+    if (usingAsyncLogger) {\n+      sendEventToSystemProducer(encodeLogEventToBytes(event));\n+      return;\n+    }\n+\n+    // Serialize the event before adding to the queue to leverage the caller thread\n+    // and ensure that the transferThread can keep up.\n+    if (!logQueue.offer(encodeLogEventToBytes(event), queueTimeoutS, TimeUnit.SECONDS)) {\n+      // Do NOT retry adding system to the queue. Dropping the event allows us to alleviate the unlikely\n+      // possibility of a deadlock, which can arise due to a circular dependency between the SystemProducer\n+      // which is used for StreamAppender and the log, which uses StreamAppender. Any locks held in the callstack\n+      // of those two code paths can cause a deadlock. Dropping the event allows us to proceed.\n+\n+      // Scenario:\n+      // T1: holds L1 and is waiting for L2\n+      // T2: holds L2 and is waiting to produce to BQ1 which is drained by T3 (SystemProducer) which is waiting for L1\n+\n+      // This has happened due to locks in Kafka and log4j (see SAMZA-1537), which are both out of our control,\n+      // so dropping events in the StreamAppender is our best recourse.\n+\n+      // Drain the queue instead of dropping one message just to reduce the frequency of warn logs above.\n+      int messagesDropped = logQueue.drainTo(new ArrayList<>()) + 1; // +1 because of the current log event\n+      log.warn(String.format(\"Exceeded timeout %ss while trying to log to %s. Dropping %d log messages.\",\n+          queueTimeoutS,\n+          systemStream.toString(),\n+          messagesDropped));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd9fbb3571d1e6fad66b665c6e6e53e37f9ac6f"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9acf7c2c8a487c6f89cfaa0ce66a220c008058a", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/e9acf7c2c8a487c6f89cfaa0ce66a220c008058a", "committedDate": "2020-08-11T22:48:59Z", "message": "Moving to use system.out and system.err instead of log in stream-appender, addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6ecc4e1d11a1dccccd5dbf21a74027ca851998", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/4f6ecc4e1d11a1dccccd5dbf21a74027ca851998", "committedDate": "2020-08-12T06:00:43Z", "message": "Adding unit-test for asyncLogger + stream appender for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTE0Nzcw", "url": "https://github.com/apache/samza/pull/1411#pullrequestreview-465914770", "createdAt": "2020-08-12T13:27:51Z", "commit": {"oid": "4f6ecc4e1d11a1dccccd5dbf21a74027ca851998"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4680, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}