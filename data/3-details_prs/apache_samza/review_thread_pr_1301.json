{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODM1MDkw", "number": 1301, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMToxM1rODlL9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNzo1MVrODoyppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE5OTA5OnYy", "diffSide": "RIGHT", "path": "samza-test/src/test/scala/org/apache/samza/storage/kv/TestKeyValueStores.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMToxM1rOFx8BFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMToxM1rOFx8BFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNzg2Mg==", "bodyText": "Try and remove/avoid such changes.", "url": "https://github.com/apache/samza/pull/1301#discussion_r387907862", "createdAt": "2020-03-04T20:11:13Z", "author": {"login": "rmatharu"}, "path": "samza-test/src/test/scala/org/apache/samza/storage/kv/TestKeyValueStores.scala", "diffHunk": "@@ -555,6 +555,7 @@ class TestKeyValueStores(typeOfStore: String, storeConfig: String) {\n \n     store.flush()\n   }\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzIwMDcyOnYy", "diffSide": "RIGHT", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMTo0MlrOFx8CHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMTo0MlrOFx8CHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODEyNA==", "bodyText": "Maybe add comments to describe what this test is doing?", "url": "https://github.com/apache/samza/pull/1301#discussion_r387908124", "createdAt": "2020-03-04T20:11:42Z", "author": {"login": "rmatharu"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistry;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.SamzaHistogram;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  @Test\n+  public void testHistogramMetric() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzIyODI3OnYy", "diffSide": "RIGHT", "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMToxNlrOFx8TdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMToxNlrOFx8TdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjU2NA==", "bodyText": "Maybe add javadocs to explain how this works, the histogram stores counts for each percentile range?\nand the count for each range is emitted as a gauge?", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912564", "createdAt": "2020-03-04T20:21:16Z", "author": {"login": "rmatharu"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "diffHunk": "@@ -36,6 +35,10 @@ class SerializedKeyValueStoreMetrics(\n   val bytesSerialized = newCounter(\"bytes-serialized\")\n   val bytesDeserialized = newCounter(\"bytes-deserialized\")\n   val maxRecordSizeBytes = newGauge(\"max-record-size-bytes\", 0L)\n+  val record_key_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)\n+  val record_value_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)\n+  val recordKeySizeBytes = newHistogram(\"key-size-bytes-histogram\",record_key_size_percentiles )\n+  val recordValueSizeBytes = newHistogram(\"value-size-bytes-histogram\", record_value_size_percentiles)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzIyOTQ3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMTo0MFrOFx8UKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxODozM1rOF3jxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjc0Nw==", "bodyText": "javadoc?", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912747", "createdAt": "2020-03-04T20:21:40Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -65,4 +68,8 @@ public T getValue() {\n   public Timer newTimer(String name) {\n     return registry.newTimer(groupName, (prefix + name).toLowerCase());\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMjAxNQ==", "bodyText": "+1", "url": "https://github.com/apache/samza/pull/1301#discussion_r393802015", "createdAt": "2020-03-17T16:18:33Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -65,4 +68,8 @@ public T getValue() {\n   public Timer newTimer(String name) {\n     return registry.newTimer(groupName, (prefix + name).toLowerCase());\n   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjc0Nw=="}, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzIzMDk0OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMjowOFrOFx8VGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMjoxMjoyMVrOFyERag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjk4Ng==", "bodyText": "Is this only for testing?\nIn that case you can make it package-private and use @VisibleForTesting flag.", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912986", "createdAt": "2020-03-04T20:22:08Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java", "diffHunk": "@@ -60,6 +60,11 @@ public void updateGaugeValues(double percentile) {\n     gauges.get(percentile).set(values.getValue(percentile / 100));\n   }\n \n+  //for debug\n+  public Map<Double, Gauge<Double>> getGauges() {\n+    return gauges;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0MzExNA==", "bodyText": "I deleted this method and used a MetricsVisitor instead.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388043114", "createdAt": "2020-03-05T02:12:21Z", "author": {"login": "xiefan46"}, "path": "samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java", "diffHunk": "@@ -60,6 +60,11 @@ public void updateGaugeValues(double percentile) {\n     gauges.get(percentile).set(values.getValue(percentile / 100));\n   }\n \n+  //for debug\n+  public Map<Double, Gauge<Double>> getGauges() {\n+    return gauges;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjk4Ng=="}, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODQ0MDMwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTo1MjozMlrOFyt2ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTo1MjozMlrOFyt2ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNDM0Nw==", "bodyText": "Please revert this change.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388724347", "createdAt": "2020-03-06T05:52:32Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -1,24 +1,27 @@\n /*\n-* Licensed to the Apache Software Foundation (ASF) under one\n-* or more contributor license agreements.  See the NOTICE file\n-* distributed with this work for additional information\n-* regarding copyright ownership.  The ASF licenses this file\n-* to you under the Apache License, Version 2.0 (the\n-* \"License\"); you may not use this file except in compliance\n-* with the License.  You may obtain a copy of the License at\n-*\n-*   http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODQ1NTMyOnYy", "diffSide": "RIGHT", "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjowNDo0N1rOFyuAHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyMDowMFrOFzGQjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjgxMg==", "bodyText": "any reason behind the choice of the percentiles? Especially 10th percentile?", "url": "https://github.com/apache/samza/pull/1301#discussion_r388726812", "createdAt": "2020-03-06T06:04:47Z", "author": {"login": "mynameborat"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "diffHunk": "@@ -36,6 +35,25 @@ class SerializedKeyValueStoreMetrics(\n   val bytesSerialized = newCounter(\"bytes-serialized\")\n   val bytesDeserialized = newCounter(\"bytes-deserialized\")\n   val maxRecordSizeBytes = newGauge(\"max-record-size-bytes\", 0L)\n+  val record_key_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMDA3NQ==", "bodyText": "+1,\n50, 90, 99 maybe good enough? or 999 in addition perhaps.", "url": "https://github.com/apache/samza/pull/1301#discussion_r389030075", "createdAt": "2020-03-06T17:09:02Z", "author": {"login": "rmatharu"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "diffHunk": "@@ -36,6 +35,25 @@ class SerializedKeyValueStoreMetrics(\n   val bytesSerialized = newCounter(\"bytes-serialized\")\n   val bytesDeserialized = newCounter(\"bytes-deserialized\")\n   val maxRecordSizeBytes = newGauge(\"max-record-size-bytes\", 0L)\n+  val record_key_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjgxMg=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNDIzOQ==", "bodyText": "Removed P10 and added 999 instead.", "url": "https://github.com/apache/samza/pull/1301#discussion_r389124239", "createdAt": "2020-03-06T20:20:00Z", "author": {"login": "xiefan46"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "diffHunk": "@@ -36,6 +35,25 @@ class SerializedKeyValueStoreMetrics(\n   val bytesSerialized = newCounter(\"bytes-serialized\")\n   val bytesDeserialized = newCounter(\"bytes-deserialized\")\n   val maxRecordSizeBytes = newGauge(\"max-record-size-bytes\", 0L)\n+  val record_key_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjgxMg=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODUyMzUzOnYy", "diffSide": "RIGHT", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjo0OTowM1rOFyupJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxNzo1OVrOFzGNcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczNzMxOA==", "bodyText": "Can you explain what we achieve here by shuffling keys and values? They are already random during generation and it is not clear what is this additional shuffle for.\nSimple and crisp tests are more maintainable.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388737318", "createdAt": "2020-03-06T06:49:03Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMzQ0Mg==", "bodyText": "At the beginning I didn't use a random way to generate keys and values so I had to shuffle them. I forgot to delete the shuffle code later on. I modified the test case and deleted them now.", "url": "https://github.com/apache/samza/pull/1301#discussion_r389123442", "createdAt": "2020-03-06T20:17:59Z", "author": {"login": "xiefan46"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczNzMxOA=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODUzMjYzOnYy", "diffSide": "RIGHT", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjo1NDoyNFrOFyuurg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxNTozMFrOFzGJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczODczNA==", "bodyText": "I'd prefer to use explicit name checks here since the goal of the test is to check for key and value size histogram. We don't want this test to fail or pass for incorrect reasons when we add a new histogram for store whose name happens to contain size-bytes-histogram", "url": "https://github.com/apache/samza/pull/1301#discussion_r388738734", "createdAt": "2020-03-06T06:54:24Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (name.contains(\"size-bytes-histogram\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMjQyOQ==", "bodyText": "Modified", "url": "https://github.com/apache/samza/pull/1301#discussion_r389122429", "createdAt": "2020-03-06T20:15:30Z", "author": {"login": "xiefan46"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (name.contains(\"size-bytes-histogram\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczODczNA=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODUzNTgwOnYy", "diffSide": "RIGHT", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjo1NjoxNVrOFyuwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxNToyMVrOFzGJQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczOTI0NQ==", "bodyText": "With our builds already taking too long, do we know how long this test runs? Can we do away with something lower instead of 1000? same for the max length inside random string generation.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388739245", "createdAt": "2020-03-06T06:56:15Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMjM2OA==", "bodyText": "Use 300 instead of 1000 in this for loop and also reduce the max length of random string to 100. This test takes less than 1s now.", "url": "https://github.com/apache/samza/pull/1301#discussion_r389122368", "createdAt": "2020-03-06T20:15:21Z", "author": {"login": "xiefan46"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczOTI0NQ=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODczNDg4OnYy", "diffSide": "RIGHT", "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStore.scala", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozMToxMlrOFywo8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMDowNzo1OFrOFzSVvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDAzMg==", "bodyText": "Is there a way we can roll together recording maximum record size into the histogram tracking? When I implemented the metric for recording max I had considered modifying histogram to record maximum in addition to percentiles, but decided against it since the memory footprint of the histogram was unjustifiable at the time. Now that we'd like those metrics anyway, maybe it is justifiable now.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388770032", "createdAt": "2020-03-06T08:31:12Z", "author": {"login": "bkonold"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStore.scala", "diffHunk": "@@ -62,7 +62,10 @@ class SerializedKeyValueStore[K, V](\n     val keyBytes = toBytesOrNull(key, keySerde)\n     val valBytes = toBytesOrNull(value, msgSerde)\n     store.put(keyBytes, valBytes)\n+    val keySizeBytes = if (keyBytes == null) 0 else keyBytes.length\n     val valSizeBytes = if (valBytes == null) 0 else valBytes.length\n+    metrics.recordKeySizeBytes.update(keySizeBytes)\n+    metrics.recordValueSizeBytes.update(valSizeBytes)\n     updatePutMetrics(1, valSizeBytes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzI4Ng==", "bodyText": "I thought about that before. But maybe there are some people using the maximum record size metric and deleting it may caused some trouble. So I choose to keep this metric and do not combine it with the histogram.", "url": "https://github.com/apache/samza/pull/1301#discussion_r389127286", "createdAt": "2020-03-06T20:26:55Z", "author": {"login": "xiefan46"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStore.scala", "diffHunk": "@@ -62,7 +62,10 @@ class SerializedKeyValueStore[K, V](\n     val keyBytes = toBytesOrNull(key, keySerde)\n     val valBytes = toBytesOrNull(value, msgSerde)\n     store.put(keyBytes, valBytes)\n+    val keySizeBytes = if (keyBytes == null) 0 else keyBytes.length\n     val valSizeBytes = if (valBytes == null) 0 else valBytes.length\n+    metrics.recordKeySizeBytes.update(keySizeBytes)\n+    metrics.recordValueSizeBytes.update(valSizeBytes)\n     updatePutMetrics(1, valSizeBytes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDAzMg=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2MzkwMA==", "bodyText": "I see. We wouldn't be able to preserve the name if we emitted a maximum metric from the histogram?", "url": "https://github.com/apache/samza/pull/1301#discussion_r389163900", "createdAt": "2020-03-06T21:57:06Z", "author": {"login": "bkonold"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStore.scala", "diffHunk": "@@ -62,7 +62,10 @@ class SerializedKeyValueStore[K, V](\n     val keyBytes = toBytesOrNull(key, keySerde)\n     val valBytes = toBytesOrNull(value, msgSerde)\n     store.put(keyBytes, valBytes)\n+    val keySizeBytes = if (keyBytes == null) 0 else keyBytes.length\n     val valSizeBytes = if (valBytes == null) 0 else valBytes.length\n+    metrics.recordKeySizeBytes.update(keySizeBytes)\n+    metrics.recordValueSizeBytes.update(valSizeBytes)\n     updatePutMetrics(1, valSizeBytes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDAzMg=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMjE3Mg==", "bodyText": "I am not very sure about that because I am not very familiar with the code yet. I will keep that in mind and try to optimize it in the future if possible.", "url": "https://github.com/apache/samza/pull/1301#discussion_r389322172", "createdAt": "2020-03-08T00:07:58Z", "author": {"login": "xiefan46"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStore.scala", "diffHunk": "@@ -62,7 +62,10 @@ class SerializedKeyValueStore[K, V](\n     val keyBytes = toBytesOrNull(key, keySerde)\n     val valBytes = toBytesOrNull(value, msgSerde)\n     store.put(keyBytes, valBytes)\n+    val keySizeBytes = if (keyBytes == null) 0 else keyBytes.length\n     val valSizeBytes = if (valBytes == null) 0 else valBytes.length\n+    metrics.recordKeySizeBytes.update(keySizeBytes)\n+    metrics.recordValueSizeBytes.update(valSizeBytes)\n     updatePutMetrics(1, valSizeBytes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDAzMg=="}, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk5NDk0OnYy", "diffSide": "RIGHT", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNzo1MVrOF3jvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNzo1MVrOF3jvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMTU2Mw==", "bodyText": "nit: remove", "url": "https://github.com/apache/samza/pull/1301#discussion_r393801563", "createdAt": "2020-03-17T16:17:51Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.config.Config;\n+import org.apache.samza.config.MapConfig;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.rocksdb.FlushOptions;\n+import org.rocksdb.Options;\n+import org.rocksdb.WriteOptions;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"teststore\";\n+  private static String keyPrefix = \"key-size-bytes-histogram\";\n+  private static String valuePrefix = \"value-size-bytes-histogram\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+\n+    Config config = new MapConfig();\n+    Options options = new Options();\n+    options.setCreateIfMissing(true);\n+\n+    File dbDir = new File(System.getProperty(\"java.io.tmpdir\") + \"/dbStore\" + System.currentTimeMillis());\n+    RocksDbKeyValueStore kvStore = new RocksDbKeyValueStore(dbDir, options, config, false, \"dbStore\",\n+        new WriteOptions(), new FlushOptions(), new KeyValueStoreMetrics(\"dbStore\", new MetricsRegistryMap()));\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 300; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    Set<String> names = new HashSet<>();\n+    for (Double p : serializedKeyValueStoreMetrics.record_key_size_percentiles()) {\n+      names.add(storeName + \"-\" + keyPrefix + \"_\" + p);\n+    }\n+\n+    for (Double p : serializedKeyValueStoreMetrics.record_value_size_percentiles()) {\n+      names.add(storeName + \"-\" + valuePrefix + \"_\" + p);\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (names.contains(name)) {\n+          //System.out.println(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d047b89a1e25b018ed77b25509664c2aa1dc47f4"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1598, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}