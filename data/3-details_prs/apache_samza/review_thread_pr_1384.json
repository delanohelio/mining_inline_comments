{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTcxNDY1", "number": 1384, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxMDowN1rOEFn6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo1MjozNVrOEN8lQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzMyMjY2OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxMDowN1rOGj7NVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTo1NzowOVrOGkMQCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMzQxMw==", "bodyText": "This is basically tricking the planner to use Enum Convention plus Volcano planner to generate a Plan with Convention of  EnumerableConvention.INSTANCE. This will lead to complex branches down the line when doing the conversion as a follow up stage. You don't think the best way to do this is by using Calcite Conventions where Rules and Translation is happening at the same time to avoid complex code and very cryptic comments on what to expect when doing the translation ?", "url": "https://github.com/apache/samza/pull/1384#discussion_r440323413", "createdAt": "2020-06-15T17:10:07Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +171,46 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    relTraitSet = relTraitSet.plus(EnumerableConvention.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwMjYzNA==", "bodyText": "This is vestige from my earlier attempt to enable volcano planner. I removed it now.", "url": "https://github.com/apache/samza/pull/1384#discussion_r440602634", "createdAt": "2020-06-16T05:57:09Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +171,46 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    relTraitSet = relTraitSet.plus(EnumerableConvention.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMzQxMw=="}, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzMzNjYyOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxNDoyNlrOGj7WLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMzoyNzoxNFrOGqBIFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNTY3OA==", "bodyText": "When would you turn off the optimization ? if it is just optimization it should be always turned on ?", "url": "https://github.com/apache/samza/pull/1384#discussion_r440325678", "createdAt": "2020-06-15T17:14:26Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +171,46 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    relTraitSet = relTraitSet.plus(EnumerableConvention.INSTANCE);\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(getPlanner().transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n+\n+  public RelRoot plan(String query) {\n+    try {\n+      Planner planner = getPlanner();\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n-      LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      LOG.info(\"query plan without optimization:\\n\"\n+          + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwMzI5MA==", "bodyText": "I'm considering this as experimental right now considering this is the first version. Once we vet it thru' the real use-cases and gain confidence, we can enable it by default.", "url": "https://github.com/apache/samza/pull/1384#discussion_r440603290", "createdAt": "2020-06-16T05:59:17Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +171,46 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    relTraitSet = relTraitSet.plus(EnumerableConvention.INSTANCE);\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(getPlanner().transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n+\n+  public RelRoot plan(String query) {\n+    try {\n+      Planner planner = getPlanner();\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n-      LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      LOG.info(\"query plan without optimization:\\n\"\n+          + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNTY3OA=="}, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxOTI3MQ==", "bodyText": "If the main concern is that planning will fail with the new rules my suggestion is to have it on by default and catch the exception and re-plan without optimization. In this way we can learn the logs. It is up to you if you think this can be too much work", "url": "https://github.com/apache/samza/pull/1384#discussion_r444319271", "createdAt": "2020-06-23T15:37:10Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +171,46 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    relTraitSet = relTraitSet.plus(EnumerableConvention.INSTANCE);\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(getPlanner().transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n+\n+  public RelRoot plan(String query) {\n+    try {\n+      Planner planner = getPlanner();\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n-      LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      LOG.info(\"query plan without optimization:\\n\"\n+          + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNTY3OA=="}, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMTgzMQ==", "bodyText": "I'm not strongly against turning it on by default. I turned it on by default now.", "url": "https://github.com/apache/samza/pull/1384#discussion_r446711831", "createdAt": "2020-06-28T23:27:14Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +171,46 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    relTraitSet = relTraitSet.plus(EnumerableConvention.INSTANCE);\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(getPlanner().transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n+\n+  public RelRoot plan(String query) {\n+    try {\n+      Planner planner = getPlanner();\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n-      LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      LOG.info(\"query plan without optimization:\\n\"\n+          + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNTY3OA=="}, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzM0ODUyOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxNzo0NFrOGj7dVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MDowMlrOGnvNYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNzUxMA==", "bodyText": "As far I can tell it is only testing if filter is on the good side of the join, seems to me most of the work can be done at the onMatch, we can just extend and override onMatch ?", "url": "https://github.com/apache/samza/pull/1384#discussion_r440327510", "createdAt": "2020-06-15T17:17:44Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a FilterJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNDM4Ng==", "bodyText": "I plan to add JoinConditionPushRule as well in next iteration (with no filter) which will reuse most of the code here and onMatch will be different.", "url": "https://github.com/apache/samza/pull/1384#discussion_r440604386", "createdAt": "2020-06-16T06:02:35Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a FilterJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNzUxMA=="}, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMTEyMA==", "bodyText": "In my opinion if we can minimize the copy and past that will be ideal and have the rest in a follow up, but it is up to you this is not a blocking point.", "url": "https://github.com/apache/samza/pull/1384#discussion_r444321120", "createdAt": "2020-06-23T15:40:02Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a FilterJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNzUxMA=="}, "originalCommit": {"oid": "1d85cbeb832ed5b3411599f52d505790aef5a76e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzU1NDgzOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo1NjowNFrOGkkpFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoxMjoxNVrOGzw7-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjI2Mg==", "bodyText": "Nit:\n\nBy default, Logger adds \\n to EOL. Unnecessary to explicitly add it.\nAlso, it's better to capitalize all the log-messages.", "url": "https://github.com/apache/samza/pull/1384#discussion_r441002262", "createdAt": "2020-06-16T16:56:04Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +166,45 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(getPlanner().transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjM0Nw==", "bodyText": "\\n is not for EOL. It is for separating the log.\nYou mean all log messages in Samza or just this ? And what is the point of capitalizing ? Is it to catch the eye while going thru logs ? If yes, we don't need to as their format makes them stand out in the logs,\n\n2020-07-19 10:11:16.814 [main] [] QueryPlanner [INFO] query plan without optimization:\nLogicalProject(key=[$9], pageKey=[$9], companyName=['N/A'], profileName=[$2], profileAddress=[$4])\nLogicalFilter(condition=[AND(=($2, 'Mike'), =($10, 1))])\nLogicalProject(key=[$0], id=[$1], name=[$2], companyId=[$3], address=[$4], selfEmployed=[$5], phoneNumbers=[$6], mapValues=[$7], __key__0=[$8], pageKey=[$9], profileId=[$10])\nLogicalJoin(condition=[=($0, $11)], joinType=[inner])\nLogicalTableScan(table=[[testRemoteStore, Profile, $table]])\nLogicalProject(key=[$0], pageKey=[$1], profileId=[$2], $f3=[BuildOutputRecord('id', $2)])\nLogicalTableScan(table=[[testavro, PAGEVIEW]])\n2020-07-19 10:11:16.816 [main] [] QueryPlanner [INFO] query plan with optimization:\nLogicalProject(key=[$9], pageKey=[$9], companyName=['N/A'], profileName=[$2], profileAddress=[$4])\nLogicalFilter(condition=[=($2, 'Mike')])\nLogicalJoin(condition=[=($0, $11)], joinType=[inner])\nLogicalTableScan(table=[[testRemoteStore, Profile, $table]])\nLogicalFilter(condition=[=($2, 1)])\nLogicalProject(key=[$0], pageKey=[$1], profileId=[$2], $f3=[BuildOutputRecord('id', $2)])\nLogicalTableScan(table=[[testavro, PAGEVIEW]])", "url": "https://github.com/apache/samza/pull/1384#discussion_r456932347", "createdAt": "2020-07-19T17:12:15Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +166,45 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(getPlanner().transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjI2Mg=="}, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzU3MDYyOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/dsl/SamzaSqlDslConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowMDoxNVrOGkkzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoxNTozMVrOGzw9LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNDkwMQ==", "bodyText": "What is the rationale for recreating the planner for every sql-statement in the app?", "url": "https://github.com/apache/samza/pull/1384#discussion_r441004901", "createdAt": "2020-06-16T17:00:15Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/dsl/SamzaSqlDslConverter.java", "diffHunk": "@@ -52,9 +52,9 @@\n   public Collection<RelRoot> convertDsl(String dsl) {\n     // TODO: Introduce an API to parse a dsl string and return one or more sql statements\n     List<String> sqlStmts = fetchSqlFromConfig(config);\n-    QueryPlanner planner = getQueryPlanner(getSqlConfig(sqlStmts, config));\n     List<RelRoot> relRoots = new LinkedList<>();\n     for (String sql: sqlStmts) {\n+      QueryPlanner planner = getQueryPlanner(getSqlConfig(Collections.singletonList(sql), config));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjY1Mw==", "bodyText": "Good question. Calcite Planner as it stands today does not seem to be supported for reuse. Although the intent is there as they have exposed reset API. But it does not work. But it is such low cost to create new planner for each sql.", "url": "https://github.com/apache/samza/pull/1384#discussion_r456932653", "createdAt": "2020-07-19T17:15:31Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/dsl/SamzaSqlDslConverter.java", "diffHunk": "@@ -52,9 +52,9 @@\n   public Collection<RelRoot> convertDsl(String dsl) {\n     // TODO: Introduce an API to parse a dsl string and return one or more sql statements\n     List<String> sqlStmts = fetchSqlFromConfig(config);\n-    QueryPlanner planner = getQueryPlanner(getSqlConfig(sqlStmts, config));\n     List<RelRoot> relRoots = new LinkedList<>();\n     for (String sql: sqlStmts) {\n+      QueryPlanner planner = getQueryPlanner(getSqlConfig(Collections.singletonList(sql), config));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNDkwMQ=="}, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQ4OTk5OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTozNDowM1rOGnu-Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMzoyNzoyOVrOGqBIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzIwNg==", "bodyText": "The planner is a closable resource I think it would be better to use it within a try block or make sure to close it when done.", "url": "https://github.com/apache/samza/pull/1384#discussion_r444317206", "createdAt": "2020-06-23T15:34:03Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -109,15 +124,19 @@ private void registerSourceSchemas(SchemaPlus rootSchema) {\n     }\n   }\n \n-  public RelRoot plan(String query) {\n+  private Planner getPlanner() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMTg1MQ==", "bodyText": "Sure. Added code to close it now.", "url": "https://github.com/apache/samza/pull/1384#discussion_r446711851", "createdAt": "2020-06-28T23:27:29Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -109,15 +124,19 @@ private void registerSourceSchemas(SchemaPlus rootSchema) {\n     }\n   }\n \n-  public RelRoot plan(String query) {\n+  private Planner getPlanner() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzIwNg=="}, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODUxODUyOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MTowOFrOGnvQYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMzoyNzozMlrOGqBIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMTg5MQ==", "bodyText": "Why are we turning off for local tables things work fine, not sure I am getting this ?", "url": "https://github.com/apache/samza/pull/1384#discussion_r444321891", "createdAt": "2020-06-23T15:41:08Z", "author": {"login": "b-slim"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a FilterJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,\n+      Join join) {\n+    final List<RexNode> joinFilters =\n+        RelOptUtil.conjunctions(join.getCondition());\n+\n+    boolean donotOptimizeLeft = false;\n+    boolean donotOptimizeRight = false;\n+\n+    JoinInputNode.InputType inputTypeOnLeft =\n+        JoinInputNode.getInputType(join.getLeft(), systemStreamConfigBySource);\n+    JoinInputNode.InputType inputTypeOnRight =\n+        JoinInputNode.getInputType(join.getRight(), systemStreamConfigBySource);\n+\n+    // Disable this optimnization for queries using local table.\n+    if (inputTypeOnLeft == InputType.LOCAL_TABLE || inputTypeOnRight == InputType.LOCAL_TABLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMTg2NA==", "bodyText": "There could be more optimizations done for local table as local tables do not have the limitations that remote tables have. We could directly enable Calcite's FilterJoinRule for local tables.", "url": "https://github.com/apache/samza/pull/1384#discussion_r446711864", "createdAt": "2020-06-28T23:27:32Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a FilterJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,\n+      Join join) {\n+    final List<RexNode> joinFilters =\n+        RelOptUtil.conjunctions(join.getCondition());\n+\n+    boolean donotOptimizeLeft = false;\n+    boolean donotOptimizeRight = false;\n+\n+    JoinInputNode.InputType inputTypeOnLeft =\n+        JoinInputNode.getInputType(join.getLeft(), systemStreamConfigBySource);\n+    JoinInputNode.InputType inputTypeOnRight =\n+        JoinInputNode.getInputType(join.getRight(), systemStreamConfigBySource);\n+\n+    // Disable this optimnization for queries using local table.\n+    if (inputTypeOnLeft == InputType.LOCAL_TABLE || inputTypeOnRight == InputType.LOCAL_TABLE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMTg5MQ=="}, "originalCommit": {"oid": "3f0587201e2ec9a8bd4d5e0aac7362986894036b"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDAyNTg4OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyMjowN1rOGwwAew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoxNTo0MFrOGzw9Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MTM4Nw==", "bodyText": "Would be better to create a follow-up ticket for this action-item.", "url": "https://github.com/apache/samza/pull/1384#discussion_r453771387", "createdAt": "2020-07-13T16:22:07Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -129,6 +142,13 @@ public RelRoot plan(String query) {\n       sqlOperatorTables.add(new SamzaSqlOperatorTable());\n       sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n \n+      // TODO: Introduce a pluggable rule factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjY1NQ==", "bodyText": "Sure", "url": "https://github.com/apache/samza/pull/1384#discussion_r456932655", "createdAt": "2020-07-19T17:15:40Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -129,6 +142,13 @@ public RelRoot plan(String query) {\n       sqlOperatorTables.add(new SamzaSqlOperatorTable());\n       sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n \n+      // TODO: Introduce a pluggable rule factory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MTM4Nw=="}, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDMzODA2OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0MzoyOFrOGwzBOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0MzoyOFrOGwzBOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMDcyOA==", "bodyText": "nit: %s/optimnization/optimization", "url": "https://github.com/apache/samza/pull/1384#discussion_r453820728", "createdAt": "2020-07-13T17:43:28Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a SamzaSqlFilterRemoteJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,\n+      Join join) {\n+    final List<RexNode> joinFilters =\n+        RelOptUtil.conjunctions(join.getCondition());\n+\n+    boolean donotOptimizeLeft = false;\n+    boolean donotOptimizeRight = false;\n+\n+    JoinInputNode.InputType inputTypeOnLeft =\n+        JoinInputNode.getInputType(join.getLeft(), systemStreamConfigBySource);\n+    JoinInputNode.InputType inputTypeOnRight =\n+        JoinInputNode.getInputType(join.getRight(), systemStreamConfigBySource);\n+\n+    // Disable this optimnization for queries using local table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDM0MDQ4OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0NDoxMFrOGwzCvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0NDoxMFrOGwzCvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMTExOA==", "bodyText": "Please import the ImmutableList class and don't hardcode the package paths. There're multiple occurrences in this file and else-where.", "url": "https://github.com/apache/samza/pull/1384#discussion_r453821118", "createdAt": "2020-07-13T17:44:10Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a SamzaSqlFilterRemoteJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,\n+      Join join) {\n+    final List<RexNode> joinFilters =\n+        RelOptUtil.conjunctions(join.getCondition());\n+\n+    boolean donotOptimizeLeft = false;\n+    boolean donotOptimizeRight = false;\n+\n+    JoinInputNode.InputType inputTypeOnLeft =\n+        JoinInputNode.getInputType(join.getLeft(), systemStreamConfigBySource);\n+    JoinInputNode.InputType inputTypeOnRight =\n+        JoinInputNode.getInputType(join.getRight(), systemStreamConfigBySource);\n+\n+    // Disable this optimnization for queries using local table.\n+    if (inputTypeOnLeft == InputType.LOCAL_TABLE || inputTypeOnRight == InputType.LOCAL_TABLE) {\n+      donotOptimizeLeft = true;\n+      donotOptimizeRight = true;\n+    }\n+\n+    // There is nothing to optimize on the remote table side as the lookup needs to happen first before filtering.\n+    if (inputTypeOnLeft == InputType.REMOTE_TABLE) {\n+      donotOptimizeLeft = true;\n+    }\n+    if (inputTypeOnRight == InputType.REMOTE_TABLE) {\n+      donotOptimizeRight = true;\n+    }\n+\n+    // If there is only the joinRel,\n+    // make sure it does not match a cartesian product joinRel\n+    // (with \"true\" condition), otherwise this rule will be applied\n+    // again on the new cartesian product joinRel.\n+    if (filter == null && joinFilters.isEmpty()) {\n+      return;\n+    }\n+\n+    final List<RexNode> aboveFilters =\n+        filter != null\n+            ? RelOptUtil.conjunctions(filter.getCondition())\n+            : new ArrayList<>();\n+    final com.google.common.collect.ImmutableList<RexNode> origAboveFilters =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ0NTI3OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/util/SamzaSqlQueryParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxMjoyM1rOGw0DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxMjoyM1rOGw0DGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNzU5NQ==", "bodyText": "Just curious. Why did we comment this out? If this is not necessary, then can we please remove it?", "url": "https://github.com/apache/samza/pull/1384#discussion_r453837595", "createdAt": "2020-07-13T18:12:23Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/util/SamzaSqlQueryParser.java", "diffHunk": "@@ -165,6 +165,7 @@ private static Planner createPlanner() {\n         .traitDefs(traitDefs)\n         .context(Contexts.EMPTY_CONTEXT)\n         .costFactory(null)\n+        //.programs(Programs.CALC_PROGRAM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUyMTg1OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMjo0MlrOGw0yOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMjo0MlrOGw0yOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTY1OA==", "bodyText": "Just curious. Can you please clarify if we should use aboveFilters here for third argument? From the semantics  of classifyFilters method, it seems like appropriate choice. Might be better to rename the variable to something better(other than aboveFilters).", "url": "https://github.com/apache/samza/pull/1384#discussion_r453849658", "createdAt": "2020-07-13T18:32:42Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a SamzaSqlFilterRemoteJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,\n+      Join join) {\n+    final List<RexNode> joinFilters =\n+        RelOptUtil.conjunctions(join.getCondition());\n+\n+    boolean donotOptimizeLeft = false;\n+    boolean donotOptimizeRight = false;\n+\n+    JoinInputNode.InputType inputTypeOnLeft =\n+        JoinInputNode.getInputType(join.getLeft(), systemStreamConfigBySource);\n+    JoinInputNode.InputType inputTypeOnRight =\n+        JoinInputNode.getInputType(join.getRight(), systemStreamConfigBySource);\n+\n+    // Disable this optimnization for queries using local table.\n+    if (inputTypeOnLeft == InputType.LOCAL_TABLE || inputTypeOnRight == InputType.LOCAL_TABLE) {\n+      donotOptimizeLeft = true;\n+      donotOptimizeRight = true;\n+    }\n+\n+    // There is nothing to optimize on the remote table side as the lookup needs to happen first before filtering.\n+    if (inputTypeOnLeft == InputType.REMOTE_TABLE) {\n+      donotOptimizeLeft = true;\n+    }\n+    if (inputTypeOnRight == InputType.REMOTE_TABLE) {\n+      donotOptimizeRight = true;\n+    }\n+\n+    // If there is only the joinRel,\n+    // make sure it does not match a cartesian product joinRel\n+    // (with \"true\" condition), otherwise this rule will be applied\n+    // again on the new cartesian product joinRel.\n+    if (filter == null && joinFilters.isEmpty()) {\n+      return;\n+    }\n+\n+    final List<RexNode> aboveFilters =\n+        filter != null\n+            ? RelOptUtil.conjunctions(filter.getCondition())\n+            : new ArrayList<>();\n+    final com.google.common.collect.ImmutableList<RexNode> origAboveFilters =\n+        com.google.common.collect.ImmutableList.copyOf(aboveFilters);\n+\n+    // Simplify Outer Joins\n+    JoinRelType joinType = join.getJoinType();\n+    if (smart\n+        && !origAboveFilters.isEmpty()\n+        && join.getJoinType() != JoinRelType.INNER) {\n+      joinType = RelOptUtil.simplifyJoin(join, origAboveFilters, joinType);\n+    }\n+\n+    final List<RexNode> leftFilters = new ArrayList<>();\n+    final List<RexNode> rightFilters = new ArrayList<>();\n+\n+    // TODO - add logic to derive additional filters.  E.g., from\n+    // (t1.a = 1 AND t2.a = 2) OR (t1.b = 3 AND t2.b = 4), you can\n+    // derive table filters:\n+    // (t1.a = 1 OR t1.b = 3)\n+    // (t2.a = 2 OR t2.b = 4)\n+\n+    // Try to push down above filters. These are typically where clause\n+    // filters. They can be pushed down if they are not on the NULL\n+    // generating side.\n+    // We do not push into join condition as we do not benefit much. There is also correctness issue\n+    // with remote table as we will not have values for the remote table before the join/lookup.\n+    boolean filterPushed = false;\n+    if (RelOptUtil.classifyFilters(\n+        join,\n+        aboveFilters,\n+        joinType,\n+        false, // Let's not push into join filter\n+        !joinType.generatesNullsOnLeft() && !donotOptimizeLeft,\n+        !joinType.generatesNullsOnRight() && !donotOptimizeRight,\n+        joinFilters,\n+        leftFilters,\n+        rightFilters)) {\n+      filterPushed = true;\n+    }\n+\n+    // If no filter got pushed after validate, reset filterPushed flag\n+    if (leftFilters.isEmpty()\n+        && rightFilters.isEmpty()) {\n+      filterPushed = false;\n+    }\n+\n+    boolean isAntiJoin = joinType == JoinRelType.ANTI;\n+\n+    // Try to push down filters in ON clause. A ON clause filter can only be\n+    // pushed down if it does not affect the non-matching set, i.e. it is\n+    // not on the side which is preserved.\n+    // A ON clause filter of anti-join can not be pushed down.\n+    if (!isAntiJoin && RelOptUtil.classifyFilters(\n+        join,\n+        joinFilters,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUzODcyOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozNzoxNVrOGw08pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozNzoxNVrOGw08pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MjMyNg==", "bodyText": "Leftfilters and rightFilters are initialized and are not modified. It's very hard to find where they're populated. Please add a comment here that leftFilters and rightFilters will be populated by this classifyFilters method.", "url": "https://github.com/apache/samza/pull/1384#discussion_r453852326", "createdAt": "2020-07-13T18:37:15Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {\n+  /** Whether to try to strengthen join-type. */\n+  private final boolean smart;\n+\n+  Map<String, SqlIOConfig> systemStreamConfigBySource;\n+\n+  //~ Constructors -----------------------------------------------------------\n+\n+  /**\n+   * Creates a SamzaSqlFilterRemoteJoinRule with an explicit root operand and\n+   * factories.\n+   */\n+  protected SamzaSqlFilterRemoteJoinRule(RelOptRuleOperand operand, String id,\n+      boolean smart, RelBuilderFactory relBuilderFactory, Map<String, SqlIOConfig> systemStreamConfigBySource) {\n+    super(operand, relBuilderFactory, \"SamzaSqlFilterRemoteJoinRule:\" + id);\n+    this.smart = smart;\n+    this.systemStreamConfigBySource = systemStreamConfigBySource;\n+  }\n+\n+  //~ Methods ----------------------------------------------------------------\n+\n+  protected void perform(RelOptRuleCall call, Filter filter,\n+      Join join) {\n+    final List<RexNode> joinFilters =\n+        RelOptUtil.conjunctions(join.getCondition());\n+\n+    boolean donotOptimizeLeft = false;\n+    boolean donotOptimizeRight = false;\n+\n+    JoinInputNode.InputType inputTypeOnLeft =\n+        JoinInputNode.getInputType(join.getLeft(), systemStreamConfigBySource);\n+    JoinInputNode.InputType inputTypeOnRight =\n+        JoinInputNode.getInputType(join.getRight(), systemStreamConfigBySource);\n+\n+    // Disable this optimnization for queries using local table.\n+    if (inputTypeOnLeft == InputType.LOCAL_TABLE || inputTypeOnRight == InputType.LOCAL_TABLE) {\n+      donotOptimizeLeft = true;\n+      donotOptimizeRight = true;\n+    }\n+\n+    // There is nothing to optimize on the remote table side as the lookup needs to happen first before filtering.\n+    if (inputTypeOnLeft == InputType.REMOTE_TABLE) {\n+      donotOptimizeLeft = true;\n+    }\n+    if (inputTypeOnRight == InputType.REMOTE_TABLE) {\n+      donotOptimizeRight = true;\n+    }\n+\n+    // If there is only the joinRel,\n+    // make sure it does not match a cartesian product joinRel\n+    // (with \"true\" condition), otherwise this rule will be applied\n+    // again on the new cartesian product joinRel.\n+    if (filter == null && joinFilters.isEmpty()) {\n+      return;\n+    }\n+\n+    final List<RexNode> aboveFilters =\n+        filter != null\n+            ? RelOptUtil.conjunctions(filter.getCondition())\n+            : new ArrayList<>();\n+    final com.google.common.collect.ImmutableList<RexNode> origAboveFilters =\n+        com.google.common.collect.ImmutableList.copyOf(aboveFilters);\n+\n+    // Simplify Outer Joins\n+    JoinRelType joinType = join.getJoinType();\n+    if (smart\n+        && !origAboveFilters.isEmpty()\n+        && join.getJoinType() != JoinRelType.INNER) {\n+      joinType = RelOptUtil.simplifyJoin(join, origAboveFilters, joinType);\n+    }\n+\n+    final List<RexNode> leftFilters = new ArrayList<>();\n+    final List<RexNode> rightFilters = new ArrayList<>();\n+\n+    // TODO - add logic to derive additional filters.  E.g., from\n+    // (t1.a = 1 AND t2.a = 2) OR (t1.b = 3 AND t2.b = 4), you can\n+    // derive table filters:\n+    // (t1.a = 1 OR t1.b = 3)\n+    // (t2.a = 2 OR t2.b = 4)\n+\n+    // Try to push down above filters. These are typically where clause\n+    // filters. They can be pushed down if they are not on the NULL\n+    // generating side.\n+    // We do not push into join condition as we do not benefit much. There is also correctness issue\n+    // with remote table as we will not have values for the remote table before the join/lookup.\n+    boolean filterPushed = false;\n+    if (RelOptUtil.classifyFilters(\n+        join,\n+        aboveFilters,\n+        joinType,\n+        false, // Let's not push into join filter\n+        !joinType.generatesNullsOnLeft() && !donotOptimizeLeft,\n+        !joinType.generatesNullsOnRight() && !donotOptimizeRight,\n+        joinFilters,\n+        leftFilters,\n+        rightFilters)) {\n+      filterPushed = true;\n+    }\n+\n+    // If no filter got pushed after validate, reset filterPushed flag\n+    if (leftFilters.isEmpty()\n+        && rightFilters.isEmpty()) {\n+      filterPushed = false;\n+    }\n+\n+    boolean isAntiJoin = joinType == JoinRelType.ANTI;\n+\n+    // Try to push down filters in ON clause. A ON clause filter can only be\n+    // pushed down if it does not affect the non-matching set, i.e. it is\n+    // not on the side which is preserved.\n+    // A ON clause filter of anti-join can not be pushed down.\n+    if (!isAntiJoin && RelOptUtil.classifyFilters(\n+        join,\n+        joinFilters,\n+        joinType,\n+        false,\n+        !joinType.generatesNullsOnLeft() && !donotOptimizeLeft,\n+        !joinType.generatesNullsOnRight() && !donotOptimizeRight,\n+        joinFilters,\n+        leftFilters,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU1NDgwOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MTo0OVrOGw1Guw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoxOToyM1rOGzw-cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDkwNw==", "bodyText": "Please capitalize log messages and remove \\n at the end(which gets added by default).", "url": "https://github.com/apache/samza/pull/1384#discussion_r453854907", "createdAt": "2020-07-13T18:41:49Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +160,48 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      if (planner != null) {\n+        planner.close();\n+      }\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(Planner planner, RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(planner.transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      planner.close();\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n+\n+  public RelRoot plan(String query) {\n+    try (Planner planner = getPlanner()) {\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n-      LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      LOG.info(\n+          \"query plan without optimization:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjk3OA==", "bodyText": "Responded in earlier comment.", "url": "https://github.com/apache/samza/pull/1384#discussion_r456932978", "createdAt": "2020-07-19T17:19:23Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +160,48 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      if (planner != null) {\n+        planner.close();\n+      }\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(Planner planner, RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(planner.transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      planner.close();\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n+\n+  public RelRoot plan(String query) {\n+    try (Planner planner = getPlanner()) {\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n-      LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      LOG.info(\n+          \"query plan without optimization:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDkwNw=="}, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU3MzI4OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0Njo0M1rOGw1R2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoyMToyNlrOGzw_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1Nzc1Mw==", "bodyText": "Calling close() here seems unnecessary, It's already closed at the caller already with try-with-resources-closeable.", "url": "https://github.com/apache/samza/pull/1384#discussion_r453857753", "createdAt": "2020-07-13T18:46:43Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +160,48 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      if (planner != null) {\n+        planner.close();\n+      }\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(Planner planner, RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(planner.transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      planner.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMzE4Mw==", "bodyText": "oh yeah.. good point!", "url": "https://github.com/apache/samza/pull/1384#discussion_r456933183", "createdAt": "2020-07-19T17:21:26Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -140,16 +160,48 @@ public RelRoot plan(String query) {\n           .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(Programs.hep(rules, true, DefaultRelMetadataProvider.INSTANCE))\n           .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n+      planner = Frameworks.getPlanner(frameworkConfig);\n+      return planner;\n+    } catch (Exception e) {\n+      String errorMsg = \"Failed to create planner.\";\n+      LOG.error(errorMsg, e);\n+      if (planner != null) {\n+        planner.close();\n+      }\n+      throw new SamzaException(errorMsg, e);\n+    }\n+  }\n \n+  private RelRoot optimize(Planner planner, RelRoot relRoot) {\n+    RelTraitSet relTraitSet = RelTraitSet.createEmpty();\n+    try {\n+      RelRoot optimizedRelRoot =\n+          RelRoot.of(planner.transform(0, relTraitSet, relRoot.project()), SqlKind.SELECT);\n+      LOG.info(\"query plan with optimization:\\n\"\n+          + RelOptUtil.toString(optimizedRelRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES));\n+      return optimizedRelRoot;\n+    } catch (Exception e) {\n+      String errorMsg =\n+          \"Error while optimizing query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n+      LOG.error(errorMsg, e);\n+      planner.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1Nzc1Mw=="}, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU3ODU5OnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0Nzo1OFrOGw1U9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoyMzoxMlrOGzxABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1ODU0OA==", "bodyText": "Is there a way to determine if these rel-rules are applied on a rel-plan and emit a metric(or log it before/after the optimization) for debugging purposes.", "url": "https://github.com/apache/samza/pull/1384#discussion_r453858548", "createdAt": "2020-07-13T18:47:58Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -129,6 +142,13 @@ public RelRoot plan(String query) {\n       sqlOperatorTables.add(new SamzaSqlOperatorTable());\n       sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n \n+      // TODO: Introduce a pluggable rule factory.\n+      List<RelOptRule> rules = ImmutableList.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMzM4MA==", "bodyText": "AFAIK, only Hex/VolcanoPlanners make such decisions. Not sure if we can determine that in the rule itself.", "url": "https://github.com/apache/samza/pull/1384#discussion_r456933380", "createdAt": "2020-07-19T17:23:12Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -129,6 +142,13 @@ public RelRoot plan(String query) {\n       sqlOperatorTables.add(new SamzaSqlOperatorTable());\n       sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n \n+      // TODO: Introduce a pluggable rule factory.\n+      List<RelOptRule> rules = ImmutableList.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1ODU0OA=="}, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU5NTIwOnYy", "diffSide": "RIGHT", "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo1MjozNVrOGw1fHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNzoyNTo0N1rOGzxBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MTE1MA==", "bodyText": "Just curious. There seems to be considerable duplication with FilterJoinRule calcite native-class. Post CALCITE-3170, calcite supports anti-join on conditions push-down natively. If we upgrade to 1.21.0 rel-planner, then wouldn't overriding match suffice here?", "url": "https://github.com/apache/samza/pull/1384#discussion_r453861150", "createdAt": "2020-07-13T18:52:35Z", "author": {"login": "shanthoosh"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMzY0OA==", "bodyText": "Are you talking about just anti-joins or in general about this rule ? If latter, Slim has a comment on this as well and I responded to him. I will have add another rule for join condition which reuses the same logic. Let me see at that time if I can inherit from Calcite rule and just override match.", "url": "https://github.com/apache/samza/pull/1384#discussion_r456933648", "createdAt": "2020-07-19T17:25:47Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/SamzaSqlFilterRemoteJoinRule.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.planner;\n+\n+import java.util.Map;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptRuleOperand;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.Filter;\n+import org.apache.calcite.rel.core.Join;\n+import org.apache.calcite.rel.core.JoinRelType;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexBuilder;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.tools.RelBuilder;\n+import org.apache.calcite.tools.RelBuilderFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.samza.sql.interfaces.SqlIOConfig;\n+import org.apache.samza.sql.translator.JoinInputNode;\n+import org.apache.samza.sql.translator.JoinInputNode.InputType;\n+\n+/**\n+ * Planner rule for remote table joins that pushes filters above and\n+ * within a join node into its children nodes.\n+ * This class is customized form of Calcite's {@link org.apache.calcite.rel.rules.FilterJoinRule} for\n+ * remote table joins.\n+ */\n+public abstract class SamzaSqlFilterRemoteJoinRule extends RelOptRule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2MTE1MA=="}, "originalCommit": {"oid": "1642990a74d740ff7e464b2dd3fec9ea3c6bdd34"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1451, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}