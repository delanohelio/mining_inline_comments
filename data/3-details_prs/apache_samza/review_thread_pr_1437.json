{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjY2NTg0", "number": 1437, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNDoxNFrOE3a9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzo0MzowOFrOE7v2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTQ4OTE4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNDoxNFrOHwweOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNDoxNFrOHwweOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4Nzg2Ng==", "bodyText": "preferred way of calling super.finalize should be:\nfinalize() {\ntry {\n.. stop...\n} finally {\nsuper.finalize();\n}\n}", "url": "https://github.com/apache/samza/pull/1437#discussion_r520887866", "createdAt": "2020-11-10T21:34:14Z", "author": {"login": "sborya"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -188,6 +188,14 @@ public void flush() {\n     }\n   }\n \n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276ed046a57873b038d9256d453df4188ee16b82"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTQ5OTI3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNjo1N1rOHwwkAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTozNjo1N1rOHwwkAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4OTM0NA==", "bodyText": "I don't think using finalize is a good idea.\nThis will cause unpredictable performance impact, since each garbage collection may take an arbitrary time now.\nThe services should be stopped as a part of stopped flow, not on garbage collection.", "url": "https://github.com/apache/samza/pull/1437#discussion_r520889344", "createdAt": "2020-11-10T21:36:57Z", "author": {"login": "sborya"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -188,6 +188,14 @@ public void flush() {\n     }\n   }\n \n+  @Override\n+  protected void finalize() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276ed046a57873b038d9256d453df4188ee16b82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgzMjU2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo1ODoyMlrOH1eREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTozNzozOFrOH2JJmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzMjQ2Ng==", "bodyText": "can we do this.close() ?", "url": "https://github.com/apache/samza/pull/1437#discussion_r525832466", "createdAt": "2020-11-18T05:58:22Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,12 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+        LOG.info(\"CoordinatorStreamStore Shut Down Hook thread is closing kafka clients\");\n+        this.systemProducer.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48dddc0b74b10a52684adfb1732677351ac08945"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzNTA2NA==", "bodyText": "changed", "url": "https://github.com/apache/samza/pull/1437#discussion_r526535064", "createdAt": "2020-11-19T01:37:38Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,12 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+        LOG.info(\"CoordinatorStreamStore Shut Down Hook thread is closing kafka clients\");\n+        this.systemProducer.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzMjQ2Ng=="}, "originalCommit": {"oid": "48dddc0b74b10a52684adfb1732677351ac08945"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgzNTM0OnYy", "diffSide": "RIGHT", "path": "samza-kafka/src/main/scala/org/apache/samza/checkpoint/kafka/KafkaCheckpointManager.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo1OTo0MFrOH1eSpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTozODo1MlrOH2JLVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzMjg3MA==", "bodyText": "this.stop()?", "url": "https://github.com/apache/samza/pull/1437#discussion_r525832870", "createdAt": "2020-11-18T05:59:40Z", "author": {"login": "kw2542"}, "path": "samza-kafka/src/main/scala/org/apache/samza/checkpoint/kafka/KafkaCheckpointManager.scala", "diffHunk": "@@ -112,6 +115,12 @@ class KafkaCheckpointManager(checkpointSpec: KafkaStreamSpec,\n     info(s\"Starting the checkpoint SystemConsumer from oldest offset $oldestOffset\")\n     systemConsumer.register(checkpointSsp, oldestOffset)\n     systemConsumer.start()\n+    Runtime.getRuntime.addShutdownHook(new Thread(\"KafkaCheckPointManagerShutdownHook\") {\n+      override def run(): Unit = {\n+        producerRef.get().stop()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48dddc0b74b10a52684adfb1732677351ac08945"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzNTUwOQ==", "bodyText": "adminClient and producer/consumer are not started at the same time. so I think it is better to add different shutdownhook here?", "url": "https://github.com/apache/samza/pull/1437#discussion_r526535509", "createdAt": "2020-11-19T01:38:52Z", "author": {"login": "MabelYC"}, "path": "samza-kafka/src/main/scala/org/apache/samza/checkpoint/kafka/KafkaCheckpointManager.scala", "diffHunk": "@@ -112,6 +115,12 @@ class KafkaCheckpointManager(checkpointSpec: KafkaStreamSpec,\n     info(s\"Starting the checkpoint SystemConsumer from oldest offset $oldestOffset\")\n     systemConsumer.register(checkpointSsp, oldestOffset)\n     systemConsumer.start()\n+    Runtime.getRuntime.addShutdownHook(new Thread(\"KafkaCheckPointManagerShutdownHook\") {\n+      override def run(): Unit = {\n+        producerRef.get().stop()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgzMjg3MA=="}, "originalCommit": {"oid": "48dddc0b74b10a52684adfb1732677351ac08945"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTczNzUzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1MzoxMlrOH2zYgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzo0NjozOFrOH3kRSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzAxMQ==", "bodyText": "Relying on shutdown hooks for lifecycle management of components is not a good idea.\nThe close should be called by whoever created the SystemProducer etc instead. If it's created in this class, this class should have lifecycle methods of it's own, which should be called by the owner of this class.", "url": "https://github.com/apache/samza/pull/1437#discussion_r527227011", "createdAt": "2020-11-19T21:53:12Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,10 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340af402d51594ea27574c67af24036bd60b67dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1ODgxNA==", "bodyText": "+1, shutdown hooks are being executed when JVM exists, it does not seem to fit this scenario. It could be less appropriate compared to finalize() as the warning messages we get from Kafka is emitted in finalize() as well.", "url": "https://github.com/apache/samza/pull/1437#discussion_r527258814", "createdAt": "2020-11-19T22:54:47Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,10 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzAxMQ=="}, "originalCommit": {"oid": "340af402d51594ea27574c67af24036bd60b67dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI2NTIzMg==", "bodyText": "@kw2542 We shouldn't use finalize either. The Kafka warning shows that we're leaking client references somewhere without closing them. We should try to find and fix the underlying object lifecycle issue first instead of fixing the symptom.", "url": "https://github.com/apache/samza/pull/1437#discussion_r527265232", "createdAt": "2020-11-19T23:09:20Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,10 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzAxMQ=="}, "originalCommit": {"oid": "340af402d51594ea27574c67af24036bd60b67dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMwMzQ0NQ==", "bodyText": "@kw2542 Just FYI, @MabelYC and I were able to identify the places where we're leaking references in JobCoordinator and LocalApplicationRunner.", "url": "https://github.com/apache/samza/pull/1437#discussion_r527303445", "createdAt": "2020-11-20T00:30:51Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,10 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzAxMQ=="}, "originalCommit": {"oid": "340af402d51594ea27574c67af24036bd60b67dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMyNjUyOQ==", "bodyText": "This is awesome!", "url": "https://github.com/apache/samza/pull/1437#discussion_r527326529", "createdAt": "2020-11-20T00:58:44Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,10 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzAxMQ=="}, "originalCommit": {"oid": "340af402d51594ea27574c67af24036bd60b67dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNzk3Ng==", "bodyText": "@kw2542 @prateekm  @sborya  Changed to close the clients according to their own lifecycles. Please take a review. Thanks.", "url": "https://github.com/apache/samza/pull/1437#discussion_r528027976", "createdAt": "2020-11-20T23:46:38Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/metadatastore/CoordinatorStreamStore.java", "diffHunk": "@@ -111,6 +111,10 @@ public void init() {\n       systemConsumer.start();\n       systemProducer.register(SOURCE);\n       systemProducer.start();\n+      Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzAxMQ=="}, "originalCommit": {"oid": "340af402d51594ea27574c67af24036bd60b67dd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDg0MzE4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzozNzoyMVrOH3kH7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjowOTo0M1rOH5gaEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTU4Mg==", "bodyText": "Won't this cause the current processor to not be stopped?\nDo we also need to stop the metadata store in afterStop()?", "url": "https://github.com/apache/samza/pull/1437#discussion_r528025582", "createdAt": "2020-11-20T23:37:21Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -441,15 +441,24 @@ public void afterStop() {\n \n     @Override\n     public void afterFailure(Throwable t) {\n-      processors.removeIf(pair -> pair.getLeft().equals(processor));\n-\n+      // we need to close associated coordinator metadata store, although the processor failed\n+      processors.forEach(sp -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MzE3MA==", "bodyText": "I think metadata store are closed before calling afterStop().", "url": "https://github.com/apache/samza/pull/1437#discussion_r528043170", "createdAt": "2020-11-21T00:57:38Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -441,15 +441,24 @@ public void afterStop() {\n \n     @Override\n     public void afterFailure(Throwable t) {\n-      processors.removeIf(pair -> pair.getLeft().equals(processor));\n-\n+      // we need to close associated coordinator metadata store, although the processor failed\n+      processors.forEach(sp -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTU4Mg=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MDczMg==", "bodyText": "@MabelYC It's not obvious to me how we can guarantee that all metadata stores are always closed. Can you document why you think metadata stores are always closed before calling afterStop?", "url": "https://github.com/apache/samza/pull/1437#discussion_r529790732", "createdAt": "2020-11-24T18:27:53Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -441,15 +441,24 @@ public void afterStop() {\n \n     @Override\n     public void afterFailure(Throwable t) {\n-      processors.removeIf(pair -> pair.getLeft().equals(processor));\n-\n+      // we need to close associated coordinator metadata store, although the processor failed\n+      processors.forEach(sp -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTU4Mg=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2MTg0MQ==", "bodyText": "I double checked that the close loop contains some LI specific hookup with offspring. I updated the commit to stop the metadata store in afterStop() to make sure it got closed for sure.", "url": "https://github.com/apache/samza/pull/1437#discussion_r530061841", "createdAt": "2020-11-25T02:09:43Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -441,15 +441,24 @@ public void afterStop() {\n \n     @Override\n     public void afterFailure(Throwable t) {\n-      processors.removeIf(pair -> pair.getLeft().equals(processor));\n-\n+      // we need to close associated coordinator metadata store, although the processor failed\n+      processors.forEach(sp -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTU4Mg=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDg0NTc3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/MetadataResourceUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzozOTowMFrOH3kJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoxMDozN1rOH5gbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTk3MQ==", "bodyText": "Do we know for sure that this method is only called once? If so, do we need to create the checkpoint manager during construction, or can we create it and close it within createResources?", "url": "https://github.com/apache/samza/pull/1437#discussion_r528025971", "createdAt": "2020-11-20T23:39:00Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/MetadataResourceUtil.java", "diffHunk": "@@ -55,6 +55,7 @@ public MetadataResourceUtil(JobModel jobModel, MetricsRegistry metricsRegistry,\n   public void createResources() {\n     if (checkpointManager != null) {\n       checkpointManager.createResources();\n+      checkpointManager.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MzM1OA==", "bodyText": "I also thought we could create an admin client only to create resources. But i think it is not that good that then we would create two kafka adminClients for the same system in the same manager, and also create another thread. I think it would be better if we only create the clients we really need to create.\nI double checked the method is only called once. And advantages not to create it during construction?", "url": "https://github.com/apache/samza/pull/1437#discussion_r528043358", "createdAt": "2020-11-21T00:58:49Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/MetadataResourceUtil.java", "diffHunk": "@@ -55,6 +55,7 @@ public MetadataResourceUtil(JobModel jobModel, MetricsRegistry metricsRegistry,\n   public void createResources() {\n     if (checkpointManager != null) {\n       checkpointManager.createResources();\n+      checkpointManager.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTk3MQ=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4NzY4MA==", "bodyText": "@MabelYC Sorry, don't understand the first part of your reply. What is that in response to?\nCreating the checkpoint manager in the constructor and stopping it after the first use is :\n\nAsymmetrical. Ideally this class should have lifecycle methods (start/stop) and the checkpoint manager would be stopped there. Also, looks like we don't even start the checkpoint manager?\nMakes an unsafe assumption that the method is only called once. If it was ever called more than once, the second call would fail since the checkpoint manager is already stopped.\n\nIMHO it will be cleaner to create a new checkpoint manager in createResources and close it after use. That way there is no additional overhead as long as it's called once, and its safe if its called more than once.", "url": "https://github.com/apache/samza/pull/1437#discussion_r529787680", "createdAt": "2020-11-24T18:22:56Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/MetadataResourceUtil.java", "diffHunk": "@@ -55,6 +55,7 @@ public MetadataResourceUtil(JobModel jobModel, MetricsRegistry metricsRegistry,\n   public void createResources() {\n     if (checkpointManager != null) {\n       checkpointManager.createResources();\n+      checkpointManager.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTk3MQ=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2MjEyOA==", "bodyText": "Got it. Updated the pr. Created an adminClient for this function.", "url": "https://github.com/apache/samza/pull/1437#discussion_r530062128", "createdAt": "2020-11-25T02:10:37Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/MetadataResourceUtil.java", "diffHunk": "@@ -55,6 +55,7 @@ public MetadataResourceUtil(JobModel jobModel, MetricsRegistry metricsRegistry,\n   public void createResources() {\n     if (checkpointManager != null) {\n       checkpointManager.createResources();\n+      checkpointManager.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNTk3MQ=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDg1MzczOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzo0MzowOFrOH3kN3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDo1ODo1MlrOH3lNaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNzEwMQ==", "bodyText": "Is it safe to modify (remove) the map here while iterating over it (foreach)?", "url": "https://github.com/apache/samza/pull/1437#discussion_r528027101", "createdAt": "2020-11-20T23:43:08Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -441,15 +441,24 @@ public void afterStop() {\n \n     @Override\n     public void afterFailure(Throwable t) {\n-      processors.removeIf(pair -> pair.getLeft().equals(processor));\n-\n+      // we need to close associated coordinator metadata store, although the processor failed\n+      processors.forEach(sp -> {\n+        if (sp.getLeft().equals(processor)) {\n+          if (sp.getRight() != null) {\n+            sp.getRight().close();\n+          }\n+          processors.remove(sp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA0MzM2OA==", "bodyText": "Thanks for pointing this. Changed to remove it after finishing iterating.", "url": "https://github.com/apache/samza/pull/1437#discussion_r528043368", "createdAt": "2020-11-21T00:58:52Z", "author": {"login": "MabelYC"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -441,15 +441,24 @@ public void afterStop() {\n \n     @Override\n     public void afterFailure(Throwable t) {\n-      processors.removeIf(pair -> pair.getLeft().equals(processor));\n-\n+      // we need to close associated coordinator metadata store, although the processor failed\n+      processors.forEach(sp -> {\n+        if (sp.getLeft().equals(processor)) {\n+          if (sp.getRight() != null) {\n+            sp.getRight().close();\n+          }\n+          processors.remove(sp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyNzEwMQ=="}, "originalCommit": {"oid": "db47dd3db4a9162975363ca17a120aaa9dfd9ae9"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1525, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}