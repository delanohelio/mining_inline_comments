{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Nzc4OTA1", "number": 1386, "title": "[SAMZA-2557] Adding support for nested rows access via dot path.", "bodyText": "This is an initial draft on how to support the nested row access in Samza SQL.\nThere are multiple  #interconnected items.\n\n\nAdded a the actual definition of a ROW Calcite Data Type [EASY FINAL].\n\n\nAdded a Row Converter form Samza Type System to Calcite Type System [Okay for now but will need more work for types like timestamps].\n\n\nAdded a Collector for projects and filters that are pushed to Remote Table Scan [Complex and Needs Discussions].\n\n\n\n\nWhy we need this ? Adding a nested row struct forces the addition of project and in general nothing stops Calcite logical planner to add such an identity project thus this is needed anyway.\n\n\nHow this done ? As of now I chose to minimize the amount of rewrite or refactor and added a queue to collect the call stack between Remote table Scan and Join node. Then When doing the join The Project and Filter will happen post Join Lookup. We need to handle the case where filter does not match and null pad the result or return null as by current convention. To be honest I am still debating adding the Filter push down seems like there is no real gain since we have done the lookup already.\n\n\n\nAdded Ref Implementation for the getNestedField legacy udf (This udf has to be removed because it assumes Everything is a SamzaRelRecord) [DONE].\nNeed more code cleaning where type is mixed up between String Java and Avro Utf8 Java as a Key in the map [Follow up].\nNeed more work on the union Type System case we have more than 2 Types [Follow up].\n\n\n\nThis change is\u2002", "createdAt": "2020-06-18T21:46:02Z", "url": "https://github.com/apache/samza/pull/1386", "merged": true, "mergeCommit": {"oid": "f5faae09fa45844ba55326a7f10a475d9e1ee8e3"}, "closed": true, "closedAt": "2020-07-22T15:52:07Z", "author": {"login": "b-slim"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsmrkiAFqTQzMzcwMTkwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3c4NJgFqTQ1MzQ1MjM3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzAxOTAy", "url": "https://github.com/apache/samza/pull/1386#pullrequestreview-433701902", "createdAt": "2020-06-18T23:02:26Z", "commit": {"oid": "d41bc558c61f35e91537ff6f4787d0574b1f29f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzowMjoyNlrOGmC3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzowMjoyNlrOGmC3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NjA2NA==", "bodyText": "Could we remove FILTER_ON_JOIN optimization ? It doesn't work well with remote joins. We should instead use the optimization for remote joins in the other PR that I sent.", "url": "https://github.com/apache/samza/pull/1386#discussion_r442546064", "createdAt": "2020-06-18T23:02:26Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -141,20 +142,28 @@ public RelRoot plan(String query) {\n           .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n           .traitDefs(traitDefs)\n           .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n+          .programs(\n+              Programs.hep(ImmutableList.of(FilterJoinRule.FILTER_ON_JOIN), true, DefaultRelMetadataProvider.INSTANCE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41bc558c61f35e91537ff6f4787d0574b1f29f9"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA4OTc4", "url": "https://github.com/apache/samza/pull/1386#pullrequestreview-435008978", "createdAt": "2020-06-22T14:58:46Z", "commit": {"oid": "6edd5247ba7a0b75dae167bcd4a8a445d2f3f2e8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo1ODo0N1rOGnEl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToxMDozNVrOGnFG1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYyMjkwMQ==", "bodyText": "Looks like this is where the magic is happening, Can you add some comments describing what we are doing and why we are doing this?", "url": "https://github.com/apache/samza/pull/1386#discussion_r443622901", "createdAt": "2020-06-22T14:58:47Z", "author": {"login": "srinipunuru"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/translator/JoinTranslator.java", "diffHunk": "@@ -141,8 +141,16 @@ void translate(final LogicalJoin join, final TranslatorContext translatorContext\n \n     if (tableNode.isRemoteTable()) {\n       String remoteTableName = tableNode.getSourceName();\n-      StreamTableJoinFunction joinFn = new SamzaSqlRemoteTableJoinFunction(context.getMsgConverter(remoteTableName),\n-          context.getTableKeyConverter(remoteTableName), streamNode, tableNode, join.getJoinType(), queryId);\n+      MessageStream operatorStack = context.getMessageStream(tableNode.getRelNode().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6edd5247ba7a0b75dae167bcd4a8a445d2f3f2e8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMDEzOQ==", "bodyText": "Can you add more comments on what we are doing here?", "url": "https://github.com/apache/samza/pull/1386#discussion_r443630139", "createdAt": "2020-06-22T15:08:58Z", "author": {"login": "srinipunuru"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/translator/MessageStreamCollector.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.translator;\n+\n+import java.io.Closeable;\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.util.ArrayDeque;\n+import java.util.Collection;\n+import java.util.Deque;\n+import java.util.function.Function;\n+import org.apache.samza.context.Context;\n+import org.apache.samza.operators.KV;\n+import org.apache.samza.operators.MessageStream;\n+import org.apache.samza.operators.OutputStream;\n+import org.apache.samza.operators.functions.AsyncFlatMapFunction;\n+import org.apache.samza.operators.functions.ClosableFunction;\n+import org.apache.samza.operators.functions.FilterFunction;\n+import org.apache.samza.operators.functions.FlatMapFunction;\n+import org.apache.samza.operators.functions.JoinFunction;\n+import org.apache.samza.operators.functions.MapFunction;\n+import org.apache.samza.operators.functions.SinkFunction;\n+import org.apache.samza.operators.functions.StreamTableJoinFunction;\n+import org.apache.samza.operators.windows.Window;\n+import org.apache.samza.operators.windows.WindowPane;\n+import org.apache.samza.serializers.KVSerde;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.sql.data.SamzaSqlRelMessage;\n+import org.apache.samza.table.Table;\n+\n+\n+/**\n+ * Collector of Map and Filter Samza Function, used to collect current call stack and trigger it when applying the join function.\n+ *\n+ * @TODO This class is a work around here to minimize the amount of code changes, but in an ideal world,\n+ * @TODO where we use Calcite planner in conventional way we can combine function when via translation of RelNodes.\n+ */\n+class MessageStreamCollector implements MessageStream<SamzaSqlRelMessage>, Serializable, Closeable {\n+\n+  private final Deque<MapFunction<? super SamzaSqlRelMessage, ? extends SamzaSqlRelMessage>> _mapFnCallQueue =\n+      new ArrayDeque<>();\n+  private final Deque<ClosableFunction> _closingStack = new ArrayDeque<>();\n+\n+  @Override\n+  public <OM> MessageStream<OM> map(MapFunction<? super SamzaSqlRelMessage, ? extends OM> mapFn) {\n+    _mapFnCallQueue.offer((MapFunction<? super SamzaSqlRelMessage, ? extends SamzaSqlRelMessage>) mapFn);\n+    return (MessageStream<OM>) this;\n+  }\n+\n+  @Override\n+  public MessageStream<SamzaSqlRelMessage> filter(FilterFunction<? super SamzaSqlRelMessage> filterFn) {\n+    _mapFnCallQueue.offer(new FilterMapAdapter(filterFn));\n+    return this;\n+  }\n+\n+   Function<SamzaSqlRelMessage, SamzaSqlRelMessage> getFunction(Context context) {\n+    Function<SamzaSqlRelMessage, SamzaSqlRelMessage> tailFn = null;\n+    while (!_mapFnCallQueue.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6edd5247ba7a0b75dae167bcd4a8a445d2f3f2e8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzMTMxNg==", "bodyText": "Can you add comments here as well on why this adapter is required and what it does?", "url": "https://github.com/apache/samza/pull/1386#discussion_r443631316", "createdAt": "2020-06-22T15:10:35Z", "author": {"login": "srinipunuru"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/translator/MessageStreamCollector.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.translator;\n+\n+import java.io.Closeable;\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.util.ArrayDeque;\n+import java.util.Collection;\n+import java.util.Deque;\n+import java.util.function.Function;\n+import org.apache.samza.context.Context;\n+import org.apache.samza.operators.KV;\n+import org.apache.samza.operators.MessageStream;\n+import org.apache.samza.operators.OutputStream;\n+import org.apache.samza.operators.functions.AsyncFlatMapFunction;\n+import org.apache.samza.operators.functions.ClosableFunction;\n+import org.apache.samza.operators.functions.FilterFunction;\n+import org.apache.samza.operators.functions.FlatMapFunction;\n+import org.apache.samza.operators.functions.JoinFunction;\n+import org.apache.samza.operators.functions.MapFunction;\n+import org.apache.samza.operators.functions.SinkFunction;\n+import org.apache.samza.operators.functions.StreamTableJoinFunction;\n+import org.apache.samza.operators.windows.Window;\n+import org.apache.samza.operators.windows.WindowPane;\n+import org.apache.samza.serializers.KVSerde;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.sql.data.SamzaSqlRelMessage;\n+import org.apache.samza.table.Table;\n+\n+\n+/**\n+ * Collector of Map and Filter Samza Function, used to collect current call stack and trigger it when applying the join function.\n+ *\n+ * @TODO This class is a work around here to minimize the amount of code changes, but in an ideal world,\n+ * @TODO where we use Calcite planner in conventional way we can combine function when via translation of RelNodes.\n+ */\n+class MessageStreamCollector implements MessageStream<SamzaSqlRelMessage>, Serializable, Closeable {\n+\n+  private final Deque<MapFunction<? super SamzaSqlRelMessage, ? extends SamzaSqlRelMessage>> _mapFnCallQueue =\n+      new ArrayDeque<>();\n+  private final Deque<ClosableFunction> _closingStack = new ArrayDeque<>();\n+\n+  @Override\n+  public <OM> MessageStream<OM> map(MapFunction<? super SamzaSqlRelMessage, ? extends OM> mapFn) {\n+    _mapFnCallQueue.offer((MapFunction<? super SamzaSqlRelMessage, ? extends SamzaSqlRelMessage>) mapFn);\n+    return (MessageStream<OM>) this;\n+  }\n+\n+  @Override\n+  public MessageStream<SamzaSqlRelMessage> filter(FilterFunction<? super SamzaSqlRelMessage> filterFn) {\n+    _mapFnCallQueue.offer(new FilterMapAdapter(filterFn));\n+    return this;\n+  }\n+\n+   Function<SamzaSqlRelMessage, SamzaSqlRelMessage> getFunction(Context context) {\n+    Function<SamzaSqlRelMessage, SamzaSqlRelMessage> tailFn = null;\n+    while (!_mapFnCallQueue.isEmpty()) {\n+      MapFunction<? super SamzaSqlRelMessage, ? extends SamzaSqlRelMessage> f = _mapFnCallQueue.poll();\n+      f.init(context);\n+      _closingStack.push(f);\n+      Function<SamzaSqlRelMessage, SamzaSqlRelMessage> current = x -> {\n+        if (x != null) {\n+          return f.apply(x);\n+        }\n+        return null;\n+      };\n+      if (tailFn == null) {\n+        tailFn = current;\n+      } else {\n+        tailFn = current.compose(tailFn);\n+      }\n+    }\n+    return tailFn == null ? Function.identity() : tailFn;\n+  }\n+\n+  private static class FilterMapAdapter implements MapFunction<SamzaSqlRelMessage, SamzaSqlRelMessage> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6edd5247ba7a0b75dae167bcd4a8a445d2f3f2e8"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d46fbff9c80e270a6f13f4551c6e08fef92b924d", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/d46fbff9c80e270a6f13f4551c6e08fef92b924d", "committedDate": "2020-06-24T00:00:07Z", "message": "Adding more comments and simplify the init and closing composing"}, "afterCommit": {"oid": "57954b0e1243ccc05362bb2a983274a3d76a5ad1", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/57954b0e1243ccc05362bb2a983274a3d76a5ad1", "committedDate": "2020-06-24T00:04:10Z", "message": "adding more comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57954b0e1243ccc05362bb2a983274a3d76a5ad1", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/57954b0e1243ccc05362bb2a983274a3d76a5ad1", "committedDate": "2020-06-24T00:04:10Z", "message": "adding more comments"}, "afterCommit": {"oid": "957a084091d4257527d52ed1a76dc9d7d3d0fce1", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/957a084091d4257527d52ed1a76dc9d7d3d0fce1", "committedDate": "2020-06-24T00:07:02Z", "message": "adding more comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "957a084091d4257527d52ed1a76dc9d7d3d0fce1", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/957a084091d4257527d52ed1a76dc9d7d3d0fce1", "committedDate": "2020-06-24T00:07:02Z", "message": "adding more comments"}, "afterCommit": {"oid": "61205906f5aaef3de59d79c3fe8e9ce406d4a420", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/61205906f5aaef3de59d79c3fe8e9ce406d4a420", "committedDate": "2020-06-24T00:56:54Z", "message": "adding more comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61205906f5aaef3de59d79c3fe8e9ce406d4a420", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/61205906f5aaef3de59d79c3fe8e9ce406d4a420", "committedDate": "2020-06-24T00:56:54Z", "message": "adding more comments"}, "afterCommit": {"oid": "76ad492812c00e85c13c8fe1270ff3893216f5ec", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/76ad492812c00e85c13c8fe1270ff3893216f5ec", "committedDate": "2020-06-26T17:49:17Z", "message": "adding more comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2cc0b50fcfb60901e56351b326ee7292abb88eb", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/d2cc0b50fcfb60901e56351b326ee7292abb88eb", "committedDate": "2020-06-29T18:03:06Z", "message": "fix the type converter used by udfs"}, "afterCommit": {"oid": "03bd7c3c512987cf3e4c856f4c687c4689c40fec", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/03bd7c3c512987cf3e4c856f4c687c4689c40fec", "committedDate": "2020-06-30T05:08:42Z", "message": "refix the test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjYxNDMx", "url": "https://github.com/apache/samza/pull/1386#pullrequestreview-441661431", "createdAt": "2020-07-02T13:09:29Z", "commit": {"oid": "4ac2649e220345927a6d32c288a84ca1391dcf34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzowOToyOVrOGsMILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzowOToyOVrOGsMILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4OTIzMA==", "bodyText": "I still do not get it. Why can't we use query optimization for remote tables and if we see a filter/projection between table (we can detect table vs stream in the optimizer rule) and join in the Calcite plan, push them up ?", "url": "https://github.com/apache/samza/pull/1386#discussion_r448989230", "createdAt": "2020-07-02T13:09:29Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/translator/MessageStreamCollector.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.translator;\n+\n+import java.io.Closeable;\n+import java.io.Serializable;\n+import java.time.Duration;\n+import java.util.ArrayDeque;\n+import java.util.Collection;\n+import java.util.Deque;\n+import java.util.function.Function;\n+import org.apache.samza.context.Context;\n+import org.apache.samza.operators.KV;\n+import org.apache.samza.operators.MessageStream;\n+import org.apache.samza.operators.OutputStream;\n+import org.apache.samza.operators.functions.AsyncFlatMapFunction;\n+import org.apache.samza.operators.functions.FilterFunction;\n+import org.apache.samza.operators.functions.FlatMapFunction;\n+import org.apache.samza.operators.functions.JoinFunction;\n+import org.apache.samza.operators.functions.MapFunction;\n+import org.apache.samza.operators.functions.SinkFunction;\n+import org.apache.samza.operators.functions.StreamTableJoinFunction;\n+import org.apache.samza.operators.windows.Window;\n+import org.apache.samza.operators.windows.WindowPane;\n+import org.apache.samza.serializers.KVSerde;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.sql.data.SamzaSqlRelMessage;\n+import org.apache.samza.table.Table;\n+\n+\n+/**\n+ * Collector of Map and Filter Samza Functions to collect call stack on the top of Remote table.\n+ * This Collector will be used by Join operator and trigger it when applying the join function post lookup.\n+ *\n+ * Note that this is needed because the Remote Table can not expose a proper {@code MessageStream}.\n+ * It is a work around to minimize the amount of code changes of the current Query Translator {@link org.apache.samza.sql.translator.QueryTranslator},\n+ * But in an ideal world, we should use Calcite planner in conventional way we can combine function when via translation of RelNodes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac2649e220345927a6d32c288a84ca1391dcf34"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86528c7f8b74c2bdc80f301564b28e46c9cf1917", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/86528c7f8b74c2bdc80f301564b28e46c9cf1917", "committedDate": "2020-07-02T15:15:33Z", "message": "Not sure what this test is testing for it is a regular join between Stream and local table"}, "afterCommit": {"oid": "f08bf511ac36e5ca17eb1895edcd7da688dc95d0", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/f08bf511ac36e5ca17eb1895edcd7da688dc95d0", "committedDate": "2020-07-02T17:21:16Z", "message": "fix java doc and minor change on the type cast\n\nNot sure what this test is testing for it is a regular join between Stream and local table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzU1NjAy", "url": "https://github.com/apache/samza/pull/1386#pullrequestreview-451355602", "createdAt": "2020-07-20T07:24:29Z", "commit": {"oid": "9938a74ab4db17141dd8ed4eb3322dff5f3e6462"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoyNDoyOVrOGz81Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozNDowMFrOG0QHwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNzE3MQ==", "bodyText": "Just curious, is there any reason to set caching to false ?", "url": "https://github.com/apache/samza/pull/1386#discussion_r457127171", "createdAt": "2020-07-20T07:24:29Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -110,46 +114,50 @@ private void registerSourceSchemas(SchemaPlus rootSchema) {\n   }\n \n   public RelRoot plan(String query) {\n-    try {\n-      Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n-      CalciteConnection calciteConnection = connection.unwrap(CalciteConnection.class);\n-      SchemaPlus rootSchema = calciteConnection.getRootSchema();\n-      registerSourceSchemas(rootSchema);\n-\n-      List<SamzaSqlScalarFunctionImpl> samzaSqlFunctions = udfMetadata.stream()\n-          .map(x -> new SamzaSqlScalarFunctionImpl(x))\n-          .collect(Collectors.toList());\n-\n-      final List<RelTraitDef> traitDefs = new ArrayList<>();\n-\n-      traitDefs.add(ConventionTraitDef.INSTANCE);\n-      traitDefs.add(RelCollationTraitDef.INSTANCE);\n-\n-      List<SqlOperatorTable> sqlOperatorTables = new ArrayList<>();\n-      sqlOperatorTables.add(new SamzaSqlOperatorTable());\n-      sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n-\n-      // Using lenient so that !=,%,- are allowed.\n-      FrameworkConfig frameworkConfig = Frameworks.newConfigBuilder()\n-          .parserConfig(SqlParser.configBuilder()\n-              .setLex(Lex.JAVA)\n-              .setConformance(SqlConformanceEnum.LENIENT)\n-              .setCaseSensitive(false) // Make Udfs case insensitive\n-              .build())\n-          .defaultSchema(rootSchema)\n-          .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n-          .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n-          .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n-          .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n-\n+    SchemaPlus rootSchema = CalciteSchema.createRootSchema(true, false).plus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9938a74ab4db17141dd8ed4eb3322dff5f3e6462"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyOTAwOQ==", "bodyText": "Could you pull in the latest master branch code ? I have pushed Query optimization code which conflicts with your changes.", "url": "https://github.com/apache/samza/pull/1386#discussion_r457129009", "createdAt": "2020-07-20T07:27:14Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/planner/QueryPlanner.java", "diffHunk": "@@ -110,46 +114,50 @@ private void registerSourceSchemas(SchemaPlus rootSchema) {\n   }\n \n   public RelRoot plan(String query) {\n-    try {\n-      Connection connection = DriverManager.getConnection(\"jdbc:calcite:\");\n-      CalciteConnection calciteConnection = connection.unwrap(CalciteConnection.class);\n-      SchemaPlus rootSchema = calciteConnection.getRootSchema();\n-      registerSourceSchemas(rootSchema);\n-\n-      List<SamzaSqlScalarFunctionImpl> samzaSqlFunctions = udfMetadata.stream()\n-          .map(x -> new SamzaSqlScalarFunctionImpl(x))\n-          .collect(Collectors.toList());\n-\n-      final List<RelTraitDef> traitDefs = new ArrayList<>();\n-\n-      traitDefs.add(ConventionTraitDef.INSTANCE);\n-      traitDefs.add(RelCollationTraitDef.INSTANCE);\n-\n-      List<SqlOperatorTable> sqlOperatorTables = new ArrayList<>();\n-      sqlOperatorTables.add(new SamzaSqlOperatorTable());\n-      sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n-\n-      // Using lenient so that !=,%,- are allowed.\n-      FrameworkConfig frameworkConfig = Frameworks.newConfigBuilder()\n-          .parserConfig(SqlParser.configBuilder()\n-              .setLex(Lex.JAVA)\n-              .setConformance(SqlConformanceEnum.LENIENT)\n-              .setCaseSensitive(false) // Make Udfs case insensitive\n-              .build())\n-          .defaultSchema(rootSchema)\n-          .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n-          .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n-          .traitDefs(traitDefs)\n-          .context(Contexts.EMPTY_CONTEXT)\n-          .costFactory(null)\n-          .build();\n-      Planner planner = Frameworks.getPlanner(frameworkConfig);\n-\n+    SchemaPlus rootSchema = CalciteSchema.createRootSchema(true, false).plus();\n+    registerSourceSchemas(rootSchema);\n+\n+    List<SamzaSqlScalarFunctionImpl> samzaSqlFunctions =\n+        udfMetadata.stream().map(x -> new SamzaSqlScalarFunctionImpl(x)).collect(Collectors.toList());\n+\n+    final List<RelTraitDef> traitDefs = new ArrayList<>();\n+\n+    traitDefs.add(ConventionTraitDef.INSTANCE);\n+    traitDefs.add(RelCollationTraitDef.INSTANCE);\n+\n+    List<SqlOperatorTable> sqlOperatorTables = new ArrayList<>();\n+    sqlOperatorTables.add(new SamzaSqlOperatorTable());\n+    sqlOperatorTables.add(new SamzaSqlUdfOperatorTable(samzaSqlFunctions));\n+\n+    // Using lenient so that !=,%,- are allowed.\n+    FrameworkConfig frameworkConfig = Frameworks.newConfigBuilder()\n+        .parserConfig(SqlParser.configBuilder()\n+            .setLex(Lex.JAVA)\n+            .setConformance(SqlConformanceEnum.LENIENT)\n+            .setCaseSensitive(false) // Make Udfs case insensitive\n+            .build())\n+        .defaultSchema(rootSchema)\n+        .operatorTable(new ChainedSqlOperatorTable(sqlOperatorTables))\n+        .sqlToRelConverterConfig(SqlToRelConverter.Config.DEFAULT)\n+        .traitDefs(traitDefs)\n+        .context(Contexts.EMPTY_CONTEXT)\n+        .programs(\n+            Programs.hep(ImmutableList.of(FilterJoinRule.FILTER_ON_JOIN), true, DefaultRelMetadataProvider.INSTANCE))\n+        .build();\n+\n+    // Planner is a auto closable\n+    try (Planner planner = Frameworks.getPlanner(frameworkConfig)) {\n       SqlNode sql = planner.parse(query);\n       SqlNode validatedSql = planner.validate(sql);\n       RelRoot relRoot = planner.rel(validatedSql);\n       LOG.info(\"query plan:\\n\" + RelOptUtil.toString(relRoot.rel, SqlExplainLevel.ALL_ATTRIBUTES));\n-      return relRoot;\n+      RelTraitSet relTraitSet = RelTraitSet.createEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9938a74ab4db17141dd8ed4eb3322dff5f3e6462"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNzQ0NA==", "bodyText": "Is this truly backward compatible with with the existing GetNestedField udf ? Does this support all the types that are tested in GetSqlFieldUdf ? Esp nested map and array. https://github.com/apache/samza/blob/dcd4b558a2c702f5b5a320fdb9d0c3fcadabd09b/samza-sql/src/test/java/org/apache/samza/sql/fn/TestGetSqlFieldUdf.java", "url": "https://github.com/apache/samza/pull/1386#discussion_r457427444", "createdAt": "2020-07-20T14:17:32Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/udf/GetNestedField.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.sql.udf;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import java.lang.reflect.Type;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.calcite.adapter.enumerable.CallImplementor;\n+import org.apache.calcite.adapter.enumerable.EnumUtils;\n+import org.apache.calcite.adapter.enumerable.NullPolicy;\n+import org.apache.calcite.adapter.enumerable.RexImpTable;\n+import org.apache.calcite.jdbc.JavaTypeFactoryImpl;\n+import org.apache.calcite.linq4j.tree.ConstantExpression;\n+import org.apache.calcite.linq4j.tree.Expression;\n+import org.apache.calcite.linq4j.tree.ExpressionType;\n+import org.apache.calcite.linq4j.tree.Expressions;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.schema.Function;\n+import org.apache.calcite.schema.FunctionParameter;\n+import org.apache.calcite.schema.ImplementableFunction;\n+import org.apache.calcite.schema.ScalarFunction;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.SqlFunction;\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.calcite.sql.SqlOperatorBinding;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.type.OperandTypes;\n+import org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.calcite.sql.validate.SqlUserDefinedFunction;\n+\n+import static org.apache.calcite.schema.impl.ReflectiveFunctionBase.builder;\n+\n+\n+/**\n+ * Operator to extract nested Rows or Fields form a struct row type using a dotted path.\n+ * The goal of this operator is two-fold.\n+ * First it is a temporary fix for https://issues.apache.org/jira/browse/CALCITE-4065 to extract a row from a row.\n+ * Second it will enable smooth backward compatible migration from existing udf that relies on legacy row format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9938a74ab4db17141dd8ed4eb3322dff5f3e6462"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0MzI2Ng==", "bodyText": "In what scenarios do you expect the map key to be of Utf8 type ? Considering that Avro mandates the map key type to be a string, isn't it fair to expect users to convert Utf8s to string ?", "url": "https://github.com/apache/samza/pull/1386#discussion_r457443266", "createdAt": "2020-07-20T14:34:00Z", "author": {"login": "atoomula"}, "path": "samza-sql/src/main/java/org/apache/samza/sql/avro/AvroRelConverter.java", "diffHunk": "@@ -194,10 +194,12 @@ public static Object convertToAvroObject(Object relObj, Schema schema) {\n             .collect(Collectors.toList());\n         return avroList;\n       case MAP:\n-        return ((Map<String, ?>) relObj).entrySet()\n-            .stream()\n-            .collect(Collectors.toMap(Map.Entry::getKey,\n-              e -> convertToAvroObject(e.getValue(), getNonNullUnionSchema(schema).getValueType())));\n+        // If you ask why not using String and that is because some strings are Wrapped into org.apache.avro.util.Utf8\n+        // TODO looking at the Utf8 code base it is not immutable, having it as a key is calling for trouble!\n+        final Map<Object, Object> outputMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9938a74ab4db17141dd8ed4eb3322dff5f3e6462"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da011b6d602b0ad88060550b1ff31a2e6b4c33b7", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/da011b6d602b0ad88060550b1ff31a2e6b4c33b7", "committedDate": "2020-07-21T00:12:30Z", "message": "Working version still need to work on extracting nested fields udf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19302507827c43649f7062fe13fd29fee9d5dd25", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/19302507827c43649f7062fe13fd29fee9d5dd25", "committedDate": "2020-07-21T00:20:30Z", "message": "working version end to end with Filter optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c47c0feaa39b512f00e876a565192b1a49b3d9d", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/5c47c0feaa39b512f00e876a565192b1a49b3d9d", "committedDate": "2020-07-21T00:20:33Z", "message": "left outer join test with filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d3059bb1886a7300a8756f6b93ab41fe36c0a30", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/5d3059bb1886a7300a8756f6b93ab41fe36c0a30", "committedDate": "2020-07-21T00:20:33Z", "message": "adding more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ea29e235fd076e0db03961bc810efa707f5c35", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/87ea29e235fd076e0db03961bc810efa707f5c35", "committedDate": "2020-07-21T00:20:33Z", "message": "fix the type converter used by udfs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1e5e8f969523afcf58b35c0927ddaa514c490f", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/ad1e5e8f969523afcf58b35c0927ddaa514c490f", "committedDate": "2020-07-21T00:20:33Z", "message": "refix the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c3a7398fee33002f693da49256d83a6f2e1fc9", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/59c3a7398fee33002f693da49256d83a6f2e1fc9", "committedDate": "2020-07-21T00:20:33Z", "message": "Added GetNestedField built in operator to allow support backward comaptiblity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bc3b5d940d71fa8c0dc928e1eb919f9330f7d0a", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/2bc3b5d940d71fa8c0dc928e1eb919f9330f7d0a", "committedDate": "2020-07-21T00:21:29Z", "message": "fix java doc and minor change on the type cast\n\nNot sure what this test is testing for it is a regular join between Stream and local table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fbeab52a88fef95174c038720aa326252067aee", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/5fbeab52a88fef95174c038720aa326252067aee", "committedDate": "2020-07-21T00:21:33Z", "message": "Adding more tests and some logging to help read the compiled code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f9ec16a482ffaf7e0aebefbe1911181541b996", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/60f9ec16a482ffaf7e0aebefbe1911181541b996", "committedDate": "2020-07-21T00:21:33Z", "message": "Adding some Type sanity to the Join functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "958e2ea643f049274db9a35ff01855d396d7b234", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/958e2ea643f049274db9a35ff01855d396d7b234", "committedDate": "2020-07-21T00:21:33Z", "message": "fix minor WAR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50f8f8cd6a4f16ddf4e23f00cc6bad188863e37d", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/50f8f8cd6a4f16ddf4e23f00cc6bad188863e37d", "committedDate": "2020-07-21T01:20:52Z", "message": "revert unwanted changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9938a74ab4db17141dd8ed4eb3322dff5f3e6462", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/9938a74ab4db17141dd8ed4eb3322dff5f3e6462", "committedDate": "2020-07-16T16:27:14Z", "message": "Adding more tests and some logging to help read the compiled code"}, "afterCommit": {"oid": "78e6da887d72bddf506e30fea57759ac5e1bf08a", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/78e6da887d72bddf506e30fea57759ac5e1bf08a", "committedDate": "2020-07-21T01:21:17Z", "message": "fix the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b917b7ea98317ee1f9ad1b0528326bf92d3f9168", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/b917b7ea98317ee1f9ad1b0528326bf92d3f9168", "committedDate": "2020-07-21T15:48:23Z", "message": "fix the tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78e6da887d72bddf506e30fea57759ac5e1bf08a", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/78e6da887d72bddf506e30fea57759ac5e1bf08a", "committedDate": "2020-07-21T01:21:17Z", "message": "fix the tests"}, "afterCommit": {"oid": "b917b7ea98317ee1f9ad1b0528326bf92d3f9168", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/b917b7ea98317ee1f9ad1b0528326bf92d3f9168", "committedDate": "2020-07-21T15:48:23Z", "message": "fix the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e95902b615bd90ec686902fadbab9f98c03a75c", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/3e95902b615bd90ec686902fadbab9f98c03a75c", "committedDate": "2020-07-21T17:46:02Z", "message": "Adding more tests for map type and fix the Avro conversion for type with one type only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd49581da4a6bcb8a5f0bc936c7adf3159b28b2b", "author": {"user": {"login": "b-slim", "name": "Slim Bouguerra"}}, "url": "https://github.com/apache/samza/commit/cd49581da4a6bcb8a5f0bc936c7adf3159b28b2b", "committedDate": "2020-07-21T22:28:05Z", "message": "fix the style checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDUyMzcx", "url": "https://github.com/apache/samza/pull/1386#pullrequestreview-453452371", "createdAt": "2020-07-22T15:50:39Z", "commit": {"oid": "cd49581da4a6bcb8a5f0bc936c7adf3159b28b2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4642, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}