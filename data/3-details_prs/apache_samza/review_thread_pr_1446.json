{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTQ3MzU2", "number": 1446, "reviewThreads": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzowNzozMFrOE9C1xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDo0NjoxOVrOFIYs2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDQ1MTI1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzowNzozMFrOH5hc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMzowNzozMFrOH5hc9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3ODk2Ng==", "bodyText": "minor: prefer \"host\" to \"node\" as rest of samza (non-yarn specific) code uses host", "url": "https://github.com/apache/samza/pull/1446#discussion_r530078966", "createdAt": "2020-11-25T03:07:30Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java", "diffHunk": "@@ -87,6 +88,12 @@ public ClusterResourceManager(Callback callback) {\n    */\n   public abstract void requestResources(SamzaResourceRequest resourceRequest);\n \n+  /**\n+   * Get the node to fault domain map from the cluster resource manager.\n+   * @return A map of the nodes to the fault domain they reside in.\n+   */\n+  public abstract Map<String, String> getNodeToFaultDomainMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b11e5bed02f1f1f9949d58d4cc243bdc18330562"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTkxODQ2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNTo1NFrOH_j77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowNTo1NFrOH_j77A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxMTExNg==", "bodyText": "can faultDomainManager be null?\nif not, maybe a check for notNull?", "url": "https://github.com/apache/samza/pull/1446#discussion_r536411116", "createdAt": "2020-12-04T22:05:54Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -88,7 +88,7 @@\n \n   public ContainerManager(ContainerPlacementMetadataStore containerPlacementMetadataStore,\n       SamzaApplicationState samzaApplicationState, ClusterResourceManager clusterResourceManager,\n-      boolean hostAffinityEnabled, boolean standByEnabled, LocalityManager localityManager) {\n+      FaultDomainManager faultDomainManager, boolean hostAffinityEnabled, boolean standByEnabled, LocalityManager localityManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk0MDA4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxMjoxNVrOH_kHXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxMjoxNVrOH_kHXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNDA0NA==", "bodyText": "minor: interface here is a bit confusing.. no strong objection if you prefer to keep it", "url": "https://github.com/apache/samza/pull/1446#discussion_r536414044", "createdAt": "2020-12-04T22:12:15Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -114,6 +114,11 @@\n    */\n   private final ClusterResourceManager clusterResourceManager;\n \n+  /**\n+   * An interface to get information about nodes and the fault domains they reside on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk1NzU5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNzo0NFrOH_kQ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNzo0NFrOH_kQ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNjQ5MA==", "bodyText": "these seem to be final.. if they are not expected to change, maybe mark them so", "url": "https://github.com/apache/samza/pull/1446#discussion_r536416490", "createdAt": "2020-12-04T22:17:44Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+public class FaultDomain {\n+\n+  FaultDomainType type;\n+  String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk1ODg1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxODowN1rOH_kRlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjoyNjo1M1rOIB5Fpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNjY2Mw==", "bodyText": "can they be null?", "url": "https://github.com/apache/samza/pull/1446#discussion_r536416663", "createdAt": "2020-12-04T22:18:07Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+public class FaultDomain {\n+\n+  FaultDomainType type;\n+  String id;\n+\n+  public FaultDomain(FaultDomainType type, String id) {\n+    this.type = type;\n+    this.id = id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NDgyMw==", "bodyText": "No. I've added a check for the same. Thanks!", "url": "https://github.com/apache/samza/pull/1446#discussion_r538854823", "createdAt": "2020-12-08T22:26:53Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+public class FaultDomain {\n+\n+  FaultDomainType type;\n+  String id;\n+\n+  public FaultDomain(FaultDomainType type, String id) {\n+    this.type = type;\n+    this.id = id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNjY2Mw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk2NzMwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyMDo1NFrOH_kWPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0ODo1OVrOIChl5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzg1Mg==", "bodyText": "since its a new interface, should we mark it evolving?", "url": "https://github.com/apache/samza/pull/1446#discussion_r536417852", "createdAt": "2020-12-04T22:20:54Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxODQzOQ==", "bodyText": "I've marked it as unstable as of now. Will change it to evolving after more thorough testing.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539518439", "createdAt": "2020-12-09T17:48:59Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzg1Mg=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk5MTMzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyODoyOVrOH_kjEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0Mzo0N1rOIChX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTEzNw==", "bodyText": "can you add a few lines about thread-safety, what an implementor of this interface should guarantee/adhere to, what a user should expect and how to use?\nlooks like all supported functions are read-only kind.. as in the they are all getter/check and no writes (setter) so maybe thread-safety might not be a big concern. But still worth checking it and calling it out.\nI am wondering, cluster is a dynamic system - hosts/domains might change and then this manager's internal state is somehow updated by the implementor (?). In such as case, what is the guarantee provided by this manager - will it always show the state of the cluster right now or the last read from cluster manager or maybe some other guarantees like if a host/domain is down in the cluster then it will definitely not be part of the get-method-return-value.", "url": "https://github.com/apache/samza/pull/1446#discussion_r536421137", "createdAt": "2020-12-04T22:28:29Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNDg3NQ==", "bodyText": "I've explicitly called out that this is not thread safe, however it does not need to be. I have also added in the interface documentation that the host to fault domain map is cached and explained under what scenarios it will be updated. Therefore, to answer your question, the manager will not show the current state of the cluster. It will just show the cached state on the basis of the last time it retrieved that information. I have also added information stating that it will store information of only the nodes that are running in the cluster at that point in time.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539514875", "createdAt": "2020-12-09T17:43:47Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTEzNw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTk5MzgwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyOToxNlrOH_kkZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0NzozNVrOIChiWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTQ3Nw==", "bodyText": "using it for standby container is one of the uses -- i feel we should not put this in the interface doc.", "url": "https://github.com/apache/samza/pull/1446#discussion_r536421477", "createdAt": "2020-12-04T22:29:16Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxNzUyOQ==", "bodyText": "Makes sense.  Added the standby part as a possible example instead.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539517529", "createdAt": "2020-12-09T17:47:35Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTQ3Nw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjAwNDMxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjozMjo0NFrOH_kqHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo1ODo1MVrOICiBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMjk0MA==", "bodyText": "how do we define RUNNING nodes? nodes where containers of  this job are running or Nodes that are healthy in the cluster or nodes with available resources to run container..\n\n\ndoes it get all domains of the cluster or only those that a job can access?\n\n\nnit: hosts instead of nodes.", "url": "https://github.com/apache/samza/pull/1446#discussion_r536422940", "createdAt": "2020-12-04T22:32:44Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNTM3OQ==", "bodyText": "Yarn defines running nodes as the nodes that are healthy and up and running in the cluster. I've clarified that bit here.\nIt gets all the fault domain values in the cluster that were last cached by the FaultDomainManager.\nChanged everything to hosts. :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r539525379", "createdAt": "2020-12-09T17:58:51Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMjk0MA=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjAwNjA4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjozMzoyOFrOH_krJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxOTowN1rOIB6ybg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzIwNA==", "bodyText": "would be nice to stick to one of the two - host or node - just to keep it consistent :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r536423204", "createdAt": "2020-12-04T22:33:28Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MjY3MA==", "bodyText": "+1 use consistent terminologies.", "url": "https://github.com/apache/samza/pull/1446#discussion_r538882670", "createdAt": "2020-12-08T23:19:07Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzIwNA=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjA1MzU0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo0OTozMVrOH_lEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo0Nzo0NlrOIC2lYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyOTY5NA==", "bodyText": "fault domain is a concept that maybe worth spending a couple of lines over -- like a host can only belong to one domain, domain has >=1 hosts, cluster has all its hosts in one domain or another", "url": "https://github.com/apache/samza/pull/1446#discussion_r536429694", "createdAt": "2020-12-04T22:49:31Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2MjM2OA==", "bodyText": "Added this info in the FaultDomain class.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539862368", "createdAt": "2020-12-10T05:47:46Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyOTY5NA=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjA3NTUzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjo1Njo0OFrOH_lP7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo1OToxOVrOIC21iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMjYyMQ==", "bodyText": "hmm, i think this manager is designed specifically for standby containers only. I feel this interface has potential beyond standbys and hence we should strive to keep it generic - usable for scheduling actives also maybe?\nwhat is the guarantee manager provides to the user of this method - like for rack upgrades we would want it to be any domain not about to undergo maintenance or currently under maintenance, there are others like this too\nactually, adding to #2 above: maybe we should be able to define a \"rule set\" the domain manager follows to fetch allowed domains. rules could include stuff like not on a particular host/domain (then this method becomes  extensible beyond standby)...wdyt?\nnit: if sticking to standby-only use case, indicate in the name as getAllowedFaultDomainsForSchedulingStandbyContainer", "url": "https://github.com/apache/samza/pull/1446#discussion_r536432621", "createdAt": "2020-12-04T22:56:48Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);\n+\n+  /**\n+   * This method gets the set of fault domains that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of fault domains on which this active container's standby can be scheduled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2NjUwNQ==", "bodyText": "The purpose of this method is to find a list of fault domains that the host's (which is meant to be the active container) standby can be placed on. What are you suggesting to change it to in this case, since the function is active and standby container specific?\nAny rack about to undergo maintenance will be marked unhealthy. Hence, even if we have that rack in our local cache, Yarn will not return a host to us on an unhealthy rack.\nCaught up with Manasa and leaving this aside for now.\nDone.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539866505", "createdAt": "2020-12-10T05:59:19Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);\n+\n+  /**\n+   * This method gets the set of fault domains that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of fault domains on which this active container's standby can be scheduled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMjYyMQ=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjEwMzE3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzowNjo1MFrOH_leMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjowMDozM1rOIC25Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNjI3Mw==", "bodyText": "it may not be cached also right.. depending on the implementation.\nthis is where the guarantee of view of the cluster comes into play.", "url": "https://github.com/apache/samza/pull/1446#discussion_r536436273", "createdAt": "2020-12-04T23:06:50Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);\n+\n+  /**\n+   * This method gets the set of fault domains that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of fault domains on which this active container's standby can be scheduled\n+   */\n+  Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host);\n+\n+  /**\n+   * This method returns the cached map of nodes to fault domains.\n+   * @return stored map of node to the fault domain it resides on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2NzQ1OQ==", "bodyText": "If this value is null or empty, we will retrieve the actual map by calling the compute function written below this.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539867459", "createdAt": "2020-12-10T06:00:33Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);\n+\n+  /**\n+   * This method gets the set of fault domains that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of fault domains on which this active container's standby can be scheduled\n+   */\n+  Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host);\n+\n+  /**\n+   * This method returns the cached map of nodes to fault domains.\n+   * @return stored map of node to the fault domain it resides on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNjI3Mw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjEwNjk3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzowODoyNFrOH_lgQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjowMToxN1rOIC27Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNjgwMA==", "bodyText": "ah, i realized now -- this is the is the method to update the manager's fault domain map right.\nso this is in some sense a setter? in which case we should think about thread-safety between this setter and other getters.", "url": "https://github.com/apache/samza/pull/1446#discussion_r536436800", "createdAt": "2020-12-04T23:08:24Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);\n+\n+  /**\n+   * This method gets the set of fault domains that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of fault domains on which this active container's standby can be scheduled\n+   */\n+  Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host);\n+\n+  /**\n+   * This method returns the cached map of nodes to fault domains.\n+   * @return stored map of node to the fault domain it resides on\n+   */\n+  Map<String, FaultDomain> getNodeToFaultDomainMap();\n+\n+  /**\n+   * This method computes the node to fault domain map from the cluster resource manager.\n+   * @return map of node to the fault domain it resides on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg2Nzk3NA==", "bodyText": "AFAIK, since this will run on the main thread, it should be thread safe.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539867974", "createdAt": "2020-12-10T06:01:17Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);\n+\n+  /**\n+   * This method gets the set of fault domains that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of fault domains on which this active container's standby can be scheduled\n+   */\n+  Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host);\n+\n+  /**\n+   * This method returns the cached map of nodes to fault domains.\n+   * @return stored map of node to the fault domain it resides on\n+   */\n+  Map<String, FaultDomain> getNodeToFaultDomainMap();\n+\n+  /**\n+   * This method computes the node to fault domain map from the cluster resource manager.\n+   * @return map of node to the fault domain it resides on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNjgwMA=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjEwNzg1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzowODo1MVrOH_lgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzowODo1MVrOH_lgyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNjkzNw==", "bodyText": "same with stability of interface", "url": "https://github.com/apache/samza/pull/1446#discussion_r536436937", "createdAt": "2020-12-04T23:08:51Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManagerFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+/**\n+ * A factory to build a {@link FaultDomainManager}.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjExODYxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoxMjo1MFrOH_lmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODo1MTo1MlrOIHq49A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODM3NQ==", "bodyText": "emptyset instead of null?\nhowever, what does empty set/null mean?\nwill the request ignore fault domain notions if its null but somehow break the behavior if its an empty set?", "url": "https://github.com/apache/samza/pull/1446#discussion_r536438375", "createdAt": "2020-12-04T23:12:50Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -63,7 +69,11 @@\n   private final Instant requestTimestamp;\n \n   public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, String processorId) {\n-    this(numCores, memoryMB, preferredHost, processorId, Instant.now());\n+    this(numCores, memoryMB, preferredHost, processorId, Instant.now(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg3MjQ2MQ==", "bodyText": "When we make the actual container request to Yarn, the null value says that the rack requirement for that request is ignored, similar to how it currently is without rack awareness. However, I have changed it to an empty set now. Thanks!", "url": "https://github.com/apache/samza/pull/1446#discussion_r539872461", "createdAt": "2020-12-10T06:07:26Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -63,7 +69,11 @@\n   private final Instant requestTimestamp;\n \n   public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, String processorId) {\n-    this(numCores, memoryMB, preferredHost, processorId, Instant.now());\n+    this(numCores, memoryMB, preferredHost, processorId, Instant.now(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODM3NQ=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjA2NA==", "bodyText": "just for my clarification: what is the behavior on yarn side for empty set in the request?", "url": "https://github.com/apache/samza/pull/1446#discussion_r540356064", "createdAt": "2020-12-10T17:24:56Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -63,7 +69,11 @@\n   private final Instant requestTimestamp;\n \n   public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, String processorId) {\n-    this(numCores, memoryMB, preferredHost, processorId, Instant.now());\n+    this(numCores, memoryMB, preferredHost, processorId, Instant.now(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODM3NQ=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMDM2MQ==", "bodyText": "Pass ImmutableSet.of or any variant of empty set instead of null and get rid of the null check within the other constructor.", "url": "https://github.com/apache/samza/pull/1446#discussion_r543310361", "createdAt": "2020-12-15T12:43:57Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -63,7 +69,11 @@\n   private final Instant requestTimestamp;\n \n   public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, String processorId) {\n-    this(numCores, memoryMB, preferredHost, processorId, Instant.now());\n+    this(numCores, memoryMB, preferredHost, processorId, Instant.now(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODM3NQ=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxMzY1Mg==", "bodyText": "@lakshmi-manasa-g it should still work as is.", "url": "https://github.com/apache/samza/pull/1446#discussion_r544913652", "createdAt": "2020-12-17T08:51:52Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -63,7 +69,11 @@\n   private final Instant requestTimestamp;\n \n   public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, String processorId) {\n-    this(numCores, memoryMB, preferredHost, processorId, Instant.now());\n+    this(numCores, memoryMB, preferredHost, processorId, Instant.now(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODM3NQ=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjEyMDAxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoxMzoyNlrOH_lnLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoxMzoyNlrOH_lnLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODU3NQ==", "bodyText": "nit: adding fault domains to the log might be useful for debugging", "url": "https://github.com/apache/samza/pull/1446#discussion_r536438575", "createdAt": "2020-12-04T23:13:26Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -73,6 +83,18 @@ public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, St\n     this.requestId = UUID.randomUUID().toString();\n     this.processorId = processorId;\n     this.requestTimestamp = requestTimestamp;\n+    this.faultDomains = new HashSet<>();\n+    log.info(\"SamzaResourceRequest created for Processor ID: {} on host: {} at time: {} with Request ID: {}\", this.processorId, this.preferredHost, this.requestTimestamp, this.requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjEyMzA3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoxNDo0OVrOH_lo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNjoyNzo0OVrOIC4Mbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODk5Nw==", "bodyText": "just curious, wont it work without this -esp since you already defined the \"toString\" for FaultDomain?", "url": "https://github.com/apache/samza/pull/1446#discussion_r536438997", "createdAt": "2020-12-04T23:14:49Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -109,15 +135,24 @@ public String toString() {\n             \", requestId='\" + requestId + '\\'' +\n             \", processorId=\" + processorId +\n             \", requestTimestampMs=\" + requestTimestamp +\n+            \", faultDomains=\" + convertFaultDomainSetToString() +\n             '}';\n   }\n \n-  /**\n-   * Requests are ordered by the processor type and the time at which they were created.\n-   * Requests with timestamps in the future for retries take less precedence than timestamps in the past or current.\n-   * Otherwise, active processors take precedence over standby processors, regardless of timestamp.\n-   * @param o the other\n-   */\n+  private String convertFaultDomainSetToString() {\n+    StringBuilder faultDomainSb = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg4ODc1MA==", "bodyText": "Yes it should. I had added the FaultDomain toString method later on hence forgot to remove this. Thanks for observing :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r539888750", "createdAt": "2020-12-10T06:27:49Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -109,15 +135,24 @@ public String toString() {\n             \", requestId='\" + requestId + '\\'' +\n             \", processorId=\" + processorId +\n             \", requestTimestampMs=\" + requestTimestamp +\n+            \", faultDomains=\" + convertFaultDomainSetToString() +\n             '}';\n   }\n \n-  /**\n-   * Requests are ordered by the processor type and the time at which they were created.\n-   * Requests with timestamps in the future for retries take less precedence than timestamps in the past or current.\n-   * Otherwise, active processors take precedence over standby processors, regardless of timestamp.\n-   * @param o the other\n-   */\n+  private String convertFaultDomainSetToString() {\n+    StringBuilder faultDomainSb = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODk5Nw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjE2OTYwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozNToxMlrOH_mBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozNToxMlrOH_mBnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NTM0MQ==", "bodyText": "hmm, wondering if we should place all these changes behind a config?", "url": "https://github.com/apache/samza/pull/1446#discussion_r536445341", "createdAt": "2020-12-04T23:35:12Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -125,7 +129,8 @@ public void handleContainerLaunchFail(String containerID, String resourceID,\n \n     if (StandbyTaskUtil.isStandbyContainer(containerID)) {\n       log.info(\"Handling launch fail for standby-container {}, requesting resource on any host {}\", containerID);\n-      containerAllocator.requestResource(containerID, ResourceRequestState.ANY_HOST);\n+      containerAllocator.requestResource(containerID, ResourceRequestState.ANY_HOST,\n+              faultDomainManager.getAllowedFaultDomainsForSchedulingContainer(getActiveContainerHost(containerID)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjE3MTA5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozNTo0MVrOH_mCaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozNTo0MVrOH_mCaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NTU0NQ==", "bodyText": "nit - some new extra spaces sneaked in :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r536445545", "createdAt": "2020-12-04T23:35:41Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -181,13 +186,14 @@ private void handleStandbyContainerStop(String standbyContainerID, String resour\n \n       // request standbycontainer's host for active-container\n       SamzaResourceRequest resourceRequestForActive =\n-          containerAllocator.getResourceRequestWithDelay(activeContainerID, standbyContainerHostname, preferredHostRetryDelay);\n+              containerAllocator.getResourceRequestWithDelay(activeContainerID, standbyContainerHostname, preferredHostRetryDelay);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ5MzUxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1ODoyNFrOIA8miw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1MzozNlrOIC72jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MzgxOQ==", "bodyText": "What if host = ANY_HOST but resource.getHost is not ANY_HOST Or vice versa?\n\n\nearlier in StandbyContainerManager - there is a request issue made with ANY_HOST and fault domain set.\nwould it be possible that there is a pending processor with ANY_HOST as well but same fault domain?\nActually since a resource request a set of allowed fault domains and not a specific fault domain - is it possible that a pending processor gets started on the same fault domain as this standby?\nOr do we hope to catch it when that pending processor runs and invokes this same checkStandbyConstraints and find the current standby in runningProcessors and catch it in the check below? If this is the case, then what was the original logic behind checking pendingProcessors at all?", "url": "https://github.com/apache/samza/pull/1446#discussion_r537863819", "createdAt": "2020-12-07T21:58:24Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,18 +403,32 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk0ODY4NQ==", "bodyText": "Sorry for this confusion, but the hosts passed here will never be ANY_HOST and will have a hostname. Hence, I have removed the existing checks that I had for ANY_HOST.\nThe pending processor list will have the actual hostname instead of ANY_HOST. Hence, the check will always suffice so as to not bring up a standby on the same fault domain as the actives are spun up first. This check is to ensure that a standby container should not come up on the same host or rack as an active container whose launch is pending.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539948685", "createdAt": "2020-12-10T07:53:36Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,18 +403,32 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MzgxOQ=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ5NTI3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1ODo1M1rOIA8nlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1ODo1M1rOIA8nlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDA4NA==", "bodyText": "looks the same as above check. good to make a helper?? wdyt?", "url": "https://github.com/apache/samza/pull/1446#discussion_r537864084", "createdAt": "2020-12-07T21:58:53Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,18 +403,32 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)\n+                && faultDomainManager.checkHostsOnSameFaultDomain(host, resource.getHost())) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        } else if (resource.getHost().equals(host)) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        }\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)\n+                && faultDomainManager.checkHostsOnSameFaultDomain(host, resource.getHost())) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already running on this rack\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        } else if (resource.getHost().equals(host)) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n+                  containerIdToStart, host, containerID);\n+          return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU5NTE4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyMzo1MlrOIA9gXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzo1ODoxNVrOIC8AxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODYyMw==", "bodyText": "What if host = ANY_HOST but resource.getHost is not ANY_HOST?\n\n\nwhen alternative resources are being used - checkStandbyAndRunStreamProc is called with ANY_HOST and alternativeResource.get (which is a resource with a proper host name and not ANY_HOST).. are we handling this scenario? looks like it might be handled (checkStandbyConstraints in this case is called with ctrId and proper host name) but wanted a double check on that.\n\n\niiuc, a resource is added to SamzaApplicationState.runningProcessors in YarnClusterResourceManager.onContainerStarted which actually creates a new SamzaResource with values taken from Yarn Container -- and hence will not have ANY_HOST. right? hence maybe we can simplify this check? or was there another reason (like guarding against ANY_HOST in resource)?", "url": "https://github.com/apache/samza/pull/1446#discussion_r537878623", "createdAt": "2020-12-07T22:23:52Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,18 +403,32 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)\n+                && faultDomainManager.checkHostsOnSameFaultDomain(host, resource.getHost())) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        } else if (resource.getHost().equals(host)) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        }\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1MTMwMQ==", "bodyText": "Addressed in the previous comment. The hosts passed here will never be ANY_HOST and will have a hostname.\nThis should be handled here.\nSimplified the check and removed the ANY_HOST checks.", "url": "https://github.com/apache/samza/pull/1446#discussion_r539951301", "createdAt": "2020-12-10T07:58:15Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,18 +403,32 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)\n+                && faultDomainManager.checkHostsOnSameFaultDomain(host, resource.getHost())) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        } else if (resource.getHost().equals(host)) {\n+          log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                  containerIdToStart, host, containerID);\n+          return false;\n+        }\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n-        return false;\n+      if (resource != null) {\n+        if (!resource.getHost().equals(ResourceRequestState.ANY_HOST) && !host.equals(ResourceRequestState.ANY_HOST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3ODYyMw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY3NjgwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/test/java/org/apache/samza/clustermanager/MockFaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo0NDozOFrOIA-OIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo0NDozOFrOIA-OIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5MDMzOQ==", "bodyText": "might be good to have at least 2 hosts in same rack to be able to test", "url": "https://github.com/apache/samza/pull/1446#discussion_r537890339", "createdAt": "2020-12-07T22:44:38Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/MockFaultDomainManager.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class MockFaultDomainManager implements FaultDomainManager {\n+\n+  private final Map<String, FaultDomain> nodeToFaultDomainMap;\n+\n+  public MockFaultDomainManager() {\n+    FaultDomain faultDomain1 = new FaultDomain(FaultDomainType.RACK, \"rack-1\");\n+    FaultDomain faultDomain2 = new FaultDomain(FaultDomainType.RACK, \"rack-2\");\n+    FaultDomain faultDomain3 = new FaultDomain(FaultDomainType.RACK, \"rack-1\");\n+    FaultDomain faultDomain4 = new FaultDomain(FaultDomainType.RACK, \"rack-3\");\n+    FaultDomain faultDomain5 = new FaultDomain(FaultDomainType.RACK, \"rack-4\");\n+    nodeToFaultDomainMap = ImmutableMap.of(\"host-1\", faultDomain1, \"host-2\", faultDomain2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY5NjY2OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1MDoyMVrOIA-Zag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1MDoyMVrOIA-Zag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5MzIyNg==", "bodyText": "works for standby replication factor = 2 (aka one active + one standby). this pr guarantees that the standby is not on the same rack as active. If >2 replication, then the standbys themselves might be on the same rack. need to call out that works for 2 and what to expect for >2. just in the pr desc is enough.", "url": "https://github.com/apache/samza/pull/1446#discussion_r537893226", "createdAt": "2020-12-07T22:50:21Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+\n+public class RackManager implements FaultDomainManager {\n+\n+  private final Map<String, FaultDomain> nodeToRackMap;\n+\n+  public RackManager() {\n+        this.nodeToRackMap = computeNodeToFaultDomainMap();\n+    }\n+\n+  /**\n+   * This method returns all the rack values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllFaultDomains() {\n+    return new HashSet<>(nodeToRackMap.values());\n+  }\n+\n+  /**\n+   * This method returns the rack a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  @Override\n+  public FaultDomain getFaultDomainOfNode(String host) {\n+    return nodeToRackMap.get(host);\n+  }\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same rack.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same rack\n+   */\n+  @Override\n+  public boolean checkHostsOnSameFaultDomain(String host1, String host2) {\n+    return nodeToRackMap.get(host1).equals(nodeToRackMap.get(host2));\n+  }\n+\n+  /**\n+   * This method gets the set of racks that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of racks on which this active container's standby can be scheduled\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host) {\n+    FaultDomain activeContainerRack = nodeToRackMap.get(host);\n+    Set<FaultDomain> standbyRacks = new HashSet<>(nodeToRackMap.values());\n+    standbyRacks.remove(activeContainerRack);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjcwNTU3OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1MzowMFrOIA-elA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwODozNjoyN1rOIJyz5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDU0OA==", "bodyText": "this exception is swallowed no.. what happens to the rack manager in this case? will it still give a correct view of the cluster's host->rack mapping? how do we ensure the feature still works?\nit possibly returns an empty map. then, nodeToRackMap.get(host) in getAllowedFaultDomainsForSchedulingContainer above will return null --> and removing a null from Set could throw NPE (HashSet doesnt throw i think).\nEven if NPE doesnt happen, getAllowedFaultDomainsForSchedulingContainer returns an empty set. What is the behavior of this feature when a resource request is made with an empty set of racks? will Yarn just pick any rack or fail the request?", "url": "https://github.com/apache/samza/pull/1446#discussion_r537894548", "createdAt": "2020-12-07T22:53:00Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+\n+public class RackManager implements FaultDomainManager {\n+\n+  private final Map<String, FaultDomain> nodeToRackMap;\n+\n+  public RackManager() {\n+        this.nodeToRackMap = computeNodeToFaultDomainMap();\n+    }\n+\n+  /**\n+   * This method returns all the rack values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllFaultDomains() {\n+    return new HashSet<>(nodeToRackMap.values());\n+  }\n+\n+  /**\n+   * This method returns the rack a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  @Override\n+  public FaultDomain getFaultDomainOfNode(String host) {\n+    return nodeToRackMap.get(host);\n+  }\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same rack.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same rack\n+   */\n+  @Override\n+  public boolean checkHostsOnSameFaultDomain(String host1, String host2) {\n+    return nodeToRackMap.get(host1).equals(nodeToRackMap.get(host2));\n+  }\n+\n+  /**\n+   * This method gets the set of racks that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of racks on which this active container's standby can be scheduled\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host) {\n+    FaultDomain activeContainerRack = nodeToRackMap.get(host);\n+    Set<FaultDomain> standbyRacks = new HashSet<>(nodeToRackMap.values());\n+    standbyRacks.remove(activeContainerRack);\n+    return standbyRacks;\n+  }\n+\n+  /**\n+   * This method returns the cached map of nodes to racks.\n+   * @return stored map of node to the rack it resides on\n+   */\n+  @Override\n+  public Map<String, FaultDomain> getNodeToFaultDomainMap() {\n+    return nodeToRackMap;\n+  }\n+\n+  /**\n+   * This method gets the node to rack (fault domain for Yarn) mapping from Yarn for all running nodes.\n+   * @return A map of hostname to rack name.\n+   */\n+  @Override\n+  public Map<String, FaultDomain> computeNodeToFaultDomainMap() {\n+    YarnClientImpl yarnClient = new YarnClientImpl();\n+    Map<String, FaultDomain> nodeToRackMap = new HashMap<>();\n+    try {\n+      List<NodeReport> nodeReport = yarnClient.getNodeReports(NodeState.RUNNING);\n+      nodeReport.forEach(report -> {\n+        FaultDomain rack = new FaultDomain(FaultDomainType.RACK, report.getRackName());\n+        nodeToRackMap.put(report.getNodeId().getHost(), rack);\n+      });\n+    } catch (YarnException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE0MDU4MQ==", "bodyText": "Thanks for pointing this out. I've instead thrown a SamzaException if we are unable to get node reports from Yarn, since we need that for rack awareness to work. This will take care of the other concerns that you raised.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547140581", "createdAt": "2020-12-22T08:36:27Z", "author": {"login": "PawasChhokra"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+\n+public class RackManager implements FaultDomainManager {\n+\n+  private final Map<String, FaultDomain> nodeToRackMap;\n+\n+  public RackManager() {\n+        this.nodeToRackMap = computeNodeToFaultDomainMap();\n+    }\n+\n+  /**\n+   * This method returns all the rack values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllFaultDomains() {\n+    return new HashSet<>(nodeToRackMap.values());\n+  }\n+\n+  /**\n+   * This method returns the rack a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  @Override\n+  public FaultDomain getFaultDomainOfNode(String host) {\n+    return nodeToRackMap.get(host);\n+  }\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same rack.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same rack\n+   */\n+  @Override\n+  public boolean checkHostsOnSameFaultDomain(String host1, String host2) {\n+    return nodeToRackMap.get(host1).equals(nodeToRackMap.get(host2));\n+  }\n+\n+  /**\n+   * This method gets the set of racks that the given active container's corresponding standby can be placed on.\n+   * @param host The hostname of the active container\n+   * @return the set of racks on which this active container's standby can be scheduled\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingContainer(String host) {\n+    FaultDomain activeContainerRack = nodeToRackMap.get(host);\n+    Set<FaultDomain> standbyRacks = new HashSet<>(nodeToRackMap.values());\n+    standbyRacks.remove(activeContainerRack);\n+    return standbyRacks;\n+  }\n+\n+  /**\n+   * This method returns the cached map of nodes to racks.\n+   * @return stored map of node to the rack it resides on\n+   */\n+  @Override\n+  public Map<String, FaultDomain> getNodeToFaultDomainMap() {\n+    return nodeToRackMap;\n+  }\n+\n+  /**\n+   * This method gets the node to rack (fault domain for Yarn) mapping from Yarn for all running nodes.\n+   * @return A map of hostname to rack name.\n+   */\n+  @Override\n+  public Map<String, FaultDomain> computeNodeToFaultDomainMap() {\n+    YarnClientImpl yarnClient = new YarnClientImpl();\n+    Map<String, FaultDomain> nodeToRackMap = new HashMap<>();\n+    try {\n+      List<NodeReport> nodeReport = yarnClient.getNodeReports(NodeState.RUNNING);\n+      nodeReport.forEach(report -> {\n+        FaultDomain rack = new FaultDomain(FaultDomainType.RACK, report.getRackName());\n+        nodeToRackMap.put(report.getNodeId().getHost(), rack);\n+      });\n+    } catch (YarnException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDU0OA=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE0NTkxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMDowNVrOIB6eag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMDowNVrOIB6eag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NzU0Ng==", "bodyText": "nit: add new parameters to the end of the signature", "url": "https://github.com/apache/samza/pull/1446#discussion_r538877546", "createdAt": "2020-12-08T23:10:05Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -183,6 +191,7 @@ public ContainerProcessManager(Config config, SamzaApplicationState state, Metri\n       SamzaApplicationState state,\n       MetricsRegistryMap registry,\n       ClusterResourceManager resourceManager,\n+      FaultDomainManager faultDomainManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE0NjE5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMDoxMFrOIB6ekQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxMDoxMFrOIB6ekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg3NzU4NQ==", "bodyText": "can be removed since its only used to wire the ContainerManager.", "url": "https://github.com/apache/samza/pull/1446#discussion_r538877585", "createdAt": "2020-12-08T23:10:10Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -114,6 +114,11 @@\n    */\n   private final ClusterResourceManager clusterResourceManager;\n \n+  /**\n+   * An interface to get information about nodes and the fault domains they reside on.\n+   */\n+  private final FaultDomainManager faultDomainManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE3MTM5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxNzozNVrOIB6sXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODozOTowOFrOIC9foA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MTExNw==", "bodyText": "The interface exposes too many functionalities that are either not necessary upstream or conflating.\n\ncomputeNodeToFaultDomainMap\ngetAllowedFaultDomainsForSchedulingContainer\ngetNodeToFaultDomainMap\n\nThe notion of allowed fault domain for the container is not determined by the cluster manager's fault domain manager rather StandbyContainerManager. Hence [2] shouldn't be exposed as a functionality.\n[3] seems redundant given you have getFaultDomainOfNode\n[1] is completely internal to the manager and shouldn't be exposed.", "url": "https://github.com/apache/samza/pull/1446#discussion_r538881117", "createdAt": "2020-12-08T23:17:35Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3NTU4NA==", "bodyText": "This makes sense. Made the changes. Thanks for the suggestions :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r539975584", "createdAt": "2020-12-10T08:39:08Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MTExNw=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE3NzAzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxODozNlrOIB6wIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoxODozNlrOIB6wIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4MjA4MQ==", "bodyText": "Should be Set<FaultDomain> given a node can belong to multiple fault domain", "url": "https://github.com/apache/samza/pull/1446#discussion_r538882081", "createdAt": "2020-12-08T23:18:36Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE5MTIyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMTo1OVrOIB64vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoxMzo1NFrOIFbFxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NDI4Ng==", "bodyText": "Given nodes can belong to multiple fault domain, what does this functionality offer? Overlapping fault domain = true or absolute 1:1 mapping as true.\nWhy do you need this functionality in the first place? I thought we were using the set difference approach to get the fault domain of active and then find the set difference between available fault domain and active fault domain and use that for requesting resources.", "url": "https://github.com/apache/samza/pull/1446#discussion_r538884286", "createdAt": "2020-12-08T23:21:59Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NzYzNw==", "bodyText": "Discussed more about this offline. We've decided to keep this method since it has closed responsibility, hides the details about figuring out the fault domains for hosts and performing the equals check, and defines a clear contract with the FaultDomainManager. I've updated the documentation to denote this.", "url": "https://github.com/apache/samza/pull/1446#discussion_r542557637", "createdAt": "2020-12-14T17:13:54Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This interface gets fault domain information of different nodes from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a standby container can be placed on.\n+ */\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the fault domain values in a cluster for RUNNING nodes.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular node resides on.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  FaultDomain getFaultDomainOfNode(String host);\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same fault domain.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same fault domain\n+   */\n+  boolean checkHostsOnSameFaultDomain(String host1, String host2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NDI4Ng=="}, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE5NTMxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMzoxNlrOIB67LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMzoxNlrOIB67LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NDkwOA==", "bodyText": "Should we take Config and MetricsRegistry as bare minimum parameters to enable us add metrics or use cut off switch within or configure the potential behavior as it evolves.", "url": "https://github.com/apache/samza/pull/1446#discussion_r538884908", "createdAt": "2020-12-08T23:23:16Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManagerFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+/**\n+ * A factory to build a {@link FaultDomainManager}.\n+ */\n+public interface FaultDomainManagerFactory {\n+\n+  public FaultDomainManager getFaultDomainManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzIwODMxOnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNjoyNFrOIB7Cnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNjoyNFrOIB7Cnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NjgxNQ==", "bodyText": "I suppose this needs to be YarnFaultDomainManager.\nFaultDomainManager by itself is capable of handling all types of fault domain for a given cluster type. Hence  RackManager by itself doesn\u2019t seem suitable abstraction rather there should be one for YARN which is capable of reporting all sort of fault domains supported by YARN", "url": "https://github.com/apache/samza/pull/1446#discussion_r538886815", "createdAt": "2020-12-08T23:26:24Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManager.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+\n+public class RackManager implements FaultDomainManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzIxMDY5OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNzowNFrOIB7D7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyNzowNFrOIB7D7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NzE0OQ==", "bodyText": "Refer to comment above on this being YarnFaultDomainManager. Guess that will change this as well.", "url": "https://github.com/apache/samza/pull/1446#discussion_r538887149", "createdAt": "2020-12-08T23:27:04Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/RackManagerFactory.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainManagerFactory;\n+\n+/**\n+ * A factory to build a {@link RackManager}.\n+ */\n+public class RackManagerFactory implements FaultDomainManagerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "addaf742fda1c27ece5efbf23ccda5d68fc376f9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzc5NzYyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNjoyMFrOIGIuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNjoyMFrOIGIuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNTQyMQ==", "bodyText": "can we be consistent and use Preconditions or Objects.nonNull?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543305421", "createdAt": "2020-12-15T12:36:20Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * A fault domain is a set of hardware components that share a single point of failure.\n+ * This class identifies the type (ex: rack) and ID (ex: rack ID) of the fault domain in question.\n+ * A host can belong to multiple fault domains.\n+ * A fault domain may have greater than or equal to 1 hosts.\n+ * A cluster can comprise of hosts on multiple fault domains.\n+ */\n+public class FaultDomain {\n+\n+  private final FaultDomainType type;\n+  private final String id;\n+\n+  public FaultDomain(FaultDomainType type, String id) {\n+    if (type == null || id == null) {\n+      throw new SamzaException(\"Fault domain type and ID cannot be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgwMjIwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozNzoyMFrOIGIxbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo0OTo1N1rOIIBfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNjA5NQ==", "bodyText": "Doesn't it require equals & hashcode to be overridden as well for fault domain check?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543306095", "createdAt": "2020-12-15T12:37:20Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * A fault domain is a set of hardware components that share a single point of failure.\n+ * This class identifies the type (ex: rack) and ID (ex: rack ID) of the fault domain in question.\n+ * A host can belong to multiple fault domains.\n+ * A fault domain may have greater than or equal to 1 hosts.\n+ * A cluster can comprise of hosts on multiple fault domains.\n+ */\n+public class FaultDomain {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4Mzg0NQ==", "bodyText": "Done.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545283845", "createdAt": "2020-12-17T17:49:57Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomain.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * A fault domain is a set of hardware components that share a single point of failure.\n+ * This class identifies the type (ex: rack) and ID (ex: rack ID) of the fault domain in question.\n+ * A host can belong to multiple fault domains.\n+ * A fault domain may have greater than or equal to 1 hosts.\n+ * A cluster can comprise of hosts on multiple fault domains.\n+ */\n+public class FaultDomain {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNjA5NQ=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgxMDczOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozOToyMlrOIGI2eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDo1Mjo1NlrOII3P8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNzM4NQ==", "bodyText": "cached, seems an implementation detail and no API detail.\nDo we require strong freshness? If so, the API should mandate that.\nIf not, you should callout that the freshness is an implementation detail and API doesn't mandate anything.", "url": "https://github.com/apache/samza/pull/1446#discussion_r543307385", "createdAt": "2020-12-15T12:39:22Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Set;\n+import org.apache.samza.annotation.InterfaceStability;\n+\n+/**\n+ *  This interface gets fault domain information of all hosts that are running in the cluster,\n+ *  from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a container can be placed on (for ex: based on standby constraints).\n+ *  The host to fault domain map used here will always be cached and only updated in case the AM dies or an active\n+ *  container is assigned to a host which is not in the map.\n+ *  This is not thread-safe.\n+ */\n+@InterfaceStability.Unstable\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the last cached fault domain values in a cluster, for all hosts that are healthy, up and running.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NDgzOQ==", "bodyText": "I've added to the documentation that the cache update is an implementation detail.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545284839", "createdAt": "2020-12-17T17:51:34Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Set;\n+import org.apache.samza.annotation.InterfaceStability;\n+\n+/**\n+ *  This interface gets fault domain information of all hosts that are running in the cluster,\n+ *  from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a container can be placed on (for ex: based on standby constraints).\n+ *  The host to fault domain map used here will always be cached and only updated in case the AM dies or an active\n+ *  container is assigned to a host which is not in the map.\n+ *  This is not thread-safe.\n+ */\n+@InterfaceStability.Unstable\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the last cached fault domain values in a cluster, for all hosts that are healthy, up and running.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNzM4NQ=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NjkzMQ==", "bodyText": "Sync'd up offline. Please update the document to reflect.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545396931", "createdAt": "2020-12-17T20:54:05Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Set;\n+import org.apache.samza.annotation.InterfaceStability;\n+\n+/**\n+ *  This interface gets fault domain information of all hosts that are running in the cluster,\n+ *  from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a container can be placed on (for ex: based on standby constraints).\n+ *  The host to fault domain map used here will always be cached and only updated in case the AM dies or an active\n+ *  container is assigned to a host which is not in the map.\n+ *  This is not thread-safe.\n+ */\n+@InterfaceStability.Unstable\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the last cached fault domain values in a cluster, for all hosts that are healthy, up and running.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNzM4NQ=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDcyMg==", "bodyText": "Done.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546164722", "createdAt": "2020-12-19T00:52:56Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Set;\n+import org.apache.samza.annotation.InterfaceStability;\n+\n+/**\n+ *  This interface gets fault domain information of all hosts that are running in the cluster,\n+ *  from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a container can be placed on (for ex: based on standby constraints).\n+ *  The host to fault domain map used here will always be cached and only updated in case the AM dies or an active\n+ *  container is assigned to a host which is not in the map.\n+ *  This is not thread-safe.\n+ */\n+@InterfaceStability.Unstable\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the last cached fault domain values in a cluster, for all hosts that are healthy, up and running.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNzM4NQ=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgxMjY0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozOTo0MlrOIGI3bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozOTo0MlrOIGI3bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNzYzMA==", "bodyText": "nit: java docs", "url": "https://github.com/apache/samza/pull/1446#discussion_r543307630", "createdAt": "2020-12-15T12:39:42Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+public enum FaultDomainType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgyMTM0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0MTo1MFrOIGI8kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1NDozMFrOIIBqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwODk0Nw==", "bodyText": "why is this metric part of SamzaApplicationState? Refer to the above comment on FaultDomainManager. Caching or not is an implementation detail and seems very specific metric to track by the implementation of FaultDomainManager. Hence, its resting place is not within SamzaApplicationState.", "url": "https://github.com/apache/samza/pull/1446#discussion_r543308947", "createdAt": "2020-12-15T12:41:50Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "diffHunk": "@@ -170,6 +170,31 @@\n    */\n   public final AtomicInteger failedContainerPlacementActions = new AtomicInteger(0);\n \n+  /**\n+   * Number of fault domain aware container requests made for a container.\n+   */\n+  public final AtomicInteger hostToFaultDomainCacheUpdates = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NjgyNQ==", "bodyText": "Removed this from SamzaApplicationState and added it as part of YarnFaultDomainManager instead.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545286825", "createdAt": "2020-12-17T17:54:30Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "diffHunk": "@@ -170,6 +170,31 @@\n    */\n   public final AtomicInteger failedContainerPlacementActions = new AtomicInteger(0);\n \n+  /**\n+   * Number of fault domain aware container requests made for a container.\n+   */\n+  public final AtomicInteger hostToFaultDomainCacheUpdates = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwODk0Nw=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzgzNjcyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0NToxMFrOIGJFaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0NToxMFrOIGJFaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMTIwOA==", "bodyText": "The null check seems redundant since we already ensure the faultDomains are empty or present.", "url": "https://github.com/apache/samza/pull/1446#discussion_r543311208", "createdAt": "2020-12-15T12:45:10Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "diffHunk": "@@ -381,6 +428,9 @@ public final void issueResourceRequest(SamzaResourceRequest request) {\n     } else {\n       state.preferredHostRequests.incrementAndGet();\n     }\n+    if (request.getFaultDomains() != null && !request.getFaultDomains().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg0ODAyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0NzozOFrOIGJL8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0NzozOFrOIGJL8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMjg4Mw==", "bodyText": "can we add null pre conditions check for faultDomains?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543312883", "createdAt": "2020-12-15T12:47:38Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -73,7 +83,25 @@ public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, St\n     this.requestId = UUID.randomUUID().toString();\n     this.processorId = processorId;\n     this.requestTimestamp = requestTimestamp;\n-    log.info(\"SamzaResourceRequest created for Processor ID: {} on host: {} at time: {} with Request ID: {}\", this.processorId, this.preferredHost, this.requestTimestamp, this.requestId);\n+    this.faultDomains = new HashSet<>();\n+    log.info(\"SamzaResourceRequest created for Processor ID: {} on host: {} at time: {} with Request ID: {}, and the following list of fault domains: {}\",\n+            this.processorId, this.preferredHost, this.requestTimestamp, this.requestId, this.faultDomains);\n+  }\n+\n+  public SamzaResourceRequest(int numCores, int memoryMB, String preferredHost, String processorId, Instant requestTimestamp, Set<FaultDomain> faultDomains) {\n+    this.numCores = numCores;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg0OTU0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0ODowNFrOIGJM3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo0ODowNFrOIGJM3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxMzExOA==", "bodyText": "nit: fix indentation", "url": "https://github.com/apache/samza/pull/1446#discussion_r543313118", "createdAt": "2020-12-15T12:48:04Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaResourceRequest.java", "diffHunk": "@@ -109,15 +141,16 @@ public String toString() {\n             \", requestId='\" + requestId + '\\'' +\n             \", processorId=\" + processorId +\n             \", requestTimestampMs=\" + requestTimestamp +\n+            \", faultDomains=\" + faultDomains.toString() +\n             '}';\n   }\n \n-  /**\n-   * Requests are ordered by the processor type and the time at which they were created.\n-   * Requests with timestamps in the future for retries take less precedence than timestamps in the past or current.\n-   * Otherwise, active processors take precedence over standby processors, regardless of timestamp.\n-   * @param o the other\n-   */\n+    /**\n+     * Requests are ordered by the processor type and the time at which they were created.\n+     * Requests with timestamps in the future for retries take less precedence than timestamps in the past or current.\n+     * Otherwise, active processors take precedence over standby processors, regardless of timestamp.\n+     * @param o the other\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg2Mjc3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MTowNFrOIGJUaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MTowNFrOIGJUaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNTA0OQ==", "bodyText": "can we rename the variables to generic fault domain instead of racks as that is the case?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543315049", "createdAt": "2020-12-15T12:51:04Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -156,6 +161,20 @@ public void handleContainerStopFail(String containerID, String resourceID,\n     }\n   }\n \n+  /**\n+   * This method gets the set of racks that the given active container's corresponding standby can be placed on.\n+   * The set of racks returned is based on the set difference between the active container's racks,\n+   * and all the available racks in the cluster based on the host to fault domain cache.\n+   * @param host The hostname of the active container\n+   * @return the set of racks on which this active container's standby can be scheduled\n+   */\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingStandbyContainer(String host) {\n+    Set<FaultDomain> activeContainerRack = faultDomainManager.getFaultDomainOfHost(host);\n+    Set<FaultDomain> standbyRacks = faultDomainManager.getAllFaultDomains();\n+    standbyRacks.removeAll(activeContainerRack);\n+    return standbyRacks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg3ODkxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NDozNVrOIGJdvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NDozNVrOIGJdvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNzQzNw==", "bodyText": "Potentially passing in a nullable host into getFaultDomainOfHost. Can we add a check to this method  or ensure only non-nullable can be passed into the method with annotation?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543317437", "createdAt": "2020-12-15T12:54:35Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -156,6 +161,20 @@ public void handleContainerStopFail(String containerID, String resourceID,\n     }\n   }\n \n+  /**\n+   * This method gets the set of racks that the given active container's corresponding standby can be placed on.\n+   * The set of racks returned is based on the set difference between the active container's racks,\n+   * and all the available racks in the cluster based on the host to fault domain cache.\n+   * @param host The hostname of the active container\n+   * @return the set of racks on which this active container's standby can be scheduled\n+   */\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingStandbyContainer(String host) {\n+    Set<FaultDomain> activeContainerRack = faultDomainManager.getFaultDomainOfHost(host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg4MTgzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NToxM1rOIGJfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1NToxM1rOIGJfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNzg1NA==", "bodyText": "Can we return optional instead of null? It would force callers to handle the non-existent case of a host for a given container id.", "url": "https://github.com/apache/samza/pull/1446#discussion_r543317854", "createdAt": "2020-12-15T12:55:13Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -361,8 +382,29 @@ private FailoverMetadata registerActiveContainerFailure(String activeContainerID\n   }\n \n   /**\n-   * Check if matching this SamzaResourceRequest to the given resource, meets all standby-container container constraints.\n+   * This method returns the active container host given a standby or active container ID.\n    *\n+   * @param containerID Standby or active container container ID\n+   * @return The active container host\n+   */\n+  String getActiveContainerHost(String containerID) {\n+    String activeContainerId = containerID;\n+    if (StandbyTaskUtil.isStandbyContainer(containerID)) {\n+      activeContainerId = StandbyTaskUtil.getActiveContainerId(containerID);\n+    }\n+    SamzaResource resource = samzaApplicationState.pendingProcessors.get(activeContainerId);\n+    if (resource == null) {\n+      resource = samzaApplicationState.runningProcessors.get(activeContainerId);\n+    }\n+    if (resource != null) {\n+      return resource.getHost();\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzg5NzgyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/config/ClusterManagerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1ODozOVrOIGJokA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1NToyMVrOIIBs-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMDIwOA==", "bodyText": "should it be YarnFaultDomainManagerFactory?\nAlso, I feel the configuration should be cluster-manager.fault-domain-manager.factory since we have an association of the fault domain manager to the cluster manager.\nwhat do you think?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543320208", "createdAt": "2020-12-15T12:58:39Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/config/ClusterManagerConfig.java", "diffHunk": "@@ -38,6 +38,9 @@\n   private static final String CLUSTER_MANAGER_FACTORY = \"samza.cluster-manager.factory\";\n   private static final String CLUSTER_MANAGER_FACTORY_DEFAULT = \"org.apache.samza.job.yarn.YarnResourceManagerFactory\";\n \n+  private static final String FAULT_DOMAIN_MANAGER_FACTORY = \"samza.fault-domain-manager.factory\";\n+  private static final String FAULT_DOMAIN_MANAGER_FACTORY_DEFAULT = \"org.apache.samza.job.yarn.RackManagerFactory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NzQxNg==", "bodyText": "Changed. Thanks :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r545287416", "createdAt": "2020-12-17T17:55:21Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/config/ClusterManagerConfig.java", "diffHunk": "@@ -38,6 +38,9 @@\n   private static final String CLUSTER_MANAGER_FACTORY = \"samza.cluster-manager.factory\";\n   private static final String CLUSTER_MANAGER_FACTORY_DEFAULT = \"org.apache.samza.job.yarn.YarnResourceManagerFactory\";\n \n+  private static final String FAULT_DOMAIN_MANAGER_FACTORY = \"samza.fault-domain-manager.factory\";\n+  private static final String FAULT_DOMAIN_MANAGER_FACTORY_DEFAULT = \"org.apache.samza.job.yarn.RackManagerFactory\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMDIwOA=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkwNTY5OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMDoyNlrOIGJtFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMDoyNlrOIGJtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMTM2NQ==", "bodyText": "should go away with the equals & hashcode implemented for FaultDomain", "url": "https://github.com/apache/samza/pull/1446#discussion_r543321365", "createdAt": "2020-12-15T13:00:26Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+import org.apache.samza.clustermanager.SamzaApplicationState;\n+\n+/**\n+ * This class functionality works with the assumption that the job.standbytasks.replication.factor is 2.\n+ * For values greater than 2, it is possible that the standby containers could be on the same rack as the active, or the already existing standby racks.\n+ */\n+public class YarnFaultDomainManager implements FaultDomainManager {\n+\n+  private Multimap<String, FaultDomain> hostToRackMap;\n+  private final SamzaApplicationState state;\n+  private final YarnClientImpl yarnClient;\n+\n+  public YarnFaultDomainManager(SamzaApplicationState state) {\n+    this.state = state;\n+    this.yarnClient = new YarnClientImpl();\n+    this.hostToRackMap = computeHostToFaultDomainMap();\n+  }\n+\n+  @VisibleForTesting\n+  YarnFaultDomainManager(SamzaApplicationState state, YarnClientImpl yarnClient, Multimap<String, FaultDomain> hostToRackMap) {\n+    this.state = state;\n+    this.yarnClient = yarnClient;\n+    this.hostToRackMap = hostToRackMap;\n+  }\n+\n+  /**\n+   * This method returns all the last cached rack values in a cluster, for all hosts that are healthy, up and running.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllFaultDomains() {\n+    return new HashSet<>(hostToRackMap.values());\n+  }\n+\n+  /**\n+   * This method returns the rack a particular host resides on based on the internal cache.\n+   * In case the rack of a host does not exist in this cache, we update the cache by computing the host to rack map again using Yarn.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  @Override\n+  public Set<FaultDomain> getFaultDomainOfHost(String host) {\n+    if (!hostToRackMap.containsKey(host)) {\n+      hostToRackMap = computeHostToFaultDomainMap();\n+      state.hostToFaultDomainCacheUpdates.incrementAndGet();\n+    }\n+    return new HashSet<>(hostToRackMap.get(host));\n+  }\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same rack.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same rack\n+   */\n+  @Override\n+  public boolean hasSameFaultDomains(String host1, String host2) {\n+    if (!hostToRackMap.keySet().contains(host1) || !hostToRackMap.keySet().contains(host2)) {\n+      hostToRackMap = computeHostToFaultDomainMap();\n+      state.hostToFaultDomainCacheUpdates.incrementAndGet();\n+    }\n+    return hostToRackMap.get(host1).toString().equals(hostToRackMap.get(host2).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkxNjMzOnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMjo0NVrOIGJzFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1NjowMlrOIIBurQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjkwMg==", "bodyText": "refer to the comments on the metrics. Addressing that should get rid of this dependency for YarnFaultDomainManager. Do we see other needs for this dependency?\nI'd assume this takes a MetricsRegistry instead\ncontext: SamzaApplicationState", "url": "https://github.com/apache/samza/pull/1446#discussion_r543322902", "createdAt": "2020-12-15T13:02:45Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+import org.apache.samza.clustermanager.SamzaApplicationState;\n+\n+/**\n+ * This class functionality works with the assumption that the job.standbytasks.replication.factor is 2.\n+ * For values greater than 2, it is possible that the standby containers could be on the same rack as the active, or the already existing standby racks.\n+ */\n+public class YarnFaultDomainManager implements FaultDomainManager {\n+\n+  private Multimap<String, FaultDomain> hostToRackMap;\n+  private final SamzaApplicationState state;\n+  private final YarnClientImpl yarnClient;\n+\n+  public YarnFaultDomainManager(SamzaApplicationState state) {\n+    this.state = state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4Nzg1Mw==", "bodyText": "Removed SamzaApplicationState as mentioned above.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545287853", "createdAt": "2020-12-17T17:56:02Z", "author": {"login": "PawasChhokra"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+import org.apache.samza.clustermanager.SamzaApplicationState;\n+\n+/**\n+ * This class functionality works with the assumption that the job.standbytasks.replication.factor is 2.\n+ * For values greater than 2, it is possible that the standby containers could be on the same rack as the active, or the already existing standby racks.\n+ */\n+public class YarnFaultDomainManager implements FaultDomainManager {\n+\n+  private Multimap<String, FaultDomain> hostToRackMap;\n+  private final SamzaApplicationState state;\n+  private final YarnClientImpl yarnClient;\n+\n+  public YarnFaultDomainManager(SamzaApplicationState state) {\n+    this.state = state;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjkwMg=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzkyMTA4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMzo1OVrOIGJ15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMzo1OVrOIGJ15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMzYyMQ==", "bodyText": "nit: s/getFaultDomainOfHost/getFaultDomainsForHost", "url": "https://github.com/apache/samza/pull/1446#discussion_r543323621", "createdAt": "2020-12-15T13:03:59Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/FaultDomainManager.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager;\n+\n+import java.util.Set;\n+import org.apache.samza.annotation.InterfaceStability;\n+\n+/**\n+ *  This interface gets fault domain information of all hosts that are running in the cluster,\n+ *  from the cluster manager (Yarn/Kubernetes/etc.).\n+ *  It also provides other functionality like exposing all the available fault domains, checking if two hosts belong to\n+ *  the same fault domain, and getting the valid fault domains that a container can be placed on (for ex: based on standby constraints).\n+ *  The host to fault domain map used here will always be cached and only updated in case the AM dies or an active\n+ *  container is assigned to a host which is not in the map.\n+ *  This is not thread-safe.\n+ */\n+@InterfaceStability.Unstable\n+public interface FaultDomainManager {\n+\n+  /**\n+   * This method returns all the last cached fault domain values in a cluster, for all hosts that are healthy, up and running.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  Set<FaultDomain> getAllFaultDomains();\n+\n+  /**\n+   * This method returns the fault domain a particular host resides on based on the internal cache.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  Set<FaultDomain> getFaultDomainOfHost(String host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDQ3MDQ3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0MzowOFrOIGO2kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0MzowOFrOIGO2kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNTcxNQ==", "bodyText": "Should we guard this with the configuration as well?", "url": "https://github.com/apache/samza/pull/1446#discussion_r543405715", "createdAt": "2020-12-15T14:43:08Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +417,38 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDUzMTI5OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/config/YarnConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo1Mzo0MVrOIGPalA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1ODowMlrOIIBz5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxNDkzMg==", "bodyText": "What are your thoughts on repurposing this configuration under ClusterManagerConfig something like cluster-manager.fault-domain-aware.standby.enabled?\nHere are some of the reasons why i think it will be useful\n\nWe will need a kill switch in samza core to ensure we can turn off the usage of FaultDomainManager.\nCurrent implementation forces FaultDomainManager is present regardless of its usage in the code path and does work even if this flag is turned off resulting in half-baked experience and unnecessary work.\nWhile specific implementation can have cut off switches, implementations can make consistent assumptions that the information necessary for rack-aware a.k.a fault domain aware requests will be provided by the samza core as part of SamzaResourceRequest if its enabled in the core.\nProvides room for optimizations where the request constraints aren't used for the scenarios where its disabled at the core but still turned on at the cluster level.", "url": "https://github.com/apache/samza/pull/1446#discussion_r543414932", "createdAt": "2020-12-15T14:53:41Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/config/YarnConfig.java", "diffHunk": "@@ -49,6 +49,11 @@\n    */\n   public static final String CONTAINER_LABEL = \"yarn.container.label\";\n \n+  /**\n+   * Determines whether standby allocation is rack aware or not.\n+   */\n+  public static final String RACK_AWARE_STANDBY_ENABLED = \"yarn.rack-aware.standby.enabled\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4OTE5MQ==", "bodyText": "Thanks for the suggestion. I agree with you. 2 is especially important and I was trying to look for a way around that.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545289191", "createdAt": "2020-12-17T17:58:02Z", "author": {"login": "PawasChhokra"}, "path": "samza-yarn/src/main/java/org/apache/samza/config/YarnConfig.java", "diffHunk": "@@ -49,6 +49,11 @@\n    */\n   public static final String CONTAINER_LABEL = \"yarn.container.label\";\n \n+  /**\n+   * Determines whether standby allocation is rack aware or not.\n+   */\n+  public static final String RACK_AWARE_STANDBY_ENABLED = \"yarn.rack-aware.standby.enabled\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxNDkzMg=="}, "originalCommit": {"oid": "51970921b94ab7972b4380520204fc9af7b62dd4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzA1OTA2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo0OTo0MVrOIIBeMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwODozMDo0N1rOIJyqYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MzYzNQ==", "bodyText": "Sounds like this method is overloaded and has implicit contracts.\ne.g., when the incoming host is not present it returns all the fault domains of the cluster which isn't clear and should be the case.\nEither we should rename the method and call out the implication of having an empty input parameter or just simplify the contract of the method and not overload it.\nI'd prefer latter since\n\nGetting the allowed fault domain vs resorting to something may differ at the caller's end.\nGetting all the fault domains seems straight forward call to faultDomainManager\nAdditionally, optionals are suitable for returns but taking optional parameter is highly discouraged where possible. Ideally, you want callers to determine on how they want to handle downstream call in the absence of input data and not the downstream method themself.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545283635", "createdAt": "2020-12-17T17:49:41Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -168,11 +173,13 @@ public void handleContainerStopFail(String containerID, String resourceID,\n    * @param host The hostname of the active container\n    * @return the set of racks on which this active container's standby can be scheduled\n    */\n-  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingStandbyContainer(String host) {\n-    Set<FaultDomain> activeContainerRack = faultDomainManager.getFaultDomainOfHost(host);\n-    Set<FaultDomain> standbyRacks = faultDomainManager.getAllFaultDomains();\n-    standbyRacks.removeAll(activeContainerRack);\n-    return standbyRacks;\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingStandbyContainer(Optional<String> host) {\n+    Set<FaultDomain> standbyFaultDomain = faultDomainManager.getAllFaultDomains();\n+    if (host.isPresent()) {\n+      Set<FaultDomain> activeContainerFaultDomain = faultDomainManager.getFaultDomainsForHost(host.get());\n+      standbyFaultDomain.removeAll(activeContainerFaultDomain);\n+    }\n+    return standbyFaultDomain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEzODE0NQ==", "bodyText": "I've extracted out the simplified part of the method in a separate method (getAllowedFaultDomainsForStandbyContainerGivenActiveContainerHost), and am doing extra overloaded functionalities in the parent method (getAllowedFaultDomainsForStandbyContainerGivenHostToExclude). This way, the caller can decide which method to invoke. Also, I've removed Optional from the argument.  Let me know if this makes sense to you.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547138145", "createdAt": "2020-12-22T08:30:47Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -168,11 +173,13 @@ public void handleContainerStopFail(String containerID, String resourceID,\n    * @param host The hostname of the active container\n    * @return the set of racks on which this active container's standby can be scheduled\n    */\n-  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingStandbyContainer(String host) {\n-    Set<FaultDomain> activeContainerRack = faultDomainManager.getFaultDomainOfHost(host);\n-    Set<FaultDomain> standbyRacks = faultDomainManager.getAllFaultDomains();\n-    standbyRacks.removeAll(activeContainerRack);\n-    return standbyRacks;\n+  public Set<FaultDomain> getAllowedFaultDomainsForSchedulingStandbyContainer(Optional<String> host) {\n+    Set<FaultDomain> standbyFaultDomain = faultDomainManager.getAllFaultDomains();\n+    if (host.isPresent()) {\n+      Set<FaultDomain> activeContainerFaultDomain = faultDomainManager.getFaultDomainsForHost(host.get());\n+      standbyFaultDomain.removeAll(activeContainerFaultDomain);\n+    }\n+    return standbyFaultDomain;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MzYzNQ=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzA2ODU2OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1MTo1N1rOIIBj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1MTo1N1rOIIBj_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NTExOQ==", "bodyText": "nit: make it static", "url": "https://github.com/apache/samza/pull/1446#discussion_r545285119", "createdAt": "2020-12-17T17:51:57Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -43,20 +42,24 @@\n public class YarnFaultDomainManager implements FaultDomainManager {\n \n   private Multimap<String, FaultDomain> hostToRackMap;\n-  private final SamzaApplicationState state;\n   private final YarnClientImpl yarnClient;\n+  private final MetricsRegistry metricsRegistry;\n+  private final String groupName = \"yarn-fault-domain-manager\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzA3MjA2OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo1Mjo0MFrOIIBmGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDoyNzoyNVrOII4w7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NTY1OQ==", "bodyText": "why not inline? what are we getting by extracting it to a method?", "url": "https://github.com/apache/samza/pull/1446#discussion_r545285659", "createdAt": "2020-12-17T17:52:40Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -117,4 +120,8 @@ public boolean hasSameFaultDomains(String host1, String host2) {\n     }\n     return hostToRackMap;\n   }\n+\n+  private void initMetrics() {\n+    hostToFaultDomainCacheUpdates = metricsRegistry.newCounter(groupName, \"host-to-fault-domain-cache-updates\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4OTU0OQ==", "bodyText": "I extracted it just in case we add other metrics in the future. Having said that, I don't see any other metrics being needed as of now, so have inlined.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546189549", "createdAt": "2020-12-19T04:27:25Z", "author": {"login": "PawasChhokra"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -117,4 +120,8 @@ public boolean hasSameFaultDomains(String host1, String host2) {\n     }\n     return hostToRackMap;\n   }\n+\n+  private void initMetrics() {\n+    hostToFaultDomainCacheUpdates = metricsRegistry.newCounter(groupName, \"host-to-fault-domain-cache-updates\");\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4NTY1OQ=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI3NzkwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo0MDo0OVrOIIDgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDoxOTo1N1rOII4uJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNzAyNg==", "bodyText": "seems like the logging is now impacted and different from the previous flow in the absence of rack aware standby.\ni.e. this method gets invoked with pendingResource and runningResource and seems both will end up printing as scheduled on this host", "url": "https://github.com/apache/samza/pull/1446#discussion_r545317026", "createdAt": "2020-12-17T18:40:49Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +421,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {\n+    if (existingResource != null) {\n+      ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+      if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled() && faultDomainManager.hasSameFaultDomains(hostToStartContainerOn, existingResource.getHost())) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);\n+        if (StandbyTaskUtil.isStandbyContainer(containerIdToStart)) {\n+          samzaApplicationState.failedFaultDomainAwareContainerAllocations.incrementAndGet();\n+        }\n+        return false;\n+      } else if (existingResource.getHost().equals(hostToStartContainerOn)) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1MTMyNw==", "bodyText": "im a little confused how the logging is impacted.\nEarlier it was\nif (resource != null && resource.getHost().equals(host)) { log.info(\"..running on this host\",\nNow it is\nif (existingResource != null) { // if rack aware enabled } else if (existingResource.getHost().equals(hostToStartContainerOn)) { log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\"\nDid you mean to say the exact log message is changed?", "url": "https://github.com/apache/samza/pull/1446#discussion_r545351327", "createdAt": "2020-12-17T19:35:21Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +421,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {\n+    if (existingResource != null) {\n+      ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+      if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled() && faultDomainManager.hasSameFaultDomains(hostToStartContainerOn, existingResource.getHost())) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);\n+        if (StandbyTaskUtil.isStandbyContainer(containerIdToStart)) {\n+          samzaApplicationState.failedFaultDomainAwareContainerAllocations.incrementAndGet();\n+        }\n+        return false;\n+      } else if (existingResource.getHost().equals(hostToStartContainerOn)) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNzAyNg=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDI0Ng==", "bodyText": "that is correct. the logging message is changed and it also means semantic difference during debugging to differentiate  if its pending code path that triggered this vs running code path that triggered this", "url": "https://github.com/apache/samza/pull/1446#discussion_r545380246", "createdAt": "2020-12-17T20:23:26Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +421,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {\n+    if (existingResource != null) {\n+      ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+      if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled() && faultDomainManager.hasSameFaultDomains(hostToStartContainerOn, existingResource.getHost())) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);\n+        if (StandbyTaskUtil.isStandbyContainer(containerIdToStart)) {\n+          samzaApplicationState.failedFaultDomainAwareContainerAllocations.incrementAndGet();\n+        }\n+        return false;\n+      } else if (existingResource.getHost().equals(hostToStartContainerOn)) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNzAyNg=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4ODgzOA==", "bodyText": "Thanks for noticing the logging difference. I've added a parameter to the helper method to log differently in each case.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546188838", "createdAt": "2020-12-19T04:19:57Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +421,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {\n+    if (existingResource != null) {\n+      ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+      if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled() && faultDomainManager.hasSameFaultDomains(hostToStartContainerOn, existingResource.getHost())) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);\n+        if (StandbyTaskUtil.isStandbyContainer(containerIdToStart)) {\n+          samzaApplicationState.failedFaultDomainAwareContainerAllocations.incrementAndGet();\n+        }\n+        return false;\n+      } else if (existingResource.getHost().equals(hostToStartContainerOn)) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNzAyNg=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzI5Mjk0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo0NDoyNlrOIIDpYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDoyMDo1NVrOII4uYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxOTI2Nw==", "bodyText": "can we not inline this within checkStandbyConstraints? doesn't seem much to be extracted plus you don't need to recreate ClusterManagerConfig for every invocation and plus addresses the problem I raised above about logging being different.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545319267", "createdAt": "2020-12-17T18:44:26Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +421,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {\n+    if (existingResource != null) {\n+      ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+      if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled() && faultDomainManager.hasSameFaultDomains(hostToStartContainerOn, existingResource.getHost())) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);\n+        if (StandbyTaskUtil.isStandbyContainer(containerIdToStart)) {\n+          samzaApplicationState.failedFaultDomainAwareContainerAllocations.incrementAndGet();\n+        }\n+        return false;\n+      } else if (existingResource.getHost().equals(hostToStartContainerOn)) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4ODg5Ng==", "bodyText": "Instead of making this inline, I added a parameter for the log to avoid code duplication and also made ClusterManagerConfig as a parameter. Let me know if that makes sense to you.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546188896", "createdAt": "2020-12-19T04:20:55Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +421,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID)) {\n         return false;\n       }\n     }\n \n     return true;\n   }\n \n+  boolean checkStandbyConstraintsHelper(String containerIdToStart, String hostToStartContainerOn, SamzaResource existingResource, String existingContainerID) {\n+    if (existingResource != null) {\n+      ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+      if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled() && faultDomainManager.hasSameFaultDomains(hostToStartContainerOn, existingResource.getHost())) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this rack\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);\n+        if (StandbyTaskUtil.isStandbyContainer(containerIdToStart)) {\n+          samzaApplicationState.failedFaultDomainAwareContainerAllocations.incrementAndGet();\n+        }\n+        return false;\n+      } else if (existingResource.getHost().equals(hostToStartContainerOn)) {\n+        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n+                containerIdToStart, hostToStartContainerOn, existingContainerID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxOTI2Nw=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQwMTAzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowOToxN1rOIIEpfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo1NDo1OFrOII2jxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNTY3OA==", "bodyText": "is it possible getFaultDomains returns null? because the expired metric increment checks for it.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545335678", "createdAt": "2020-12-17T19:09:17Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "diffHunk": "@@ -381,6 +428,9 @@ public final void issueResourceRequest(SamzaResourceRequest request) {\n     } else {\n       state.preferredHostRequests.incrementAndGet();\n     }\n+    if (!request.getFaultDomains().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MzQxNQ==", "bodyText": "No, I double checked and this should never be null. I will remove the null check for the expiredFaultDomainAwareContainerRequests metric. Thanks!", "url": "https://github.com/apache/samza/pull/1446#discussion_r546153415", "createdAt": "2020-12-18T23:54:58Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "diffHunk": "@@ -381,6 +428,9 @@ public final void issueResourceRequest(SamzaResourceRequest request) {\n     } else {\n       state.preferredHostRequests.incrementAndGet();\n     }\n+    if (!request.getFaultDomains().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNTY3OA=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQxMjgxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMjoyMVrOIIEwZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMjoyMVrOIIEwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNzQ0Ng==", "bodyText": "nit: java doc is a copy of above :P", "url": "https://github.com/apache/samza/pull/1446#discussion_r545337446", "createdAt": "2020-12-17T19:12:21Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "diffHunk": "@@ -170,6 +170,26 @@\n    */\n   public final AtomicInteger failedContainerPlacementActions = new AtomicInteger(0);\n \n+  /**\n+   * Number of fault domain aware container requests made for a container.\n+   */\n+  public final AtomicInteger faultDomainAwareContainerRequests = new AtomicInteger(0);\n+\n+  /**\n+   * Number of fault domain aware container requests made for a container.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQxNzU4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMzo0MVrOIIEzQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTowMjo0NVrOII3Wmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzODE3Ng==", "bodyText": "nit: wondering if this reads as though \"# of requests per container\" -- whereas we want to communicate \"# of requests by job\" right? not too strong about this. okay to drop. if changing, pl do for rest of the things below", "url": "https://github.com/apache/samza/pull/1446#discussion_r545338176", "createdAt": "2020-12-17T19:13:41Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "diffHunk": "@@ -170,6 +170,26 @@\n    */\n   public final AtomicInteger failedContainerPlacementActions = new AtomicInteger(0);\n \n+  /**\n+   * Number of fault domain aware container requests made for a container.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NjQyNw==", "bodyText": "Yes it should be a for a job. Changed that in the documentation everywhere. Thanks :)", "url": "https://github.com/apache/samza/pull/1446#discussion_r546166427", "createdAt": "2020-12-19T01:02:45Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/SamzaApplicationState.java", "diffHunk": "@@ -170,6 +170,26 @@\n    */\n   public final AtomicInteger failedContainerPlacementActions = new AtomicInteger(0);\n \n+  /**\n+   * Number of fault domain aware container requests made for a container.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzODE3Ng=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQ2NDQxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToyNToxNFrOIIFOdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDoyMjowMlrOII4uzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTE0Mw==", "bodyText": "i feel this should also be guarded the config -- we would want the flow to be exactly same as earlier when config is off right.\nSame for other requests made.\nsince yarnclusterResourceManager honors the fault domains only when config = on, im okay with dropping it since though the code is changing when config=off, the flow does not change.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545345143", "createdAt": "2020-12-17T19:25:14Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -181,13 +207,14 @@ private void handleStandbyContainerStop(String standbyContainerID, String resour\n \n       // request standbycontainer's host for active-container\n       SamzaResourceRequest resourceRequestForActive =\n-          containerAllocator.getResourceRequestWithDelay(activeContainerID, standbyContainerHostname, preferredHostRetryDelay);\n+        containerAllocator.getResourceRequestWithDelay(activeContainerID, standbyContainerHostname, preferredHostRetryDelay);\n       // record the resource request, before issuing it to avoid race with allocation-thread\n       failoverMetadata.get().recordResourceRequest(resourceRequestForActive);\n       containerAllocator.issueResourceRequest(resourceRequestForActive);\n \n       // request any-host for standby container\n-      containerAllocator.requestResource(standbyContainerID, ResourceRequestState.ANY_HOST);\n+      containerAllocator.requestResource(standbyContainerID, ResourceRequestState.ANY_HOST,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4OTAwNA==", "bodyText": "I thought about this a lot and I think it makes sense to not alter the current flow at all in case the config is turned on. Hence I have now added that check for every requestResource.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546189004", "createdAt": "2020-12-19T04:22:02Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -181,13 +207,14 @@ private void handleStandbyContainerStop(String standbyContainerID, String resour\n \n       // request standbycontainer's host for active-container\n       SamzaResourceRequest resourceRequestForActive =\n-          containerAllocator.getResourceRequestWithDelay(activeContainerID, standbyContainerHostname, preferredHostRetryDelay);\n+        containerAllocator.getResourceRequestWithDelay(activeContainerID, standbyContainerHostname, preferredHostRetryDelay);\n       // record the resource request, before issuing it to avoid race with allocation-thread\n       failoverMetadata.get().recordResourceRequest(resourceRequestForActive);\n       containerAllocator.issueResourceRequest(resourceRequestForActive);\n \n       // request any-host for standby container\n-      containerAllocator.requestResource(standbyContainerID, ResourceRequestState.ANY_HOST);\n+      containerAllocator.requestResource(standbyContainerID, ResourceRequestState.ANY_HOST,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0NTE0Mw=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzUyNDM3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo0MDowNFrOIIFx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNTowNDozNVrOII49Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1NDIxNg==", "bodyText": "this will increment and emit metrics even when config=off right?\nare we okay with that?", "url": "https://github.com/apache/samza/pull/1446#discussion_r545354216", "createdAt": "2020-12-17T19:40:04Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -409,16 +470,18 @@ public void checkStandbyConstraintsAndRunStreamProcessor(SamzaResourceRequest re\n       log.info(\"Running container {} on {} meets standby constraints, preferredHost = {}\", containerID,\n           samzaResource.getHost(), preferredHost);\n       containerAllocator.runStreamProcessor(request, preferredHost);\n+      samzaApplicationState.faultDomainAwareContainersStarted.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE5MjY4Mw==", "bodyText": "I've added a check that will ensure that this metric is updated only when that config is on.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546192683", "createdAt": "2020-12-19T05:04:35Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -409,16 +470,18 @@ public void checkStandbyConstraintsAndRunStreamProcessor(SamzaResourceRequest re\n       log.info(\"Running container {} on {} meets standby constraints, preferredHost = {}\", containerID,\n           samzaResource.getHost(), preferredHost);\n       containerAllocator.runStreamProcessor(request, preferredHost);\n+      samzaApplicationState.faultDomainAwareContainersStarted.incrementAndGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1NDIxNg=="}, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzUzMzgwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/config/ClusterManagerConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo0MjoyOVrOIIF3cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo0MjoyOVrOIIF3cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1NTYzMw==", "bodyText": "nit: might be nice to just keep default value=\"false\" in FAULT_DOMAIN_AWARE_STANDBY_ENABLED_DEFUALT=false.", "url": "https://github.com/apache/samza/pull/1446#discussion_r545355633", "createdAt": "2020-12-17T19:42:29Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/config/ClusterManagerConfig.java", "diffHunk": "@@ -250,6 +258,14 @@ public String getContainerManagerClass() {\n     return get(CLUSTER_MANAGER_FACTORY, CLUSTER_MANAGER_FACTORY_DEFAULT);\n   }\n \n+  public String getFaultDomainManagerClass() {\n+    return get(FAULT_DOMAIN_MANAGER_FACTORY, FAULT_DOMAIN_MANAGER_FACTORY_DEFAULT);\n+  }\n+\n+  public boolean getFaultDomainAwareStandbyEnabled() {\n+    return getBoolean(FAULT_DOMAIN_AWARE_STANDBY_ENABLED, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2932ede88f3f9790e664244deb6caf6a8207305f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODYxMjg4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowMToyN1rOIJlzSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowMToyN1rOIJlzSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyNzQzMg==", "bodyText": "Can be more efficient and determine if it is enabled in constructor and use an instance variable to infer if its enabled?\nStoring config seems unnecessary and creating ClusterManagerConfig on the fly for invocation seems sub-optimal.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546927432", "createdAt": "2020-12-21T21:01:27Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -469,6 +566,10 @@ void releaseUnstartableContainer(SamzaResourceRequest request, SamzaResource res\n     resourceRequestState.cancelResourceRequest(request);\n   }\n \n+  private boolean isFaultDomainAwareStandbyEnabled() {\n+    ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+    return clusterManagerConfig.getFaultDomainAwareStandbyEnabled();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODYxMzc2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowMTo0NlrOIJlzyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowMTo0NlrOIJlzyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyNzU2Mg==", "bodyText": "Consistency: keep the new parameters at the end.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546927562", "createdAt": "2020-12-21T21:01:46Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -56,8 +58,13 @@\n   // Resource-manager, used to stop containers\n   private ClusterResourceManager clusterResourceManager;\n \n-  public StandbyContainerManager(SamzaApplicationState samzaApplicationState,\n-      ClusterResourceManager clusterResourceManager, LocalityManager localityManager) {\n+  // FaultDomainManager, used to get fault domain information of different hosts from the cluster manager.\n+  private final FaultDomainManager faultDomainManager;\n+\n+  private final Config config;\n+\n+  public StandbyContainerManager(SamzaApplicationState samzaApplicationState, ClusterResourceManager clusterResourceManager,\n+                                 FaultDomainManager faultDomainManager, LocalityManager localityManager, Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODYxOTE5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowMzo1MVrOIJl28Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzo0NzozMlrOIJxjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyODM2OQ==", "bodyText": "boiler plate since the function introduced below in this PR already does this.\ncontext: checkFaultDomainAwarenessEnabledAndRequestResource", "url": "https://github.com/apache/samza/pull/1446#discussion_r546928369", "createdAt": "2020-12-21T21:03:51Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -233,9 +275,13 @@ private void initiateStandbyAwareAllocation(String activeContainerID, String res\n             standbyHost, activeContainerID, standbyHost, resourceID);\n         FailoverMetadata failoverMetadata = this.registerActiveContainerFailure(activeContainerID, resourceID);\n \n+        Set<FaultDomain> allowedFaultDomains = new HashSet<>();\n+        if (isFaultDomainAwareStandbyEnabled()) {\n+          allowedFaultDomains = getAllowedFaultDomainsForStandbyContainerGivenContainerId(activeContainerID);\n+        }\n         // record the resource request, before issuing it to avoid race with allocation-thread\n         SamzaResourceRequest resourceRequestForActive =\n-            containerAllocator.getResourceRequest(activeContainerID, standbyHost);\n+                containerAllocator.getResourceRequest(activeContainerID, standbyHost, allowedFaultDomains);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMDA2Nw==", "bodyText": "I've simplified this now as explained in the next comment.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547120067", "createdAt": "2020-12-22T07:47:32Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -233,9 +275,13 @@ private void initiateStandbyAwareAllocation(String activeContainerID, String res\n             standbyHost, activeContainerID, standbyHost, resourceID);\n         FailoverMetadata failoverMetadata = this.registerActiveContainerFailure(activeContainerID, resourceID);\n \n+        Set<FaultDomain> allowedFaultDomains = new HashSet<>();\n+        if (isFaultDomainAwareStandbyEnabled()) {\n+          allowedFaultDomains = getAllowedFaultDomainsForStandbyContainerGivenContainerId(activeContainerID);\n+        }\n         // record the resource request, before issuing it to avoid race with allocation-thread\n         SamzaResourceRequest resourceRequestForActive =\n-            containerAllocator.getResourceRequest(activeContainerID, standbyHost);\n+                containerAllocator.getResourceRequest(activeContainerID, standbyHost, allowedFaultDomains);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyODM2OQ=="}, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODYyNzM5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMTowNjo0MVrOIJl7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzo0Njo1MlrOIJxilw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyOTYwMg==", "bodyText": "nit: I'd prefer to rename the method to requestResource since the intent of the method that way is clear. i.e. only request resource and potentially return the SamzaResourceRequest.\nWhat and how it does to request resource is kept within and can be inferred by reading the method implementation. The name seems too long and the fact that this returns void makes it unusable in some places which has the exact boiler plate code.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546929602", "createdAt": "2020-12-21T21:06:41Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -361,8 +407,41 @@ private FailoverMetadata registerActiveContainerFailure(String activeContainerID\n   }\n \n   /**\n-   * Check if matching this SamzaResourceRequest to the given resource, meets all standby-container container constraints.\n+   * This method checks from the config if standby allocation is fault domain aware or not, and requests resources accordingly.\n+   *\n+   * @param containerAllocator ContainerAllocator object that requests for resources from the resource manager\n+   * @param containerID Samza container ID that will be run when a resource is allocated for this request\n+   * @param preferredHost name of the host that you prefer to run the processor on\n+   */\n+  void checkFaultDomainAwarenessEnabledAndRequestResource(ContainerAllocator containerAllocator, String containerID, String preferredHost) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExOTc2Nw==", "bodyText": "Makes sense. However, I've renamed the method to getResourceRequest and extracted the issueResourceRequest part out of it since the place mentioned in the above comment inside initiateStandbyAwareAllocation also records the resource request separately before issuing to avoid race conditions.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547119767", "createdAt": "2020-12-22T07:46:52Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -361,8 +407,41 @@ private FailoverMetadata registerActiveContainerFailure(String activeContainerID\n   }\n \n   /**\n-   * Check if matching this SamzaResourceRequest to the given resource, meets all standby-container container constraints.\n+   * This method checks from the config if standby allocation is fault domain aware or not, and requests resources accordingly.\n+   *\n+   * @param containerAllocator ContainerAllocator object that requests for resources from the resource manager\n+   * @param containerID Samza container ID that will be run when a resource is allocated for this request\n+   * @param preferredHost name of the host that you prefer to run the processor on\n+   */\n+  void checkFaultDomainAwarenessEnabledAndRequestResource(ContainerAllocator containerAllocator, String containerID, String preferredHost) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyOTYwMg=="}, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODg4NTkyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo0ODozNlrOIJoRUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjo1NTozMlrOIJwaUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk2Nzg4OA==", "bodyText": "I still feel this is unclean to me especially passing in parameters that are not necessarily relevant to the core of what the method is responsible for. e.g., \"pending\" vs \"running\" which is purely for logging and isn't state per say and one realizes until reading through the code underneath.\nIf you don't want to inline and still feel refactor would help and make it clear, i'd suggest extracting the existing logic into checkActiveAndStandbyOnSameHost and then add your logic into checkActiveAndStandbyOnSameFaultDomain and within checkStandbyConstraints you can fire off both of these checks or one of them based on the fault domain enabled or not.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546967888", "createdAt": "2020-12-21T22:48:36Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +454,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID, \"pending\")) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID, \"running\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMTI2Ng==", "bodyText": "Got it. I've inlined the method as you suggested.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547101266", "createdAt": "2020-12-22T06:55:32Z", "author": {"login": "PawasChhokra"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -375,24 +454,39 @@ boolean checkStandbyConstraints(String containerIdToStart, String host) {\n       SamzaResource resource = samzaApplicationState.pendingProcessors.get(containerID);\n \n       // return false if a conflicting container is pending for launch on the host\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already scheduled on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID, \"pending\")) {\n         return false;\n       }\n \n       // return false if a conflicting container is running on the host\n       resource = samzaApplicationState.runningProcessors.get(containerID);\n-      if (resource != null && resource.getHost().equals(host)) {\n-        log.info(\"Container {} cannot be started on host {} because container {} is already running on this host\",\n-            containerIdToStart, host, containerID);\n+      if (!checkStandbyConstraintsHelper(containerIdToStart, host, resource, containerID, \"running\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk2Nzg4OA=="}, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODg4ODY1OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo0OTo0NlrOIJoS3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo0OTo0NlrOIJoS3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk2ODI4Ng==", "bodyText": "nit: package private instead if it is only used for testing.", "url": "https://github.com/apache/samza/pull/1446#discussion_r546968286", "createdAt": "2020-12-21T22:49:46Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnFaultDomainManager.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.job.yarn;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.yarn.api.records.NodeReport;\n+import org.apache.hadoop.yarn.api.records.NodeState;\n+import org.apache.hadoop.yarn.client.api.impl.YarnClientImpl;\n+import org.apache.hadoop.yarn.conf.YarnConfiguration;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n+import org.apache.samza.clustermanager.FaultDomain;\n+import org.apache.samza.clustermanager.FaultDomainManager;\n+import org.apache.samza.clustermanager.FaultDomainType;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.MetricsRegistry;\n+\n+/**\n+ * This class functionality works with the assumption that the job.standbytasks.replication.factor is 2.\n+ * For values greater than 2, it is possible that the standby containers could be on the same rack as the active, or the already existing standby racks.\n+ */\n+public class YarnFaultDomainManager implements FaultDomainManager {\n+\n+  private static final String FAULT_DOMAIN_MANAGER_GROUP = \"yarn-fault-domain-manager\";\n+  private static final String HOST_TO_FAULT_DOMAIN_CACHE_UPDATES = \"host-to-fault-domain-cache-updates\";\n+  private Multimap<String, FaultDomain> hostToRackMap;\n+  private final YarnClientImpl yarnClient;\n+  private Counter hostToFaultDomainCacheUpdates;\n+\n+  public YarnFaultDomainManager(MetricsRegistry metricsRegistry) {\n+    this.yarnClient = new YarnClientImpl();\n+    yarnClient.init(new YarnConfiguration());\n+    yarnClient.start();\n+    this.hostToRackMap = computeHostToFaultDomainMap();\n+    hostToFaultDomainCacheUpdates = metricsRegistry.newCounter(FAULT_DOMAIN_MANAGER_GROUP, HOST_TO_FAULT_DOMAIN_CACHE_UPDATES);\n+  }\n+\n+  @VisibleForTesting\n+  YarnFaultDomainManager(MetricsRegistry metricsRegistry, YarnClientImpl yarnClient, Multimap<String, FaultDomain> hostToRackMap) {\n+    this.yarnClient = yarnClient;\n+    yarnClient.init(new YarnConfiguration());\n+    yarnClient.start();\n+    this.hostToRackMap = hostToRackMap;\n+    hostToFaultDomainCacheUpdates = metricsRegistry.newCounter(FAULT_DOMAIN_MANAGER_GROUP, HOST_TO_FAULT_DOMAIN_CACHE_UPDATES);\n+  }\n+\n+  /**\n+   * This method returns all the last cached rack values in a cluster, for all hosts that are healthy, up and running.\n+   * @return a set of {@link FaultDomain}s\n+   */\n+  @Override\n+  public Set<FaultDomain> getAllFaultDomains() {\n+    return new HashSet<>(hostToRackMap.values());\n+  }\n+\n+  /**\n+   * This method returns the rack a particular host resides on based on the internal cache.\n+   * In case the rack of a host does not exist in this cache, we update the cache by computing the host to rack map again using Yarn.\n+   * @param host the host\n+   * @return the {@link FaultDomain}\n+   */\n+  @Override\n+  public Set<FaultDomain> getFaultDomainsForHost(String host) {\n+    if (!hostToRackMap.containsKey(host)) {\n+      hostToRackMap = computeHostToFaultDomainMap();\n+      hostToFaultDomainCacheUpdates.inc();\n+    }\n+    return new HashSet<>(hostToRackMap.get(host));\n+  }\n+\n+  /**\n+   * This method checks if the two hostnames provided reside on the same rack.\n+   * @param host1 hostname\n+   * @param host2 hostname\n+   * @return true if the hosts exist on the same rack\n+   */\n+  @Override\n+  public boolean hasSameFaultDomains(String host1, String host2) {\n+    if (!hostToRackMap.keySet().contains(host1) || !hostToRackMap.keySet().contains(host2)) {\n+      hostToRackMap = computeHostToFaultDomainMap();\n+      hostToFaultDomainCacheUpdates.inc();\n+    }\n+    return hostToRackMap.get(host1).equals(hostToRackMap.get(host2));\n+  }\n+\n+  /**\n+   * This method computes the host to rack map from Yarn.\n+   * Only the hosts that are running in the cluster will be a part of this map.\n+   * @return map of the host and the rack it resides on\n+   */\n+  @VisibleForTesting\n+  protected Multimap<String, FaultDomain> computeHostToFaultDomainMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48aff32e97e1322331d74d22e4fb005e8c60de82"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg1NDk3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozODozM1rOIKDP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzozODozM1rOIKDP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwOTg3Mw==", "bodyText": "can be simplified to\nreturn Optional.of(resource)\n    .map(SamzaResourceRequest::getHost)", "url": "https://github.com/apache/samza/pull/1446#discussion_r547409873", "createdAt": "2020-12-22T17:38:33Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -436,7 +448,11 @@ void checkFaultDomainAwarenessEnabledAndRequestResource(ContainerAllocator conta\n     if (resource == null) {\n       resource = samzaApplicationState.runningProcessors.get(activeContainerId);\n     }\n-    return Optional.ofNullable(resource.getHost());\n+    if (resource != null) {\n+      return Optional.ofNullable(resource.getHost());\n+    } else {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea8b94bb0f2944f37d3c0c6fdd530dea129ef89"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg2NTU0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0MjowMFrOIKDWIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0MjowMFrOIKDWIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMTQ5MQ==", "bodyText": "can be simplified to\nactiveContainerHost = getActiveContainerHost(containerID)\n   .orElse(null);", "url": "https://github.com/apache/samza/pull/1446#discussion_r547411491", "createdAt": "2020-12-22T17:42:00Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -512,7 +529,13 @@ public void checkStandbyConstraintsAndRunStreamProcessor(SamzaResourceRequest re\n           \"Running standby container {} on host {} does not meet standby constraints, cancelling resource request, releasing resource, and making a new ANY_HOST request\",\n           containerID, samzaResource.getHost());\n       releaseUnstartableContainer(request, samzaResource, preferredHost, resourceRequestState);\n-      checkFaultDomainAwarenessEnabledAndRequestResource(containerAllocator, containerID, ResourceRequestState.ANY_HOST);\n+      Optional<String> activeContainerHostOpt = getActiveContainerHost(containerID);\n+      String activeContainerHost = null;\n+      if (activeContainerHostOpt.isPresent()) {\n+        activeContainerHost = activeContainerHostOpt.get();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea8b94bb0f2944f37d3c0c6fdd530dea129ef89"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTg4ODY4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0ODo1M1rOIKDjvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzo0ODo1M1rOIKDjvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNDk3Mg==", "bodyText": "remove config since you have already persisted the switch in the boolean.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547414972", "createdAt": "2020-12-22T17:48:53Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -56,8 +58,15 @@\n   // Resource-manager, used to stop containers\n   private ClusterResourceManager clusterResourceManager;\n \n-  public StandbyContainerManager(SamzaApplicationState samzaApplicationState,\n-      ClusterResourceManager clusterResourceManager, LocalityManager localityManager) {\n+  // FaultDomainManager, used to get fault domain information of different hosts from the cluster manager.\n+  private final FaultDomainManager faultDomainManager;\n+\n+  private final Config config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea8b94bb0f2944f37d3c0c6fdd530dea129ef89"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzM3NjI1OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDo0NjoxOVrOIKRF2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDowNDoxMFrOIK-BQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNjY5OQ==", "bodyText": "What do you think about not having control flow here and pass empty array instead of null if it doesn't change things semantically in YARN?\nBy doing so, you will just eliminate unnecessary control flow and given faultDomains is guaranteed to be empty or present, null handling is not necessary as well.", "url": "https://github.com/apache/samza/pull/1446#discussion_r547636699", "createdAt": "2020-12-23T04:46:19Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -241,6 +241,11 @@ public void requestResources(SamzaResourceRequest resourceRequest) {\n     String processorId = resourceRequest.getProcessorId();\n     String requestId = resourceRequest.getRequestId();\n     String preferredHost = resourceRequest.getPreferredHost();\n+    String[] racks = null;\n+    ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+    if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled()) {\n+      racks = resourceRequest.getFaultDomains().stream().map(FaultDomain::getId).toArray(String[]::new);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d85519b54407ac61f15b5cbc24cdda3132d7b34"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3MjgwMQ==", "bodyText": "Sure, that makes sense. I've removed the unnecessary check.", "url": "https://github.com/apache/samza/pull/1446#discussion_r548372801", "createdAt": "2020-12-24T04:04:10Z", "author": {"login": "PawasChhokra"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -241,6 +241,11 @@ public void requestResources(SamzaResourceRequest resourceRequest) {\n     String processorId = resourceRequest.getProcessorId();\n     String requestId = resourceRequest.getRequestId();\n     String preferredHost = resourceRequest.getPreferredHost();\n+    String[] racks = null;\n+    ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n+    if (clusterManagerConfig.getFaultDomainAwareStandbyEnabled()) {\n+      racks = resourceRequest.getFaultDomains().stream().map(FaultDomain::getId).toArray(String[]::new);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzNjY5OQ=="}, "originalCommit": {"oid": "6d85519b54407ac61f15b5cbc24cdda3132d7b34"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1372, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}