{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzUxNTUz", "number": 1265, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozOToyMlrODdIxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo0MDo1N1rODdIzEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc5MDEzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/runtime/ApplicationRunnerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozOToyMlrOFlkYnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjo0MDowMVrOFlmBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNzc1OQ==", "bodyText": "Do you feel that the \"base\" use case for CommandLine is to need the full config? To me, it looks a little awkward to need to override loadConfig here with an implementation which is almost the same as the base loadConfig.\nI suppose one alternative would be to make this impl here the base impl, and then have each use case call ConfigUtil.loadConfig if is needs it. What do you see as the tradeoffs?", "url": "https://github.com/apache/samza/pull/1265#discussion_r374937759", "createdAt": "2020-02-04T21:39:22Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/ApplicationRunnerMain.java", "diffHunk": "@@ -43,9 +49,33 @@ public ApplicationRunnerOperation getOperation(OptionSet options) {\n       String rawOp = options.valueOf(operationOpt);\n       return ApplicationRunnerOperation.fromString(rawOp);\n     }\n+\n+    @Override\n+    public Config loadConfig(OptionSet options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8b40d072604c3eb86a0af825653f79e62ee0e4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2NDQ5OQ==", "bodyText": "Good question, in all 13 direct usage of CommandLine, and 5 sub classes of CommandLine, they are all expecting full job configs to work properly, e.g. RocksDbReadingTool extends CommandLine to read full job config before being able to read data from Rocks DB, which is being invoked by CLI.\nIf we change CommandLine to the other way, that means we need to invoke ConfigUtil.loadConfig explicitly in 13 places, and override loadConfigs in 5 sub classes to invoke ConfigUtil.loadConfig too, compared to overriding once in ApplicationRunnerCommandLine only.\nI would prefer the current way to keep the base class to serve majority use case.", "url": "https://github.com/apache/samza/pull/1265#discussion_r374964499", "createdAt": "2020-02-04T22:40:01Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/runtime/ApplicationRunnerMain.java", "diffHunk": "@@ -43,9 +49,33 @@ public ApplicationRunnerOperation getOperation(OptionSet options) {\n       String rawOp = options.valueOf(operationOpt);\n       return ApplicationRunnerOperation.fromString(rawOp);\n     }\n+\n+    @Override\n+    public Config loadConfig(OptionSet options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNzc1OQ=="}, "originalCommit": {"oid": "4f8b40d072604c3eb86a0af825653f79e62ee0e4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc5NDQwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/test/java/org/apache/samza/runtime/TestApplicationRunnerMain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo0MDo1N1rOFlkbYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoxMDo0MlrOFllP4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzODQ2Nw==", "bodyText": "Minor suggestion: Instead of needing to check the size and each individual entry, could you build the expected config map and then do an equals check?", "url": "https://github.com/apache/samza/pull/1265#discussion_r374938467", "createdAt": "2020-02-04T21:40:57Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/test/java/org/apache/samza/runtime/TestApplicationRunnerMain.java", "diffHunk": "@@ -79,6 +82,28 @@ public void TestStatusOperation() throws Exception {\n     assertEquals(1, TestApplicationRunnerInvocationCounts.statusCount);\n   }\n \n+  @Test\n+  public void TestLoadConfig() {\n+    ApplicationRunnerMain.ApplicationRunnerCommandLine cmdLine = new ApplicationRunnerMain.ApplicationRunnerCommandLine();\n+    OptionSet options = cmdLine.parser().parse(\n+        \"--config-loader-factory\",\n+        \"org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\",\n+        \"--config-loader-properties\",\n+        \"path=\" + getClass().getResource(\"/test.properties\").getPath(),\n+        \"-config\", String.format(\"%s=%s\", ApplicationConfig.APP_CLASS, MockStreamApplication.class.getName()),\n+        \"-config\", String.format(\"app.runner.class=%s\", TestApplicationRunnerInvocationCounts.class.getName()));\n+\n+    Config actual = cmdLine.loadConfig(options);\n+\n+    assertEquals(4, actual.size());\n+    assertEquals(\"org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\", actual.get(JobConfig.CONFIG_LOADER_FACTORY));\n+    assertEquals(\n+        getClass().getResource(\"/test.properties\").getPath(),\n+        actual.get(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX + \"path\"));\n+    assertEquals(MockStreamApplication.class.getName(), actual.get(ApplicationConfig.APP_CLASS));\n+    assertEquals(TestApplicationRunnerInvocationCounts.class.getName(), actual.get(\"app.runner.class\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8b40d072604c3eb86a0af825653f79e62ee0e4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1MTkwNg==", "bodyText": "Good point, updated.", "url": "https://github.com/apache/samza/pull/1265#discussion_r374951906", "createdAt": "2020-02-04T22:10:42Z", "author": {"login": "kw2542"}, "path": "samza-core/src/test/java/org/apache/samza/runtime/TestApplicationRunnerMain.java", "diffHunk": "@@ -79,6 +82,28 @@ public void TestStatusOperation() throws Exception {\n     assertEquals(1, TestApplicationRunnerInvocationCounts.statusCount);\n   }\n \n+  @Test\n+  public void TestLoadConfig() {\n+    ApplicationRunnerMain.ApplicationRunnerCommandLine cmdLine = new ApplicationRunnerMain.ApplicationRunnerCommandLine();\n+    OptionSet options = cmdLine.parser().parse(\n+        \"--config-loader-factory\",\n+        \"org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\",\n+        \"--config-loader-properties\",\n+        \"path=\" + getClass().getResource(\"/test.properties\").getPath(),\n+        \"-config\", String.format(\"%s=%s\", ApplicationConfig.APP_CLASS, MockStreamApplication.class.getName()),\n+        \"-config\", String.format(\"app.runner.class=%s\", TestApplicationRunnerInvocationCounts.class.getName()));\n+\n+    Config actual = cmdLine.loadConfig(options);\n+\n+    assertEquals(4, actual.size());\n+    assertEquals(\"org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\", actual.get(JobConfig.CONFIG_LOADER_FACTORY));\n+    assertEquals(\n+        getClass().getResource(\"/test.properties\").getPath(),\n+        actual.get(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX + \"path\"));\n+    assertEquals(MockStreamApplication.class.getName(), actual.get(ApplicationConfig.APP_CLASS));\n+    assertEquals(TestApplicationRunnerInvocationCounts.class.getName(), actual.get(\"app.runner.class\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzODQ2Nw=="}, "originalCommit": {"oid": "4f8b40d072604c3eb86a0af825653f79e62ee0e4"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1565, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}