{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNDg0NTAz", "number": 1450, "title": "SAMZA-2610: Handle Metadata changes for AM HA orchestration", "bodyText": "Description:\nAM performs planning and job model generation for every incarnation. With AM-HA, the new job model or configuration may invalidate the containers from the previous attempt. In order to ensure correctness, we handle this by detecting these changes and restart all the containers in case of any changes to metadata (job model or configuration).\nChanges:\n\nDetect changes in metadata by reading older metadata from coordinator stream and signal the CPM\nAs part of resource request & orchestration, ignore the containers that are already running from the previous attempt and proceed to release them if metadata changed.\nReleasing the container will signal RM through AMRM client and RM will orchestrate killing the processing container. It is different from the normal StopStreamProcessor flow as the NMClient isn't the source of truth and doesn't have context about the containers spun in the previous attempts\n\nTests:\n\nAdded unit tests for YarnClusterResourceManager to verify StopStreamProcessor works for containers managed during its lifecycle vs previous lifecycle\nAdded unit tests for ClusterBasedJobCoordinator to ensure JC metadata is persisted when there is a change in metadata and the local state reflects the change\nAdded unit tests for ContainerProcessManager to verify CPM issues stop on containers from previous attempts if metadata changed (restartContainer set to true).\nAdded unit tests for 'ClusterBasedJobCoordinator` to ensure startpoints are acted on only when metadata changed if AM HA is enabled or keep the existing flow as is.\n\nAPI Changes: None\nUpgrade Instructions: None\nUsage Instructions: None", "createdAt": "2020-12-03T05:07:21Z", "url": "https://github.com/apache/samza/pull/1450", "merged": true, "mergeCommit": {"oid": "108768393960a893f9d202edf50bf47d2b1af590"}, "closed": true, "closedAt": "2020-12-09T17:33:12Z", "author": {"login": "mynameborat"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj90yTgBqjQwODIwNzU4OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkhyAoAH2gAyNTMxNDg0NTAzOmYyN2M2YzNkMzAwOTlkZWY3OTgyYWI4ODQ3OWUzODUyYjc3MGNlMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10e6e56082e6ab2ebf2f1923e3bb48191896d7ce", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/10e6e56082e6ab2ebf2f1923e3bb48191896d7ce", "committedDate": "2020-12-03T06:48:17Z", "message": "Fix Appmasterlifecycle tests to reflect bug fix"}, "afterCommit": {"oid": "3c879484e0fdd6b20b389e72b425b9efcddd5db6", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/3c879484e0fdd6b20b389e72b425b9efcddd5db6", "committedDate": "2020-12-07T23:06:09Z", "message": "SAMZA-2610: Handle Metadata changes for AM HA orchestration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7f85a763e7dc81c3d53aa64a44ae1c8ba1ca96c", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/e7f85a763e7dc81c3d53aa64a44ae1c8ba1ca96c", "committedDate": "2020-12-08T01:39:12Z", "message": "Added tests and minor improvements"}, "afterCommit": {"oid": "4ebab84234d63f96707e908ea61b209e72c8eebf", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/4ebab84234d63f96707e908ea61b209e72c8eebf", "committedDate": "2020-12-08T02:40:50Z", "message": "Pick up the latest data model changes & fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce21359be003ee2d7a3e88868d42c9c664604291", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/ce21359be003ee2d7a3e88868d42c9c664604291", "committedDate": "2020-12-08T19:28:30Z", "message": "SAMZA-2610: Handle Metadata changes for AM HA orchestration\n     - Added tests and minor improvements\n     - Pick up the latest data model changes & fix checkstyle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "738370a18c2cf1c6bf36d7ae200f8baed00c3d50", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/738370a18c2cf1c6bf36d7ae200f8baed00c3d50", "committedDate": "2020-12-08T04:59:17Z", "message": "Fix checkstyle"}, "afterCommit": {"oid": "ce21359be003ee2d7a3e88868d42c9c664604291", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/ce21359be003ee2d7a3e88868d42c9c664604291", "committedDate": "2020-12-08T19:28:30Z", "message": "SAMZA-2610: Handle Metadata changes for AM HA orchestration\n     - Added tests and minor improvements\n     - Pick up the latest data model changes & fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fdaa2bc8ec40135856d7f3b9211f59707e49473", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/7fdaa2bc8ec40135856d7f3b9211f59707e49473", "committedDate": "2020-12-08T21:04:39Z", "message": "Add more metrics to JobCoordinatorMetadataManager and unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/24e7af5ef5f74b4c009b7ca1200e88d1da567d1f", "committedDate": "2020-12-08T21:19:03Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzIzMjc0", "url": "https://github.com/apache/samza/pull/1450#pullrequestreview-547723274", "createdAt": "2020-12-08T23:35:38Z", "commit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozNTozOFrOIB7Sdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzo1NDoxNFrOIB7wGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MDg3MA==", "bodyText": "is this only for tests?", "url": "https://github.com/apache/samza/pull/1450#discussion_r538890870", "createdAt": "2020-12-08T23:35:38Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -456,6 +482,18 @@ StartpointManager createStartpointManager() {\n \n   @VisibleForTesting\n   ContainerProcessManager createContainerProcessManager() {\n-    return new ContainerProcessManager(config, state, metrics, containerPlacementMetadataStore, localityManager);\n+    return new ContainerProcessManager(config, state, metrics, containerPlacementMetadataStore, localityManager,\n+        metadataChangedAcrossAttempts);\n+  }\n+\n+  @VisibleForTesting\n+  JobCoordinatorMetadataManager createJobCoordinatorMetadataManager() {\n+    return new JobCoordinatorMetadataManager(new NamespaceAwareCoordinatorStreamStore(metadataStore,\n+        SetJobCoordinatorMetadataMessage.TYPE), JobCoordinatorMetadataManager.ClusterType.YARN, metrics);\n+  }\n+\n+  @VisibleForTesting\n+  boolean isMetadataChangedAcrossAttempts() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MTY5Ng==", "bodyText": "wait, if we have to restart all containers then why are we asking allocator for resources for only some of the processors.. is it to avoid a scenario where we spin up a processor with Id 0 though there is a processor with same id from previous attempt leading to orphan container issues?\n\n\nwould benefit from a log here too i feel.", "url": "https://github.com/apache/samza/pull/1450#discussion_r538891696", "createdAt": "2020-12-08T23:37:40Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -248,16 +253,23 @@ public void start() {\n     // Request initial set of containers\n     LocalityModel localityModel = localityManager.readLocality();\n     Map<String, String> processorToHost = new HashMap<>();\n-    state.jobModelManager.jobModel().getContainers().keySet().forEach((containerId) -> {\n-      String host = Optional.ofNullable(localityModel.getProcessorLocality(containerId))\n+    state.jobModelManager.jobModel().getContainers().keySet().forEach((processorId) -> {\n+      String host = Optional.ofNullable(localityModel.getProcessorLocality(processorId))\n           .map(ProcessorLocality::host)\n           .filter(StringUtils::isNotBlank)\n           .orElse(null);\n-      processorToHost.put(containerId, host);\n+      processorToHost.put(processorId, host);\n     });\n     if (jobConfig.getApplicationMasterHighAvailabilityEnabled()) {\n       // don't request resource for container that is already running\n-      state.runningProcessors.keySet().forEach(processorToHost::remove);\n+      state.runningProcessors.forEach((processorId, samzaResource) -> {\n+        LOG.info(\"Not requesting container for processorId: {} since its already running as containerId: {}\",\n+            processorId, samzaResource.getContainerId());\n+        processorToHost.remove(processorId);\n+        if (restartContainers) {\n+          clusterResourceManager.stopStreamProcessor(samzaResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5NDQ3Mg==", "bodyText": "should we put this block behind the AM-HA config?", "url": "https://github.com/apache/samza/pull/1450#discussion_r538894472", "createdAt": "2020-12-08T23:44:38Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -331,9 +332,24 @@ public void launchStreamProcessor(SamzaResource resource, CommandBuilder builder\n   public void stopStreamProcessor(SamzaResource resource) {\n     synchronized (lock) {\n       Container container = allocatedResources.get(resource);\n+      /*\n+       * 1. Stop the container through NMClient if the container was instantiated as part of NMClient lifecycle.\n+       * 2. Stop the container through AMClient by release the assigned container if the container was from the previous\n+       *    attempt and managed by the AM due to AM-HA\n+       * 3. Ignore the request if the container associated with the resource isn't present in the bookeeping.\n+       */\n       if (container != null) {\n         log.info(\"Stopping Container ID: {} on host: {}\", resource.getContainerId(), resource.getHost());\n         this.nmClientAsync.stopContainerAsync(container.getId(), container.getNodeId());\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5ODQ1Ng==", "bodyText": "major: hmm.. some confusion here.. resource.getContainerId() gets the yarn container id right (of the form container_1350670447861_0003_01_000001).  see one ex here \nBut if we see code where the runningProcessors gets populated -- it has key as samza processorId (of the form 0) -- see here \nbut here you are using container id to fetch from runningProcessors.", "url": "https://github.com/apache/samza/pull/1450#discussion_r538898456", "createdAt": "2020-12-08T23:54:14Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -331,9 +332,24 @@ public void launchStreamProcessor(SamzaResource resource, CommandBuilder builder\n   public void stopStreamProcessor(SamzaResource resource) {\n     synchronized (lock) {\n       Container container = allocatedResources.get(resource);\n+      /*\n+       * 1. Stop the container through NMClient if the container was instantiated as part of NMClient lifecycle.\n+       * 2. Stop the container through AMClient by release the assigned container if the container was from the previous\n+       *    attempt and managed by the AM due to AM-HA\n+       * 3. Ignore the request if the container associated with the resource isn't present in the bookeeping.\n+       */\n       if (container != null) {\n         log.info(\"Stopping Container ID: {} on host: {}\", resource.getContainerId(), resource.getHost());\n         this.nmClientAsync.stopContainerAsync(container.getId(), container.getNodeId());\n+      } else {\n+        YarnContainer yarnContainer = state.runningProcessors.get(resource.getContainerId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzM2NjQy", "url": "https://github.com/apache/samza/pull/1450#pullrequestreview-547736642", "createdAt": "2020-12-09T00:08:05Z", "commit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDowODowNVrOIB8FhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyMDo0MFrOIB8YjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwMzk0MQ==", "bodyText": "nit: add changed \"JC metadata changed should be true\"", "url": "https://github.com/apache/samza/pull/1450#discussion_r538903941", "createdAt": "2020-12-09T00:08:05Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinator.java", "diffHunk": "@@ -192,4 +196,38 @@ public void testToArgs() {\n     assertEquals(expected.size(), actual.size());\n     assertTrue(actual.containsAll(expected));\n   }\n+\n+  @Test\n+  public void testGenerateAndUpdateJobCoordinatorMetadata() {\n+    Config jobConfig = new MapConfig(configMap);\n+    when(CoordinatorStreamUtil.readConfigFromCoordinatorStream(anyObject())).thenReturn(jobConfig);\n+    ClusterBasedJobCoordinator clusterBasedJobCoordinator =\n+        spy(ClusterBasedJobCoordinatorRunner.createFromMetadataStore(jobConfig));\n+\n+    JobCoordinatorMetadata previousMetadata = mock(JobCoordinatorMetadata.class);\n+    JobCoordinatorMetadata newMetadata = mock(JobCoordinatorMetadata.class);\n+    JobCoordinatorMetadataManager jobCoordinatorMetadataManager = mock(JobCoordinatorMetadataManager.class);\n+    JobModel mockJobModel = mock(JobModel.class);\n+\n+    when(jobCoordinatorMetadataManager.readJobCoordinatorMetadata()).thenReturn(previousMetadata);\n+    when(jobCoordinatorMetadataManager.generateJobCoordinatorMetadata(any(), any())).thenReturn(newMetadata);\n+    when(jobCoordinatorMetadataManager.checkForMetadataChanges(newMetadata, previousMetadata)).thenReturn(false);\n+    when(clusterBasedJobCoordinator.createJobCoordinatorMetadataManager()).thenReturn(jobCoordinatorMetadataManager);\n+\n+    /*\n+     * Verify if there are no changes to metadata, the metadata changed flag remains false and no interactions\n+     * with job coordinator metadata manager\n+     */\n+    clusterBasedJobCoordinator.generateAndUpdateJobCoordinatorMetadata(mockJobModel);\n+    assertFalse(\"JC metadata should remain unchanged\", clusterBasedJobCoordinator.isMetadataChangedAcrossAttempts());\n+    verify(jobCoordinatorMetadataManager, times(0)).writeJobCoordinatorMetadata(any());\n+\n+    /*\n+     * Verify if there are changes to metadata, we persist the new metadata & update the metadata changed flag\n+     */\n+    when(jobCoordinatorMetadataManager.checkForMetadataChanges(newMetadata, previousMetadata)).thenReturn(true);\n+    clusterBasedJobCoordinator.generateAndUpdateJobCoordinatorMetadata(mockJobModel);\n+    assertTrue(\"JC metadata should be true\", clusterBasedJobCoordinator.isMetadataChangedAcrossAttempts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwNTkyMg==", "bodyText": "should we also check if the ClusterResourceManager.stopStreamProcessor was invoked and with the correct SamzaResource?", "url": "https://github.com/apache/samza/pull/1450#discussion_r538905922", "createdAt": "2020-12-09T00:13:11Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerProcessManager.java", "diffHunk": "@@ -272,10 +273,60 @@ public void run() {\n \n     // Verify only 1 was requested with allocator\n     assertEquals(1, allocator.requestedContainers);\n+    assertTrue(\"Ensure no processors were forcefully restarted\", callback.resourceStatuses.isEmpty());\n \n     cpm.stop();\n   }\n \n+  @Test\n+  public void testOnInitToForceRestartAMHighAvailability() throws Exception {\n+    Map<String, String> configMap = new HashMap<>(configVals);\n+    configMap.put(JobConfig.YARN_AM_HIGH_AVAILABILITY_ENABLED, \"true\");\n+    Config conf = new MapConfig(configMap);\n+\n+    SamzaApplicationState state = new SamzaApplicationState(getJobModelManager(2));\n+    state.runningProcessors.put(\"0\", new SamzaResource(1, 1024, \"host\", \"0\"));\n+\n+    MockClusterResourceManagerCallback callback = new MockClusterResourceManagerCallback();\n+    ClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n+    ClusterManagerConfig clusterManagerConfig = spy(new ClusterManagerConfig(conf));\n+    ContainerManager containerManager =\n+        buildContainerManager(containerPlacementMetadataStore, state, clusterResourceManager,\n+            clusterManagerConfig.getHostAffinityEnabled(), false);\n+\n+    ContainerProcessManager cpm =\n+        buildContainerProcessManager(clusterManagerConfig, state, clusterResourceManager, Optional.empty(), true);\n+\n+    MockContainerAllocatorWithoutHostAffinity allocator = new MockContainerAllocatorWithoutHostAffinity(\n+        clusterResourceManager,\n+        conf,\n+        state,\n+        containerManager);\n+\n+    getPrivateFieldFromCpm(\"containerAllocator\", cpm).set(cpm, allocator);\n+    CountDownLatch latch = new CountDownLatch(1);\n+    getPrivateFieldFromCpm(\"allocatorThread\", cpm).set(cpm, new Thread() {\n+      public void run() {\n+        isRunning = true;\n+        latch.countDown();\n+      }\n+    });\n+\n+    cpm.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwODgxMg==", "bodyText": "after amClient.releaseAssignedContainer(yarnContainer.id()); is done, what do we get the call back as?\nbecause we should use that call back to restart the container right (as earlier we allocated resources only for processors not runnning in prev attempt).", "url": "https://github.com/apache/samza/pull/1450#discussion_r538908812", "createdAt": "2020-12-09T00:20:40Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -331,9 +332,24 @@ public void launchStreamProcessor(SamzaResource resource, CommandBuilder builder\n   public void stopStreamProcessor(SamzaResource resource) {\n     synchronized (lock) {\n       Container container = allocatedResources.get(resource);\n+      /*\n+       * 1. Stop the container through NMClient if the container was instantiated as part of NMClient lifecycle.\n+       * 2. Stop the container through AMClient by release the assigned container if the container was from the previous\n+       *    attempt and managed by the AM due to AM-HA\n+       * 3. Ignore the request if the container associated with the resource isn't present in the bookeeping.\n+       */\n       if (container != null) {\n         log.info(\"Stopping Container ID: {} on host: {}\", resource.getContainerId(), resource.getHost());\n         this.nmClientAsync.stopContainerAsync(container.getId(), container.getNodeId());\n+      } else {\n+        YarnContainer yarnContainer = state.runningProcessors.get(resource.getContainerId());\n+        if (yarnContainer != null) {\n+          log.info(\"Stopping container from previous attempt with Container ID: {} on host: {}\",\n+              resource.getContainerId(), resource.getHost());\n+          amClient.releaseAssignedContainer(yarnContainer.id());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9563951ab05542efa3770a15035859bdbcb34ff3", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/9563951ab05542efa3770a15035859bdbcb34ff3", "committedDate": "2020-12-09T01:38:12Z", "message": "Address Manasa's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzcyOTc1", "url": "https://github.com/apache/samza/pull/1450#pullrequestreview-547772975", "createdAt": "2020-12-09T01:43:01Z", "commit": {"oid": "9563951ab05542efa3770a15035859bdbcb34ff3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTo0MzowMVrOIB-UOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTo0NzozM1rOIB-avQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0MDQ3NA==", "bodyText": "what if startpoint is enabled and metadata has changed? we just ignore? as in for AM-HA with metadata changes we dont create startpoint manager? if we are planning another PR for this then lets leave a comment saying tbd.\nsorry missed this in the first pass.", "url": "https://github.com/apache/samza/pull/1450#discussion_r538940474", "createdAt": "2020-12-09T01:43:01Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -260,8 +267,9 @@ public void run() {\n       MetadataResourceUtil metadataResourceUtil = new MetadataResourceUtil(jobModel, this.metrics, config);\n       metadataResourceUtil.createResources();\n \n-      // fan out the startpoints if startpoints is enabled\n-      if (new JobConfig(config).getStartpointEnabled()) {\n+      // fan out the startpoints if startpoints is enabled and if the metadata changed across attempts.\n+      // the metadata changed should be false and only get evaluated if job coordinator high availability is enabled.\n+      if (new JobConfig(config).getStartpointEnabled() && !metadataChangedAcrossAttempts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9563951ab05542efa3770a15035859bdbcb34ff3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0MTIyMg==", "bodyText": "thanks for clarifying", "url": "https://github.com/apache/samza/pull/1450#discussion_r538941222", "createdAt": "2020-12-09T01:45:13Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerProcessManager.java", "diffHunk": "@@ -248,16 +253,23 @@ public void start() {\n     // Request initial set of containers\n     LocalityModel localityModel = localityManager.readLocality();\n     Map<String, String> processorToHost = new HashMap<>();\n-    state.jobModelManager.jobModel().getContainers().keySet().forEach((containerId) -> {\n-      String host = Optional.ofNullable(localityModel.getProcessorLocality(containerId))\n+    state.jobModelManager.jobModel().getContainers().keySet().forEach((processorId) -> {\n+      String host = Optional.ofNullable(localityModel.getProcessorLocality(processorId))\n           .map(ProcessorLocality::host)\n           .filter(StringUtils::isNotBlank)\n           .orElse(null);\n-      processorToHost.put(containerId, host);\n+      processorToHost.put(processorId, host);\n     });\n     if (jobConfig.getApplicationMasterHighAvailabilityEnabled()) {\n       // don't request resource for container that is already running\n-      state.runningProcessors.keySet().forEach(processorToHost::remove);\n+      state.runningProcessors.forEach((processorId, samzaResource) -> {\n+        LOG.info(\"Not requesting container for processorId: {} since its already running as containerId: {}\",\n+            processorId, samzaResource.getContainerId());\n+        processorToHost.remove(processorId);\n+        if (restartContainers) {\n+          clusterResourceManager.stopStreamProcessor(samzaResource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MTY5Ng=="}, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0MjE0MQ==", "bodyText": "awesome! thanks for telling me.", "url": "https://github.com/apache/samza/pull/1450#discussion_r538942141", "createdAt": "2020-12-09T01:47:33Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -331,9 +332,24 @@ public void launchStreamProcessor(SamzaResource resource, CommandBuilder builder\n   public void stopStreamProcessor(SamzaResource resource) {\n     synchronized (lock) {\n       Container container = allocatedResources.get(resource);\n+      /*\n+       * 1. Stop the container through NMClient if the container was instantiated as part of NMClient lifecycle.\n+       * 2. Stop the container through AMClient by release the assigned container if the container was from the previous\n+       *    attempt and managed by the AM due to AM-HA\n+       * 3. Ignore the request if the container associated with the resource isn't present in the bookeeping.\n+       */\n       if (container != null) {\n         log.info(\"Stopping Container ID: {} on host: {}\", resource.getContainerId(), resource.getHost());\n         this.nmClientAsync.stopContainerAsync(container.getId(), container.getNodeId());\n+      } else {\n+        YarnContainer yarnContainer = state.runningProcessors.get(resource.getContainerId());\n+        if (yarnContainer != null) {\n+          log.info(\"Stopping container from previous attempt with Container ID: {} on host: {}\",\n+              resource.getContainerId(), resource.getHost());\n+          amClient.releaseAssignedContainer(yarnContainer.id());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwODgxMg=="}, "originalCommit": {"oid": "24e7af5ef5f74b4c009b7ca1200e88d1da567d1f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f78d37a80f8d39b9e299dcfd14391ba53d9746", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/d1f78d37a80f8d39b9e299dcfd14391ba53d9746", "committedDate": "2020-12-09T03:10:54Z", "message": "Fix startpoint fanout condition bug and add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzUwNjE2", "url": "https://github.com/apache/samza/pull/1450#pullrequestreview-548350616", "createdAt": "2020-12-09T16:13:55Z", "commit": {"oid": "d1f78d37a80f8d39b9e299dcfd14391ba53d9746"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxMzo1NVrOICc7eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxMzo1NVrOICc7eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0MjA0MA==", "bodyText": "so if metadata has changed then JC will stop all running processors right. additionally if there are startpoints to fanout then they are assigned to respective tasks. I am inferring that since the fanouts for task are fetched before processor entering runloop, the prev-running-now-restarted processors will pick them up. Am i correct? just trying to ensure we dont lose the fanouts for tasks that are part of already running processors.\nminor: if AM HA is enabled: fanout ONLY if  startpoint enabled && metadata changed", "url": "https://github.com/apache/samza/pull/1450#discussion_r539442040", "createdAt": "2020-12-09T16:13:55Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -267,9 +267,12 @@ public void run() {\n       MetadataResourceUtil metadataResourceUtil = new MetadataResourceUtil(jobModel, this.metrics, config);\n       metadataResourceUtil.createResources();\n \n-      // fan out the startpoints if startpoints is enabled and if the metadata changed across attempts.\n-      // the metadata changed should be false and only get evaluated if job coordinator high availability is enabled.\n-      if (new JobConfig(config).getStartpointEnabled() && !metadataChangedAcrossAttempts) {\n+      /*\n+       * We fan out startpoint if and only if\n+       *  1. Startpoint is enabled in configuration\n+       *  2. If AM HA is enabled, fan out only if metadata changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1f78d37a80f8d39b9e299dcfd14391ba53d9746"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f27c6c3d30099def7982ab88479e3852b770ce09", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/f27c6c3d30099def7982ab88479e3852b770ce09", "committedDate": "2020-12-09T17:00:00Z", "message": "Fix javadocs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4551, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}