{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTYyMTkx", "number": 1403, "title": "SAMZA-2569: Add features into StreamAppender", "bodyText": "Feature:\n\nMake StreamAppender extend-friendly.\u00a0\nAdd metrics reporter into StreamAppender to report collected local metrics.\nAdd log message count and bytes metrics in StreamAppender\n\nChanges:\n\nRewrite StreamAppender to expose private members/functions as protected and split some heavy functions into small trunks.\nAdd metrics reporter to report the metrics we collect locally\nAdd those new metrics into StreamAppender\n\nTests:\n\nUnit tests pass for updated StreamAppender\n./gradlew build.\n\nAPI Changes: two new metrics will be introduced in StreamAppender and will get reported if metrics reporter is set. This applies to application that uses StreamAppender in log4j2.xml\nUpgrade/usage instructions:\n\nIf users write new appender or extends existing StreamAppender for own use cases, feel free to update their appender code to extend new StreamAppender to make code neater.\nIf users want to report these collected metrics through metrics reporter, add metrics reporter related configs (See MetricsConfig.java for more details)", "createdAt": "2020-07-25T04:09:02Z", "url": "https://github.com/apache/samza/pull/1403", "merged": true, "mergeCommit": {"oid": "7c4b31eaf197eac6c98107710fbba311b9536fe2"}, "closed": true, "closedAt": "2020-08-05T18:46:19Z", "author": {"login": "byjiang1996"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5E8e9gFqTQ1NTkxNDQ2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7-r46AFqTQ2MTg3NzM3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTE0NDYy", "url": "https://github.com/apache/samza/pull/1403#pullrequestreview-455914462", "createdAt": "2020-07-27T15:53:39Z", "commit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo1Mzo0MFrOG3oxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowMjoyNlrOG3rcbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5Mjg4Nw==", "bodyText": "Im just wondering if there is a better way than making all private variables protected?\nMaybe have another constructor which sets all these variables\nand a getter for the variables you intend to use in the extended class?", "url": "https://github.com/apache/samza/pull/1403#discussion_r460992887", "createdAt": "2020-07-27T15:53:40Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -67,48 +69,52 @@\n import org.apache.samza.system.SystemStream;\n import org.apache.samza.util.ExponentialSleepStrategy;\n import org.apache.samza.util.HttpUtil;\n+import org.apache.samza.util.MetricsReporterLoader;\n import org.apache.samza.util.ReflectionUtil;\n \n @Plugin(name = \"Stream\", category = \"Core\", elementType = \"appender\", printObject = true)\n public class StreamAppender extends AbstractAppender {\n \n-  private static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n-  private static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n-  private static final String SOURCE = \"log4j-log\";\n+  protected static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n+  protected static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n+  protected static final String SOURCE = \"log4j-log\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjY0Mg==", "bodyText": "can the appenderName be anything other than the class name - here StreamAppender?\nWould getClass() suffice here instead of another variable?", "url": "https://github.com/apache/samza/pull/1403#discussion_r461022642", "createdAt": "2020-07-27T16:40:28Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -214,7 +220,7 @@ public void append(LogEvent event) {\n           metrics.bufferFillPct.set(Math.round(100f * logQueue.size() / DEFAULT_QUEUE_SIZE));\n         }\n       } catch (Exception e) {\n-        System.err.println(\"[StreamAppender] Error sending log message:\");\n+        System.err.println(String.format(\"[%s] Error sending log message:\", appenderName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjAzMw==", "bodyText": "just curious why this is being hardcoded..", "url": "https://github.com/apache/samza/pull/1403#discussion_r461036033", "createdAt": "2020-07-27T17:01:29Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/test/java/org/apache/samza/logging/log4j2/TestStreamAppender.java", "diffHunk": "@@ -68,13 +68,12 @@ public void testDefaultSerde() {\n   @Test\n   public void testNonDefaultSerde() {\n     System.setProperty(\"samza.container.name\", \"samza-container-1\");\n-    String streamName = StreamAppender.getStreamName(\"log4jTest\", \"1\");\n     Map<String, String> map = new HashMap<String, String>();\n     map.put(\"job.name\", \"log4jTest\");\n     map.put(\"job.id\", \"1\");\n     map.put(\"serializers.registry.log4j-string.class\", LoggingEventStringSerdeFactory.class.getCanonicalName());\n     map.put(\"systems.mock.samza.factory\", MockSystemFactory.class.getCanonicalName());\n-    map.put(\"systems.mock.streams.\" + streamName + \".samza.msg.serde\", \"log4j-string\");\n+    map.put(\"systems.mock.streams.__samza_log4jTest_1_logs.samza.msg.serde\", \"log4j-string\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjY1NQ==", "bodyText": "should we add a metric to count the number of logging errors?", "url": "https://github.com/apache/samza/pull/1403#discussion_r461036655", "createdAt": "2020-07-27T17:02:26Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -368,24 +389,24 @@ private void startTransferThread() {\n             // Preserve the interrupted status for the loop condition.\n             Thread.currentThread().interrupt();\n           } catch (Throwable t) {\n-            log.error(\"Error sending StreamAppender event to SystemProducer\", t);\n+            log.error(\"Error sending \" + appenderName +\" event to SystemProducer\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 220}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/0a1392cf23469d6ca634d290c40cdb10f25ecda6", "committedDate": "2020-07-25T04:07:29Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "e57bcb97648e578e42a7aaff22e984a244593c65", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/e57bcb97648e578e42a7aaff22e984a244593c65", "committedDate": "2020-07-28T00:34:09Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e57bcb97648e578e42a7aaff22e984a244593c65", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/e57bcb97648e578e42a7aaff22e984a244593c65", "committedDate": "2020-07-28T00:34:09Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "acaeb22d2f1697064f03de4434327de50696ed59", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/acaeb22d2f1697064f03de4434327de50696ed59", "committedDate": "2020-07-29T18:32:00Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acaeb22d2f1697064f03de4434327de50696ed59", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/acaeb22d2f1697064f03de4434327de50696ed59", "committedDate": "2020-07-29T18:32:00Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "80ec86bfb1669ee6716ef609a1371b1a7343789f", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/80ec86bfb1669ee6716ef609a1371b1a7343789f", "committedDate": "2020-07-29T23:56:56Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80ec86bfb1669ee6716ef609a1371b1a7343789f", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/80ec86bfb1669ee6716ef609a1371b1a7343789f", "committedDate": "2020-07-29T23:56:56Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6", "committedDate": "2020-07-30T00:03:26Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4OTAwNjkx", "url": "https://github.com/apache/samza/pull/1403#pullrequestreview-458900691", "createdAt": "2020-07-31T03:52:38Z", "commit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzo1MjozOFrOG57LDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTowMDoyNlrOG58CdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5MTUwMg==", "bodyText": "can we organize by modifier for readability? to see everything in one place that might be modified by a subclass", "url": "https://github.com/apache/samza/pull/1403#discussion_r463391502", "createdAt": "2020-07-31T03:52:38Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);\n   protected StreamAppenderMetrics metrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDAzOQ==", "bodyText": "We're using the same registry; does the comment from before still apply?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463404039", "createdAt": "2020-07-31T04:53:33Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDExOA==", "bodyText": "let's keep mention of things like \"inGraphs\" out of OSS", "url": "https://github.com/apache/samza/pull/1403#discussion_r463404118", "createdAt": "2020-07-31T04:53:54Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+    // Take this.getClass().getName() as the name to make it extend-friendly\n+    metrics = getMetrics(metricsRegistry);\n+    // Register metrics into metrics reporters so that they are able to be reported to other systems: e.g. inGraphs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTI2NA==", "bodyText": "log-messages-bytes-sent?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463405264", "createdAt": "2020-07-31T04:58:49Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "diffHunk": "@@ -34,10 +34,22 @@\n   /** The number of log messages dropped e.g. because of buffer overflow. Does not include recursive calls. */\n   public final Counter logMessagesDropped;\n \n+  /** The size of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesBytes;\n+\n+  /** The number of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesCount;\n+\n+  /** The number of log messages cannot be sent out due to errors e.g. serialization errors, system producer send errors. */\n+  public final Counter logMessagesErrors;\n+\n   public StreamAppenderMetrics(String prefix, MetricsRegistry registry) {\n-    super(prefix, registry);\n+    super(prefix + \"-\", registry);\n     bufferFillPct = newGauge(\"buffer-fill-percent\", 0);\n     recursiveCalls = newCounter(\"recursive-calls\");\n     logMessagesDropped = newCounter(\"log-messages-dropped\");\n+    logMessagesBytes = newCounter(\"log-messages-bytes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTI5Nw==", "bodyText": "log-messages-sent?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463405297", "createdAt": "2020-07-31T04:59:01Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "diffHunk": "@@ -34,10 +34,22 @@\n   /** The number of log messages dropped e.g. because of buffer overflow. Does not include recursive calls. */\n   public final Counter logMessagesDropped;\n \n+  /** The size of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesBytes;\n+\n+  /** The number of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesCount;\n+\n+  /** The number of log messages cannot be sent out due to errors e.g. serialization errors, system producer send errors. */\n+  public final Counter logMessagesErrors;\n+\n   public StreamAppenderMetrics(String prefix, MetricsRegistry registry) {\n-    super(prefix, registry);\n+    super(prefix + \"-\", registry);\n     bufferFillPct = newGauge(\"buffer-fill-percent\", 0);\n     recursiveCalls = newCounter(\"recursive-calls\");\n     logMessagesDropped = newCounter(\"log-messages-dropped\");\n+    logMessagesBytes = newCounter(\"log-messages-bytes\");\n+    logMessagesCount = newCounter(\"log-messages-count\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTY4NQ==", "bodyText": "why does this need to be protected? can't subclasses have their own logger?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463405685", "createdAt": "2020-07-31T05:00:26Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6", "committedDate": "2020-07-30T00:03:26Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "59d257eef738d5b79adfb3b82d9296c41df4f783", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/59d257eef738d5b79adfb3b82d9296c41df4f783", "committedDate": "2020-08-04T02:55:24Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59d257eef738d5b79adfb3b82d9296c41df4f783", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/59d257eef738d5b79adfb3b82d9296c41df4f783", "committedDate": "2020-08-04T02:55:24Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "dd0f540740b97a245c00a730b61bf252080c3d27", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/dd0f540740b97a245c00a730b61bf252080c3d27", "committedDate": "2020-08-05T02:27:38Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94cda1abc23b85f84ab53b20efdad5ab869be05c", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/94cda1abc23b85f84ab53b20efdad5ab869be05c", "committedDate": "2020-08-05T02:59:57Z", "message": "Make StreamAppender extend-friendly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "548a8f6f601312bf518bc522b3f8ea983cbaba83", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/548a8f6f601312bf518bc522b3f8ea983cbaba83", "committedDate": "2020-08-05T03:00:01Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd0f540740b97a245c00a730b61bf252080c3d27", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/dd0f540740b97a245c00a730b61bf252080c3d27", "committedDate": "2020-08-05T02:27:38Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}, "afterCommit": {"oid": "548a8f6f601312bf518bc522b3f8ea983cbaba83", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/548a8f6f601312bf518bc522b3f8ea983cbaba83", "committedDate": "2020-08-05T03:00:01Z", "message": "Add logBytes and logCount metrics, and metrics reporter into StreamAppender"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODcwMzg1", "url": "https://github.com/apache/samza/pull/1403#pullrequestreview-461870385", "createdAt": "2020-08-05T17:20:13Z", "commit": {"oid": "548a8f6f601312bf518bc522b3f8ea983cbaba83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODc3Mzcy", "url": "https://github.com/apache/samza/pull/1403#pullrequestreview-461877372", "createdAt": "2020-08-05T17:29:41Z", "commit": {"oid": "548a8f6f601312bf518bc522b3f8ea983cbaba83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}