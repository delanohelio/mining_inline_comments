{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODM1MDkw", "number": 1301, "title": "Samza-2478: Add new metrics to track key and value size of records written to RocksDb", "bodyText": "Feature: Add new metrics to track key and value size of records written to RocksDb.\nChanges: Add three new metrics recordKeySizeBytes , recordValueSizeBytes and maxRecordKeySizeBytes in SerializedKeyValueStoreMetrics class to record the percentiles and maximum key and value sizes written to RocksDB.\nTests: Added a unit test call TestKeyValueSizeHistogramMetric to verify that those metrics are written to SamzaHistogram correctly and can be access by MetricVisitor.  Also verified that those metrics can be displayed correctly by deploying a Samza job in a private cluster and drawing those metrics into graphs.\nAPI Changes: None\nUpgrade instructions:\nUsage instructions: Users can monitor P50, P90, P99, P99.9 percentiles as well as the maximum value of key and value sizes written to RocksDB via MetricReporter. Please refer to the metrics reference sheet for details on the metric.", "createdAt": "2020-03-04T19:58:50Z", "url": "https://github.com/apache/samza/pull/1301", "merged": true, "mergeCommit": {"oid": "170be042563bd59168a89f630569b1de69b50570"}, "closed": true, "closedAt": "2020-03-18T00:06:41Z", "author": {"login": "xiefan46"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKMWgTAH2gAyMzgzODM1MDkwOjdlODdkMjE1Y2M1MWFiYmM5Y2U2OTg0YjJlNmQzOTlhY2Y2ZDAyNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOrlIlAH2gAyMzgzODM1MDkwOmYxMTNhMDM1ZWUxNWMyMGZhMmFjNzA5ZmY1ZjE4ZGI4NzkyMzU5ZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e87d215cc51abbc9ce6984b2e6d399acf6d025f", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/7e87d215cc51abbc9ce6984b2e6d399acf6d025f", "committedDate": "2020-03-04T01:08:46Z", "message": "Add record key value size histogram metric"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6478824bedcf7608e48fee49b5c5e91c3d5b676d", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/6478824bedcf7608e48fee49b5c5e91c3d5b676d", "committedDate": "2020-03-04T19:49:29Z", "message": "coding done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/76d216eb1e257b6c2779e26af716f96ff35fdff7", "committedDate": "2020-03-04T19:56:37Z", "message": "delete unused function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDg4MjA3", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-369088207", "createdAt": "2020-03-04T20:11:12Z", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMToxM1rOFx8BFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMToxM1rOFx8BFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNzg2Mg==", "bodyText": "Try and remove/avoid such changes.", "url": "https://github.com/apache/samza/pull/1301#discussion_r387907862", "createdAt": "2020-03-04T20:11:13Z", "author": {"login": "rmatharu"}, "path": "samza-test/src/test/scala/org/apache/samza/storage/kv/TestKeyValueStores.scala", "diffHunk": "@@ -555,6 +555,7 @@ class TestKeyValueStores(typeOfStore: String, storeConfig: String) {\n \n     store.flush()\n   }\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDg4NTE1", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-369088515", "createdAt": "2020-03-04T20:11:42Z", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMTo0MlrOFx8CHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMTo0MlrOFx8CHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODEyNA==", "bodyText": "Maybe add comments to describe what this test is doing?", "url": "https://github.com/apache/samza/pull/1301#discussion_r387908124", "createdAt": "2020-03-04T20:11:42Z", "author": {"login": "rmatharu"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistry;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.SamzaHistogram;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  @Test\n+  public void testHistogramMetric() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDk0MzM3", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-369094337", "createdAt": "2020-03-04T20:21:16Z", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMToxNlrOFx8TdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMToxNlrOFx8TdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjU2NA==", "bodyText": "Maybe add javadocs to explain how this works, the histogram stores counts for each percentile range?\nand the count for each range is emitted as a gauge?", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912564", "createdAt": "2020-03-04T20:21:16Z", "author": {"login": "rmatharu"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "diffHunk": "@@ -36,6 +35,10 @@ class SerializedKeyValueStoreMetrics(\n   val bytesSerialized = newCounter(\"bytes-serialized\")\n   val bytesDeserialized = newCounter(\"bytes-deserialized\")\n   val maxRecordSizeBytes = newGauge(\"max-record-size-bytes\", 0L)\n+  val record_key_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)\n+  val record_value_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)\n+  val recordKeySizeBytes = newHistogram(\"key-size-bytes-histogram\",record_key_size_percentiles )\n+  val recordValueSizeBytes = newHistogram(\"value-size-bytes-histogram\", record_value_size_percentiles)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDk0NTc5", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-369094579", "createdAt": "2020-03-04T20:21:40Z", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMTo0MFrOFx8UKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMTo0MFrOFx8UKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjc0Nw==", "bodyText": "javadoc?", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912747", "createdAt": "2020-03-04T20:21:40Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -65,4 +68,8 @@ public T getValue() {\n   public Timer newTimer(String name) {\n     return registry.newTimer(groupName, (prefix + name).toLowerCase());\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDk0ODcw", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-369094870", "createdAt": "2020-03-04T20:22:08Z", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMjowOFrOFx8VGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMjowOFrOFx8VGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjk4Ng==", "bodyText": "Is this only for testing?\nIn that case you can make it package-private and use @VisibleForTesting flag.", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912986", "createdAt": "2020-03-04T20:22:08Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java", "diffHunk": "@@ -60,6 +60,11 @@ public void updateGaugeValues(double percentile) {\n     gauges.get(percentile).set(values.getValue(percentile / 100));\n   }\n \n+  //for debug\n+  public Map<Double, Gauge<Double>> getGauges() {\n+    return gauges;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDk1MzAw", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-369095300", "createdAt": "2020-03-04T20:22:53Z", "commit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "committedDate": "2020-03-05T01:47:42Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ccc05b4cf4d31ffb3f9f0cab9e4c41769c5798", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/a8ccc05b4cf4d31ffb3f9f0cab9e4c41769c5798", "committedDate": "2020-03-05T01:56:18Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad2ccf1a63eb38e596f4fced605eab031db660c", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/aad2ccf1a63eb38e596f4fced605eab031db660c", "committedDate": "2020-03-05T01:57:55Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ced5e12e0f7c971ae14216964dfad71e6456b8", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/36ced5e12e0f7c971ae14216964dfad71e6456b8", "committedDate": "2020-03-05T02:07:53Z", "message": "reset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff3df497f8b8b1f127f1498176ff28005c9d0e5", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/eff3df497f8b8b1f127f1498176ff28005c9d0e5", "committedDate": "2020-03-05T22:29:04Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f112848adf81ae5247a1a0d30d893686075251df", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/f112848adf81ae5247a1a0d30d893686075251df", "committedDate": "2020-03-05T22:46:17Z", "message": "Add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9870dd24678df5a4f9360062c7f52046525736c1", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/9870dd24678df5a4f9360062c7f52046525736c1", "committedDate": "2020-03-06T00:48:27Z", "message": "check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "committedDate": "2020-03-06T01:17:03Z", "message": "Merge branch 'master' into new_kv_metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDk1NTA2", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-370095506", "createdAt": "2020-03-06T05:52:32Z", "commit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTo1MjozMlrOFyt2ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNjo1NjoxNVrOFyuwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNDM0Nw==", "bodyText": "Please revert this change.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388724347", "createdAt": "2020-03-06T05:52:32Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -1,24 +1,27 @@\n /*\n-* Licensed to the Apache Software Foundation (ASF) under one\n-* or more contributor license agreements.  See the NOTICE file\n-* distributed with this work for additional information\n-* regarding copyright ownership.  The ASF licenses this file\n-* to you under the Apache License, Version 2.0 (the\n-* \"License\"); you may not use this file except in compliance\n-* with the License.  You may obtain a copy of the License at\n-*\n-*   http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNjgxMg==", "bodyText": "any reason behind the choice of the percentiles? Especially 10th percentile?", "url": "https://github.com/apache/samza/pull/1301#discussion_r388726812", "createdAt": "2020-03-06T06:04:47Z", "author": {"login": "mynameborat"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStoreMetrics.scala", "diffHunk": "@@ -36,6 +35,25 @@ class SerializedKeyValueStoreMetrics(\n   val bytesSerialized = newCounter(\"bytes-serialized\")\n   val bytesDeserialized = newCounter(\"bytes-deserialized\")\n   val maxRecordSizeBytes = newGauge(\"max-record-size-bytes\", 0L)\n+  val record_key_size_percentiles = java.util.Arrays.asList[java.lang.Double](10D, 50D, 90D, 99D)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczNzMxOA==", "bodyText": "Can you explain what we achieve here by shuffling keys and values? They are already random during generation and it is not clear what is this additional shuffle for.\nSimple and crisp tests are more maintainable.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388737318", "createdAt": "2020-03-06T06:49:03Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczODczNA==", "bodyText": "I'd prefer to use explicit name checks here since the goal of the test is to check for key and value size histogram. We don't want this test to fail or pass for incorrect reasons when we add a new histogram for store whose name happens to contain size-bytes-histogram", "url": "https://github.com/apache/samza/pull/1301#discussion_r388738734", "createdAt": "2020-03-06T06:54:24Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (name.contains(\"size-bytes-histogram\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczOTI0NQ==", "bodyText": "With our builds already taking too long, do we know how long this test runs? Can we do away with something lower instead of 1000? same for the max length inside random string generation.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388739245", "createdAt": "2020-03-06T06:56:15Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTUyNDQx", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-370152441", "createdAt": "2020-03-06T08:31:12Z", "commit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozMToxMlrOFywo8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODozMToxMlrOFywo8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MDAzMg==", "bodyText": "Is there a way we can roll together recording maximum record size into the histogram tracking? When I implemented the metric for recording max I had considered modifying histogram to record maximum in addition to percentiles, but decided against it since the memory footprint of the histogram was unjustifiable at the time. Now that we'd like those metrics anyway, maybe it is justifiable now.", "url": "https://github.com/apache/samza/pull/1301#discussion_r388770032", "createdAt": "2020-03-06T08:31:12Z", "author": {"login": "bkonold"}, "path": "samza-kv/src/main/scala/org/apache/samza/storage/kv/SerializedKeyValueStore.scala", "diffHunk": "@@ -62,7 +62,10 @@ class SerializedKeyValueStore[K, V](\n     val keyBytes = toBytesOrNull(key, keySerde)\n     val valBytes = toBytesOrNull(value, msgSerde)\n     store.put(keyBytes, valBytes)\n+    val keySizeBytes = if (keyBytes == null) 0 else keyBytes.length\n     val valSizeBytes = if (valBytes == null) 0 else valBytes.length\n+    metrics.recordKeySizeBytes.update(keySizeBytes)\n+    metrics.recordValueSizeBytes.update(valSizeBytes)\n     updatePutMetrics(1, valSizeBytes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "committedDate": "2020-03-06T19:37:28Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd79504481812ea0d1969f3ae6576b96d7c611b7", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/fd79504481812ea0d1969f3ae6576b96d7c611b7", "committedDate": "2020-03-06T19:45:52Z", "message": "license shift left"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16899e359026208e49f1dab6e48ac6d488eb633c", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/16899e359026208e49f1dab6e48ac6d488eb633c", "committedDate": "2020-03-08T00:05:30Z", "message": "check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d5f3a144dd5586725a725c0a814d1985d875fff", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/6d5f3a144dd5586725a725c0a814d1985d875fff", "committedDate": "2020-03-08T22:06:50Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8b7d27d8ceae22a7b0ea8505819b464dc769c0", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/bf8b7d27d8ceae22a7b0ea8505819b464dc769c0", "committedDate": "2020-03-09T05:50:36Z", "message": "Use RocksDbKeyValueStore instead of InMemoryKeyValueStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1596e40860fddf6e49468015e56904b80257451b", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/1596e40860fddf6e49468015e56904b80257451b", "committedDate": "2020-03-09T16:53:23Z", "message": "style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa50c72dbda5424966b2b4ddfe4a6d012ade649a", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/fa50c72dbda5424966b2b4ddfe4a6d012ade649a", "committedDate": "2020-03-12T23:43:54Z", "message": "update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c02b920bc20a6c9a3d639c99e9608fc79f066f9", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/5c02b920bc20a6c9a3d639c99e9608fc79f066f9", "committedDate": "2020-03-12T23:44:40Z", "message": "modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d047b89a1e25b018ed77b25509664c2aa1dc47f4", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/d047b89a1e25b018ed77b25509664c2aa1dc47f4", "committedDate": "2020-03-13T00:17:15Z", "message": "track the maximum key sizes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTkxNDIz", "url": "https://github.com/apache/samza/pull/1301#pullrequestreview-376191423", "createdAt": "2020-03-17T16:17:50Z", "commit": {"oid": "d047b89a1e25b018ed77b25509664c2aa1dc47f4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNzo1MVrOF3jvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxODozM1rOF3jxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMTU2Mw==", "bodyText": "nit: remove", "url": "https://github.com/apache/samza/pull/1301#discussion_r393801563", "createdAt": "2020-03-17T16:17:51Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.config.Config;\n+import org.apache.samza.config.MapConfig;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.rocksdb.FlushOptions;\n+import org.rocksdb.Options;\n+import org.rocksdb.WriteOptions;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"teststore\";\n+  private static String keyPrefix = \"key-size-bytes-histogram\";\n+  private static String valuePrefix = \"value-size-bytes-histogram\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+\n+    Config config = new MapConfig();\n+    Options options = new Options();\n+    options.setCreateIfMissing(true);\n+\n+    File dbDir = new File(System.getProperty(\"java.io.tmpdir\") + \"/dbStore\" + System.currentTimeMillis());\n+    RocksDbKeyValueStore kvStore = new RocksDbKeyValueStore(dbDir, options, config, false, \"dbStore\",\n+        new WriteOptions(), new FlushOptions(), new KeyValueStoreMetrics(\"dbStore\", new MetricsRegistryMap()));\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 300; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    Set<String> names = new HashSet<>();\n+    for (Double p : serializedKeyValueStoreMetrics.record_key_size_percentiles()) {\n+      names.add(storeName + \"-\" + keyPrefix + \"_\" + p);\n+    }\n+\n+    for (Double p : serializedKeyValueStoreMetrics.record_value_size_percentiles()) {\n+      names.add(storeName + \"-\" + valuePrefix + \"_\" + p);\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (names.contains(name)) {\n+          //System.out.println(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d047b89a1e25b018ed77b25509664c2aa1dc47f4"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMjAxNQ==", "bodyText": "+1", "url": "https://github.com/apache/samza/pull/1301#discussion_r393802015", "createdAt": "2020-03-17T16:18:33Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -65,4 +68,8 @@ public T getValue() {\n   public Timer newTimer(String name) {\n     return registry.newTimer(groupName, (prefix + name).toLowerCase());\n   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjc0Nw=="}, "originalCommit": {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3364c916e7b583869d00578ff950ee4f8996dbe4", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/3364c916e7b583869d00578ff950ee4f8996dbe4", "committedDate": "2020-03-17T17:05:11Z", "message": "remove lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b97c1309f288b3c1a7aa178a5d4b1819e9cf7d92", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/b97c1309f288b3c1a7aa178a5d4b1819e9cf7d92", "committedDate": "2020-03-17T22:25:18Z", "message": "Add java doc in MetricGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f113a035ee15c20fa2ac709ff5f18db8792359e2", "author": {"user": {"login": "xiefan46", "name": "FAN XIE"}}, "url": "https://github.com/apache/samza/commit/f113a035ee15c20fa2ac709ff5f18db8792359e2", "committedDate": "2020-03-17T23:47:30Z", "message": "modify java doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4808, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}