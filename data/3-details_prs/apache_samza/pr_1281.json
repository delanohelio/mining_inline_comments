{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODkyMzAz", "number": 1281, "title": "SAMZA-2378: Container Placements support for Standby containers enabled jobs", "bodyText": "Design: SEP-22: Container Placements in Samza\nChanges: Following abilities are added as a part of this PR:\n\nAbility to issue container placement actions for standby enabled jobs on active & standby containers\nAbility to queue actions if there are any in-flight actions on active or its standby or vice-versa\nValidate placement actions when standby containers are enabled to ensure standby constraints (active container & standby container are not on the same host) are not violated\n\nTests:\nInteg test: End-to-end test for standby enabled job is added\nManual testing matrix: Container Placement Test Plan\nAPI Changes:\n\nThis PR introduces behavior changes when a container placement action is written to metastore and is read by JobCoordinator (JC), it will try to reserve resources for the request, if it gets the resources it attempts to stop the active container then attempts to start the container on the allocated resources.\nEach placement request is identified by a UUID which is generated and given to a client on issuing a control command\nResponses for each placement action can be queried by directly queueing meta-store by UUID\n\nUpgrade Instructions: None\nUsage Instructions: Instantiate ContainerPlacementMetadataStore to write Container placement messages to Metastore, query it by the UUID generated", "createdAt": "2020-02-18T23:44:01Z", "url": "https://github.com/apache/samza/pull/1281", "merged": true, "mergeCommit": {"oid": "d02216726e03695096b680f0f5bff9c0d6ca2e6c"}, "closed": true, "closedAt": "2020-02-28T22:37:45Z", "author": {"login": "Sanil15"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFqlXoAH2gAyMzc2ODkyMzAzOjUzOWZmZDMzNWY4MWJjMTdmYzVkY2I2Mjc0NjllMzUzMTBlMzA0Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcI2oksAH2gAyMzc2ODkyMzAzOjY4MGRlODYzOWU5MTk0NDQyMmYwMjUxODJjYjM5NGI4MzkyYTEzZmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428", "author": {"user": {"login": "Sanil15", "name": "Sanil Jain"}}, "url": "https://github.com/apache/samza/commit/539ffd335f81bc17fc5dcb627469e35310e30428", "committedDate": "2020-02-18T23:32:32Z", "message": "Container Placements support for Standby containers enabled jobs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzk2NDY0", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362396464", "createdAt": "2020-02-21T04:43:22Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MzoyMlrOFsrhdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MzoyMlrOFsrhdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NDc0MA==", "bodyText": "We should probably prioritize this sooner than later", "url": "https://github.com/apache/samza/pull/1281#discussion_r382394740", "createdAt": "2020-02-21T04:43:22Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -48,8 +48,7 @@\n  * ContainerManager encapsulates logic and state related to container placement actions like move, restarts for active container\n  * if issued externally.\n  *\n- * TODO SAMZA-2378: Container Placements for Standby containers enabled jobs\n- *      SAMZA-2379: Container Placements for job running in degraded state\n+ * TODO SAMZA-2379: Container Placements for job running in degraded state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzk2OTUy", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362396952", "createdAt": "2020-02-21T04:45:39Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0NTo0MFrOFsrjUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0NTo0MFrOFsrjUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NTIxOQ==", "bodyText": "Nit:\nCan the lines above\nif (hasActiveContainerPlacementAction(request.getProcessorId())) {\n\nString processorId = request.getProcessorId();\t      \n\nString processorId = request.getProcessorId();\n\nContainerPlacementMetadata actionMetaData = getPlacementActionMetadata(processorId).get();\t      \n\nbe rewritten to:\nOptional<ContainerPlacementMetadata> actionMetaData = getPlacementActionMetadata(processorId);\n\nif (actionMetaData.isPresent()) {\nuse actionMetaData.get()  everywhere after...", "url": "https://github.com/apache/samza/pull/1281#discussion_r382395219", "createdAt": "2020-02-21T04:45:40Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -136,7 +135,22 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n         LOG.info(\"Waiting for running container to shutdown due to existing ContainerPlacement action {}\", actionMetaData);\n         return false;\n       } else if (actionStatus == ContainerPlacementMetadata.ContainerStatus.STOPPED) {\n-        allocator.runStreamProcessor(request, preferredHost);\n+        // If the job has standby containers enabled, always check standby constraints before issuing a start on container", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDAyMjY1", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362402265", "createdAt": "2020-02-21T05:09:25Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowOToyNVrOFsr2QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowOToyNVrOFsr2QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDA2NA==", "bodyText": "Update failedStandbyAllocations metric?\nAlso it may be possible to expose a method on standby-container-manager to do the\nresourceRequestState.releaseUnstartableContainer();\nresourceRequestState.cancelResourceRequest(request);\ncontainerAllocator.requestResource();\nbecause it is done in  standby-container-manager as a part of\ncheckStandbyConstraintsAndRunStreamProcessor method", "url": "https://github.com/apache/samza/pull/1281#discussion_r382400064", "createdAt": "2020-02-21T05:09:25Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -136,7 +135,22 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n         LOG.info(\"Waiting for running container to shutdown due to existing ContainerPlacement action {}\", actionMetaData);\n         return false;\n       } else if (actionStatus == ContainerPlacementMetadata.ContainerStatus.STOPPED) {\n-        allocator.runStreamProcessor(request, preferredHost);\n+        // If the job has standby containers enabled, always check standby constraints before issuing a start on container\n+        // Note: Always check constraints against allocated resource, since preferred host can be ANY_HOST as well\n+        if (standbyContainerManager.isPresent() && !standbyContainerManager.get().checkStandbyConstraints(request.getProcessorId(), allocatedResource.getHost())) {\n+          LOG.info(\n+              \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n+              request.getProcessorId(), preferredHost, actionMetaData);\n+          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n+          resourceRequestState.cancelResourceRequest(request);\n+          // Fallback to source host since the new allocated resource does not meet standby constraints\n+          allocator.requestResource(processorId, actionMetaData.getSourceHost());\n+          markContainerPlacementActionFailed(actionMetaData,\n+              String.format(\"allocated resource %s does not meet standby constraints now, falling back to source host\", allocatedResource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDAyNjk3", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362402697", "createdAt": "2020-02-21T05:11:25Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNToxMToyNVrOFsr3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNToxMToyNVrOFsr3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDQyNQ==", "bodyText": "Status wasnt updated here?", "url": "https://github.com/apache/samza/pull/1281#discussion_r382400425", "createdAt": "2020-02-21T05:11:25Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -136,7 +135,22 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n         LOG.info(\"Waiting for running container to shutdown due to existing ContainerPlacement action {}\", actionMetaData);\n         return false;\n       } else if (actionStatus == ContainerPlacementMetadata.ContainerStatus.STOPPED) {\n-        allocator.runStreamProcessor(request, preferredHost);\n+        // If the job has standby containers enabled, always check standby constraints before issuing a start on container\n+        // Note: Always check constraints against allocated resource, since preferred host can be ANY_HOST as well\n+        if (standbyContainerManager.isPresent() && !standbyContainerManager.get().checkStandbyConstraints(request.getProcessorId(), allocatedResource.getHost())) {\n+          LOG.info(\n+              \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n+              request.getProcessorId(), preferredHost, actionMetaData);\n+          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n+          resourceRequestState.cancelResourceRequest(request);\n+          // Fallback to source host since the new allocated resource does not meet standby constraints\n+          allocator.requestResource(processorId, actionMetaData.getSourceHost());\n+          markContainerPlacementActionFailed(actionMetaData,\n+              String.format(\"allocated resource %s does not meet standby constraints now, falling back to source host\", allocatedResource));\n+        } else {\n+          LOG.info(\"Status updated for ContainerPlacement action: \", actionMetaData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTM5NTQ3", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362939547", "createdAt": "2020-02-21T21:53:02Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1MzowMlrOFtFrRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1MzowMlrOFtFrRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzIzNw==", "bodyText": "This logic seems twisted; making the code unreadable,\nwe check if there there is an active-action on the container-id, or if there is an active-action on its active/standby counterparts,\nafter that we check if there is a standby-container-manager present?\nWould it be possible to\na. first check if a standby-container-manager is present?\nOr\nb. can hasActiveContainerPlacementAction encapsulate the logic of checking a and checking with if there is an active-action on its active/standby counterparts of the given processor-id.", "url": "https://github.com/apache/samza/pull/1281#discussion_r382823237", "createdAt": "2020-02-21T21:53:02Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -412,16 +429,23 @@ private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMes\n   }\n \n   /**\n-   * If there is an existing inflight request or container is pending a start, the container placement action shall wait\n-   * until this in-flight action is complete\n+   * These are specific scenarios in which a placement action should wait for existing action to complete before it is executed\n+   * 1. If there is an placement request in progress on active container\n+   * 2. If there is an placement request is progress on any of its standby container\n+   * 3. If the container itself is pending a start\n    *\n    * @param requestMessage container placement request message\n    * @return true if action should be taken right now, false if it needs to wait to be taken in future\n    */\n   private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n     // Do not dequeue action wait for the in-flight action to complete\n-    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())) {\n-      LOG.info(\"ContainerPlacement request: {} is en-queued because container has an in-progress placement action\", requestMessage);\n+    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())\n+        || checkStandbyOrActiveContainerHasActivePlacementAction(requestMessage.getProcessorId())) {\n+      if (standbyContainerManager.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTQwNjIz", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362940623", "createdAt": "2020-02-21T21:55:14Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NToxNFrOFtFupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NToxNFrOFtFupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDEwMg==", "bodyText": "Instead can we define errorMessage here\nas ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: %s\"\nand later String.format(errorMessage, reason);", "url": "https://github.com/apache/samza/pull/1281#discussion_r382824102", "createdAt": "2020-02-21T21:55:14Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -435,32 +459,59 @@ private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n \n   /**\n    * A valid container placement action needs a valid processor id. Duplicate actions are handled by de-duping on uuid.\n+   * If standby containers are enabled destination host requested must meet standby constraints\n    *\n    * @param requestMessage container placement request message\n    * @return Pair<ContainerPlacementMessage.StatusCode, String> which is status code & response suggesting if the request is valid\n    */\n   private Pair<ContainerPlacementMessage.StatusCode, String> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n-    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);\n+    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTQxMTEx", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362941111", "createdAt": "2020-02-21T21:56:09Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NjowOVrOFtFwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NjowOVrOFtFwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDUxMw==", "bodyText": "This method can be simplified/inlined with hasActiveAction?", "url": "https://github.com/apache/samza/pull/1281#discussion_r382824513", "createdAt": "2020-02-21T21:56:09Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -435,32 +459,59 @@ private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n \n   /**\n    * A valid container placement action needs a valid processor id. Duplicate actions are handled by de-duping on uuid.\n+   * If standby containers are enabled destination host requested must meet standby constraints\n    *\n    * @param requestMessage container placement request message\n    * @return Pair<ContainerPlacementMessage.StatusCode, String> which is status code & response suggesting if the request is valid\n    */\n   private Pair<ContainerPlacementMessage.StatusCode, String> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n-    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);\n+    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: \";\n     Boolean invalidAction = false;\n     String errorMessage = null;\n-    if (standbyContainerManager.isPresent()) {\n-      errorMessage = String.format(\"%s not supported for hot standby enabled\", errorMessagePrefix);\n+    if (!samzaApplicationState.runningProcessors.containsKey(requestMessage.getProcessorId()) &&\n+        !samzaApplicationState.pendingProcessors.containsKey(requestMessage.getProcessorId())\n+    ) {\n+      errorMessage = String.format(\"%s invalid processor id neither in running or pending processors\", errorMessagePrefix);\n       invalidAction = true;\n     } else if (placementRequestsCache.containsKey(requestMessage.getUuid())) {\n       errorMessage = String.format(\"%s duplicate UUID of the request, please retry\", errorMessagePrefix);\n       invalidAction = true;\n-    } else if (Integer.parseInt(requestMessage.getProcessorId()) >= samzaApplicationState.processorCount.get()\n-    ) {\n-      errorMessage = String.format(\"%s invalid processor id\", errorMessagePrefix);\n+    } else if (standbyContainerManager.isPresent() && !standbyContainerManager.get()\n+        .checkStandbyConstraints(requestMessage.getProcessorId(), requestMessage.getDestinationHost())) {\n+      errorMessage = String.format(\"%s destination host does not meet standby constraints\", errorMessagePrefix);\n       invalidAction = true;\n     }\n \n     if (invalidAction) {\n-      LOG.info(errorMessage);\n       return new ImmutablePair<>(ContainerPlacementMessage.StatusCode.BAD_REQUEST, errorMessage);\n     }\n \n     return new ImmutablePair<>(ContainerPlacementMessage.StatusCode.ACCEPTED, \"Request is accepted\");\n   }\n \n+  /**\n+   * An active and a standby container cannot have a concurrent placement action in flight, if they do actions are taken\n+   * serially in the order of timestamps\n+   */\n+  private boolean checkStandbyOrActiveContainerHasActivePlacementAction(String processorId) {\n+    if (standbyContainerManager.isPresent()) {\n+      // If requested placement action is on a standby container and its active container has a placement request,\n+      // this request shall not be de-queued until in-flight action on active container is complete\n+      if (StandbyTaskUtil.isStandbyContainer(processorId) && hasActiveContainerPlacementAction(\n+          StandbyTaskUtil.getActiveContainerId(processorId))) {\n+        return true;\n+      }\n+      // If requested placement action is on a standby container and its active container has a placement request,\n+      // this request shall not be de-queued until in-flight action on active container is complete\n+      if (!StandbyTaskUtil.isStandbyContainer(processorId)) {\n+        for (String standby : standbyContainerManager.get().getStandbyList(processorId)) {\n+          if (hasActiveContainerPlacementAction(standby)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 187}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "author": {"user": {"login": "Sanil15", "name": "Sanil Jain"}}, "url": "https://github.com/apache/samza/commit/f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "committedDate": "2020-02-21T21:57:02Z", "message": "Addressing feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTQ5NTc5", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362949579", "createdAt": "2020-02-21T22:14:13Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjoxNDoxM1rOFtGLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjoxNDoxM1rOFtGLMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMTQxMQ==", "bodyText": "see comment above on simplifying,\nYou can additional methods here to simplify the caller's logic, so that the caller does not need to know the internals of the standby container manager.", "url": "https://github.com/apache/samza/pull/1281#discussion_r382831411", "createdAt": "2020-02-21T22:14:13Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -425,6 +423,15 @@ public void handleExpiredResourceRequest(String containerID, SamzaResourceReques\n     }\n   }\n \n+  /**\n+   * Fetches a list of standby container for an active container\n+   * @param activeContainerId logical id of the container ex: 0,1,2\n+   * @return list of standby containers ex: for active container 0: {0-0, 0-1}\n+   */\n+  List<String> getStandbyList(String activeContainerId) {\n+    return this.standbyContainerConstraints.get(activeContainerId);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTUzODA3", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-362953807", "createdAt": "2020-02-21T22:23:52Z", "commit": {"oid": "539ffd335f81bc17fc5dcb627469e35310e30428"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81e8509cb18da50abed469b5dd0d804b018d95fe", "author": {"user": {"login": "Sanil15", "name": "Sanil Jain"}}, "url": "https://github.com/apache/samza/commit/81e8509cb18da50abed469b5dd0d804b018d95fe", "committedDate": "2020-02-22T01:11:42Z", "message": "Adressing comments inlining methods for checking active actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cfb544d1f3aed8aea8b91367e9aa31bee7fa9cc", "author": {"user": {"login": "Sanil15", "name": "Sanil Jain"}}, "url": "https://github.com/apache/samza/commit/3cfb544d1f3aed8aea8b91367e9aa31bee7fa9cc", "committedDate": "2020-02-22T01:23:31Z", "message": "Add metrics for failed container placement actions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NjM4MDU1", "url": "https://github.com/apache/samza/pull/1281#pullrequestreview-366638055", "createdAt": "2020-02-28T19:37:34Z", "commit": {"oid": "3cfb544d1f3aed8aea8b91367e9aa31bee7fa9cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680de8639e91944422f025182cb394b8392a13fe", "author": {"user": {"login": "Sanil15", "name": "Sanil Jain"}}, "url": "https://github.com/apache/samza/commit/680de8639e91944422f025182cb394b8392a13fe", "committedDate": "2020-02-28T21:16:40Z", "message": "remove unwanted file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4783, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}