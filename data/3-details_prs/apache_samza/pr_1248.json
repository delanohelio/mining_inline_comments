{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTgzNjc0", "number": 1248, "title": "SAMZA-2410: Update ClusterBasedJobCoordinator config retrieval logic from loader.", "bodyText": "Design:\nhttps://cwiki.apache.org/confluence/display/SAMZA/SEP-23%3A+Simplify+Job+Runner\nChanges:\n\nMake ClusterBasedJobCoordinator's constructor to be private\nAdd static methods createFromMetadataStore() and createFromConfigLoader() to initialize ClusterBasedJobCoordinator instead.\nUpdate CoordinatorStreamStore to its interface MetadataStore to be more generic.\nBased on the existence of ENV_SUBMISSION_CONFIG, ClusterBasedJobCoordinator will alternatively deserilize ENV_SUBMISSION_CONFIG and load full job config from config loader factory.\nExecute planning, create diagnostics stream and persist full job config back to coordinator stream when loading full job config from config loader.\n\nAPI Changes:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\nUpgrade Instructions:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\nUsage Instructions:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\nTests:\nEnd to end tested with Hello Samza job.", "createdAt": "2020-01-10T19:09:30Z", "url": "https://github.com/apache/samza/pull/1248", "merged": true, "mergeCommit": {"oid": "5bef72595faa8c8cdc9e35b09342e36a5085c10b"}, "closed": true, "closedAt": "2020-01-17T22:09:24Z", "author": {"login": "kw2542"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5DXgQAH2gAyMzYxNTgzNjc0Ojc1NGEyZTFkYzhjNjE3MjM4YTQ1NGE2ZDZlZGQ4MGM5ODhjNzk5Zjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7VRj_gH2gAyMzYxNTgzNjc0OjM1ZjVkYjI0MGMyNGIzNGRkMTgxNDkzMGZjNGVkNmFhNTZlNGI3YzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "754a2e1dc8c617238a454a6d6edd80c988c799f8", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/754a2e1dc8c617238a454a6d6edd80c988c799f8", "committedDate": "2020-01-10T19:04:00Z", "message": "SAMZA-2410: Update ClusterBasedJobCoordinator config retrieval logic to read config from loader\n\nDesign:\nhttps://cwiki.apache.org/confluence/display/SAMZA/SEP-23%3A+Simplify+Job+Runner\n\nChanges:\n\n1. Based on the existence of ENV_SUBMISSION_CONFIG, ClusterBasedJobCoordinator will alternatively deserilize ENV_SUBMISSION_CONFIG and load full job config from config loader factory.\n2. Execute planning, create diagnostics stream and persist full job config back to coordinator stream when loading full job config from config loader.\n\nAPI Changes:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\n\nUpgrade Instructions:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\n\nUsage Instructions:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\n\nTests:\nEnd to end tested with Hello Samza job."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa8e1ac3cfb9b870a95c42ea6e5a95db25812910", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/aa8e1ac3cfb9b870a95c42ea6e5a95db25812910", "committedDate": "2020-01-11T00:22:40Z", "message": "Refactor the common logic to ConfigUtil, which will be used in LocalApplicationRunner as well."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d65377e8dacfe79f5a32b6ab196066e8a674e9f", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/0d65377e8dacfe79f5a32b6ab196066e8a674e9f", "committedDate": "2020-01-11T00:33:39Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDg3NzU2", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-341487756", "createdAt": "2020-01-11T00:41:20Z", "commit": {"oid": "0d65377e8dacfe79f5a32b6ab196066e8a674e9f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo0MToyMFrOFcjREw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo1ODo0NVrOFcjaqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MjI1OQ==", "bodyText": "Do we still need this method to return a list if RemoteApplicationRunner will only ever submit a single job?", "url": "https://github.com/apache/samza/pull/1248#discussion_r365482259", "createdAt": "2020-01-11T00:41:20Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -178,9 +185,35 @@\n   public ClusterBasedJobCoordinator(Config coordinatorSystemConfig) {\n     metrics = new MetricsRegistryMap();\n \n-    coordinatorStreamStore = new CoordinatorStreamStore(coordinatorSystemConfig, metrics);\n-    coordinatorStreamStore.init();\n-    config = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n+    JobConfig jobConfig = new JobConfig(coordinatorSystemConfig);\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      // load full job config with ConfigLoader\n+      Config originalConfig = ConfigUtil.loadConfig(coordinatorSystemConfig);\n+\n+      // Execute planning\n+      ApplicationDescriptorImpl<? extends ApplicationDescriptor>\n+          appDesc = ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig);\n+      RemoteJobPlanner planner = new RemoteJobPlanner(appDesc);\n+      List<JobConfig> jobConfigs = planner.prepareJobs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d65377e8dacfe79f5a32b6ab196066e8a674e9f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MzQ0OA==", "bodyText": "s/submissionEnv/submissiongConfig?", "url": "https://github.com/apache/samza/pull/1248#discussion_r365483448", "createdAt": "2020-01-11T00:49:10Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -480,20 +512,41 @@ private static void executeRunClusterBasedJobCoordinatorForClass(Class<?> cluste\n    * {@link #main(String[])} so that it can be executed directly or from a separate classloader.\n    */\n   private static void runClusterBasedJobCoordinator(String[] args) {\n-    Config coordinatorSystemConfig;\n     final String coordinatorSystemEnv = System.getenv(ShellCommandConfig.ENV_COORDINATOR_SYSTEM_CONFIG());\n-    try {\n-      //Read and parse the coordinator system config.\n-      LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n-      coordinatorSystemConfig =\n-          new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n-      LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while reading coordinator stream config\", e);\n-      throw new SamzaException(e);\n+    final String submissionEnv = System.getenv(ShellCommandConfig.ENV_SUBMISSION_CONFIG());\n+\n+    if (submissionEnv != null) {\n+      Config submissionConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing submission config {}\", submissionEnv);\n+        submissionConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(submissionEnv, Config.class));\n+        LOG.info(\"Using the submission config: {}.\", submissionEnv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d65377e8dacfe79f5a32b6ab196066e8a674e9f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4NDcxMg==", "bodyText": "Why are we merging these config keys in? From what I see these were not being written to the coordinator stream previously but only built and sent along with the submission to the RM", "url": "https://github.com/apache/samza/pull/1248#discussion_r365484712", "createdAt": "2020-01-11T00:58:45Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -178,9 +185,35 @@\n   public ClusterBasedJobCoordinator(Config coordinatorSystemConfig) {\n     metrics = new MetricsRegistryMap();\n \n-    coordinatorStreamStore = new CoordinatorStreamStore(coordinatorSystemConfig, metrics);\n-    coordinatorStreamStore.init();\n-    config = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n+    JobConfig jobConfig = new JobConfig(coordinatorSystemConfig);\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      // load full job config with ConfigLoader\n+      Config originalConfig = ConfigUtil.loadConfig(coordinatorSystemConfig);\n+\n+      // Execute planning\n+      ApplicationDescriptorImpl<? extends ApplicationDescriptor>\n+          appDesc = ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig);\n+      RemoteJobPlanner planner = new RemoteJobPlanner(appDesc);\n+      List<JobConfig> jobConfigs = planner.prepareJobs();\n+\n+      if (jobConfigs.size() != 1) {\n+        throw new SamzaException(\"Only support single remote job is supported.\");\n+      }\n+\n+      // Merge with default coordinator stream config\n+      config = ConfigUtil.override(jobConfigs.get(0), CoordinatorStreamUtil.buildCoordinatorStreamConfig(jobConfigs.get(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d65377e8dacfe79f5a32b6ab196066e8a674e9f"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b0d0f6c7b4be861fef8200040e0d8dbd67d30b", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/a7b0d0f6c7b4be861fef8200040e0d8dbd67d30b", "committedDate": "2020-01-11T01:26:34Z", "message": "Update ConfigUtil to handle config overrides, update ClusterBasedJobCoordinator not to merge final config with coordinator stream config to keep consistent with before."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDg5MTI2", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-342089126", "createdAt": "2020-01-13T19:37:13Z", "commit": {"oid": "a7b0d0f6c7b4be861fef8200040e0d8dbd67d30b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozNzoxM1rOFdCQdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozNzoxM1rOFdCQdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5MDAwNQ==", "bodyText": "Is it an exceptional case for ConfigLoaderFactory to not be present here?", "url": "https://github.com/apache/samza/pull/1248#discussion_r365990005", "createdAt": "2020-01-13T19:37:13Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/util/ConfigUtil.java", "diffHunk": "@@ -67,4 +72,42 @@ public static Config applyRewriter(Config config, String rewriterName) {\n     LOG.info(\"Re-writing config with {}\", rewriter);\n     return rewriter.rewrite(rewriterName, config);\n   }\n+\n+  /**\n+   * Load full job config with {@link ConfigLoaderFactory} when present.\n+   *\n+   * @param original config\n+   * @return full job config\n+   */\n+  public static Config loadConfig(Config original) {\n+    JobConfig jobConfig = new JobConfig(original);\n+    Config fullConfig = original;\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      ConfigLoaderFactory factory = ReflectionUtil.getObj(jobConfig.getConfigLoaderFactory().get(), ConfigLoaderFactory.class);\n+      ConfigLoader loader = factory.getLoader(original.subset(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX));\n+      // overrides config loaded with original config, which may contain overridden values.\n+      fullConfig = override(ConfigUtil.rewriteConfig(loader.getConfig()), original);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b0d0f6c7b4be861fef8200040e0d8dbd67d30b"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86032a6feaa1e25db3e18e18a1dd1f019ec473b7", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/86032a6feaa1e25db3e18e18a1dd1f019ec473b7", "committedDate": "2020-01-14T20:31:11Z", "message": "Add ticket for clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODg2MjA5", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-342886209", "createdAt": "2020-01-14T22:37:52Z", "commit": {"oid": "86032a6feaa1e25db3e18e18a1dd1f019ec473b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozNzo1M1rOFdoGVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozNzo1M1rOFdoGVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMDAwNA==", "bodyText": "Should we rename this to something more general now that it won't always be just the coordinator system configs?", "url": "https://github.com/apache/samza/pull/1248#discussion_r366610004", "createdAt": "2020-01-14T22:37:53Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -178,9 +185,33 @@\n   public ClusterBasedJobCoordinator(Config coordinatorSystemConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86032a6feaa1e25db3e18e18a1dd1f019ec473b7"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c234721851151e9c1c3d192d98b518b59abbba2b", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/c234721851151e9c1c3d192d98b518b59abbba2b", "committedDate": "2020-01-14T23:21:35Z", "message": "Rename coordinatorSystemConfig to jobCoordinatorConfig to be more generic as it may contain config loader properties instead."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTI3MjQx", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-342927241", "createdAt": "2020-01-15T00:32:53Z", "commit": {"oid": "c234721851151e9c1c3d192d98b518b59abbba2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/5d381c46c2b7e55631d744e835feed934f63c27d", "committedDate": "2020-01-15T00:36:15Z", "message": "Merge branch 'master' of https://github.com/apache/samza into SAMZA-2410"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDM4ODMw", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-343438830", "createdAt": "2020-01-15T18:44:44Z", "commit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODo0NDo0NVrOFeCkng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToxMDoyMFrOFeDSLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0Mzc0Mg==", "bodyText": "Does this need to match the set-up done in JobRunner.run? Maybe it would be good to put a comment in here and in JobRunner to make sure they are consistent. I know it will be cleaned up eventually, but there will be some time in which both flows exist.", "url": "https://github.com/apache/samza/pull/1248#discussion_r367043742", "createdAt": "2020-01-15T18:44:45Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -172,15 +179,39 @@\n    * Creates a new ClusterBasedJobCoordinator instance from a config. Invoke run() to actually\n    * run the jobcoordinator.\n    *\n-   * @param coordinatorSystemConfig the coordinator stream config that can be used to read the\n-   *                                {@link org.apache.samza.job.model.JobModel} from.\n+   * @param jobCoordinatorConfig job coordinator config that either contains coordinator stream properties\n+   *                             or config loader properties to load full job config.\n    */\n-  public ClusterBasedJobCoordinator(Config coordinatorSystemConfig) {\n+  public ClusterBasedJobCoordinator(Config jobCoordinatorConfig) {\n     metrics = new MetricsRegistryMap();\n \n-    coordinatorStreamStore = new CoordinatorStreamStore(coordinatorSystemConfig, metrics);\n-    coordinatorStreamStore.init();\n-    config = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n+    JobConfig jobConfig = new JobConfig(jobCoordinatorConfig);\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      // load full job config with ConfigLoader\n+      Config originalConfig = ConfigUtil.loadConfig(jobCoordinatorConfig);\n+\n+      // Execute planning\n+      ApplicationDescriptorImpl<? extends ApplicationDescriptor>\n+          appDesc = ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig);\n+      RemoteJobPlanner planner = new RemoteJobPlanner(appDesc);\n+      List<JobConfig> jobConfigs = planner.prepareJobs();\n+\n+      if (jobConfigs.size() != 1) {\n+        throw new SamzaException(\"Only support single remote job is supported.\");\n+      }\n+\n+      config = jobConfigs.get(0);\n+      coordinatorStreamStore = new CoordinatorStreamStore(CoordinatorStreamUtil.buildCoordinatorStreamConfig(config), metrics);\n+      coordinatorStreamStore.init();\n+      CoordinatorStreamUtil.writeConfigToCoordinatorStream(config, true);\n+      DiagnosticsUtil.createDiagnosticsStream(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NDY5NA==", "bodyText": "Should this check for a blank string instead of just null? It might be easier since it might sometimes be hard to fill in null for an env variable (easier to put the empty string).", "url": "https://github.com/apache/samza/pull/1248#discussion_r367044694", "createdAt": "2020-01-15T18:46:53Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -480,20 +510,41 @@ private static void executeRunClusterBasedJobCoordinatorForClass(Class<?> cluste\n    * {@link #main(String[])} so that it can be executed directly or from a separate classloader.\n    */\n   private static void runClusterBasedJobCoordinator(String[] args) {\n-    Config coordinatorSystemConfig;\n     final String coordinatorSystemEnv = System.getenv(ShellCommandConfig.ENV_COORDINATOR_SYSTEM_CONFIG());\n-    try {\n-      //Read and parse the coordinator system config.\n-      LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n-      coordinatorSystemConfig =\n-          new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n-      LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while reading coordinator stream config\", e);\n-      throw new SamzaException(e);\n+    final String submissionEnv = System.getenv(ShellCommandConfig.ENV_SUBMISSION_CONFIG());\n+\n+    if (submissionEnv != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0OTUxNw==", "bodyText": "I think the config rewriter sometimes overrides existing configs, so I don't think you want to re-override back to the original.\nDoes the existing flow do this override flow with the original config?", "url": "https://github.com/apache/samza/pull/1248#discussion_r367049517", "createdAt": "2020-01-15T18:57:12Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/util/ConfigUtil.java", "diffHunk": "@@ -67,4 +72,42 @@ public static Config applyRewriter(Config config, String rewriterName) {\n     LOG.info(\"Re-writing config with {}\", rewriter);\n     return rewriter.rewrite(rewriterName, config);\n   }\n+\n+  /**\n+   * Load full job config with {@link ConfigLoaderFactory} when present.\n+   *\n+   * @param original config\n+   * @return full job config\n+   */\n+  public static Config loadConfig(Config original) {\n+    JobConfig jobConfig = new JobConfig(original);\n+    Config fullConfig = original;\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      ConfigLoaderFactory factory = ReflectionUtil.getObj(jobConfig.getConfigLoaderFactory().get(), ConfigLoaderFactory.class);\n+      ConfigLoader loader = factory.getLoader(original.subset(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX));\n+      // overrides config loaded with original config, which may contain overridden values.\n+      fullConfig = override(ConfigUtil.rewriteConfig(loader.getConfig()), original);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1NTQwNw==", "bodyText": "The method name loadConfig is a bit misleading if it just might return the config that is passed in. If you still prefer to allow this to succeed when ConfigLoaderFactory is not present, then maybe at least rename the method to help clarify what it might do, so that someone doesn't accidentally call it in an unexpected way.", "url": "https://github.com/apache/samza/pull/1248#discussion_r367055407", "createdAt": "2020-01-15T19:10:20Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/util/ConfigUtil.java", "diffHunk": "@@ -67,4 +72,42 @@ public static Config applyRewriter(Config config, String rewriterName) {\n     LOG.info(\"Re-writing config with {}\", rewriter);\n     return rewriter.rewrite(rewriterName, config);\n   }\n+\n+  /**\n+   * Load full job config with {@link ConfigLoaderFactory} when present.\n+   *\n+   * @param original config\n+   * @return full job config\n+   */\n+  public static Config loadConfig(Config original) {\n+    JobConfig jobConfig = new JobConfig(original);\n+    Config fullConfig = original;\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      ConfigLoaderFactory factory = ReflectionUtil.getObj(jobConfig.getConfigLoaderFactory().get(), ConfigLoaderFactory.class);\n+      ConfigLoader loader = factory.getLoader(original.subset(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX));\n+      // overrides config loaded with original config, which may contain overridden values.\n+      fullConfig = override(ConfigUtil.rewriteConfig(loader.getConfig()), original);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5MDAwNQ=="}, "originalCommit": {"oid": "a7b0d0f6c7b4be861fef8200040e0d8dbd67d30b"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a90387a1a7c89abf58ad84875dade3f9fe2e5361", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/a90387a1a7c89abf58ad84875dade3f9fe2e5361", "committedDate": "2020-01-15T23:54:01Z", "message": "Add extra comments\nOverride config first before applying config rewriters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c004a97d60e9bff9e5a39328ec9153c014174232", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/c004a97d60e9bff9e5a39328ec9153c014174232", "committedDate": "2020-01-16T02:26:36Z", "message": "Add unit tests\nRefactor ClusterBasedJobCoordinator to be testable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ec226c3359d4e6d0da01ce7bc436b686bc59083", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/4ec226c3359d4e6d0da01ce7bc436b686bc59083", "committedDate": "2020-01-16T18:13:54Z", "message": "Merge branch 'master' of https://github.com/apache/samza into SAMZA-2410"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/de8ed411e5118dce7ce4f6587379fb29a36495ef", "committedDate": "2020-01-16T18:48:13Z", "message": "Fix style issue in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzUxMzk1", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-344751395", "createdAt": "2020-01-17T18:09:05Z", "commit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowOTowNlrOFfBB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoyNDoxMVrOFfBZ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NzAzMQ==", "bodyText": "The comment was resolved, but it looks like you are still just checking for null. Did you intend to check for blank string too?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368067031", "createdAt": "2020-01-17T18:09:06Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -480,20 +510,41 @@ private static void executeRunClusterBasedJobCoordinatorForClass(Class<?> cluste\n    * {@link #main(String[])} so that it can be executed directly or from a separate classloader.\n    */\n   private static void runClusterBasedJobCoordinator(String[] args) {\n-    Config coordinatorSystemConfig;\n     final String coordinatorSystemEnv = System.getenv(ShellCommandConfig.ENV_COORDINATOR_SYSTEM_CONFIG());\n-    try {\n-      //Read and parse the coordinator system config.\n-      LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n-      coordinatorSystemConfig =\n-          new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n-      LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while reading coordinator stream config\", e);\n-      throw new SamzaException(e);\n+    final String submissionEnv = System.getenv(ShellCommandConfig.ENV_SUBMISSION_CONFIG());\n+\n+    if (submissionEnv != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NDY5NA=="}, "originalCommit": {"oid": "5d381c46c2b7e55631d744e835feed934f63c27d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NzkxMw==", "bodyText": "It looks like you already call init in the shared constructor. Please call it only once.", "url": "https://github.com/apache/samza/pull/1248#discussion_r368067913", "createdAt": "2020-01-17T18:11:13Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -480,20 +485,101 @@ private static void executeRunClusterBasedJobCoordinatorForClass(Class<?> cluste\n    * {@link #main(String[])} so that it can be executed directly or from a separate classloader.\n    */\n   private static void runClusterBasedJobCoordinator(String[] args) {\n-    Config coordinatorSystemConfig;\n     final String coordinatorSystemEnv = System.getenv(ShellCommandConfig.ENV_COORDINATOR_SYSTEM_CONFIG());\n-    try {\n-      //Read and parse the coordinator system config.\n-      LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n-      coordinatorSystemConfig =\n-          new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n-      LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while reading coordinator stream config\", e);\n-      throw new SamzaException(e);\n+    final String submissionEnv = System.getenv(ShellCommandConfig.ENV_SUBMISSION_CONFIG());\n+\n+    if (submissionEnv != null) {\n+      Config submissionConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing submission config {}\", submissionEnv);\n+        submissionConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(submissionEnv, Config.class));\n+        LOG.info(\"Using the submission config: {}.\", submissionConfig);\n+      } catch (IOException e) {\n+        LOG.error(\"Exception while reading submission config\", e);\n+        throw new SamzaException(e);\n+      }\n+\n+      ClusterBasedJobCoordinator jc = createFromConfigLoader(submissionConfig);\n+      jc.run();\n+      LOG.info(\"Finished running ClusterBasedJobCoordinator\");\n+    } else {\n+      // TODO: Clean this up once SAMZA-2405 is completed when legacy flow is removed.\n+      Config coordinatorSystemConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n+        coordinatorSystemConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n+        LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n+      } catch (IOException e) {\n+        LOG.error(\"Exception while reading coordinator stream config\", e);\n+        throw new SamzaException(e);\n+      }\n+      ClusterBasedJobCoordinator jc = createFromMetadataStore(coordinatorSystemConfig);\n+      jc.run();\n+      LOG.info(\"Finished running ClusterBasedJobCoordinator\");\n+    }\n+  }\n+\n+  /**\n+   * Initialize {@link ClusterBasedJobCoordinator} with coordinator stream config, full job config will be fetched from\n+   * coordinator stream.\n+   *\n+   * @param metadataStoreConfig to initialize {@link MetadataStore}\n+   * @return {@link ClusterBasedJobCoordinator}\n+   */\n+  // TODO SAMZA-2432: Clean this up once SAMZA-2405 is completed when legacy flow is removed.\n+  public static ClusterBasedJobCoordinator createFromMetadataStore(Config metadataStoreConfig) {\n+    MetricsRegistryMap metrics = new MetricsRegistryMap();\n+\n+    CoordinatorStreamStore coordinatorStreamStore = new CoordinatorStreamStore(metadataStoreConfig, metrics);\n+    coordinatorStreamStore.init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2ODUyMg==", "bodyText": "Does this need to be public? If you need in tests, could you make it package private and mark as VisibleForTesting?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368068522", "createdAt": "2020-01-17T18:12:48Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -480,20 +485,101 @@ private static void executeRunClusterBasedJobCoordinatorForClass(Class<?> cluste\n    * {@link #main(String[])} so that it can be executed directly or from a separate classloader.\n    */\n   private static void runClusterBasedJobCoordinator(String[] args) {\n-    Config coordinatorSystemConfig;\n     final String coordinatorSystemEnv = System.getenv(ShellCommandConfig.ENV_COORDINATOR_SYSTEM_CONFIG());\n-    try {\n-      //Read and parse the coordinator system config.\n-      LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n-      coordinatorSystemConfig =\n-          new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n-      LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while reading coordinator stream config\", e);\n-      throw new SamzaException(e);\n+    final String submissionEnv = System.getenv(ShellCommandConfig.ENV_SUBMISSION_CONFIG());\n+\n+    if (submissionEnv != null) {\n+      Config submissionConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing submission config {}\", submissionEnv);\n+        submissionConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(submissionEnv, Config.class));\n+        LOG.info(\"Using the submission config: {}.\", submissionConfig);\n+      } catch (IOException e) {\n+        LOG.error(\"Exception while reading submission config\", e);\n+        throw new SamzaException(e);\n+      }\n+\n+      ClusterBasedJobCoordinator jc = createFromConfigLoader(submissionConfig);\n+      jc.run();\n+      LOG.info(\"Finished running ClusterBasedJobCoordinator\");\n+    } else {\n+      // TODO: Clean this up once SAMZA-2405 is completed when legacy flow is removed.\n+      Config coordinatorSystemConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n+        coordinatorSystemConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n+        LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n+      } catch (IOException e) {\n+        LOG.error(\"Exception while reading coordinator stream config\", e);\n+        throw new SamzaException(e);\n+      }\n+      ClusterBasedJobCoordinator jc = createFromMetadataStore(coordinatorSystemConfig);\n+      jc.run();\n+      LOG.info(\"Finished running ClusterBasedJobCoordinator\");\n+    }\n+  }\n+\n+  /**\n+   * Initialize {@link ClusterBasedJobCoordinator} with coordinator stream config, full job config will be fetched from\n+   * coordinator stream.\n+   *\n+   * @param metadataStoreConfig to initialize {@link MetadataStore}\n+   * @return {@link ClusterBasedJobCoordinator}\n+   */\n+  // TODO SAMZA-2432: Clean this up once SAMZA-2405 is completed when legacy flow is removed.\n+  public static ClusterBasedJobCoordinator createFromMetadataStore(Config metadataStoreConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2ODU1MQ==", "bodyText": "Does this need to be public? If you need in tests, could you make it package private and mark as VisibleForTesting?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368068551", "createdAt": "2020-01-17T18:12:53Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -480,20 +485,101 @@ private static void executeRunClusterBasedJobCoordinatorForClass(Class<?> cluste\n    * {@link #main(String[])} so that it can be executed directly or from a separate classloader.\n    */\n   private static void runClusterBasedJobCoordinator(String[] args) {\n-    Config coordinatorSystemConfig;\n     final String coordinatorSystemEnv = System.getenv(ShellCommandConfig.ENV_COORDINATOR_SYSTEM_CONFIG());\n-    try {\n-      //Read and parse the coordinator system config.\n-      LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n-      coordinatorSystemConfig =\n-          new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n-      LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n-    } catch (IOException e) {\n-      LOG.error(\"Exception while reading coordinator stream config\", e);\n-      throw new SamzaException(e);\n+    final String submissionEnv = System.getenv(ShellCommandConfig.ENV_SUBMISSION_CONFIG());\n+\n+    if (submissionEnv != null) {\n+      Config submissionConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing submission config {}\", submissionEnv);\n+        submissionConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(submissionEnv, Config.class));\n+        LOG.info(\"Using the submission config: {}.\", submissionConfig);\n+      } catch (IOException e) {\n+        LOG.error(\"Exception while reading submission config\", e);\n+        throw new SamzaException(e);\n+      }\n+\n+      ClusterBasedJobCoordinator jc = createFromConfigLoader(submissionConfig);\n+      jc.run();\n+      LOG.info(\"Finished running ClusterBasedJobCoordinator\");\n+    } else {\n+      // TODO: Clean this up once SAMZA-2405 is completed when legacy flow is removed.\n+      Config coordinatorSystemConfig;\n+      try {\n+        //Read and parse the coordinator system config.\n+        LOG.info(\"Parsing coordinator system config {}\", coordinatorSystemEnv);\n+        coordinatorSystemConfig =\n+            new MapConfig(SamzaObjectMapper.getObjectMapper().readValue(coordinatorSystemEnv, Config.class));\n+        LOG.info(\"Using the coordinator system config: {}.\", coordinatorSystemConfig);\n+      } catch (IOException e) {\n+        LOG.error(\"Exception while reading coordinator stream config\", e);\n+        throw new SamzaException(e);\n+      }\n+      ClusterBasedJobCoordinator jc = createFromMetadataStore(coordinatorSystemConfig);\n+      jc.run();\n+      LOG.info(\"Finished running ClusterBasedJobCoordinator\");\n+    }\n+  }\n+\n+  /**\n+   * Initialize {@link ClusterBasedJobCoordinator} with coordinator stream config, full job config will be fetched from\n+   * coordinator stream.\n+   *\n+   * @param metadataStoreConfig to initialize {@link MetadataStore}\n+   * @return {@link ClusterBasedJobCoordinator}\n+   */\n+  // TODO SAMZA-2432: Clean this up once SAMZA-2405 is completed when legacy flow is removed.\n+  public static ClusterBasedJobCoordinator createFromMetadataStore(Config metadataStoreConfig) {\n+    MetricsRegistryMap metrics = new MetricsRegistryMap();\n+\n+    CoordinatorStreamStore coordinatorStreamStore = new CoordinatorStreamStore(metadataStoreConfig, metrics);\n+    coordinatorStreamStore.init();\n+    Config config = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n+\n+    return new ClusterBasedJobCoordinator(metrics, coordinatorStreamStore, config);\n+  }\n+\n+  /**\n+   * Initialize {@link ClusterBasedJobCoordinator} with submission config, full job config will be fetched using\n+   * specified {@link org.apache.samza.config.ConfigLoaderFactory}\n+   *\n+   * @param submissionConfig specifies {@link org.apache.samza.config.ConfigLoaderFactory}\n+   * @return {@link ClusterBasedJobCoordinator}\n+   */\n+  public static ClusterBasedJobCoordinator createFromConfigLoader(Config submissionConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MDAyMQ==", "bodyText": "Is there something you can do to clarify that this may not actually load any additional configs?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368070021", "createdAt": "2020-01-17T18:16:23Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/util/ConfigUtil.java", "diffHunk": "@@ -67,4 +72,42 @@ public static Config applyRewriter(Config config, String rewriterName) {\n     LOG.info(\"Re-writing config with {}\", rewriter);\n     return rewriter.rewrite(rewriterName, config);\n   }\n+\n+  /**\n+   * Load full job config with {@link ConfigLoaderFactory} when present.\n+   *\n+   * @param original config\n+   * @return full job config\n+   */\n+  public static Config loadConfig(Config original) {\n+    JobConfig jobConfig = new JobConfig(original);\n+    Config fullConfig = original;\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      ConfigLoaderFactory factory = ReflectionUtil.getObj(jobConfig.getConfigLoaderFactory().get(), ConfigLoaderFactory.class);\n+      ConfigLoader loader = factory.getLoader(original.subset(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX));\n+      // overrides config loaded with original config, which may contain overridden values.\n+      fullConfig = override(ConfigUtil.rewriteConfig(loader.getConfig()), original);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5MDAwNQ=="}, "originalCommit": {"oid": "a7b0d0f6c7b4be861fef8200040e0d8dbd67d30b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MTg3Mw==", "bodyText": "Is it practical to do any more-specific validation on the arguments here?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368071873", "createdAt": "2020-01-17T18:21:00Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinator.java", "diffHunk": "@@ -198,4 +203,31 @@ public void testRunWithClassLoader() throws Exception {\n     // make sure runClusterBasedJobCoordinator only got called once\n     verifyPrivate(ClusterBasedJobCoordinator.class).invoke(\"runClusterBasedJobCoordinator\", new Object[]{aryEq(args)});\n   }\n+\n+  @Test(expected = SamzaException.class)\n+  public void testCreateFromConfigLoaderWithoutConfigLoaderFactory() {\n+    ClusterBasedJobCoordinator.createFromConfigLoader(new MapConfig());\n+  }\n+\n+  @Test\n+  public void testCreateFromConfigLoader() throws Exception {\n+    // partially mock ClusterBasedJobCoordinator (mock prepareJob method only)\n+    PowerMockito.spy(ClusterBasedJobCoordinator.class);\n+\n+    Map<String, String> config = new HashMap<>();\n+    config.put(ApplicationConfig.APP_CLASS, MockStreamApplication.class.getCanonicalName());\n+    config.put(JobConfig.CONFIG_LOADER_FACTORY, PropertiesConfigLoaderFactory.class.getCanonicalName());\n+    config.put(PropertiesConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX + \"path\",\n+        getClass().getResource(\"/test.properties\").getPath());\n+\n+    PowerMockito.doAnswer(invocation -> invocation.getArgumentAt(0, Config.class))\n+        .when(ClusterBasedJobCoordinator.class, \"prepareJob\", any());\n+    PowerMockito.whenNew(ClusterBasedJobCoordinator.class).withAnyArguments().thenReturn(mock(ClusterBasedJobCoordinator.class));\n+    PowerMockito.whenNew(CoordinatorStreamStore.class).withAnyArguments().thenReturn(mock(CoordinatorStreamStore.class));\n+\n+    ClusterBasedJobCoordinator.createFromConfigLoader(new MapConfig(config));\n+\n+    verifyPrivate(ClusterBasedJobCoordinator.class).invoke(\"prepareJob\", any());\n+    verifyNew(ClusterBasedJobCoordinator.class).withArguments(any(), any(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjE3MA==", "bodyText": "Can this just be assertEquals(config, actual)?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368072170", "createdAt": "2020-01-17T18:21:43Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/test/java/org/apache/samza/util/TestConfigUtil.java", "diffHunk": "@@ -161,6 +162,31 @@ public void testApplyRewriterClassDoesNotExist() {\n     assertEquals(expectedConfig, ConfigUtil.applyRewriter(new MapConfig(fullConfig), REWRITER_NAME));\n   }\n \n+  @Test\n+  public void testLoadConfigWithoutLoader() {\n+    Map<String, String> config = new HashMap<>();\n+    config.put(JobConfig.JOB_NAME, \"new-test-job\");\n+\n+    Config actual = ConfigUtil.loadConfig(new MapConfig(config));\n+\n+    assertEquals(config.size(), actual.size());\n+    assertEquals(\"new-test-job\", actual.get(JobConfig.JOB_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MjcwNA==", "bodyText": "Should this also test config rewriting and overriding?", "url": "https://github.com/apache/samza/pull/1248#discussion_r368072704", "createdAt": "2020-01-17T18:23:03Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/test/java/org/apache/samza/util/TestConfigUtil.java", "diffHunk": "@@ -161,6 +162,31 @@ public void testApplyRewriterClassDoesNotExist() {\n     assertEquals(expectedConfig, ConfigUtil.applyRewriter(new MapConfig(fullConfig), REWRITER_NAME));\n   }\n \n+  @Test\n+  public void testLoadConfigWithoutLoader() {\n+    Map<String, String> config = new HashMap<>();\n+    config.put(JobConfig.JOB_NAME, \"new-test-job\");\n+\n+    Config actual = ConfigUtil.loadConfig(new MapConfig(config));\n+\n+    assertEquals(config.size(), actual.size());\n+    assertEquals(\"new-test-job\", actual.get(JobConfig.JOB_NAME));\n+  }\n+\n+  @Test\n+  public void testLoadConfigWithLoader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzE3MA==", "bodyText": "If this is public, can you please add a unit test for it? Or you could make it private.\nYou could also simplify it to only take in one extra argument since that is currently the only way it is used.", "url": "https://github.com/apache/samza/pull/1248#discussion_r368073170", "createdAt": "2020-01-17T18:24:11Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/util/ConfigUtil.java", "diffHunk": "@@ -67,4 +72,42 @@ public static Config applyRewriter(Config config, String rewriterName) {\n     LOG.info(\"Re-writing config with {}\", rewriter);\n     return rewriter.rewrite(rewriterName, config);\n   }\n+\n+  /**\n+   * Load full job config with {@link ConfigLoaderFactory} when present.\n+   *\n+   * @param original config\n+   * @return full job config\n+   */\n+  public static Config loadConfig(Config original) {\n+    JobConfig jobConfig = new JobConfig(original);\n+    Config fullConfig = original;\n+\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      ConfigLoaderFactory factory = ReflectionUtil.getObj(jobConfig.getConfigLoaderFactory().get(), ConfigLoaderFactory.class);\n+      ConfigLoader loader = factory.getLoader(original.subset(ConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX));\n+      // overrides config loaded with original config, which may contain overridden values.\n+      fullConfig = ConfigUtil.rewriteConfig(override(loader.getConfig(), original));\n+    }\n+\n+    return fullConfig;\n+  }\n+\n+  /**\n+   * Overrides original config with overridden values.\n+   *\n+   * @param original config to be overridden.\n+   * @param overrides overridden values.\n+   * @return the overridden config.\n+   */\n+  @SafeVarargs\n+  public static Config override(Config original, Map<String, String>... overrides) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8ed411e5118dce7ce4f6587379fb29a36495ef"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b00cb06351e29501269ac03ca702fba16131590e", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/b00cb06351e29501269ac03ca702fba16131590e", "committedDate": "2020-01-17T18:27:08Z", "message": "Use StringUtils.isBlank instead of null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27210d8aa49b6497400604aab47d722563ff59b4", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/27210d8aa49b6497400604aab47d722563ff59b4", "committedDate": "2020-01-17T18:52:10Z", "message": "Update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Nzg4ODAy", "url": "https://github.com/apache/samza/pull/1248#pullrequestreview-344788802", "createdAt": "2020-01-17T19:19:26Z", "commit": {"oid": "27210d8aa49b6497400604aab47d722563ff59b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762fa7de922655c2479e44d8f9470f5944d774c4", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/762fa7de922655c2479e44d8f9470f5944d774c4", "committedDate": "2020-01-17T19:48:10Z", "message": "Update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f5db240c24b34dd1814930fc4ed6aa56e4b7c3", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/35f5db240c24b34dd1814930fc4ed6aa56e4b7c3", "committedDate": "2020-01-17T21:03:39Z", "message": "Fix checkstyle in unit test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4748, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}