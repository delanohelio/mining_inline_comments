{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODg4ODE4", "number": 1421, "title": "SAMZA-2439: Remove LocalityManager and container location information from JobModel", "bodyText": "Issues\nCurrently locality information is part of job model. Job model typically is immutable and fixed within the lifecycle of an application attempt. The locality information on the other hand is dynamic and changes in the event of container movements. Due to this difference, it makes it complicated to program, model or define semantics around these models when building features. Furthermore, by removing this dependency\n\nEnables us to move JobModel to public APIs and expose it in JobContext\nEnables us to cache and serve serialized JobModel from the AM servlet to reduce AM overhead (memory, open connections, num threads) during container startup, esp. for jobs with a large number of containers (See: #1241)\nRemoves tech debt: models should be immutable, and should not update themselves.\nRemoves tech debt: makes current container location a first class concept for container scheduling / placement , and for tools like dashboard, samza-rest, auto-scaling, diagnostics etc.\n\nChanges\n\nSeparated out locality information out of job model into LocalityModel\nIntroduced an endpoint in AM to serve locality information\nAdded Json MixIns for locality models (LocalityModel & ContainerLocality)\nMoved JobModel to samza-api and exposed through JobContext\n\nTests\n\nAdded tests for new servlet\nModified existing tests to reflect the refactor\nDeployed the new servlet and verified the locality information is accessible\n\nAPI Changes:\n\nIntroduced new models for locality.\nPrevious job model endpoint will no longer serve locality information. i.e. tools using these will need to update to use the new endpoint; refer usage instructions for details.\nExpose JobModel via JobContext\n\nUpgrade Instructions: None. Refer to the API changes & the usage instructions below to upgrade your tooling if applicable.\nUsage Instructions: The new locality information is served under am endpoint within locality sub page. Tooling that used the AM endpoint to fetch locality information will need to be updated as follows.\nThe endpoint supports two types of queries\n\nQuerying for locality information of the entire job. It can be done by hitting the GET <am-endpoint>/locality. A sample response will look like the following\n\n{\n  container-localities: {\n    0: {\n      id: \"0\",\n      host: \"mynameborat-host\",\n      jmx-url: \"\",\n      jmx-tunneling-url: \"\"\n    }\n  }\n}\n\n\nQuerying for specific processor locality information. It can be done by specifying the processorId in the request. e.g. GET <am-enpoint>/locality?processorId=x. A sample response will look like the following\n\n{\n  id: \"0\",\n  host: \"mynameborat-host\",\n  jmx-url: \"\",\n  jmx-tunneling-url: \"\"\n}", "createdAt": "2020-08-21T23:02:55Z", "url": "https://github.com/apache/samza/pull/1421", "merged": true, "mergeCommit": {"oid": "f7f9f3c7905b047f262383bcc64ebb01ab73f421"}, "closed": true, "closedAt": "2020-08-27T02:39:33Z", "author": {"login": "mynameborat"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBMmLJgH2gAyNDcxODg4ODE4OmU2ZTk0ODUzYmJlODdjNjZlOTA2OGI1YzAyOGQ3NGI1OThhNTgyNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdC2jBwgH2gAyNDcxODg4ODE4OmQ1YTMwMWZjMTdhNDgyMDRkODg3NTFlMWUyMzVmYjk1YzVlMDFiYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/e6e94853bbe87c66e9068b5c028d74b598a58258", "committedDate": "2020-08-21T22:31:43Z", "message": "SAMZA-2439: Remove LocalityManager and container location information from JobModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4029bdd1754fd8139c06d5223d594c615cce2df", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/a4029bdd1754fd8139c06d5223d594c615cce2df", "committedDate": "2020-08-21T23:29:33Z", "message": "Fix javadocs generation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODYxMTU0", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-472861154", "createdAt": "2020-08-21T23:09:57Z", "commit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowOTo1N1rOHFACkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxOTo1OFrOHFAK1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTU4Ng==", "bodyText": "Nitpick: Can use java.util.Objects (here and other classes)?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005586", "createdAt": "2020-08-21T23:09:57Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/HostLocality.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTcyNw==", "bodyText": "Should this be ContainerLocation or something? HostLocality sounds wrong because the host doesn't have a location, it is the location.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005727", "createdAt": "2020-08-21T23:10:38Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/HostLocality.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * A class to represent the host locality information.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class HostLocality {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTg1MQ==", "bodyText": "Since this is in samza-api, let's describe what \"locality mapping\" etc. mean for users unfamiliar with Samza terms.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005851", "createdAt": "2020-08-21T23:11:12Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality mapping of an application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTk0NA==", "bodyText": "What does this mean?\nPhrasing: Instead of \"we want to\", maybe just describe what the implementation does and why.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005944", "createdAt": "2020-08-21T23:11:46Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality mapping of an application.\n+ * Currently the locality mapping represents the container host locality of an application.\n+ *\n+ * We want to keep the locality mapping open and not tie it to a container to potentially", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNjM0Mg==", "bodyText": "Can localityManager or readLocality results be null?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475006342", "createdAt": "2020-08-21T23:13:31Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -494,7 +498,9 @@ private String getSourceHostForContainer(ContainerPlacementRequestMessage reques\n           processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n       sourceHost = currentResource.getHost();\n     } else {\n-      sourceHost = samzaApplicationState.jobModelManager.jobModel().getContainerToHostValue(processorId, SetContainerHostMapping.HOST_KEY);\n+      sourceHost = Optional.ofNullable(localityManager.readLocality().getHostLocality(processorId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzExNg==", "bodyText": "Should this return an HTTP error (404 etc.) instead?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007116", "createdAt": "2020-08-21T23:17:01Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.HostLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model & configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */\n+public class LocalityServlet extends HttpServlet {\n+  private static final String PROCESSOR_ID_PARAM = \"processorId\";\n+  private final ObjectMapper mapper = SamzaObjectMapper.getObjectMapper();\n+  private final LocalityManager localityManager;\n+\n+  public LocalityServlet(LocalityManager localityManager) {\n+    this.localityManager = localityManager;\n+  }\n+\n+  @Override\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+    response.setContentType(\"application/json\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    LocalityModel localityModel = localityManager.readLocality();\n+\n+    if (request.getParameterMap().size() == 1) {\n+      String processorId = request.getParameter(PROCESSOR_ID_PARAM);\n+      HostLocality hostLocality = Optional.ofNullable(localityModel.getHostLocality(processorId))\n+          .orElse(new HostLocality(processorId, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzI0OQ==", "bodyText": "Nice, thanks for cleaning all of this up!", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007249", "createdAt": "2020-08-21T23:17:46Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "diffHunk": "@@ -39,34 +36,14 @@\n  * </p>\n  */\n public class JobModel {\n-  private static final String EMPTY_STRING = \"\";\n   private final Config config;\n   private final Map<String, ContainerModel> containers;\n \n-  private final LocalityManager localityManager;\n-  private final Map<String, String> localityMappings;\n-\n   public int maxChangeLogStreamPartitions;\n \n   public JobModel(Config config, Map<String, ContainerModel> containers) {\n-    this(config, containers, null);\n-  }\n-\n-  public JobModel(Config config, Map<String, ContainerModel> containers, LocalityManager localityManager) {\n     this.config = config;\n     this.containers = Collections.unmodifiableMap(containers);\n-    this.localityManager = localityManager;\n-\n-    // initialize container localityMappings\n-    this.localityMappings = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzM0Mw==", "bodyText": "If it's not too much extra work, does it make sense to move JobModel to samza-api and expose it in JobContext as part of this PR?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007343", "createdAt": "2020-08-21T23:18:20Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "diffHunk": "@@ -39,34 +36,14 @@\n  * </p>\n  */\n public class JobModel {\n-  private static final String EMPTY_STRING = \"\";\n   private final Config config;\n   private final Map<String, ContainerModel> containers;\n \n-  private final LocalityManager localityManager;\n-  private final Map<String, String> localityMappings;\n-\n   public int maxChangeLogStreamPartitions;\n \n   public JobModel(Config config, Map<String, ContainerModel> containers) {\n-    this(config, containers, null);\n-  }\n-\n-  public JobModel(Config config, Map<String, ContainerModel> containers, LocalityManager localityManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzcwMQ==", "bodyText": "Where is this called now?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007701", "createdAt": "2020-08-21T23:19:58Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -466,11 +464,6 @@ class JobModelManager(\n       debug(\"Stopping HTTP server.\")\n       server.stop\n       info(\"Stopped HTTP server.\")\n-      if (localityManager != null) {\n-        info(\"Stopping localityManager\")\n-        localityManager.close()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58c0f9366ed325e17313a1461c1db28f5fa6f755", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/58c0f9366ed325e17313a1461c1db28f5fa6f755", "committedDate": "2020-08-22T07:25:52Z", "message": "Address Prateek's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/6cda15d07533caff416d5fa27f4c900a7f2fee45", "committedDate": "2020-08-22T08:05:19Z", "message": "Extract job model to samza-api and expose via job context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Njc0OTY3", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-474674967", "createdAt": "2020-08-25T16:57:15Z", "commit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo1NzoxNlrOHGhNWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozNToxMlrOHGixdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NzU5NA==", "bodyText": "Is this the physical id of the container? for example in yarn it will be container_0000_99... if it is yes lets explicitly call it containerId and add a doc suggesting phyical containerId of a container\nAlso don't you need the logical id (called processorId here...)", "url": "https://github.com/apache/samza/pull/1421#discussion_r476597594", "createdAt": "2020-08-25T16:57:16Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ContainerLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the container locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ContainerLocality {\n+  /* Container identifier */\n+  private String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNjg2Nw==", "bodyText": "Lets add docs here for key of this hashmap, i think its the logical processor id for ex 1,2,3", "url": "https://github.com/apache/samza/pull/1421#discussion_r476606867", "createdAt": "2020-08-25T17:12:41Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ContainerLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ */\n+public class LocalityModel {\n+  private Map<String, ContainerLocality> containerLocalities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzE4Mw==", "bodyText": "s/id/processorId\nLets actually explicitly call it processorId", "url": "https://github.com/apache/samza/pull/1421#discussion_r476607183", "createdAt": "2020-08-25T17:13:14Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ContainerLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ */\n+public class LocalityModel {\n+  private Map<String, ContainerLocality> containerLocalities;\n+\n+  /**\n+   * Construct locality model for the job from the input map of container localities.\n+   * @param containerLocalities host locality information for the job keyed by container id\n+   */\n+  public LocalityModel(Map<String, ContainerLocality> containerLocalities) {\n+    this.containerLocalities = containerLocalities;\n+  }\n+\n+  /*\n+   * Returns a {@link Map} of {@link ContainerLocality} keyed by container id.\n+   */\n+  public Map<String, ContainerLocality> getContainerLocalities() {\n+    return containerLocalities;\n+  }\n+\n+  /*\n+   * Returns the {@link ContainerLocality} for the given container id.\n+   */\n+  public ContainerLocality getContainerLocality(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODk4OA==", "bodyText": "Here is another thought:\nLocalityManager and the ContainerPlacementMetadataStore both are present in this class ClusterBasedJobCoordinator because they both need a hold of metadata store\nWill it be cleaner to move this to ContainerProcessManager and then eventually move it to ContainerManager (when all the refactors we have in process are in)\nWe can just pass metadata store from here and then instantiate ContainerPlacementMetadatStore and LocalityManager in ContainerManager", "url": "https://github.com/apache/samza/pull/1421#discussion_r476608988", "createdAt": "2020-08-25T17:15:54Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -174,6 +176,7 @@\n   private final MetadataStore metadataStore;\n \n   private final SystemAdmins systemAdmins;\n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjU3OQ==", "bodyText": "Now we are passing this LocalityManager everywhere ContainerManager, CPM, StandbyContainerManager just to get the host that container was last seen....\nI think we can have it cleaner by either maintaining that in SamzaApplicationState or having static util in LocalityManager to fetch the last seen host", "url": "https://github.com/apache/samza/pull/1421#discussion_r476612579", "createdAt": "2020-08-25T17:21:49Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -80,19 +82,23 @@\n \n   private final Optional<StandbyContainerManager> standbyContainerManager;\n \n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMzIyMA==", "bodyText": "Same lets be specific here about the fact that is it processorId or containerId", "url": "https://github.com/apache/samza/pull/1421#discussion_r476623220", "createdAt": "2020-08-25T17:35:12Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/serializers/model/JsonContainerLocalityMixIn.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.serializers.model;\n+\n+import org.codehaus.jackson.annotate.JsonCreator;\n+import org.codehaus.jackson.annotate.JsonIgnoreProperties;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+\n+\n+/**\n+ * A mix-in Jackson class to convert {@link org.apache.samza.job.model.ContainerLocality} to/from JSON\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public abstract class JsonContainerLocalityMixIn {\n+  @JsonCreator\n+  public JsonContainerLocalityMixIn(@JsonProperty(\"id\") String id, @JsonProperty(\"host\") String host,\n+      @JsonProperty(\"jmx-url\") String jmxUrl, @JsonProperty(\"jmx-tunneling-url\") String jmxTunnelingUrl) {\n+  }\n+\n+  @JsonProperty(\"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NzA5NzM2", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-474709736", "createdAt": "2020-08-25T17:38:49Z", "commit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozODo0OVrOHGi5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozODo0OVrOHGi5cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNTI2NA==", "bodyText": "In samza we control JMX enable disable with a config, you should only emit JMX metrics here if that config is enabled", "url": "https://github.com/apache/samza/pull/1421#discussion_r476625264", "createdAt": "2020-08-25T17:38:49Z", "author": {"login": "Sanil15"}, "path": "samza-yarn/src/main/java/org/apache/samza/validation/YarnJobValidationTool.java", "diffHunk": "@@ -158,23 +159,24 @@ public void validateJmxMetrics() throws Exception {\n     CoordinatorStreamStore coordinatorStreamStore = new CoordinatorStreamStore(config, metricsRegistry);\n     coordinatorStreamStore.init();\n     try {\n-      Config configFromCoordinatorStream = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n-      ChangelogStreamManager changelogStreamManager = new ChangelogStreamManager(coordinatorStreamStore);\n-      JobModelManager jobModelManager =\n-          JobModelManager.apply(configFromCoordinatorStream, changelogStreamManager.readPartitionMapping(),\n-              coordinatorStreamStore, metricsRegistry);\n+      LocalityManager localityManager =\n+          new LocalityManager(new NamespaceAwareCoordinatorStreamStore(coordinatorStreamStore, SetConfig.TYPE));\n       validator.init(config);\n-      Map<String, String> jmxUrls = jobModelManager.jobModel().getAllContainerToHostValues(SetContainerHostMapping.JMX_TUNNELING_URL_KEY);\n-      for (Map.Entry<String, String> entry : jmxUrls.entrySet()) {\n-        String containerId = entry.getKey();\n-        String jmxUrl = entry.getValue();\n-        log.info(\"validate container \" + containerId + \" metrics with JMX: \" + jmxUrl);\n-        JmxMetricsAccessor jmxMetrics = new JmxMetricsAccessor(jmxUrl);\n-        jmxMetrics.connect();\n-        validator.validate(jmxMetrics);\n-        jmxMetrics.close();\n-        log.info(\"validate container \" + containerId + \" successfully\");\n+      LocalityModel localityModel = localityManager.readLocality();\n+\n+      for (ContainerLocality containerLocality : localityModel.getContainerLocalities().values()) {\n+        String containerId = containerLocality.id();\n+        String jmxUrl = containerLocality.jmxTunnelingUrl();\n+        if (StringUtils.isNotBlank(jmxUrl)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NzE0NTM5", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-474714539", "createdAt": "2020-08-25T17:45:13Z", "commit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0NToxM1rOHGjH0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0NToxM1rOHGjH0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODk0NA==", "bodyText": "Can't we have helper here something like this: readLastSeenHostForContainer(String processorId)\nRather than reading locality hashmap everywhere then doing a get for last seen locality", "url": "https://github.com/apache/samza/pull/1421#discussion_r476628944", "createdAt": "2020-08-25T17:45:13Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "diffHunk": "@@ -53,28 +56,26 @@ public LocalityManager(MetadataStore metadataStore) {\n   }\n \n   /**\n-   * Method to allow read container locality information from the {@link MetadataStore}.\n-   * This method is used in {@link org.apache.samza.coordinator.JobModelManager}.\n+   * Fetch the container locality information from the {@link MetadataStore}.\n    *\n-   * @return the map of containerId: (hostname)\n+   * @return the {@code LocalityModel} for the job\n    */\n-  public Map<String, Map<String, String>> readContainerLocality() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/d2ef4acd8d07f6d6dc4f2947d6849aae70125a95", "committedDate": "2020-08-26T00:44:16Z", "message": "Address Sanil's feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTIzMTM3", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475123137", "createdAt": "2020-08-26T03:20:35Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyMDozNVrOHG6Utg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyMDozNVrOHG6Utg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAwOTA3OA==", "bodyText": "{@link JobModel}", "url": "https://github.com/apache/samza/pull/1421#discussion_r477009078", "createdAt": "2020-08-26T03:20:35Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/context/JobContext.java", "diffHunk": "@@ -46,4 +47,9 @@\n    * @return the id for this job\n    */\n   String getJobId();\n+\n+  /*\n+   * Returns the job model for this job", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI0ODM1", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475124835", "createdAt": "2020-08-26T03:26:33Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyNjozM1rOHG6bLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyNjozM1rOHG6bLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMDczNA==", "bodyText": "Super Nit:\n\"...This locality information is used to place a container, if possible, on the host that it was last seen on....\"", "url": "https://github.com/apache/samza/pull/1421#discussion_r477010734", "createdAt": "2020-08-26T03:26:33Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI1NjQy", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475125642", "createdAt": "2020-08-26T03:29:34Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyOTozNFrOHG6d4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyOTozNFrOHG6d4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTQyNg==", "bodyText": "Would it make sense to add a version field to the model, so that later when someone changes it, downstream code can handle it based on the version number (e.g., int) ?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477011426", "createdAt": "2020-08-26T03:29:34Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ProcessorLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ *\n+ * In YARN deployment model, processors are interchangeably used for container and <i>processorId</i>refers to\n+ * logical container id.\n+ */\n+public class LocalityModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI1ODMz", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475125833", "createdAt": "2020-08-26T03:30:16Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozMDoxNlrOHG6epQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozMDoxNlrOHG6epQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTYyMQ==", "bodyText": "Should we return new HashMap(processorLocalities) so that the caller doesnt modify the original one in this class?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477011621", "createdAt": "2020-08-26T03:30:16Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ProcessorLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ *\n+ * In YARN deployment model, processors are interchangeably used for container and <i>processorId</i>refers to\n+ * logical container id.\n+ */\n+public class LocalityModel {\n+  /*\n+   * A collection of processor locality keyed by processorId.\n+   */\n+  private Map<String, ProcessorLocality> processorLocalities;\n+\n+  /**\n+   * Construct locality model for the job from the input map of processor localities.\n+   * @param processorLocalities host locality information for the job keyed by processor id\n+   */\n+  public LocalityModel(Map<String, ProcessorLocality> processorLocalities) {\n+    this.processorLocalities = processorLocalities;\n+  }\n+\n+  /*\n+   * Returns a {@link Map} of {@link ProcessorLocality} keyed by processors id.\n+   */\n+  public Map<String, ProcessorLocality> getProcessorLocalities() {\n+    return processorLocalities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI3Mjc0", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475127274", "createdAt": "2020-08-26T03:35:38Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozNTozOFrOHG6kDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozNTozOFrOHG6kDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzAwNg==", "bodyText": "Would it make sense to add a timestamp field here, to know when was the information last updated ?\nTimestamps could come in handy when, e.g., debugging race conditions.\nSimilar thoughts on version for this.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477013006", "createdAt": "2020-08-26T03:35:38Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the processor locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ProcessorLocality {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI3NDI1", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475127425", "createdAt": "2020-08-26T03:36:09Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozNjowOVrOHG6kmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozNjowOVrOHG6kmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzE0Ng==", "bodyText": "I long for the day Samza code uses Lombok :-)", "url": "https://github.com/apache/samza/pull/1421#discussion_r477013146", "createdAt": "2020-08-26T03:36:09Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the processor locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ProcessorLocality {\n+  /* Processor identifier. In YARN deployment model, this corresponds to the logical container id */\n+  private String id;\n+  /* Host on which the processor is currently placed */\n+  private String host;\n+  private String jmxUrl;\n+  /* JMX tunneling URL for debugging */\n+  private String jmxTunnelingUrl;\n+\n+  public ProcessorLocality(String id, String host) {\n+    this(id, host, \"\", \"\");\n+  }\n+\n+  public ProcessorLocality(String id, String host, String jmxUrl, String jmxTunnelingUrl) {\n+    this.id = id;\n+    this.host = host;\n+    this.jmxUrl = jmxUrl;\n+    this.jmxTunnelingUrl = jmxTunnelingUrl;\n+  }\n+\n+  public String id() {\n+    return id;\n+  }\n+\n+  public String host() {\n+    return host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI4NjM1", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475128635", "createdAt": "2020-08-26T03:40:34Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo0MDozNFrOHG6pBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo0MDozNFrOHG6pBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxNDI3OQ==", "bodyText": "Do we know which URL would this be exposed under,\nhttp://:/abc\nMight be useful to add it here so if we want analytics or tools to ping it for some reason.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477014279", "createdAt": "2020-08-26T03:40:34Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.ProcessorLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model and configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MTI4OTEz", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-475128913", "createdAt": "2020-08-26T03:41:31Z", "commit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/113fcc52fbb278f8f0b19853c8653c350ad3e228", "committedDate": "2020-08-26T04:04:05Z", "message": "Address Ray's feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MjA5MjQz", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-476209243", "createdAt": "2020-08-27T00:26:28Z", "commit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyNjoyOFrOHHopAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo0MDo0M1rOHHqRjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2NzkzNw==", "bodyText": "redundant, isn't this already done in setup?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477767937", "createdAt": "2020-08-27T00:26:28Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -558,14 +548,19 @@ public Void answer(InvocationOnMock invocation) {\n   public void testContainerPlacementsForJobRunningInDegradedState() throws Exception {\n     // Set failure after retries to false to enable job running in degraded state\n     config = new MapConfig(configVals, getConfigWithHostAffinityAndRetries(true, 1, false));\n-    state = new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+    state = new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n     ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n-    containerManager = spy(new ContainerManager(containerPlacementMetadataStore, state, clusterResourceManager, true, false));\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2ODA5OQ==", "bodyText": "redundant, isn't this already done in setup?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477768099", "createdAt": "2020-08-27T00:26:34Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -672,18 +667,23 @@ public void testAlwaysMoveToAnyHostForHostAffinityDisabled() throws Exception {\n     Map<String, String> conf = new HashMap<>();\n     conf.putAll(getConfigWithHostAffinityAndRetries(false, 1, true));\n     SamzaApplicationState state =\n-        new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+        new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     ClusterResourceManager.Callback callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2ODI4Mw==", "bodyText": "redundant, isn't this already done in setup?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477768283", "createdAt": "2020-08-27T00:26:40Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -807,16 +807,21 @@ public Void answer(InvocationOnMock invocation) {\n   @Test(expected = NullPointerException.class)\n   public void testBadControlRequestRejected() throws Exception {\n     SamzaApplicationState state =\n-        new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+        new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     ClusterResourceManager.Callback callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc5NDcwMQ==", "bodyText": "Why do we need this here can't the callee of this not call LocalityManager since we are already making them independent", "url": "https://github.com/apache/samza/pull/1421#discussion_r477794701", "createdAt": "2020-08-27T00:40:43Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -167,15 +167,18 @@ object JobModelManager extends Logging {\n     */\n   def getProcessorLocality(config: Config, localityManager: LocalityManager) = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MzIwMDIz", "url": "https://github.com/apache/samza/pull/1421#pullrequestreview-476320023", "createdAt": "2020-08-27T01:32:00Z", "commit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5a301fc17a48204d88751e1e235fb95c5e01ba2", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/d5a301fc17a48204d88751e1e235fb95c5e01ba2", "committedDate": "2020-08-27T01:58:13Z", "message": "Address Sanil's comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4700, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}