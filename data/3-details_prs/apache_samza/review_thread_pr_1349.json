{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjE5Mzgz", "number": 1349, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNzo0NlrOD1h7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNzo0NlrOD1h7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU3MDY3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/util/SplitDeploymentUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNzo0NlrOGLBDjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzozMDo1MVrOGLEyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDgxNQ==", "bodyText": "Minor: Could you please update the method name in the log message?", "url": "https://github.com/apache/samza/pull/1349#discussion_r414204815", "createdAt": "2020-04-24T00:07:46Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/util/SplitDeploymentUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.util;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.config.ShellCommandConfig;\n+\n+\n+public final class SplitDeploymentUtil {\n+\n+  /**\n+   * The split deployment feature uses system env {@code ShellCommandConfig.ENV_SPLIT_DEPLOYMENT_ENABLED} to represent\n+   * if the user chooses to enable it.\n+   * This function helps to detect if the split deployment feature is enabled.\n+   *\n+   * @return true if split deployment is enabled; vice versa\n+   */\n+  public static boolean isSplitDeploymentEnabled() {\n+    return Boolean.parseBoolean(System.getenv(ShellCommandConfig.ENV_SPLIT_DEPLOYMENT_ENABLED));\n+  }\n+\n+  /**\n+   * Execute the runner class using a separate isolated classloader.\n+   * @param classLoader {@link ClassLoader} to use to load the runner class which will run\n+   * @param originalRunnerClass {@link Class} for which will be executed with the new class loader.\n+   * @param runMethodName run method name of runner class\n+   * @param runMethodArgs arguments to pass to run method\n+   */\n+  public static void runWithClassLoader(ClassLoader classLoader, Class<?> originalRunnerClass, String runMethodName,\n+      String[] runMethodArgs) {\n+    // need to use the isolated classloader to load run method and then execute using that new class\n+    Class<?> runnerClass;\n+    try {\n+      runnerClass = classLoader.loadClass(originalRunnerClass.getName());\n+    } catch (ClassNotFoundException e) {\n+      throw new SamzaException(String.format(\n+          \"Isolation was enabled, but unable to find %s in isolated classloader\", originalRunnerClass.getName()), e);\n+    }\n+\n+    // save the current context classloader so it can be reset after finishing the call to run method\n+    ClassLoader previousContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    // this is needed because certain libraries (e.g. log4j) use the context classloader\n+    Thread.currentThread().setContextClassLoader(classLoader);\n+\n+    try {\n+      executeRunForRunnerClass(runnerClass, runMethodName, runMethodArgs);\n+    } finally {\n+      // reset the context class loader; it's good practice, and could be important when running a test suite\n+      Thread.currentThread().setContextClassLoader(previousContextClassLoader);\n+    }\n+  }\n+\n+  private static void executeRunForRunnerClass(Class<?> runnerClass, String runMethodName, String[] runMethodArgs) {\n+    Method runMethod;\n+    try {\n+      runMethod = runnerClass.getDeclaredMethod(runMethodName, String[].class);\n+    } catch (NoSuchMethodException e) {\n+      throw new SamzaException(String.format(\"Isolation was enabled, but unable to find %s method\", runMethodName), e);\n+    }\n+    // only sets accessible flag for this method instance\n+    runMethod.setAccessible(true);\n+\n+    try {\n+      // wrapping args in object array so that args is passed as a single argument to the method\n+      runMethod.invoke(null, new Object[]{runMethodArgs});\n+    } catch (IllegalAccessException | InvocationTargetException e) {\n+      throw new SamzaException(\"Exception while executing runClusterBasedJobCoordinator method\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a3c780c51511a9414ca15555230474b0c1b4e45"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2NTg2NA==", "bodyText": "Thanks for pointing out. Done the fix.", "url": "https://github.com/apache/samza/pull/1349#discussion_r414265864", "createdAt": "2020-04-24T03:30:51Z", "author": {"login": "alnzng"}, "path": "samza-core/src/main/java/org/apache/samza/util/SplitDeploymentUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.util;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.config.ShellCommandConfig;\n+\n+\n+public final class SplitDeploymentUtil {\n+\n+  /**\n+   * The split deployment feature uses system env {@code ShellCommandConfig.ENV_SPLIT_DEPLOYMENT_ENABLED} to represent\n+   * if the user chooses to enable it.\n+   * This function helps to detect if the split deployment feature is enabled.\n+   *\n+   * @return true if split deployment is enabled; vice versa\n+   */\n+  public static boolean isSplitDeploymentEnabled() {\n+    return Boolean.parseBoolean(System.getenv(ShellCommandConfig.ENV_SPLIT_DEPLOYMENT_ENABLED));\n+  }\n+\n+  /**\n+   * Execute the runner class using a separate isolated classloader.\n+   * @param classLoader {@link ClassLoader} to use to load the runner class which will run\n+   * @param originalRunnerClass {@link Class} for which will be executed with the new class loader.\n+   * @param runMethodName run method name of runner class\n+   * @param runMethodArgs arguments to pass to run method\n+   */\n+  public static void runWithClassLoader(ClassLoader classLoader, Class<?> originalRunnerClass, String runMethodName,\n+      String[] runMethodArgs) {\n+    // need to use the isolated classloader to load run method and then execute using that new class\n+    Class<?> runnerClass;\n+    try {\n+      runnerClass = classLoader.loadClass(originalRunnerClass.getName());\n+    } catch (ClassNotFoundException e) {\n+      throw new SamzaException(String.format(\n+          \"Isolation was enabled, but unable to find %s in isolated classloader\", originalRunnerClass.getName()), e);\n+    }\n+\n+    // save the current context classloader so it can be reset after finishing the call to run method\n+    ClassLoader previousContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    // this is needed because certain libraries (e.g. log4j) use the context classloader\n+    Thread.currentThread().setContextClassLoader(classLoader);\n+\n+    try {\n+      executeRunForRunnerClass(runnerClass, runMethodName, runMethodArgs);\n+    } finally {\n+      // reset the context class loader; it's good practice, and could be important when running a test suite\n+      Thread.currentThread().setContextClassLoader(previousContextClassLoader);\n+    }\n+  }\n+\n+  private static void executeRunForRunnerClass(Class<?> runnerClass, String runMethodName, String[] runMethodArgs) {\n+    Method runMethod;\n+    try {\n+      runMethod = runnerClass.getDeclaredMethod(runMethodName, String[].class);\n+    } catch (NoSuchMethodException e) {\n+      throw new SamzaException(String.format(\"Isolation was enabled, but unable to find %s method\", runMethodName), e);\n+    }\n+    // only sets accessible flag for this method instance\n+    runMethod.setAccessible(true);\n+\n+    try {\n+      // wrapping args in object array so that args is passed as a single argument to the method\n+      runMethod.invoke(null, new Object[]{runMethodArgs});\n+    } catch (IllegalAccessException | InvocationTargetException e) {\n+      throw new SamzaException(\"Exception while executing runClusterBasedJobCoordinator method\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDgxNQ=="}, "originalCommit": {"oid": "8a3c780c51511a9414ca15555230474b0c1b4e45"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1400, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}