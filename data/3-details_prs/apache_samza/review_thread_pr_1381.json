{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODEwMDk3", "number": 1381, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMjowM1rOEEiOyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMjowM1rOEEiOyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTkwNjAzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/test/java/org/apache/samza/execution/TestJobGraphJsonGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxMjowM1rOGiN41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxODowMFrOGiN-DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMjMxMQ==", "bodyText": "why do you need this? can we just use mock instead?", "url": "https://github.com/apache/samza/pull/1381#discussion_r438532311", "createdAt": "2020-06-11T04:12:03Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/test/java/org/apache/samza/execution/TestJobGraphJsonGenerator.java", "diffHunk": "@@ -368,4 +373,41 @@ String getCountry() {\n       return \"\";\n     }\n   }\n+\n+  @Test\n+  public void testOperatorToMapForTable() {\n+    JobGraphJsonGenerator jsonGenerator = new JobGraphJsonGenerator();\n+    Map<String, Object> map;\n+    SendToTableOperatorSpec<Object, Object> sendToTableOperatorSpec =\n+        OperatorSpecs.createSendToTableOperatorSpec(\"test-sent-to-table\", \"test-sent-to\");\n+    map = jsonGenerator.operatorToMap(sendToTableOperatorSpec);\n+    assertTrue(map.containsKey(\"tableId\"));\n+    assertEquals(map.get(\"tableId\"), \"test-sent-to-table\");\n+    assertEquals(map.get(\"opCode\"), OperatorSpec.OpCode.SEND_TO.name());\n+    assertEquals(map.get(\"opId\"), \"test-sent-to\");\n+    StreamTableJoinOperatorSpec<String, String, String, String> streamTableJoinOperatorSpec =\n+        OperatorSpecs.createStreamTableJoinOperatorSpec(\"test-join-table\", new TestStreamTableJoinFunction(),\n+            \"test-join\");\n+    map = jsonGenerator.operatorToMap(streamTableJoinOperatorSpec);\n+    assertTrue(map.containsKey(\"tableId\"));\n+    assertEquals(map.get(\"tableId\"), \"test-join-table\");\n+    assertEquals(map.get(\"opCode\"), OperatorSpec.OpCode.JOIN.name());\n+    assertEquals(map.get(\"opId\"), \"test-join\");\n+  }\n+\n+  private class TestStreamTableJoinFunction implements StreamTableJoinFunction<String, String, String, String> {\n+    @Override\n+    public String apply(String message, String record) {\n+      return null;\n+    }\n+    @Override\n+    public String getMessageKey(String message) {\n+      return null;\n+    }\n+    @Override\n+    public String getRecordKey(String record) {\n+      return null;\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c890dc693ef582f6215958004873f2edf049e94"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzY0NA==", "bodyText": "ah, good catch! Mock StreamTableJoinFunction  is a good idea, as we can remove those dummy codes.", "url": "https://github.com/apache/samza/pull/1381#discussion_r438533644", "createdAt": "2020-06-11T04:18:00Z", "author": {"login": "alnzng"}, "path": "samza-core/src/test/java/org/apache/samza/execution/TestJobGraphJsonGenerator.java", "diffHunk": "@@ -368,4 +373,41 @@ String getCountry() {\n       return \"\";\n     }\n   }\n+\n+  @Test\n+  public void testOperatorToMapForTable() {\n+    JobGraphJsonGenerator jsonGenerator = new JobGraphJsonGenerator();\n+    Map<String, Object> map;\n+    SendToTableOperatorSpec<Object, Object> sendToTableOperatorSpec =\n+        OperatorSpecs.createSendToTableOperatorSpec(\"test-sent-to-table\", \"test-sent-to\");\n+    map = jsonGenerator.operatorToMap(sendToTableOperatorSpec);\n+    assertTrue(map.containsKey(\"tableId\"));\n+    assertEquals(map.get(\"tableId\"), \"test-sent-to-table\");\n+    assertEquals(map.get(\"opCode\"), OperatorSpec.OpCode.SEND_TO.name());\n+    assertEquals(map.get(\"opId\"), \"test-sent-to\");\n+    StreamTableJoinOperatorSpec<String, String, String, String> streamTableJoinOperatorSpec =\n+        OperatorSpecs.createStreamTableJoinOperatorSpec(\"test-join-table\", new TestStreamTableJoinFunction(),\n+            \"test-join\");\n+    map = jsonGenerator.operatorToMap(streamTableJoinOperatorSpec);\n+    assertTrue(map.containsKey(\"tableId\"));\n+    assertEquals(map.get(\"tableId\"), \"test-join-table\");\n+    assertEquals(map.get(\"opCode\"), OperatorSpec.OpCode.JOIN.name());\n+    assertEquals(map.get(\"opId\"), \"test-join\");\n+  }\n+\n+  private class TestStreamTableJoinFunction implements StreamTableJoinFunction<String, String, String, String> {\n+    @Override\n+    public String apply(String message, String record) {\n+      return null;\n+    }\n+    @Override\n+    public String getMessageKey(String message) {\n+      return null;\n+    }\n+    @Override\n+    public String getRecordKey(String record) {\n+      return null;\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMjMxMQ=="}, "originalCommit": {"oid": "8c890dc693ef582f6215958004873f2edf049e94"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1444, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}