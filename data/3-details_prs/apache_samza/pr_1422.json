{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTE3NTMy", "number": 1422, "title": "SAMZA-2585: Modify shutdown sequence to handle orphaned AMs", "bodyText": "Changes: Modified the shutdown sequence inside YarnClusterResourceManager in order to bring down the AM when the NM on which it resides dies. This prevents the existence of orphaned AMs.\nAPI Changes: None\nTests: Tested the change by manually bringing down the NM on which the AM resided with a yarn job deploy and LXC\nUpgrade Instructions: None\nUsage Instructions: None", "createdAt": "2020-08-27T19:57:16Z", "url": "https://github.com/apache/samza/pull/1422", "merged": true, "mergeCommit": {"oid": "a66fcd16f5b9ed163798be67afb3f3caba6360f0"}, "closed": true, "closedAt": "2020-09-01T22:26:22Z", "author": {"login": "PawasChhokra"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDFyz9AH2gAyNDc0OTE3NTMyOjRjNGQ3N2I2NGE1YjI5NTFmZWNmMjYwOTQ5OGIzOGMxZmY2ZTQ2NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEdrRxgH2gAyNDc0OTE3NTMyOmVhNjY5ZDQzYjUwNjY1ZTc2YjQxMzZmMGExNDU5MDg0NGQ0NTM2NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4c4d77b64a5b2951fecf2609498b38c1ff6e4648", "author": {"user": {"login": "PawasChhokra", "name": "Pawas Chhokra"}}, "url": "https://github.com/apache/samza/commit/4c4d77b64a5b2951fecf2609498b38c1ff6e4648", "committedDate": "2020-08-27T19:44:02Z", "message": "Modify shutdown sequence for orphaned AMs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a", "author": {"user": {"login": "PawasChhokra", "name": "Pawas Chhokra"}}, "url": "https://github.com/apache/samza/commit/fafb795c26bec36d11b681c48b2c6333ff623e9a", "committedDate": "2020-08-27T20:13:17Z", "message": "Modify test for shutdown sequence for orphaned AMs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDU5MzM3", "url": "https://github.com/apache/samza/pull/1422#pullrequestreview-477059337", "createdAt": "2020-08-27T20:31:57Z", "commit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozMTo1N1rOHIgOZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDo0MToxMlrOHIgf7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3ODYzMQ==", "bodyText": "why not leverage stop(SamzaAppStatus.FAILED) up top? I like some additional logs. so maybe modify the stop(...) to include this logs for better debuggability.", "url": "https://github.com/apache/samza/pull/1422#discussion_r478678631", "createdAt": "2020-08-27T20:31:57Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -485,7 +485,15 @@ public void onContainersAllocated(List<Container> containers) {\n   //nodes being updated. We always return 0 when asked for progress by Yarn.\n   @Override\n   public void onShutdownRequest() {\n-    //not implemented currently.\n+    log.info(\"Stopping the AM client on shutdown request.\");\n+    lifecycle.onShutdown(SamzaApplicationState.SamzaAppStatus.FAILED);\n+    amClient.stop();\n+    log.info(\"Stopping the NM client on shutdown request.\");\n+    nmClientAsync.stop();\n+    log.info(\"Stopping the SamzaYarnAppMasterService service on shutdown request.\");\n+    service.onShutdown();\n+    log.info(\"Stopping SamzaAppMasterMetrics on shutdown request.\");\n+    metrics.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MDQ5Ng==", "bodyText": "can we add some comments around what this scenario (app attempt removed from RM cache) means and also update the log statement to reflect it? It will be helpful for folks who don't have much context on YARN.", "url": "https://github.com/apache/samza/pull/1422#discussion_r478680496", "createdAt": "2020-08-27T20:35:45Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/scala/org/apache/samza/job/yarn/SamzaYarnAppMasterLifecycle.scala", "diffHunk": "@@ -68,7 +69,12 @@ class SamzaYarnAppMasterLifecycle(containerMem: Int, containerCpu: Int, samzaApp\n     //allowing the RM to restart it (potentially on a different host)\n     if(samzaAppStatus != SamzaAppStatus.UNDEFINED) {\n       info(\"Unregistering AM from the RM.\")\n-      amClient.unregisterApplicationMaster(yarnStatus, shutdownMessage, null)\n+      try {\n+        amClient.unregisterApplicationMaster(yarnStatus, shutdownMessage, null)\n+      } catch {\n+        case ex: InvalidApplicationMasterRequestException =>\n+          info(\"Removed application attempt from RM cache.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MTgyMw==", "bodyText": "Can this throw some other exception? What is our expectation if this is unsuccessful? Should we still try to shutdown the rest of the components or just crash the JVM?\nI'd prefer former, to handle other kind of exception if any and try to shutdown the AM as clean as possible.", "url": "https://github.com/apache/samza/pull/1422#discussion_r478681823", "createdAt": "2020-08-27T20:38:37Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/scala/org/apache/samza/job/yarn/SamzaYarnAppMasterLifecycle.scala", "diffHunk": "@@ -68,7 +69,12 @@ class SamzaYarnAppMasterLifecycle(containerMem: Int, containerCpu: Int, samzaApp\n     //allowing the RM to restart it (potentially on a different host)\n     if(samzaAppStatus != SamzaAppStatus.UNDEFINED) {\n       info(\"Unregistering AM from the RM.\")\n-      amClient.unregisterApplicationMaster(yarnStatus, shutdownMessage, null)\n+      try {\n+        amClient.unregisterApplicationMaster(yarnStatus, shutdownMessage, null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MjQwOA==", "bodyText": "Perhaps add cases for unregister throwing exceptions too.", "url": "https://github.com/apache/samza/pull/1422#discussion_r478682408", "createdAt": "2020-08-27T20:39:47Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/test/java/org/apache/samza/job/yarn/TestYarnClusterResourceManager.java", "diffHunk": "@@ -103,4 +104,30 @@ public void testAllocatedResourceExpiryForYarn() {\n \n     Assert.assertTrue(yarnClusterResourceManager.isResourceExpired(allocatedResource));\n   }\n+\n+  @Test\n+  public void testAMShutdownOnRMCallback() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4MzExOQ==", "bodyText": "should we also verify if unregister is called? Since if we don't unregister, we will end up retrying and its important this code path doesn't get broken when someone modifies to use a different status to invoke lifecycle.onShutdown(...)", "url": "https://github.com/apache/samza/pull/1422#discussion_r478683119", "createdAt": "2020-08-27T20:41:12Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/test/java/org/apache/samza/job/yarn/TestYarnClusterResourceManager.java", "diffHunk": "@@ -103,4 +104,30 @@ public void testAllocatedResourceExpiryForYarn() {\n \n     Assert.assertTrue(yarnClusterResourceManager.isResourceExpired(allocatedResource));\n   }\n+\n+  @Test\n+  public void testAMShutdownOnRMCallback() {\n+    // create mocks\n+    YarnConfiguration yarnConfiguration = mock(YarnConfiguration.class);\n+    SamzaAppMasterMetrics metrics = mock(SamzaAppMasterMetrics.class);\n+    Config config = mock(Config.class);\n+    AMRMClientAsync asyncClient = mock(AMRMClientAsync.class);\n+    YarnAppState yarnAppState = new YarnAppState(0, mock(ContainerId.class), \"host\", 8080, 8081);\n+    SamzaYarnAppMasterLifecycle lifecycle = mock(SamzaYarnAppMasterLifecycle.class);\n+    SamzaYarnAppMasterService service = mock(SamzaYarnAppMasterService.class);\n+    NMClientAsync asyncNMClient = mock(NMClientAsync.class);\n+    ClusterResourceManager.Callback callback = mock(ClusterResourceManager.Callback.class);\n+\n+    // start the cluster manager\n+    YarnClusterResourceManager yarnClusterResourceManager = new YarnClusterResourceManager(asyncClient, asyncNMClient,\n+        callback, yarnAppState, lifecycle, service, metrics, yarnConfiguration, config);\n+\n+    yarnClusterResourceManager.onShutdownRequest();\n+\n+    verify(lifecycle, times(1)).onShutdown(SamzaApplicationState.SamzaAppStatus.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fafb795c26bec36d11b681c48b2c6333ff623e9a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4cb2bbc67d80cb1ed4c81dd006a73d671d5e661", "author": {"user": {"login": "PawasChhokra", "name": "Pawas Chhokra"}}, "url": "https://github.com/apache/samza/commit/c4cb2bbc67d80cb1ed4c81dd006a73d671d5e661", "committedDate": "2020-08-31T16:23:29Z", "message": "Address review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTEzNjM5", "url": "https://github.com/apache/samza/pull/1422#pullrequestreview-478913639", "createdAt": "2020-08-31T20:01:18Z", "commit": {"oid": "c4cb2bbc67d80cb1ed4c81dd006a73d671d5e661"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDowMToxOVrOHKHTHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDowMjowNVrOHKHUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NzM5MQ==", "bodyText": "AM isn't dead yet right? Shouldn't this be once the NM dies Which brings up another interesting question. Have you validated the behavior when yarn.nodemanager.recovery.enabled is set to true vs false?", "url": "https://github.com/apache/samza/pull/1422#discussion_r480367391", "createdAt": "2020-08-31T20:01:19Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/scala/org/apache/samza/job/yarn/SamzaYarnAppMasterLifecycle.scala", "diffHunk": "@@ -68,8 +71,17 @@ class SamzaYarnAppMasterLifecycle(containerMem: Int, containerCpu: Int, samzaApp\n     //allowing the RM to restart it (potentially on a different host)\n     if(samzaAppStatus != SamzaAppStatus.UNDEFINED) {\n       info(\"Unregistering AM from the RM.\")\n-      amClient.unregisterApplicationMaster(yarnStatus, shutdownMessage, null)\n-      info(\"Unregister complete.\")\n+      try {\n+        amClient.unregisterApplicationMaster(yarnStatus, shutdownMessage, null)\n+        info(\"Unregister complete.\")\n+      } catch {\n+        case ex: InvalidApplicationMasterRequestException =>\n+          // Once the AM dies, the corresponding app attempt ID is removed from the RM cache so that the RM can spin up a new AM and its containers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4cb2bbc67d80cb1ed4c81dd006a73d671d5e661"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2Nzc3Mg==", "bodyText": "nit: avoid * imports and import explicitly.", "url": "https://github.com/apache/samza/pull/1422#discussion_r480367772", "createdAt": "2020-08-31T20:02:05Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/test/java/org/apache/samza/job/yarn/TestYarnClusterResourceManager.java", "diffHunk": "@@ -19,28 +19,36 @@\n \n package org.apache.samza.job.yarn;\n \n+import java.io.IOException;\n import java.time.Duration;\n import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n import org.apache.hadoop.yarn.api.records.ApplicationId;\n import org.apache.hadoop.yarn.api.records.Container;\n import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;\n import org.apache.hadoop.yarn.api.records.NodeId;\n import org.apache.hadoop.yarn.api.records.Priority;\n import org.apache.hadoop.yarn.api.records.Resource;\n import org.apache.hadoop.yarn.api.records.Token;\n import org.apache.hadoop.yarn.client.api.async.AMRMClientAsync;\n import org.apache.hadoop.yarn.client.api.async.NMClientAsync;\n import org.apache.hadoop.yarn.conf.YarnConfiguration;\n+import org.apache.hadoop.yarn.exceptions.InvalidApplicationMasterRequestException;\n+import org.apache.hadoop.yarn.exceptions.YarnException;\n import org.apache.samza.clustermanager.ClusterResourceManager;\n+import org.apache.samza.clustermanager.SamzaApplicationState;\n import org.apache.samza.clustermanager.SamzaResource;\n import org.apache.samza.config.Config;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.Mockito;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.Matchers.anyObject;\n+import static org.junit.Assert.*;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.any;\n import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4cb2bbc67d80cb1ed4c81dd006a73d671d5e661"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea669d43b50665e76b4136f0a14590844d453653", "author": {"user": {"login": "PawasChhokra", "name": "Pawas Chhokra"}}, "url": "https://github.com/apache/samza/commit/ea669d43b50665e76b4136f0a14590844d453653", "committedDate": "2020-09-01T02:07:27Z", "message": "Address review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4703, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}