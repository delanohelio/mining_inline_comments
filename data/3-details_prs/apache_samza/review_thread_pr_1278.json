{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTA1NDU5", "number": 1278, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowNzo0MFrODf-Tug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1Njo0NVrODgDHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODUzMzA2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowNzo0MFrOFp_LIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoyNzozMFrOFp_rcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MDk3Nw==", "bodyText": "Let's just call this jobModelManager", "url": "https://github.com/apache/samza/pull/1278#discussion_r379570977", "createdAt": "2020-02-14T18:07:40Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -51,15 +70,11 @@ class ProcessJobFactory extends StreamJobFactory with Logging {\n     val coordinatorStreamStore: CoordinatorStreamStore = new CoordinatorStreamStore(config, new MetricsRegistryMap())\n     coordinatorStreamStore.init()\n \n-    val configFromCoordinatorStream: Config = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore)\n-\n     val changelogStreamManager = new ChangelogStreamManager(new NamespaceAwareCoordinatorStreamStore(coordinatorStreamStore, SetChangelogMapping.TYPE))\n-\n-    val coordinator = JobModelManager(configFromCoordinatorStream, changelogStreamManager.readPartitionMapping(),\n-      coordinatorStreamStore, metricsRegistry)\n+    val coordinator = JobModelManager(config, changelogStreamManager.readPartitionMapping(), coordinatorStreamStore, metricsRegistry)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db667203d2f164bd2eb57ddbb8830f5b36705e3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3OTI0OQ==", "bodyText": "updated, nice catch, not sure why it was named coordinator before.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379579249", "createdAt": "2020-02-14T18:27:30Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -51,15 +70,11 @@ class ProcessJobFactory extends StreamJobFactory with Logging {\n     val coordinatorStreamStore: CoordinatorStreamStore = new CoordinatorStreamStore(config, new MetricsRegistryMap())\n     coordinatorStreamStore.init()\n \n-    val configFromCoordinatorStream: Config = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore)\n-\n     val changelogStreamManager = new ChangelogStreamManager(new NamespaceAwareCoordinatorStreamStore(coordinatorStreamStore, SetChangelogMapping.TYPE))\n-\n-    val coordinator = JobModelManager(configFromCoordinatorStream, changelogStreamManager.readPartitionMapping(),\n-      coordinatorStreamStore, metricsRegistry)\n+    val coordinator = JobModelManager(config, changelogStreamManager.readPartitionMapping(), coordinatorStreamStore, metricsRegistry)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MDk3Nw=="}, "originalCommit": {"oid": "4db667203d2f164bd2eb57ddbb8830f5b36705e3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODUzNDI0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowODowMVrOFp_Lyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODowODowMVrOFp_Lyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MTE0Nw==", "bodyText": "Minor: Let's remove \"stand alone\"", "url": "https://github.com/apache/samza/pull/1278#discussion_r379571147", "createdAt": "2020-02-14T18:08:01Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,44 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n  * Creates a stand alone ProcessJob with the specified config.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db667203d2f164bd2eb57ddbb8830f5b36705e3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODUzOTg2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoxMDoxNlrOFp_Pcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODozMzoyMFrOFp_12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MjA4Mw==", "bodyText": "It'll be useful to explain in the PR description why this change is necessary (under Changes), and what has changed from a user perspective (in the API changes section).", "url": "https://github.com/apache/samza/pull/1278#discussion_r379572083", "createdAt": "2020-02-14T18:10:16Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,44 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n  * Creates a stand alone ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    val originalConfig = ConfigUtil.loadConfig(submissionConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db667203d2f164bd2eb57ddbb8830f5b36705e3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4MTkxMg==", "bodyText": "Updated.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379581912", "createdAt": "2020-02-14T18:33:20Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,44 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n  * Creates a stand alone ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    val originalConfig = ConfigUtil.loadConfig(submissionConfig)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MjA4Mw=="}, "originalCommit": {"oid": "4db667203d2f164bd2eb57ddbb8830f5b36705e3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODU0Mjk4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoxMToyNlrOFp_RaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoxMToyNlrOFp_RaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3MjU4NQ==", "bodyText": "\"Only single stage jobs are supported with ProcessJobFactory.\"", "url": "https://github.com/apache/samza/pull/1278#discussion_r379572585", "createdAt": "2020-02-14T18:11:26Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,44 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n  * Creates a stand alone ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    val originalConfig = ConfigUtil.loadConfig(submissionConfig)\n+\n+    // Execute planning\n+    val planner = new RemoteJobPlanner(ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig))\n+    val jobConfigs = planner.prepareJobs\n+\n+    if (jobConfigs.size != 1) {\n+      throw new SamzaException(\"Only single process job is supported.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db667203d2f164bd2eb57ddbb8830f5b36705e3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMxNTE5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1Mjo0NlrOFqGrUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1OToyN1rOFqGwaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5MzkwNQ==", "bodyText": "From the naming of RemoteJobPlanner, this seems out of place. I believe RemoteJobPlanner was intended for use in RemoteApplicationRunner, but theoretically, any ApplicationRunner can be used with any StreamJobFactory.\nI guess the layers of abstraction are changing with the simplification of the job runners, but maybe we should rename some classes/interfaces and make sure the logic is in the right place as well.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379693905", "createdAt": "2020-02-14T23:52:46Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,48 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n- * Creates a stand alone ProcessJob with the specified config.\n+ * Creates a ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    var config = submissionConfig\n+\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {\n+      val originalConfig = ConfigUtil.loadConfig(submissionConfig)\n+\n+      // Execute planning\n+      val planner = new RemoteJobPlanner(ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NTIwOA==", "bodyText": "Agree, it is interesting that StreamJobFactory is only used in JobRunner, and JobRunner is only used in RemoteApplicationRunner, i.e. StreamJobFactory is only intended to be used for remote job, so RemoteJobPlanner technically fits here. I agree we have excessive layers in our structure which should be simplified to avoid future confusion.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379695208", "createdAt": "2020-02-14T23:59:27Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,48 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n- * Creates a stand alone ProcessJob with the specified config.\n+ * Creates a ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    var config = submissionConfig\n+\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {\n+      val originalConfig = ConfigUtil.loadConfig(submissionConfig)\n+\n+      // Execute planning\n+      val planner = new RemoteJobPlanner(ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5MzkwNQ=="}, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMxNjQ1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1Mzo0OFrOFqGsBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowMDowMlrOFqGw1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDA4Nw==", "bodyText": "Similar to above: does this only need to be consistent with RemoteApplicationRunner?", "url": "https://github.com/apache/samza/pull/1278#discussion_r379694087", "createdAt": "2020-02-14T23:53:48Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,48 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n- * Creates a stand alone ProcessJob with the specified config.\n+ * Creates a ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    var config = submissionConfig\n+\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {\n+      val originalConfig = ConfigUtil.loadConfig(submissionConfig)\n+\n+      // Execute planning\n+      val planner = new RemoteJobPlanner(ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig))\n+      val jobConfigs = planner.prepareJobs\n+\n+      if (jobConfigs.size != 1) {\n+        throw new SamzaException(\"Only single process job is supported.\")\n+      }\n+\n+      // This is the full job config\n+      config = jobConfigs.get(0)\n+      // This needs to be consistent with RemoteApplicationRunner#run where JobRunner#submit to be called instead of JobRunner#run\n+      CoordinatorStreamUtil.writeConfigToCoordinatorStream(config)\n+      DiagnosticsUtil.createDiagnosticsStream(config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NTMxOQ==", "bodyText": "Yes, StreamFactory is only used by JobRunner, which is only used by RemoteApplicationRunner.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379695319", "createdAt": "2020-02-15T00:00:02Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -22,25 +22,48 @@ package org.apache.samza.job.local\n import java.util\n \n import org.apache.samza.SamzaException\n+import org.apache.samza.application.ApplicationUtil\n+import org.apache.samza.application.descriptors.ApplicationDescriptorUtil\n import org.apache.samza.config.{Config, JobConfig, TaskConfig}\n import org.apache.samza.container.TaskName\n import org.apache.samza.coordinator.metadatastore.{CoordinatorStreamStore, NamespaceAwareCoordinatorStreamStore}\n import org.apache.samza.coordinator.stream.messages.SetChangelogMapping\n import org.apache.samza.coordinator.{JobModelManager, MetadataResourceUtil}\n+import org.apache.samza.execution.RemoteJobPlanner\n import org.apache.samza.job.model.JobModelUtil\n import org.apache.samza.job.{CommandBuilder, ShellCommandBuilder, StreamJob, StreamJobFactory}\n import org.apache.samza.metrics.MetricsRegistryMap\n import org.apache.samza.startpoint.StartpointManager\n import org.apache.samza.storage.ChangelogStreamManager\n-import org.apache.samza.util.{CoordinatorStreamUtil, Logging, ReflectionUtil}\n+import org.apache.samza.util.{ConfigUtil, CoordinatorStreamUtil, DiagnosticsUtil, Logging, ReflectionUtil}\n \n import scala.collection.JavaConversions._\n \n /**\n- * Creates a stand alone ProcessJob with the specified config.\n+ * Creates a ProcessJob with the specified config.\n  */\n class ProcessJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n+    var config = submissionConfig\n+\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {\n+      val originalConfig = ConfigUtil.loadConfig(submissionConfig)\n+\n+      // Execute planning\n+      val planner = new RemoteJobPlanner(ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig))\n+      val jobConfigs = planner.prepareJobs\n+\n+      if (jobConfigs.size != 1) {\n+        throw new SamzaException(\"Only single process job is supported.\")\n+      }\n+\n+      // This is the full job config\n+      config = jobConfigs.get(0)\n+      // This needs to be consistent with RemoteApplicationRunner#run where JobRunner#submit to be called instead of JobRunner#run\n+      CoordinatorStreamUtil.writeConfigToCoordinatorStream(config)\n+      DiagnosticsUtil.createDiagnosticsStream(config)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDA4Nw=="}, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMxOTQ0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1NTo1MlrOFqGttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1NTo1MlrOFqGttg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDUxOA==", "bodyText": "Could you please update this comment? It looks like it was out-of-date before you made your changes, but would be nice to clarify it now.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379694518", "createdAt": "2020-02-14T23:55:52Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ProcessJobFactory.scala", "diffHunk": "@@ -87,13 +106,13 @@ class ProcessJobFactory extends StreamJobFactory with Logging {\n     val commandBuilder = ReflectionUtil.getObj(commandBuilderClass, classOf[CommandBuilder])\n \n     // JobCoordinator is stopped by ProcessJob when it exits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMxOTk2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ThreadJobFactory.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1NjoxMlrOFqGuBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1NjoxMlrOFqGuBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDU5Nw==", "bodyText": "Similar to above about RemoteJobPlanner", "url": "https://github.com/apache/samza/pull/1278#discussion_r379694597", "createdAt": "2020-02-14T23:56:12Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ThreadJobFactory.scala", "diffHunk": "@@ -45,20 +47,36 @@ import scala.collection.mutable\n   * Creates a new Thread job with the given config\n   */\n class ThreadJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n     info(\"Creating a ThreadJob, which is only meant for debugging.\")\n+    var config = submissionConfig\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {\n+      val originalConfig = ConfigUtil.loadConfig(submissionConfig)\n+\n+      // Execute planning\n+      val planner = new RemoteJobPlanner(ApplicationDescriptorUtil.getAppDescriptor(ApplicationUtil.fromConfig(originalConfig), originalConfig))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTMyMDY3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/job/local/ThreadJobFactory.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzo1Njo0NVrOFqGucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMDowMTowNlrOFqGxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDcwNw==", "bodyText": "This block seems duplicated with ProcessJobFactory. Any benefit in sharing code?", "url": "https://github.com/apache/samza/pull/1278#discussion_r379694707", "createdAt": "2020-02-14T23:56:45Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ThreadJobFactory.scala", "diffHunk": "@@ -45,20 +47,36 @@ import scala.collection.mutable\n   * Creates a new Thread job with the given config\n   */\n class ThreadJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n     info(\"Creating a ThreadJob, which is only meant for debugging.\")\n+    var config = submissionConfig\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NTUxOA==", "bodyText": "I am planning to simplify and refactor all of them after I introduces beam related planning.", "url": "https://github.com/apache/samza/pull/1278#discussion_r379695518", "createdAt": "2020-02-15T00:01:06Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/job/local/ThreadJobFactory.scala", "diffHunk": "@@ -45,20 +47,36 @@ import scala.collection.mutable\n   * Creates a new Thread job with the given config\n   */\n class ThreadJobFactory extends StreamJobFactory with Logging {\n-  def getJob(config: Config): StreamJob = {\n+  def getJob(submissionConfig: Config): StreamJob = {\n     info(\"Creating a ThreadJob, which is only meant for debugging.\")\n+    var config = submissionConfig\n+    if (new JobConfig(submissionConfig).getConfigLoaderFactory.isPresent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NDcwNw=="}, "originalCommit": {"oid": "0ab2aa8fae906918a04ea132dfb7426b15563bd1"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1573, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}