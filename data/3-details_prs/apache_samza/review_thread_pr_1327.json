{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzM4MDYz", "number": 1327, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1MDozMVrODtPgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoyMTo0MFrODukjRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY2NjE4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1MDozMVrOF-jjYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1Mjo0MlrOGBlbYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ==", "bodyText": "Why do this as a config instead of a parameter?\nIf internal config, let's use samza.internal prefix.", "url": "https://github.com/apache/samza/pull/1327#discussion_r401138531", "createdAt": "2020-03-31T18:50:31Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MjczNw==", "bodyText": "@prateekm The rationale between @mynameborat and I is that the internal config was a lighter-weight change.\nPassing this via construction parameter would mean changing the CheckpointManagerFactory API and underlying implementations. If we're ok with that, I'm open to either approach.", "url": "https://github.com/apache/samza/pull/1327#discussion_r401142737", "createdAt": "2020-03-31T18:57:23Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNzYxNQ==", "bodyText": "+1 to internal prefix. We were debating between passing the exposing task mode through parameter vs config. The config route seemed less invasive and also doesn't introduce breaking API changes.\nIIRC, we want to know if the container is standby or not. Given KafkaCheckpointManager is a singleton for the container, is there a way to infer on the fly from the existing configurations if it is standby or active? for e.g. task.inputs is empty?", "url": "https://github.com/apache/samza/pull/1327#discussion_r401217615", "createdAt": "2020-03-31T21:10:57Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NzA4Mg==", "bodyText": "I spoke with @rmatharu and there is nothing in config we can use to infer standby vs not. If we're all ok with the internal config, I will change the prefix and we can go with that.\nMay also be worth pointing out that this PR doesn't do much to lock us into anything - if we later want to treat this information as more a first class citizen we can go ahead and change the factory API.", "url": "https://github.com/apache/samza/pull/1327#discussion_r401947082", "createdAt": "2020-04-01T22:28:15Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMTAxMQ==", "bodyText": "Is adding a parameter like JobModel or containermodel, etc to CheckpointManagerFactory  a big deal?", "url": "https://github.com/apache/samza/pull/1327#discussion_r402701011", "createdAt": "2020-04-03T02:24:40Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTcxNA==", "bodyText": "@rmatharu @mynameborat @prateekm\nYou'll need some visibility on the calling-container, so jobModel + containerId or containerModel would work.\nAt least one usage of CheckpointManagerFactory does not have this information available (it is used in StreamManager during execution planning, before the job model is created). I suppose we could make the parameter nullable in this case.\nThere is also usage in our tooling (recovery and checkpoint tools) that expects an instance of CheckpointManager to be shared within the same job. It does however seem like these can be easily refactored.\nIn addition to the two considerations above, changing the API would impact any existing open source customers who have implemented CheckpointManagerFactory for their own use cases. In this case perhaps we mark the existing method as deprecated and remove in a future version.\nIMO those are heavy changes to make just for one implementer of CheckpointManagerFactory to be able to toggle its consumer behavior.\nFor context, stopping the consumer after initial read is an optimization (https://github.com/apache/samza/pull/993/files) because BlockingEnvelopeMap buffers were being filled with messages that would never be read.\nAn alternative to this PR could be tackling that optimization differently. Fetch thresholds in BEM are currently configured per system. We wouldn't want to override this fetch threshold for the whole checkpoint system since it may overlap with other streams and impact job perf. However, if we implemented fetch thresholds at the system-stream / SSP granularity we could avoid this stop in some cases vs others bifurcation and instead limit buffering specifically for the checkpoint stream.\nTL;DR, my opinion:\n\nThis PR is the shortest path forward.\nModifying CheckpointManagerFactory API is unjustified.\nAlternative to this PR would be to approach the original problem of optimization a bit differently.", "url": "https://github.com/apache/samza/pull/1327#discussion_r403261714", "createdAt": "2020-04-03T19:25:29Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5MzE2MQ==", "bodyText": "I agree. For now, the config approach is minimally invasive and backward compatible. We can always reevaluate this if there is a stronger justification to have container model exposed to the checkpoint manager.\nSince it is not a user config, we should be able to deprecate it without much effort.", "url": "https://github.com/apache/samza/pull/1327#discussion_r403293161", "createdAt": "2020-04-03T20:06:49Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxNTcxNw==", "bodyText": "makes sense", "url": "https://github.com/apache/samza/pull/1327#discussion_r403315717", "createdAt": "2020-04-03T20:36:57Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNDk3OQ==", "bodyText": "Closing this thread then. Thanks.", "url": "https://github.com/apache/samza/pull/1327#discussion_r404314979", "createdAt": "2020-04-06T18:52:42Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzODUzMQ=="}, "originalCommit": {"oid": "27c75ad50bc3ce109b1acb6c5a99690758b320ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzU0MDYzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoyMDo0MFrOGAC24A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoyMzo0NVrOGArbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMDAwMA==", "bodyText": "Lets maybe add a one-line description of what this config does?\nAlso if it'd be possible to shrink the name somewhat.", "url": "https://github.com/apache/samza/pull/1327#discussion_r402700000", "createdAt": "2020-04-03T02:20:40Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String INTERNAL_CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"samza.internal.task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf98ab8c9df5de93d88860d822a9994c85a02fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NDM3Mg==", "bodyText": "I initially thought of something like samza.internal.task.checkpoint.consumer.keep.open but thought that the name in the PR currently is more expressive of behavior.\nThoughts?", "url": "https://github.com/apache/samza/pull/1327#discussion_r403364372", "createdAt": "2020-04-03T22:22:46Z", "author": {"login": "bkonold"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String INTERNAL_CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"samza.internal.task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMDAwMA=="}, "originalCommit": {"oid": "fbf98ab8c9df5de93d88860d822a9994c85a02fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NDcwMA==", "bodyText": "sure lets go with that one then", "url": "https://github.com/apache/samza/pull/1327#discussion_r403364700", "createdAt": "2020-04-03T22:23:45Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/config/TaskConfig.java", "diffHunk": "@@ -105,6 +105,7 @@\n   private static final String BROADCAST_STREAM_PATTERN = \"^[\\\\d]+$\";\n   private static final String BROADCAST_STREAM_RANGE_PATTERN = \"^\\\\[[\\\\d]+\\\\-[\\\\d]+\\\\]$\";\n   public static final String CHECKPOINT_MANAGER_FACTORY = \"task.checkpoint.factory\";\n+  public static final String INTERNAL_CHECKPOINT_MANAGER_CONSUMER_STOP_AFTER_FIRST_READ = \"samza.internal.task.checkpoint.consumer.stop.after.first.read\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMDAwMA=="}, "originalCommit": {"oid": "fbf98ab8c9df5de93d88860d822a9994c85a02fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTU5OTQwOnYy", "diffSide": "RIGHT", "path": "samza-kafka/src/main/scala/org/apache/samza/checkpoint/kafka/KafkaCheckpointManager.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoyMTo0MFrOGAnu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1MjoyNVrOGBlaqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwNDE2Ng==", "bodyText": "can we put in a comment on when this config is set vs not?", "url": "https://github.com/apache/samza/pull/1327#discussion_r403304166", "createdAt": "2020-04-03T20:21:40Z", "author": {"login": "mynameborat"}, "path": "samza-kafka/src/main/scala/org/apache/samza/checkpoint/kafka/KafkaCheckpointManager.scala", "diffHunk": "@@ -76,6 +76,8 @@ class KafkaCheckpointManager(checkpointSpec: KafkaStreamSpec,\n   val producerRef: AtomicReference[SystemProducer] = new AtomicReference[SystemProducer](getSystemProducer())\n   val producerCreationLock: Object = new Object\n \n+  val stopConsumerAfterFirstRead: Boolean = new TaskConfig(config).getCheckpointManagerConsumerStopAfterFirstRead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf98ab8c9df5de93d88860d822a9994c85a02fd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNDc5NQ==", "bodyText": "Done", "url": "https://github.com/apache/samza/pull/1327#discussion_r404314795", "createdAt": "2020-04-06T18:52:25Z", "author": {"login": "bkonold"}, "path": "samza-kafka/src/main/scala/org/apache/samza/checkpoint/kafka/KafkaCheckpointManager.scala", "diffHunk": "@@ -76,6 +76,8 @@ class KafkaCheckpointManager(checkpointSpec: KafkaStreamSpec,\n   val producerRef: AtomicReference[SystemProducer] = new AtomicReference[SystemProducer](getSystemProducer())\n   val producerCreationLock: Object = new Object\n \n+  val stopConsumerAfterFirstRead: Boolean = new TaskConfig(config).getCheckpointManagerConsumerStopAfterFirstRead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwNDE2Ng=="}, "originalCommit": {"oid": "fbf98ab8c9df5de93d88860d822a9994c85a02fd"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1616, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}