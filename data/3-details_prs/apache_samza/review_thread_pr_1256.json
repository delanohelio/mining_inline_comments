{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjAxMjQ5", "number": 1256, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzoyMVrODaBKAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToyODo1OFrODbE_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4NTE1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzoyMVrOFgvP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzoyMVrOFgvP2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3Mjg1OA==", "bodyText": "nit: might as well fix the entire doc. \"Recovers the state store from the changelog stream and stores in the directory provided....\"", "url": "https://github.com/apache/samza/pull/1256#discussion_r369872858", "createdAt": "2020-01-23T00:07:21Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -63,11 +62,11 @@\n \n \n /**\n- * Recovers the state storages from the changelog streams and store the storages\n+ * Recovers the state storage from the changelog streams and store the storages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA4NzEwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/checkpoint/CheckpointTool.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowODoyOFrOFgvQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoyMzoyNlrOFgvgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzE0OA==", "bodyText": "nit: rename in to something meaningful?", "url": "https://github.com/apache/samza/pull/1256#discussion_r369873148", "createdAt": "2020-01-23T00:08:28Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/scala/org/apache/samza/checkpoint/CheckpointTool.scala", "diffHunk": "@@ -117,10 +118,15 @@ object CheckpointTool {\n         .mapValues(m => m.reduce( _ ++ _))  // Merge all the maps of SSPs->Offset into one for the whole taskname\n     }\n \n-    override def loadConfig(options: OptionSet): MapConfig = {\n+    override def loadConfig(options: OptionSet): Config = {\n       val config = super.loadConfig(options)\n       if (options.has(newOffsetsOpt)) {\n-        val properties = configFactory.getConfig(options.valueOf(newOffsetsOpt))\n+        val in = new FileInputStream(options.valueOf(newOffsetsOpt).getPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NzEwNg==", "bodyText": "Renamed to newOffsetsInputStream", "url": "https://github.com/apache/samza/pull/1256#discussion_r369877106", "createdAt": "2020-01-23T00:23:26Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/checkpoint/CheckpointTool.scala", "diffHunk": "@@ -117,10 +118,15 @@ object CheckpointTool {\n         .mapValues(m => m.reduce( _ ++ _))  // Merge all the maps of SSPs->Offset into one for the whole taskname\n     }\n \n-    override def loadConfig(options: OptionSet): MapConfig = {\n+    override def loadConfig(options: OptionSet): Config = {\n       val config = super.loadConfig(options)\n       if (options.has(newOffsetsOpt)) {\n-        val properties = configFactory.getConfig(options.valueOf(newOffsetsOpt))\n+        val in = new FileInputStream(options.valueOf(newOffsetsOpt).getPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzE0OA=="}, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjA5Mzc4OnYy", "diffSide": "RIGHT", "path": "samza-test/src/main/config/join/joiner.samza", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoxMjozNFrOFgvVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoyMDo1NFrOFgvd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NDE5MQ==", "bodyText": "Can you add more details here? Not sure what update this refers to?", "url": "https://github.com/apache/samza/pull/1256#discussion_r369874191", "createdAt": "2020-01-23T00:12:34Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/main/config/join/joiner.samza", "diffHunk": "@@ -16,6 +16,33 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+####################\n+### UPDATE THIS! ###", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NjQ0NA==", "bodyText": "These unit tests are reading two files, common.properties and joiner.samza, as the input config, after updating to use ConfigLoader, we do not want to read from multiple files anymore, so I am deleting common.properties file and move all its properties in each job config file instead.", "url": "https://github.com/apache/samza/pull/1256#discussion_r369876444", "createdAt": "2020-01-23T00:20:54Z", "author": {"login": "kw2542"}, "path": "samza-test/src/main/config/join/joiner.samza", "diffHunk": "@@ -16,6 +16,33 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+####################\n+### UPDATE THIS! ###", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NDE5MQ=="}, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE1MzM0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo1ODoxMVrOFiWfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTozMzoyMFrOFi1WWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDQxMQ==", "bodyText": "The \"help\" string seems out-of-date now.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371564411", "createdAt": "2020-01-28T00:58:11Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2OTk3OQ==", "bodyText": "Updated.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372069979", "createdAt": "2020-01-28T21:33:20Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDQxMQ=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE1OTM4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowMjowOVrOFiWjLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyMjozNFrOFi4Dqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NTM1OQ==", "bodyText": "Can you please clarify this documentation change? The usage of the term \"both\" is unclear to me.\nIs it supposed to be \"Recovers the state storage from the changelog streams and stores the state in the directory provided by the users.\"?", "url": "https://github.com/apache/samza/pull/1256#discussion_r371565359", "createdAt": "2020-01-28T01:02:09Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -63,11 +62,11 @@\n \n \n /**\n- * Recovers the state storages from the changelog streams and store the storages\n+ * Recovers the state storage from both the changelog streams and stores", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNDM0Ng==", "bodyText": "I misunderstood the previous document, updated.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372114346", "createdAt": "2020-01-28T23:22:34Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -63,11 +62,11 @@\n \n \n /**\n- * Recovers the state storages from the changelog streams and store the storages\n+ * Recovers the state storage from both the changelog streams and stores", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NTM1OQ=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE2MzMxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNDozNlrOFiWlbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyNjo1OFrOFi4JUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NTkzMw==", "bodyText": "Instead of doing a blanket suppress for the whole method, could you please consider doing a suppression for the single line that needs to be suppressed? Then, if someone accidentally makes a change which should not be suppressed, then there will still be a warning for it.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371565933", "createdAt": "2020-01-28T01:04:36Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -158,6 +155,7 @@ private void getContainerModels() {\n    * Get the changelog streams and the storage factories from the config file\n    * and put them into the maps\n    */\n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTc5Mg==", "bodyText": "Updated to suppress the single line.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372115792", "createdAt": "2020-01-28T23:26:58Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -158,6 +155,7 @@ private void getContainerModels() {\n    * Get the changelog streams and the storage factories from the config file\n    * and put them into the maps\n    */\n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NTkzMw=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE2NDIzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTowNTowOFrOFiWl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoyNzowNlrOFi4Jcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjA3MQ==", "bodyText": "Same as above about suppression", "url": "https://github.com/apache/samza/pull/1256#discussion_r371566071", "createdAt": "2020-01-28T01:05:08Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -195,6 +191,7 @@ private void getChangeLogMaxPartitionNumber() {\n     maxPartitionNumber = maxPartitionId + 1;\n   }\n \n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTgyNg==", "bodyText": "Updated to suppress the single line.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372115826", "createdAt": "2020-01-28T23:27:06Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -195,6 +191,7 @@ private void getChangeLogMaxPartitionNumber() {\n     maxPartitionNumber = maxPartitionId + 1;\n   }\n \n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjA3MQ=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE3NDQ5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToxMTo1NVrOFiWsWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTozNDoxMlrOFi1YCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NzcwNw==", "bodyText": "The \"help\" string seems out-of-date now.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371567707", "createdAt": "2020-01-28T01:11:55Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MDQwOQ==", "bodyText": "Updated.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372070409", "createdAt": "2020-01-28T21:34:12Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NzcwNw=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE4MDYwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToxNjowM1rOFiWwMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTozNDo0NFrOFi1Y5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2ODY4OQ==", "bodyText": "This seems out-of-date.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371568689", "createdAt": "2020-01-28T01:16:03Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MDYzMA==", "bodyText": "Updated", "url": "https://github.com/apache/samza/pull/1256#discussion_r372070630", "createdAt": "2020-01-28T21:34:44Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2ODY4OQ=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE4MjcyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToxNzo0MlrOFiWxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDowMjo1OVrOFi40IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2OTA0Ng==", "bodyText": "Should this check for configLoaderFactoryOpt instead? Theoretically, the config loader factory won't need additional properties. You might also need to somehow validate or catch that not all config loader properties were specified for the config loader.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371569046", "createdAt": "2020-01-28T01:17:42Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")\n-  val configOverrideOpt =\n+  val configOverrideOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n     parser.accepts(\"config\", \"A configuration value in the form key=value. Command line properties override any configuration values given.\")\n           .withRequiredArg\n           .ofType(classOf[KeyValuePair])\n           .describedAs(\"key=value\")\n \n-  var configFactory: ConfigFactory = null\n+  var configLoaderFactory: ConfigLoaderFactory = _\n \n-  def loadConfig(options: OptionSet) = {\n+  def loadConfig(options: OptionSet): Config = {\n     // Verify legitimate parameters.\n-    if (!options.has(configPathOpt)) {\n+    if (!options.has(configLoaderPropertiesOpt)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NDc3MQ==", "bodyText": "configLoaderFactoryOpt has a default value of PropertiesConfigLoaderFactory.\nThis check is to be consistent with the previous check where we require a config path (URI) to pass to the legacy ConfigFactory, which in theory may not need URI either.\nWe may remove this check completely too, if we want to support the case where config loader factory does not need any properties at all.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372094771", "createdAt": "2020-01-28T22:28:52Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")\n-  val configOverrideOpt =\n+  val configOverrideOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n     parser.accepts(\"config\", \"A configuration value in the form key=value. Command line properties override any configuration values given.\")\n           .withRequiredArg\n           .ofType(classOf[KeyValuePair])\n           .describedAs(\"key=value\")\n \n-  var configFactory: ConfigFactory = null\n+  var configLoaderFactory: ConfigLoaderFactory = _\n \n-  def loadConfig(options: OptionSet) = {\n+  def loadConfig(options: OptionSet): Config = {\n     // Verify legitimate parameters.\n-    if (!options.has(configPathOpt)) {\n+    if (!options.has(configLoaderPropertiesOpt)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2OTA0Ng=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyNTE4NQ==", "bodyText": "In the previous case (i.e. ConfigFactory), the configURI was a required argument for the interface, and I don't think you can have an empty URI. For ConfigLoaderFactory interface, it is required to pass a Config, but it is possible to have an empty Config, so I think you could just remove the check to handle the general case.\nThe additional complexity that the ConfigLoaderFactory brings is that each concrete type requires different configs to be in Config, so if there is an error due to a missing config value, then that's maybe where you need to do the parser.printHelpOn(System.err); System.exit(-1);.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372125185", "createdAt": "2020-01-28T23:57:12Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")\n-  val configOverrideOpt =\n+  val configOverrideOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n     parser.accepts(\"config\", \"A configuration value in the form key=value. Command line properties override any configuration values given.\")\n           .withRequiredArg\n           .ofType(classOf[KeyValuePair])\n           .describedAs(\"key=value\")\n \n-  var configFactory: ConfigFactory = null\n+  var configLoaderFactory: ConfigLoaderFactory = _\n \n-  def loadConfig(options: OptionSet) = {\n+  def loadConfig(options: OptionSet): Config = {\n     // Verify legitimate parameters.\n-    if (!options.has(configPathOpt)) {\n+    if (!options.has(configLoaderPropertiesOpt)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2OTA0Ng=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyNjc1Mw==", "bodyText": "Make sense, removed the check.\nThe default concrete PropertiesConfigLoaderFactory is checking the properties itself too.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372126753", "createdAt": "2020-01-29T00:02:59Z", "author": {"login": "kw2542"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")\n-  val configOverrideOpt =\n+  val configOverrideOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n     parser.accepts(\"config\", \"A configuration value in the form key=value. Command line properties override any configuration values given.\")\n           .withRequiredArg\n           .ofType(classOf[KeyValuePair])\n           .describedAs(\"key=value\")\n \n-  var configFactory: ConfigFactory = null\n+  var configLoaderFactory: ConfigLoaderFactory = _\n \n-  def loadConfig(options: OptionSet) = {\n+  def loadConfig(options: OptionSet): Config = {\n     // Verify legitimate parameters.\n-    if (!options.has(configPathOpt)) {\n+    if (!options.has(configLoaderPropertiesOpt)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2OTA0Ng=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzE5OTcxOnYy", "diffSide": "RIGHT", "path": "samza-test/src/main/java/org/apache/samza/test/integration/LocalApplicationRunnerMain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToyODo1OFrOFiW7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMzoxODo1OVrOFi3_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MTY1Ng==", "bodyText": "The intention to have the \"unused\" config was so that a custom fork could use the config if necessary (see comment inside buildExternalContext. Could we please keep the config?", "url": "https://github.com/apache/samza/pull/1256#discussion_r371571656", "createdAt": "2020-01-28T01:28:58Z", "author": {"login": "cameronlee314"}, "path": "samza-test/src/main/java/org/apache/samza/test/integration/LocalApplicationRunnerMain.java", "diffHunk": "@@ -53,14 +53,14 @@ public static void main(String[] args) throws Exception {\n \n     try {\n       LOGGER.info(\"Launching stream application: {} to run.\", app);\n-      runner.run(buildExternalContext(config).orElse(null));\n+      runner.run(buildExternalContext().orElse(null));\n       runner.waitForFinish();\n     } catch (Exception e) {\n       LOGGER.error(\"Exception occurred when running application: {}.\", app, e);\n     }\n   }\n \n-  private static Optional<ExternalContext> buildExternalContext(Config config) {\n+  private static Optional<ExternalContext> buildExternalContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMzE3Nw==", "bodyText": "Added back.", "url": "https://github.com/apache/samza/pull/1256#discussion_r372113177", "createdAt": "2020-01-28T23:18:59Z", "author": {"login": "kw2542"}, "path": "samza-test/src/main/java/org/apache/samza/test/integration/LocalApplicationRunnerMain.java", "diffHunk": "@@ -53,14 +53,14 @@ public static void main(String[] args) throws Exception {\n \n     try {\n       LOGGER.info(\"Launching stream application: {} to run.\", app);\n-      runner.run(buildExternalContext(config).orElse(null));\n+      runner.run(buildExternalContext().orElse(null));\n       runner.waitForFinish();\n     } catch (Exception e) {\n       LOGGER.error(\"Exception occurred when running application: {}.\", app, e);\n     }\n   }\n \n-  private static Optional<ExternalContext> buildExternalContext(Config config) {\n+  private static Optional<ExternalContext> buildExternalContext() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MTY1Ng=="}, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1552, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}