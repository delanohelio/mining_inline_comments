{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjYwNDc0", "number": 1267, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo1Mjo0NlrODd3sbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxNTo0N1rODgzTFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ3NzkwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placement/ContainerPlacementMetadataStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo1Mjo0NlrOFmuNng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo1Mjo0NlrOFmuNng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NzM1OA==", "bodyText": "Note to reviewers: Metastore does not give any metadata fields related to a message so I have to manually sort to ensure messages are in increasing order of timestamp", "url": "https://github.com/apache/samza/pull/1267#discussion_r376147358", "createdAt": "2020-02-06T23:52:46Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placement/ContainerPlacementMetadataStore.java", "diffHunk": "@@ -259,6 +260,8 @@ static String toContainerPlacementMessageKey(UUID uuid, Class<?> messageType) {\n         throw new SamzaException(e);\n       }\n     }\n+    // Sort the actions in order of timestamp\n+    newActions.sort(Comparator.comparingLong(ContainerPlacementRequestMessage::getTimestamp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847005cd8fde6309fc3b1b769c17d891ac970026"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTA1Nzc0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placements/DequeuedPlacementActionsCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODo0ODozMlrOFnGteg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODo0ODozMlrOFnGteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0ODczMA==", "bodyText": "Note: I have not used any read-write locks here because we do not need this to be thread-safe, this cache is accessed by only one thread, I will add java docs for thread safety here", "url": "https://github.com/apache/samza/pull/1267#discussion_r376548730", "createdAt": "2020-02-07T18:48:32Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placements/DequeuedPlacementActionsCache.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.container.placements;\n+\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * FIFO cache that maintains de-queued container actions. This cache is only accessed by one thread,\n+ * {@link org.apache.samza.clustermanager.container.placement.ContainerPlacementRequestAllocator} thread in ClusterBasedJobCoordinator\n+ *\n+ */\n+public class DequeuedPlacementActionsCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUwMTU4OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MTo1NVrOFn4i7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0NTozNFrOFn6tIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTIzMQ==", "bodyText": "Does this constructor call really warrant a new method?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377365231", "createdAt": "2020-02-10T22:51:55Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -452,7 +457,7 @@ StartpointManager createStartpointManager() {\n \n   @VisibleForTesting\n   ContainerProcessManager createContainerProcessManager() {\n-    return new ContainerProcessManager(config, state, metrics);\n+    return new ContainerProcessManager(config, state, metrics, containerPlacementMetadataStore);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMDYwOA==", "bodyText": "this is there so this method can be mocked it tests", "url": "https://github.com/apache/samza/pull/1267#discussion_r377400608", "createdAt": "2020-02-11T00:45:34Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -452,7 +457,7 @@ StartpointManager createStartpointManager() {\n \n   @VisibleForTesting\n   ContainerProcessManager createContainerProcessManager() {\n-    return new ContainerProcessManager(config, state, metrics);\n+    return new ContainerProcessManager(config, state, metrics, containerPlacementMetadataStore);\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTIzMQ=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDY4MDE1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxNTo1NlrOFn6Nig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjowODowNlrOFn705A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjUyMg==", "bodyText": "This class seems un-neccessary can it be replaced with\nprivate final Set<String> placementActionsInFlight = new HashSet<>(); ?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377392522", "createdAt": "2020-02-11T00:15:56Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -65,15 +70,19 @@\n    * Key is chosen to be processorId since at a time only one placement action can be in progress on a container.\n    */\n   private final ConcurrentHashMap<String, ContainerPlacementMetadata> actions;\n+  private final DequeuedPlacementActionsCache dequeuedActionsCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTAyNw==", "bodyText": "Set has to be finite-size maintaining last N UUIDs so we need some eviction policy (currently FIFO), please see the implementation of DequeuedPlacementActionsCache for details", "url": "https://github.com/apache/samza/pull/1267#discussion_r377401027", "createdAt": "2020-02-11T00:47:09Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -65,15 +70,19 @@\n    * Key is chosen to be processorId since at a time only one placement action can be in progress on a container.\n    */\n   private final ConcurrentHashMap<String, ContainerPlacementMetadata> actions;\n+  private final DequeuedPlacementActionsCache dequeuedActionsCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjUyMg=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxODk4MA==", "bodyText": "Refactored it to make generic BoundedFifoQueue", "url": "https://github.com/apache/samza/pull/1267#discussion_r377418980", "createdAt": "2020-02-11T02:08:06Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -65,15 +70,19 @@\n    * Key is chosen to be processorId since at a time only one placement action can be in progress on a container.\n    */\n   private final ConcurrentHashMap<String, ContainerPlacementMetadata> actions;\n+  private final DequeuedPlacementActionsCache dequeuedActionsCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MjUyMg=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDY4ODA0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyMDoxNFrOFn6SFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo0ODo1OFrOFn6whA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MzY4NA==", "bodyText": "Can the hasActiveContainerPlacementAction and the getPlacementActionMetadata be merged?\nactive action is any action that is failed or succeeded no?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377393684", "createdAt": "2020-02-11T00:20:14Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -110,12 +119,14 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n       ContainerPlacementMetadata actionMetaData = getPlacementActionMetadata(processorId).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMTQ3Ng==", "bodyText": "Active action is one that is either ACCEPTED or in PROGRESS", "url": "https://github.com/apache/samza/pull/1267#discussion_r377401476", "createdAt": "2020-02-11T00:48:58Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -110,12 +119,14 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n       ContainerPlacementMetadata actionMetaData = getPlacementActionMetadata(processorId).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MzY4NA=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDY5NDUxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyMzo1OVrOFn6V6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1NjoxMlrOFn64KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDY2Ng==", "bodyText": "What does this method do?\nWhat does it return and in which conditions does it return which output?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377394666", "createdAt": "2020-02-11T00:23:59Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,47 +389,54 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n    * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n-   *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * in flight container requests. Duplicate actions are handled by deduping on uuid. If there is an existing inflight\n+   * request or container is pending a start, the container placement request is queued to be executed in future.\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzQzMg==", "bodyText": "Will add more java docs", "url": "https://github.com/apache/samza/pull/1267#discussion_r377403432", "createdAt": "2020-02-11T00:56:12Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,47 +389,54 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n    * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n-   *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * in flight container requests. Duplicate actions are handled by deduping on uuid. If there is an existing inflight\n+   * request or container is pending a start, the container placement request is queued to be executed in future.\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDY2Ng=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDY5NTM1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNDoyOFrOFn6WdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNDoyOFrOFn6WdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDgwNA==", "bodyText": "Not sure what does \" Action is supposed to be queued\" mean?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377394804", "createdAt": "2020-02-11T00:24:28Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,47 +389,54 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n    * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n-   *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * in flight container requests. Duplicate actions are handled by deduping on uuid. If there is an existing inflight\n+   * request or container is pending a start, the container placement request is queued to be executed in future.\n    */\n-  private Pair<ContainerPlacementMessage.StatusCode, String> checkValidControlAction(String processorId, String destinationHost, UUID uuid) {\n-    String errorMessagePrefix =\n-        String.format(\"ControlAction to move or restart container with processor id %s to host %s is rejected due to\",\n-            processorId, destinationHost);\n+  private Optional<Pair<ContainerPlacementMessage.StatusCode, String>> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n+    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);\n     Boolean invalidAction = false;\n     String errorMessage = null;\n     if (standbyContainerManager.isPresent()) {\n       errorMessage = String.format(\"%s not supported for host standby enabled\", errorMessagePrefix);\n       invalidAction = true;\n-    } else if (processorId == null || destinationHost == null) {\n-      errorMessage = String.format(\"%s either processor id or the host argument is null\", errorMessagePrefix);\n+    } else if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())) {\n+      // Action is supposed to be queued", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcwMDExOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNjo1N1rOFn6ZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1MzoxM1rOFn61FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTUwOQ==", "bodyText": "What if the machine bearing the AM fails at line 311,\nwill the action be silently deleted/dropped?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377395509", "createdAt": "2020-02-11T00:26:57Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjY0NA==", "bodyText": "If AM restarts => the job restarts, all the actions from the previous deployment will be cleaned", "url": "https://github.com/apache/samza/pull/1267#discussion_r377402644", "createdAt": "2020-02-11T00:53:13Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTUwOQ=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcwMDgwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyNzoyMFrOFn6Zog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDo1NDo0NlrOFn62qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTYxOA==", "bodyText": "Should the cache be updated before deleting from persistent store?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377395618", "createdAt": "2020-02-11T00:27:20Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache\n+    dequeuedActionsCache.put(requestMessage.getUuid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzA1MQ==", "bodyText": "either will work", "url": "https://github.com/apache/samza/pull/1267#discussion_r377403051", "createdAt": "2020-02-11T00:54:46Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache\n+    dequeuedActionsCache.put(requestMessage.getUuid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NTYxOA=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcwMzQ1OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyODo0N1rOFn6bOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowOTo0NVrOFocg0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NjAyNw==", "bodyText": "Is there a specific need for this?\nShoudnt ANY_HOST be the default, while if I want to be able to send a stateless job's container to a specific host, it should rather be allowed.", "url": "https://github.com/apache/samza/pull/1267#discussion_r377396027", "createdAt": "2020-02-11T00:28:47Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache\n+    dequeuedActionsCache.put(requestMessage.getUuid());\n     // Request is bad just update the response on message & return\n-    if (actionStatus.getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+    if (actionStatus.get().getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+      writeContainerPlacementResponseMessage(requestMessage, actionStatus.get().getKey(), actionStatus.get().getValue());\n       return;\n     }\n \n     SamzaResource currentResource = samzaApplicationState.runningProcessors.get(processorId);\n-    LOG.info(\n-        \"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n+    LOG.info(\"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n         processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n \n     if (!hostAffinityEnabled) {\n-      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\",\n-          ResourceRequestState.ANY_HOST);\n+      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\", ResourceRequestState.ANY_HOST);\n       destinationHost = ANY_HOST;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMzM3NQ==", "bodyText": "if your question is about formatting change?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377403375", "createdAt": "2020-02-11T00:55:57Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache\n+    dequeuedActionsCache.put(requestMessage.getUuid());\n     // Request is bad just update the response on message & return\n-    if (actionStatus.getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+    if (actionStatus.get().getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+      writeContainerPlacementResponseMessage(requestMessage, actionStatus.get().getKey(), actionStatus.get().getValue());\n       return;\n     }\n \n     SamzaResource currentResource = samzaApplicationState.runningProcessors.get(processorId);\n-    LOG.info(\n-        \"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n+    LOG.info(\"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n         processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n \n     if (!hostAffinityEnabled) {\n-      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\",\n-          ResourceRequestState.ANY_HOST);\n+      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\", ResourceRequestState.ANY_HOST);\n       destinationHost = ANY_HOST;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NjAyNw=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxOTc2NQ==", "bodyText": "\"Shoudnt ANY_HOST be the default, while if I want to be able to send a stateless job's container to a specific host, it should rather be allowed.\"\nThat needs some additional work in AM because ResourceRequestStatue and other parts of AM have significant code that just checks for this config and identifies a preferred resource as ANY_HOST, all of that needs to be refactored", "url": "https://github.com/apache/samza/pull/1267#discussion_r377419765", "createdAt": "2020-02-11T02:12:12Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache\n+    dequeuedActionsCache.put(requestMessage.getUuid());\n     // Request is bad just update the response on message & return\n-    if (actionStatus.getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+    if (actionStatus.get().getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+      writeContainerPlacementResponseMessage(requestMessage, actionStatus.get().getKey(), actionStatus.get().getValue());\n       return;\n     }\n \n     SamzaResource currentResource = samzaApplicationState.runningProcessors.get(processorId);\n-    LOG.info(\n-        \"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n+    LOG.info(\"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n         processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n \n     if (!hostAffinityEnabled) {\n-      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\",\n-          ResourceRequestState.ANY_HOST);\n+      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\", ResourceRequestState.ANY_HOST);\n       destinationHost = ANY_HOST;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NjAyNw=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDUxMg==", "bodyText": "Sure, then maybe create a JIRA and link it here, to allow this addition (certain jobs have demanded/can use it).", "url": "https://github.com/apache/samza/pull/1267#discussion_r377954512", "createdAt": "2020-02-11T23:09:45Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +297,41 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    Optional<Pair<ContainerPlacementMessage.StatusCode, String>> actionStatus = validatePlacementAction(requestMessage);\n+    if (!actionStatus.isPresent()) {\n+      // Action is supposed to be queued\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);\n+      return;\n+    }\n+    LOG.info(\"ContainerPlacement action is de-queued metadata: {}\", requestMessage);\n+    // Remove the request message from metastore since this message is already acted upon\n+    containerPlacementMetadataStore.deleteContainerPlacementRequestMessage(requestMessage.getUuid());\n+    // Action is de-queued upon so we record it in the cache\n+    dequeuedActionsCache.put(requestMessage.getUuid());\n     // Request is bad just update the response on message & return\n-    if (actionStatus.getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+    if (actionStatus.get().getKey() == ContainerPlacementMessage.StatusCode.BAD_REQUEST) {\n+      writeContainerPlacementResponseMessage(requestMessage, actionStatus.get().getKey(), actionStatus.get().getValue());\n       return;\n     }\n \n     SamzaResource currentResource = samzaApplicationState.runningProcessors.get(processorId);\n-    LOG.info(\n-        \"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n+    LOG.info(\"Processor ID: {} matched an active container with deployment ID: {} is running on host: {} for ContainerPlacement action: {}\",\n         processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n \n     if (!hostAffinityEnabled) {\n-      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\",\n-          ResourceRequestState.ANY_HOST);\n+      LOG.info(\"Changing the requested host for placement action to {} because host affinity is disabled\", ResourceRequestState.ANY_HOST);\n       destinationHost = ANY_HOST;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NjAyNw=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcwOTEyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDozMTo1M1rOFn6epQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjoxODoxOFrOFn78nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NjkwMQ==", "bodyText": "For a method that is called validatePlacementAction a return value of null/empty means the action is valid?\nseems like weird semantics.", "url": "https://github.com/apache/samza/pull/1267#discussion_r377396901", "createdAt": "2020-02-11T00:31:53Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,47 +389,54 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n    * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n-   *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * in flight container requests. Duplicate actions are handled by deduping on uuid. If there is an existing inflight\n+   * request or container is pending a start, the container placement request is queued to be executed in future.\n    */\n-  private Pair<ContainerPlacementMessage.StatusCode, String> checkValidControlAction(String processorId, String destinationHost, UUID uuid) {\n-    String errorMessagePrefix =\n-        String.format(\"ControlAction to move or restart container with processor id %s to host %s is rejected due to\",\n-            processorId, destinationHost);\n+  private Optional<Pair<ContainerPlacementMessage.StatusCode, String>> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n+    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk1OQ==", "bodyText": "forgot to push a commit that refactors this method to two methods: on that dequeues and other that validates, please have a look", "url": "https://github.com/apache/samza/pull/1267#discussion_r377420959", "createdAt": "2020-02-11T02:18:18Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,47 +389,54 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n    * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n-   *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * in flight container requests. Duplicate actions are handled by deduping on uuid. If there is an existing inflight\n+   * request or container is pending a start, the container placement request is queued to be executed in future.\n    */\n-  private Pair<ContainerPlacementMessage.StatusCode, String> checkValidControlAction(String processorId, String destinationHost, UUID uuid) {\n-    String errorMessagePrefix =\n-        String.format(\"ControlAction to move or restart container with processor id %s to host %s is rejected due to\",\n-            processorId, destinationHost);\n+  private Optional<Pair<ContainerPlacementMessage.StatusCode, String>> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n+    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NjkwMQ=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDcxNTAwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placements/DequeuedPlacementActionsCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDozNToxMlrOFn6iHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjoxMzowN1rOFn74zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5Nzc5MQ==", "bodyText": "This class doesnt seem warranted, delete perhaps?\nOn a side note, if its accessed by a single thread it doesnt need to be a concurrent-queue.", "url": "https://github.com/apache/samza/pull/1267#discussion_r377397791", "createdAt": "2020-02-11T00:35:12Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placements/DequeuedPlacementActionsCache.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.container.placements;\n+\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * FIFO cache that maintains de-queued container actions. This cache is only accessed by one thread,\n+ * {@link org.apache.samza.clustermanager.container.placement.ContainerPlacementRequestAllocator} thread in ClusterBasedJobCoordinator\n+ *\n+ */\n+public class DequeuedPlacementActionsCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxOTk4MA==", "bodyText": "Removed the use of concurrent-queue, added comments about thread safety, made the cache generified", "url": "https://github.com/apache/samza/pull/1267#discussion_r377419980", "createdAt": "2020-02-11T02:13:07Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/container/placements/DequeuedPlacementActionsCache.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.container.placements;\n+\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+/**\n+ * FIFO cache that maintains de-queued container actions. This cache is only accessed by one thread,\n+ * {@link org.apache.samza.clustermanager.container.placement.ContainerPlacementRequestAllocator} thread in ClusterBasedJobCoordinator\n+ *\n+ */\n+public class DequeuedPlacementActionsCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5Nzc5MQ=="}, "originalCommit": {"oid": "2786bd695014a5c79ee4f60c170225682473ed98"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE1NDEyOnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/container/placement/ContainerPlacementResponseMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyNTozNVrOFoba_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNjoyNVrOFodppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNjYzOQ==", "bodyText": "/**\nHelper function to create a {@link ContainerPlacementResponseMessage} using BLA-BLA params of\n{@link ContainerPlacementRequestMessage} and the given additional parameters.\n*/", "url": "https://github.com/apache/samza/pull/1267#discussion_r377936639", "createdAt": "2020-02-11T22:25:35Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/container/placement/ContainerPlacementResponseMessage.java", "diffHunk": "@@ -42,7 +42,7 @@ public ContainerPlacementResponseMessage(UUID uuid, String deploymentId, String\n     this(uuid, deploymentId, processorId, destinationHost, null, statusCode, responseMessage, timestamp);\n   }\n \n-  static ContainerPlacementResponseMessage fromContainerPlacementRequestMessage(\n+  public static ContainerPlacementResponseMessage fromContainerPlacementRequestMessage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzE1Ng==", "bodyText": "Sure adding docs", "url": "https://github.com/apache/samza/pull/1267#discussion_r377973156", "createdAt": "2020-02-12T00:06:25Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/container/placement/ContainerPlacementResponseMessage.java", "diffHunk": "@@ -42,7 +42,7 @@ public ContainerPlacementResponseMessage(UUID uuid, String deploymentId, String\n     this(uuid, deploymentId, processorId, destinationHost, null, statusCode, responseMessage, timestamp);\n   }\n \n-  static ContainerPlacementResponseMessage fromContainerPlacementRequestMessage(\n+  public static ContainerPlacementResponseMessage fromContainerPlacementRequestMessage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNjYzOQ=="}, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODIwMzA5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MzozMVrOFob4ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNjozNlrOFodqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDIyNw==", "bodyText": "Could be called placementRequestsCache?\n/**\nIn-memory cache of placement requests UUIDs dequeued from the coordinator-store,\nused to dedup requests with the same request UUID.\nSized using max tolerable memory footprint and max likely duplicate-spacing.\n*/", "url": "https://github.com/apache/samza/pull/1267#discussion_r377944227", "createdAt": "2020-02-11T22:43:31Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -65,15 +73,19 @@\n    * Key is chosen to be processorId since at a time only one placement action can be in progress on a container.\n    */\n   private final ConcurrentHashMap<String, ContainerPlacementMetadata> actions;\n+  private final BoundedFifoCache<UUID> dequeuedActionsCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzI1Nw==", "bodyText": "Sure added docs", "url": "https://github.com/apache/samza/pull/1267#discussion_r377973257", "createdAt": "2020-02-12T00:06:36Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -65,15 +73,19 @@\n    * Key is chosen to be processorId since at a time only one placement action can be in progress on a container.\n    */\n   private final ConcurrentHashMap<String, ContainerPlacementMetadata> actions;\n+  private final BoundedFifoCache<UUID> dequeuedActionsCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDIyNw=="}, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODI1MjIxOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowMjozMVrOFocWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo1NjoyNVrOFodeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTc5Nw==", "bodyText": "Would info logging be useful here?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377951797", "createdAt": "2020-02-11T23:02:31Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,39 +390,60 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n-   * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n+   * If there is an existing inflight request or container is pending a start, the container placement action shall wait\n+   * until this in-flight action is complete\n    *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * @param requestMessage container placement request message\n+   * @return true if action should be taken right now, false if it needs to wait to be taken in future\n    */\n-  private Pair<ContainerPlacementMessage.StatusCode, String> checkValidControlAction(String processorId, String destinationHost, UUID uuid) {\n-    String errorMessagePrefix =\n-        String.format(\"ControlAction to move or restart container with processor id %s to host %s is rejected due to\",\n-            processorId, destinationHost);\n+  private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n+    // Do not dequeue action wait for the in-flight action to complete\n+    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())) {\n+      return false;\n+    }\n+    // Do not dequeue the action wait for the container to come to a running state\n+    if (!samzaApplicationState.runningProcessors.containsKey(requestMessage.getProcessorId())\n+        || samzaApplicationState.pendingProcessors.containsKey(requestMessage.getProcessorId())) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MDIxMw==", "bodyText": "Yea instead of logging where it is called, I logged here", "url": "https://github.com/apache/samza/pull/1267#discussion_r377970213", "createdAt": "2020-02-11T23:56:25Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,39 +390,60 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n-   * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n+   * If there is an existing inflight request or container is pending a start, the container placement action shall wait\n+   * until this in-flight action is complete\n    *\n-   * TODO: SAMZA-2402: Disallow pending Container Placement actions in metastore on job restarts\n+   * @param requestMessage container placement request message\n+   * @return true if action should be taken right now, false if it needs to wait to be taken in future\n    */\n-  private Pair<ContainerPlacementMessage.StatusCode, String> checkValidControlAction(String processorId, String destinationHost, UUID uuid) {\n-    String errorMessagePrefix =\n-        String.format(\"ControlAction to move or restart container with processor id %s to host %s is rejected due to\",\n-            processorId, destinationHost);\n+  private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n+    // Do not dequeue action wait for the in-flight action to complete\n+    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())) {\n+      return false;\n+    }\n+    // Do not dequeue the action wait for the container to come to a running state\n+    if (!samzaApplicationState.runningProcessors.containsKey(requestMessage.getProcessorId())\n+        || samzaApplicationState.pendingProcessors.containsKey(requestMessage.getProcessorId())) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTc5Nw=="}, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODI1NTU3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowNDowMFrOFocYXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowNzo1NFrOFodrfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MjM0OA==", "bodyText": "Does this imply that a previous placement-action exists or container is not yet running?", "url": "https://github.com/apache/samza/pull/1267#discussion_r377952348", "createdAt": "2020-02-11T23:04:00Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +300,40 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    // Is the action ready to be de-queued and taken or it needs to wait to be executed in future\n+    if (!deQueueAction(requestMessage)) {\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MzYyOA==", "bodyText": "yes, added that message to logging", "url": "https://github.com/apache/samza/pull/1267#discussion_r377973628", "createdAt": "2020-02-12T00:07:54Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -285,34 +300,40 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * @param containerAllocator to request physical resources\n    */\n   public void registerContainerPlacementAction(ContainerPlacementRequestMessage requestMessage, ContainerAllocator containerAllocator) {\n-    LOG.info(\"Received a ContainerPlacement action request: {}\", requestMessage);\n     String processorId = requestMessage.getProcessorId();\n     String destinationHost = requestMessage.getDestinationHost();\n-    Pair<ContainerPlacementMessage.StatusCode, String> actionStatus =\n-        checkValidControlAction(processorId, destinationHost, requestMessage.getUuid());\n-\n+    // Is the action ready to be de-queued and taken or it needs to wait to be executed in future\n+    if (!deQueueAction(requestMessage)) {\n+      LOG.info(\"ContainerPlacement request is en-queued metadata: {}\", requestMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MjM0OA=="}, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODI3MTk3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/utils/BoundedFifoCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzoxMTowN1rOFocifQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo1NTo0NVrOFodcYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDk0MQ==", "bodyText": "Perhaps move to org.apache.samza.util", "url": "https://github.com/apache/samza/pull/1267#discussion_r377954941", "createdAt": "2020-02-11T23:11:07Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/utils/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2OTc2Mw==", "bodyText": "sure", "url": "https://github.com/apache/samza/pull/1267#discussion_r377969763", "createdAt": "2020-02-11T23:55:45Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/utils/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.utils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NDk0MQ=="}, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODMwOTQ2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/utils/BoundedFifoCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzoyNzo0OVrOFoc5fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzo1MzoyMFrOFodYHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MDgyOQ==", "bodyText": "Could we use  a simpler \"util\" implementation here like so\npublic class BoundedLinkedHashSet<T> {\n    private final int cacheSize;\n    private final LinkedHashSet<T> actionQueue;\n\n    public BoundedLinkedHashSet(int size) {\n      this.actionQueue = new LinkedHashSet<>();\n      this.cacheSize = size;\n    }\n\n    public boolean containsKey(T element) {\n      return actionQueue.contains(element);\n    }\n\n    public void put(T element) {\n      // check remaining capacity in the bounded linked-hash-set\n      int capacity = cacheSize - actionQueue.size();\n\n      // if there is none, remove some elements\n      if (capacity <= 0) {\n        Iterator iterator = actionQueue.iterator();\n        while (iterator.hasNext() && capacity <= 0) {\n          iterator.remove();\n          capacity++;\n        }\n      }\n      actionQueue.add(element);\n    }\n  }", "url": "https://github.com/apache/samza/pull/1267#discussion_r377960829", "createdAt": "2020-02-11T23:27:49Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/utils/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.utils;\n+\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.Set;\n+\n+/**\n+ * FIFO cache that maintains de-queued container actions. This cache is only accessed by one thread,\n+ * {@link org.apache.samza.clustermanager.container.placement.ContainerPlacementRequestAllocator} thread in ClusterBasedJobCoordinator\n+ *\n+ * This class is not thread-safe\n+ */\n+public class BoundedFifoCache<T> {\n+\n+  private final int cacheSize;\n+  private final Queue<T> actionQueue;\n+  private final Set<T> actionCache;\n+\n+  public BoundedFifoCache(int size) {\n+    this.actionQueue = new LinkedList<T>();\n+    this.actionCache = new HashSet<T>();\n+    this.cacheSize = size;\n+  }\n+\n+  public boolean containsKey(T element) {\n+    return actionCache.contains(element);\n+  }\n+\n+  public void put(T element) {\n+    if (actionCache.size() > cacheSize) {\n+      T evictedElement = actionQueue.poll();\n+      actionCache.remove(evictedElement);\n+    }\n+    actionCache.add(element);\n+    actionQueue.add(element);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2ODY2OA==", "bodyText": "Yup we can use it since it is FIFO: get put remove is o(1)", "url": "https://github.com/apache/samza/pull/1267#discussion_r377968668", "createdAt": "2020-02-11T23:53:20Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/utils/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.clustermanager.utils;\n+\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.Set;\n+\n+/**\n+ * FIFO cache that maintains de-queued container actions. This cache is only accessed by one thread,\n+ * {@link org.apache.samza.clustermanager.container.placement.ContainerPlacementRequestAllocator} thread in ClusterBasedJobCoordinator\n+ *\n+ * This class is not thread-safe\n+ */\n+public class BoundedFifoCache<T> {\n+\n+  private final int cacheSize;\n+  private final Queue<T> actionQueue;\n+  private final Set<T> actionCache;\n+\n+  public BoundedFifoCache(int size) {\n+    this.actionQueue = new LinkedList<T>();\n+    this.actionCache = new HashSet<T>();\n+    this.cacheSize = size;\n+  }\n+\n+  public boolean containsKey(T element) {\n+    return actionCache.contains(element);\n+  }\n+\n+  public void put(T element) {\n+    if (actionCache.size() > cacheSize) {\n+      T evictedElement = actionQueue.poll();\n+      actionCache.remove(evictedElement);\n+    }\n+    actionCache.add(element);\n+    actionQueue.add(element);\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk2MDgyOQ=="}, "originalCommit": {"oid": "df083f41fcaa1150606ef859dbaa3e1a1679f2eb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzE5NTU3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/util/BoundedFifoCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxMDowMFrOFrM93w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0MTo0NVrOFrN9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTUzNQ==", "bodyText": "This is really a BoundedLinkedHashSet, the fact that we're using it as a fifo cache is irrelevant.\nWe should call it a BoundedLinkedHashSet; which I think will be useful for other purposes, e.g., storing control actions in autosizing.", "url": "https://github.com/apache/samza/pull/1267#discussion_r380845535", "createdAt": "2020-02-18T18:10:00Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/util/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.util;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * FIFO cache of size cacheSize\n+ *\n+ * This class is not thread-safe\n+ */\n+public class BoundedFifoCache<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215e3f851987a4362c21da8762be916493f5577f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1ODkzNw==", "bodyText": "I think the name is intuitive enough, it's a BoundedFifoCache, what it's using underneath should be abstracted. But I am ok with using BoundedLinkedHashSet as well", "url": "https://github.com/apache/samza/pull/1267#discussion_r380858937", "createdAt": "2020-02-18T18:36:11Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/util/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.util;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * FIFO cache of size cacheSize\n+ *\n+ * This class is not thread-safe\n+ */\n+public class BoundedFifoCache<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTUzNQ=="}, "originalCommit": {"oid": "215e3f851987a4362c21da8762be916493f5577f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTc4MA==", "bodyText": "I agree its intuitive for this use-case, but the constituents may not always be \"cached\" elements. They can for example be a time-window of actions that are held/stored in this data structure when its not being used as a cache.\nThis is akin to how a DelayedQueue is called that, even\nthough 99% of the time it'd be used to schedule input to a scheduler.\nThe name of the class is supposed to describe what it does, not how/what it can be used for.", "url": "https://github.com/apache/samza/pull/1267#discussion_r380861780", "createdAt": "2020-02-18T18:41:45Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/util/BoundedFifoCache.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.util;\n+\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * FIFO cache of size cacheSize\n+ *\n+ * This class is not thread-safe\n+ */\n+public class BoundedFifoCache<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTUzNQ=="}, "originalCommit": {"oid": "215e3f851987a4362c21da8762be916493f5577f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzIwMTUzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxMTo0MVrOFrNBgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxMTo0MVrOFrNBgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NjQ2NQ==", "bodyText": ".....container placement requests queued for the previous are deleted.....", "url": "https://github.com/apache/samza/pull/1267#discussion_r380846465", "createdAt": "2020-02-18T18:11:41Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -279,40 +298,49 @@ void handleExpiredRequest(String processorId, String preferredHost,\n    * When host affinity is enabled move / restart is allowed on specific or ANY_HOST\n    * TODO: SAMZA-2378: Container Placements for Standby containers enabled jobs\n    *\n+   * Container placement requests are tied to deploymentId which is currently {@link org.apache.samza.config.ApplicationConfig#APP_RUN_ID}\n+   * On job restarts container placement requests queued for the previous deployment are invalidated using this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215e3f851987a4362c21da8762be916493f5577f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzIxNDk0OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxNTo0N1rOFrNJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxNTo0N1rOFrNJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0ODU0Nw==", "bodyText": "Just making a note here: This can be used in the future to allow adding ContainerPlacementRequestMessage that are scheduled to run in the future, e.g., when they are formulated and ordered by a KafkaCruiseControl-like controller-system.", "url": "https://github.com/apache/samza/pull/1267#discussion_r380848547", "createdAt": "2020-02-18T18:15:47Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -371,39 +397,62 @@ private boolean hasActiveContainerPlacementAction(String processorId) {\n     return Optional.ofNullable(this.actions.get(processorId));\n   }\n \n+  private void updateContainerPlacementActionStatus(ContainerPlacementMetadata metadata,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    metadata.setActionStatus(statusCode, responseMessage);\n+    writeContainerPlacementResponseMessage(metadata.getRequestMessage(), statusCode, responseMessage);\n+    LOG.info(\"Status updated for ContainerPlacement action: {}\", metadata);\n+  }\n+\n+  private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMessage requestMessage,\n+      ContainerPlacementMessage.StatusCode statusCode, String responseMessage) {\n+    containerPlacementMetadataStore.writeContainerPlacementResponseMessage(\n+        ContainerPlacementResponseMessage.fromContainerPlacementRequestMessage(requestMessage, statusCode,\n+            responseMessage, System.currentTimeMillis()));\n+  }\n+\n   /**\n-   * A valid container placement action is only issued for a running processor with a valid processor id which has no\n-   * in flight container requests. Duplicate actions are handled by deduping on uuid\n+   * If there is an existing inflight request or container is pending a start, the container placement action shall wait\n+   * until this in-flight action is complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215e3f851987a4362c21da8762be916493f5577f"}, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1571, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}