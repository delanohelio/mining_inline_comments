{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODg4ODE4", "number": 1421, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowOTo1N1rOEbJv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo0MDo0M1rOEc3YNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA2NzQ5OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/HostLocality.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowOTo1N1rOHFACkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzowOTo1N1rOHFACkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTU4Ng==", "bodyText": "Nitpick: Can use java.util.Objects (here and other classes)?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005586", "createdAt": "2020-08-21T23:09:57Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/HostLocality.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA2ODM3OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/HostLocality.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMDozOFrOHFADHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMDozOFrOHFADHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTcyNw==", "bodyText": "Should this be ContainerLocation or something? HostLocality sounds wrong because the host doesn't have a location, it is the location.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005727", "createdAt": "2020-08-21T23:10:38Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/HostLocality.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * A class to represent the host locality information.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class HostLocality {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA2OTI5OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMToxMlrOHFADmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMToxMlrOHFADmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTg1MQ==", "bodyText": "Since this is in samza-api, let's describe what \"locality mapping\" etc. mean for users unfamiliar with Samza terms.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005851", "createdAt": "2020-08-21T23:11:12Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality mapping of an application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA2OTk0OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMTo0NlrOHFAD-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMTo0NlrOHFAD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNTk0NA==", "bodyText": "What does this mean?\nPhrasing: Instead of \"we want to\", maybe just describe what the implementation does and why.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475005944", "createdAt": "2020-08-21T23:11:46Z", "author": {"login": "prateekm"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import com.google.common.base.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality mapping of an application.\n+ * Currently the locality mapping represents the container host locality of an application.\n+ *\n+ * We want to keep the locality mapping open and not tie it to a container to potentially", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA3MjUyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxMzozMVrOHFAFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzo0NjoyMVrOHFAf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNjM0Mg==", "bodyText": "Can localityManager or readLocality results be null?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475006342", "createdAt": "2020-08-21T23:13:31Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -494,7 +498,9 @@ private String getSourceHostForContainer(ContainerPlacementRequestMessage reques\n           processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n       sourceHost = currentResource.getHost();\n     } else {\n-      sourceHost = samzaApplicationState.jobModelManager.jobModel().getContainerToHostValue(processorId, SetContainerHostMapping.HOST_KEY);\n+      sourceHost = Optional.ofNullable(localityManager.readLocality().getHostLocality(processorId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMzA5OA==", "bodyText": "No. readLocality will always return an empty LocalityModel. As far as localityManager, we always inject one. I still added precondition check in CPM & CM.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475013098", "createdAt": "2020-08-21T23:46:21Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -494,7 +498,9 @@ private String getSourceHostForContainer(ContainerPlacementRequestMessage reques\n           processorId, currentResource.getContainerId(), currentResource.getHost(), requestMessage);\n       sourceHost = currentResource.getHost();\n     } else {\n-      sourceHost = samzaApplicationState.jobModelManager.jobModel().getContainerToHostValue(processorId, SetContainerHostMapping.HOST_KEY);\n+      sourceHost = Optional.ofNullable(localityManager.readLocality().getHostLocality(processorId))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNjM0Mg=="}, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA3Nzg2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxNzowMVrOHFAIjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1NDoxOFrOHFt60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzExNg==", "bodyText": "Should this return an HTTP error (404 etc.) instead?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007116", "createdAt": "2020-08-21T23:17:01Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.HostLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model & configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */\n+public class LocalityServlet extends HttpServlet {\n+  private static final String PROCESSOR_ID_PARAM = \"processorId\";\n+  private final ObjectMapper mapper = SamzaObjectMapper.getObjectMapper();\n+  private final LocalityManager localityManager;\n+\n+  public LocalityServlet(LocalityManager localityManager) {\n+    this.localityManager = localityManager;\n+  }\n+\n+  @Override\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+    response.setContentType(\"application/json\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    LocalityModel localityModel = localityManager.readLocality();\n+\n+    if (request.getParameterMap().size() == 1) {\n+      String processorId = request.getParameter(PROCESSOR_ID_PARAM);\n+      HostLocality hostLocality = Optional.ofNullable(localityModel.getHostLocality(processorId))\n+          .orElse(new HostLocality(processorId, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNDc2OA==", "bodyText": "I did it to keep compatibility since the prior version read directly from the JobModelManager which would return an empty string if it doesn't exist.\nWe can break that if we want. Thoughts?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475014768", "createdAt": "2020-08-21T23:55:33Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.HostLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model & configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */\n+public class LocalityServlet extends HttpServlet {\n+  private static final String PROCESSOR_ID_PARAM = \"processorId\";\n+  private final ObjectMapper mapper = SamzaObjectMapper.getObjectMapper();\n+  private final LocalityManager localityManager;\n+\n+  public LocalityServlet(LocalityManager localityManager) {\n+    this.localityManager = localityManager;\n+  }\n+\n+  @Override\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+    response.setContentType(\"application/json\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    LocalityModel localityModel = localityManager.readLocality();\n+\n+    if (request.getParameterMap().size() == 1) {\n+      String processorId = request.getParameter(PROCESSOR_ID_PARAM);\n+      HostLocality hostLocality = Optional.ofNullable(localityModel.getHostLocality(processorId))\n+          .orElse(new HostLocality(processorId, \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzExNg=="}, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1NzI2NQ==", "bodyText": "Thanks, let's keep it compatible for now.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475757265", "createdAt": "2020-08-24T16:54:18Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.HostLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model & configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */\n+public class LocalityServlet extends HttpServlet {\n+  private static final String PROCESSOR_ID_PARAM = \"processorId\";\n+  private final ObjectMapper mapper = SamzaObjectMapper.getObjectMapper();\n+  private final LocalityManager localityManager;\n+\n+  public LocalityServlet(LocalityManager localityManager) {\n+    this.localityManager = localityManager;\n+  }\n+\n+  @Override\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+    response.setContentType(\"application/json\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    LocalityModel localityModel = localityManager.readLocality();\n+\n+    if (request.getParameterMap().size() == 1) {\n+      String processorId = request.getParameter(PROCESSOR_ID_PARAM);\n+      HostLocality hostLocality = Optional.ofNullable(localityModel.getHostLocality(processorId))\n+          .orElse(new HostLocality(processorId, \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzExNg=="}, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA3ODczOnYy", "diffSide": "LEFT", "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxNzo0NlrOHFAJEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxNzo0NlrOHFAJEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzI0OQ==", "bodyText": "Nice, thanks for cleaning all of this up!", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007249", "createdAt": "2020-08-21T23:17:46Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "diffHunk": "@@ -39,34 +36,14 @@\n  * </p>\n  */\n public class JobModel {\n-  private static final String EMPTY_STRING = \"\";\n   private final Config config;\n   private final Map<String, ContainerModel> containers;\n \n-  private final LocalityManager localityManager;\n-  private final Map<String, String> localityMappings;\n-\n   public int maxChangeLogStreamPartitions;\n \n   public JobModel(Config config, Map<String, ContainerModel> containers) {\n-    this(config, containers, null);\n-  }\n-\n-  public JobModel(Config config, Map<String, ContainerModel> containers, LocalityManager localityManager) {\n     this.config = config;\n     this.containers = Collections.unmodifiableMap(containers);\n-    this.localityManager = localityManager;\n-\n-    // initialize container localityMappings\n-    this.localityMappings = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA3OTM4OnYy", "diffSide": "LEFT", "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxODoyMFrOHFAJbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo1MzozMFrOHFt44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzM0Mw==", "bodyText": "If it's not too much extra work, does it make sense to move JobModel to samza-api and expose it in JobContext as part of this PR?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007343", "createdAt": "2020-08-21T23:18:20Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "diffHunk": "@@ -39,34 +36,14 @@\n  * </p>\n  */\n public class JobModel {\n-  private static final String EMPTY_STRING = \"\";\n   private final Config config;\n   private final Map<String, ContainerModel> containers;\n \n-  private final LocalityManager localityManager;\n-  private final Map<String, String> localityMappings;\n-\n   public int maxChangeLogStreamPartitions;\n \n   public JobModel(Config config, Map<String, ContainerModel> containers) {\n-    this(config, containers, null);\n-  }\n-\n-  public JobModel(Config config, Map<String, ContainerModel> containers, LocalityManager localityManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA2MTc0MQ==", "bodyText": "Not a big change. I kept it as a separate commit so that if we decide to leave it out, we can revert it.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475061741", "createdAt": "2020-08-22T08:08:44Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "diffHunk": "@@ -39,34 +36,14 @@\n  * </p>\n  */\n public class JobModel {\n-  private static final String EMPTY_STRING = \"\";\n   private final Config config;\n   private final Map<String, ContainerModel> containers;\n \n-  private final LocalityManager localityManager;\n-  private final Map<String, String> localityMappings;\n-\n   public int maxChangeLogStreamPartitions;\n \n   public JobModel(Config config, Map<String, ContainerModel> containers) {\n-    this(config, containers, null);\n-  }\n-\n-  public JobModel(Config config, Map<String, ContainerModel> containers, LocalityManager localityManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzM0Mw=="}, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1Njc3MA==", "bodyText": "Sounds good, thanks.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475756770", "createdAt": "2020-08-24T16:53:30Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/java/org/apache/samza/job/model/JobModel.java", "diffHunk": "@@ -39,34 +36,14 @@\n  * </p>\n  */\n public class JobModel {\n-  private static final String EMPTY_STRING = \"\";\n   private final Config config;\n   private final Map<String, ContainerModel> containers;\n \n-  private final LocalityManager localityManager;\n-  private final Map<String, String> localityMappings;\n-\n   public int maxChangeLogStreamPartitions;\n \n   public JobModel(Config config, Map<String, ContainerModel> containers) {\n-    this(config, containers, null);\n-  }\n-\n-  public JobModel(Config config, Map<String, ContainerModel> containers, LocalityManager localityManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzM0Mw=="}, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA4MTkzOnYy", "diffSide": "LEFT", "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoxOTo1OFrOHFAK1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoyMDowN1rOHFA5TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzcwMQ==", "bodyText": "Where is this called now?", "url": "https://github.com/apache/samza/pull/1421#discussion_r475007701", "createdAt": "2020-08-21T23:19:58Z", "author": {"login": "prateekm"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -466,11 +464,6 @@ class JobModelManager(\n       debug(\"Stopping HTTP server.\")\n       server.stop\n       info(\"Stopped HTTP server.\")\n-      if (localityManager != null) {\n-        info(\"Stopping localityManager\")\n-        localityManager.close()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxOTU5Ng==", "bodyText": "Good catch. It doesn't do much inside close as the metadata store used within gets closed inside job coordinator. For completeness, i moved this to job coordinator.", "url": "https://github.com/apache/samza/pull/1421#discussion_r475019596", "createdAt": "2020-08-22T00:20:07Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -466,11 +464,6 @@ class JobModelManager(\n       debug(\"Stopping HTTP server.\")\n       server.stop\n       info(\"Stopped HTTP server.\")\n-      if (localityManager != null) {\n-        info(\"Stopping localityManager\")\n-        localityManager.close()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwNzcwMQ=="}, "originalCommit": {"oid": "e6e94853bbe87c66e9068b5c028d74b598a58258"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTYyMDM0OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/ContainerLocality.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo1NzoxNlrOHGhNWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0OToyMFrOHGpL7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NzU5NA==", "bodyText": "Is this the physical id of the container? for example in yarn it will be container_0000_99... if it is yes lets explicitly call it containerId and add a doc suggesting phyical containerId of a container\nAlso don't you need the logical id (called processorId here...)", "url": "https://github.com/apache/samza/pull/1421#discussion_r476597594", "createdAt": "2020-08-25T16:57:16Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ContainerLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the container locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ContainerLocality {\n+  /* Container identifier */\n+  private String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyODMwMg==", "bodyText": "Logical id. I updated the variable name to clarify it..", "url": "https://github.com/apache/samza/pull/1421#discussion_r476728302", "createdAt": "2020-08-25T20:49:20Z", "author": {"login": "mynameborat"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ContainerLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the container locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ContainerLocality {\n+  /* Container identifier */\n+  private String id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NzU5NA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY3NzYwOnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxMjo0MVrOHGhxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxMjo0MVrOHGhxkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNjg2Nw==", "bodyText": "Lets add docs here for key of this hashmap, i think its the logical processor id for ex 1,2,3", "url": "https://github.com/apache/samza/pull/1421#discussion_r476606867", "createdAt": "2020-08-25T17:12:41Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ContainerLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ */\n+public class LocalityModel {\n+  private Map<String, ContainerLocality> containerLocalities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY3OTUxOnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxMzoxNFrOHGhyzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0OTowMFrOHGpLPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzE4Mw==", "bodyText": "s/id/processorId\nLets actually explicitly call it processorId", "url": "https://github.com/apache/samza/pull/1421#discussion_r476607183", "createdAt": "2020-08-25T17:13:14Z", "author": {"login": "Sanil15"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ContainerLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ */\n+public class LocalityModel {\n+  private Map<String, ContainerLocality> containerLocalities;\n+\n+  /**\n+   * Construct locality model for the job from the input map of container localities.\n+   * @param containerLocalities host locality information for the job keyed by container id\n+   */\n+  public LocalityModel(Map<String, ContainerLocality> containerLocalities) {\n+    this.containerLocalities = containerLocalities;\n+  }\n+\n+  /*\n+   * Returns a {@link Map} of {@link ContainerLocality} keyed by container id.\n+   */\n+  public Map<String, ContainerLocality> getContainerLocalities() {\n+    return containerLocalities;\n+  }\n+\n+  /*\n+   * Returns the {@link ContainerLocality} for the given container id.\n+   */\n+  public ContainerLocality getContainerLocality(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyODEyNg==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/apache/samza/pull/1421#discussion_r476728126", "createdAt": "2020-08-25T20:49:00Z", "author": {"login": "mynameborat"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ContainerLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ */\n+public class LocalityModel {\n+  private Map<String, ContainerLocality> containerLocalities;\n+\n+  /**\n+   * Construct locality model for the job from the input map of container localities.\n+   * @param containerLocalities host locality information for the job keyed by container id\n+   */\n+  public LocalityModel(Map<String, ContainerLocality> containerLocalities) {\n+    this.containerLocalities = containerLocalities;\n+  }\n+\n+  /*\n+   * Returns a {@link Map} of {@link ContainerLocality} keyed by container id.\n+   */\n+  public Map<String, ContainerLocality> getContainerLocalities() {\n+    return containerLocalities;\n+  }\n+\n+  /*\n+   * Returns the {@link ContainerLocality} for the given container id.\n+   */\n+  public ContainerLocality getContainerLocality(String id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzE4Mw=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY5MDkwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNTo1NFrOHGh53A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1NDozNlrOHHfFVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODk4OA==", "bodyText": "Here is another thought:\nLocalityManager and the ContainerPlacementMetadataStore both are present in this class ClusterBasedJobCoordinator because they both need a hold of metadata store\nWill it be cleaner to move this to ContainerProcessManager and then eventually move it to ContainerManager (when all the refactors we have in process are in)\nWe can just pass metadata store from here and then instantiate ContainerPlacementMetadatStore and LocalityManager in ContainerManager", "url": "https://github.com/apache/samza/pull/1421#discussion_r476608988", "createdAt": "2020-08-25T17:15:54Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -174,6 +176,7 @@\n   private final MetadataStore metadataStore;\n \n   private final SystemAdmins systemAdmins;\n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxMzY5Nw==", "bodyText": "In the first pass, I didn't have a local instance for locality manager but ended up introducing one to manage the lifecycle along with the other components.\nWhat do you think about doing it as part of the consolidation refactor work? We currently have ContainerPlacementMetadataStore in job coordinator. when we move that within CM, we can also move locality manager all in on go.", "url": "https://github.com/apache/samza/pull/1421#discussion_r476913697", "createdAt": "2020-08-26T00:32:05Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -174,6 +176,7 @@\n   private final MetadataStore metadataStore;\n \n   private final SystemAdmins systemAdmins;\n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODk4OA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMTM1MA==", "bodyText": "Sure we can take this work as a part of consolidation refactor, please add a todo in code so we do not forget that", "url": "https://github.com/apache/samza/pull/1421#discussion_r477611350", "createdAt": "2020-08-26T21:54:36Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterBasedJobCoordinator.java", "diffHunk": "@@ -174,6 +176,7 @@\n   private final MetadataStore metadataStore;\n \n   private final SystemAdmins systemAdmins;\n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODk4OA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTcxMzk5OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMTo0OVrOHGiH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozODowOVrOHG6mqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjU3OQ==", "bodyText": "Now we are passing this LocalityManager everywhere ContainerManager, CPM, StandbyContainerManager just to get the host that container was last seen....\nI think we can have it cleaner by either maintaining that in SamzaApplicationState or having static util in LocalityManager to fetch the last seen host", "url": "https://github.com/apache/samza/pull/1421#discussion_r476612579", "createdAt": "2020-08-25T17:21:49Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -80,19 +82,23 @@\n \n   private final Optional<StandbyContainerManager> standbyContainerManager;\n \n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyODAxMQ==", "bodyText": "SamzaApplicationState is a holder class to share state between components and not supposed to hold on any manager classes. We have a TODO to remove JobModelManager out of it. It would be counter productive to introduce another component into the holder class.\nI am not a huge fan of Static for following reasons\n\n\nIt makes testing harder and using power mock for component testing everywhere.\nUtility classes that handles components with lifecycle is harder to reason about.\nStatic methods are harder to evolve/extend without breaking the signature & modifying the callers and forces the dependencies it uses to be either passed as arguments or define as static variables within the class.", "url": "https://github.com/apache/samza/pull/1421#discussion_r476728011", "createdAt": "2020-08-25T20:48:48Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -80,19 +82,23 @@\n \n   private final Optional<StandbyContainerManager> standbyContainerManager;\n \n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjU3OQ=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzY3Mw==", "bodyText": "+1, using state to fetch locality information was a bad pattern.\nMakes writing tests super weird.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477013673", "createdAt": "2020-08-26T03:38:09Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -80,19 +82,23 @@\n \n   private final Optional<StandbyContainerManager> standbyContainerManager;\n \n+  private final LocalityManager localityManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjU3OQ=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTc5MDMwOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/serializers/model/JsonContainerLocalityMixIn.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozNToxMlrOHGixdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozMTo1MFrOHGopVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMzIyMA==", "bodyText": "Same lets be specific here about the fact that is it processorId or containerId", "url": "https://github.com/apache/samza/pull/1421#discussion_r476623220", "createdAt": "2020-08-25T17:35:12Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/serializers/model/JsonContainerLocalityMixIn.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.serializers.model;\n+\n+import org.codehaus.jackson.annotate.JsonCreator;\n+import org.codehaus.jackson.annotate.JsonIgnoreProperties;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+\n+\n+/**\n+ * A mix-in Jackson class to convert {@link org.apache.samza.job.model.ContainerLocality} to/from JSON\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public abstract class JsonContainerLocalityMixIn {\n+  @JsonCreator\n+  public JsonContainerLocalityMixIn(@JsonProperty(\"id\") String id, @JsonProperty(\"host\") String host,\n+      @JsonProperty(\"jmx-url\") String jmxUrl, @JsonProperty(\"jmx-tunneling-url\") String jmxTunnelingUrl) {\n+  }\n+\n+  @JsonProperty(\"id\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxOTQ0NA==", "bodyText": "done", "url": "https://github.com/apache/samza/pull/1421#discussion_r476719444", "createdAt": "2020-08-25T20:31:50Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/serializers/model/JsonContainerLocalityMixIn.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.serializers.model;\n+\n+import org.codehaus.jackson.annotate.JsonCreator;\n+import org.codehaus.jackson.annotate.JsonIgnoreProperties;\n+import org.codehaus.jackson.annotate.JsonProperty;\n+\n+\n+/**\n+ * A mix-in Jackson class to convert {@link org.apache.samza.job.model.ContainerLocality} to/from JSON\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public abstract class JsonContainerLocalityMixIn {\n+  @JsonCreator\n+  public JsonContainerLocalityMixIn(@JsonProperty(\"id\") String id, @JsonProperty(\"host\") String host,\n+      @JsonProperty(\"jmx-url\") String jmxUrl, @JsonProperty(\"jmx-tunneling-url\") String jmxTunnelingUrl) {\n+  }\n+\n+  @JsonProperty(\"id\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMzIyMA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTgwMjg3OnYy", "diffSide": "RIGHT", "path": "samza-yarn/src/main/java/org/apache/samza/validation/YarnJobValidationTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozODo0OVrOHGi5cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozMTo0NFrOHGopJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNTI2NA==", "bodyText": "In samza we control JMX enable disable with a config, you should only emit JMX metrics here if that config is enabled", "url": "https://github.com/apache/samza/pull/1421#discussion_r476625264", "createdAt": "2020-08-25T17:38:49Z", "author": {"login": "Sanil15"}, "path": "samza-yarn/src/main/java/org/apache/samza/validation/YarnJobValidationTool.java", "diffHunk": "@@ -158,23 +159,24 @@ public void validateJmxMetrics() throws Exception {\n     CoordinatorStreamStore coordinatorStreamStore = new CoordinatorStreamStore(config, metricsRegistry);\n     coordinatorStreamStore.init();\n     try {\n-      Config configFromCoordinatorStream = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n-      ChangelogStreamManager changelogStreamManager = new ChangelogStreamManager(coordinatorStreamStore);\n-      JobModelManager jobModelManager =\n-          JobModelManager.apply(configFromCoordinatorStream, changelogStreamManager.readPartitionMapping(),\n-              coordinatorStreamStore, metricsRegistry);\n+      LocalityManager localityManager =\n+          new LocalityManager(new NamespaceAwareCoordinatorStreamStore(coordinatorStreamStore, SetConfig.TYPE));\n       validator.init(config);\n-      Map<String, String> jmxUrls = jobModelManager.jobModel().getAllContainerToHostValues(SetContainerHostMapping.JMX_TUNNELING_URL_KEY);\n-      for (Map.Entry<String, String> entry : jmxUrls.entrySet()) {\n-        String containerId = entry.getKey();\n-        String jmxUrl = entry.getValue();\n-        log.info(\"validate container \" + containerId + \" metrics with JMX: \" + jmxUrl);\n-        JmxMetricsAccessor jmxMetrics = new JmxMetricsAccessor(jmxUrl);\n-        jmxMetrics.connect();\n-        validator.validate(jmxMetrics);\n-        jmxMetrics.close();\n-        log.info(\"validate container \" + containerId + \" successfully\");\n+      LocalityModel localityModel = localityManager.readLocality();\n+\n+      for (ContainerLocality containerLocality : localityModel.getContainerLocalities().values()) {\n+        String containerId = containerLocality.id();\n+        String jmxUrl = containerLocality.jmxTunnelingUrl();\n+        if (StringUtils.isNotBlank(jmxUrl)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxOTM5Ng==", "bodyText": "this is a CLI tool and I kept the old semantics as is in terms of how it uses the locality information. I'd prefer to keep as is since this PR's scope is not to fix how yarn job validation tool uses JMX.", "url": "https://github.com/apache/samza/pull/1421#discussion_r476719396", "createdAt": "2020-08-25T20:31:44Z", "author": {"login": "mynameborat"}, "path": "samza-yarn/src/main/java/org/apache/samza/validation/YarnJobValidationTool.java", "diffHunk": "@@ -158,23 +159,24 @@ public void validateJmxMetrics() throws Exception {\n     CoordinatorStreamStore coordinatorStreamStore = new CoordinatorStreamStore(config, metricsRegistry);\n     coordinatorStreamStore.init();\n     try {\n-      Config configFromCoordinatorStream = CoordinatorStreamUtil.readConfigFromCoordinatorStream(coordinatorStreamStore);\n-      ChangelogStreamManager changelogStreamManager = new ChangelogStreamManager(coordinatorStreamStore);\n-      JobModelManager jobModelManager =\n-          JobModelManager.apply(configFromCoordinatorStream, changelogStreamManager.readPartitionMapping(),\n-              coordinatorStreamStore, metricsRegistry);\n+      LocalityManager localityManager =\n+          new LocalityManager(new NamespaceAwareCoordinatorStreamStore(coordinatorStreamStore, SetConfig.TYPE));\n       validator.init(config);\n-      Map<String, String> jmxUrls = jobModelManager.jobModel().getAllContainerToHostValues(SetContainerHostMapping.JMX_TUNNELING_URL_KEY);\n-      for (Map.Entry<String, String> entry : jmxUrls.entrySet()) {\n-        String containerId = entry.getKey();\n-        String jmxUrl = entry.getValue();\n-        log.info(\"validate container \" + containerId + \" metrics with JMX: \" + jmxUrl);\n-        JmxMetricsAccessor jmxMetrics = new JmxMetricsAccessor(jmxUrl);\n-        jmxMetrics.connect();\n-        validator.validate(jmxMetrics);\n-        jmxMetrics.close();\n-        log.info(\"validate container \" + containerId + \" successfully\");\n+      LocalityModel localityModel = localityManager.readLocality();\n+\n+      for (ContainerLocality containerLocality : localityModel.getContainerLocalities().values()) {\n+        String containerId = containerLocality.id();\n+        String jmxUrl = containerLocality.jmxTunnelingUrl();\n+        if (StringUtils.isNotBlank(jmxUrl)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNTI2NA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTgyNTQ5OnYy", "diffSide": "LEFT", "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0NToxM1rOHGjH0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MDo1NlrOHHrdQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODk0NA==", "bodyText": "Can't we have helper here something like this: readLastSeenHostForContainer(String processorId)\nRather than reading locality hashmap everywhere then doing a get for last seen locality", "url": "https://github.com/apache/samza/pull/1421#discussion_r476628944", "createdAt": "2020-08-25T17:45:13Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "diffHunk": "@@ -53,28 +56,26 @@ public LocalityManager(MetadataStore metadataStore) {\n   }\n \n   /**\n-   * Method to allow read container locality information from the {@link MetadataStore}.\n-   * This method is used in {@link org.apache.samza.coordinator.JobModelManager}.\n+   * Fetch the container locality information from the {@link MetadataStore}.\n    *\n-   * @return the map of containerId: (hostname)\n+   * @return the {@code LocalityModel} for the job\n    */\n-  public Map<String, Map<String, String>> readContainerLocality() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxODM3NA==", "bodyText": "we got rid of this code and the new method returns a model. We will need a method to return the locality of all containers or specific container & we already have a method to expose both.\nExposing helper methods within each attributes of ContainerLocality like host or jmx seems too redundant up top here.", "url": "https://github.com/apache/samza/pull/1421#discussion_r476718374", "createdAt": "2020-08-25T20:29:55Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "diffHunk": "@@ -53,28 +56,26 @@ public LocalityManager(MetadataStore metadataStore) {\n   }\n \n   /**\n-   * Method to allow read container locality information from the {@link MetadataStore}.\n-   * This method is used in {@link org.apache.samza.coordinator.JobModelManager}.\n+   * Fetch the container locality information from the {@link MetadataStore}.\n    *\n-   * @return the map of containerId: (hostname)\n+   * @return the {@code LocalityModel} for the job\n    */\n-  public Map<String, Map<String, String>> readContainerLocality() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODk0NA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMjU4Ng==", "bodyText": "Optional.ofNullable(localityManager.readLocality().getProcessorLocality(processorId))\n          .map(ProcessorLocality::host)\n          .orElse(null);\n\nis redundant and I was refeering to make a helper method that returns this so if tomorrow there is a third place where we need last seen host we would not repeat the same thing", "url": "https://github.com/apache/samza/pull/1421#discussion_r477612586", "createdAt": "2020-08-26T21:57:25Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "diffHunk": "@@ -53,28 +56,26 @@ public LocalityManager(MetadataStore metadataStore) {\n   }\n \n   /**\n-   * Method to allow read container locality information from the {@link MetadataStore}.\n-   * This method is used in {@link org.apache.samza.coordinator.JobModelManager}.\n+   * Fetch the container locality information from the {@link MetadataStore}.\n    *\n-   * @return the map of containerId: (hostname)\n+   * @return the {@code LocalityModel} for the job\n    */\n-  public Map<String, Map<String, String>> readContainerLocality() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODk0NA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc5Nzk3Mw==", "bodyText": "We have divergence in our logic on how lack of locality is handled e.g. within LocalityManager vs ContainerProcessorManager. I see your point in case of complex logic being shared across. However, introducing a helper method to just unwrap the model seems overkill at the moment.\nAlso, why only host and what is special about that attribute to have a helper wrapper method and why not for jmx or jmx tunnel url? This goes back to my point of being redundant without much ROI at the cost readability because I'd need to go down one layer further to understand what readLastSeenHostForContainer does in its unwrapping logic.\nI'd prefer to start simple and not over architect and extract/refactor as we see the need as long as the right foundations are in place for the code to evolve and extend.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477797973", "createdAt": "2020-08-27T00:42:31Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "diffHunk": "@@ -53,28 +56,26 @@ public LocalityManager(MetadataStore metadataStore) {\n   }\n \n   /**\n-   * Method to allow read container locality information from the {@link MetadataStore}.\n-   * This method is used in {@link org.apache.samza.coordinator.JobModelManager}.\n+   * Fetch the container locality information from the {@link MetadataStore}.\n    *\n-   * @return the map of containerId: (hostname)\n+   * @return the {@code LocalityModel} for the job\n    */\n-  public Map<String, Map<String, String>> readContainerLocality() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODk0NA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgxNDA4MA==", "bodyText": "Doing same thing more than 2 times is justified enough for helper imo and not an overkill, Anyways I will live this upto your discretion", "url": "https://github.com/apache/samza/pull/1421#discussion_r477814080", "createdAt": "2020-08-27T00:50:56Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/java/org/apache/samza/container/LocalityManager.java", "diffHunk": "@@ -53,28 +56,26 @@ public LocalityManager(MetadataStore metadataStore) {\n   }\n \n   /**\n-   * Method to allow read container locality information from the {@link MetadataStore}.\n-   * This method is used in {@link org.apache.samza.coordinator.JobModelManager}.\n+   * Fetch the container locality information from the {@link MetadataStore}.\n    *\n-   * @return the map of containerId: (hostname)\n+   * @return the {@code LocalityModel} for the job\n    */\n-  public Map<String, Map<String, String>> readContainerLocality() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyODk0NA=="}, "originalCommit": {"oid": "6cda15d07533caff416d5fa27f4c900a7f2fee45"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjExNDE1OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/context/JobContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyMDozNVrOHG6Utg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyMDozNVrOHG6Utg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAwOTA3OA==", "bodyText": "{@link JobModel}", "url": "https://github.com/apache/samza/pull/1421#discussion_r477009078", "createdAt": "2020-08-26T03:20:35Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/context/JobContext.java", "diffHunk": "@@ -46,4 +47,9 @@\n    * @return the id for this job\n    */\n   String getJobId();\n+\n+  /*\n+   * Returns the job model for this job", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjEyNDg5OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyNjozM1rOHG6bLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyNjozM1rOHG6bLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMDczNA==", "bodyText": "Super Nit:\n\"...This locality information is used to place a container, if possible, on the host that it was last seen on....\"", "url": "https://github.com/apache/samza/pull/1421#discussion_r477010734", "createdAt": "2020-08-26T03:26:33Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjEyOTQ4OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzoyOTozNFrOHG6d4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo0NDozNVrOHG6tMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTQyNg==", "bodyText": "Would it make sense to add a version field to the model, so that later when someone changes it, downstream code can handle it based on the version number (e.g., int) ?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477011426", "createdAt": "2020-08-26T03:29:34Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ProcessorLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ *\n+ * In YARN deployment model, processors are interchangeably used for container and <i>processorId</i>refers to\n+ * logical container id.\n+ */\n+public class LocalityModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxNTM0Ng==", "bodyText": "Are you referring to the data model version or the versioning of the actual data?\nIf it is former, our current only metadata store (Kafka) has a versioning of the format under CoordinatorStreamMessage. That should handle evolution in the event of adding fields; If it is latter, we don't have a universal versioning of metadata (job model, configuration, locality) yet. We will likely add versioning to all the metadata with the work on metadata abstraction.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477015346", "createdAt": "2020-08-26T03:44:35Z", "author": {"login": "mynameborat"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ProcessorLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ *\n+ * In YARN deployment model, processors are interchangeably used for container and <i>processorId</i>refers to\n+ * logical container id.\n+ */\n+public class LocalityModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTQyNg=="}, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjEzMDkzOnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozMDoxNlrOHG6epQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozMzo0MlrOHG6h7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTYyMQ==", "bodyText": "Should we return new HashMap(processorLocalities) so that the caller doesnt modify the original one in this class?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477011621", "createdAt": "2020-08-26T03:30:16Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ProcessorLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ *\n+ * In YARN deployment model, processors are interchangeably used for container and <i>processorId</i>refers to\n+ * logical container id.\n+ */\n+public class LocalityModel {\n+  /*\n+   * A collection of processor locality keyed by processorId.\n+   */\n+  private Map<String, ProcessorLocality> processorLocalities;\n+\n+  /**\n+   * Construct locality model for the job from the input map of processor localities.\n+   * @param processorLocalities host locality information for the job keyed by processor id\n+   */\n+  public LocalityModel(Map<String, ProcessorLocality> processorLocalities) {\n+    this.processorLocalities = processorLocalities;\n+  }\n+\n+  /*\n+   * Returns a {@link Map} of {@link ProcessorLocality} keyed by processors id.\n+   */\n+  public Map<String, ProcessorLocality> getProcessorLocalities() {\n+    return processorLocalities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMjQ2MQ==", "bodyText": "Good catch \ud83d\udc4d The wrapper class is immutable; will make the instance variable hold on an immutable copy in the constructor to avoid creating multiple copies of HashMap during invocation.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477012461", "createdAt": "2020-08-26T03:33:42Z", "author": {"login": "mynameborat"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/LocalityModel.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+import java.util.Map;\n+\n+/**\n+ * A model to represent the locality information of an application. The locality information refers to the\n+ * whereabouts of the physical execution of a samza container. With this information, samza achieves (best effort) affinity\n+ * i.e. place the container on the host in which it was running before. By doing this, stateful applications can minimize\n+ * the bootstrap time of their state by leveraging the local copy.\n+ *\n+ * It is suffice to have only {@link ProcessorLocality} model and use it within locality manager. However, this abstraction\n+ * enables us extend locality beyond container. e.g. It is useful to track task locality to enable heterogeneous containers\n+ * or fine grained execution model.\n+ *\n+ * In YARN deployment model, processors are interchangeably used for container and <i>processorId</i>refers to\n+ * logical container id.\n+ */\n+public class LocalityModel {\n+  /*\n+   * A collection of processor locality keyed by processorId.\n+   */\n+  private Map<String, ProcessorLocality> processorLocalities;\n+\n+  /**\n+   * Construct locality model for the job from the input map of processor localities.\n+   * @param processorLocalities host locality information for the job keyed by processor id\n+   */\n+  public LocalityModel(Map<String, ProcessorLocality> processorLocalities) {\n+    this.processorLocalities = processorLocalities;\n+  }\n+\n+  /*\n+   * Returns a {@link Map} of {@link ProcessorLocality} keyed by processors id.\n+   */\n+  public Map<String, ProcessorLocality> getProcessorLocalities() {\n+    return processorLocalities;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMTYyMQ=="}, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjE0MDIyOnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozNTozOFrOHG6kDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo0OTozNVrOHG6yRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzAwNg==", "bodyText": "Would it make sense to add a timestamp field here, to know when was the information last updated ?\nTimestamps could come in handy when, e.g., debugging race conditions.\nSimilar thoughts on version for this.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477013006", "createdAt": "2020-08-26T03:35:38Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the processor locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ProcessorLocality {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxNjY0Nw==", "bodyText": "This is a reflection of the data model persisted in Kafka. Introducing timestamp would be an evolution to the locality model we currently have and would need changes to the serde; Agree on its usefulness although it is more useful if we have some sort of versioning of the data.\nWe should track timestamp being one of the fields to be added to our model when we tackle versioning for metadata.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477016647", "createdAt": "2020-08-26T03:49:35Z", "author": {"login": "mynameborat"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the processor locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ProcessorLocality {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzAwNg=="}, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjE0MTA3OnYy", "diffSide": "RIGHT", "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzozNjowOVrOHG6kmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo0NjozMVrOHG6vMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzE0Ng==", "bodyText": "I long for the day Samza code uses Lombok :-)", "url": "https://github.com/apache/samza/pull/1421#discussion_r477013146", "createdAt": "2020-08-26T03:36:09Z", "author": {"login": "rmatharu"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the processor locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ProcessorLocality {\n+  /* Processor identifier. In YARN deployment model, this corresponds to the logical container id */\n+  private String id;\n+  /* Host on which the processor is currently placed */\n+  private String host;\n+  private String jmxUrl;\n+  /* JMX tunneling URL for debugging */\n+  private String jmxTunnelingUrl;\n+\n+  public ProcessorLocality(String id, String host) {\n+    this(id, host, \"\", \"\");\n+  }\n+\n+  public ProcessorLocality(String id, String host, String jmxUrl, String jmxTunnelingUrl) {\n+    this.id = id;\n+    this.host = host;\n+    this.jmxUrl = jmxUrl;\n+    this.jmxTunnelingUrl = jmxTunnelingUrl;\n+  }\n+\n+  public String id() {\n+    return id;\n+  }\n+\n+  public String host() {\n+    return host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxNTg1Nw==", "bodyText": ":-)", "url": "https://github.com/apache/samza/pull/1421#discussion_r477015857", "createdAt": "2020-08-26T03:46:31Z", "author": {"login": "mynameborat"}, "path": "samza-api/src/main/java/org/apache/samza/job/model/ProcessorLocality.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.job.model;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A data model to represent the processor locality information. The locality information refers to the whereabouts\n+ * of the physical execution of container.\n+ * Fields such as <i>jmxUrl</i> and <i>jmxTunnelingUrl</i> exist for backward compatibility reasons as they were\n+ * historically stored under the same name space as locality and surfaced within the framework through the locality\n+ * manager.\n+ */\n+public class ProcessorLocality {\n+  /* Processor identifier. In YARN deployment model, this corresponds to the logical container id */\n+  private String id;\n+  /* Host on which the processor is currently placed */\n+  private String host;\n+  private String jmxUrl;\n+  /* JMX tunneling URL for debugging */\n+  private String jmxTunnelingUrl;\n+\n+  public ProcessorLocality(String id, String host) {\n+    this(id, host, \"\", \"\");\n+  }\n+\n+  public ProcessorLocality(String id, String host, String jmxUrl, String jmxTunnelingUrl) {\n+    this.id = id;\n+    this.host = host;\n+    this.jmxUrl = jmxUrl;\n+    this.jmxTunnelingUrl = jmxTunnelingUrl;\n+  }\n+\n+  public String id() {\n+    return id;\n+  }\n+\n+  public String host() {\n+    return host;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxMzE0Ng=="}, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjE0ODY2OnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMzo0MDozNFrOHG6pBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNDowMToyNVrOHG6-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxNDI3OQ==", "bodyText": "Do we know which URL would this be exposed under,\nhttp://:/abc\nMight be useful to add it here so if we want analytics or tools to ping it for some reason.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477014279", "createdAt": "2020-08-26T03:40:34Z", "author": {"login": "rmatharu"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.ProcessorLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model and configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxOTY1Mg==", "bodyText": "There isn't a direct URL per say. I added a general comment to identify the whereabouts of the server and port and the path of the actual servlet.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477019652", "createdAt": "2020-08-26T04:01:25Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/coordinator/server/LocalityServlet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.samza.coordinator.server;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.samza.container.LocalityManager;\n+import org.apache.samza.job.model.ProcessorLocality;\n+import org.apache.samza.job.model.LocalityModel;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+\n+/**\n+ * A servlet for locality information of a job. The servlet is hosted alongside of the {@link JobServlet} which hosts\n+ * job model and configuration. Historically, locality information was part of job model but we extracted the locality\n+ * as job model is static within the lifecycle of an application attempt while locality changes in the event of container\n+ * movements.\n+ *\n+ * This separation enables us to achieve performance benefits by caching job model when it is served by the AM as it\n+ * can incur significant penalty in the job start time for jobs with large number of containers.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAxNDI3OQ=="}, "originalCommit": {"oid": "d2ef4acd8d07f6d6dc4f2947d6849aae70125a95"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Njg3NjEzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyNjoyOFrOHHopAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0NDoxNlrOHHwK5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2NzkzNw==", "bodyText": "redundant, isn't this already done in setup?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477767937", "createdAt": "2020-08-27T00:26:28Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -558,14 +548,19 @@ public Void answer(InvocationOnMock invocation) {\n   public void testContainerPlacementsForJobRunningInDegradedState() throws Exception {\n     // Set failure after retries to false to enable job running in degraded state\n     config = new MapConfig(configVals, getConfigWithHostAffinityAndRetries(true, 1, false));\n-    state = new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+    state = new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n     ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n-    containerManager = spy(new ContainerManager(containerPlacementMetadataStore, state, clusterResourceManager, true, false));\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg5MTMwMw==", "bodyText": "extracted the locality manager to instance variable to reuse them in the tests.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477891303", "createdAt": "2020-08-27T01:44:16Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -558,14 +548,19 @@ public Void answer(InvocationOnMock invocation) {\n   public void testContainerPlacementsForJobRunningInDegradedState() throws Exception {\n     // Set failure after retries to false to enable job running in degraded state\n     config = new MapConfig(configVals, getConfigWithHostAffinityAndRetries(true, 1, false));\n-    state = new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+    state = new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n     ClusterManagerConfig clusterManagerConfig = new ClusterManagerConfig(config);\n-    containerManager = spy(new ContainerManager(containerPlacementMetadataStore, state, clusterResourceManager, true, false));\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2NzkzNw=="}, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Njg3NjkzOnYy", "diffSide": "RIGHT", "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyNjozNFrOHHopow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyNjozNFrOHHopow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2ODA5OQ==", "bodyText": "redundant, isn't this already done in setup?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477768099", "createdAt": "2020-08-27T00:26:34Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -672,18 +667,23 @@ public void testAlwaysMoveToAnyHostForHostAffinityDisabled() throws Exception {\n     Map<String, String> conf = new HashMap<>();\n     conf.putAll(getConfigWithHostAffinityAndRetries(false, 1, true));\n     SamzaApplicationState state =\n-        new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+        new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     ClusterResourceManager.Callback callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Njg3Nzk3OnYy", "diffSide": "RIGHT", "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyNjo0MFrOHHoqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoyNjo0MFrOHHoqWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc2ODI4Mw==", "bodyText": "redundant, isn't this already done in setup?", "url": "https://github.com/apache/samza/pull/1421#discussion_r477768283", "createdAt": "2020-08-27T00:26:40Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestContainerPlacementActions.java", "diffHunk": "@@ -807,16 +807,21 @@ public Void answer(InvocationOnMock invocation) {\n   @Test(expected = NullPointerException.class)\n   public void testBadControlRequestRejected() throws Exception {\n     SamzaApplicationState state =\n-        new SamzaApplicationState(getJobModelManagerWithHostAffinity(ImmutableMap.of(\"0\", \"host-1\", \"1\", \"host-2\")));\n+        new SamzaApplicationState(JobModelManagerTestUtil.getJobModelManager(getConfig(), 2, this.server));\n     ClusterResourceManager.Callback callback = mock(ClusterResourceManager.Callback.class);\n     MockClusterResourceManager clusterResourceManager = new MockClusterResourceManager(callback, state);\n+    LocalityManager mockLocalityManager = mock(LocalityManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzAyOTAyOnYy", "diffSide": "RIGHT", "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo0MDo0M1rOHHqRjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMTo0NzozM1rOHHwdCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc5NDcwMQ==", "bodyText": "Why do we need this here can't the callee of this not call LocalityManager since we are already making them independent", "url": "https://github.com/apache/samza/pull/1421#discussion_r477794701", "createdAt": "2020-08-27T00:40:43Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -167,15 +167,18 @@ object JobModelManager extends Logging {\n     */\n   def getProcessorLocality(config: Config, localityManager: LocalityManager) = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg3NTE3Ng==", "bodyText": "discussed offline with Bharath since JobModelMAnager dumping locality info when LocalityManager is kind of independent does not make sense to me, please cut a jira here and add a todo so we can track this cleanup", "url": "https://github.com/apache/samza/pull/1421#discussion_r477875176", "createdAt": "2020-08-27T01:31:21Z", "author": {"login": "Sanil15"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -167,15 +167,18 @@ object JobModelManager extends Logging {\n     */\n   def getProcessorLocality(config: Config, localityManager: LocalityManager) = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc5NDcwMQ=="}, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg5NTk0NA==", "bodyText": "Putting the points from our offline discussion. This is a helper method within the JobModelManager that does some massaging on the locality information and decorates it with its own terminology for the absence of locality ANY_HOST. The helper method could carry a perception that this is just getting locality information but in theory it is not. Also, this goes over the list of all available containers and populates ANY_HOST for the ones that don't have locality. This information is oblivious to the LocalityManager as it only treats coordinator stream as the source of truth which only knows of container that has locality data.", "url": "https://github.com/apache/samza/pull/1421#discussion_r477895944", "createdAt": "2020-08-27T01:47:33Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/scala/org/apache/samza/coordinator/JobModelManager.scala", "diffHunk": "@@ -167,15 +167,18 @@ object JobModelManager extends Logging {\n     */\n   def getProcessorLocality(config: Config, localityManager: LocalityManager) = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc5NDcwMQ=="}, "originalCommit": {"oid": "113fcc52fbb278f8f0b19853c8653c350ad3e228"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1502, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}