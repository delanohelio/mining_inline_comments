{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTYyMTkx", "number": 1403, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo1Mzo0MFrOESczwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTowMDoyNlrOET7gaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzgxODI2OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo1Mzo0MFrOG3oxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzoxNDo0OVrOG5Ndiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5Mjg4Nw==", "bodyText": "Im just wondering if there is a better way than making all private variables protected?\nMaybe have another constructor which sets all these variables\nand a getter for the variables you intend to use in the extended class?", "url": "https://github.com/apache/samza/pull/1403#discussion_r460992887", "createdAt": "2020-07-27T15:53:40Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -67,48 +69,52 @@\n import org.apache.samza.system.SystemStream;\n import org.apache.samza.util.ExponentialSleepStrategy;\n import org.apache.samza.util.HttpUtil;\n+import org.apache.samza.util.MetricsReporterLoader;\n import org.apache.samza.util.ReflectionUtil;\n \n @Plugin(name = \"Stream\", category = \"Core\", elementType = \"appender\", printObject = true)\n public class StreamAppender extends AbstractAppender {\n \n-  private static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n-  private static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n-  private static final String SOURCE = \"log4j-log\";\n+  protected static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n+  protected static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n+  protected static final String SOURCE = \"log4j-log\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MDE3NA==", "bodyText": "In my use case (extend existing StreamAppender), I do use small pieces of the changed variables. Just in case in the future, we want to expose more objects or just make extend-friendly feature thoroughly, I prefer to modify all necessary variables (seem useful for child classes) to protected instead of only changing the variables that I intend to use.", "url": "https://github.com/apache/samza/pull/1403#discussion_r461270174", "createdAt": "2020-07-28T01:53:05Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -67,48 +69,52 @@\n import org.apache.samza.system.SystemStream;\n import org.apache.samza.util.ExponentialSleepStrategy;\n import org.apache.samza.util.HttpUtil;\n+import org.apache.samza.util.MetricsReporterLoader;\n import org.apache.samza.util.ReflectionUtil;\n \n @Plugin(name = \"Stream\", category = \"Core\", elementType = \"appender\", printObject = true)\n public class StreamAppender extends AbstractAppender {\n \n-  private static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n-  private static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n-  private static final String SOURCE = \"log4j-log\";\n+  protected static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n+  protected static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n+  protected static final String SOURCE = \"log4j-log\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5Mjg4Nw=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczNzc2Mw==", "bodyText": "within Samza i see classes which have only some of their variables exposed as protected and keep the rest private. So i think it is an acceptable pattern to have partial protected. We can expose more as the need arises.\nSo the current need to extend is coming from having a usecase to support another transformation right .. this PR can \"make the parts extendable for different transformation/serde\" and that i believe will be acceptable too.", "url": "https://github.com/apache/samza/pull/1403#discussion_r461737763", "createdAt": "2020-07-28T17:07:32Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -67,48 +69,52 @@\n import org.apache.samza.system.SystemStream;\n import org.apache.samza.util.ExponentialSleepStrategy;\n import org.apache.samza.util.HttpUtil;\n+import org.apache.samza.util.MetricsReporterLoader;\n import org.apache.samza.util.ReflectionUtil;\n \n @Plugin(name = \"Stream\", category = \"Core\", elementType = \"appender\", printObject = true)\n public class StreamAppender extends AbstractAppender {\n \n-  private static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n-  private static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n-  private static final String SOURCE = \"log4j-log\";\n+  protected static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n+  protected static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n+  protected static final String SOURCE = \"log4j-log\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5Mjg4Nw=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3NTA4Nw==", "bodyText": "@bkonold Do you have ideas about this issue?", "url": "https://github.com/apache/samza/pull/1403#discussion_r461975087", "createdAt": "2020-07-29T00:51:24Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -67,48 +69,52 @@\n import org.apache.samza.system.SystemStream;\n import org.apache.samza.util.ExponentialSleepStrategy;\n import org.apache.samza.util.HttpUtil;\n+import org.apache.samza.util.MetricsReporterLoader;\n import org.apache.samza.util.ReflectionUtil;\n \n @Plugin(name = \"Stream\", category = \"Core\", elementType = \"appender\", printObject = true)\n public class StreamAppender extends AbstractAppender {\n \n-  private static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n-  private static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n-  private static final String SOURCE = \"log4j-log\";\n+  protected static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n+  protected static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n+  protected static final String SOURCE = \"log4j-log\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5Mjg4Nw=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MjU3MQ==", "bodyText": "Agree I've seen partial protection in several places of Samza so I think it would be fine here. Labeling only what you need to as protected is also better for the reader because it will restrict the set of functionality a subclass can override. IMO, I'd be in favor of labeling only what you need to as protected.", "url": "https://github.com/apache/samza/pull/1403#discussion_r462642571", "createdAt": "2020-07-29T23:14:49Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -67,48 +69,52 @@\n import org.apache.samza.system.SystemStream;\n import org.apache.samza.util.ExponentialSleepStrategy;\n import org.apache.samza.util.HttpUtil;\n+import org.apache.samza.util.MetricsReporterLoader;\n import org.apache.samza.util.ReflectionUtil;\n \n @Plugin(name = \"Stream\", category = \"Core\", elementType = \"appender\", printObject = true)\n public class StreamAppender extends AbstractAppender {\n \n-  private static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n-  private static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n-  private static final String SOURCE = \"log4j-log\";\n+  protected static final String JAVA_OPTS_CONTAINER_NAME = \"samza.container.name\";\n+  protected static final String JOB_COORDINATOR_TAG = \"samza-job-coordinator\";\n+  protected static final String SOURCE = \"log4j-log\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5Mjg4Nw=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODAwNzEyOnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjo0MDoyOFrOG3qlsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjo0NjoyNVrOG4iVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjY0Mg==", "bodyText": "can the appenderName be anything other than the class name - here StreamAppender?\nWould getClass() suffice here instead of another variable?", "url": "https://github.com/apache/samza/pull/1403#discussion_r461022642", "createdAt": "2020-07-27T16:40:28Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -214,7 +220,7 @@ public void append(LogEvent event) {\n           metrics.bufferFillPct.set(Math.round(100f * logQueue.size() / DEFAULT_QUEUE_SIZE));\n         }\n       } catch (Exception e) {\n-        System.err.println(\"[StreamAppender] Error sending log message:\");\n+        System.err.println(String.format(\"[%s] Error sending log message:\", appenderName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzODQ4Ng==", "bodyText": "Yes. it will be the same as what we write in log4j2.xml\ne.g.\n<Appender type=\"Stream\" name=\"<whatismyname>\">\n      <Layout type=\"PatternLayout\" pattern=\"xxx\"/>\n</Appender>\n\nThen, the appenderName is . This name should be unique in the log4j2.xml.", "url": "https://github.com/apache/samza/pull/1403#discussion_r461238486", "createdAt": "2020-07-28T00:02:12Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -214,7 +220,7 @@ public void append(LogEvent event) {\n           metrics.bufferFillPct.set(Math.round(100f * logQueue.size() / DEFAULT_QUEUE_SIZE));\n         }\n       } catch (Exception e) {\n-        System.err.println(\"[StreamAppender] Error sending log message:\");\n+        System.err.println(String.format(\"[%s] Error sending log message:\", appenderName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjY0Mg=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczODUyNg==", "bodyText": "I understand that log4j2.xml should have the Java class name of the appender.\nmy question was if we can drop the variable \"appenderName\" and get it from getClass().getName instead", "url": "https://github.com/apache/samza/pull/1403#discussion_r461738526", "createdAt": "2020-07-28T17:08:51Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -214,7 +220,7 @@ public void append(LogEvent event) {\n           metrics.bufferFillPct.set(Math.round(100f * logQueue.size() / DEFAULT_QUEUE_SIZE));\n         }\n       } catch (Exception e) {\n-        System.err.println(\"[StreamAppender] Error sending log message:\");\n+        System.err.println(String.format(\"[%s] Error sending log message:\", appenderName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjY0Mg=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzNjAyMw==", "bodyText": "Seems appenderName is better to be used here because theoretically it is possible that multiple instances of StreamAppender (or its child appenders) are used at the same time. But appenderName is really a unique name for different appender instances (it does not need to be the same as \"StreamAppender\"; it can be any name if users want) which is set in log4j2.xml", "url": "https://github.com/apache/samza/pull/1403#discussion_r461936023", "createdAt": "2020-07-28T22:46:25Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -214,7 +220,7 @@ public void append(LogEvent event) {\n           metrics.bufferFillPct.set(Math.round(100f * logQueue.size() / DEFAULT_QUEUE_SIZE));\n         }\n       } catch (Exception e) {\n-        System.err.println(\"[StreamAppender] Error sending log message:\");\n+        System.err.println(String.format(\"[%s] Error sending log message:\", appenderName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyMjY0Mg=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODA5MzA4OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/test/java/org/apache/samza/logging/log4j2/TestStreamAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowMToyOVrOG3raAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDowNDoxNVrOG33zbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjAzMw==", "bodyText": "just curious why this is being hardcoded..", "url": "https://github.com/apache/samza/pull/1403#discussion_r461036033", "createdAt": "2020-07-27T17:01:29Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/test/java/org/apache/samza/logging/log4j2/TestStreamAppender.java", "diffHunk": "@@ -68,13 +68,12 @@ public void testDefaultSerde() {\n   @Test\n   public void testNonDefaultSerde() {\n     System.setProperty(\"samza.container.name\", \"samza-container-1\");\n-    String streamName = StreamAppender.getStreamName(\"log4jTest\", \"1\");\n     Map<String, String> map = new HashMap<String, String>();\n     map.put(\"job.name\", \"log4jTest\");\n     map.put(\"job.id\", \"1\");\n     map.put(\"serializers.registry.log4j-string.class\", LoggingEventStringSerdeFactory.class.getCanonicalName());\n     map.put(\"systems.mock.samza.factory\", MockSystemFactory.class.getCanonicalName());\n-    map.put(\"systems.mock.streams.\" + streamName + \".samza.msg.serde\", \"log4j-string\");\n+    map.put(\"systems.mock.streams.__samza_log4jTest_1_logs.samza.msg.serde\", \"log4j-string\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzOTE0OA==", "bodyText": "Because getStreamName function is changed from protected static  to protected as static method cannot be overridden.\nBTW, this static use case only exists here in samza's code. Seems good to remove static keyword.", "url": "https://github.com/apache/samza/pull/1403#discussion_r461239148", "createdAt": "2020-07-28T00:04:15Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/test/java/org/apache/samza/logging/log4j2/TestStreamAppender.java", "diffHunk": "@@ -68,13 +68,12 @@ public void testDefaultSerde() {\n   @Test\n   public void testNonDefaultSerde() {\n     System.setProperty(\"samza.container.name\", \"samza-container-1\");\n-    String streamName = StreamAppender.getStreamName(\"log4jTest\", \"1\");\n     Map<String, String> map = new HashMap<String, String>();\n     map.put(\"job.name\", \"log4jTest\");\n     map.put(\"job.id\", \"1\");\n     map.put(\"serializers.registry.log4j-string.class\", LoggingEventStringSerdeFactory.class.getCanonicalName());\n     map.put(\"systems.mock.samza.factory\", MockSystemFactory.class.getCanonicalName());\n-    map.put(\"systems.mock.streams.\" + streamName + \".samza.msg.serde\", \"log4j-string\");\n+    map.put(\"systems.mock.streams.__samza_log4jTest_1_logs.samza.msg.serde\", \"log4j-string\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjAzMw=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODA5NzI0OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowMjoyNlrOG3rcbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozMjoxOVrOG5FBLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjY1NQ==", "bodyText": "should we add a metric to count the number of logging errors?", "url": "https://github.com/apache/samza/pull/1403#discussion_r461036655", "createdAt": "2020-07-27T17:02:26Z", "author": {"login": "lakshmi-manasa-g"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -368,24 +389,24 @@ private void startTransferThread() {\n             // Preserve the interrupted status for the loop condition.\n             Thread.currentThread().interrupt();\n           } catch (Throwable t) {\n-            log.error(\"Error sending StreamAppender event to SystemProducer\", t);\n+            log.error(\"Error sending \" + appenderName +\" event to SystemProducer\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNDIzNw==", "bodyText": "make sense to me. Added now.", "url": "https://github.com/apache/samza/pull/1403#discussion_r462504237", "createdAt": "2020-07-29T18:32:19Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -368,24 +389,24 @@ private void startTransferThread() {\n             // Preserve the interrupted status for the loop condition.\n             Thread.currentThread().interrupt();\n           } catch (Throwable t) {\n-            log.error(\"Error sending StreamAppender event to SystemProducer\", t);\n+            log.error(\"Error sending \" + appenderName +\" event to SystemProducer\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNjY1NQ=="}, "originalCommit": {"oid": "0a1392cf23469d6ca634d290c40cdb10f25ecda6"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzIzNjY2OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMzo1MjozOFrOG57LDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzowNToxN1rOG6PqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5MTUwMg==", "bodyText": "can we organize by modifier for readability? to see everything in one place that might be modified by a subclass", "url": "https://github.com/apache/samza/pull/1403#discussion_r463391502", "createdAt": "2020-07-31T03:52:38Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);\n   protected StreamAppenderMetrics metrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNzEyOQ==", "bodyText": "Sure.", "url": "https://github.com/apache/samza/pull/1403#discussion_r463727129", "createdAt": "2020-07-31T17:05:17Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);\n   protected StreamAppenderMetrics metrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5MTUwMg=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzMyMTcyOnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNDo1MzozM1rOG578Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1Njo1M1rOG7PRIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDAzOQ==", "bodyText": "We're using the same registry; does the comment from before still apply?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463404039", "createdAt": "2020-07-31T04:53:33Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxMzk5OQ==", "bodyText": "No. because MetricsReporter.register(String source, ReadableMetricsRegistry registry); requires ReadableMetricsRegistry which is a child class of MetricsRegistry.\nFYI: child to parent: MetricsRegistryMap -> ReadableMetricsRegistry -> MetricsRegistry", "url": "https://github.com/apache/samza/pull/1403#discussion_r463713999", "createdAt": "2020-07-31T16:37:20Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDAzOQ=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMzU5OQ==", "bodyText": "So the comment was already out of date then? I don't see any difference in the register or metrics creation", "url": "https://github.com/apache/samza/pull/1403#discussion_r464703599", "createdAt": "2020-08-03T22:54:57Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDAzOQ=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTMxNA==", "bodyText": "Sorry. Now you can see the new updates.", "url": "https://github.com/apache/samza/pull/1403#discussion_r464769314", "createdAt": "2020-08-04T02:56:53Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDAzOQ=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzMyMjI4OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNDo1Mzo1NFrOG578Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozNTowNlrOG6OyoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDExOA==", "bodyText": "let's keep mention of things like \"inGraphs\" out of OSS", "url": "https://github.com/apache/samza/pull/1403#discussion_r463404118", "createdAt": "2020-07-31T04:53:54Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+    // Take this.getClass().getName() as the name to make it extend-friendly\n+    metrics = getMetrics(metricsRegistry);\n+    // Register metrics into metrics reporters so that they are able to be reported to other systems: e.g. inGraphs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxMjkyOA==", "bodyText": "Sure.", "url": "https://github.com/apache/samza/pull/1403#discussion_r463712928", "createdAt": "2020-07-31T16:35:06Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -305,38 +318,58 @@ protected Config getConfig() {\n     return config;\n   }\n \n+  protected Log4jSystemConfig getLog4jSystemConfig(Config config) {\n+    return new Log4jSystemConfig(config);\n+  }\n+\n+  protected StreamAppenderMetrics getMetrics(MetricsRegistryMap metricsRegistry) {\n+    return new StreamAppenderMetrics(appenderName, metricsRegistry);\n+  }\n+\n+  protected void setupStream(SystemFactory systemFactory, String systemName) {\n+    if (config.getBoolean(CREATE_STREAM_ENABLED, false)) {\n+      // Explicitly create stream appender stream with the partition count the same as the number of containers.\n+      System.out.println(String.format(\"[%s] creating stream \", appenderName) + streamName + \" with partition count \" + getPartitionCount());\n+      StreamSpec streamSpec =\n+          StreamSpec.createStreamAppenderStreamSpec(streamName, systemName, getPartitionCount());\n+\n+      // SystemAdmin only needed for stream creation here.\n+      SystemAdmin systemAdmin = systemFactory.getAdmin(systemName, config);\n+      systemAdmin.start();\n+      systemAdmin.createStream(streamSpec);\n+      systemAdmin.stop();\n+    }\n+  }\n+\n   protected void setupSystem() {\n     config = getConfig();\n-    Log4jSystemConfig log4jSystemConfig = new Log4jSystemConfig(config);\n+    Log4jSystemConfig log4jSystemConfig = getLog4jSystemConfig(config);\n \n     if (streamName == null) {\n       streamName = getStreamName(log4jSystemConfig.getJobName(), log4jSystemConfig.getJobId());\n     }\n \n-    // TODO we need the ACTUAL metrics registry, or the metrics won't get reported by the metric reporters!\n-    MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n-    metrics = new StreamAppenderMetrics(\"stream-appender\", metricsRegistry);\n+    // Instantiate metrics\n+    MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+    // Take this.getClass().getName() as the name to make it extend-friendly\n+    metrics = getMetrics(metricsRegistry);\n+    // Register metrics into metrics reporters so that they are able to be reported to other systems: e.g. inGraphs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNDExOA=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzMzMDQ2OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNDo1ODo0OVrOG58A0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozODo1OFrOG6O5og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTI2NA==", "bodyText": "log-messages-bytes-sent?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463405264", "createdAt": "2020-07-31T04:58:49Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "diffHunk": "@@ -34,10 +34,22 @@\n   /** The number of log messages dropped e.g. because of buffer overflow. Does not include recursive calls. */\n   public final Counter logMessagesDropped;\n \n+  /** The size of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesBytes;\n+\n+  /** The number of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesCount;\n+\n+  /** The number of log messages cannot be sent out due to errors e.g. serialization errors, system producer send errors. */\n+  public final Counter logMessagesErrors;\n+\n   public StreamAppenderMetrics(String prefix, MetricsRegistry registry) {\n-    super(prefix, registry);\n+    super(prefix + \"-\", registry);\n     bufferFillPct = newGauge(\"buffer-fill-percent\", 0);\n     recursiveCalls = newCounter(\"recursive-calls\");\n     logMessagesDropped = newCounter(\"log-messages-dropped\");\n+    logMessagesBytes = newCounter(\"log-messages-bytes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNDcyMg==", "bodyText": "Sure.", "url": "https://github.com/apache/samza/pull/1403#discussion_r463714722", "createdAt": "2020-07-31T16:38:58Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "diffHunk": "@@ -34,10 +34,22 @@\n   /** The number of log messages dropped e.g. because of buffer overflow. Does not include recursive calls. */\n   public final Counter logMessagesDropped;\n \n+  /** The size of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesBytes;\n+\n+  /** The number of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesCount;\n+\n+  /** The number of log messages cannot be sent out due to errors e.g. serialization errors, system producer send errors. */\n+  public final Counter logMessagesErrors;\n+\n   public StreamAppenderMetrics(String prefix, MetricsRegistry registry) {\n-    super(prefix, registry);\n+    super(prefix + \"-\", registry);\n     bufferFillPct = newGauge(\"buffer-fill-percent\", 0);\n     recursiveCalls = newCounter(\"recursive-calls\");\n     logMessagesDropped = newCounter(\"log-messages-dropped\");\n+    logMessagesBytes = newCounter(\"log-messages-bytes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTI2NA=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzMzMDcyOnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNDo1OTowMVrOG58A8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozOTowMFrOG6O5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTI5Nw==", "bodyText": "log-messages-sent?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463405297", "createdAt": "2020-07-31T04:59:01Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "diffHunk": "@@ -34,10 +34,22 @@\n   /** The number of log messages dropped e.g. because of buffer overflow. Does not include recursive calls. */\n   public final Counter logMessagesDropped;\n \n+  /** The size of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesBytes;\n+\n+  /** The number of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesCount;\n+\n+  /** The number of log messages cannot be sent out due to errors e.g. serialization errors, system producer send errors. */\n+  public final Counter logMessagesErrors;\n+\n   public StreamAppenderMetrics(String prefix, MetricsRegistry registry) {\n-    super(prefix, registry);\n+    super(prefix + \"-\", registry);\n     bufferFillPct = newGauge(\"buffer-fill-percent\", 0);\n     recursiveCalls = newCounter(\"recursive-calls\");\n     logMessagesDropped = newCounter(\"log-messages-dropped\");\n+    logMessagesBytes = newCounter(\"log-messages-bytes\");\n+    logMessagesCount = newCounter(\"log-messages-count\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNDczOQ==", "bodyText": "Sure.", "url": "https://github.com/apache/samza/pull/1403#discussion_r463714739", "createdAt": "2020-07-31T16:39:00Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppenderMetrics.java", "diffHunk": "@@ -34,10 +34,22 @@\n   /** The number of log messages dropped e.g. because of buffer overflow. Does not include recursive calls. */\n   public final Counter logMessagesDropped;\n \n+  /** The size of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesBytes;\n+\n+  /** The number of log messages sent out to SystemProducer. */\n+  public final Counter logMessagesCount;\n+\n+  /** The number of log messages cannot be sent out due to errors e.g. serialization errors, system producer send errors. */\n+  public final Counter logMessagesErrors;\n+\n   public StreamAppenderMetrics(String prefix, MetricsRegistry registry) {\n-    super(prefix, registry);\n+    super(prefix + \"-\", registry);\n     bufferFillPct = newGauge(\"buffer-fill-percent\", 0);\n     recursiveCalls = newCounter(\"recursive-calls\");\n     logMessagesDropped = newCounter(\"log-messages-dropped\");\n+    logMessagesBytes = newCounter(\"log-messages-bytes\");\n+    logMessagesCount = newCounter(\"log-messages-count\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTI5Nw=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzMzMzU1OnYy", "diffSide": "RIGHT", "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTowMDoyNlrOG58CdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1ODoxN1rOG7PSig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTY4NQ==", "bodyText": "why does this need to be protected? can't subclasses have their own logger?", "url": "https://github.com/apache/samza/pull/1403#discussion_r463405685", "createdAt": "2020-07-31T05:00:26Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1ODY1Ng==", "bodyText": "See the comments thread in another rb.", "url": "https://github.com/apache/samza/pull/1403#discussion_r463758656", "createdAt": "2020-07-31T18:12:46Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTY4NQ=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwMDkwOA==", "bodyText": "Sure we can keep the discussion there then circle back", "url": "https://github.com/apache/samza/pull/1403#discussion_r464700908", "createdAt": "2020-08-03T22:46:24Z", "author": {"login": "bkonold"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTY4NQ=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTY3NA==", "bodyText": "Get back from discussion in another rb: will change to each subclass has its own logger.", "url": "https://github.com/apache/samza/pull/1403#discussion_r464769674", "createdAt": "2020-08-04T02:58:17Z", "author": {"login": "byjiang1996"}, "path": "samza-log4j2/src/main/java/org/apache/samza/logging/log4j2/StreamAppender.java", "diffHunk": "@@ -84,15 +87,17 @@\n \n   protected static volatile boolean systemInitialized = false;\n \n-  private Config config = null;\n+  protected Config config = null;\n   private SystemStream systemStream = null;\n   private SystemProducer systemProducer = null;\n   private String key = null;\n-  private String streamName = null;\n+  protected String streamName = null;\n+  protected String appenderName = null;\n+  private String containerName = null;\n   private int partitionCount = 0;\n   private boolean isApplicationMaster;\n   private Serde<LogEvent> serde = null;\n-  private Logger log = LogManager.getLogger(StreamAppender.class);\n+  protected Logger log = LogManager.getLogger(StreamAppender.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNTY4NQ=="}, "originalCommit": {"oid": "e2cbea566521206c9d8bd0c242a5f5fd4c7da2f6"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1474, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}