{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzUxMDQw", "number": 1355, "title": "SAMZA-2519: Support duplicate timer registration", "bodyText": "Issue: In EpochTimeScheduler, when the caller tries to register a duplicate timer with new callback, Samza throws an exception. This behavior prevents callers from updating the callbacks for a given timer key.\nChanges: Allow registration for duplicate timer key where the newer callback will overwrite the previous callback provided it can be canceled. Refer to API changes section for semantics change to the existing API.\nTests: Added unit tests to validate scenarios where duplicate registration succeeds vs no-ops.\nAPI Changes: setTimer API now allows duplicate timer registration. The semantics of the duplicate registration is as follows\n\nDuplicate registrations will attempt the cancel the previously registered callbacks. If its unsuccessful, the new request to register the timer will be ignored.\nIf the previously registered callback has been fired successfully at the time of the new request, the new request will be fulfilled. This is to ensure we remain consistent and stay inline with the current semantics.\n\nUpgrade Instructions: None\nUsage Instructions: None", "createdAt": "2020-05-05T21:01:24Z", "url": "https://github.com/apache/samza/pull/1355", "merged": true, "mergeCommit": {"oid": "a29f29a6d56a4dfb1c062a97728bcb11bd824275"}, "closed": true, "closedAt": "2020-05-08T17:20:35Z", "author": {"login": "mynameborat"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceaZpGgH2gAyNDEzNzUxMDQwOmJjYTNjOTA0M2ZkYThhOWJlNmQxYWZiNDdlM2JmMTAyODQxNDQwY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfKheegFqTQwNzk5NDM2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bca3c9043fda8a9be6d1afb47e3bf102841440cf", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/bca3c9043fda8a9be6d1afb47e3bf102841440cf", "committedDate": "2020-05-05T20:49:21Z", "message": "SAMZA-2519: Support duplicate timer registration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODQyMzM1", "url": "https://github.com/apache/samza/pull/1355#pullrequestreview-407842335", "createdAt": "2020-05-07T21:15:06Z", "commit": {"oid": "bca3c9043fda8a9be6d1afb47e3bf102841440cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxNTowNlrOGSQjDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxNTowNlrOGSQjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODY3MQ==", "bodyText": "Probably need this to be warn level logging here.", "url": "https://github.com/apache/samza/pull/1355#discussion_r421798671", "createdAt": "2020-05-07T21:15:06Z", "author": {"login": "xinyuiscool"}, "path": "samza-core/src/main/java/org/apache/samza/scheduler/EpochTimeScheduler.java", "diffHunk": "@@ -57,9 +58,33 @@ private EpochTimeScheduler(ScheduledExecutorService executor) {\n     this.executor = executor;\n   }\n \n+  @VisibleForTesting\n+  Map<Object, ScheduledFuture> getScheduledFutures() {\n+    return scheduledFutures;\n+  }\n+\n   public <K> void setTimer(K key, long timestamp, ScheduledCallback<K> callback) {\n-    checkState(!scheduledFutures.containsKey(key),\n-        String.format(\"Duplicate key %s registration for the same timer\", key));\n+    if (scheduledFutures.containsKey(key)) {\n+      LOG.warn(\"Registering duplicate callback for key: {}. Attempting to cancel the previous callback\", key);\n+      ScheduledFuture<?> scheduledFuture = scheduledFutures.get(key);\n+\n+      /*\n+       * We can have a race between the time we check for the presence of the key and the time we attempt to cancel;\n+       * Hence we check for non-null criteria to ensure the executor hasn't kicked off the callback for the key which\n+       * removes the future from the map before invoking onTimer.\n+       *  1. In the event that callback is running then we will not attempt to interrupt the action and\n+       *     cancel will return as unsuccessful.\n+       *  2. In case of the callback successfully executed, we want to allow duplicate registration to keep the\n+       *     behavior consistent with the scenario where the callback is already executed or in progress even before\n+       *     we entered this condition.\n+       */\n+      if (scheduledFuture != null\n+          && !scheduledFuture.cancel(false)\n+          && !scheduledFuture.isDone()) {\n+        LOG.debug(\"Failed to cancel the previous callback successfully. Ignoring the current request to register new callback\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca3c9043fda8a9be6d1afb47e3bf102841440cf"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "057a159888c90ac003aa3277a2052ab8b8e0c425", "author": {"user": {"login": "mynameborat", "name": null}}, "url": "https://github.com/apache/samza/commit/057a159888c90ac003aa3277a2052ab8b8e0c425", "committedDate": "2020-05-08T04:42:48Z", "message": "Address Xinyu's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTk0MzYw", "url": "https://github.com/apache/samza/pull/1355#pullrequestreview-407994360", "createdAt": "2020-05-08T04:53:21Z", "commit": {"oid": "057a159888c90ac003aa3277a2052ab8b8e0c425"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4588, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}