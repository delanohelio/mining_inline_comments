{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjAxMjQ5", "number": 1256, "title": "SAMZA-2420: Update CommandLine to use config loader for local config file", "bodyText": "This is backward incompatible and is only supposed to be included in Samza 1.5\nDesign:\nhttps://cwiki.apache.org/confluence/display/SAMZA/SEP-23%3A+Simplify+Job+Runner\nChanges:\n\nUpdate CommandLine to use config loader instead of config factory\nRemoved common.properties and adds its values to each job config\nUpdate CheckpointTool to read new offsets from local file only.\n\nAPI Changes:\n\nAdd config-loader-factory and config-loader-properties in CommandLine to support specifying ConfigLoaderFactory and its properties needed to load config.\nRemove config-factory and config-path in CommandLine to discountinue the usage of ConfigFactory\nUpdate CheckpointTool to read new offsets from local file only, i.e. --new-offsets only supports local file URI now.\n\nUpgrade Instructions:\nAll usages in CommandLine and its subclasses will switch from --config-factory & --config-path to --config-loader-factory & --config-loader-properties, including job launch.\nUsage Instructions\nFor example,\n--config-factory=org.apache.samza.config.factories.PropertiesConfigFactory --config-path=file:///location/file.txt\nwill be changed to\n--config-loader-factory=org.apache.samza.config.loaders.PropertiesConfigLoaderFactory --config-loader-properties path=file:///location/file.txt\nTests\n\nUnit tests\nTest against Hello Samza example with\n\ndeploy/samza/bin/run-app.sh --config-loader-factory=org.apache.samza.config.loaders.PropertiesConfigLoaderFactory --config-loader-properties path=$PWD/deploy/samza/config/wikipedia-feed.properties", "createdAt": "2020-01-22T00:21:30Z", "url": "https://github.com/apache/samza/pull/1256", "merged": true, "mergeCommit": {"oid": "1a03a6a9b8ed19129305842744d6619277bb72f6"}, "closed": true, "closedAt": "2020-01-30T22:43:21Z", "author": {"login": "kw2542"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8qUhmgH2gAyMzY1NjAxMjQ5OjIxZjY1ZDlkYzZiNGNkMzFmOTJhNDI0MGQyZjFmMjk4NmRlMTZjZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-6v05AFqTM0OTc5NjAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "21f65d9dc6b4cd31f92a4240d2f1f2986de16ce3", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/21f65d9dc6b4cd31f92a4240d2f1f2986de16ce3", "committedDate": "2020-01-22T00:08:49Z", "message": "SAMZA-2420: Update CommandLine to use config loader for local config file\n\nDesign:\nhttps://cwiki.apache.org/confluence/display/SAMZA/SEP-23%3A+Simplify+Job+Runner\n\nChanges:\n1. Update CommandLine to use config loader instead of config factory\n2. Removed common.properties and adds its values to each job config\n3. Update CheckpointTool to read new offsets from local file only.\n\nAPI Changes:\n1. Add config-loader-factory and config-loader-properties in CommandLine to support specifying ConfigLoaderFactory and its properties needed to load config.\n2. Remove config-factory and config-path in CommandLine to discountinue the usage of ConfigFactory\n3. Update CheckpointTool to read new offsets from local file only.\n\nUpgrade Instructions:\n\nAll usages in CommandLine and its subclasses will switch from --config-factory & --config-path to --config-loader-factory & --config-loader-properties, including job launch.\n\nUsage Instructions\n\nFor example,\n\n--config-factory=org.apache.samza.config.factories.PropertiesConfigFactory --config-path=file:///location/file.txt\n\nwill be changed to\n\n--config-loader-factory=org.apache.samza.config.loaders.PropertiesConfigLoaderFactory --config-loader-properties path=file:///location/file.txt\n\nTests\n\n1. Unit tests\n2. Test against Hello Samza example with\n\n  deploy/samza/bin/run-app.sh --config-loader-factory=org.apache.samza.config.loaders.PropertiesConfigLoaderFactory --config-loader-properties path=$PWD/deploy/samza/config/wikipedia-feed.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01aee7ccb791dd43f036fbb5aec1e583f78d51d0", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/01aee7ccb791dd43f036fbb5aec1e583f78d51d0", "committedDate": "2020-01-22T00:30:35Z", "message": "Revert changes on ApplicationRunnerMain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a6261e81b8750b083b2840dac5edb915c39a70", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/72a6261e81b8750b083b2840dac5edb915c39a70", "committedDate": "2020-01-22T01:05:58Z", "message": "Fix TestCheckpointTool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/2e2ed66eee09f607708687b3730d3e58a05c6cd5", "committedDate": "2020-01-22T18:24:21Z", "message": "Switch unit tests to config loader."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTg5MDg4", "url": "https://github.com/apache/samza/pull/1256#pullrequestreview-346989088", "createdAt": "2020-01-23T00:07:21Z", "commit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDowNzoyMVrOFgvP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoxMjozNFrOFgvVDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3Mjg1OA==", "bodyText": "nit: might as well fix the entire doc. \"Recovers the state store from the changelog stream and stores in the directory provided....\"", "url": "https://github.com/apache/samza/pull/1256#discussion_r369872858", "createdAt": "2020-01-23T00:07:21Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -63,11 +62,11 @@\n \n \n /**\n- * Recovers the state storages from the changelog streams and store the storages\n+ * Recovers the state storage from the changelog streams and store the storages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzE0OA==", "bodyText": "nit: rename in to something meaningful?", "url": "https://github.com/apache/samza/pull/1256#discussion_r369873148", "createdAt": "2020-01-23T00:08:28Z", "author": {"login": "mynameborat"}, "path": "samza-core/src/main/scala/org/apache/samza/checkpoint/CheckpointTool.scala", "diffHunk": "@@ -117,10 +118,15 @@ object CheckpointTool {\n         .mapValues(m => m.reduce( _ ++ _))  // Merge all the maps of SSPs->Offset into one for the whole taskname\n     }\n \n-    override def loadConfig(options: OptionSet): MapConfig = {\n+    override def loadConfig(options: OptionSet): Config = {\n       val config = super.loadConfig(options)\n       if (options.has(newOffsetsOpt)) {\n-        val properties = configFactory.getConfig(options.valueOf(newOffsetsOpt))\n+        val in = new FileInputStream(options.valueOf(newOffsetsOpt).getPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NDE5MQ==", "bodyText": "Can you add more details here? Not sure what update this refers to?", "url": "https://github.com/apache/samza/pull/1256#discussion_r369874191", "createdAt": "2020-01-23T00:12:34Z", "author": {"login": "mynameborat"}, "path": "samza-test/src/main/config/join/joiner.samza", "diffHunk": "@@ -16,6 +16,33 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+####################\n+### UPDATE THIS! ###", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2ed66eee09f607708687b3730d3e58a05c6cd5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/160f59c666488c3c31c0f5b32cf8bfb5f7696115", "committedDate": "2020-01-23T00:24:10Z", "message": "Address Prateek's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDc2MjQ1", "url": "https://github.com/apache/samza/pull/1256#pullrequestreview-349076245", "createdAt": "2020-01-28T00:58:11Z", "commit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDo1ODoxMVrOFiWfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMToyODo1OFrOFiW7yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NDQxMQ==", "bodyText": "The \"help\" string seems out-of-date now.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371564411", "createdAt": "2020-01-28T00:58:11Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NTM1OQ==", "bodyText": "Can you please clarify this documentation change? The usage of the term \"both\" is unclear to me.\nIs it supposed to be \"Recovers the state storage from the changelog streams and stores the state in the directory provided by the users.\"?", "url": "https://github.com/apache/samza/pull/1256#discussion_r371565359", "createdAt": "2020-01-28T01:02:09Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -63,11 +62,11 @@\n \n \n /**\n- * Recovers the state storages from the changelog streams and store the storages\n+ * Recovers the state storage from both the changelog streams and stores", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NTkzMw==", "bodyText": "Instead of doing a blanket suppress for the whole method, could you please consider doing a suppression for the single line that needs to be suppressed? Then, if someone accidentally makes a change which should not be suppressed, then there will still be a warning for it.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371565933", "createdAt": "2020-01-28T01:04:36Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -158,6 +155,7 @@ private void getContainerModels() {\n    * Get the changelog streams and the storage factories from the config file\n    * and put them into the maps\n    */\n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NjA3MQ==", "bodyText": "Same as above about suppression", "url": "https://github.com/apache/samza/pull/1256#discussion_r371566071", "createdAt": "2020-01-28T01:05:08Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/java/org/apache/samza/storage/StorageRecovery.java", "diffHunk": "@@ -195,6 +191,7 @@ private void getChangeLogMaxPartitionNumber() {\n     maxPartitionNumber = maxPartitionId + 1;\n   }\n \n+  @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2NzcwNw==", "bodyText": "The \"help\" string seems out-of-date now.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371567707", "createdAt": "2020-01-28T01:11:55Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2ODY4OQ==", "bodyText": "This seems out-of-date.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371568689", "createdAt": "2020-01-28T01:16:03Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2OTA0Ng==", "bodyText": "Should this check for configLoaderFactoryOpt instead? Theoretically, the config loader factory won't need additional properties. You might also need to somehow validate or catch that not all config loader properties were specified for the config loader.", "url": "https://github.com/apache/samza/pull/1256#discussion_r371569046", "createdAt": "2020-01-28T01:17:42Z", "author": {"login": "cameronlee314"}, "path": "samza-core/src/main/scala/org/apache/samza/util/CommandLine.scala", "diffHunk": "@@ -19,55 +19,60 @@\n \n package org.apache.samza.util\n \n-import java.net.URI\n-import joptsimple.{OptionParser, OptionSet}\n+import joptsimple.{ArgumentAcceptingOptionSpec, OptionParser, OptionSet}\n import joptsimple.util.KeyValuePair\n-import org.apache.samza.config.{ConfigFactory, MapConfig}\n-import org.apache.samza.config.factories.PropertiesConfigFactory\n-import scala.collection.mutable.Buffer\n+import org.apache.samza.config.{Config, ConfigLoaderFactory, JobConfig, MapConfig}\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory\n+\n import scala.collection.JavaConverters._\n+import scala.collection.mutable\n \n /**\n  * Defines a basic set of command-line options for Samza tasks. Tools can use this\n  * class directly, or subclass it to add their own options.\n  */\n class CommandLine {\n   val parser = new OptionParser()\n-  val configFactoryOpt =\n-    parser.accepts(\"config-factory\", \"The config factory to use to read your config file.\")\n+  val configLoaderFactoryOpt: ArgumentAcceptingOptionSpec[String] =\n+    parser.accepts(\"config-loader-factory\", \"The config factory to use to read your config file.\")\n           .withRequiredArg\n           .ofType(classOf[java.lang.String])\n           .describedAs(\"com.foo.bar.ClassName\")\n-          .defaultsTo(classOf[PropertiesConfigFactory].getName)\n-  val configPathOpt =\n-    parser.accepts(\"config-path\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n+          .defaultsTo(classOf[PropertiesConfigLoaderFactory].getName)\n+  val configLoaderPropertiesOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n+    parser.accepts(\"config-loader-properties\", \"URI location to a config file (e.g. file:///some/local/path.properties). \" +\n                                   \"If multiple files are given they are all used with later files overriding any values that appear in earlier files.\")\n           .withRequiredArg\n-          .ofType(classOf[URI])\n+          .ofType(classOf[KeyValuePair])\n           .describedAs(\"path\")\n-  val configOverrideOpt =\n+  val configOverrideOpt: ArgumentAcceptingOptionSpec[KeyValuePair] =\n     parser.accepts(\"config\", \"A configuration value in the form key=value. Command line properties override any configuration values given.\")\n           .withRequiredArg\n           .ofType(classOf[KeyValuePair])\n           .describedAs(\"key=value\")\n \n-  var configFactory: ConfigFactory = null\n+  var configLoaderFactory: ConfigLoaderFactory = _\n \n-  def loadConfig(options: OptionSet) = {\n+  def loadConfig(options: OptionSet): Config = {\n     // Verify legitimate parameters.\n-    if (!options.has(configPathOpt)) {\n+    if (!options.has(configLoaderPropertiesOpt)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MTY1Ng==", "bodyText": "The intention to have the \"unused\" config was so that a custom fork could use the config if necessary (see comment inside buildExternalContext. Could we please keep the config?", "url": "https://github.com/apache/samza/pull/1256#discussion_r371571656", "createdAt": "2020-01-28T01:28:58Z", "author": {"login": "cameronlee314"}, "path": "samza-test/src/main/java/org/apache/samza/test/integration/LocalApplicationRunnerMain.java", "diffHunk": "@@ -53,14 +53,14 @@ public static void main(String[] args) throws Exception {\n \n     try {\n       LOGGER.info(\"Launching stream application: {} to run.\", app);\n-      runner.run(buildExternalContext(config).orElse(null));\n+      runner.run(buildExternalContext().orElse(null));\n       runner.waitForFinish();\n     } catch (Exception e) {\n       LOGGER.error(\"Exception occurred when running application: {}.\", app, e);\n     }\n   }\n \n-  private static Optional<ExternalContext> buildExternalContext(Config config) {\n+  private static Optional<ExternalContext> buildExternalContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160f59c666488c3c31c0f5b32cf8bfb5f7696115"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aff69fed15b9962b25f8b69325ec4947b95a44a", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/2aff69fed15b9962b25f8b69325ec4947b95a44a", "committedDate": "2020-01-28T23:28:41Z", "message": "Update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2f273f8f3d1e64903240c38e7c40fb90dae071", "author": {"user": null}, "url": "https://github.com/apache/samza/commit/5b2f273f8f3d1e64903240c38e7c40fb90dae071", "committedDate": "2020-01-29T00:03:15Z", "message": "Remove the config loader properties check as it can be empty"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Nzk2MDAx", "url": "https://github.com/apache/samza/pull/1256#pullrequestreview-349796001", "createdAt": "2020-01-29T00:24:58Z", "commit": {"oid": "5b2f273f8f3d1e64903240c38e7c40fb90dae071"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}