{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzc3MzA5", "number": 4641, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjoyMzowOFrODy9v2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjoyMzowOFrODy9v2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzY3MDY1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjoyMzowOFrOGHUp7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjoyMzowOFrOGHUp7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzMTYzMA==", "bodyText": "I think we need to use InstanceTraffic#INDEX_NAME and EndpointTraffic#INDEX_NAME in there.", "url": "https://github.com/apache/skywalking/pull/4641#discussion_r410331630", "createdAt": "2020-04-17T16:23:08Z", "author": {"login": "mrproliu"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "diffHunk": "@@ -18,18 +18,80 @@\n \n package org.apache.skywalking.oap.server.storage.plugin.influxdb;\n \n+import com.google.common.collect.Maps;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Getter;\n+import org.apache.skywalking.oap.server.core.analysis.manual.endpoint.EndpointTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.manual.instance.InstanceTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.manual.segment.SegmentRecord;\n+import org.apache.skywalking.oap.server.core.analysis.manual.service.ServiceTraffic;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.analysis.record.Record;\n+import org.apache.skywalking.oap.server.core.storage.model.ColumnName;\n import org.apache.skywalking.oap.server.core.storage.model.Model;\n+import org.apache.skywalking.oap.server.core.storage.model.ModelColumn;\n \n+@Getter\n+@Builder\n+@AllArgsConstructor\n public class TableMetaInfo {\n-    private static Map<String, Model> TABLES = new HashMap<>();\n+    private static final Map<String, TableMetaInfo> TABLES = new HashMap<>();\n+\n+    private Map<String, String> storageAndColumnMap;\n+    private Map<String, String> storageAndTagMap;\n+    private Model model;\n \n     public static void addModel(Model model) {\n-        TABLES.put(model.getName(), model);\n+        final List<ModelColumn> columns = model.getColumns();\n+        final Map<String, String> storageAndTagMap = Maps.newHashMap();\n+        final Map<String, String> storageAndColumnMap = Maps.newHashMap();\n+        columns.forEach(column -> {\n+            ColumnName columnName = column.getColumnName();\n+            storageAndColumnMap.put(columnName.getStorageName(), columnName.getName());\n+        });\n+\n+        if (model.getName().endsWith(\"_traffic\")) {\n+            // instance_traffic name, service_id\n+            // endpoint_traffic name, service_id\n+            storageAndTagMap.put(InstanceTraffic.NAME, InfluxConstants.TagName.NAME);\n+            if (\"instance_traffic\".equals(model.getName())\n+                || \"endpoint_traffic\".equals(model.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3f50b1699c86698343520262747011a754d4be4"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 234, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}