{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzYwNjI3", "number": 5760, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzowNToxNlrOE0AaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMjozMTo1M1rOE2WaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTY4MDc0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMzowNToxNlrOHrkcUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoxNToxMVrOHr-FmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ==", "bodyText": "When and why this exception happens?", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515447889", "createdAt": "2020-10-31T03:05:16Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTAzMg==", "bodyText": "aha ,the log is lost. In my situation , ServiceManagementHandler.java  L65 throw a NPE.\n    @Override\n    public void handle(final ConsumerRecord<String, Bytes> record) {\n        try {\n            if (record.key().startsWith(\"register-\")) {\n                serviceReportProperties(InstanceProperties.parseFrom(record.value().get()));\n            } else {\n                keepAlive(InstancePingPkg.parseFrom(record.value().get()));\n            }\n        } catch (InvalidProtocolBufferException e) {\n            log.error(\"\", e);\n        }\n    }\n\nMaybe a record without a key?", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515451032", "createdAt": "2020-10-31T03:45:43Z", "author": {"login": "nileblack"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ=="}, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1MTQxMg==", "bodyText": "I am fine if you just want to make sure the illegal data would not break all things.\nAt the same time, fix doc and ci.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515451412", "createdAt": "2020-10-31T03:51:08Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ=="}, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcyMzYxMg==", "bodyText": "As you show the code, I suggest changing the InvalidProtocolBufferException to Throwable or Exception. And then don't need to add try-catch statement again.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515723612", "createdAt": "2020-11-02T03:27:25Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ=="}, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTE0OQ==", "bodyText": "There mayby Another Handler  throws a uncaputure exception.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515745149", "createdAt": "2020-11-02T05:21:30Z", "author": {"login": "nileblack"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ=="}, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NzA0NQ==", "bodyText": "Yeap, I mean all handlers should be modified. :)", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515747045", "createdAt": "2020-11-02T05:30:02Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ=="}, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2ODA1Nw==", "bodyText": "i think every hander should catch Exception not InvalidProtocolBufferException.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515868057", "createdAt": "2020-11-02T10:15:11Z", "author": {"login": "zifeihan"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -137,7 +137,11 @@ public void run() {\n                 Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n                 while (iterator.hasNext()) {\n                     ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+                    try {\n+                        handlerMap.get(record.topic()).handle(record);\n+                    } catch(Throwable t) {\n+                        log.error(\"consume record error\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0Nzg4OQ=="}, "originalCommit": {"oid": "64a55c83611588d9ae658c2ca7d4ceffa6a77fe8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTkzNTE4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwOToyNjo0NlrOHrmPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODowODowNVrOHuj0TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NzI2OA==", "bodyText": "Why need two error lines?", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r515477268", "createdAt": "2020-10-31T09:26:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,14 +132,23 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {\n+                ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n+                if (!consumerRecords.isEmpty()) {\n+                    Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n+                    while (iterator.hasNext()) {\n+                        ConsumerRecord<String, Bytes> record = iterator.next();\n+                        try {\n+                            handlerMap.get(record.topic()).handle(record);\n+                        } catch (Throwable e) {\n+                            log.error(\"process record error, topic:{}, key:{}, value:{}\", record.topic(), record.key(), record.value());\n+                            log.error(\"process record error\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9724fffcacbfc266644357d1639f0ea1cd9127"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNjQ2OA==", "bodyText": "Just want record detail data? what's best practice to do that?", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r518506468", "createdAt": "2020-11-06T03:43:39Z", "author": {"login": "nileblack"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,14 +132,23 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {\n+                ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n+                if (!consumerRecords.isEmpty()) {\n+                    Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n+                    while (iterator.hasNext()) {\n+                        ConsumerRecord<String, Bytes> record = iterator.next();\n+                        try {\n+                            handlerMap.get(record.topic()).handle(record);\n+                        } catch (Throwable e) {\n+                            log.error(\"process record error, topic:{}, key:{}, value:{}\", record.topic(), record.key(), record.value());\n+                            log.error(\"process record error\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NzI2OA=="}, "originalCommit": {"oid": "0a9724fffcacbfc266644357d1639f0ea1cd9127"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4MzM3Mw==", "bodyText": "Logging data actually isn't useful.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r518583373", "createdAt": "2020-11-06T08:08:05Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,14 +132,23 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {\n+                ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n+                if (!consumerRecords.isEmpty()) {\n+                    Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n+                    while (iterator.hasNext()) {\n+                        ConsumerRecord<String, Bytes> record = iterator.next();\n+                        try {\n+                            handlerMap.get(record.topic()).handle(record);\n+                        } catch (Throwable e) {\n+                            log.error(\"process record error, topic:{}, key:{}, value:{}\", record.topic(), record.key(), record.value());\n+                            log.error(\"process record error\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3NzI2OA=="}, "originalCommit": {"oid": "0a9724fffcacbfc266644357d1639f0ea1cd9127"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDQxNDUzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/JVMMetricsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODowODoyNlrOHuj04Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODo1NToyOVrOHulRYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4MzUyMQ==", "bodyText": "Logging error should be enough.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r518583521", "createdAt": "2020-11-06T08:08:26Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/JVMMetricsHandler.java", "diffHunk": "@@ -67,8 +67,8 @@ public void handle(final ConsumerRecord<String, Bytes> record) {\n             builder.getMetricsList().forEach(jvmMetric -> {\n                 jvmSourceDispatcher.sendMetric(builder.getService(), builder.getServiceInstance(), jvmMetric);\n             });\n-        } catch (InvalidProtocolBufferException e) {\n-            log.error(\"\", e);\n+        } catch (Exception e) {\n+            log.error(\"handle record failed, record:{}\", record.toString(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwNzIwMA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r518607200", "createdAt": "2020-11-06T08:55:29Z", "author": {"login": "nileblack"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/JVMMetricsHandler.java", "diffHunk": "@@ -67,8 +67,8 @@ public void handle(final ConsumerRecord<String, Bytes> record) {\n             builder.getMetricsList().forEach(jvmMetric -> {\n                 jvmSourceDispatcher.sendMetric(builder.getService(), builder.getServiceInstance(), jvmMetric);\n             });\n-        } catch (InvalidProtocolBufferException e) {\n-            log.error(\"\", e);\n+        } catch (Exception e) {\n+            log.error(\"handle record failed, record:{}\", record.toString(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4MzUyMQ=="}, "originalCommit": null, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDI1NjY3OnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMjozMTo1M1rOHvHzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxMjozMTo1M1rOHvHzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3Mjk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Catch All Execption in `KafkaHandler`.\n          \n          \n            \n            * Fix the threads of the Kafka fetcher exit if some unexpected exceptions happen.", "url": "https://github.com/apache/skywalking/pull/5760#discussion_r519172958", "createdAt": "2020-11-07T12:31:53Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -26,6 +26,7 @@ Release Notes.\n * Improve Kubernetes service registry for ALS analysis.\n * Add health checker for cluster management\n * Improve the queryable tags generation. Remove the duplicated tags to reduce the storage payload.\n+* Catch All Execption in `KafkaHandler`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5645655a6eedb4593cc16c3bcc041e2986d5e8e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4740, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}