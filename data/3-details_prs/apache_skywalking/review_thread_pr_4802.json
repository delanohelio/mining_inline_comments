{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNTUxNTc1", "number": 4802, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0NTowMlrOD-LVKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1Njo0OVrOD-Qlqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTIzOTQ0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/config/group/EndpointNameGroupingRuleWatcherTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0NTowMlrOGYHpTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxODo1M1rOGYLM3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDI2OQ==", "bodyText": "Well, if it's inlined in the test codes, why not just simplify them, i.e. keep only uncommented content", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r427944269", "createdAt": "2020-05-20T11:45:02Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/config/group/EndpointNameGroupingRuleWatcherTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.config.group;\n+\n+import java.io.FileNotFoundException;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class EndpointNameGroupingRuleWatcherTest {\n+    @Test\n+    public void testWatcher() throws FileNotFoundException {\n+        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n+\n+        EndpointNameGroupingRuleWatcher watcher = new EndpointNameGroupingRuleWatcher(\n+            new ModuleProvider() {\n+                @Override\n+                public String name() {\n+                    return \"test\";\n+                }\n+\n+                @Override\n+                public Class<? extends ModuleDefine> module() {\n+                    return CoreModule.class;\n+                }\n+\n+                @Override\n+                public ModuleConfig createConfigBeanIfAbsent() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n+\n+                }\n+\n+                @Override\n+                public void start() throws ServiceNotProvidedException, ModuleStartException {\n+\n+                }\n+\n+                @Override\n+                public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\n+\n+                }\n+\n+                @Override\n+                public String[] requiredModules() {\n+                    return new String[0];\n+                }\n+            }, endpointNameGrouping);\n+        Assert.assertEquals(\"/prod/{id}\", endpointNameGrouping.format(\"serviceA\", \"/prod/123\"));\n+\n+        watcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(\n+            \"# Licensed to the Apache Software Foundation (ASF) under one or more\\n\" +\n+                \"# contributor license agreements.  See the NOTICE file distributed with\\n\" +\n+                \"# this work for additional information regarding copyright ownership.\\n\" +\n+                \"# The ASF licenses this file to You under the Apache License, Version 2.0\\n\" +\n+                \"# (the \\\"License\\\"); you may not use this file except in compliance with\\n\" +\n+                \"# the License.  You may obtain a copy of the License at\\n\" +\n+                \"#\\n\" +\n+                \"#     http://www.apache.org/licenses/LICENSE-2.0\\n\" +\n+                \"#\\n\" +\n+                \"# Unless required by applicable law or agreed to in writing, software\\n\" +\n+                \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\" +\n+                \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\" +\n+                \"# See the License for the specific language governing permissions and\\n\" +\n+                \"# limitations under the License.\\n\" +\n+                \"\\n\" +\n+                \"# Endpoint name grouping rules.\\n\" +\n+                \"# In most cased, endpoint name should be detected by agents or service mesh automatically, and aggregate the metrics based\\n\" +\n+                \"# on the name.\\n\" +\n+                \"# But, in some cases, application put the parameter in the endpoint name, such as putting order id in the URI, like\\n\" +\n+                \"# /prod/ORDER123, /prod/ORDER123.\\n\" +\n+                \"# This grouping file provides the regex based definition capability to merge those endpoints into a group by better and\\n\" +\n+                \"# more meaningful aggregation metrics.\\n\" +\n+                \"\\n\" +\n+                \"grouping:\\n\" +\n+                \"  # Endpoint of the service would follow the following rules\\n\" +\n+                \"  - service-name: serviceA\\n\" +\n+                \"    rules:\\n\" +\n+                \"      - endpoint-name: /prod/order-id\\n\" +\n+                \"        regex: \\\\/prod\\\\/.+\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwMjUyNw==", "bodyText": "I just want to make sure the comments don't hurt.", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428002527", "createdAt": "2020-05-20T13:18:53Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/config/group/EndpointNameGroupingRuleWatcherTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.config.group;\n+\n+import java.io.FileNotFoundException;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class EndpointNameGroupingRuleWatcherTest {\n+    @Test\n+    public void testWatcher() throws FileNotFoundException {\n+        EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\n+\n+        EndpointNameGroupingRuleWatcher watcher = new EndpointNameGroupingRuleWatcher(\n+            new ModuleProvider() {\n+                @Override\n+                public String name() {\n+                    return \"test\";\n+                }\n+\n+                @Override\n+                public Class<? extends ModuleDefine> module() {\n+                    return CoreModule.class;\n+                }\n+\n+                @Override\n+                public ModuleConfig createConfigBeanIfAbsent() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n+\n+                }\n+\n+                @Override\n+                public void start() throws ServiceNotProvidedException, ModuleStartException {\n+\n+                }\n+\n+                @Override\n+                public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\n+\n+                }\n+\n+                @Override\n+                public String[] requiredModules() {\n+                    return new String[0];\n+                }\n+            }, endpointNameGrouping);\n+        Assert.assertEquals(\"/prod/{id}\", endpointNameGrouping.format(\"serviceA\", \"/prod/123\"));\n+\n+        watcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(\n+            \"# Licensed to the Apache Software Foundation (ASF) under one or more\\n\" +\n+                \"# contributor license agreements.  See the NOTICE file distributed with\\n\" +\n+                \"# this work for additional information regarding copyright ownership.\\n\" +\n+                \"# The ASF licenses this file to You under the Apache License, Version 2.0\\n\" +\n+                \"# (the \\\"License\\\"); you may not use this file except in compliance with\\n\" +\n+                \"# the License.  You may obtain a copy of the License at\\n\" +\n+                \"#\\n\" +\n+                \"#     http://www.apache.org/licenses/LICENSE-2.0\\n\" +\n+                \"#\\n\" +\n+                \"# Unless required by applicable law or agreed to in writing, software\\n\" +\n+                \"# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n\" +\n+                \"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n\" +\n+                \"# See the License for the specific language governing permissions and\\n\" +\n+                \"# limitations under the License.\\n\" +\n+                \"\\n\" +\n+                \"# Endpoint name grouping rules.\\n\" +\n+                \"# In most cased, endpoint name should be detected by agents or service mesh automatically, and aggregate the metrics based\\n\" +\n+                \"# on the name.\\n\" +\n+                \"# But, in some cases, application put the parameter in the endpoint name, such as putting order id in the URI, like\\n\" +\n+                \"# /prod/ORDER123, /prod/ORDER123.\\n\" +\n+                \"# This grouping file provides the regex based definition capability to merge those endpoints into a group by better and\\n\" +\n+                \"# more meaningful aggregation metrics.\\n\" +\n+                \"\\n\" +\n+                \"grouping:\\n\" +\n+                \"  # Endpoint of the service would follow the following rules\\n\" +\n+                \"  - service-name: serviceA\\n\" +\n+                \"    rules:\\n\" +\n+                \"      - endpoint-name: /prod/order-id\\n\" +\n+                \"        regex: \\\\/prod\\\\/.+\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDI2OQ=="}, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTI0NjYwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/group/EndpointGroupingRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo0NzoyMVrOGYHtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozMToxMlrOGYLx1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTM4Nw==", "bodyText": "-> computeIfAbsent", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r427945387", "createdAt": "2020-05-20T11:47:21Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/group/EndpointGroupingRule.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.config.group;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.skywalking.apm.util.StringFormatGroup;\n+\n+/**\n+ * Endpoint group rule hosts all group rules of all services.\n+ */\n+public class EndpointGroupingRule {\n+    private Map<String, StringFormatGroup> rules = new HashMap<>();\n+\n+    /**\n+     * Add a new rule to the context.\n+     *\n+     * @param serviceName       of the new rule\n+     * @param endpointGroupName represents the logic endpoint name.\n+     * @param ruleRegex         match the endpoints which should be in the group name.\n+     */\n+    void addRule(String serviceName, String endpointGroupName, String ruleRegex) {\n+        if (rules.containsKey(serviceName)) {\n+            rules.get(serviceName).addRule(endpointGroupName, ruleRegex);\n+        } else {\n+            StringFormatGroup newGroup = new StringFormatGroup();\n+            newGroup.addRule(endpointGroupName, ruleRegex);\n+            rules.put(serviceName, newGroup);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTk4OA==", "bodyText": "Done.", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428011988", "createdAt": "2020-05-20T13:31:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/config/group/EndpointGroupingRule.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.config.group;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.skywalking.apm.util.StringFormatGroup;\n+\n+/**\n+ * Endpoint group rule hosts all group rules of all services.\n+ */\n+public class EndpointGroupingRule {\n+    private Map<String, StringFormatGroup> rules = new HashMap<>();\n+\n+    /**\n+     * Add a new rule to the context.\n+     *\n+     * @param serviceName       of the new rule\n+     * @param endpointGroupName represents the logic endpoint name.\n+     * @param ruleRegex         match the endpoints which should be in the group name.\n+     */\n+    void addRule(String serviceName, String endpointGroupName, String ruleRegex) {\n+        if (rules.containsKey(serviceName)) {\n+            rules.get(serviceName).addRule(endpointGroupName, ruleRegex);\n+        } else {\n+            StringFormatGroup newGroup = new StringFormatGroup();\n+            newGroup.addRule(endpointGroupName, ruleRegex);\n+            rules.put(serviceName, newGroup);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTM4Nw=="}, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTI2Mjk1OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMTo1MjozNVrOGYH4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1MjozNlrOGYPw-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODAzNA==", "bodyText": "I'm wondering whether it's possible not to configure service-name, we have cases where different services share the same endpoint name, rules without service name may be a great help to save time", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r427948034", "createdAt": "2020-05-20T11:52:35Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "diffHunk": "@@ -0,0 +1,23 @@\n+# Group Parameterized Endpoints\n+In most cases, the endpoint should be detected automatically through the language agents, service mesh observability solution, \n+or configuration of meter system.\n+\n+There are some special cases, especially when people use REST style URI, the application codes put the parameter in the endpoint name, \n+such as putting order id in the URI, like `/prod/ORDER123` and `/prod/ORDER123`. But logically, people expect they could\n+have an endpoint name like `prod/{order-id}`. This is the feature of parameterized endpoint grouping designed for.\n+\n+Current, user could set up grouping rules through the static YAML file, named `endpoint_name_grouping.yml`,\n+or use [Dynamic Configuration](dynamic-config.md) to initial and update the endpoint grouping rule.\n+\n+## Configuration Format\n+No matter in static local file or dynamic configuration value, they are sharing the same YAML format.\n+\n+```yaml\n+grouping:\n+  # Endpoint of the service would follow the following rules\n+  - service-name: serviceA", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwMzUyMA==", "bodyText": "Personally, I don't want to do that. The rules should be explicit, and for all services seems not responsible.", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428003520", "createdAt": "2020-05-20T13:20:09Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "diffHunk": "@@ -0,0 +1,23 @@\n+# Group Parameterized Endpoints\n+In most cases, the endpoint should be detected automatically through the language agents, service mesh observability solution, \n+or configuration of meter system.\n+\n+There are some special cases, especially when people use REST style URI, the application codes put the parameter in the endpoint name, \n+such as putting order id in the URI, like `/prod/ORDER123` and `/prod/ORDER123`. But logically, people expect they could\n+have an endpoint name like `prod/{order-id}`. This is the feature of parameterized endpoint grouping designed for.\n+\n+Current, user could set up grouping rules through the static YAML file, named `endpoint_name_grouping.yml`,\n+or use [Dynamic Configuration](dynamic-config.md) to initial and update the endpoint grouping rule.\n+\n+## Configuration Format\n+No matter in static local file or dynamic configuration value, they are sharing the same YAML format.\n+\n+```yaml\n+grouping:\n+  # Endpoint of the service would follow the following rules\n+  - service-name: serviceA", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODAzNA=="}, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3NzMwNQ==", "bodyText": "For HTML and static asserts, a global rule might be more helpful. BTW do we have rule to filter out static resources when users intend to get rid of them.", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428077305", "createdAt": "2020-05-20T14:52:36Z", "author": {"login": "hanahmily"}, "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "diffHunk": "@@ -0,0 +1,23 @@\n+# Group Parameterized Endpoints\n+In most cases, the endpoint should be detected automatically through the language agents, service mesh observability solution, \n+or configuration of meter system.\n+\n+There are some special cases, especially when people use REST style URI, the application codes put the parameter in the endpoint name, \n+such as putting order id in the URI, like `/prod/ORDER123` and `/prod/ORDER123`. But logically, people expect they could\n+have an endpoint name like `prod/{order-id}`. This is the feature of parameterized endpoint grouping designed for.\n+\n+Current, user could set up grouping rules through the static YAML file, named `endpoint_name_grouping.yml`,\n+or use [Dynamic Configuration](dynamic-config.md) to initial and update the endpoint grouping rule.\n+\n+## Configuration Format\n+No matter in static local file or dynamic configuration value, they are sharing the same YAML format.\n+\n+```yaml\n+grouping:\n+  # Endpoint of the service would follow the following rules\n+  - service-name: serviceA", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODAzNA=="}, "originalCommit": {"oid": "c5685539f65b0f6169377a91876645f543e932f8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjEwMDkxOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1Njo0OVrOGYP-jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozOTo0OVrOGYR-Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDc4MA==", "bodyText": "Do we require a more efficient algorithm than regex? for example, prefix/suffix matcher.", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428080780", "createdAt": "2020-05-20T14:56:49Z", "author": {"login": "hanahmily"}, "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "diffHunk": "@@ -0,0 +1,23 @@\n+# Group Parameterized Endpoints\n+In most cases, the endpoint should be detected automatically through the language agents, service mesh observability solution, \n+or configuration of meter system.\n+\n+There are some special cases, especially when people use REST style URI, the application codes put the parameter in the endpoint name, \n+such as putting order id in the URI, like `/prod/ORDER123` and `/prod/ORDER123`. But logically, people expect they could\n+have an endpoint name like `prod/{order-id}`. This is the feature of parameterized endpoint grouping designed for.\n+\n+Current, user could set up grouping rules through the static YAML file, named `endpoint_name_grouping.yml`,\n+or use [Dynamic Configuration](dynamic-config.md) to initial and update the endpoint grouping rule.\n+\n+## Configuration Format\n+No matter in static local file or dynamic configuration value, they are sharing the same YAML format.\n+\n+```yaml\n+grouping:\n+  # Endpoint of the service would follow the following rules\n+  - service-name: serviceA\n+    rules:\n+      # Logic name when the regex expression matched.\n+      - endpoint-name: /prod/{id}\n+        regex: \\/prod\\/.+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52b672cafe09baa43e9a7fe30f1bedf0ae4eb0a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MTc5Mg==", "bodyText": "Personally, I don't like that way to make the configuration complex.", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428081792", "createdAt": "2020-05-20T14:58:10Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "diffHunk": "@@ -0,0 +1,23 @@\n+# Group Parameterized Endpoints\n+In most cases, the endpoint should be detected automatically through the language agents, service mesh observability solution, \n+or configuration of meter system.\n+\n+There are some special cases, especially when people use REST style URI, the application codes put the parameter in the endpoint name, \n+such as putting order id in the URI, like `/prod/ORDER123` and `/prod/ORDER123`. But logically, people expect they could\n+have an endpoint name like `prod/{order-id}`. This is the feature of parameterized endpoint grouping designed for.\n+\n+Current, user could set up grouping rules through the static YAML file, named `endpoint_name_grouping.yml`,\n+or use [Dynamic Configuration](dynamic-config.md) to initial and update the endpoint grouping rule.\n+\n+## Configuration Format\n+No matter in static local file or dynamic configuration value, they are sharing the same YAML format.\n+\n+```yaml\n+grouping:\n+  # Endpoint of the service would follow the following rules\n+  - service-name: serviceA\n+    rules:\n+      # Logic name when the regex expression matched.\n+      - endpoint-name: /prod/{id}\n+        regex: \\/prod\\/.+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDc4MA=="}, "originalCommit": {"oid": "52b672cafe09baa43e9a7fe30f1bedf0ae4eb0a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMzQxOA==", "bodyText": "lol", "url": "https://github.com/apache/skywalking/pull/4802#discussion_r428113418", "createdAt": "2020-05-20T15:39:49Z", "author": {"login": "alonelaval"}, "path": "docs/en/setup/backend/endpoint-grouping-rules.md", "diffHunk": "@@ -0,0 +1,23 @@\n+# Group Parameterized Endpoints\n+In most cases, the endpoint should be detected automatically through the language agents, service mesh observability solution, \n+or configuration of meter system.\n+\n+There are some special cases, especially when people use REST style URI, the application codes put the parameter in the endpoint name, \n+such as putting order id in the URI, like `/prod/ORDER123` and `/prod/ORDER123`. But logically, people expect they could\n+have an endpoint name like `prod/{order-id}`. This is the feature of parameterized endpoint grouping designed for.\n+\n+Current, user could set up grouping rules through the static YAML file, named `endpoint_name_grouping.yml`,\n+or use [Dynamic Configuration](dynamic-config.md) to initial and update the endpoint grouping rule.\n+\n+## Configuration Format\n+No matter in static local file or dynamic configuration value, they are sharing the same YAML format.\n+\n+```yaml\n+grouping:\n+  # Endpoint of the service would follow the following rules\n+  - service-name: serviceA\n+    rules:\n+      # Logic name when the regex expression matched.\n+      - endpoint-name: /prod/{id}\n+        regex: \\/prod\\/.+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDc4MA=="}, "originalCommit": {"oid": "52b672cafe09baa43e9a7fe30f1bedf0ae4eb0a9"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 159, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}