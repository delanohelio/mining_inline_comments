{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Mzg4ODk3", "number": 5628, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwODozNjo1OFrOEqEpqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjo1MzoyNlrOEqFvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTUxODUxOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-alarm.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwODozNjo1OFrOHcGAUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMDozODoyN1rOHcGrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMDU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The alarm message will send through HTTP post by `application/json` content type if you configured Slack Incoming Webhooks as following:\n          \n          \n            \n            The alarm message will send through HTTP post by `application/json` content type if you configured Dingtalk Webhooks as following:\n          \n      \n    \n    \n  \n\nCopy-Paste issue?", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499220562", "createdAt": "2020-10-04T08:36:58Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -219,6 +219,26 @@ wechatHooks:\n     - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\n ```\n \n+## Dingtalk Hook\n+To do this you need to follow the [Dingtalk Webhooks guide](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK) and create new Webhooks.\n+For security issue, you can config optional secret for individual webhook url.\n+The alarm message will send through HTTP post by `application/json` content type if you configured Slack Incoming Webhooks as following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6442711399c90f9bf7cd449bf9aa7a1c5cc84de3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMTQ4OQ==", "bodyText": "Yes, fixed", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499231489", "createdAt": "2020-10-04T10:38:27Z", "author": {"login": "xbkaishui"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -219,6 +219,26 @@ wechatHooks:\n     - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\n ```\n \n+## Dingtalk Hook\n+To do this you need to follow the [Dingtalk Webhooks guide](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK) and create new Webhooks.\n+For security issue, you can config optional secret for individual webhook url.\n+The alarm message will send through HTTP post by `application/json` content type if you configured Slack Incoming Webhooks as following:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMDU2Mg=="}, "originalCommit": {"oid": "6442711399c90f9bf7cd449bf9aa7a1c5cc84de3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTUyMzIzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/alarm-settings.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwODo0Mzo1NFrOHcGCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMDozODozNVrOHcGrDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMTE5MA==", "bodyText": "Only need one, please remove this.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\n          \n          \n            \n            #      secret:", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499221190", "createdAt": "2020-10-04T08:43:54Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/alarm-settings.yml", "diffHunk": "@@ -69,3 +69,17 @@ wechatHooks:\n     }\n   webhooks:\n #    - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\n+\n+dingtalkHooks:\n+  textTemplate: |-\n+    {\n+      \"msgtype\": \"text\",\n+      \"text\": {\n+        \"content\": \"Apache SkyWalking Alarm: \\n %s.\"\n+      }\n+    }\n+  webhooks:\n+#    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token\n+#      secret: dummysecret\n+#    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\n+#      secret:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6442711399c90f9bf7cd449bf9aa7a1c5cc84de3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMTUwMQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499231501", "createdAt": "2020-10-04T10:38:35Z", "author": {"login": "xbkaishui"}, "path": "oap-server/server-bootstrap/src/main/resources/alarm-settings.yml", "diffHunk": "@@ -69,3 +69,17 @@ wechatHooks:\n     }\n   webhooks:\n #    - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\n+\n+dingtalkHooks:\n+  textTemplate: |-\n+    {\n+      \"msgtype\": \"text\",\n+      \"text\": {\n+        \"content\": \"Apache SkyWalking Alarm: \\n %s.\"\n+      }\n+    }\n+  webhooks:\n+#    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token\n+#      secret: dummysecret\n+#    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\n+#      secret:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMTE5MA=="}, "originalCommit": {"oid": "6442711399c90f9bf7cd449bf9aa7a1c5cc84de3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTUyMzQ3OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-alarm.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwODo0NDoxMFrOHcGC4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMDozODo0MlrOHcGrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMTIxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\n          \n          \n            \n                  secret:", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499221216", "createdAt": "2020-10-04T08:44:10Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -219,6 +219,26 @@ wechatHooks:\n     - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\n ```\n \n+## Dingtalk Hook\n+To do this you need to follow the [Dingtalk Webhooks guide](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK) and create new Webhooks.\n+For security issue, you can config optional secret for individual webhook url.\n+The alarm message will send through HTTP post by `application/json` content type if you configured Slack Incoming Webhooks as following:\n+```yml\n+dingtalkHooks:\n+  textTemplate: |-\n+    {\n+      \"msgtype\": \"text\",\n+      \"text\": {\n+        \"content\": \"Apache SkyWalking Alarm: \\n %s.\"\n+      }\n+    }\n+  webhooks:\n+    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token\n+      secret: dummysecret\n+    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\n+      secret:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6442711399c90f9bf7cd449bf9aa7a1c5cc84de3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzMTUxMg==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499231512", "createdAt": "2020-10-04T10:38:42Z", "author": {"login": "xbkaishui"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -219,6 +219,26 @@ wechatHooks:\n     - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\n ```\n \n+## Dingtalk Hook\n+To do this you need to follow the [Dingtalk Webhooks guide](https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK) and create new Webhooks.\n+For security issue, you can config optional secret for individual webhook url.\n+The alarm message will send through HTTP post by `application/json` content type if you configured Slack Incoming Webhooks as following:\n+```yml\n+dingtalkHooks:\n+  textTemplate: |-\n+    {\n+      \"msgtype\": \"text\",\n+      \"text\": {\n+        \"content\": \"Apache SkyWalking Alarm: \\n %s.\"\n+      }\n+    }\n+  webhooks:\n+    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token\n+      secret: dummysecret\n+    - url: https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\n+      secret:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyMTIxNg=="}, "originalCommit": {"oid": "6442711399c90f9bf7cd449bf9aa7a1c5cc84de3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTY2MjkyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjowNToxMlrOHcHJHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjoyMjowN1rOHcHPtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzOTE5OQ==", "bodyText": "Please recheck the test case, seems this method is not covered. Also, please help on rechecking other read* methods in this class.", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499239199", "createdAt": "2020-10-04T12:05:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -203,4 +206,25 @@ private void readCompositeRuleConfig(Rules rules) {\n             }\n         });\n     }\n+\n+    /**\n+     * Read composite rule config into {@link DingtalkSettings}\n+     */\n+    private void readDingtalkConfig(Rules rules) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MDg4NA==", "bodyText": "Actually I have added test logic in RulesReaderTest.java  will check others. it may be related to Codecov detect logic. let me check", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499240884", "createdAt": "2020-10-04T12:22:07Z", "author": {"login": "xbkaishui"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -203,4 +206,25 @@ private void readCompositeRuleConfig(Rules rules) {\n             }\n         });\n     }\n+\n+    /**\n+     * Read composite rule config into {@link DingtalkSettings}\n+     */\n+    private void readDingtalkConfig(Rules rules) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzOTE5OQ=="}, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTY2Mzg3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjowNjowNFrOHcHJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjowNjowNFrOHcHJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIzOTMxMw==", "bodyText": "But I have noticed this, maybe above is just a coverage issue? FYI @kezhenxu94, any clue?", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499239313", "createdAt": "2020-10-04T12:06:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java", "diffHunk": "@@ -18,16 +18,23 @@\n \n package org.apache.skywalking.oap.server.core.alarm.provider;\n \n-import java.util.List;\n+import org.apache.skywalking.oap.server.core.alarm.provider.dingtalk.DingtalkSettings;\n import org.junit.Assert;\n import org.junit.Test;\n \n-public class AlarmRuleInitTest {\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.any;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n+public class RulesReaderTest {\n     @Test\n-    public void testInit() {\n+    public void testReadRules() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTY5NTEwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjo1MToyMlrOHcHZtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDoyNjo0MFrOHcH8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzQ0Ng==", "bodyText": "Be careful when copy-and-pasting\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Read composite rule config into {@link DingtalkSettings}\n          \n          \n            \n                 * Read alarm rule config into {@link DingtalkSettings}", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499243446", "createdAt": "2020-10-04T12:51:22Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -203,4 +206,25 @@ private void readCompositeRuleConfig(Rules rules) {\n             }\n         });\n     }\n+\n+    /**\n+     * Read composite rule config into {@link DingtalkSettings}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MjM4Mw==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499252383", "createdAt": "2020-10-04T14:26:40Z", "author": {"login": "xbkaishui"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -203,4 +206,25 @@ private void readCompositeRuleConfig(Rules rules) {\n             }\n         });\n     }\n+\n+    /**\n+     * Read composite rule config into {@link DingtalkSettings}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzQ0Ng=="}, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTY5NjQzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/dingtalk/DingtalkHookCallback.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjo1MzoyNlrOHcHafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo0MzowNVrOHcVWoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzY0NA==", "bodyText": "Please confirm that whether the default settings in the application.yaml makes this.alarmRulesWatcher.getDingtalkSettings().getWebhooks() null, if yes there is possible NPE", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499243644", "createdAt": "2020-10-04T12:53:26Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/dingtalk/DingtalkHookCallback.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.dingtalk;\n+\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.List;\n+\n+/**\n+ * Use SkyWalking alarm dingtalk webhook API.\n+ */\n+@Slf4j\n+public class DingtalkHookCallback implements AlarmCallback {\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 1000;\n+    private static final int HTTP_CONNECTION_REQUEST_TIMEOUT = 1000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 10000;\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+    private RequestConfig requestConfig;\n+\n+    public DingtalkHookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        this.requestConfig = RequestConfig.custom()\n+                .setConnectTimeout(HTTP_CONNECT_TIMEOUT)\n+                .setConnectionRequestTimeout(HTTP_CONNECTION_REQUEST_TIMEOUT)\n+                .setSocketTimeout(HTTP_SOCKET_TIMEOUT)\n+                .build();\n+    }\n+\n+    /**\n+     * Send alarm message if the settings not empty\n+     */\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessages) {\n+        if (this.alarmRulesWatcher.getDingtalkSettings() == null || this.alarmRulesWatcher.getDingtalkSettings().getWebhooks().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0NzQyMQ==", "bodyText": "I think this.alarmRulesWatcher.getDingtalkSettings().getWebhooks() is null, then this will return directly.", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499247421", "createdAt": "2020-10-04T13:34:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/dingtalk/DingtalkHookCallback.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.dingtalk;\n+\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.List;\n+\n+/**\n+ * Use SkyWalking alarm dingtalk webhook API.\n+ */\n+@Slf4j\n+public class DingtalkHookCallback implements AlarmCallback {\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 1000;\n+    private static final int HTTP_CONNECTION_REQUEST_TIMEOUT = 1000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 10000;\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+    private RequestConfig requestConfig;\n+\n+    public DingtalkHookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        this.requestConfig = RequestConfig.custom()\n+                .setConnectTimeout(HTTP_CONNECT_TIMEOUT)\n+                .setConnectionRequestTimeout(HTTP_CONNECTION_REQUEST_TIMEOUT)\n+                .setSocketTimeout(HTTP_SOCKET_TIMEOUT)\n+                .build();\n+    }\n+\n+    /**\n+     * Send alarm message if the settings not empty\n+     */\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessages) {\n+        if (this.alarmRulesWatcher.getDingtalkSettings() == null || this.alarmRulesWatcher.getDingtalkSettings().getWebhooks().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzY0NA=="}, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MjM3Ng==", "bodyText": "Nop, in DingtalkSettings.java the webhooks default is empty list, it can direct to check isEmpty", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499252376", "createdAt": "2020-10-04T14:26:32Z", "author": {"login": "xbkaishui"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/dingtalk/DingtalkHookCallback.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.dingtalk;\n+\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.List;\n+\n+/**\n+ * Use SkyWalking alarm dingtalk webhook API.\n+ */\n+@Slf4j\n+public class DingtalkHookCallback implements AlarmCallback {\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 1000;\n+    private static final int HTTP_CONNECTION_REQUEST_TIMEOUT = 1000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 10000;\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+    private RequestConfig requestConfig;\n+\n+    public DingtalkHookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        this.requestConfig = RequestConfig.custom()\n+                .setConnectTimeout(HTTP_CONNECT_TIMEOUT)\n+                .setConnectionRequestTimeout(HTTP_CONNECTION_REQUEST_TIMEOUT)\n+                .setSocketTimeout(HTTP_SOCKET_TIMEOUT)\n+                .build();\n+    }\n+\n+    /**\n+     * Send alarm message if the settings not empty\n+     */\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessages) {\n+        if (this.alarmRulesWatcher.getDingtalkSettings() == null || this.alarmRulesWatcher.getDingtalkSettings().getWebhooks().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzY0NA=="}, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDU5Nw==", "bodyText": "Yes, seems so.", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499254597", "createdAt": "2020-10-04T14:49:40Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/dingtalk/DingtalkHookCallback.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.dingtalk;\n+\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.List;\n+\n+/**\n+ * Use SkyWalking alarm dingtalk webhook API.\n+ */\n+@Slf4j\n+public class DingtalkHookCallback implements AlarmCallback {\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 1000;\n+    private static final int HTTP_CONNECTION_REQUEST_TIMEOUT = 1000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 10000;\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+    private RequestConfig requestConfig;\n+\n+    public DingtalkHookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        this.requestConfig = RequestConfig.custom()\n+                .setConnectTimeout(HTTP_CONNECT_TIMEOUT)\n+                .setConnectionRequestTimeout(HTTP_CONNECTION_REQUEST_TIMEOUT)\n+                .setSocketTimeout(HTTP_SOCKET_TIMEOUT)\n+                .build();\n+    }\n+\n+    /**\n+     * Send alarm message if the settings not empty\n+     */\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessages) {\n+        if (this.alarmRulesWatcher.getDingtalkSettings() == null || this.alarmRulesWatcher.getDingtalkSettings().getWebhooks().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzY0NA=="}, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3MjAzMw==", "bodyText": "@kezhenxu94 Any concern?", "url": "https://github.com/apache/skywalking/pull/5628#discussion_r499472033", "createdAt": "2020-10-05T09:43:05Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/dingtalk/DingtalkHookCallback.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.dingtalk;\n+\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.List;\n+\n+/**\n+ * Use SkyWalking alarm dingtalk webhook API.\n+ */\n+@Slf4j\n+public class DingtalkHookCallback implements AlarmCallback {\n+\n+    private static final int HTTP_CONNECT_TIMEOUT = 1000;\n+    private static final int HTTP_CONNECTION_REQUEST_TIMEOUT = 1000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 10000;\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+    private RequestConfig requestConfig;\n+\n+    public DingtalkHookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        this.requestConfig = RequestConfig.custom()\n+                .setConnectTimeout(HTTP_CONNECT_TIMEOUT)\n+                .setConnectionRequestTimeout(HTTP_CONNECTION_REQUEST_TIMEOUT)\n+                .setSocketTimeout(HTTP_SOCKET_TIMEOUT)\n+                .build();\n+    }\n+\n+    /**\n+     * Send alarm message if the settings not empty\n+     */\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessages) {\n+        if (this.alarmRulesWatcher.getDingtalkSettings() == null || this.alarmRulesWatcher.getDingtalkSettings().getWebhooks().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzY0NA=="}, "originalCommit": {"oid": "9e3127ce538fd3a8ec68b28ada0cfc0fbac800ac"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4879, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}