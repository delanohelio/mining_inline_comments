{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzY0ODI0", "number": 4987, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowMjo0OVrOEKsvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozOToxMFrOELtxZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjU0MzAzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowMjo0OVrOGr5DUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDozNzoyNlrOGsPzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NjY5MQ==", "bodyText": "What is the expected sampling rate if the delete happens?", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r448676691", "createdAt": "2020-07-02T00:02:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(String config, TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n+        sampleRate = new AtomicReference<>();\n+\n+        activeSetting(config);\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        settingsString.set(config);\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0OTM3MQ==", "bodyText": "change back to property sampleRate of class TraceServiceModuleConfig", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449049371", "createdAt": "2020-07-02T14:37:26Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(String config, TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n+        sampleRate = new AtomicReference<>();\n+\n+        activeSetting(config);\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        settingsString.set(config);\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NjY5MQ=="}, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjU2MTg3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxMzoyNVrOGr5OFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0MDoxM1rOGsP6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTQ0NQ==", "bodyText": "I think should not change to String here, please move this into the TraceSampleRateWatcher.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r448679445", "createdAt": "2020-07-02T00:13:25Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java", "diffHunk": "@@ -75,8 +77,11 @@ public void prepare() throws ServiceNotProvidedException {\n \n         uninstrumentedGatewaysConfig = new UninstrumentedGatewaysConfig(this);\n \n+        traceSampleRateWatcher = new TraceSampleRateWatcher(String.valueOf(moduleConfig.getSampleRate()), this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MTMwMA==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449051300", "createdAt": "2020-07-02T14:40:13Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java", "diffHunk": "@@ -75,8 +77,11 @@ public void prepare() throws ServiceNotProvidedException {\n \n         uninstrumentedGatewaysConfig = new UninstrumentedGatewaysConfig(this);\n \n+        traceSampleRateWatcher = new TraceSampleRateWatcher(String.valueOf(moduleConfig.getSampleRate()), this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTQ0NQ=="}, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjU2MjUwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxMzo0OFrOGr5OfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1NzoyNFrOGsQoVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ==", "bodyText": "I think you don't need settingsString", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r448679549", "createdAt": "2020-07-02T00:13:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NzA4NQ==", "bodyText": "i think so too", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449047085", "createdAt": "2020-07-02T14:34:11Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ=="}, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MTE5NA==", "bodyText": "every time execute \"./mvnw -DskipTests clean package\" command so long,What's the best way to improve or whether or not have some way only execute changed module", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449061194", "createdAt": "2020-07-02T14:54:45Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ=="}, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2Mjk5OA==", "bodyText": "", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449062998", "createdAt": "2020-07-02T14:57:24Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ=="}, "originalCommit": {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTA5NDQ5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMToyOVrOGsRnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoyNDoyMVrOGsx8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg==", "bodyText": "Please set up a UT for this. Test this watcher could be driven correctly.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449079142", "createdAt": "2020-07-02T15:21:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMjYxMA==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449102610", "createdAt": "2020-07-02T15:43:01Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg=="}, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjIyMg==", "bodyText": "@killGC Could you finish the UT codes ASAP, I have to wait that before merging.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449606222", "createdAt": "2020-07-03T14:18:18Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg=="}, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwODgxNQ==", "bodyText": "i'm not familiar with UT at here,i need spend some time to study,", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449608815", "createdAt": "2020-07-03T14:24:21Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg=="}, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTA5NjUzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMjowMFrOGsRoyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo0Mjo0M1rOGsTBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTQ5OA==", "bodyText": "Why public?", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449079498", "createdAt": "2020-07-02T15:22:00Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        sampleRate = new AtomicReference<>();\n+        sampleRate.set(getDefaultValue());\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(String.valueOf(getDefaultValue()));\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return String.valueOf(sampleRate.get());\n+    }\n+\n+    public int getDefaultValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMjI1Mg==", "bodyText": "i see\uff0csorry for  the problem", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449102252", "createdAt": "2020-07-02T15:42:43Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        sampleRate = new AtomicReference<>();\n+        sampleRate.set(getDefaultValue());\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(String.valueOf(getDefaultValue()));\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return String.valueOf(sampleRate.get());\n+    }\n+\n+    public int getDefaultValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTQ5OA=="}, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTEwMDcxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToyMzowOFrOGsRrqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo0MTozOFrOGsS8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDIzMw==", "bodyText": "I think you should use sampleRate.get() only. Why sampleRate.get() == null? In which case?", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449080233", "createdAt": "2020-07-02T15:23:08Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        sampleRate = new AtomicReference<>();\n+        sampleRate.set(getDefaultValue());\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(String.valueOf(getDefaultValue()));\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return String.valueOf(sampleRate.get());\n+    }\n+\n+    public int getDefaultValue() {\n+        return ((TraceModuleProvider) this.getProvider()).getModuleConfig().getSampleRate();\n+    }\n+\n+    public int getSampleRate() {\n+        return sampleRate.get() == null ? getDefaultValue() : sampleRate.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMDk0Ng==", "bodyText": "great\uff0cthank you for help", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449100946", "createdAt": "2020-07-02T15:41:38Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        sampleRate = new AtomicReference<>();\n+        sampleRate.set(getDefaultValue());\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(String.valueOf(getDefaultValue()));\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return String.valueOf(sampleRate.get());\n+    }\n+\n+    public int getDefaultValue() {\n+        return ((TraceModuleProvider) this.getProvider()).getModuleConfig().getSampleRate();\n+    }\n+\n+    public int getSampleRate() {\n+        return sampleRate.get() == null ? getDefaultValue() : sampleRate.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDIzMw=="}, "originalCommit": {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY3MjU0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowMjo0M1rOGsg0cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTowMjo0M1rOGsg0cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyODI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private  AtomicReference<Integer> sampleRate;\n          \n          \n            \n                private AtomicReference<Integer> sampleRate;", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449328243", "createdAt": "2020-07-03T01:02:43Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzU1MDY0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwODo1ODowMVrOGs616A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwODo1ODowMVrOGs616A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestInit() {\n          \n          \n            \n                public void testInit() {", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449754600", "createdAt": "2020-07-04T08:58:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TraceSampleRateWatcherTest {\n+    private TraceModuleProvider traceModuleProvider;\n+\n+    @Before\n+    public void init() {\n+        traceModuleProvider = new TraceModuleProvider();\n+    }\n+\n+    @Test\n+    public void TestInit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzU1MDY4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwODo1ODowOVrOGs617g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwODo1ODozNlrOGs62AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestNotify() {\n          \n          \n            \n                public void testNotify() {", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449754606", "createdAt": "2020-07-04T08:58:09Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TraceSampleRateWatcherTest {\n+    private TraceModuleProvider traceModuleProvider;\n+\n+    @Before\n+    public void init() {\n+        traceModuleProvider = new TraceModuleProvider();\n+    }\n+\n+    @Test\n+    public void TestInit() {\n+        TraceSampleRateWatcher traceSampleRateWatcher = new TraceSampleRateWatcher(traceModuleProvider);\n+        Assert.assertEquals(traceSampleRateWatcher.getSampleRate(), 10000);\n+        Assert.assertEquals(traceSampleRateWatcher.value(), \"10000\");\n+    }\n+\n+    @Test(timeout = 20000)\n+    public void testDynamicUpdate() throws InterruptedException {\n+        ConfigWatcherRegister register = new MockConfigWatcherRegister(3);\n+\n+        TraceSampleRateWatcher watcher = new TraceSampleRateWatcher(traceModuleProvider);\n+        register.registerConfigChangeWatcher(watcher);\n+        register.start();\n+\n+        while (watcher.getSampleRate() == 10000) {\n+            Thread.sleep(2000);\n+        }\n+        assertThat(watcher.getSampleRate(), is(9000));\n+        assertThat(traceModuleProvider.getModuleConfig().getSampleRate(), is(10000));\n+    }\n+\n+    @Test\n+    public void TestNotify() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYyNQ==", "bodyText": "FYI @kezhenxu94 Could you check why the method name format didn't check this?", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449754625", "createdAt": "2020-07-04T08:58:36Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TraceSampleRateWatcherTest {\n+    private TraceModuleProvider traceModuleProvider;\n+\n+    @Before\n+    public void init() {\n+        traceModuleProvider = new TraceModuleProvider();\n+    }\n+\n+    @Test\n+    public void TestInit() {\n+        TraceSampleRateWatcher traceSampleRateWatcher = new TraceSampleRateWatcher(traceModuleProvider);\n+        Assert.assertEquals(traceSampleRateWatcher.getSampleRate(), 10000);\n+        Assert.assertEquals(traceSampleRateWatcher.value(), \"10000\");\n+    }\n+\n+    @Test(timeout = 20000)\n+    public void testDynamicUpdate() throws InterruptedException {\n+        ConfigWatcherRegister register = new MockConfigWatcherRegister(3);\n+\n+        TraceSampleRateWatcher watcher = new TraceSampleRateWatcher(traceModuleProvider);\n+        register.registerConfigChangeWatcher(watcher);\n+        register.start();\n+\n+        while (watcher.getSampleRate() == 10000) {\n+            Thread.sleep(2000);\n+        }\n+        assertThat(watcher.getSampleRate(), is(9000));\n+        assertThat(traceModuleProvider.getModuleConfig().getSampleRate(), is(10000));\n+    }\n+\n+    @Test\n+    public void TestNotify() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYwNg=="}, "originalCommit": {"oid": "15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTIwMDg2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMjo1ODoyOVrOGtHcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo1Nzo0OFrOGtYaEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw==", "bodyText": "As TraceServiceModuleConfig#sampleRate could be changed across thread, recommend to add volatile\n\nprivate volatile int sampleRate = 10000;\n\nJust for avoiding unexpected behaviour.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449961053", "createdAt": "2020-07-06T02:58:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -18,18 +18,20 @@\n \n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;\n \n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+\n /**\n  * The sampler makes the sampling mechanism works at backend side. Sample result: [0,sampleRate) sampled, (sampleRate,~)\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private int sampleRate = 10000;\n+    private TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6601b02dcc93ee9644eed59aad8b05b683067304"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5Nzc2MQ==", "bodyText": "@killGC Could you finish this? then it is ready to merge.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450197761", "createdAt": "2020-07-06T12:50:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -18,18 +18,20 @@\n \n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;\n \n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+\n /**\n  * The sampler makes the sampling mechanism works at backend side. Sample result: [0,sampleRate) sampled, (sampleRate,~)\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private int sampleRate = 10000;\n+    private TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw=="}, "originalCommit": {"oid": "6601b02dcc93ee9644eed59aad8b05b683067304"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzNjE0OQ==", "bodyText": "yes,i have finished", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450236149", "createdAt": "2020-07-06T13:53:48Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -18,18 +18,20 @@\n \n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;\n \n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+\n /**\n  * The sampler makes the sampling mechanism works at backend side. Sample result: [0,sampleRate) sampled, (sampleRate,~)\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private int sampleRate = 10000;\n+    private TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw=="}, "originalCommit": {"oid": "6601b02dcc93ee9644eed59aad8b05b683067304"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzODk5Mg==", "bodyText": "public class TraceSegmentSampler {\nprivate volatile TraceServiceModuleConfig config;\ni modify like this,or\npublic class TraceSampleRateWatcher extends ConfigChangeWatcher {\nprivate volatile AtomicReference sampleRate;", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450238992", "createdAt": "2020-07-06T13:57:48Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -18,18 +18,20 @@\n \n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;\n \n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+\n /**\n  * The sampler makes the sampling mechanism works at backend side. Sample result: [0,sampleRate) sampled, (sampleRate,~)\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private int sampleRate = 10000;\n+    private TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw=="}, "originalCommit": {"oid": "6601b02dcc93ee9644eed59aad8b05b683067304"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzA4NjM4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDoxNTo0NlrOGtZJ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTowMTo1M1rOGtbJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA==", "bodyText": "This change is not right. Please read my review more carefully.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450251240", "createdAt": "2020-07-06T14:15:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NDMxMA==", "bodyText": "Dynamic configuration will not modify TraceServiceModuleConfig#sampleRate\uff0cbut modify TraceSampleRateWatcher#sampleRate", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450264310", "createdAt": "2020-07-06T14:34:07Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NzE0Mw==", "bodyText": "No one will change this reference, @killGC", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450267143", "createdAt": "2020-07-06T14:38:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3MjkwMg==", "bodyText": "okay\uff0cbut this reference #traceSampleRateWatcher#sampleRate will change\uff0cto get newest sampleRate's value by this reference\uff0cno need for this reference add volatile\uff1f", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450272902", "createdAt": "2020-07-06T14:46:14Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4MDYwNA==", "bodyText": "You are always using the same config#getTraceSampleRateWatcher  reference, right? As the config is never changed, you don't need this. volatile could cause more CPU, please use it if necessary.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450280604", "createdAt": "2020-07-06T14:57:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4Mzk1Nw==", "bodyText": "okay,i see", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450283957", "createdAt": "2020-07-06T15:01:53Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzE5NzE3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozOToxMFrOGtaK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTowMjowNFrOGtbKLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA==", "bodyText": "Why config has reference to watcher? This is strange. Watcher should be a part of TraceSegmentSampler", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450267890", "createdAt": "2020-07-06T14:39:10Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -51,6 +51,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private TraceSampleRateWatcher traceSampleRateWatcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2OTAxNA==", "bodyText": "Config should only be changed through the initialization stage. Nothing more.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450269014", "createdAt": "2020-07-06T14:40:40Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -51,6 +51,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private TraceSampleRateWatcher traceSampleRateWatcher;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3OTY1OA==", "bodyText": "i understand this mean this config have which watchers will modify this config\u2018s properties\uff1ffor example,same with uninstrumentedGatewaysConfig be added before", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450279658", "createdAt": "2020-07-06T14:55:56Z", "author": {"login": "killGC"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -51,6 +51,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private TraceSampleRateWatcher traceSampleRateWatcher;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4NDA3Nw==", "bodyText": "OK, ignore this. Continue on others.", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450284077", "createdAt": "2020-07-06T15:02:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -51,6 +51,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private TraceSampleRateWatcher traceSampleRateWatcher;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA=="}, "originalCommit": {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 38, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}