{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTgzNDg1", "number": 4587, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoxODowNVrODsf1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoyOTowN1rODsf7mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg1NTEzOnYy", "diffSide": "RIGHT", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoxODowNVrOF9YX6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzozMjowNFrOF9YjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjc5Mg==", "bodyText": "Why blank lines here?", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399906792", "createdAt": "2020-03-30T03:18:05Z", "author": {"login": "hanahmily"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -377,10 +376,19 @@ private Class generateDispatcherClass(String scopeName,\n              */\n             String sourceClassName = SOURCE_PACKAGE + dispatcherContext.getSource();\n             SignatureAttribute.ClassSignature dispatcherSignature = new SignatureAttribute.ClassSignature(null, null,\n-                // Set interface and its generic params\n-                new SignatureAttribute.ClassType[] {\n-                    new SignatureAttribute.ClassType(SourceDispatcher.class.getCanonicalName(), new SignatureAttribute.TypeArgument[] {new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(sourceClassName))})\n-                });\n+                                                                                                          // Set interface and its generic params\n+                                                                                                          new SignatureAttribute.ClassType[] {\n+                                                                                                              new SignatureAttribute.ClassType(\n+                                                                                                                  SourceDispatcher.class\n+                                                                                                                      .getCanonicalName(),\n+                                                                                                                  new SignatureAttribute.TypeArgument[] {\n+                                                                                                                      new SignatureAttribute.TypeArgument(\n+                                                                                                                          new SignatureAttribute.ClassType(\n+                                                                                                                              sourceClassName))\n+                                                                                                                  }\n+                                                                                                              )\n+                                                                                                          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzA3MQ==", "bodyText": "These are not blank :) Scroll to the right.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399907071", "createdAt": "2020-03-30T03:19:15Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -377,10 +376,19 @@ private Class generateDispatcherClass(String scopeName,\n              */\n             String sourceClassName = SOURCE_PACKAGE + dispatcherContext.getSource();\n             SignatureAttribute.ClassSignature dispatcherSignature = new SignatureAttribute.ClassSignature(null, null,\n-                // Set interface and its generic params\n-                new SignatureAttribute.ClassType[] {\n-                    new SignatureAttribute.ClassType(SourceDispatcher.class.getCanonicalName(), new SignatureAttribute.TypeArgument[] {new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(sourceClassName))})\n-                });\n+                                                                                                          // Set interface and its generic params\n+                                                                                                          new SignatureAttribute.ClassType[] {\n+                                                                                                              new SignatureAttribute.ClassType(\n+                                                                                                                  SourceDispatcher.class\n+                                                                                                                      .getCanonicalName(),\n+                                                                                                                  new SignatureAttribute.TypeArgument[] {\n+                                                                                                                      new SignatureAttribute.TypeArgument(\n+                                                                                                                          new SignatureAttribute.ClassType(\n+                                                                                                                              sourceClassName))\n+                                                                                                                  }\n+                                                                                                              )\n+                                                                                                          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjc5Mg=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzIwOA==", "bodyText": "I could reformat it manually a little.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399907208", "createdAt": "2020-03-30T03:19:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -377,10 +376,19 @@ private Class generateDispatcherClass(String scopeName,\n              */\n             String sourceClassName = SOURCE_PACKAGE + dispatcherContext.getSource();\n             SignatureAttribute.ClassSignature dispatcherSignature = new SignatureAttribute.ClassSignature(null, null,\n-                // Set interface and its generic params\n-                new SignatureAttribute.ClassType[] {\n-                    new SignatureAttribute.ClassType(SourceDispatcher.class.getCanonicalName(), new SignatureAttribute.TypeArgument[] {new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(sourceClassName))})\n-                });\n+                                                                                                          // Set interface and its generic params\n+                                                                                                          new SignatureAttribute.ClassType[] {\n+                                                                                                              new SignatureAttribute.ClassType(\n+                                                                                                                  SourceDispatcher.class\n+                                                                                                                      .getCanonicalName(),\n+                                                                                                                  new SignatureAttribute.TypeArgument[] {\n+                                                                                                                      new SignatureAttribute.TypeArgument(\n+                                                                                                                          new SignatureAttribute.ClassType(\n+                                                                                                                              sourceClassName))\n+                                                                                                                  }\n+                                                                                                              )\n+                                                                                                          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjc5Mg=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODc1OQ==", "bodyText": "Updated, should be better now.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399908759", "createdAt": "2020-03-30T03:27:43Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -377,10 +376,19 @@ private Class generateDispatcherClass(String scopeName,\n              */\n             String sourceClassName = SOURCE_PACKAGE + dispatcherContext.getSource();\n             SignatureAttribute.ClassSignature dispatcherSignature = new SignatureAttribute.ClassSignature(null, null,\n-                // Set interface and its generic params\n-                new SignatureAttribute.ClassType[] {\n-                    new SignatureAttribute.ClassType(SourceDispatcher.class.getCanonicalName(), new SignatureAttribute.TypeArgument[] {new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(sourceClassName))})\n-                });\n+                                                                                                          // Set interface and its generic params\n+                                                                                                          new SignatureAttribute.ClassType[] {\n+                                                                                                              new SignatureAttribute.ClassType(\n+                                                                                                                  SourceDispatcher.class\n+                                                                                                                      .getCanonicalName(),\n+                                                                                                                  new SignatureAttribute.TypeArgument[] {\n+                                                                                                                      new SignatureAttribute.TypeArgument(\n+                                                                                                                          new SignatureAttribute.ClassType(\n+                                                                                                                              sourceClassName))\n+                                                                                                                  }\n+                                                                                                              )\n+                                                                                                          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjc5Mg=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwOTYzNQ==", "bodyText": "LTGM", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399909635", "createdAt": "2020-03-30T03:32:04Z", "author": {"login": "hanahmily"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -377,10 +376,19 @@ private Class generateDispatcherClass(String scopeName,\n              */\n             String sourceClassName = SOURCE_PACKAGE + dispatcherContext.getSource();\n             SignatureAttribute.ClassSignature dispatcherSignature = new SignatureAttribute.ClassSignature(null, null,\n-                // Set interface and its generic params\n-                new SignatureAttribute.ClassType[] {\n-                    new SignatureAttribute.ClassType(SourceDispatcher.class.getCanonicalName(), new SignatureAttribute.TypeArgument[] {new SignatureAttribute.TypeArgument(new SignatureAttribute.ClassType(sourceClassName))})\n-                });\n+                                                                                                          // Set interface and its generic params\n+                                                                                                          new SignatureAttribute.ClassType[] {\n+                                                                                                              new SignatureAttribute.ClassType(\n+                                                                                                                  SourceDispatcher.class\n+                                                                                                                      .getCanonicalName(),\n+                                                                                                                  new SignatureAttribute.TypeArgument[] {\n+                                                                                                                      new SignatureAttribute.TypeArgument(\n+                                                                                                                          new SignatureAttribute.ClassType(\n+                                                                                                                              sourceClassName))\n+                                                                                                                  }\n+                                                                                                              )\n+                                                                                                          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNjc5Mg=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg1ODgzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/MetricsExtension.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoyMDo0NlrOF9YaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzozMjoyNVrOF9YjVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzM2Mw==", "bodyText": "We should name it to supportUpdate or change the comment description. They are not identical.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399907363", "createdAt": "2020-03-30T03:20:46Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/MetricsExtension.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;\n+\n+/**\n+ * MetricsExtension annotation defines extension attributes of the {@link Stream} with {@link MetricsStreamProcessor}.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface MetricsExtension {\n+    /**\n+     * @return true if this metrics stream support down sampling.\n+     */\n+    boolean supportDownSampling();\n+\n+    /**\n+     * @return true if this metrics doesn't support update.\n+     */\n+    boolean insertOnly();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODY4Nw==", "bodyText": "Rename insertOnly to supportUpdate. EndpointTraffic has wrong definition before.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399908687", "createdAt": "2020-03-30T03:27:27Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/MetricsExtension.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;\n+\n+/**\n+ * MetricsExtension annotation defines extension attributes of the {@link Stream} with {@link MetricsStreamProcessor}.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface MetricsExtension {\n+    /**\n+     * @return true if this metrics stream support down sampling.\n+     */\n+    boolean supportDownSampling();\n+\n+    /**\n+     * @return true if this metrics doesn't support update.\n+     */\n+    boolean insertOnly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzM2Mw=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwOTcxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399909717", "createdAt": "2020-03-30T03:32:25Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/MetricsExtension.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.worker.MetricsStreamProcessor;\n+\n+/**\n+ * MetricsExtension annotation defines extension attributes of the {@link Stream} with {@link MetricsStreamProcessor}.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface MetricsExtension {\n+    /**\n+     * @return true if this metrics stream support down sampling.\n+     */\n+    boolean supportDownSampling();\n+\n+    /**\n+     * @return true if this metrics doesn't support update.\n+     */\n+    boolean insertOnly();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzM2Mw=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg2NzM3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/Column.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoyNjo1MVrOF9Ye4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzozMDowOFrOF9YhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODU3OA==", "bodyText": "I suggest the storageOnly default is true in the Column annotation? Because I think most of the columns are just for storage.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399908578", "createdAt": "2020-03-30T03:26:51Z", "author": {"login": "mrproliu"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/Column.java", "diffHunk": "@@ -55,5 +55,12 @@\n     /**\n      * The column is just saved, never used in query.\n      */\n-    boolean content() default false;\n+    boolean storageOnly() default false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0eeb8a61e1316e2fa7031a984a4372e41d4cac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwOTI3Nw==", "bodyText": "No, you can't. There are countless places in the codes, including the OAL generated codes. If you use this, we are facing more changes.\nIn your case, that will be impossible to review this PR.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399909277", "createdAt": "2020-03-30T03:30:08Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/annotation/Column.java", "diffHunk": "@@ -55,5 +55,12 @@\n     /**\n      * The column is just saved, never used in query.\n      */\n-    boolean content() default false;\n+    boolean storageOnly() default false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODU3OA=="}, "originalCommit": {"oid": "4f0eeb8a61e1316e2fa7031a984a4372e41d4cac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg3MDk4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ExtraQueryIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzoyOTowN1rOF9Yg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjozMzowNlrOF9bTUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwOTA4NQ==", "bodyText": "We can simplify them with System.arraycopy", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399909085", "createdAt": "2020-03-30T03:29:07Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ExtraQueryIndex.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.model;\n+\n+import lombok.Getter;\n+import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n+\n+/**\n+ * The extra query index if the storage could support this mode. Many NO-SQL support one column index only, in that\n+ * case, this could be ignored in the implementation level.\n+ */\n+@Getter\n+public class ExtraQueryIndex {\n+    private String[] columns;\n+\n+    public ExtraQueryIndex(String mainColumn, final String[] withColumns) {\n+        if (CollectionUtils.isNotEmpty(withColumns)) {\n+            this.columns = new String[withColumns.length + 1];\n+            for (int i = 0; i < columns.length; i++) {\n+                if (i == 0) {\n+                    columns[i] = mainColumn;\n+                } else {\n+                    columns[i] = withColumns[i - 1];\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1NDc2OQ==", "bodyText": "Yes, adopted this method.", "url": "https://github.com/apache/skywalking/pull/4587#discussion_r399954769", "createdAt": "2020-03-30T06:33:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/model/ExtraQueryIndex.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.storage.model;\n+\n+import lombok.Getter;\n+import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n+\n+/**\n+ * The extra query index if the storage could support this mode. Many NO-SQL support one column index only, in that\n+ * case, this could be ignored in the implementation level.\n+ */\n+@Getter\n+public class ExtraQueryIndex {\n+    private String[] columns;\n+\n+    public ExtraQueryIndex(String mainColumn, final String[] withColumns) {\n+        if (CollectionUtils.isNotEmpty(withColumns)) {\n+            this.columns = new String[withColumns.length + 1];\n+            for (int i = 0; i < columns.length; i++) {\n+                if (i == 0) {\n+                    columns[i] = mainColumn;\n+                } else {\n+                    columns[i] = withColumns[i - 1];\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwOTA4NQ=="}, "originalCommit": {"oid": "c81fe4873743b0f8ad1383ec5846222134214bf8"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}