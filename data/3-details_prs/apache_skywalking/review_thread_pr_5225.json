{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDk3NzIx", "number": 5225, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoyOTowNFrOEU4SxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1OTo0OVrOEVSNAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzI5Mjg0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/define/HTableInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoyOTowNFrOG7UcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo0Nzo1OVrOG7VC_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDE3Nw==", "bodyText": "Does this method provide a header/metadata injection way? Or does HBase network protocol support that? If so, we should consider that, because as a Java based server, we will have a chance to tracing and monitoring the HBase server in the future.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r464854177", "createdAt": "2020-08-04T07:29:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/define/HTableInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HTableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.apache.hadoop.hbase.client.HTable\";\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.hbase.HTableInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArguments(6);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPT_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"delete\").or(named(\"put\")).or(isPublic().and(named(\"get\")))\n+                            .or(named(\"getScanner\").and(takesArguments(1))\n+                                    .and(takesArgument(0, named(\"org.apache.hadoop.hbase.client.Scan\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2Mzk5OA==", "bodyText": "Let me do some research", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r464863998", "createdAt": "2020-08-04T07:47:59Z", "author": {"login": "zhaoyuguang"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/define/HTableInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HTableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.apache.hadoop.hbase.client.HTable\";\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.hbase.HTableInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArguments(6);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPT_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"delete\").or(named(\"put\")).or(isPublic().and(named(\"get\")))\n+                            .or(named(\"getScanner\").and(takesArguments(1))\n+                                    .and(takesArgument(0, named(\"org.apache.hadoop.hbase.client.Scan\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDE3Nw=="}, "originalCommit": {"oid": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDUwNjI3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxODoyNlrOG7f_Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowODo0MFrOG7iFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw==", "bodyText": "What is the case not instanceof OperationWithAttributes?", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465043247", "createdAt": "2020-08-04T13:18:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/Htable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MzY1NA==", "bodyText": "I don't know how all versions of Hbase-Client evolve, just in case", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465053654", "createdAt": "2020-08-04T13:34:34Z", "author": {"login": "zhaoyuguang"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/Htable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw=="}, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NzY1Mg==", "bodyText": "OK, got it:)", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465077652", "createdAt": "2020-08-04T14:08:40Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/Htable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw=="}, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDczNTUzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMToxMFrOG7iMsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo0NTo0MFrOG73NSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTQ3NQ==", "bodyText": "HBase client with HTable? What is the relationship between these?", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465079475", "createdAt": "2020-08-04T14:11:10Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "diffHunk": "@@ -70,6 +70,8 @@\n     * [SolrJ](https://github.com/apache/lucene-solr/tree/master/solr/solrj) 7.x\n   * [Cassandra](https://github.com/apache/cassandra) 3.x\n     * [cassandra-java-driver](https://github.com/datastax/java-driver) 3.7.0-3.7.2\n+  * Hbase\n+    * [hbase-client](https://github.com/apache/hbase) HTable 1.x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyMzY4OQ==", "bodyText": "The HBase Client also has classes that interact with the remote server, such as Admin , which can modify tables, operate clusters, manage connections, etc. The PR only monitors the HTABLE", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465423689", "createdAt": "2020-08-05T01:45:40Z", "author": {"login": "zhaoyuguang"}, "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "diffHunk": "@@ -70,6 +70,8 @@\n     * [SolrJ](https://github.com/apache/lucene-solr/tree/master/solr/solrj) 7.x\n   * [Cassandra](https://github.com/apache/cassandra) 3.x\n     * [cassandra-java-driver](https://github.com/datastax/java-driver) 3.7.0-3.7.2\n+  * Hbase\n+    * [hbase-client](https://github.com/apache/hbase) HTable 1.x", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTQ3NQ=="}, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDczNzI4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMTozMlrOG7iNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo0MzozMFrOG73KsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTc1OA==", "bodyText": "I think all Hbase should be HBase according to the official document.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465079758", "createdAt": "2020-08-04T14:11:32Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -311,6 +311,9 @@ GraphQL:\n spring-annotation:\n   id: 93\n   languages: Java\n+Hbase:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyMzAyNQ==", "bodyText": "I  fix  Htable--> HTable too, wait ci", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465423025", "createdAt": "2020-08-05T01:43:30Z", "author": {"login": "zhaoyuguang"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -311,6 +311,9 @@ GraphQL:\n spring-annotation:\n   id: 93\n   languages: Java\n+Hbase:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTc1OA=="}, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk0MzcwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1MDowMVrOG73SJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1OToyOVrOG73cZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDkzNA==", "bodyText": "The agent core has try-catch already. We don't need this in the interceptor.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465424934", "createdAt": "2020-08-05T01:50:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/HTable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {\n+            ContextCarrier contextCarrier = new ContextCarrier();\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    contextCarrier, (String) objInst.getSkyWalkingDynamicField());\n+            CarrierItem next = contextCarrier.items();\n+            while (next.hasNext()) {\n+                next = next.next();\n+                if (operation != null) {\n+                    operation.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                } else {\n+                    for (OperationWithAttributes o : operations) {\n+                        o.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                    }\n+                }\n+            }\n+        } else {\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    (String) objInst.getSkyWalkingDynamicField());\n+        }\n+        span.setComponent(ComponentsDefine.HBASE);\n+        Tags.DB_TYPE.set(span, HBASE_DB_TYPE);\n+        Tags.DB_INSTANCE.set(span, ((HTable) objInst).getName().getNameAsString());\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        AbstractSpan span = ContextManager.activeSpan();\n+        span.errorOccurred();\n+        span.log(t);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        try {\n+            Configuration connection = ((ClusterConnection) allArguments[1]).getConfiguration();\n+            Field field = connection.getClass().getDeclaredField(\"overlay\");\n+            field.setAccessible(true);\n+            Properties properties = (Properties) field.get(connection);\n+            for (Map.Entry entry : properties.entrySet()) {\n+                if (\"hbase.zookeeper.quorum\".equals(entry.getKey())) {\n+                    objInst.setSkyWalkingDynamicField(entry.getValue().toString());\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzU1Ng==", "bodyText": "just throw? onConstruct method had no throws", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465427556", "createdAt": "2020-08-05T01:59:29Z", "author": {"login": "zhaoyuguang"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/HTable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {\n+            ContextCarrier contextCarrier = new ContextCarrier();\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    contextCarrier, (String) objInst.getSkyWalkingDynamicField());\n+            CarrierItem next = contextCarrier.items();\n+            while (next.hasNext()) {\n+                next = next.next();\n+                if (operation != null) {\n+                    operation.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                } else {\n+                    for (OperationWithAttributes o : operations) {\n+                        o.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                    }\n+                }\n+            }\n+        } else {\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    (String) objInst.getSkyWalkingDynamicField());\n+        }\n+        span.setComponent(ComponentsDefine.HBASE);\n+        Tags.DB_TYPE.set(span, HBASE_DB_TYPE);\n+        Tags.DB_INSTANCE.set(span, ((HTable) objInst).getName().getNameAsString());\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        AbstractSpan span = ContextManager.activeSpan();\n+        span.errorOccurred();\n+        span.log(t);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        try {\n+            Configuration connection = ((ClusterConnection) allArguments[1]).getConfiguration();\n+            Field field = connection.getClass().getDeclaredField(\"overlay\");\n+            field.setAccessible(true);\n+            Properties properties = (Properties) field.get(connection);\n+            for (Map.Entry entry : properties.entrySet()) {\n+                if (\"hbase.zookeeper.quorum\".equals(entry.getKey())) {\n+                    objInst.setSkyWalkingDynamicField(entry.getValue().toString());\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDkzNA=="}, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjk1ODI2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1Nzo0MFrOG73ahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoxNDozOVrOG73r_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzA3Nw==", "bodyText": "What is this? If they are same, you don't need mapping.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465427077", "createdAt": "2020-08-05T01:57:40Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  Hase: HBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzM1Nw==", "bodyText": "fixed", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465427357", "createdAt": "2020-08-05T01:58:46Z", "author": {"login": "zhaoyuguang"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  Hase: HBase", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzA3Nw=="}, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMTU0OA==", "bodyText": "Please try #5232, you should not need this once the bug fixed.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465431548", "createdAt": "2020-08-05T02:14:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  Hase: HBase", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzA3Nw=="}, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUzNzkyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1OTo0OVrOG78v-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzowNzo0MlrOG7892Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDQ4OQ==", "bodyText": "Whether we don't need this? Have you checked locally?", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465514489", "createdAt": "2020-08-05T06:59:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  HBase: HBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxODA0MQ==", "bodyText": "fixed", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465518041", "createdAt": "2020-08-05T07:07:42Z", "author": {"login": "zhaoyuguang"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  HBase: HBase", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDQ4OQ=="}, "originalCommit": {"oid": "8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4910, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}