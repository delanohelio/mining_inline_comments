{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODEzODk4", "number": 5688, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NToyNFrOEvPIKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo0MTowOVrOEvk1KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTY2Mzc5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NToyNFrOHkGrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NToyNFrOHkGrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDE0Mw==", "bodyText": "FutureReturnValueIgnored:  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507620143", "createdAt": "2020-10-19T09:55:24Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTY2MzkwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NToyNVrOHkGrPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NToyNVrOHkGrPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDE1OA==", "bodyText": "FutureReturnValueIgnored:  Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507620158", "createdAt": "2020-10-19T09:55:25Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTEzNjgzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTozNTo1M1rOHkUxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo0MToxM1rOHkofGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ==", "bodyText": "Why do you move this ping into the else block? This should be as what it was.", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507851171", "createdAt": "2020-10-19T15:35:53Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2ODEzMg==", "bodyText": "The KafkaServiceManagementServiceClient need sends the instance properties to the backend every collector.heartbeat_period * collector.times_send_properties seconds", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508168132", "createdAt": "2020-10-20T02:18:41Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ=="}, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3MjAyOA==", "bodyText": "@kezhenxu94 KafkaServiceManagementServiceClient also need to send the instance properties.", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508172028", "createdAt": "2020-10-20T02:33:35Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ=="}, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NDEwNg==", "bodyText": "I think the question is, ping should be sent every time, no else. You should not change this part of the original codes.", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508174106", "createdAt": "2020-10-20T02:41:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/core/kafka/KafkaServiceManagementServiceClient.java", "diffHunk": "@@ -85,28 +87,32 @@ public void boot() {\n             this,\n             t -> LOGGER.error(\"unexpected exception.\", t)\n         ), 0, Config.Collector.HEARTBEAT_PERIOD, TimeUnit.SECONDS);\n-\n-        InstanceProperties instance = InstanceProperties.newBuilder()\n-                                                        .setService(Config.Agent.SERVICE_NAME)\n-                                                        .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                                        .addAllProperties(OSUtil.buildOSInfo(\n-                                                            Config.OsInfo.IPV4_LIST_SIZE))\n-                                                        .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n-                                                        .build();\n-        producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(), Bytes.wrap(instance.toByteArray())));\n-        producer.flush();\n     }\n \n     @Override\n     public void run() {\n-        InstancePingPkg ping = InstancePingPkg.newBuilder()\n-                                              .setService(Config.Agent.SERVICE_NAME)\n-                                              .setServiceInstance(Config.Agent.INSTANCE_NAME)\n-                                              .build();\n-        if (LOGGER.isDebugEnable()) {\n-            LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+        if (Math.abs(sendPropertiesCounter.getAndAdd(1)) % Config.Collector.TIMES_SEND_PROPERTIES == 0) {\n+            InstanceProperties instance = InstanceProperties.newBuilder()\n+                                                            .setService(Config.Agent.SERVICE_NAME)\n+                                                            .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                            .addAllProperties(OSUtil.buildOSInfo(\n+                                                                Config.OsInfo.IPV4_LIST_SIZE))\n+                                                            .addAllProperties(SERVICE_INSTANCE_PROPERTIES)\n+                                                            .build();\n+            producer.send(new ProducerRecord<>(topic, TOPIC_KEY_REGISTER + instance.getServiceInstance(),\n+                                               Bytes.wrap(instance.toByteArray())\n+            ));\n+            producer.flush();\n+        } else {\n+            InstancePingPkg ping = InstancePingPkg.newBuilder()\n+                                                  .setService(Config.Agent.SERVICE_NAME)\n+                                                  .setServiceInstance(Config.Agent.INSTANCE_NAME)\n+                                                  .build();\n+            if (LOGGER.isDebugEnable()) {\n+                LOGGER.debug(\"Heartbeat reporting, instance: {}\", ping.getServiceInstance());\n+            }\n+            producer.send(new ProducerRecord<>(topic, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MTE3MQ=="}, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTE0NDA1OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTozNzoyMFrOHkU18g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMToyNDowOFrOHknNqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MjI3NA==", "bodyText": "It's hard to express this config item properly, but this statement is abs. not what you really mean, according to the logic, it should be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `collector.times_send_properties`|How many times do report a properties to the backend, Each time interval is {@link Collector#HEARTBEAT_PERIOD} |`10`|\n          \n          \n            \n            `collector.times_send_properties`|The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.times_send_properties` seconds |`10`|", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r507852274", "createdAt": "2020-10-19T15:37:20Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -89,6 +89,7 @@ property key | Description | Default |\n `osinfo.ipv4_list_size`| Limit the length of the ipv4 list size. |`10`|\n `collector.grpc_channel_check_interval`|grpc channel status check interval.|`30`|\n `collector.heartbeat_period`|agent heartbeat report period. Unit, second.|`30`|\n+`collector.times_send_properties`|How many times do report a properties to the backend, Each time interval is {@link Collector#HEARTBEAT_PERIOD} |`10`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1MzI1Nw==", "bodyText": "I prefer collector.times_send_properties to collector.properties_report_period_factor", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508153257", "createdAt": "2020-10-20T01:24:08Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -89,6 +89,7 @@ property key | Description | Default |\n `osinfo.ipv4_list_size`| Limit the length of the ipv4 list size. |`10`|\n `collector.grpc_channel_check_interval`|grpc channel status check interval.|`30`|\n `collector.heartbeat_period`|agent heartbeat report period. Unit, second.|`30`|\n+`collector.times_send_properties`|How many times do report a properties to the backend, Each time interval is {@link Collector#HEARTBEAT_PERIOD} |`10`|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1MjI3NA=="}, "originalCommit": {"oid": "327337b8b3c79ffb67eb3c72ec525e6ebfa56154"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzIxOTYwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo0MTowOVrOHkofDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMjo0MTowOVrOHkofDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NDA5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.times_send_properties` seconds\n          \n          \n            \n                     * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.properties_report_period_factor` seconds", "url": "https://github.com/apache/skywalking/pull/5688#discussion_r508174094", "createdAt": "2020-10-20T02:41:09Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -142,6 +142,10 @@\n          * The period in which the agent report a heartbeat to the backend.\n          */\n         public static long HEARTBEAT_PERIOD = 30;\n+        /**\n+         * The agent sends the instance properties to the backend every `collector.heartbeat_period * collector.times_send_properties` seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2981322f03748382713c60d89a328eda0394d581"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4715, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}