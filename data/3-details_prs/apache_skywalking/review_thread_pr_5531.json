{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNDE1MjM1", "number": 5531, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDozNDo1MFrOEl4sLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyNzowNVrOEwFx5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTYxNTgzOnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDozNDo1MFrOHVm5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTowOTo1NVrOHVnYrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTMzNQ==", "bodyText": "simples? A typo?", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492419335", "createdAt": "2020-09-22T00:34:50Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMDYyNw==", "bodyText": "Where is the term sample family from?", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492420627", "createdAt": "2020-09-22T00:40:20Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTMzNQ=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNzQzNg==", "bodyText": "From OC and Prometheus term system, sample family contains a series of sample/metric with the same name and tag keys. Those samples in an identical sample family could be aggregated using aggregation operation by tags.\nIn OC, sample family is called metric family, but it also uses sample to refer to metric. So I use the same term, sample, to identify them instead of introducing the metric keyword.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492427436", "createdAt": "2020-09-22T01:09:55Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTMzNQ=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTYyMDYxOnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDozNzo0NFrOHVm7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxMDoyOFrOHVnZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMDAyMw==", "bodyText": "meter metric these two are duplicated. I think maybe keep meter only?", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492420023", "createdAt": "2020-09-22T00:37:44Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNzU3NQ==", "bodyText": "make sense.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492427575", "createdAt": "2020-09-22T01:10:28Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMDAyMw=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTYzNDYxOnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDo0Njo0NlrOHVnDxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODowODozN1rOHX5a0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjA4Ng==", "bodyText": "Why we are using quantile? What parameter format you are going to use?\nAccording to your \u03c6-quantile (0 \u2264 \u03c6 \u2264 100) expression, you still should use percentile here.  Take a look on this https://stats.stackexchange.com/questions/156778/percentile-vs-quantile-vs-quartile", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492422086", "createdAt": "2020-09-22T00:46:46Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions)\n+ - max (select maximum over dimensions)\n+ - avg (calculate the average over dimensions)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_quantile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODI0NQ==", "bodyText": "Thanks for clarifying it, will fix the term.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492428245", "createdAt": "2020-09-22T01:13:24Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions)\n+ - max (select maximum over dimensions)\n+ - avg (calculate the average over dimensions)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_quantile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjA4Ng=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgyMDA1MA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494820050", "createdAt": "2020-09-25T08:08:37Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions)\n+ - max (select maximum over dimensions)\n+ - avg (calculate the average over dimensions)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_quantile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjA4Ng=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTYzNzYyOnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDo0ODozNFrOHVnFdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxMjozM1rOHVnbFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjUxNg==", "bodyText": "Could you share a complex expression(including filter, function, and operation) at the end of this document? It would be more clear for the readers.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492422516", "createdAt": "2020-09-22T00:48:34Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions)\n+ - max (select maximum over dimensions)\n+ - avg (calculate the average over dimensions)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_quantile\n+`histogram_quantile([<\u03c6 scalar>])`. Hints meter-system to calculates the \u03c6-quantile (0 \u2264 \u03c6 \u2264 100) from the buckets. \n+\n+## Down Sampling Operation\n+MAL should instruct meter-system how to do downsampling for metrics. It doesn't only refer to aggregate raw samples to \n+`minute` level, but also hints data from `minute` to higher levels, for instance, `hour` and `day`. \n+\n+Down sampling operations are as global function in MAL:\n+\n+ - avg\n+ - latest\n+ - min\n+ - max\n+ - mean\n+ - sum\n+ - count\n+\n+The default one is `avg` if not specific an operation.\n+\n+If user want get latest time from `last_server_state_sync_time_in_seconds`:\n+\n+```\n+latest(last_server_state_sync_time_in_seconds.tagEqual('production', 'catalog'))\n+\n+or\n+\n+latest last_server_state_sync_time_in_seconds.tagEqual('production', 'catalog')\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODA1Mg==", "bodyText": "Sure. I prefer to add more examples once most of the features are accomplished though.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492428052", "createdAt": "2020-09-22T01:12:33Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,188 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter metric data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions)\n+ - max (select maximum over dimensions)\n+ - avg (calculate the average over dimensions)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_quantile\n+`histogram_quantile([<\u03c6 scalar>])`. Hints meter-system to calculates the \u03c6-quantile (0 \u2264 \u03c6 \u2264 100) from the buckets. \n+\n+## Down Sampling Operation\n+MAL should instruct meter-system how to do downsampling for metrics. It doesn't only refer to aggregate raw samples to \n+`minute` level, but also hints data from `minute` to higher levels, for instance, `hour` and `day`. \n+\n+Down sampling operations are as global function in MAL:\n+\n+ - avg\n+ - latest\n+ - min\n+ - max\n+ - mean\n+ - sum\n+ - count\n+\n+The default one is `avg` if not specific an operation.\n+\n+If user want get latest time from `last_server_state_sync_time_in_seconds`:\n+\n+```\n+latest(last_server_state_sync_time_in_seconds.tagEqual('production', 'catalog'))\n+\n+or\n+\n+latest last_server_state_sync_time_in_seconds.tagEqual('production', 'catalog')\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjUxNg=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTYzNzk1OnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/meter.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMDo0ODo0N1rOHVnFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODowODo1NFrOHX5bZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjU2OQ==", "bodyText": "A typo?", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492422569", "createdAt": "2020-09-22T00:48:47Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/meter.md", "diffHunk": "@@ -22,3 +22,5 @@ Meter System supports following binding functions\n - **percentile**. Read [percentile in WIKI](https://en.wikipedia.org/wiki/Percentile). Unlike in the OAL, we provide\n 50/75/90/95/99 in default, in the meter system function, percentile function accepts several ranks, which should be in\n the (0, 100) range.\n+\n+## ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjY5MA==", "bodyText": "I think you are going to remove this eventually.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r492422690", "createdAt": "2020-09-22T00:49:13Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/meter.md", "diffHunk": "@@ -22,3 +22,5 @@ Meter System supports following binding functions\n - **percentile**. Read [percentile in WIKI](https://en.wikipedia.org/wiki/Percentile). Unlike in the OAL, we provide\n 50/75/90/95/99 in default, in the meter system function, percentile function accepts several ranks, which should be in\n the (0, 100) range.\n+\n+## ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjU2OQ=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgyMDE5OA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494820198", "createdAt": "2020-09-25T08:08:54Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/meter.md", "diffHunk": "@@ -22,3 +22,5 @@ Meter System supports following binding functions\n - **percentile**. Read [percentile in WIKI](https://en.wikipedia.org/wiki/Percentile). Unlike in the OAL, we provide\n 50/75/90/95/99 in default, in the meter system function, percentile function accepts several ranks, which should be in\n the (0, 100) range.\n+\n+## ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjU2OQ=="}, "originalCommit": {"oid": "42324480fa68d482c58c1e9546facffeffdde0c0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzM5NDA4OnYy", "diffSide": "RIGHT", "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/DSL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTo1Njo1M1rOHX9JeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDowODo1OFrOHX9huA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MTE0NQ==", "bodyText": "Remember to add comments for these classes in the meter analyzer packages.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494881145", "createdAt": "2020-09-25T09:56:53Z", "author": {"login": "wu-sheng"}, "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/DSL.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.meter.analyzer.dsl;\n+\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import groovy.util.DelegatingScript;\n+import org.codehaus.groovy.control.CompilerConfiguration;\n+\n+public final class DSL {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7395da6a72d4e24620321f6890e5de589b7da6f1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NzM1Mg==", "bodyText": "From what I expect, all of the public class and methods would be commented on before this PR is reviewable.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494887352", "createdAt": "2020-09-25T10:08:58Z", "author": {"login": "hanahmily"}, "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/DSL.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.meter.analyzer.dsl;\n+\n+import groovy.lang.Binding;\n+import groovy.lang.GroovyShell;\n+import groovy.util.DelegatingScript;\n+import org.codehaus.groovy.control.CompilerConfiguration;\n+\n+public final class DSL {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MTE0NQ=="}, "originalCommit": {"oid": "7395da6a72d4e24620321f6890e5de589b7da6f1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzQxNDcyOnYy", "diffSide": "RIGHT", "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/counter/Window.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDowMzoxMVrOHX9WNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDo0NjowMlrOHX-nFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDQwNQ==", "bodyText": "There is another abstract Window in the OAP core. Please rename this.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494884405", "createdAt": "2020-09-25T10:03:11Z", "author": {"login": "wu-sheng"}, "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/counter/Window.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.meter.analyzer.dsl.counter;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Window stores a series of counter samples in order to calculate the increase\n+ * or instant rate of increase.\n+ */\n+@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n+@ToString\n+@EqualsAndHashCode\n+public class Window {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7395da6a72d4e24620321f6890e5de589b7da6f1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODY5MQ==", "bodyText": "Do you mean this one under prometheus package, that is going to be removed once OC/Prometheus switch the configuration modal to this one.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494888691", "createdAt": "2020-09-25T10:11:37Z", "author": {"login": "hanahmily"}, "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/counter/Window.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.meter.analyzer.dsl.counter;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Window stores a series of counter samples in order to calculate the increase\n+ * or instant rate of increase.\n+ */\n+@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n+@ToString\n+@EqualsAndHashCode\n+public class Window {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDQwNQ=="}, "originalCommit": {"oid": "7395da6a72d4e24620321f6890e5de589b7da6f1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwNTEwOQ==", "bodyText": "No, in the core streaming. Window is for caching metrics and switching.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r494905109", "createdAt": "2020-09-25T10:46:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/counter/Window.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.meter.analyzer.dsl.counter;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+import lombok.AccessLevel;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Window stores a series of counter samples in order to calculate the increase\n+ * or instant rate of increase.\n+ */\n+@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\n+@ToString\n+@EqualsAndHashCode\n+public class Window {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDQwNQ=="}, "originalCommit": {"oid": "7395da6a72d4e24620321f6890e5de589b7da6f1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTM1ODY0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/fetcher-prom-rules/self.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoyNzo0NlrOHh7MOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODoyNzo0NlrOHh7MOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMzNDg0Mg==", "bodyText": "What does this mean?", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r505334842", "createdAt": "2020-10-15T08:27:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/fetcher-prom-rules/self.yaml", "diffHunk": "@@ -38,269 +38,43 @@ staticConfig:\n       sslCaFilePath:\n   labels:\n     service: oap-server\n+defaultMetricLevel: instance(['service'], ['instance'])\n metricsRules:\n   - name: instance_cpu_percentage\n-    scope: SERVICE_INSTANCE\n-    operation: avg\n-    sources:\n-      process_cpu_seconds_total:\n-        counterFunction: RATE\n-        range: PT1M\n-        scale: 2\n-        relabel:\n-          service:\n-            - service\n-          instance:\n-            - instance\n+    exp: (process_cpu_seconds_total * 100).rate('PT1M')\n   - name: instance_jvm_memory_bytes_used\n-    scope: SERVICE_INSTANCE\n-    operation: avg\n-    sources:\n-      jvm_memory_bytes_used:\n-        relabel:\n-          service:\n-            - service\n-          instance:\n-            - instance\n+    exp: jvm_memory_bytes_used.sum(['service', 'instance'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d605d80a82627534f1a114d30604bfb9879ce36e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODYwOTE5OnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyMzo0M1rOHlb9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjozNjowOVrOHlcRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNzQwOQ==", "bodyText": "This breaks on the preview page. Please fix.", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r509017409", "createdAt": "2020-10-21T06:23:43Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f753e3f49c7ed70e18b2e1c69af6cb16dd105b0f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMjQ3OQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r509022479", "createdAt": "2020-10-21T06:36:09Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNzQwOQ=="}, "originalCommit": {"oid": "f753e3f49c7ed70e18b2e1c69af6cb16dd105b0f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODYxMTc0OnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyNDo0MVrOHlb-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjozNjoxOFrOHlcRVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNzc4Ng==", "bodyText": "TBD -> TODO?", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r509017786", "createdAt": "2020-10-21T06:24:41Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+or \n+\n+```\n+2 + instance_trace_count\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions) (TBD)\n+ - max (select maximum over dimensions) (TBD)\n+ - avg (calculate the average over dimensions) (TBD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f753e3f49c7ed70e18b2e1c69af6cb16dd105b0f"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMjU0OQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r509022549", "createdAt": "2020-10-21T06:36:18Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+or \n+\n+```\n+2 + instance_trace_count\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions) (TBD)\n+ - max (select maximum over dimensions) (TBD)\n+ - avg (calculate the average over dimensions) (TBD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNzc4Ng=="}, "originalCommit": {"oid": "f753e3f49c7ed70e18b2e1c69af6cb16dd105b0f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODYxNzk2OnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/mal.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyNzowNVrOHlcCdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjozNjoyNlrOHlcRjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxODc0Mw==", "bodyText": "TBD->TODO", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r509018743", "createdAt": "2020-10-21T06:27:05Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+or \n+\n+```\n+2 + instance_trace_count\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions) (TBD)\n+ - max (select maximum over dimensions) (TBD)\n+ - avg (calculate the average over dimensions) (TBD)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_percentile\n+`histogram_percentile([<p scalar>])`. Hints meter-system to calculates the p-percentile (0 \u2264 p \u2264 100) from the buckets. \n+\n+#### time\n+`time()`. returns the number of seconds since January 1, 1970 UTC.\n+\n+## Down Sampling Operation\n+MAL should instruct meter-system how to do downsampling for metrics. It doesn't only refer to aggregate raw samples to \n+`minute` level, but also hints data from `minute` to higher levels, for instance, `hour` and `day`. \n+\n+Down sampling operations are as global function in MAL:\n+\n+ - avg\n+ - latest (TBD)\n+ - min (TBD)\n+ - max (TBD)\n+ - mean (TBD)\n+ - sum (TBD)\n+ - count (TBD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f753e3f49c7ed70e18b2e1c69af6cb16dd105b0f"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMjYwNg==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5531#discussion_r509022606", "createdAt": "2020-10-21T06:36:26Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/mal.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Meter Analysis Language\n+\n+Meter system provides a functional analysis language called MAL(Meter Analysis Language) that lets the user analyze and \n+aggregate meter data in OAP streaming system. The result of an expression can either be ingested by agent analyzer,\n+or OC/Prometheus analyzer.\n+\n+## Language data type\n+\n+In MAL, an expression or sub-expression can evaluate to one of two types:\n+\n+ - Sample family -  a set of samples(metrics) containing a range of metrics whose name is identical.\n+ - Scalar - a simple numeric value. it supports integer/long, floating/double,\n+\n+## Sample family\n+\n+A set of samples, which is as the basic unit in MAL. For example:\n+\n+```\n+instance_trace_count\n+```\n+\n+The above sample family might contains following simples which are provided by external modules, for instance, agent analyzer:\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 100\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 20\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 33\n+```\n+\n+### Tag filter\n+\n+MAL support four type operations to filter samples in a sample family:\n+\n+ - tagEqual: Filter tags that are exactly equal to the provided string.\n+ - tagNotEqual: Filter tags that are not equal to the provided string.\n+ - tagMatch: Filter tags that regex-match the provided string.\n+ - tagNotMatch: Filter labels that do not regex-match the provided string.\n+\n+For example, this filters all instance_trace_count samples for us-west and asia-north region and az-1 az:\n+\n+```\n+instance_trace_count.tagMatch(\"region\", \"us-west|asia-north\").tagEqual(\"az\", \"az-1\")\n+```\n+\n+### Binary operators\n+\n+The following binary arithmetic operators are available in MAL:\n+\n+ - + (addition)\n+ - - (subtraction)\n+ - * (multiplication)\n+ - / (division)\n+\n+Binary operators are defined between scalar/scalar, sampleFamily/scalar and sampleFamily/sampleFamily value pairs.\n+\n+Between two scalars: they evaluate to another scalar that is the result of the operator applied to both scalar operands:\n+\n+```\n+1 + 2\n+```\n+\n+Between a sample family and a scalar, the operator is applied to the value of every sample in the smaple family. For example:\n+\n+```\n+instance_trace_count + 2\n+``` \n+\n+or \n+\n+```\n+2 + instance_trace_count\n+``` \n+\n+results in\n+\n+```\n+instance_trace_count{region=\"us-west\",az=\"az-1\"} 102 // 100 + 2\n+instance_trace_count{region=\"us-east\",az=\"az-3\"} 22 // 20 + 2\n+instance_trace_count{region=\"asia-north\",az=\"az-1\"} 35 // 33 + 2\n+```\n+\n+Between two sample families, a binary operator is applied to each sample in the left-hand side sample family and \n+its matching sample in the right-hand sample family. A new sample family with empty name will be generated.\n+Only the matched tags will be reserved. Samples for which no matching sample in the right-hand sample family are not in the result.\n+\n+Another sample family `instance_trace_analysis_error_count` is \n+\n+```\n+instance_trace_analysis_error_count{region=\"us-west\",az=\"az-1\"} 20\n+instance_trace_analysis_error_count{region=\"asia-north\",az=\"az-1\"} 11 \n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_analysis_error_count / instance_trace_count\n+```\n+\n+This returns a result sample family containing the error rate of trace analysis. The samples with region us-west and az az-3 \n+have no match and will not show up in the result:\n+\n+```\n+{region=\"us-west\",az=\"az-1\"} 0.8  // 20 / 100\n+{region=\"asia-north\",az=\"az-1\"} 0.3333  // 11 / 33\n+```\n+\n+### Aggregation Operation\n+\n+Sample family supports the following aggregation operations that can be used to aggregate the samples of a single sample family,\n+resulting in a new sample family of fewer samples(even single one) with aggregated values:\n+\n+ - sum (calculate sum over dimensions)\n+ - min (select minimum over dimensions) (TBD)\n+ - max (select maximum over dimensions) (TBD)\n+ - avg (calculate the average over dimensions) (TBD)\n+ \n+These operations can be used to aggregate over all label dimensions or preserve distinct dimensions by inputting `by` parameter. \n+\n+```\n+<aggr-op>(by: <tag1, tag2, ...>)\n+```\n+\n+Example expression:\n+\n+```\n+instance_trace_count.sum(by: ['az'])\n+```\n+\n+will output a result:\n+\n+```\n+instance_trace_count{az=\"az-1\"} 133 // 100 + 33\n+instance_trace_count{az=\"az-3\"} 20\n+```\n+\n+### Function\n+\n+`Duraton` is a textual representation of a time range. The formats accepted are based on the ISO-8601 duration format {@code PnDTnHnMn.nS}\n+ with days considered to be exactly 24 hours.\n+\n+Examples:\n+ - \"PT20.345S\" -- parses as \"20.345 seconds\"\n+ - \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n+ - \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n+ - \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n+ - \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n+ - \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n+ - \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n+ - \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"\n+\n+#### increase\n+`increase(Duration)`. Calculates the increase in the time range.\n+\n+#### rate\n+`rate(Duration)`. Calculates the per-second average rate of increase of the time range.\n+\n+#### irate\n+`irate()`. Calculates the per-second instant rate of increase of the time range.\n+\n+#### tag\n+`tag({allTags -> })`. Update tags of samples. User can add, drop, rename and update tags.\n+\n+#### histogram\n+`histogram(le: '<the tag name of le>')`. Transforms less based histogram buckets to meter system histogram buckets. \n+`le` parameter hints the tag name of a bucket. \n+\n+#### histogram_percentile\n+`histogram_percentile([<p scalar>])`. Hints meter-system to calculates the p-percentile (0 \u2264 p \u2264 100) from the buckets. \n+\n+#### time\n+`time()`. returns the number of seconds since January 1, 1970 UTC.\n+\n+## Down Sampling Operation\n+MAL should instruct meter-system how to do downsampling for metrics. It doesn't only refer to aggregate raw samples to \n+`minute` level, but also hints data from `minute` to higher levels, for instance, `hour` and `day`. \n+\n+Down sampling operations are as global function in MAL:\n+\n+ - avg\n+ - latest (TBD)\n+ - min (TBD)\n+ - max (TBD)\n+ - mean (TBD)\n+ - sum (TBD)\n+ - count (TBD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxODc0Mw=="}, "originalCommit": {"oid": "f753e3f49c7ed70e18b2e1c69af6cb16dd105b0f"}, "originalPosition": 185}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4829, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}