{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzU0Mjgw", "number": 4441, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowODo0OVrODlXJGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzo0MTowN1rODmGLhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTAzMDY3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowODo0OVrOFyNdYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTowNToxN1rOFyXJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzYzMg==", "bodyText": "These methods are overridden by methods in subsequent integrations. Recommend to modify these methods to abstract methods, so that the logic may be clearer.  construct like this abstract void onConstruct(EnhancedInstance objInst, Object[] allArguments, AbstractSpan span). Or they can be split into two classes like InstanceConstructorInterceptor InstanceMethodsAroundInterceptor ?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388193632", "createdAt": "2020-03-05T10:08:49Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+abstract class AbstractInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            onConstructImpl(objInst, allArguments);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            beforeMethodImpl(objInst, method, allArguments, argumentsTypes, result);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            return afterMethodImpl(objInst, method, allArguments, argumentsTypes, ret);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            handleMethodExceptionImpl(objInst, method, allArguments, argumentsTypes, t);\n+        }\n+    }\n+\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                    Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                     Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                             Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDU1OQ==", "bodyText": "I will make these methods abstract.\nBecause ClientDestTracingFilterInterceptor need to implement both onConstructImpl  and beforeMethodImpl  methods and java did not support mutiple inheritance,   so they can not be split into two class.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388244559", "createdAt": "2020-03-05T11:48:52Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+abstract class AbstractInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            onConstructImpl(objInst, allArguments);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            beforeMethodImpl(objInst, method, allArguments, argumentsTypes, result);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            return afterMethodImpl(objInst, method, allArguments, argumentsTypes, ret);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            handleMethodExceptionImpl(objInst, method, allArguments, argumentsTypes, t);\n+        }\n+    }\n+\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                    Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                     Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                             Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzYzMg=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI4MTk0Nw==", "bodyText": "Actually, in java, once you have set AbstractInterceptor as abstract, all these empty methods could be deleted directly :)", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388281947", "createdAt": "2020-03-05T13:09:40Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+abstract class AbstractInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            onConstructImpl(objInst, allArguments);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            beforeMethodImpl(objInst, method, allArguments, argumentsTypes, result);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            return afterMethodImpl(objInst, method, allArguments, argumentsTypes, ret);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            handleMethodExceptionImpl(objInst, method, allArguments, argumentsTypes, t);\n+        }\n+    }\n+\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                    Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                     Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                             Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzYzMg=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0MzEyMg==", "bodyText": "These methods we discussed above areonConstructImpl,beforeMethodImpl , they are not inherited from interface.  The purpose of  AbstractInterceptor  is a adapter for InstanceConstructorInterceptor , InstanceMethodsAroundInterceptor .", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388343122", "createdAt": "2020-03-05T14:52:28Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+abstract class AbstractInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            onConstructImpl(objInst, allArguments);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            beforeMethodImpl(objInst, method, allArguments, argumentsTypes, result);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            return afterMethodImpl(objInst, method, allArguments, argumentsTypes, ret);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            handleMethodExceptionImpl(objInst, method, allArguments, argumentsTypes, t);\n+        }\n+    }\n+\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                    Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                     Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                             Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzYzMg=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MjMwMA==", "bodyText": "Let's leave this here. My review has been challenging deeper things than this code style  discussion. Please follow those first, then we could do the review again.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388352300", "createdAt": "2020-03-05T15:05:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+abstract class AbstractInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            onConstructImpl(objInst, allArguments);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            beforeMethodImpl(objInst, method, allArguments, argumentsTypes, result);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            return afterMethodImpl(objInst, method, allArguments, argumentsTypes, ret);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            handleMethodExceptionImpl(objInst, method, allArguments, argumentsTypes, t);\n+        }\n+    }\n+\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                    Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                     Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                             Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzYzMg=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA3NjMwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientDestTracingFilterInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMTo0MVrOFyN4zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1NDoxOFrOFyQtsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMDY1Mg==", "bodyText": "Exception information to be added like ContextManager.activeSpan().errorOccurred().log(t)", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388200652", "createdAt": "2020-03-05T10:21:41Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientDestTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.finagle.Address;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextCarrierHelper.setPeerHost;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+public class ClientDestTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    @Override\n+    public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+        enhancedInstance.setSkyWalkingDynamicField(getRemote(objects));\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, MethodInterceptResult methodInterceptResult) throws Throwable {\n+        String peer = (String) enhancedInstance.getSkyWalkingDynamicField();\n+        AbstractSpan span = getSpan();\n+        if (span != null) {\n+            span.setPeer(peer);\n+        }\n+        SWContextCarrier swContextCarrier = getContextCarrier();\n+        if (swContextCarrier != null) {\n+            setPeerHost(swContextCarrier.carrier(), peer);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object o) throws Throwable {\n+        return o;\n+    }\n+\n+    @Override\n+    public void handleMethodExceptionImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Throwable throwable) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Njk2Mg==", "bodyText": "Sure, I will add it.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388246962", "createdAt": "2020-03-05T11:54:18Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientDestTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.finagle.Address;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextCarrierHelper.setPeerHost;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+public class ClientDestTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    @Override\n+    public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+        enhancedInstance.setSkyWalkingDynamicField(getRemote(objects));\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, MethodInterceptResult methodInterceptResult) throws Throwable {\n+        String peer = (String) enhancedInstance.getSkyWalkingDynamicField();\n+        AbstractSpan span = getSpan();\n+        if (span != null) {\n+            span.setPeer(peer);\n+        }\n+        SWContextCarrier swContextCarrier = getContextCarrier();\n+        if (swContextCarrier != null) {\n+            setPeerHost(swContextCarrier.carrier(), peer);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object o) throws Throwable {\n+        return o;\n+    }\n+\n+    @Override\n+    public void handleMethodExceptionImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Throwable throwable) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMDY1Mg=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTExNjkzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMzowNlrOFyORXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1NToxN1rOFyWs5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjk0Mw==", "bodyText": "why comment this?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388206943", "createdAt": "2020-03-05T10:33:06Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object ret) throws Throwable {\n+        CacheObjects cacheObjects = (CacheObjects) enhancedInstance.getSkyWalkingDynamicField();\n+\n+        final AbstractSpan finagleSpan = cacheObjects.localContextHolder.remove(SW_SPAN);\n+        cacheObjects.marshlledContextHolder.remove(SWContextCarrier$.MODULE$);\n+\n+        finagleSpan.prepareForAsync();\n+        ContextManager.stopSpan(finagleSpan);\n+\n+        ((Future<?>) ret).addEventListener(new FutureEventListener<Object>() {\n+            @Override\n+            public void onSuccess(Object value) {\n+                finagleSpan.asyncFinish();\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable cause) {\n+                finagleSpan.errorOccurred();\n+//                finagleSpan.log(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1MDIxNw==", "bodyText": "public ExitSpan log(Throwable t) {\n        if (stackDepth == 1) {\n            super.log(t);\n        }\n        return this;\n    }\nFor ExitSpan, the log will only works when stackDepth=1.  I don't understand why, Does it ok to invoke log method here?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388250217", "createdAt": "2020-03-05T12:01:23Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object ret) throws Throwable {\n+        CacheObjects cacheObjects = (CacheObjects) enhancedInstance.getSkyWalkingDynamicField();\n+\n+        final AbstractSpan finagleSpan = cacheObjects.localContextHolder.remove(SW_SPAN);\n+        cacheObjects.marshlledContextHolder.remove(SWContextCarrier$.MODULE$);\n+\n+        finagleSpan.prepareForAsync();\n+        ContextManager.stopSpan(finagleSpan);\n+\n+        ((Future<?>) ret).addEventListener(new FutureEventListener<Object>() {\n+            @Override\n+            public void onSuccess(Object value) {\n+                finagleSpan.asyncFinish();\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable cause) {\n+                finagleSpan.errorOccurred();\n+//                finagleSpan.log(cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjk0Mw=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NTA2Mg==", "bodyText": "For ExitSpan, the log will only works when stackDepth=1. I don't understand why, Does it ok to invoke log method here?\n\nWhy your plugin works as depth > 1? And yes, this is designed in that way, meaning, if there is a client-side RPC works, the nested one wouldn't be captured.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388345062", "createdAt": "2020-03-05T14:55:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object ret) throws Throwable {\n+        CacheObjects cacheObjects = (CacheObjects) enhancedInstance.getSkyWalkingDynamicField();\n+\n+        final AbstractSpan finagleSpan = cacheObjects.localContextHolder.remove(SW_SPAN);\n+        cacheObjects.marshlledContextHolder.remove(SWContextCarrier$.MODULE$);\n+\n+        finagleSpan.prepareForAsync();\n+        ContextManager.stopSpan(finagleSpan);\n+\n+        ((Future<?>) ret).addEventListener(new FutureEventListener<Object>() {\n+            @Override\n+            public void onSuccess(Object value) {\n+                finagleSpan.asyncFinish();\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable cause) {\n+                finagleSpan.errorOccurred();\n+//                finagleSpan.log(cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjk0Mw=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjAxMzQyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1OToxMlrOFyW3eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTowOTowMlrOFzNwRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA==", "bodyText": "Version compatibility feature is provided by a thing called witness class. If you provide that in the instrumentation definition, your plugin is activated only those class exists.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388347770", "createdAt": "2020-03-05T14:59:12Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0ODk4MQ==", "bodyText": "The ThreadLocal has low performance in the agent, and cost more CPU resources, comparing to other ways. Your codes use this in high frequency which is a potential performance issue. We only accept one way to use thread local, is there is no way to communicate between the interceptor. From your class name, this is not for that case.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388348981", "createdAt": "2020-03-05T15:00:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTgzNg==", "bodyText": "Version compatibility feature is provided by a thing called witness class. If you provide that in the instrumentation definition, your plugin is activated only those class exists.\n\nThe implementation detail of this plugin depend on a private class of Finagle Framework, we can not ensure that class will still exists in future versions. The mechanism of witness class can ensure this plugin can work in existing versions, it can not ensure this plugin will still work in future versions. So the purpose of the class  is to check whether this plugin is compatible with future versions, if it does't, the plugin just do nothing, avoiding unexpected runtime exceptions.\nThis has been added in comments.\nwitness has been used in this plugin to ignore versions below 6.25.0.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389245836", "createdAt": "2020-03-07T10:49:56Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjU3NA==", "bodyText": "The ThreadLocal has low performance in the agent, and cost more CPU resources, comparing to other ways. Your codes use this in high frequency which is a potential performance issue. We only accept one way to use thread local, is there is no way to communicate between the interceptor. From your class name, this is not for that case.\n\nContextHolderFactory?  There are no ThreadLocal used directly, however, it use com.twitter.util.Local which backed by ThreadLocal, but this is necessary, please check the comments.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389246574", "createdAt": "2020-03-07T11:02:17Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjczOA==", "bodyText": "First, That thing liked I said, having IP issue. And same as I said, you shouldn't implement in this way.\nI think I have said clear. Any question?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389246738", "createdAt": "2020-03-07T11:04:34Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzA0NQ==", "bodyText": "The future versions are never being sure. So it is meaningless. That is why we have explicit version test CI process, and indicate them in support list doc. Only real test could verify that.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389247045", "createdAt": "2020-03-07T11:09:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjAyNzg3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTowMTo0M1rOFyXAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMDozNDo1MVrOFzNoZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0OTk1NQ==", "bodyText": "This is not allowed, if it is copied from somewhere else, you are facing source code level LICENSE update. Also, as I commented above, I prefer to remove this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388349955", "createdAt": "2020-03-05T15:01:43Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * @see com.twitter.finagle.context.Context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTAzMQ==", "bodyText": "I have removed this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389245031", "createdAt": "2020-03-07T10:34:51Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * @see com.twitter.finagle.context.Context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0OTk1NQ=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjAzMDI0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTowMjoyMlrOFyXBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMDo1NzoyMFrOFzNtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MDM1Mg==", "bodyText": "Read my comments about witness class, and remove this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388350352", "createdAt": "2020-03-05T15:02:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolderFactory.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.finagle.context.Context;\n+import com.twitter.finagle.context.Contexts;\n+import com.twitter.finagle.context.LocalContext;\n+import com.twitter.finagle.context.MarshalledContext;\n+import com.twitter.io.Buf;\n+import com.twitter.util.Local;\n+import scala.Option;\n+import scala.Predef;\n+import scala.Some;\n+import scala.Some$;\n+import scala.Tuple2;\n+import scala.collection.JavaConverters;\n+import scala.collection.JavaConverters$;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class ContextHolderFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NjI0Mw==", "bodyText": "Comments has been added, please check ContextHolder, ContextHolderFactory, the class is necessary for the current implementation.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389246243", "createdAt": "2020-03-07T10:57:20Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolderFactory.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.finagle.context.Context;\n+import com.twitter.finagle.context.Contexts;\n+import com.twitter.finagle.context.LocalContext;\n+import com.twitter.finagle.context.MarshalledContext;\n+import com.twitter.io.Buf;\n+import com.twitter.util.Local;\n+import scala.Option;\n+import scala.Predef;\n+import scala.Some;\n+import scala.Some$;\n+import scala.Tuple2;\n+import scala.collection.JavaConverters;\n+import scala.collection.JavaConverters$;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class ContextHolderFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MDM1Mg=="}, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTgyNTg5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToxNDoyNlrOFzNxRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTo0NDo1NVrOFzN4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzMwMw==", "bodyText": "You are using a Thread local to check compatibility, why you think it makes sense?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389247303", "createdAt": "2020-03-07T11:14:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+/**\n+ * The implementation detail of this plugin depend on a private class of Finagle Framework, we can not ensure that\n+ * class will still exists in future versions. The mechanism of witness class can ensure this plugin can work in\n+ * existing versions, it can not ensure this plugin will still work in future versions. So the purpose of the class\n+ * is to check whether this plugin is compatible with future versions, if it does't, the plugin just do nothing,\n+ * avoiding unexpected runtime exceptions.\n+ */\n+public class CompatibilityChecker {\n+\n+    static ILog LOGGER = LogManager.getLogger(CompatibilityChecker.class);\n+\n+    private static boolean COMPATIBILITY = false;\n+\n+    static {\n+        try {\n+            if (FinagleCtxs.RPC != null\n+                    && FinagleCtxs.SW_SPAN != null\n+                    && checkContextHolder()) {\n+                COMPATIBILITY = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0OTA0Nw==", "bodyText": "Sorry, I misunderstanding your point, I will remove this class.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389249047", "createdAt": "2020-03-07T11:44:55Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+/**\n+ * The implementation detail of this plugin depend on a private class of Finagle Framework, we can not ensure that\n+ * class will still exists in future versions. The mechanism of witness class can ensure this plugin can work in\n+ * existing versions, it can not ensure this plugin will still work in future versions. So the purpose of the class\n+ * is to check whether this plugin is compatible with future versions, if it does't, the plugin just do nothing,\n+ * avoiding unexpected runtime exceptions.\n+ */\n+public class CompatibilityChecker {\n+\n+    static ILog LOGGER = LogManager.getLogger(CompatibilityChecker.class);\n+\n+    private static boolean COMPATIBILITY = false;\n+\n+    static {\n+        try {\n+            if (FinagleCtxs.RPC != null\n+                    && FinagleCtxs.SW_SPAN != null\n+                    && checkContextHolder()) {\n+                COMPATIBILITY = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzMwMw=="}, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTgyNzY0OnYy", "diffSide": "RIGHT", "path": ".github/workflows/plugins-test.yaml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToxODowNVrOFzNyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMzozNjoxN1rOFzOQCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzUxMQ==", "bodyText": "Are these versions using different coding API for framework end users? Even from 6.33 to 6.34? Could you explain?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389247511", "createdAt": "2020-03-07T11:18:05Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/plugins-test.yaml", "diffHunk": "@@ -271,6 +271,12 @@ jobs:\n         run: bash test/plugin/run.sh undertow-scenario\n       - name: Run jedis 2.4.0-2.9.0 (18)\n         run: bash test/plugin/run.sh jedis-scenario\n+      - name: Run finagle 6.25.0-6.43.0\n+        run: bash test/plugin/run.sh finagle-6.25.x-scenario\n+      - name: Run finagle 6.44.0-7.1.0\n+        run: bash test/plugin/run.sh finagle-6.44.x-scenario\n+      - name: Run finagle 17.10.0-20.1.0\n+        run: bash test/plugin/run.sh finagle-17.10.x-scenario", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzU4NQ==", "bodyText": "I am feeling you are not using the witness mechanism properly.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389247585", "createdAt": "2020-03-07T11:19:12Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/plugins-test.yaml", "diffHunk": "@@ -271,6 +271,12 @@ jobs:\n         run: bash test/plugin/run.sh undertow-scenario\n       - name: Run jedis 2.4.0-2.9.0 (18)\n         run: bash test/plugin/run.sh jedis-scenario\n+      - name: Run finagle 6.25.0-6.43.0\n+        run: bash test/plugin/run.sh finagle-6.25.x-scenario\n+      - name: Run finagle 6.44.0-7.1.0\n+        run: bash test/plugin/run.sh finagle-6.44.x-scenario\n+      - name: Run finagle 17.10.0-20.1.0\n+        run: bash test/plugin/run.sh finagle-17.10.x-scenario", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzUxMQ=="}, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTU5Mg==", "bodyText": "I just look your test cases, there are 3 folders but the codes are sharing or same. You should merge them into one case with version from 6.25-20.1. Because the only reason we separate the case, because the library APIs changed from version to version. But for finagle, I think it isn't. Am I right?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389251592", "createdAt": "2020-03-07T12:31:25Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/plugins-test.yaml", "diffHunk": "@@ -271,6 +271,12 @@ jobs:\n         run: bash test/plugin/run.sh undertow-scenario\n       - name: Run jedis 2.4.0-2.9.0 (18)\n         run: bash test/plugin/run.sh jedis-scenario\n+      - name: Run finagle 6.25.0-6.43.0\n+        run: bash test/plugin/run.sh finagle-6.25.x-scenario\n+      - name: Run finagle 6.44.0-7.1.0\n+        run: bash test/plugin/run.sh finagle-6.44.x-scenario\n+      - name: Run finagle 17.10.0-20.1.0\n+        run: bash test/plugin/run.sh finagle-17.10.x-scenario", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzUxMQ=="}, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NDQ1Nw==", "bodyText": "Are these versions using different coding API for framework end users? Even from 6.33 to 6.34? Could you explain?\n\nYes.  To use finagle, at least needs two jars, finagle-core and finagle-{protocol}(eg: finagle-thrift, finagle-http),  I choose finagle-thrift in tests.  The plugin implementation is only based on finagle-core, but the difference of coding API comes from finagle-thrift.\nSpecifically, to use finagle-thrift, scrooge-maven-plugin is also needed to generate code from thrift file,  and the versions of  finagle-thrift and scrooge-maven-plugin should be compatible.   In these tests, the generatd code of  finagle-6.25.x-scenario does not compatible with finagle-thrift 6.44.  and the generated code of finagle-6.44.x-scenario indeed compatible with finagle-thrift 6.43, but does not  compatible with all versions from 6.25 to 6.43.  I put these versions that both tests compatible into finagle-6.25.x-scenario.  And from version 17.10, these three jars(finagle-core,finagle-thrift,scrooge-maven-plugin) just has the same version.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389254457", "createdAt": "2020-03-07T13:22:56Z", "author": {"login": "huangyoje"}, "path": ".github/workflows/plugins-test.yaml", "diffHunk": "@@ -271,6 +271,12 @@ jobs:\n         run: bash test/plugin/run.sh undertow-scenario\n       - name: Run jedis 2.4.0-2.9.0 (18)\n         run: bash test/plugin/run.sh jedis-scenario\n+      - name: Run finagle 6.25.0-6.43.0\n+        run: bash test/plugin/run.sh finagle-6.25.x-scenario\n+      - name: Run finagle 6.44.0-7.1.0\n+        run: bash test/plugin/run.sh finagle-6.44.x-scenario\n+      - name: Run finagle 17.10.0-20.1.0\n+        run: bash test/plugin/run.sh finagle-17.10.x-scenario", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzUxMQ=="}, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NTE3Ng==", "bodyText": "OK. Let's leave the cases like this for now. Please continue on other changes.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389255176", "createdAt": "2020-03-07T13:36:17Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/plugins-test.yaml", "diffHunk": "@@ -271,6 +271,12 @@ jobs:\n         run: bash test/plugin/run.sh undertow-scenario\n       - name: Run jedis 2.4.0-2.9.0 (18)\n         run: bash test/plugin/run.sh jedis-scenario\n+      - name: Run finagle 6.25.0-6.43.0\n+        run: bash test/plugin/run.sh finagle-6.25.x-scenario\n+      - name: Run finagle 6.44.0-7.1.0\n+        run: bash test/plugin/run.sh finagle-6.44.x-scenario\n+      - name: Run finagle 17.10.0-20.1.0\n+        run: bash test/plugin/run.sh finagle-17.10.x-scenario", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzUxMQ=="}, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTkwMTU3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNDowMDo0OVrOFzOWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNDowODoxN1rOFzTBcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg==", "bodyText": "Why don't you create the exit span in the ClientDestTracingFilterInterceptor directly? ContextCarrier require the peer information, otherwise the topology will break.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389256712", "createdAt": "2020-03-07T14:00:49Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MDQ1OA==", "bodyText": "Because ClientDestTracingFilter  may be executed in another thread, not the thread that initiated the rpc request.   It is hard to know when and where the thread change occurs.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389260458", "createdAt": "2020-03-07T15:04:02Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MDgyNg==", "bodyText": "The peer infomation is added to ContextCarrier in ClientDestTracingFilterInterceptor by ContextCarrierHelper.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389260826", "createdAt": "2020-03-07T15:08:41Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzMyNQ==", "bodyText": "OK. From your codes, you are not just setting the peer later, you are hijacking the ContextCarrier.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263325", "createdAt": "2020-03-07T15:46:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzM2Ng==", "bodyText": "You also hijacking the op name in the ContextCarrier. Those two are uncommon case for me. Are these really necessary?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263366", "createdAt": "2020-03-07T15:47:14Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMzM2Mw==", "bodyText": "So far it is necessary.\n#4441 (comment)", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389333363", "createdAt": "2020-03-08T04:08:17Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTk1NDkzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNTo0ODoxM1rOFzOwSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMToxNzoxN1rOFzSixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzQzMg==", "bodyText": "Once this interceptor is not in the user thread, there is no active span.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263432", "createdAt": "2020-03-07T15:48:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later\n+                    getLocalContextHolder().let(FinagleCtxs.RPC, rpc);\n+                } else {\n+                    span.setOperationName(rpc);\n+                }\n+                SWContextCarrier swContextCarrier = getContextCarrier();\n+                if (swContextCarrier != null) {\n+                    swContextCarrier.setOperationName(rpc);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        }\n+\n+        @Override\n+        protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+            return ret;\n+        }\n+\n+        @Override\n+        protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+            ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNTUwOA==", "bodyText": "I will remove this.  The AnnotationInterceptor only needs to implement InstanceConstructorInterceptor.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389325508", "createdAt": "2020-03-08T01:17:17Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later\n+                    getLocalContextHolder().let(FinagleCtxs.RPC, rpc);\n+                } else {\n+                    span.setOperationName(rpc);\n+                }\n+                SWContextCarrier swContextCarrier = getContextCarrier();\n+                if (swContextCarrier != null) {\n+                    swContextCarrier.setOperationName(rpc);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        }\n+\n+        @Override\n+        protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+            return ret;\n+        }\n+\n+        @Override\n+        protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+            ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzQzMg=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTk1NTg2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNTo0OTo0NFrOFzOwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwNzowMzo1M1rOFzTikA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzU1NA==", "bodyText": "What does this in case mean? Why there is unexpected execution sequence?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263554", "createdAt": "2020-03-07T15:49:44Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNzQ5Mg==", "bodyText": "Iniitally, here is used to set op to server entryspan(sorry for the wrong comments),  and finally, I passed op from client to server, so it is no longer needed here. The codes and comments has been modified as below:\nif (span != null) {\n    /*\n     * The Rpc Annotation is created both in client side and server side, in server side, this\n     * annotation is created only in finagle versions below 17.12.0.\n     *\n     * If the span is not null, which means we are in the client side, we just set op to the exitspan.\n     *\n     * If the span is null, which means we are in the server side with finagle version below 17.12.0.\n     * In server side, we don't need this annotation, because we can get op from Contexts.broadcast\n     * which comes from client.\n     */\n    span.setOperationName(rpc);\n}", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389327492", "createdAt": "2020-03-08T02:00:33Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzU1NA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyODUxMg==", "bodyText": "Why do you plan to propagate the op name in the wire? Entry span should focus on the server side logic only. The only thing will propagate in your RPC header, is the official ContextCarrier.\nLike my other comments say, I have concern about you are hijacking the ContextCarrier. If we change it some day, even it is rarely to see, it is hard to remember the Finagle plugin has this operation.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389328512", "createdAt": "2020-03-08T02:22:12Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzU1NA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMzIyNQ==", "bodyText": "Why do you plan to propagate the op name in the wire?\n\nFor finagle version 17.12.0 and above,  we can not get op name in the server side directly.  If we add finagle-{protocol}(eg: finagle-thrift) into this plugin, then we could deserialize the bytes of the request paramenter and get op name, but this will introduce more complexity becase we have to be compatible with various protocols.\n\nLike my other comments say, I have concern about you are hijacking the ContextCarrier. If we change it some day, even it is rarely to see, it is hard to remember the Finagle plugin has this operation.\n\nSo far, I can't think of a better way to do this.  When we create span and contextCarrier, we don't know the remote address and op name,  but it is difficult to  propagate trace information across finagle's inner threads and then create span untill we know remote address and op name.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389333225", "createdAt": "2020-03-08T04:04:38Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzU1NA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0MTg0MA==", "bodyText": "Take a look at #4462", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389341840", "createdAt": "2020-03-08T07:03:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzU1NA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTk1NzgwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/scala/org/apache/skywalking/apm/plugin/finagle/SWContextCarrier.scala", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNTo1Mzo0N1rOFzOxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMjo0MDowNVrOFzSxqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzgxNA==", "bodyText": "Why this one in Scala?  Could you explain the reason? I can't see that through codes.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263814", "createdAt": "2020-03-07T15:53:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/scala/org/apache/skywalking/apm/plugin/finagle/SWContextCarrier.scala", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle\n+\n+import com.twitter.finagle.context.Contexts\n+import com.twitter.io.Buf\n+import com.twitter.util.{Return, Try}\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier\n+\n+class SWContextCarrier(val carrier: ContextCarrier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyODg2Mw==", "bodyText": "SWContextCarrier   implement MarshalledContext.Key, which is a scala inner class,  I don't find a right way to do this in java.\nclass Impl1 extends MarshalledContext.Key<String> {\n        public Impl1() {\n            Contexts.broadcast().super(\"impl1\");\n        }\n}\njavac throws a compile error for above codes. However, when i fix the compile error, there will be a runtime error.   Java and scala's inner classes are slightly differenthttps://stackoverflow.com/a/39692316/7645128, may be the error here comes from difference of javac and scalac.\nI am still looking for a right way to do this in java,", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389328863", "createdAt": "2020-03-08T02:29:06Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/scala/org/apache/skywalking/apm/plugin/finagle/SWContextCarrier.scala", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle\n+\n+import com.twitter.finagle.context.Contexts\n+import com.twitter.io.Buf\n+import com.twitter.util.{Return, Try}\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier\n+\n+class SWContextCarrier(val carrier: ContextCarrier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzgxNA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyOTMyMg==", "bodyText": "OK, if this is required in the original codes, we could keep it. This is not the issue.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389329322", "createdAt": "2020-03-08T02:40:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/scala/org/apache/skywalking/apm/plugin/finagle/SWContextCarrier.scala", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle\n+\n+import com.twitter.finagle.context.Contexts\n+import com.twitter.io.Buf\n+import com.twitter.util.{Return, Try}\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier\n+\n+class SWContextCarrier(val carrier: ContextCarrier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzgxNA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTk2MTUyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjowMTowNFrOFzOzjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwMjo1NTowMFrOFzS0QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA==", "bodyText": "Is the enhancedInstance used in only one thread only? If there is a race condition, you can't use the dynamic field.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389264270", "createdAt": "2020-03-07T16:01:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDM1MA==", "bodyText": "I am confused here, if the dynamic field is safe enough, why you need the ContextHolder?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389264350", "createdAt": "2020-03-07T16:02:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDUyOA==", "bodyText": "dynamic field could set any customized class, from my reading, it should be used to replace the ContextHolder.\nAnyway, I think I need your further explanation about this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389264528", "createdAt": "2020-03-07T16:05:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyOTk4NA==", "bodyText": "Is the enhancedInstance used in only one thread only?\n\nThe  enhancedInstance  is used in mulit threads, I will remove usage of it.\n\nI am confused here, if the dynamic field is safe enough, why you need the ContextHolder?\n\nContextHolder is used to put finagleSpan,SWContextCarrier to Context, thus these two can be accessed by ClientDestTracingFilterInterceptor, even if ClientDestTracingFilter is executed in another thread.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389329984", "createdAt": "2020-03-08T02:55:00Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjczNzMyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextCarrierHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzo0MTowN1rOFzVS4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzo1NToxM1rOFzVXDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MDU5Mw==", "bodyText": "This format seems wrong.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389370593", "createdAt": "2020-03-08T13:41:07Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextCarrierHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.RPC;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getOperationName;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getPeerHost;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * We need set peer host to {@link ContextCarrier} in {@link ClientDestTracingFilterInterceptor}, but there is no\n+ * public method to do this, so we use this helper to achieve it.\n+ */\n+class ContextCarrierHelper {\n+\n+    static void tryInjectContext() {\n+        String operationName = getOperationName();\n+        if (operationName == null) {\n+            return;\n+        }\n+        String peer = getPeerHost();\n+        if (peer == null) {\n+            return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad0d49eda45e3c86d6f98a579910941d9e5abfe"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MTY2MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389371660", "createdAt": "2020-03-08T13:55:13Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextCarrierHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.RPC;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getOperationName;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getPeerHost;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * We need set peer host to {@link ContextCarrier} in {@link ClientDestTracingFilterInterceptor}, but there is no\n+ * public method to do this, so we use this helper to achieve it.\n+ */\n+class ContextCarrierHelper {\n+\n+    static void tryInjectContext() {\n+        String operationName = getOperationName();\n+        if (operationName == null) {\n+            return;\n+        }\n+        String peer = getPeerHost();\n+        if (peer == null) {\n+            return;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MDU5Mw=="}, "originalCommit": {"oid": "3ad0d49eda45e3c86d6f98a579910941d9e5abfe"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4387, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}