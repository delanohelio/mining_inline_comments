{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NjA5NDg2", "number": 5678, "title": "Fix application start duration log \"Failed to load class org.slf4j.impl.StaticLoggerBinder.\"", "bodyText": "Please answer these questions before submitting a pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n\n\n\nBug fix\n\nBug description.\nFix application start duration log \"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\" when use kafka reporter. because kafka reporter use slf4j-api, but no implementor for slf4j.\nHow to fix?\nkafka client will log some message by slf4j-api,but no org.slf4j.impl.StaticLoggerBinder implementor for slf4j-api, add org.slf4j.impl.StaticLoggerBinder implementor , so we can rewrite kafka log to skywalking log.\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.", "createdAt": "2020-10-16T06:06:19Z", "url": "https://github.com/apache/skywalking/pull/5678", "merged": true, "mergeCommit": {"oid": "06bec028695637f60dc8dda68498587018f0cf6c"}, "closed": true, "closedAt": "2020-10-17T01:44:43Z", "author": {"login": "zifeihan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS_70pAH2gAyNTA0NjA5NDg2OmE3NGU3MjFlMGZkNjUwOTEzMTc1ZWM2M2M5ZTM5MzIxNjY5ZGRhM2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTHoApAFqTUxMDU0OTA2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a74e721e0fd650913175ec63c9e39321669dda3e", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/a74e721e0fd650913175ec63c9e39321669dda3e", "committedDate": "2020-10-16T05:57:14Z", "message": "Fix application start duration log \"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\" when use kafka reporter. because kafka reporter use slf4j-api, but no implementor for slf4j."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjAxMTQw", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510201140", "createdAt": "2020-10-16T07:00:10Z", "commit": {"oid": "a74e721e0fd650913175ec63c9e39321669dda3e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzowMDoxMVrOHiqFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzowMjowNVrOHiqJQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMzIxOA==", "bodyText": "should be log.info(t, msg); ?", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506103218", "createdAt": "2020-10-16T07:00:11Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/dependencies/org/slf4j/impl/Slf4jLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.dependencies.org.slf4j.impl;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ * simple adapter {@link Logger}\n+ */\n+public class Slf4jLoggerAdapter implements Logger {\n+\n+    private final ILog log;\n+    private final String name;\n+\n+    public Slf4jLoggerAdapter(ILog log, String name) {\n+        this.log = log;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(final Marker marker) {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        log.error(t, msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74e721e0fd650913175ec63c9e39321669dda3e"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMzM0OA==", "bodyText": "log.info(...) ?", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506103348", "createdAt": "2020-10-16T07:00:31Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/dependencies/org/slf4j/impl/Slf4jLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.dependencies.org.slf4j.impl;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ * simple adapter {@link Logger}\n+ */\n+public class Slf4jLoggerAdapter implements Logger {\n+\n+    private final ILog log;\n+    private final String name;\n+\n+    public Slf4jLoggerAdapter(ILog log, String name) {\n+        this.log = log;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(final Marker marker) {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        log.error(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(final Marker marker) {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg, final Throwable t) {\n+        log.error(t, msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74e721e0fd650913175ec63c9e39321669dda3e"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwNDEzMQ==", "bodyText": "still need to delegate ILog", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506104131", "createdAt": "2020-10-16T07:02:05Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/optional-reporter-plugins/kafka-reporter-plugin/src/main/java/org/apache/skywalking/apm/agent/dependencies/org/slf4j/impl/Slf4jLoggerAdapter.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.dependencies.org.slf4j.impl;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+/**\n+ * simple adapter {@link Logger}\n+ */\n+public class Slf4jLoggerAdapter implements Logger {\n+\n+    private final ILog log;\n+    private final String name;\n+\n+    public Slf4jLoggerAdapter(ILog log, String name) {\n+        this.log = log;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String format, final Object... arguments) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isTraceEnabled(final Marker marker) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String format, final Object... argArray) {\n+\n+    }\n+\n+    @Override\n+    public void trace(final Marker marker, final String msg, final Throwable t) {\n+\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled() {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isDebugEnabled(final Marker marker) {\n+        return log.isDebugEnable();\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg) {\n+        log.debug(msg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg) {\n+        log.debug(format, arg);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.debug(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String format, final Object... arguments) {\n+        log.debug(format, arguments);\n+    }\n+\n+    @Override\n+    public void debug(final Marker marker, final String msg, final Throwable t) {\n+        log.debug(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled() {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final String msg, final Throwable t) {\n+        log.error(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isInfoEnabled(final Marker marker) {\n+        return log.isInfoEnable();\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg) {\n+        log.info(msg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg) {\n+        log.info(format, arg);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.info(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String format, final Object... arguments) {\n+        log.info(format, arguments);\n+    }\n+\n+    @Override\n+    public void info(final Marker marker, final String msg, final Throwable t) {\n+        log.error(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled() {\n+        return log.isWarnEnable();\n+    }\n+\n+    @Override\n+    public void warn(final String msg) {\n+        log.warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(final String format, final Object arg) {\n+        log.warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(final String format, final Object... arguments) {\n+        log.warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(final String format, final Object arg1, final Object arg2) {\n+        log.warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(final String msg, final Throwable t) {\n+        log.warn(t, msg);\n+    }\n+\n+    @Override\n+    public boolean isWarnEnabled(final Marker marker) {\n+        return log.isWarnEnable();\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String msg) {\n+        log.warn(msg);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String format, final Object arg) {\n+        log.warn(format, arg);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String format, final Object arg1, final Object arg2) {\n+        log.warn(format, arg1, arg2);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String format, final Object... arguments) {\n+        log.warn(format, arguments);\n+    }\n+\n+    @Override\n+    public void warn(final Marker marker, final String msg, final Throwable t) {\n+        log.warn(msg, t);\n+    }\n+\n+    @Override\n+    public boolean isErrorEnabled() {\n+        return log.isErrorEnable();\n+    }\n+\n+    @Override\n+    public void error(final String msg) {\n+        log.error(msg);\n+    }\n+\n+    @Override\n+    public void error(final String format, final Object arg) {\n+\n+    }\n+\n+    @Override\n+    public void error(final String format, final Object arg1, final Object arg2) {\n+\n+    }\n+\n+    @Override\n+    public void error(final String format, final Object... arguments) {\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74e721e0fd650913175ec63c9e39321669dda3e"}, "originalPosition": 306}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/dca3f4fd057eb739e922e19d69b4eb35be5f75a0", "committedDate": "2020-10-16T08:21:10Z", "message": "Polishing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjgwMTMy", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510280132", "createdAt": "2020-10-16T08:56:57Z", "commit": {"oid": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjg1NzI3", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510285727", "createdAt": "2020-10-16T09:04:14Z", "commit": {"oid": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTowNDoxNFrOHivzIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTowNDoxNFrOHivzIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE5Njc2OA==", "bodyText": "Please help with updating logging.level in the agent setup doc. Add all available values in the documentation.", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506196768", "createdAt": "2020-10-16T09:04:14Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/logging/core/LogLevel.java", "diffHunk": "@@ -19,5 +19,5 @@\n package org.apache.skywalking.apm.agent.core.logging.core;\n \n public enum LogLevel {\n-    DEBUG, INFO, WARN, ERROR, OFF\n+    TRACE, DEBUG, INFO, WARN, ERROR, OFF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjkyMDI5", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510292029", "createdAt": "2020-10-16T09:12:32Z", "commit": {"oid": "dca3f4fd057eb739e922e19d69b4eb35be5f75a0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e681425fdbe734fbf0991b208f5d2a906c8f1038", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/e681425fdbe734fbf0991b208f5d2a906c8f1038", "committedDate": "2020-10-16T10:36:29Z", "message": "Adapter slf4j Logger of agent used to skywalking agent Logger."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba300c629b2ee64acb8213326b3276b6b2a436af", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/ba300c629b2ee64acb8213326b3276b6b2a436af", "committedDate": "2020-10-16T12:43:23Z", "message": "Merge branch 'master' into hanfei"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDg0NjE2", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510484616", "createdAt": "2020-10-16T13:44:52Z", "commit": {"oid": "ba300c629b2ee64acb8213326b3276b6b2a436af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0NDo1M1rOHi-i0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0NDo1M1rOHi-i0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQzODM1NA==", "bodyText": "Why this class needs to locate in org.apache.skywalking.apm.dependencies.org.slf4j.impl? I think I have asked you to place this in the org.apache.skywalking.apm.agent.core.logging.adaptor", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506438354", "createdAt": "2020-10-16T13:44:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/dependencies/org/slf4j/impl/StaticLoggerBinder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.dependencies.org.slf4j.impl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba300c629b2ee64acb8213326b3276b6b2a436af"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTI3OTcx", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510527971", "createdAt": "2020-10-16T14:31:50Z", "commit": {"oid": "ba300c629b2ee64acb8213326b3276b6b2a436af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDozMTo1MFrOHjBmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDozMTo1MFrOHjBmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4ODMyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * SLF4J LoggerFactoryBinder implementation using Log4j. This class is part of the required classes used to specify an\n          \n          \n            \n             * SLF4J logger provider implementation.\n          \n          \n            \n             * The slf4j-api would try to load org.slf4j.impl.StaticLoggerBinder internal. In the agent core, we add our own implementation\n          \n          \n            \n             * for bridging to SkyWalking internal log component. \n          \n          \n            \n             * Therefore, logs of netty/grpc/kafka(agent shaded components) would output through the SkyWalking's log.\n          \n          \n            \n             *\n          \n          \n            \n             * Don't move this class to any other package, its package must be as same as the shaded org.apache.skywalking.apm.dependencies.org.slf4j.impl", "url": "https://github.com/apache/skywalking/pull/5678#discussion_r506488320", "createdAt": "2020-10-16T14:31:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/dependencies/org/slf4j/impl/StaticLoggerBinder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.dependencies.org.slf4j.impl;\n+\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.spi.LoggerFactoryBinder;\n+\n+/**\n+ * SLF4J LoggerFactoryBinder implementation using Log4j. This class is part of the required classes used to specify an\n+ * SLF4J logger provider implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba300c629b2ee64acb8213326b3276b6b2a436af"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ad4c50b5bf62c59d29ae55d6ced567de835f9c", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/76ad4c50b5bf62c59d29ae55d6ced567de835f9c", "committedDate": "2020-10-16T14:41:56Z", "message": "Make the comments more accurate."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTQ5MDY0", "url": "https://github.com/apache/skywalking/pull/5678#pullrequestreview-510549064", "createdAt": "2020-10-16T14:54:50Z", "commit": {"oid": "76ad4c50b5bf62c59d29ae55d6ced567de835f9c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1524, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}