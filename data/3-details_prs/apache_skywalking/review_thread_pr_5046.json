{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTI4NjM4", "number": 5046, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NToyN1rOEL-0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxMjoxM1rOEMTdng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk5MDE3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/HealthQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NToyN1rOGt05kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NToyN1rOGt05kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNTgxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class HealthQuery  implements GraphQLQueryResolver {\n          \n          \n            \n            public class HealthQuery implements GraphQLQueryResolver {", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r450705811", "createdAt": "2020-07-07T08:45:27Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/HealthQuery.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.query.graphql.resolver;\n+\n+import com.coxautodev.graphql.tools.GraphQLQueryResolver;\n+import java.util.Optional;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.skywalking.oap.server.core.query.type.HealthStatus;\n+import org.apache.skywalking.oap.server.health.checker.module.HealthCheckerModule;\n+import org.apache.skywalking.oap.server.health.checker.provider.HealthQueryService;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+\n+@RequiredArgsConstructor\n+public class HealthQuery  implements GraphQLQueryResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk5NTg0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/HealthStatus.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0Njo1OVrOGt09Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDo1MDozN1rOGvBlQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjcxNA==", "bodyText": "score rule should be added as comments.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r450706714", "createdAt": "2020-07-07T08:46:59Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/HealthStatus.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class HealthStatus {\n+    private int score;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1OTMyOQ==", "bodyText": "explained it in GraphQL schema, where users access normally.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451959329", "createdAt": "2020-07-09T04:39:25Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/HealthStatus.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class HealthStatus {\n+    private int score;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjcxNA=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2MjE3Ng==", "bodyText": "I know it is there, and in the doc too. But this field should be highlight, and the rule should not be changed randomly. The comments help us to track if change happens.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451962176", "createdAt": "2020-07-09T04:50:37Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/HealthStatus.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Getter\n+@Setter\n+public class HealthStatus {\n+    private int score;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjcxNA=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAyMDkyOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-health-check.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1MzozM1rOGt1MbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDo0MToyNFrOGvBb-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDYzNw==", "bodyText": "I think this is a design issue. Any module should not depend on another module's implementation. Otherwise, you are breaking the design principle.\nFrom the codes level, I think you should say, the user needs to activate the telemetry module, meaning, the provider should not be none or -.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r450710637", "createdAt": "2020-07-07T08:53:33Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-health-check.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Health Check\n+\n+Health check intends to provide a unique approach to check the healthy status of OAP server. It includes the health status\n+of modules, GraphQL and gRPC services readiness.\n+\n+## Health Checker Module.\n+\n+Health Checker module could solute how to observe the health status of modules. We can active it by below:\n+```yaml\n+health-checker:\n+  selector: ${SW_HEALTH_CHECKER:default}\n+  default:\n+    checkIntervalSeconds: ${SW_HEALTH_CHECKER_INTERVAL_SECONDS:5}\n+```\n+Notice, we should enable `prometheus` telemetry at the same time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTE1Ng==", "bodyText": "+1 \"Any module should not depend on another module's implementation. \"", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451239156", "createdAt": "2020-07-08T02:00:28Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-health-check.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Health Check\n+\n+Health check intends to provide a unique approach to check the healthy status of OAP server. It includes the health status\n+of modules, GraphQL and gRPC services readiness.\n+\n+## Health Checker Module.\n+\n+Health Checker module could solute how to observe the health status of modules. We can active it by below:\n+```yaml\n+health-checker:\n+  selector: ${SW_HEALTH_CHECKER:default}\n+  default:\n+    checkIntervalSeconds: ${SW_HEALTH_CHECKER_INTERVAL_SECONDS:5}\n+```\n+Notice, we should enable `prometheus` telemetry at the same time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDYzNw=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1OTgwMg==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451959802", "createdAt": "2020-07-09T04:41:24Z", "author": {"login": "hanahmily"}, "path": "docs/en/setup/backend/backend-health-check.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Health Check\n+\n+Health check intends to provide a unique approach to check the healthy status of OAP server. It includes the health status\n+of modules, GraphQL and gRPC services readiness.\n+\n+## Health Checker Module.\n+\n+Health Checker module could solute how to observe the health status of modules. We can active it by below:\n+```yaml\n+health-checker:\n+  selector: ${SW_HEALTH_CHECKER:default}\n+  default:\n+    checkIntervalSeconds: ${SW_HEALTH_CHECKER_INTERVAL_SECONDS:5}\n+```\n+Notice, we should enable `prometheus` telemetry at the same time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMDYzNw=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAyNDg1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1NDozMVrOGt1OuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDo0MTo1OVrOGvBcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMTIyNQ==", "bodyText": "Why always 1? According to your doc, 1 should mean unhealthy? I think you missed some codes.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r450711225", "createdAt": "2020-07-07T08:54:31Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java", "diffHunk": "@@ -131,6 +135,9 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n \n     @Override\n     public void start() throws ServiceNotProvidedException, ModuleStartException {\n+        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n+        GaugeMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n+        healthChecker.setValue(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MjEyNg==", "bodyText": "Why always 1? According to your doc, 1 should mean unhealthy? I think you missed some codes.\n\nThis may be the initial status \"unhealthy\", and after the connection is established (line 142-145), the value should be set to 0, so I reckon the line at 149 should be healthChecker.setValue(0);? @hanahmily", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451242126", "createdAt": "2020-07-08T02:11:58Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java", "diffHunk": "@@ -131,6 +135,9 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n \n     @Override\n     public void start() throws ServiceNotProvidedException, ModuleStartException {\n+        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n+        GaugeMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n+        healthChecker.setValue(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMTIyNQ=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1OTk5Nw==", "bodyText": "Fixed with an asyn health check scheduler.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451959997", "createdAt": "2020-07-09T04:41:59Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java", "diffHunk": "@@ -131,6 +135,9 @@ public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n \n     @Override\n     public void start() throws ServiceNotProvidedException, ModuleStartException {\n+        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n+        GaugeMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n+        healthChecker.setValue(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMTIyNQ=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAzMzQwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/MetricsCreator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo1Njo0NFrOGt1UBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNDo0OTozMFrOGvBkGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMjU4Mg==", "bodyText": "I don't think health guage requires the tag/value(s).", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r450712582", "createdAt": "2020-07-07T08:56:44Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/MetricsCreator.java", "diffHunk": "@@ -42,4 +46,30 @@\n      */\n     HistogramMetrics createHistogramMetric(String name, String tips, MetricsTag.Keys tagKeys,\n         MetricsTag.Values tagValues, double... buckets);\n+\n+    /**\n+     * Create a Health Check gauge.\n+     */\n+    default GaugeMetrics createHealthCheckerGauge(String name, MetricsTag.Keys tagKeys, MetricsTag.Values tagValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2MDYwNA==", "bodyText": "If some modules want to provide more information or details about what's going on inside. the tags might be a more property place to show them up.", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451960604", "createdAt": "2020-07-09T04:44:33Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/MetricsCreator.java", "diffHunk": "@@ -42,4 +46,30 @@\n      */\n     HistogramMetrics createHistogramMetric(String name, String tips, MetricsTag.Keys tagKeys,\n         MetricsTag.Values tagValues, double... buckets);\n+\n+    /**\n+     * Create a Health Check gauge.\n+     */\n+    default GaugeMetrics createHealthCheckerGauge(String name, MetricsTag.Keys tagKeys, MetricsTag.Values tagValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMjU4Mg=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk2MTg4MQ==", "bodyText": "Show this on the health check query?", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451961881", "createdAt": "2020-07-09T04:49:30Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-telemetry/telemetry-api/src/main/java/org/apache/skywalking/oap/server/telemetry/api/MetricsCreator.java", "diffHunk": "@@ -42,4 +46,30 @@\n      */\n     HistogramMetrics createHistogramMetric(String name, String tips, MetricsTag.Keys tagKeys,\n         MetricsTag.Values tagValues, double... buckets);\n+\n+    /**\n+     * Create a Health Check gauge.\n+     */\n+    default GaugeMetrics createHealthCheckerGauge(String name, MetricsTag.Keys tagKeys, MetricsTag.Values tagValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcxMjU4Mg=="}, "originalCommit": {"oid": "62e94109b049554585ceec499d44e7450cdf6708"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzM3MjQ2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxMjoxM1rOGuVo0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxMjoxM1rOGuVo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MjE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    healthChecker.setValue(1);\n          \n          \n            \n                    healthChecker.setValue(0);", "url": "https://github.com/apache/skywalking/pull/5046#discussion_r451242194", "createdAt": "2020-07-08T02:12:13Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java", "diffHunk": "@@ -139,6 +146,7 @@ public void start() throws ServiceNotProvidedException, ModuleStartException {\n         } catch (StorageException e) {\n             throw new ModuleStartException(e.getMessage(), e);\n         }\n+        healthChecker.setValue(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f97e24a2057282b9fd16cce65ae758ad953ec90"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 64, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}