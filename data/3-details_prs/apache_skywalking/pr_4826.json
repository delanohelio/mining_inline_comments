{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDAwMzM5", "number": 4826, "title": "fix ClassCastException in KafkaProducerInterceptor", "bodyText": "pre check kafka CallBack instance can or not convert EnhancedInstance, when need to cast Callback instance to EnhancedInstance.\nPlease answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#4825\n\n\n\nBug fix\n\n\nBug description.\n\n\nHow to fix?\npre check kafka CallBack instance can or not convert EnhancedInstance, when need to cast Callback instance to EnhancedInstance.\n\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.", "createdAt": "2020-05-26T05:56:45Z", "url": "https://github.com/apache/skywalking/pull/4826", "merged": true, "mergeCommit": {"oid": "e8e9153d74f6a5e6cf50b9abb27b85b009c0a165"}, "closed": true, "closedAt": "2020-05-31T00:12:03Z", "author": {"login": "zifeihan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABck-DvEgH2gAyNDIzMDAwMzM5OmY5ZTkxYTdkOGI2OGVmOTVjNGMzMmE0ODI2NDlkNTg2Y2I4NWUwNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmWaPvgFqTQyMTQwMjU0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/f9e91a7d8b68ef95c4c32a482649d586cb85e074", "committedDate": "2020-05-26T05:45:33Z", "message": "fix bug: https://github.com/apache/skywalking/issues/4825\npre check kafka CallBack instance can or not convert EnhancedInstance, when need to cast Callback instance to EnhancedInstance."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDA1MDYz", "url": "https://github.com/apache/skywalking/pull/4826#pullrequestreview-418005063", "createdAt": "2020-05-26T06:34:46Z", "commit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozNDo0NlrOGaQY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozODo1MFrOGaQe8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDY5OQ==", "bodyText": "We don't add this link, once we did that, the links are everywhere.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430184699", "createdAt": "2020-05-26T06:34:46Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NjIyNg==", "bodyText": "If you skip this, the cast exception is gone, yes. But, the callback will not be traced, right? I think you should create a new function to delegate the existing parameter, which could propagate the context and continue the trace in the callback invocation. WDYT?", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430186226", "createdAt": "2020-05-26T06:38:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825\n+        //when use lambda expression, not to generate inner class,\n+        //    and not to trigger kafka CallBack class define, so allArguments[1] can't to cast EnhancedInstance\n+        Object shouldCallbackInstance = allArguments[1];\n+        if (null != shouldCallbackInstance && shouldCallbackInstance instanceof EnhancedInstance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/8d784d840136f9695a89fa6c50e399dd4af3cd0d", "committedDate": "2020-05-26T09:44:01Z", "message": "fix bug: https://github.com/apache/skywalking/issues/4825\ntrace kafka CallBack through proxy, when Callback not is EnhancedInstance instance."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MjM1OTgz", "url": "https://github.com/apache/skywalking/pull/4826#pullrequestreview-418235983", "createdAt": "2020-05-26T12:12:53Z", "commit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxMjo1M1rOGabang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxNzozMVrOGabkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTM0Mg==", "bodyText": "This should be static.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365342", "createdAt": "2020-05-26T12:12:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTU5NQ==", "bodyText": "Why this static?", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365595", "createdAt": "2020-05-26T12:13:20Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTk2Mw==", "bodyText": "Why use reflect? You should be able to typecast in the interceptor.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365963", "createdAt": "2020-05-26T12:14:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzI5NQ==", "bodyText": "In this method, why so many try-catch? Super confusing about what you are doing. Could you explain?", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430367295", "createdAt": "2020-05-26T12:16:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void onCompletion(RecordMetadata metadata, Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzgyNQ==", "bodyText": "This class should just make sure the original callback being traced, but currently, I can't follow your point.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430367825", "createdAt": "2020-05-26T12:17:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void onCompletion(RecordMetadata metadata, Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzI5NQ=="}, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a17ba7c6d73a4311ec9ca42ddd272b2734155340", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/a17ba7c6d73a4311ec9ca42ddd272b2734155340", "committedDate": "2020-05-27T00:17:09Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/fef869934c7c19eb010dc3560b02baa2dc991fb1", "committedDate": "2020-05-28T16:48:31Z", "message": "Polishing kafka Callback trace."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTcxNTA4", "url": "https://github.com/apache/skywalking/pull/4826#pullrequestreview-420571508", "createdAt": "2020-05-29T00:05:30Z", "commit": {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTozMVrOGcKtGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTo0NlrOGcKtXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODY5Nw==", "bodyText": "As you have changed the scenario, you should change the expected data file, otherwise, all tests break.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r432188697", "createdAt": "2020-05-29T00:05:31Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "diffHunk": "@@ -68,12 +68,10 @@ public String kafkaCase() {\n         wrapProducer(producer -> {\n             ProducerRecord<String, String> record = new ProducerRecord<String, String>(topicName, \"testKey\", Integer.toString(1));\n             record.headers().add(\"TEST\", \"TEST\".getBytes());\n-            producer.send(record, new Callback() {\n-                @Override\n-                public void onCompletion(RecordMetadata metadata, Exception exception) {\n-                    logger.info(\"send success metadata={}\", metadata);\n-                }\n-            });\n+            Callback callback = (metadata, exception) -> {\n+                logger.info(\"send success metadata={}\", metadata);\n+            };\n+            producer.send(record, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODc2NA==", "bodyText": "Same here.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r432188764", "createdAt": "2020-05-29T00:05:46Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "diffHunk": "@@ -134,14 +132,12 @@ public void run() {\n                         ProducerRecord<String, String> record = new ProducerRecord<String, String>(\"check\", \"checkKey\", Integer\n                             .toString(1));\n                         record.headers().add(\"CHECK\", \"CHECK\".getBytes());\n-                        producer.send(record, new Callback() {\n-                            @Override\n-                            public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n-                                if (isNull(e)) {\n-                                    KAFKA_STATUS = true;\n-                                }\n+                        Callback callback = (metadata, e) -> {\n+                            if (isNull(e)) {\n+                                KAFKA_STATUS = true;\n                             }\n-                        });\n+                        };\n+                        producer.send(record, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "892e44aa18fb0324f5ac9817e966e72c5cfd66a2", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/892e44aa18fb0324f5ac9817e966e72c5cfd66a2", "committedDate": "2020-05-29T00:06:23Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef5c8617f8c938466dc4ee7749131dc6841faa7", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/eef5c8617f8c938466dc4ee7749131dc6841faa7", "committedDate": "2020-05-30T10:32:29Z", "message": "Polishing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8009845f396e89469dacb87f4badc2874d7c862", "author": {"user": {"login": "zifeihan", "name": "zifeihan"}}, "url": "https://github.com/apache/skywalking/commit/f8009845f396e89469dacb87f4badc2874d7c862", "committedDate": "2020-05-30T10:35:17Z", "message": "Merge remote-tracking branch 'origin/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "831b6e741ece9cfa4f3afdb558244c596f55c9a2", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/831b6e741ece9cfa4f3afdb558244c596f55c9a2", "committedDate": "2020-05-30T12:38:38Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDAyNTQx", "url": "https://github.com/apache/skywalking/pull/4826#pullrequestreview-421402541", "createdAt": "2020-05-30T12:41:47Z", "commit": {"oid": "831b6e741ece9cfa4f3afdb558244c596f55c9a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2192, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}