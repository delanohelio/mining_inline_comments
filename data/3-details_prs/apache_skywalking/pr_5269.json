{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDE0OTM2", "number": 5269, "title": "Support !=, like filter expressions in OAL", "bodyText": "And slightly refactor the matchers\nresolves #5234", "createdAt": "2020-08-08T10:27:19Z", "url": "https://github.com/apache/skywalking/pull/5269", "merged": true, "mergeCommit": {"oid": "ecc18b9be3328a0d85356d3bb2329eff4e09b13f"}, "closed": true, "closedAt": "2020-08-11T01:37:22Z", "author": {"login": "kezhenxu94"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc82eciABqjM2MzU1NDgyMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9qziVAH2gAyNDY1MDE0OTM2Ojg5MWRjYzU5ZDI4NDY3MmU2ZWU0ODZlY2ZhMzMzODNiM2Y4NGIzYmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "6662df440bb1ba572499c0256c3a9d347ec882f1", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/6662df440bb1ba572499c0256c3a9d347ec882f1", "committedDate": "2020-08-08T10:42:16Z", "message": "Feature: support !=, like filter expressions\n\nAnd slightly refactor the matchers\n\nresolves https://github.com/apache/skywalking/issues/5234"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "6662df440bb1ba572499c0256c3a9d347ec882f1", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/6662df440bb1ba572499c0256c3a9d347ec882f1", "committedDate": "2020-08-08T10:42:16Z", "message": "Feature: support !=, like filter expressions\n\nAnd slightly refactor the matchers\n\nresolves https://github.com/apache/skywalking/issues/5234"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c24a1503d87cb22599dcbb0e5cc9005dc03cb624", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/c24a1503d87cb22599dcbb0e5cc9005dc03cb624", "committedDate": "2020-08-08T14:35:28Z", "message": "Merge branch 'master' into oal/filter-expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODQ1MzIw", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-463845320", "createdAt": "2020-08-09T05:49:43Z", "commit": {"oid": "c24a1503d87cb22599dcbb0e5cc9005dc03cb624"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0OTo0M1rOG94Zhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0OTo0M1rOG94Zhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU0MDM1OA==", "bodyText": "The start method is called more than once", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467540358", "createdAt": "2020-08-09T05:49:43Z", "author": {"login": "arugal"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java", "diffHunk": "@@ -150,6 +151,12 @@ public void start(ClassLoader currentClassLoader) throws ModuleStartException, O\n             throw new ModuleStartException(\"load metrics functions error.\", e);\n         }\n \n+        try {\n+            FilterMatchers.INSTANCE.init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a1503d87cb22599dcbb0e5cc9005dc03cb624"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec058dc11430f49ca3cca5f163b6ca90bed0b95a", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/ec058dc11430f49ca3cca5f163b6ca90bed0b95a", "committedDate": "2020-08-09T08:22:00Z", "message": "Merge branch 'master' into oal/filter-expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f094aea1cd853933133cacc6199d48a4c86598", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/e7f094aea1cd853933133cacc6199d48a4c86598", "committedDate": "2020-08-09T08:26:27Z", "message": "Avoid initializing multiple times"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/9350989673934f4b309e49c6edea405bb5123eec", "committedDate": "2020-08-09T08:56:43Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODU3MDUx", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-463857051", "createdAt": "2020-08-09T09:10:29Z", "commit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToxMDoyOVrOG95fNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToxMDoyOVrOG95fNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1ODE5Ng==", "bodyText": "Please make this as lazy initialization in the #find method. The static block is not recommended.", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467558196", "createdAt": "2020-08-09T09:10:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/MetricsHolder.java", "diffHunk": "@@ -26,10 +26,19 @@\n import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n \n+@SuppressWarnings(\"UnstableApiUsage\")\n public class MetricsHolder {\n-    private static Map<String, Class<? extends Metrics>> REGISTER = new HashMap<>();\n+    private static final Map<String, Class<? extends Metrics>> REGISTER = new HashMap<>();\n \n-    public static void init() throws IOException {\n+    static {\n+        try {\n+            init();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"load metrics functions error.\", e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODU3MjE1", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-463857215", "createdAt": "2020-08-09T09:13:24Z", "commit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToxMzoyNFrOG95gLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToxMzoyNFrOG95gLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1ODQ0NQ==", "bodyText": "like should support %xxx%, right?", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467558445", "createdAt": "2020-08-09T09:13:24Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/LikeMatch.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics.expression;\n+\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.FilterMatcher;\n+\n+@FilterMatcher\n+public class LikeMatch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODU4MDkx", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-463858091", "createdAt": "2020-08-09T09:27:46Z", "commit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToyNzo0NlrOG95llA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToyNzo0NlrOG95llA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1OTgyOA==", "bodyText": "According to the usage and the comments, why just name this as isBoolean? Or, I prefer to create a new BooleanValueFilterMatcher annotation?", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467559828", "createdAt": "2020-08-09T09:27:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/FilterMatcher.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.expression.BooleanMatch;\n+\n+/**\n+ * Classes annotated with {@code FilterMatcher} are processors of the expressions in {@code filter} of the OAL script.\n+ * Take {@link BooleanMatch} as an example.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FilterMatcher {\n+    /**\n+     * @return the operator name(s) defined in the .g4 files, such as {@code lessEqualMatch} and {@code notEqualMatch},\n+     * the default value is the name of the class annotated with {@link FilterMatcher}, with the first letter being\n+     * lowercase.\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * @return the type of the filter operand, which decides the getter of the operands, i.e. getter of {@code Boolean}\n+     * and {@code boolean} type is {@code isArg}, otherwise {@code getArg}.\n+     */\n+    Class<?> type() default Object.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzODU4MjEz", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-463858213", "createdAt": "2020-08-09T09:29:47Z", "commit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToyOTo0N1rOG95mPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOToyOTo0N1rOG95mPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU1OTk5Nw==", "bodyText": "Replacing getType() to isBoolean seems more clear.", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467559997", "createdAt": "2020-08-09T09:29:47Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/DeepAnalysis.java", "diffHunk": "@@ -45,45 +45,22 @@ public AnalysisResult analysis(AnalysisResult result) {\n         List<ConditionExpression> expressions = result.getFilterExpressionsParserResult();\n         if (expressions != null && expressions.size() > 0) {\n             for (ConditionExpression expression : expressions) {\n-                Expression filterExpression = new Expression();\n-                if (\"booleanMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"EqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toIsMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"stringMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"EqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"greaterMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"GreaterMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"lessMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"LessMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"greaterEqualMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"GreaterEqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else if (\"lessEqualMatch\".equals(expression.getExpressionType())) {\n-                    filterExpression.setExpressionObject(\"LessEqualMatch\");\n-                    filterExpression.setLeft(\"source.\" + ClassMethodUtil.toGetMethod(expression.getAttribute()) + \"()\");\n-                    filterExpression.setRight(expression.getValue());\n-                    result.addFilterExpressions(filterExpression);\n-                } else {\n-                    throw new IllegalArgumentException(\"filter expression [\" + expression.getExpressionType() + \"] not found\");\n-                }\n+                final FilterMatchers.MatcherInfo matcherClass = FilterMatchers.INSTANCE.find(expression.getExpressionType());\n+\n+                final String getter = matcherClass.getType() == boolean.class || matcherClass.getType() == Boolean.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9350989673934f4b309e49c6edea405bb5123eec"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f33730b1fa789c788338fd423a1806b5762148fa", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/f33730b1fa789c788338fd423a1806b5762148fa", "committedDate": "2020-08-10T14:15:13Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0750054d99ae9871bb616e4c7d6e7f87c4312ec4", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/0750054d99ae9871bb616e4c7d6e7f87c4312ec4", "committedDate": "2020-08-10T14:15:30Z", "message": "Merge remote-tracking branch 'origin/master' into oal/filter-expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/112f150a4dfd01ed795ca31b46203de25d0e9881", "committedDate": "2020-08-10T14:47:18Z", "message": "Add missing license header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzExMTk2", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-464311196", "createdAt": "2020-08-10T15:02:22Z", "commit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowMjoyMlrOG-SdBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowMjoyMlrOG-SdBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NzIzNw==", "bodyText": "Which unstable API?", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467967237", "createdAt": "2020-08-10T15:02:22Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/FilterMatchers.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oal.rt.parser;\n+\n+import com.google.common.reflect.ClassPath;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.BooleanValueFilterMatcher;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.FilterMatcher;\n+\n+@SuppressWarnings(\"UnstableApiUsage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzE2MDIy", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-464316022", "createdAt": "2020-08-10T15:07:39Z", "commit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowNzozOVrOG-SrGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowNzozOVrOG-SrGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MDg0MQ==", "bodyText": "AFAIK, IllegalArgumentException is a RuntimeException. Why need this?", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467970841", "createdAt": "2020-08-10T15:07:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/MetricsHolder.java", "diffHunk": "@@ -45,13 +48,16 @@ public static void init() throws IOException {\n         }\n     }\n \n-    public static Class<? extends Metrics> find(\n-        String functionName) {\n-        String func = functionName;\n-        Class<? extends Metrics> metricsClass = REGISTER.get(\n-            func);\n+    @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzE3NTIy", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-464317522", "createdAt": "2020-08-10T15:09:21Z", "commit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowOToyMVrOG-Sv2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTowOToyMVrOG-Sv2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3MjA1Ng==", "bodyText": "Do you forget to delete this?", "url": "https://github.com/apache/skywalking/pull/5269#discussion_r467972056", "createdAt": "2020-08-10T15:09:21Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/annotation/FilterMatcher.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.expression.BooleanMatch;\n+\n+/**\n+ * Classes annotated with {@code FilterMatcher} are processors of the expressions in {@code filter} of the OAL script.\n+ * Take {@link BooleanMatch} as an example.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FilterMatcher {\n+    /**\n+     * @return the operator name(s) defined in the .g4 files, such as {@code lessEqualMatch} and {@code notEqualMatch},\n+     * the default value is the name of the class annotated with {@link FilterMatcher}, with the first letter being\n+     * lowercase.\n+     */\n+    String[] value() default {};\n+\n+    /**\n+     * @return the type of the filter operand, which decides the getter of the operands, i.e. getter of {@code Boolean}\n+     * and {@code boolean} type is {@code isArg}, otherwise {@code getArg}.\n+     */\n+    Class<?> type() default Object.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112f150a4dfd01ed795ca31b46203de25d0e9881"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7776beb0f355bdf0bd93494b926c897a4d3f8eda", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/7776beb0f355bdf0bd93494b926c897a4d3f8eda", "committedDate": "2020-08-10T15:26:28Z", "message": "Remove unused codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzQ2OTIz", "url": "https://github.com/apache/skywalking/pull/5269#pullrequestreview-464346923", "createdAt": "2020-08-10T15:37:17Z", "commit": {"oid": "7776beb0f355bdf0bd93494b926c897a4d3f8eda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891dcc59d284672e6ee486ecfa33383b3f84b3bd", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/891dcc59d284672e6ee486ecfa33383b3f84b3bd", "committedDate": "2020-08-10T23:27:46Z", "message": "Merge branch 'master' into oal/filter-expression"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1871, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}