{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODk3MjE4", "number": 5690, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjoxMDowMVrOEvSEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjoyNzo1MVrOE1omOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDE0NTc5OnYy", "diffSide": "RIGHT", "path": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjoxMDowMVrOHkLNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjoxOTowMlrOHkLiTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5NDQ0Nw==", "bodyText": "This one should be added to the skywalking/oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r507694447", "createdAt": "2020-10-19T12:10:01Z", "author": {"login": "kezhenxu94"}, "path": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java", "diffHunk": "@@ -185,4 +185,7 @@\n \n     public static final OfficialComponent THRIFT_CLIENT = new OfficialComponent(101, \"thrift-client\");\n \n+    public static final OfficialComponent ASYNC_HTTP_CLIENT = new OfficialComponent(102, \"AsyncHttpClient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1196f2bee879e61ebe4a95f923cd091182dd3ec6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5OTc5MA==", "bodyText": "OK,thanks.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r507699790", "createdAt": "2020-10-19T12:19:02Z", "author": {"login": "zhentaoJin"}, "path": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/trace/component/ComponentsDefine.java", "diffHunk": "@@ -185,4 +185,7 @@\n \n     public static final OfficialComponent THRIFT_CLIENT = new OfficialComponent(101, \"thrift-client\");\n \n+    public static final OfficialComponent ASYNC_HTTP_CLIENT = new OfficialComponent(102, \"AsyncHttpClient\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5NDQ0Nw=="}, "originalCommit": {"oid": "1196f2bee879e61ebe4a95f923cd091182dd3ec6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDAwNDU3OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/asynchttpclient-scenario/support-version.list", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToxMTowMFrOHsIerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjoyNjo1NFrOHseXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzODMxOQ==", "bodyText": "Is this the only supported version?", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r516038319", "createdAt": "2020-11-02T15:11:00Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/asynchttpclient-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.10.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544885691ed850a283b8fb854ebafb647290706a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0MDk0Mw==", "bodyText": "As you documented, you support 2.x, then should be 2.0, 2.1... 2.10.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r516040943", "createdAt": "2020-11-02T15:14:45Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/asynchttpclient-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.10.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzODMxOQ=="}, "originalCommit": {"oid": "544885691ed850a283b8fb854ebafb647290706a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5Njk0NA==", "bodyText": "Not only support this version, I will update the list of supported versions", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r516396944", "createdAt": "2020-11-03T02:26:54Z", "author": {"login": "zhentaoJin"}, "path": "test/plugin/scenarios/asynchttpclient-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.10.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzODMxOQ=="}, "originalCommit": {"oid": "544885691ed850a283b8fb854ebafb647290706a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTUwNzE5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/ExecuteInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToxNDoxNVrOHtPKqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOToyOTowOFrOHtPwGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NjQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ContextManager.activeSpan().errorOccurred().log(t);\n          \n          \n            \n                    ContextManager.activeSpan()..log(t);\n          \n      \n    \n    \n  \n\nI think I have reminded this? log includes the error default today.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517196459", "createdAt": "2020-11-04T09:14:15Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/ExecuteInterceptor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.asynchttpclient.Request;\n+import org.asynchttpclient.uri.Uri;\n+\n+public class ExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                             Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        final Request httpRequest = (Request) allArguments[0];\n+        final Uri requestUri = httpRequest.getUri();\n+\n+        AbstractSpan span = ContextManager.createExitSpan(\n+            \"AsyncHttpClient\" + requestUri.getPath(), requestUri.getHost() + \":\" + requestUri.getPort());\n+\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        ContextManager.inject(contextCarrier);\n+        span.setComponent(ComponentsDefine.ASYNC_HTTP_CLIENT);\n+        Tags.HTTP.METHOD.set(span, httpRequest.getMethod());\n+        Tags.URL.set(span, httpRequest.getUrl());\n+        SpanLayer.asHttp(span);\n+\n+        final HttpHeaders headers = httpRequest.getHeaders();\n+        CarrierItem next = contextCarrier.items();\n+        while (next.hasNext()) {\n+            next = next.next();\n+            headers.add(next.getHeadKey(), next.getHeadValue());\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68baed32da6ce1ec248180d11c8ed85f6bfcb40b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwNjA0Mg==", "bodyText": "this is my fault. i will fix it.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517206042", "createdAt": "2020-11-04T09:29:08Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/ExecuteInterceptor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.asynchttpclient.Request;\n+import org.asynchttpclient.uri.Uri;\n+\n+public class ExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                             Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        final Request httpRequest = (Request) allArguments[0];\n+        final Uri requestUri = httpRequest.getUri();\n+\n+        AbstractSpan span = ContextManager.createExitSpan(\n+            \"AsyncHttpClient\" + requestUri.getPath(), requestUri.getHost() + \":\" + requestUri.getPort());\n+\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        ContextManager.inject(contextCarrier);\n+        span.setComponent(ComponentsDefine.ASYNC_HTTP_CLIENT);\n+        Tags.HTTP.METHOD.set(span, httpRequest.getMethod());\n+        Tags.URL.set(span, httpRequest.getUrl());\n+        SpanLayer.asHttp(span);\n+\n+        final HttpHeaders headers = httpRequest.getHeaders();\n+        CarrierItem next = contextCarrier.items();\n+        while (next.hasNext()) {\n+            next = next.next();\n+            headers.add(next.getHeadKey(), next.getHeadValue());\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                              Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NjQ1OQ=="}, "originalCommit": {"oid": "68baed32da6ce1ec248180d11c8ed85f6bfcb40b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjMwMDEyOnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoyNDoyMFrOHt8tXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDoyNjoxM1rOHt8yQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MjYyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Make the asynchttpclient 2.x plugin to support collecting HTTP parameters.\n          \n          \n            \n            * Add the plugin for async-http-client 2.x", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517942623", "createdAt": "2020-11-05T10:24:20Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -14,6 +14,7 @@ Release Notes.\n * Make the Feign plugin to support Java 14\n * Make the okhttp3 plugin to support Java 14\n * Polish tracing context related codes.\n+* Make the asynchttpclient 2.x plugin to support collecting HTTP parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d78856032188562d4234ad48549ea73c95e7949"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0Mzg3Mg==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517943872", "createdAt": "2020-11-05T10:26:13Z", "author": {"login": "zhentaoJin"}, "path": "CHANGES.md", "diffHunk": "@@ -14,6 +14,7 @@ Release Notes.\n * Make the Feign plugin to support Java 14\n * Make the okhttp3 plugin to support Java 14\n * Polish tracing context related codes.\n+* Make the asynchttpclient 2.x plugin to support collecting HTTP parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MjYyMw=="}, "originalCommit": {"oid": "0d78856032188562d4234ad48549ea73c95e7949"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjUyMzI4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToyMzozNlrOHt-27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjo0NzoxMFrOHuBshQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NzgzNw==", "bodyText": "Note that, must be avoided to interrupt the process of the application in the wrapper class.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517977837", "createdAt": "2020-11-05T11:23:36Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.channel.Channel;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import javax.net.ssl.SSLSession;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.asynchttpclient.AsyncCompletionHandlerBase;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.HttpResponseBodyPart;\n+import org.asynchttpclient.HttpResponseStatus;\n+import org.asynchttpclient.netty.request.NettyRequest;\n+\n+/**\n+ * {@link AsyncHandlerWrapper} wrapper the {@link AsyncHandler} object for tracing.\n+ * if userAsyncHandler is null, we will set {@link AsyncCompletionHandlerBase} to avoid NPE.\n+ */\n+public class AsyncHandlerWrapper implements AsyncHandler {\n+\n+    private final AsyncHandler userAsyncHandler;\n+    private final AbstractSpan asyncSpan;\n+\n+    public AsyncHandlerWrapper(AsyncHandler asyncHandler, AbstractSpan span) {\n+        this.userAsyncHandler = asyncHandler == null ? new AsyncCompletionHandlerBase() : asyncHandler;\n+        this.asyncSpan = span;\n+    }\n+\n+    @Override\n+    public State onStatusReceived(final HttpResponseStatus httpResponseStatus) throws Exception {\n+        return userAsyncHandler.onStatusReceived(httpResponseStatus);\n+    }\n+\n+    @Override\n+    public State onHeadersReceived(final HttpHeaders httpHeaders) throws Exception {\n+        return userAsyncHandler.onHeadersReceived(httpHeaders);\n+    }\n+\n+    @Override\n+    public State onBodyPartReceived(final HttpResponseBodyPart httpResponseBodyPart) throws Exception {\n+        return userAsyncHandler.onBodyPartReceived(httpResponseBodyPart);\n+    }\n+\n+    @Override\n+    public State onTrailingHeadersReceived(final HttpHeaders headers) throws Exception {\n+        return userAsyncHandler.onTrailingHeadersReceived(headers);\n+    }\n+\n+    @Override\n+    public void onThrowable(final Throwable throwable) {\n+        asyncSpan.log(throwable);\n+        asyncSpan.asyncFinish();\n+        userAsyncHandler.onThrowable(throwable);\n+    }\n+\n+    @Override\n+    public Object onCompleted() throws Exception {\n+        asyncSpan.asyncFinish();\n+        return userAsyncHandler.onCompleted();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAyMTQ5Mw==", "bodyText": "Thanks for reminding, it is really polished here", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r518021493", "createdAt": "2020-11-05T12:42:26Z", "author": {"login": "zhentaoJin"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.channel.Channel;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import javax.net.ssl.SSLSession;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.asynchttpclient.AsyncCompletionHandlerBase;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.HttpResponseBodyPart;\n+import org.asynchttpclient.HttpResponseStatus;\n+import org.asynchttpclient.netty.request.NettyRequest;\n+\n+/**\n+ * {@link AsyncHandlerWrapper} wrapper the {@link AsyncHandler} object for tracing.\n+ * if userAsyncHandler is null, we will set {@link AsyncCompletionHandlerBase} to avoid NPE.\n+ */\n+public class AsyncHandlerWrapper implements AsyncHandler {\n+\n+    private final AsyncHandler userAsyncHandler;\n+    private final AbstractSpan asyncSpan;\n+\n+    public AsyncHandlerWrapper(AsyncHandler asyncHandler, AbstractSpan span) {\n+        this.userAsyncHandler = asyncHandler == null ? new AsyncCompletionHandlerBase() : asyncHandler;\n+        this.asyncSpan = span;\n+    }\n+\n+    @Override\n+    public State onStatusReceived(final HttpResponseStatus httpResponseStatus) throws Exception {\n+        return userAsyncHandler.onStatusReceived(httpResponseStatus);\n+    }\n+\n+    @Override\n+    public State onHeadersReceived(final HttpHeaders httpHeaders) throws Exception {\n+        return userAsyncHandler.onHeadersReceived(httpHeaders);\n+    }\n+\n+    @Override\n+    public State onBodyPartReceived(final HttpResponseBodyPart httpResponseBodyPart) throws Exception {\n+        return userAsyncHandler.onBodyPartReceived(httpResponseBodyPart);\n+    }\n+\n+    @Override\n+    public State onTrailingHeadersReceived(final HttpHeaders headers) throws Exception {\n+        return userAsyncHandler.onTrailingHeadersReceived(headers);\n+    }\n+\n+    @Override\n+    public void onThrowable(final Throwable throwable) {\n+        asyncSpan.log(throwable);\n+        asyncSpan.asyncFinish();\n+        userAsyncHandler.onThrowable(throwable);\n+    }\n+\n+    @Override\n+    public Object onCompleted() throws Exception {\n+        asyncSpan.asyncFinish();\n+        return userAsyncHandler.onCompleted();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NzgzNw=="}, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAyNDMyNQ==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r518024325", "createdAt": "2020-11-05T12:47:10Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.channel.Channel;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import javax.net.ssl.SSLSession;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.asynchttpclient.AsyncCompletionHandlerBase;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.HttpResponseBodyPart;\n+import org.asynchttpclient.HttpResponseStatus;\n+import org.asynchttpclient.netty.request.NettyRequest;\n+\n+/**\n+ * {@link AsyncHandlerWrapper} wrapper the {@link AsyncHandler} object for tracing.\n+ * if userAsyncHandler is null, we will set {@link AsyncCompletionHandlerBase} to avoid NPE.\n+ */\n+public class AsyncHandlerWrapper implements AsyncHandler {\n+\n+    private final AsyncHandler userAsyncHandler;\n+    private final AbstractSpan asyncSpan;\n+\n+    public AsyncHandlerWrapper(AsyncHandler asyncHandler, AbstractSpan span) {\n+        this.userAsyncHandler = asyncHandler == null ? new AsyncCompletionHandlerBase() : asyncHandler;\n+        this.asyncSpan = span;\n+    }\n+\n+    @Override\n+    public State onStatusReceived(final HttpResponseStatus httpResponseStatus) throws Exception {\n+        return userAsyncHandler.onStatusReceived(httpResponseStatus);\n+    }\n+\n+    @Override\n+    public State onHeadersReceived(final HttpHeaders httpHeaders) throws Exception {\n+        return userAsyncHandler.onHeadersReceived(httpHeaders);\n+    }\n+\n+    @Override\n+    public State onBodyPartReceived(final HttpResponseBodyPart httpResponseBodyPart) throws Exception {\n+        return userAsyncHandler.onBodyPartReceived(httpResponseBodyPart);\n+    }\n+\n+    @Override\n+    public State onTrailingHeadersReceived(final HttpHeaders headers) throws Exception {\n+        return userAsyncHandler.onTrailingHeadersReceived(headers);\n+    }\n+\n+    @Override\n+    public void onThrowable(final Throwable throwable) {\n+        asyncSpan.log(throwable);\n+        asyncSpan.asyncFinish();\n+        userAsyncHandler.onThrowable(throwable);\n+    }\n+\n+    @Override\n+    public Object onCompleted() throws Exception {\n+        asyncSpan.asyncFinish();\n+        return userAsyncHandler.onCompleted();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NzgzNw=="}, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjUzNDk1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/ExecuteInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToyNjo1NVrOHt--Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjo1NToxN1rOHuB-1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3OTY4Mw==", "bodyText": "Change to single-line comment", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517979683", "createdAt": "2020-11-05T11:26:55Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/ExecuteInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.Request;\n+import org.asynchttpclient.uri.Uri;\n+\n+/**\n+ * interceptor for {@link org.asynchttpclient.DefaultAsyncHttpClient}\n+ */\n+public class ExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                             Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        final Request httpRequest = (Request) allArguments[0];\n+        final Uri requestUri = httpRequest.getUri();\n+\n+        AbstractSpan span = ContextManager.createExitSpan(\n+            \"AsyncHttpClient\" + requestUri.getPath(), requestUri.getHost() + \":\" + requestUri.getPort());\n+\n+        /**\n+         * We wrapper the allArguments[1] for get the real time duration, and stop the span.\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAyOTAxNQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r518029015", "createdAt": "2020-11-05T12:55:17Z", "author": {"login": "zhentaoJin"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/ExecuteInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.Request;\n+import org.asynchttpclient.uri.Uri;\n+\n+/**\n+ * interceptor for {@link org.asynchttpclient.DefaultAsyncHttpClient}\n+ */\n+public class ExecuteInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                             Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        final Request httpRequest = (Request) allArguments[0];\n+        final Uri requestUri = httpRequest.getUri();\n+\n+        AbstractSpan span = ContextManager.createExitSpan(\n+            \"AsyncHttpClient\" + requestUri.getPath(), requestUri.getHost() + \":\" + requestUri.getPort());\n+\n+        /**\n+         * We wrapper the allArguments[1] for get the real time duration, and stop the span.\n+         */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3OTY4Mw=="}, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjU1MzUxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTozMjowMFrOHt_Jkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjo1NzoyOVrOHuCEOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4MjYxMA==", "bodyText": "what does the v1 mean?", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r517982610", "createdAt": "2020-11-05T11:32:00Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMDM5NA==", "bodyText": "The naming is really not very good, it has been modified", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r518030394", "createdAt": "2020-11-05T12:57:29Z", "author": {"login": "zhentaoJin"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4MjYxMA=="}, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njc1MTMxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjoyNzo1MVrOHuBB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjo0ODozM1rOHuBvfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMzQwNw==", "bodyText": "This method should be try-catch. This could trigger the exception if the plugin has bug, or the target lib has bug.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r518013407", "createdAt": "2020-11-05T12:27:51Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.channel.Channel;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import javax.net.ssl.SSLSession;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.asynchttpclient.AsyncCompletionHandlerBase;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.HttpResponseBodyPart;\n+import org.asynchttpclient.HttpResponseStatus;\n+import org.asynchttpclient.netty.request.NettyRequest;\n+\n+/**\n+ * {@link AsyncHandlerWrapper} wrapper the {@link AsyncHandler} object for tracing.\n+ * if userAsyncHandler is null, we will set {@link AsyncCompletionHandlerBase} to avoid NPE.\n+ */\n+public class AsyncHandlerWrapper implements AsyncHandler {\n+\n+    private final AsyncHandler userAsyncHandler;\n+    private final AbstractSpan asyncSpan;\n+\n+    public AsyncHandlerWrapper(AsyncHandler asyncHandler, AbstractSpan span) {\n+        this.userAsyncHandler = asyncHandler == null ? new AsyncCompletionHandlerBase() : asyncHandler;\n+        this.asyncSpan = span;\n+    }\n+\n+    @Override\n+    public State onStatusReceived(final HttpResponseStatus httpResponseStatus) throws Exception {\n+        return userAsyncHandler.onStatusReceived(httpResponseStatus);\n+    }\n+\n+    @Override\n+    public State onHeadersReceived(final HttpHeaders httpHeaders) throws Exception {\n+        return userAsyncHandler.onHeadersReceived(httpHeaders);\n+    }\n+\n+    @Override\n+    public State onBodyPartReceived(final HttpResponseBodyPart httpResponseBodyPart) throws Exception {\n+        return userAsyncHandler.onBodyPartReceived(httpResponseBodyPart);\n+    }\n+\n+    @Override\n+    public State onTrailingHeadersReceived(final HttpHeaders headers) throws Exception {\n+        return userAsyncHandler.onTrailingHeadersReceived(headers);\n+    }\n+\n+    @Override\n+    public void onThrowable(final Throwable throwable) {\n+        asyncSpan.log(throwable);\n+        asyncSpan.asyncFinish();\n+        userAsyncHandler.onThrowable(throwable);\n+    }\n+\n+    @Override\n+    public Object onCompleted() throws Exception {\n+        asyncSpan.asyncFinish();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAyNTA4NQ==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5690#discussion_r518025085", "createdAt": "2020-11-05T12:48:33Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/asynchttpclient/v1/AsyncHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.asynchttpclient.v1;\n+\n+import io.netty.channel.Channel;\n+import io.netty.handler.codec.http.HttpHeaders;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import javax.net.ssl.SSLSession;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.asynchttpclient.AsyncCompletionHandlerBase;\n+import org.asynchttpclient.AsyncHandler;\n+import org.asynchttpclient.HttpResponseBodyPart;\n+import org.asynchttpclient.HttpResponseStatus;\n+import org.asynchttpclient.netty.request.NettyRequest;\n+\n+/**\n+ * {@link AsyncHandlerWrapper} wrapper the {@link AsyncHandler} object for tracing.\n+ * if userAsyncHandler is null, we will set {@link AsyncCompletionHandlerBase} to avoid NPE.\n+ */\n+public class AsyncHandlerWrapper implements AsyncHandler {\n+\n+    private final AsyncHandler userAsyncHandler;\n+    private final AbstractSpan asyncSpan;\n+\n+    public AsyncHandlerWrapper(AsyncHandler asyncHandler, AbstractSpan span) {\n+        this.userAsyncHandler = asyncHandler == null ? new AsyncCompletionHandlerBase() : asyncHandler;\n+        this.asyncSpan = span;\n+    }\n+\n+    @Override\n+    public State onStatusReceived(final HttpResponseStatus httpResponseStatus) throws Exception {\n+        return userAsyncHandler.onStatusReceived(httpResponseStatus);\n+    }\n+\n+    @Override\n+    public State onHeadersReceived(final HttpHeaders httpHeaders) throws Exception {\n+        return userAsyncHandler.onHeadersReceived(httpHeaders);\n+    }\n+\n+    @Override\n+    public State onBodyPartReceived(final HttpResponseBodyPart httpResponseBodyPart) throws Exception {\n+        return userAsyncHandler.onBodyPartReceived(httpResponseBodyPart);\n+    }\n+\n+    @Override\n+    public State onTrailingHeadersReceived(final HttpHeaders headers) throws Exception {\n+        return userAsyncHandler.onTrailingHeadersReceived(headers);\n+    }\n+\n+    @Override\n+    public void onThrowable(final Throwable throwable) {\n+        asyncSpan.log(throwable);\n+        asyncSpan.asyncFinish();\n+        userAsyncHandler.onThrowable(throwable);\n+    }\n+\n+    @Override\n+    public Object onCompleted() throws Exception {\n+        asyncSpan.asyncFinish();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMzQwNw=="}, "originalCommit": {"oid": "4d5404a5936ce9a0efec1ad1cee3c0ce07c35517"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4718, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}