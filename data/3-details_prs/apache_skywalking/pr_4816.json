{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzg1NTcx", "number": 4816, "title": "Provide agent-side meter api", "bodyText": "Please answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#4808\n\n\n\nNew feature or improvement\n\nProvide the agent-side meter API.", "createdAt": "2020-05-24T09:13:38Z", "url": "https://github.com/apache/skywalking/pull/4816", "merged": true, "mergeCommit": {"oid": "cc9ea271a720e8def161a583595f75da9bda77a5"}, "closed": true, "closedAt": "2020-06-22T06:07:35Z", "author": {"login": "mrproliu"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckXta5gH2gAyNDIyMzg1NTcxOjI2ZTE2MzMzYThhZDQ1NjBmZGNjZmJiOTYxNDQ2ZGQ1NzFkOTZiYTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctqVtcAFqTQzNDYxOTU4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26e16333a8ad4560fdccfbb961446dd571d96ba8", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/26e16333a8ad4560fdccfbb961446dd571d96ba8", "committedDate": "2020-05-24T09:04:47Z", "message": "provide agent-side meter api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "915683e13df38bd764647180c7eb7b61bb9439b9", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/915683e13df38bd764647180c7eb7b61bb9439b9", "committedDate": "2020-05-24T09:10:45Z", "message": "fix documents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56904712eeb380d29bb6167a3bd77531d73660dd", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/56904712eeb380d29bb6167a3bd77531d73660dd", "committedDate": "2020-05-24T09:13:46Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "306cb01e4d68d0d36485791f547402e1881687f5", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/306cb01e4d68d0d36485791f547402e1881687f5", "committedDate": "2020-05-24T09:27:33Z", "message": "fix style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eb90c8457a2246caa1cd55391e3fbe5bd2fb2d2", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4eb90c8457a2246caa1cd55391e3fbe5bd2fb2d2", "committedDate": "2020-05-24T09:27:48Z", "message": "Merge remote-tracking branch 'origin/meter-agent-api' into meter-agent-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzQxMjE1", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-417341215", "createdAt": "2020-05-24T09:21:55Z", "commit": {"oid": "56904712eeb380d29bb6167a3bd77531d73660dd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOToyMTo1NVrOGZttNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOToyNTowNVrOGZtuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjQzOA==", "bodyText": "Unfinshed words.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r429616438", "createdAt": "2020-05-24T09:21:55Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterId.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.meter;\n+\n+import org.apache.skywalking.apm.network.language.agent.v3.Label;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Identity the meter, including name and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56904712eeb380d29bb6167a3bd77531d73660dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjU0NA==", "bodyText": "Why Registry in name?", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r429616544", "createdAt": "2020-05-24T09:22:54Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterRegistryService.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.meter;\n+\n+import io.grpc.Channel;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelListener;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelManager;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelStatus;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCStreamServiceStatus;\n+import org.apache.skywalking.apm.network.common.v3.Commands;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterData;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterReportServiceGrpc;\n+import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;\n+\n+@DefaultImplementor\n+public class MeterRegistryService implements BootService, Runnable, GRPCChannelListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56904712eeb380d29bb6167a3bd77531d73660dd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjU5NA==", "bodyText": "Why many empty lines?", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r429616594", "createdAt": "2020-05-24T09:23:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterType.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.meter;\n+\n+public enum MeterType {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56904712eeb380d29bb6167a3bd77531d73660dd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjcwOQ==", "bodyText": "These are not widely used configurations, we should keep them in the document only.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r429616709", "createdAt": "2020-05-24T09:25:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -57,6 +57,12 @@ agent.service_name=${SW_AGENT_NAME:Your_ApplicationName}\n # Snapshot transport to backend buffer size\n # profile.snapshot_transport_buffer_size=${SW_AGENT_PROFILE_SNAPSHOT_TRANSPORT_BUFFER_SIZE:50}\n \n+# If true, skywalking agent will enable sending meters. Otherwise disable meter report.\n+# meter.active=${SW_AGENT_METER_ACTIVE:true}\n+\n+# Report meters interval\n+# meter.report_interval=${SW_AGENT_REPORT_INTERVAL:20}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56904712eeb380d29bb6167a3bd77531d73660dd"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f198fa7a7c111dd028dbc31ecdb7a70d247c5edd", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/f198fa7a7c111dd028dbc31ecdb7a70d247c5edd", "committedDate": "2020-06-04T17:05:02Z", "message": "support micro-meter, percentile, and simplify the agent code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "843da5762a4ad4e30cc12a8381da7678fcdf2b97", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/843da5762a4ad4e30cc12a8381da7678fcdf2b97", "committedDate": "2020-06-04T17:05:58Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98666718730a42dc840502912b2fe15da6cd5fab", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/98666718730a42dc840502912b2fe15da6cd5fab", "committedDate": "2020-06-04T17:09:49Z", "message": "fix document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc3cfbcf4c911c108d2659313139ba94346c6d22", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/fc3cfbcf4c911c108d2659313139ba94346c6d22", "committedDate": "2020-06-07T14:23:22Z", "message": "add more test case, micrometer adapt document, support micrometer `LongTaskTimer` histogram/percentile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f3cba2f0a265d0bc761bdeb3413dc841a28cc0f", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/0f3cba2f0a265d0bc761bdeb3413dc841a28cc0f", "committedDate": "2020-06-07T14:24:35Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5921f16fe28cf0c266c29d054f8a02521c646ce", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/a5921f16fe28cf0c266c29d054f8a02521c646ce", "committedDate": "2020-06-07T14:30:56Z", "message": "optimize timer histogram/percentile build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e763335f9dc8fc17635116870427514fd471c9b", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/5e763335f9dc8fc17635116870427514fd471c9b", "committedDate": "2020-06-08T01:55:52Z", "message": "fix style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9466d366a0e04f246b34bef819b5c719cd55af4b", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/9466d366a0e04f246b34bef819b5c719cd55af4b", "committedDate": "2020-06-13T14:38:39Z", "message": "Adding micrometer UT, optimized the adapt micrometer code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "795cc23eed676684bca5959eaf3b0178b36a8f97", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/795cc23eed676684bca5959eaf3b0178b36a8f97", "committedDate": "2020-06-13T14:42:30Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c31cff00e490d697f66d20583fcae9f36664df", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/a9c31cff00e490d697f66d20583fcae9f36664df", "committedDate": "2020-06-13T15:25:08Z", "message": "Adapt the new maven version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2546f7f75304ddcafdaaa21d4360cebdc490cae7", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/2546f7f75304ddcafdaaa21d4360cebdc490cae7", "committedDate": "2020-06-15T05:39:52Z", "message": "Change percentile check time range, make it more stable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8864d4bf3d474a893b0f5d1e85a30990e9a02ef8", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/8864d4bf3d474a893b0f5d1e85a30990e9a02ef8", "committedDate": "2020-06-15T05:40:22Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/4003f1228b41719f37172724578ec3ca4b632f5f", "committedDate": "2020-06-16T12:40:00Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTYzODk1", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434163895", "createdAt": "2020-06-19T15:25:53Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNToyNTo1M1rOGmYusg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNToyNTo1M1rOGmYusg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNDI0Mg==", "bodyText": "exceptMinValue? What do you mean? Exclude? But still a little confusing.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r442904242", "createdAt": "2020-06-19T15:25:53Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,51 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+Counter counter = Counter.create(meterName).tag(\"tagKey\", \"tagValue\").build();\n+counter.increment(1d);\n+```\n+1. `Counter.create` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Counter.increment(double count)` Increment count to the `Counter`, It could be a positive/negative value.\n+\n+* `Gauge` API represents a single numerical value.\n+```java\n+ThreadPoolExecutor threadPool = ...;\n+Gauge gauge = Gauge.create(meterName, () -> threadPool.getActiveCount()).tag(\"tagKey\", \"tagValue\").build();\n+```\n+1. `Gauge.create(String name, Supplier<Double> getter)` Create a new gauge builder with the meter name and supplier function, this function need to return a `double` value.\n+1. `Gauge.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Gauge.Builder.build()` To build a new `Gauge` and it will register to the agent, automatically collect data and report to the backend.\n+\n+* `Histogram` API represents a summary sample observations with customize buckets.\n+```java\n+Histogram histogram = Histogram.create(\"test\").tag(\"tagKey\", \"tagValue\").steps(Arrays.asList(1, 5, 10)).exceptMinValue(0).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTY5MDg2", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434169086", "createdAt": "2020-06-19T15:33:15Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTozMzoxNVrOGmY-UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTozMzoxNVrOGmY-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwODI0MQ==", "bodyText": "Is Percentile calculating value at the client-side and only sending as a single value? Or what.\nI was not expecting this, I thought only histogram.\nDo I forget something?", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r442908241", "createdAt": "2020-06-19T15:33:15Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,51 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+Counter counter = Counter.create(meterName).tag(\"tagKey\", \"tagValue\").build();\n+counter.increment(1d);\n+```\n+1. `Counter.create` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Counter.increment(double count)` Increment count to the `Counter`, It could be a positive/negative value.\n+\n+* `Gauge` API represents a single numerical value.\n+```java\n+ThreadPoolExecutor threadPool = ...;\n+Gauge gauge = Gauge.create(meterName, () -> threadPool.getActiveCount()).tag(\"tagKey\", \"tagValue\").build();\n+```\n+1. `Gauge.create(String name, Supplier<Double> getter)` Create a new gauge builder with the meter name and supplier function, this function need to return a `double` value.\n+1. `Gauge.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Gauge.Builder.build()` To build a new `Gauge` and it will register to the agent, automatically collect data and report to the backend.\n+\n+* `Histogram` API represents a summary sample observations with customize buckets.\n+```java\n+Histogram histogram = Histogram.create(\"test\").tag(\"tagKey\", \"tagValue\").steps(Arrays.asList(1, 5, 10)).exceptMinValue(0).build();\n+histogram.addCountToStep(5, 1L);\n+histogram.addValue(3);\n+```\n+1. `Histogram.create(String name)` Create a new histogram builder with the meter name.\n+1. `Histogram.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Histogram.Builder.steps(List<Double> steps)` Setting the histogram buckets.\n+1. `Histogram.Builder.exceptMinValue(double value)` Setting the histogram min value will accept, it will help the Skywalking UI to display, default is `0`.\n+1. `Histogram.Builder.build()` To build a new `Histogram` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Histogram.addCountToStep(double step, long count)` Add count to appoint step. Only support an existing step.\n+1. `Histogram.addValue(double value)` Add value into the histogram, automatically analyze what bucket count needs to be increment. rule: count into [step1, step2).\n+\n+* `Percentile` API represents a percentile calculator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTY5OTA1", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434169905", "createdAt": "2020-06-19T15:34:28Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTozNDoyOFrOGmZAtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTozNDoyOFrOGmZAtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwODg1NA==", "bodyText": "@krmeda  I think this is what you were asking at #4279", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r442908854", "createdAt": "2020-06-19T15:34:28Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-micrometer.md", "diffHunk": "@@ -0,0 +1,41 @@\n+* Dependency the toolkit, such as using maven or gradle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTc0MjE2", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434174216", "createdAt": "2020-06-19T15:41:00Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0MTowMFrOGmZNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0MTowMFrOGmZNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMjE5Nw==", "bodyText": "This statement is a little confusing to me. Could you provide more details. I think in MicroMeter integration, we are just expecting the data type and metrics name at the backend.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r442912197", "createdAt": "2020-06-19T15:41:00Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-micrometer.md", "diffHunk": "@@ -0,0 +1,41 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-micrometer-registry</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* Using `SkywalkingMeterRegistry` as the registry, it could automatic collect your meter to out meter system.\n+```java\n+SkywalkingMeterRegistry registry = new SkywalkingMeterRegistry();\n+\n+// Also you could using composite registry to combine multiple meter registry, such as collect to Skywalking and prometheus\n+CompositeMeterRegistry compositeRegistry = new CompositeMeterRegistry();\n+compositeRegistry.add(new PrometheusMeterRegistry(PrometheusConfig.DEFAULT));\n+compositeRegistry.add(new SkywalkingMeterRegistry());\n+```\n+\n+* Using snake case as the naming convention. Such as `test.meter` will be send to `test_meter`.\n+\n+* Adapt micrometer data convention.\n+\n+|Micrometer data type|Transform to meter name|Skywalking data type|\n+|----- |----- |----- |\n+|Counter|Counter name|Counter|\n+|Gauges|Gauges name|Gauges|\n+|Timer|Timer name + \"_count\"|Counter|\n+| |Timer name + \"_sum\"|Counter|\n+| |Timer name + \"_max|Gauges|\n+||LongTaskTimer|Timer name + \"_active_count\"|Gauges|\n+| |Timer name + \"_duration_sum\"|Counter|\n+|Function Timer|Timer name + \"_count\"|Gauges|\n+| |Timer name + \"_sum\"|Gauges|\n+|Function Counter|Counter name|Gauges|\n+|Distribution summary|Summary name + \"_count\"|Counter|\n+| |Summary name + \"_sum\"|Counter|\n+| |Summary name + \"_max\"|Gauges|\n+\n+Also, If the meter support the histogram/percentile, such as Timer, Summary, support using currently meter name + \"_histogram\" / \"_percentile\" to collect the histogram/percentile.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTc1Nzc2", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434175776", "createdAt": "2020-06-19T15:43:24Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0MzoyNFrOGmZSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0MzoyNFrOGmZSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMzM5Nw==", "bodyText": "You should provide an agent config to limit this size, in order to avoid OOM.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r442913397", "createdAt": "2020-06-19T15:43:24Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.meter;\n+\n+import io.grpc.Channel;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.meter.transform.MeterTransformer;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelListener;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelManager;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelStatus;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCStreamServiceStatus;\n+import org.apache.skywalking.apm.network.common.v3.Commands;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterData;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterReportServiceGrpc;\n+import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;\n+\n+@DefaultImplementor\n+public class MeterService implements BootService, Runnable, GRPCChannelListener {\n+    private static final ILog logger = LogManager.getLogger(MeterService.class);\n+\n+    // all meters\n+    private final ConcurrentHashMap<MeterId, MeterTransformer> meterMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTc2NTQx", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434176541", "createdAt": "2020-06-19T15:44:32Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0NDozMlrOGmZUzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0NDozMlrOGmZUzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMzk5Ng==", "bodyText": "This should be in the final in order to keep the backend connected forever.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r442913996", "createdAt": "2020-06-19T15:44:32Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/meter/MeterService.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.meter;\n+\n+import io.grpc.Channel;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.meter.transform.MeterTransformer;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelListener;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelManager;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelStatus;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCStreamServiceStatus;\n+import org.apache.skywalking.apm.network.common.v3.Commands;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterData;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterReportServiceGrpc;\n+import org.apache.skywalking.apm.util.RunnableWithExceptionProtection;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;\n+\n+@DefaultImplementor\n+public class MeterService implements BootService, Runnable, GRPCChannelListener {\n+    private static final ILog logger = LogManager.getLogger(MeterService.class);\n+\n+    // all meters\n+    private final ConcurrentHashMap<MeterId, MeterTransformer> meterMap = new ConcurrentHashMap<>();\n+\n+    // channel status\n+    private volatile GRPCChannelStatus status = GRPCChannelStatus.DISCONNECT;\n+\n+    // gRPC stub\n+    private volatile MeterReportServiceGrpc.MeterReportServiceStub meterReportServiceStub;\n+\n+    // report meters\n+    private volatile ScheduledFuture<?> reportMeterFuture;\n+\n+    private final Set<String> rateCounterNames = new HashSet<>();\n+\n+    /**\n+     * Register the meterTransformer\n+     */\n+    public <T extends MeterTransformer> void register(T meterTransformer) {\n+        if (meterTransformer == null) {\n+            return;\n+        }\n+\n+        meterMap.putIfAbsent(meterTransformer.getId(), meterTransformer);\n+    }\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        ServiceManager.INSTANCE.findService(GRPCChannelManager.class).addChannelListener(this);\n+    }\n+\n+    @Override\n+    public void boot() throws Throwable {\n+        if (Config.Meter.ACTIVE) {\n+            reportMeterFuture = Executors.newSingleThreadScheduledExecutor(\n+                new DefaultNamedThreadFactory(\"MeterReportService\")\n+            ).scheduleWithFixedDelay(new RunnableWithExceptionProtection(\n+                this,\n+                t -> logger.error(\"Report meters failure.\", t)\n+            ), 0, Config.Meter.REPORT_INTERVAL, TimeUnit.SECONDS);\n+\n+            rateCounterNames.addAll(Arrays.asList(Config.Meter.RATE_COUNTER_NAME.split(\",\")));\n+        }\n+    }\n+\n+    @Override\n+    public void onComplete() throws Throwable {\n+    }\n+\n+    @Override\n+    public void shutdown() throws Throwable {\n+        if (reportMeterFuture != null) {\n+            reportMeterFuture.cancel(true);\n+        }\n+        // clear all of the meter report\n+        meterMap.clear();\n+    }\n+\n+    @Override\n+    public void run() {\n+        if (status != GRPCChannelStatus.CONNECTED || meterMap.isEmpty()) {\n+            return;\n+        }\n+\n+        try {\n+            final GRPCStreamServiceStatus status = new GRPCStreamServiceStatus(false);\n+            final StreamObserver<MeterData> reportStreamObserver = meterReportServiceStub.withDeadlineAfter(\n+                GRPC_UPSTREAM_TIMEOUT, TimeUnit.SECONDS\n+            ).collect(new StreamObserver<Commands>() {\n+                @Override\n+                public void onNext(Commands commands) {\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.finished();\n+                    if (logger.isErrorEnable()) {\n+                        logger.error(throwable, \"Send meters to collector fail with a grpc internal exception.\");\n+                    }\n+                    ServiceManager.INSTANCE.findService(GRPCChannelManager.class).reportError(throwable);\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.finished();\n+                }\n+            });\n+\n+            // build and report meters\n+            boolean hasSendMachineInfo = false;\n+            for (MeterTransformer meterTransformer : meterMap.values()) {\n+                final MeterData.Builder dataBuilder = meterTransformer.transform();\n+                if (dataBuilder == null) {\n+                    continue;\n+                }\n+\n+                if (!hasSendMachineInfo) {\n+                    dataBuilder.setService(Config.Agent.SERVICE_NAME);\n+                    dataBuilder.setServiceInstance(Config.Agent.INSTANCE_NAME);\n+                    dataBuilder.setTimestamp(System.currentTimeMillis());\n+                    hasSendMachineInfo = true;\n+                }\n+\n+                reportStreamObserver.onNext(dataBuilder.build());\n+            }\n+\n+            reportStreamObserver.onCompleted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTg1NDAw", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434185400", "createdAt": "2020-06-19T15:57:47Z", "commit": {"oid": "4003f1228b41719f37172724578ec3ca4b632f5f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6717ea7e1e2edd4395d68236940cf61ee6c534bd", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/6717ea7e1e2edd4395d68236940cf61ee6c534bd", "committedDate": "2020-06-20T10:30:01Z", "message": "1. Add mor comment\n2. Rename `exceptMinValue` to `minValue` on Histogram\n3. Remove Percentile\n4. Add more description at the Application-toolkit-micrometer.md\n5. Add max meter size config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "792414d78f02b149514415b2ba479ab54ce58f92", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/792414d78f02b149514415b2ba479ab54ce58f92", "committedDate": "2020-06-20T10:31:53Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af09ab0dc37b20d6585331c7dc0c2716115ab03", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3af09ab0dc37b20d6585331c7dc0c2716115ab03", "committedDate": "2020-06-20T11:23:00Z", "message": "Fix document and add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/99af6e651a9bcd35eade228acc439c571b978ce7", "committedDate": "2020-06-20T12:05:07Z", "message": "Make long task timer UT more stable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDMzMjEw", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434433210", "createdAt": "2020-06-20T14:48:01Z", "commit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDo0ODowMlrOGmm50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxNDo1Njo0OFrOGmm8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjQ2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `meter.max_meter_size`|Max size of the meter count|`500`|\n          \n          \n            \n            `meter.max_meter_size`| Max size of the meter pool |`500`|", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443136464", "createdAt": "2020-06-20T14:48:02Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -105,6 +105,10 @@ property key | Description | Default |\n `profile.duration`|Max monitor segment time(minutes), if current segment monitor time out of limit, then stop it.|`10`|\n `profile.dump_max_stack_depth`|Max dump thread stack depth|`500`|\n `profile.snapshot_transport_buffer_size`|Snapshot transport to backend buffer size|`50`|\n+`meter.active`|If true, skywalking agent will enable sending meters. Otherwise disable meter report.|`true`|\n+`meter.report_interval`|Report meters interval|`20`|\n+`meter.rate_counter_name`|Rate by agent counter meter names, spilt by \",\"|``|\n+`meter.max_meter_size`|Max size of the meter count|`500`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjc4MQ==", "bodyText": "I would like to remove this, but using counter.create().mode(RATE) to replace.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443136781", "createdAt": "2020-06-20T14:52:49Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -105,6 +105,10 @@ property key | Description | Default |\n `profile.duration`|Max monitor segment time(minutes), if current segment monitor time out of limit, then stop it.|`10`|\n `profile.dump_max_stack_depth`|Max dump thread stack depth|`500`|\n `profile.snapshot_transport_buffer_size`|Snapshot transport to backend buffer size|`50`|\n+`meter.active`|If true, skywalking agent will enable sending meters. Otherwise disable meter report.|`true`|\n+`meter.report_interval`|Report meters interval|`20`|\n+`meter.rate_counter_name`|Rate by agent counter meter names, spilt by \",\"|``|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjg0Nw==", "bodyText": "In MicroMeter, we could provide parameters to SkywalkingMeterRegistry to do similar thing.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443136847", "createdAt": "2020-06-20T14:53:48Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -105,6 +105,10 @@ property key | Description | Default |\n `profile.duration`|Max monitor segment time(minutes), if current segment monitor time out of limit, then stop it.|`10`|\n `profile.dump_max_stack_depth`|Max dump thread stack depth|`500`|\n `profile.snapshot_transport_buffer_size`|Snapshot transport to backend buffer size|`50`|\n+`meter.active`|If true, skywalking agent will enable sending meters. Otherwise disable meter report.|`true`|\n+`meter.report_interval`|Report meters interval|`20`|\n+`meter.rate_counter_name`|Rate by agent counter meter names, spilt by \",\"|``|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNjc4MQ=="}, "originalCommit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzAwNg==", "bodyText": "SkywalkingMeterRegistry should be a full name, including package too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Using `SkywalkingMeterRegistry` as the registry, it could automatic collect your meter to out meter system.\n          \n          \n            \n            * Using `SkywalkingMeterRegistry` as the registry, it could forward the MicroMeter collected metrics to OAP server.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443137006", "createdAt": "2020-06-20T14:56:13Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-micrometer.md", "diffHunk": "@@ -0,0 +1,44 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-micrometer-registry</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* Using `SkywalkingMeterRegistry` as the registry, it could automatic collect your meter to out meter system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNzAzMg==", "bodyText": "Are these all? Or do we have anything unsupported?", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443137032", "createdAt": "2020-06-20T14:56:48Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-micrometer.md", "diffHunk": "@@ -0,0 +1,44 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-micrometer-registry</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* Using `SkywalkingMeterRegistry` as the registry, it could automatic collect your meter to out meter system.\n+```java\n+SkywalkingMeterRegistry registry = new SkywalkingMeterRegistry();\n+\n+// Also you could using composite registry to combine multiple meter registry, such as collect to Skywalking and prometheus\n+CompositeMeterRegistry compositeRegistry = new CompositeMeterRegistry();\n+compositeRegistry.add(new PrometheusMeterRegistry(PrometheusConfig.DEFAULT));\n+compositeRegistry.add(new SkywalkingMeterRegistry());\n+```\n+\n+* Using snake case as the naming convention. Such as `test.meter` will be send to `test_meter`.\n+\n+* Using `Millisecond` as the time unit.\n+\n+* Adapt micrometer data convention.\n+\n+|Micrometer data type|Transform to meter name|Skywalking data type| Description|\n+|----- |----- |----- |----- |\n+|Counter|Counter name|Counter|Same with counter|\n+|Gauges|Gauges name|Gauges|Same with gauges|\n+|Timer|Timer name + \"_count\"|Counter|Execute finished count|\n+| |Timer name + \"_sum\"|Counter|Total execute finished duration|\n+| |Timer name + \"_max\"|Gauges|Max duration of execute finished time|\n+| |Timer name + \"_histogram\"|Histogram|Histogram of execute finished duration|\n+|LongTaskTimer|Timer name + \"_active_count\"|Gauges|Executing task count|\n+| |Timer name + \"_duration_sum\"|Counter|All of executing task sum duration|\n+| |Timer name + \"_max\"|Counter|Current longest running task execute duration|\n+| |Timer name + \"_histogram\"|Histogram|Executing finished task duration histogram|\n+|Function Timer|Timer name + \"_count\"|Gauges|Execute finished timer count|\n+| |Timer name + \"_sum\"|Gauges|Execute finished timer total duration|\n+|Function Counter|Counter name|Gauges|Total count|\n+|Distribution summary|Summary name + \"_count\"|Counter|Total record count|\n+| |Summary name + \"_sum\"|Counter|Total record amount sum|\n+| |Summary name + \"_max\"|Gauges|Max record amount|\n+| |Summary name + \"_histogram\"|Gauges|Histogram of the amount|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99af6e651a9bcd35eade228acc439c571b978ce7"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75730725257d0031d4a4d922f3a9f75f047c9847", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/75730725257d0031d4a4d922f3a9f75f047c9847", "committedDate": "2020-06-21T07:12:54Z", "message": "1. Remove agent.rate_counter Config\n2. Wrapper Meter as interface, and use MeterFactory to build the meter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294f7db4a83e22aab445011a5704c36656eff5a2", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/294f7db4a83e22aab445011a5704c36656eff5a2", "committedDate": "2020-06-21T07:36:35Z", "message": "1. Fix typo\n2. Change FunctionTimer as counter type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1afacb985ca93bf07e6477c49bd085e59437414", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/c1afacb985ca93bf07e6477c49bd085e59437414", "committedDate": "2020-06-21T07:37:30Z", "message": "Change wrong description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194d796e396e3895a855854c1947420131b327a2", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/194d796e396e3895a855854c1947420131b327a2", "committedDate": "2020-06-21T11:16:01Z", "message": "1. Histogram using absolute value to report\n2. Fix document\n3. Remove LongTaskTimer histogram"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c1f94a2cf3c85840529e1cbf1741b38ed11fc9f", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/6c1f94a2cf3c85840529e1cbf1741b38ed11fc9f", "committedDate": "2020-06-21T11:16:28Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3053053fb88378f68e7b085268d3a088c19c77b6", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3053053fb88378f68e7b085268d3a088c19c77b6", "committedDate": "2020-06-21T11:16:57Z", "message": "Merge branch 'meter-agent-api' of https://github.com/mrproliu/skywalking into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d", "committedDate": "2020-06-21T11:25:51Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDk4ODUw", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434498850", "createdAt": "2020-06-21T12:51:11Z", "commit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo1MToxMlrOGmrzGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo1MToxMlrOGmrzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode support rate value by client-side.\n          \n          \n            \n            1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n          \n          \n            \n            1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode means reporting rate to the backend.\n          \n          \n            \n            1. `Counter.Builder.build()` Build a new `Counter` which is collected and reported to the backend.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443216667", "createdAt": "2020-06-21T12:51:12Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,48 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Counter counter = MeterFactory.counter(meterName).tag(\"tagKey\", \"tagValue\").mode(Counter.Mode.INCREMENT).build();\n+counter.increment(1d);\n+```\n+1. `MeterFactory.counter` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode support rate value by client-side.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDk4OTQw", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434498940", "createdAt": "2020-06-21T12:52:19Z", "commit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo1MjoxOVrOGmrzfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo1MjoxOVrOGmrzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNjc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. `Histogram.Builder.minValue(double value)` Setting the histogram min value will accept, it will help the Skywalking UI to display, default is `0`.\n          \n          \n            \n            1. `Histogram.Builder.minValue(double value)` Set up the minimal value of this histogram, default is `0`.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443216764", "createdAt": "2020-06-21T12:52:19Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,48 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Counter counter = MeterFactory.counter(meterName).tag(\"tagKey\", \"tagValue\").mode(Counter.Mode.INCREMENT).build();\n+counter.increment(1d);\n+```\n+1. `MeterFactory.counter` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode support rate value by client-side.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Counter.increment(double count)` Increment count to the `Counter`, It could be a positive/negative value.\n+\n+* `Gauge` API represents a single numerical value.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+ThreadPoolExecutor threadPool = ...;\n+Gauge gauge = MeterFactory.gauge(meterName, () -> threadPool.getActiveCount()).tag(\"tagKey\", \"tagValue\").build();\n+```\n+1. `MeterFactory.gauge(String name, Supplier<Double> getter)` Create a new gauge builder with the meter name and supplier function, this function need to return a `double` value.\n+1. `Gauge.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Gauge.Builder.build()` To build a new `Gauge` and it will register to the agent, automatically collect data and report to the backend.\n+\n+* `Histogram` API represents a summary sample observations with customize buckets.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Histogram histogram = MeterFactory.histogram(\"test\").tag(\"tagKey\", \"tagValue\").steps(Arrays.asList(1, 5, 10)).minValue(0).build();\n+histogram.addCountToStep(5, 1L);\n+histogram.addValue(3);\n+```\n+1. `MeterFactory.histogram(String name)` Create a new histogram builder with the meter name.\n+1. `Histogram.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Histogram.Builder.steps(List<Double> steps)` Setting the histogram buckets.\n+1. `Histogram.Builder.minValue(double value)` Setting the histogram min value will accept, it will help the Skywalking UI to display, default is `0`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDk5MzI1", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434499325", "createdAt": "2020-06-21T12:57:45Z", "commit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo1Nzo0NVrOGmr1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo1OTo0MlrOGmr1yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. `Histogram.Builder.steps(List<Double> steps)` Setting the histogram buckets.\n          \n          \n            \n            1. `Histogram.Builder.steps(List<Double> steps)` Set up the max values of every histogram buckets.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443217201", "createdAt": "2020-06-21T12:57:45Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,48 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Counter counter = MeterFactory.counter(meterName).tag(\"tagKey\", \"tagValue\").mode(Counter.Mode.INCREMENT).build();\n+counter.increment(1d);\n+```\n+1. `MeterFactory.counter` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode support rate value by client-side.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Counter.increment(double count)` Increment count to the `Counter`, It could be a positive/negative value.\n+\n+* `Gauge` API represents a single numerical value.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+ThreadPoolExecutor threadPool = ...;\n+Gauge gauge = MeterFactory.gauge(meterName, () -> threadPool.getActiveCount()).tag(\"tagKey\", \"tagValue\").build();\n+```\n+1. `MeterFactory.gauge(String name, Supplier<Double> getter)` Create a new gauge builder with the meter name and supplier function, this function need to return a `double` value.\n+1. `Gauge.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Gauge.Builder.build()` To build a new `Gauge` and it will register to the agent, automatically collect data and report to the backend.\n+\n+* `Histogram` API represents a summary sample observations with customize buckets.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Histogram histogram = MeterFactory.histogram(\"test\").tag(\"tagKey\", \"tagValue\").steps(Arrays.asList(1, 5, 10)).minValue(0).build();\n+histogram.addCountToStep(5, 1L);\n+histogram.addValue(3);\n+```\n+1. `MeterFactory.histogram(String name)` Create a new histogram builder with the meter name.\n+1. `Histogram.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Histogram.Builder.steps(List<Double> steps)` Setting the histogram buckets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzI5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. `Histogram.Builder.build()` To build a new `Histogram` and it will register to the agent, automatically collect data and report to the backend.\n          \n          \n            \n            1. `Histogram.Builder.build()` Build a new `Histogram` which is collected and reported to the backend.", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443217294", "createdAt": "2020-06-21T12:59:02Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,48 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Counter counter = MeterFactory.counter(meterName).tag(\"tagKey\", \"tagValue\").mode(Counter.Mode.INCREMENT).build();\n+counter.increment(1d);\n+```\n+1. `MeterFactory.counter` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode support rate value by client-side.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Counter.increment(double count)` Increment count to the `Counter`, It could be a positive/negative value.\n+\n+* `Gauge` API represents a single numerical value.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+ThreadPoolExecutor threadPool = ...;\n+Gauge gauge = MeterFactory.gauge(meterName, () -> threadPool.getActiveCount()).tag(\"tagKey\", \"tagValue\").build();\n+```\n+1. `MeterFactory.gauge(String name, Supplier<Double> getter)` Create a new gauge builder with the meter name and supplier function, this function need to return a `double` value.\n+1. `Gauge.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Gauge.Builder.build()` To build a new `Gauge` and it will register to the agent, automatically collect data and report to the backend.\n+\n+* `Histogram` API represents a summary sample observations with customize buckets.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Histogram histogram = MeterFactory.histogram(\"test\").tag(\"tagKey\", \"tagValue\").steps(Arrays.asList(1, 5, 10)).minValue(0).build();\n+histogram.addCountToStep(5, 1L);\n+histogram.addValue(3);\n+```\n+1. `MeterFactory.histogram(String name)` Create a new histogram builder with the meter name.\n+1. `Histogram.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Histogram.Builder.steps(List<Double> steps)` Setting the histogram buckets.\n+1. `Histogram.Builder.minValue(double value)` Setting the histogram min value will accept, it will help the Skywalking UI to display, default is `0`.\n+1. `Histogram.Builder.build()` To build a new `Histogram` and it will register to the agent, automatically collect data and report to the backend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzM1Mg==", "bodyText": "What is this for? Why need this?", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443217352", "createdAt": "2020-06-21T12:59:42Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-meter.md", "diffHunk": "@@ -0,0 +1,48 @@\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-meter</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* `Counter` API represents a single monotonically increasing counter, automatic collect data and report to backend.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Counter counter = MeterFactory.counter(meterName).tag(\"tagKey\", \"tagValue\").mode(Counter.Mode.INCREMENT).build();\n+counter.increment(1d);\n+```\n+1. `MeterFactory.counter` Create a new counter builder with the meter name.\n+1. `Counter.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Counter.Builder.mode(Counter.Mode mode)` Change the counter mode, `RATE` mode support rate value by client-side.\n+1. `Counter.Builder.build()` To build a new `Counter` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Counter.increment(double count)` Increment count to the `Counter`, It could be a positive/negative value.\n+\n+* `Gauge` API represents a single numerical value.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+ThreadPoolExecutor threadPool = ...;\n+Gauge gauge = MeterFactory.gauge(meterName, () -> threadPool.getActiveCount()).tag(\"tagKey\", \"tagValue\").build();\n+```\n+1. `MeterFactory.gauge(String name, Supplier<Double> getter)` Create a new gauge builder with the meter name and supplier function, this function need to return a `double` value.\n+1. `Gauge.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Gauge.Builder.build()` To build a new `Gauge` and it will register to the agent, automatically collect data and report to the backend.\n+\n+* `Histogram` API represents a summary sample observations with customize buckets.\n+```java\n+import org.apache.skywalking.apm.toolkit.meter.MeterFactory;\n+\n+Histogram histogram = MeterFactory.histogram(\"test\").tag(\"tagKey\", \"tagValue\").steps(Arrays.asList(1, 5, 10)).minValue(0).build();\n+histogram.addCountToStep(5, 1L);\n+histogram.addValue(3);\n+```\n+1. `MeterFactory.histogram(String name)` Create a new histogram builder with the meter name.\n+1. `Histogram.Builder.tag(String key, String value)` Mark a tag key/value pair.\n+1. `Histogram.Builder.steps(List<Double> steps)` Setting the histogram buckets.\n+1. `Histogram.Builder.minValue(double value)` Setting the histogram min value will accept, it will help the Skywalking UI to display, default is `0`.\n+1. `Histogram.Builder.build()` To build a new `Histogram` and it will register to the agent, automatically collect data and report to the backend.\n+1. `Histogram.addCountToStep(double step, long count)` Add count to appoint step. Only support an existing step.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd2981f7aa8ea80f1786ed4aa06e26e682f0e5d"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4602928c5bd10e68f9d6bbae500523bf679e7ffd", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4602928c5bd10e68f9d6bbae500523bf679e7ffd", "committedDate": "2020-06-21T13:51:26Z", "message": "1. Fix docuemnt\n2. remove Histogram.addCountToStep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "816540bb2ff2e259d9b53df8c3097468683141e8", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/816540bb2ff2e259d9b53df8c3097468683141e8", "committedDate": "2020-06-21T13:52:24Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaec0fc3dddf2d27b051bc6ea235087f9c9c3252", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/eaec0fc3dddf2d27b051bc6ea235087f9c9c3252", "committedDate": "2020-06-21T14:35:57Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4f65d9753f4d1374446b3806c55912aa8dbc167e", "committedDate": "2020-06-21T15:28:31Z", "message": "Add link to java-agent docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTExNzMz", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434511733", "createdAt": "2020-06-21T15:39:54Z", "commit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozOTo1NFrOGmstUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTozOTo1NFrOGmstUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMTU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * If you want to custom meter and report to Meter System, try [SkyWalking Meter System](Application-toolkit-meter.md).\n          \n          \n            \n                * If you require customized metrics, try [SkyWalking Meter System Toolkit](Application-toolkit-meter.md).", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443231569", "createdAt": "2020-06-21T15:39:54Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -159,11 +162,13 @@ Now, we have the following known bootstrap plugins.\n * Monitor a big cluster by different SkyWalking services. Use [Namespace](Namespace.md) to isolate the context propagation. \n * Set client [token](Token-auth.md) if backend open [token authentication](../../backend/backend-token-auth.md).\n * Application Toolkit, are a collection of libraries, provided by SkyWalking APM. Using them, you have a bridge between your application and SkyWalking APM agent. \n-    * If you want to use OpenTracing Java APIs, try [SkyWalking OpenTracing compatible tracer](Opentracing.md). More details you could find at http://opentracing.io\n+    * If you want your codes to interact with SkyWalking agent, including `getting trace id`, `setting tags`, `propagating custom data` etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).\n+    * If you want to custom meter and report to Meter System, try [SkyWalking Meter System](Application-toolkit-meter.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTExODQ5", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434511849", "createdAt": "2020-06-21T15:41:31Z", "commit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTo0MTozMlrOGmst4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTo0MTozMlrOGmst4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMTcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * If you want to integration MicroMeter/Spring sleuth to Meter System, use [Micrometer integration API](Application-toolkit-micrometer.md).\n          \n          \n            \n                * If you want to forward MicroMeter/Spring Sleuth metrics to Meter System, use [SkyWalking MicroMeter Register](Application-toolkit-micrometer.md).", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443231712", "createdAt": "2020-06-21T15:41:32Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -159,11 +162,13 @@ Now, we have the following known bootstrap plugins.\n * Monitor a big cluster by different SkyWalking services. Use [Namespace](Namespace.md) to isolate the context propagation. \n * Set client [token](Token-auth.md) if backend open [token authentication](../../backend/backend-token-auth.md).\n * Application Toolkit, are a collection of libraries, provided by SkyWalking APM. Using them, you have a bridge between your application and SkyWalking APM agent. \n-    * If you want to use OpenTracing Java APIs, try [SkyWalking OpenTracing compatible tracer](Opentracing.md). More details you could find at http://opentracing.io\n+    * If you want your codes to interact with SkyWalking agent, including `getting trace id`, `setting tags`, `propagating custom data` etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).\n+    * If you want to custom meter and report to Meter System, try [SkyWalking Meter System](Application-toolkit-meter.md).\n     * If you want to print trace context(e.g. traceId) in your logs, choose the log frameworks, [log4j](Application-toolkit-log4j-1.x.md), \n [log4j2](Application-toolkit-log4j-2.x.md), [logback](Application-toolkit-logback-1.x.md)\n-    * If you want your codes to interact with SkyWalking agent, including `getting trace id`, `setting tags`, `propagating custom data` etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).\n     * If you want to continue traces across thread manually, use [across thread solution APIs](Application-toolkit-trace-cross-thread.md).\n+    * If you want to integration MicroMeter/Spring sleuth to Meter System, use [Micrometer integration API](Application-toolkit-micrometer.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTExOTYx", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434511961", "createdAt": "2020-06-21T15:43:04Z", "commit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTo0MzowNFrOGmsucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTo0MzowNFrOGmsucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMTg1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `meter.report_interval`|Report meters interval|`20`|\n          \n          \n            \n            `meter.report_interval`|Report meters interval. The unit is second|`20`|", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443231859", "createdAt": "2020-06-21T15:43:04Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -105,6 +105,9 @@ property key | Description | Default |\n `profile.duration`|Max monitor segment time(minutes), if current segment monitor time out of limit, then stop it.|`10`|\n `profile.dump_max_stack_depth`|Max dump thread stack depth|`500`|\n `profile.snapshot_transport_buffer_size`|Snapshot transport to backend buffer size|`50`|\n+`meter.active`|If true, skywalking agent will enable sending meters. Otherwise disable meter report.|`true`|\n+`meter.report_interval`|Report meters interval|`20`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTExOTg4", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434511988", "createdAt": "2020-06-21T15:43:41Z", "commit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTo0Mzo0MVrOGmsulg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTo0Mzo0MVrOGmsulg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMTg5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `meter.active`|If true, skywalking agent will enable sending meters. Otherwise disable meter report.|`true`|\n          \n          \n            \n            `meter.active`|If true, the agent collects and reports metrics to the backend.|`true`|", "url": "https://github.com/apache/skywalking/pull/4816#discussion_r443231894", "createdAt": "2020-06-21T15:43:41Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -105,6 +105,9 @@ property key | Description | Default |\n `profile.duration`|Max monitor segment time(minutes), if current segment monitor time out of limit, then stop it.|`10`|\n `profile.dump_max_stack_depth`|Max dump thread stack depth|`500`|\n `profile.snapshot_transport_buffer_size`|Snapshot transport to backend buffer size|`50`|\n+`meter.active`|If true, skywalking agent will enable sending meters. Otherwise disable meter report.|`true`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f65d9753f4d1374446b3806c55912aa8dbc167e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "666140aff52cf214423698be545fa3bac9ff404d", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/666140aff52cf214423698be545fa3bac9ff404d", "committedDate": "2020-06-22T00:10:43Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d408a7dd5d896fc3c252ea1133bc54870d5843", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/32d408a7dd5d896fc3c252ea1133bc54870d5843", "committedDate": "2020-06-22T03:24:30Z", "message": "Merge branch 'master' into meter-agent-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d48de9f45218d5ec60534a1a8cab2312f079885b", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/d48de9f45218d5ec60534a1a8cab2312f079885b", "committedDate": "2020-06-22T04:01:15Z", "message": "1. Fix document\n2. Add more UT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjE5NTgx", "url": "https://github.com/apache/skywalking/pull/4816#pullrequestreview-434619581", "createdAt": "2020-06-22T05:52:24Z", "commit": {"oid": "d48de9f45218d5ec60534a1a8cab2312f079885b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2185, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}