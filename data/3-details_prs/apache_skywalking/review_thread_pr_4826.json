{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDAwMzM5", "number": 4826, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozNDo0NlrOD_igpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTo0NlrOEAtwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTUyMjk0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozNDo0NlrOGaQY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1MjoyOVrOGaW_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDY5OQ==", "bodyText": "We don't add this link, once we did that, the links are everywhere.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430184699", "createdAt": "2020-05-26T06:34:46Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5Mjc1Mg==", "bodyText": "fixd.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430292752", "createdAt": "2020-05-26T09:52:29Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NDY5OQ=="}, "originalCommit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTUzMjU0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjozODo1MFrOGaQe8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1MTo0NFrOGaW9cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NjIyNg==", "bodyText": "If you skip this, the cast exception is gone, yes. But, the callback will not be traced, right? I think you should create a new function to delegate the existing parameter, which could propagate the context and continue the trace in the callback invocation. WDYT?", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430186226", "createdAt": "2020-05-26T06:38:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825\n+        //when use lambda expression, not to generate inner class,\n+        //    and not to trigger kafka CallBack class define, so allArguments[1] can't to cast EnhancedInstance\n+        Object shouldCallbackInstance = allArguments[1];\n+        if (null != shouldCallbackInstance && shouldCallbackInstance instanceof EnhancedInstance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MjMzNw==", "bodyText": "thanks for your advice.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430292337", "createdAt": "2020-05-26T09:51:44Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaProducerInterceptor.java", "diffHunk": "@@ -59,8 +59,12 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             next = next.next();\n             record.headers().add(next.getHeadKey(), next.getHeadValue().getBytes());\n         }\n-        EnhancedInstance callbackInstance = (EnhancedInstance) allArguments[1];\n-        if (null != callbackInstance) {\n+        //fix bug: https://github.com/apache/skywalking/issues/4825\n+        //when use lambda expression, not to generate inner class,\n+        //    and not to trigger kafka CallBack class define, so allArguments[1] can't to cast EnhancedInstance\n+        Object shouldCallbackInstance = allArguments[1];\n+        if (null != shouldCallbackInstance && shouldCallbackInstance instanceof EnhancedInstance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE4NjIyNg=="}, "originalCommit": {"oid": "f9e91a7d8b68ef95c4c32a482649d586cb85e074"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDY0MTkwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxMjo1M1rOGabang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxMjo1M1rOGabang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTM0Mg==", "bodyText": "This should be static.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365342", "createdAt": "2020-05-26T12:12:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDY0MzU3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxMzoyMFrOGabbmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxMzoyMFrOGabbmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTU5NQ==", "bodyText": "Why this static?", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365595", "createdAt": "2020-05-26T12:13:20Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDY0NTc5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxNDowMlrOGabdCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxNDowMlrOGabdCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NTk2Mw==", "bodyText": "Why use reflect? You should be able to typecast in the interceptor.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430365963", "createdAt": "2020-05-26T12:14:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDY1MzY5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxNjozMVrOGabiPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoxNzozMVrOGabkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzI5NQ==", "bodyText": "In this method, why so many try-catch? Super confusing about what you are doing. Could you explain?", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430367295", "createdAt": "2020-05-26T12:16:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void onCompletion(RecordMetadata metadata, Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzgyNQ==", "bodyText": "This class should just make sure the original callback being traced, but currently, I can't follow your point.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r430367825", "createdAt": "2020-05-26T12:17:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka;\n+\n+import org.apache.kafka.clients.producer.Callback;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * implements Callback and EnhancedInstance, for kafka callback in lambda expression\n+ */\n+public class CallbackAdapterInterceptor implements Callback, EnhancedInstance {\n+\n+    private Method method;\n+\n+    private CallbackCache callbackCache;\n+\n+    private static CallbackInterceptor CALLBACK_INTERCEPTOR = new CallbackInterceptor();\n+\n+    private ILog logger = LogManager.getLogger(CallbackAdapterInterceptor.class);\n+\n+    public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n+\n+        this.callbackCache = callbackCache;\n+        try {\n+            this.method = CallbackAdapterInterceptor.class.getMethod(\"onCompletion\", new Class[]{RecordMetadata.class, Exception.class});\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void onCompletion(RecordMetadata metadata, Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2NzI5NQ=="}, "originalCommit": {"oid": "8d784d840136f9695a89fa6c50e399dd4af3cd0d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTg1MTc4OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTozMVrOGcKtGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTozMVrOGcKtGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODY5Nw==", "bodyText": "As you have changed the scenario, you should change the expected data file, otherwise, all tests break.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r432188697", "createdAt": "2020-05-29T00:05:31Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "diffHunk": "@@ -68,12 +68,10 @@ public String kafkaCase() {\n         wrapProducer(producer -> {\n             ProducerRecord<String, String> record = new ProducerRecord<String, String>(topicName, \"testKey\", Integer.toString(1));\n             record.headers().add(\"TEST\", \"TEST\".getBytes());\n-            producer.send(record, new Callback() {\n-                @Override\n-                public void onCompletion(RecordMetadata metadata, Exception exception) {\n-                    logger.info(\"send success metadata={}\", metadata);\n-                }\n-            });\n+            Callback callback = (metadata, exception) -> {\n+                logger.info(\"send success metadata={}\", metadata);\n+            };\n+            producer.send(record, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTg1MjMxOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTo0NlrOGcKtXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDowNTo0NlrOGcKtXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODc2NA==", "bodyText": "Same here.", "url": "https://github.com/apache/skywalking/pull/4826#discussion_r432188764", "createdAt": "2020-05-29T00:05:46Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/kafka/controller/CaseController.java", "diffHunk": "@@ -134,14 +132,12 @@ public void run() {\n                         ProducerRecord<String, String> record = new ProducerRecord<String, String>(\"check\", \"checkKey\", Integer\n                             .toString(1));\n                         record.headers().add(\"CHECK\", \"CHECK\".getBytes());\n-                        producer.send(record, new Callback() {\n-                            @Override\n-                            public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n-                                if (isNull(e)) {\n-                                    KAFKA_STATUS = true;\n-                                }\n+                        Callback callback = (metadata, e) -> {\n+                            if (isNull(e)) {\n+                                KAFKA_STATUS = true;\n                             }\n-                        });\n+                        };\n+                        producer.send(record, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fef869934c7c19eb010dc3560b02baa2dc991fb1"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 169, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}