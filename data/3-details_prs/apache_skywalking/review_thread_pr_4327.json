{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzA3ODMz", "number": 4327, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMjozNTo0MlrODeN6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozNTo0MFrODe05IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDExODcxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMjozNTo0MlrOFnQacA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMjozNTo0MlrOFnQacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwNzY5Ng==", "bodyText": "Remove author, please.", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376707696", "createdAt": "2020-02-08T12:35:42Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+/**\n+ * @author: lxliuxuan Date: 2020/02/08", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2847eaee37359650774752475383723788d8daa5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDEzNTE3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzoyMzowMVrOFnQi6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTozODoyOVrOFnUJdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg2Ng==", "bodyText": "Why length==2 is required?", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709866", "createdAt": "2020-02-08T13:23:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {\n+    public static void tagParamsSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                     String key, String value) {\n+        new StringTag(key).set(span, CustomizeExpression.parseExpression(value, context));\n+    }\n+\n+    public static void tagReturnSpanSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                         String key, String value) {\n+        new StringTag(key).set(span, CustomizeExpression.parseReturnExpression(value, context));\n+    }\n+\n+    public static Boolean isReturnTag(String expression) {\n+        String[] es = expression.split(\"\\\\.\");\n+        return es.length == 2 && \"returnedObj\".equals(es[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODg4Nw==", "bodyText": "because expression just support string like returnedObj.xxxxx", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768887", "createdAt": "2020-02-09T09:38:29Z", "author": {"login": "lxliuxuankb"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {\n+    public static void tagParamsSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                     String key, String value) {\n+        new StringTag(key).set(span, CustomizeExpression.parseExpression(value, context));\n+    }\n+\n+    public static void tagReturnSpanSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                         String key, String value) {\n+        new StringTag(key).set(span, CustomizeExpression.parseReturnExpression(value, context));\n+    }\n+\n+    public static Boolean isReturnTag(String expression) {\n+        String[] es = expression.split(\"\\\\.\");\n+        return es.length == 2 && \"returnedObj\".equals(es[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg2Ng=="}, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDEzNTQxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzoyMzoyM1rOFnQjAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTo0MDo0OVrOFnUKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA==", "bodyText": "Why do we need a Util at this core level?", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709890", "createdAt": "2020-02-08T13:23:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTkyOA==", "bodyText": "You are just changing a single plugin, don't change anything in the core level, unless it is really necessary. For this case, it doesn't seem so.", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709928", "createdAt": "2020-02-08T13:24:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODgxNg==", "bodyText": "because TraceAnnotationMethodInterceptor  and TagAnnotationMethodInterceptor also have some same methods, so move these method into TagUtil", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768816", "createdAt": "2020-02-09T09:37:29Z", "author": {"login": "lxliuxuankb"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODkyMg==", "bodyText": "But you moved the TagUtil into the core, that is not right.", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768922", "createdAt": "2020-02-09T09:39:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2OTAzMg==", "bodyText": "ok ,i will fix this", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376769032", "createdAt": "2020-02-09T09:40:49Z", "author": {"login": "lxliuxuankb"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+\n+public class TagUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTg5MA=="}, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDEzNjAwOnYy", "diffSide": "LEFT", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzoyNTozNVrOFnQjTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTozNzoyNlrOFnUJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTk2Ng==", "bodyText": "Why remove this method out of here?", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376709966", "createdAt": "2020-02-08T13:25:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -54,19 +54,18 @@ public void beforeMethod(\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(activeSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(activeSpan, context, tag.key(), tag.value());\n+                }\n             }\n         }\n \n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(activeSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(activeSpan, context, tag.key(), tag.value());\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODgxMg==", "bodyText": "because TraceAnnotationMethodInterceptor  and TagAnnotationMethodInterceptor also have this method, so move this method into TagUtil", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r376768812", "createdAt": "2020-02-09T09:37:26Z", "author": {"login": "lxliuxuankb"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -54,19 +54,18 @@ public void beforeMethod(\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(activeSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(activeSpan, context, tag.key(), tag.value());\n+                }\n             }\n         }\n \n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(activeSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(activeSpan, context, tag.key(), tag.value());\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwOTk2Ng=="}, "originalCommit": {"oid": "a99ccb1e0eeb5fc0db52723e1b6b44fdb4a778ea"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDk0ODQzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMzoyODoyN1rOFn8sKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMzoyODoyN1rOFn8sKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzMzEyOA==", "bodyText": "Move these two lines into the final block.", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377433128", "createdAt": "2020-02-11T03:28:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -75,6 +74,25 @@ public Object afterMethod(\n         final Object[] allArguments,\n         final Class<?>[] argumentsTypes,\n         final Object ret) {\n+        if (ret == null || !ContextManager.isActive()) {\n+            ContextManager.stopSpan();\n+            return ret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f709daeac49a6b2d940d1661bf54c8b464e416e5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDk0OTU4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/util/TagUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMzoyOTo0OFrOFn8s8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMzoyOTo0OFrOFn8s8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQzMzMzMQ==", "bodyText": "returnedObj has a specific meaning, should be adding into the document. https://github.com/apache/skywalking/blob/master/docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377433331", "createdAt": "2020-02-11T03:29:48Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/util/TagUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.util;\n+\n+import java.util.Map;\n+\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.util.CustomizeExpression;\n+import org.apache.skywalking.apm.toolkit.trace.Tag;\n+\n+public class TagUtil {\n+    public static void tagParamsSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                     final Tag tag) {\n+        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n+    }\n+\n+    public static void tagReturnSpanSpan(final AbstractSpan span, final Map<String, Object> context,\n+                                         final Tag tag) {\n+        new StringTag(tag.key()).set(span, CustomizeExpression.parseReturnExpression(tag.value(), context));\n+    }\n+\n+    public static Boolean isReturnTag(String expression) {\n+        String[] es = expression.split(\"\\\\.\");\n+        return es.length == 2 && \"returnedObj\".equals(es[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f709daeac49a6b2d940d1661bf54c8b464e416e5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjUwNDE3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozNTozMFrOFoLQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozNjoyMVrOFofIkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTg5Ng==", "bodyText": "Sorry, this is not right. This could be NPE, if ContextManager.isActive() == false, right? In #beforeMethod,  there is\nif (!ContextManager.isActive()) {\n            return;\n        }", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377671896", "createdAt": "2020-02-11T14:35:30Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -46,23 +46,47 @@ public void beforeMethod(final EnhancedInstance objInst, final Method method, fi\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(activeSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(activeSpan, context, tag);\n+                }\n             }\n         }\n \n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(activeSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(activeSpan, context, tag);\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {\n-        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n-    }\n \n     @Override\n-    public Object afterMethod(final EnhancedInstance objInst, final Method method, final Object[] allArguments,\n-        final Class<?>[] argumentsTypes, final Object ret) {\n+    public Object afterMethod(\n+        final EnhancedInstance objInst,\n+        final Method method,\n+        final Object[] allArguments,\n+        final Class<?>[] argumentsTypes,\n+        final Object ret) {\n+        try {\n+            if (ret == null || !ContextManager.isActive()) {\n+                return ret;\n+            }\n+            final AbstractSpan localSpan = ContextManager.activeSpan();\n+            final Map<String, Object> context = CustomizeExpression.evaluationReturnContext(ret);\n+            final Tags tags = method.getAnnotation(Tags.class);\n+            if (tags != null && tags.value().length > 0) {\n+                for (final Tag tag : tags.value()) {\n+                    if (TagUtil.isReturnTag(tag.value())) {\n+                        TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+                    }\n+                }\n+            }\n+            final Tag tag = method.getAnnotation(Tag.class);\n+            if (tag != null && TagUtil.isReturnTag(tag.value())) {\n+                TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+            }\n+        } finally {\n+            ContextManager.stopSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be62c8edb38c5855f0623c86a9f933ff37145092"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzQ1OQ==", "bodyText": "We don't create span in the #beforeMethod, so please remove the stopSpan() here, we  cannot stop a span by mistake here", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377997459", "createdAt": "2020-02-12T01:36:21Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TagAnnotationMethodInterceptor.java", "diffHunk": "@@ -46,23 +46,47 @@ public void beforeMethod(final EnhancedInstance objInst, final Method method, fi\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(activeSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(activeSpan, context, tag);\n+                }\n             }\n         }\n \n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(activeSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(activeSpan, context, tag);\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {\n-        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n-    }\n \n     @Override\n-    public Object afterMethod(final EnhancedInstance objInst, final Method method, final Object[] allArguments,\n-        final Class<?>[] argumentsTypes, final Object ret) {\n+    public Object afterMethod(\n+        final EnhancedInstance objInst,\n+        final Method method,\n+        final Object[] allArguments,\n+        final Class<?>[] argumentsTypes,\n+        final Object ret) {\n+        try {\n+            if (ret == null || !ContextManager.isActive()) {\n+                return ret;\n+            }\n+            final AbstractSpan localSpan = ContextManager.activeSpan();\n+            final Map<String, Object> context = CustomizeExpression.evaluationReturnContext(ret);\n+            final Tags tags = method.getAnnotation(Tags.class);\n+            if (tags != null && tags.value().length > 0) {\n+                for (final Tag tag : tags.value()) {\n+                    if (TagUtil.isReturnTag(tag.value())) {\n+                        TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+                    }\n+                }\n+            }\n+            final Tag tag = method.getAnnotation(Tag.class);\n+            if (tag != null && TagUtil.isReturnTag(tag.value())) {\n+                TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+            }\n+        } finally {\n+            ContextManager.stopSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTg5Ng=="}, "originalCommit": {"oid": "be62c8edb38c5855f0623c86a9f933ff37145092"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjUwNDY0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozNTo0MFrOFoLRMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTozNTo0MVrOFofH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTk4Ng==", "bodyText": "Same here.", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377671986", "createdAt": "2020-02-11T14:35:40Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationMethodInterceptor.java", "diffHunk": "@@ -56,24 +56,41 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(localSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(localSpan, context, tag);\n+                }\n             }\n         }\n-\n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(localSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(localSpan, context, tag);\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {\n-        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n-    }\n-\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        ContextManager.stopSpan();\n+        try {\n+            if (ret == null) {\n+                return ret;\n+            }\n+            final AbstractSpan localSpan = ContextManager.activeSpan();\n+            final Map<String, Object> context = CustomizeExpression.evaluationReturnContext(ret);\n+            final Tags tags = method.getAnnotation(Tags.class);\n+            if (tags != null && tags.value().length > 0) {\n+                for (final Tag tag : tags.value()) {\n+                    if (TagUtil.isReturnTag(tag.value())) {\n+                        TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+                    }\n+                }\n+            }\n+            final Tag tag = method.getAnnotation(Tag.class);\n+            if (tag != null && TagUtil.isReturnTag(tag.value())) {\n+                TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+            }\n+        } finally {\n+            ContextManager.stopSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be62c8edb38c5855f0623c86a9f933ff37145092"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NzMwMA==", "bodyText": "Same here.\n\nThere is no conditional creation of span in the #beforeMethod, so it's right here", "url": "https://github.com/apache/skywalking/pull/4327#discussion_r377997300", "createdAt": "2020-02-12T01:35:41Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/TraceAnnotationMethodInterceptor.java", "diffHunk": "@@ -56,24 +56,41 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         final Tags tags = method.getAnnotation(Tags.class);\n         if (tags != null && tags.value().length > 0) {\n             for (final Tag tag : tags.value()) {\n-                tagSpan(localSpan, tag, context);\n+                if (!TagUtil.isReturnTag(tag.value())) {\n+                    TagUtil.tagParamsSpan(localSpan, context, tag);\n+                }\n             }\n         }\n-\n         final Tag tag = method.getAnnotation(Tag.class);\n-        if (tag != null) {\n-            tagSpan(localSpan, tag, context);\n+        if (tag != null && !TagUtil.isReturnTag(tag.value())) {\n+            TagUtil.tagParamsSpan(localSpan, context, tag);\n         }\n     }\n \n-    private void tagSpan(final AbstractSpan span, final Tag tag, final Map<String, Object> context) {\n-        new StringTag(tag.key()).set(span, CustomizeExpression.parseExpression(tag.value(), context));\n-    }\n-\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        ContextManager.stopSpan();\n+        try {\n+            if (ret == null) {\n+                return ret;\n+            }\n+            final AbstractSpan localSpan = ContextManager.activeSpan();\n+            final Map<String, Object> context = CustomizeExpression.evaluationReturnContext(ret);\n+            final Tags tags = method.getAnnotation(Tags.class);\n+            if (tags != null && tags.value().length > 0) {\n+                for (final Tag tag : tags.value()) {\n+                    if (TagUtil.isReturnTag(tag.value())) {\n+                        TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+                    }\n+                }\n+            }\n+            final Tag tag = method.getAnnotation(Tag.class);\n+            if (tag != null && TagUtil.isReturnTag(tag.value())) {\n+                TagUtil.tagReturnSpanSpan(localSpan, context, tag);\n+            }\n+        } finally {\n+            ContextManager.stopSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTk4Ng=="}, "originalCommit": {"oid": "be62c8edb38c5855f0623c86a9f933ff37145092"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4562, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}