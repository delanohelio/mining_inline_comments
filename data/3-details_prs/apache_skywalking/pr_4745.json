{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTkyNTY0", "number": 4745, "title": "Support multiple ways to analyze segments in rest", "bodyText": "Please answer these questions before submitting pull request\n\nWhy submit this pull request?\n Bug fix\n New feature provided\n Improve performance\n\n\nNew feature or improvement\n\nSupport multiple ways to analyze segments in rest:\n\n\"/v3/segment\": single segment json\n\"/v3/segments\": segment json array", "createdAt": "2020-05-05T15:35:02Z", "url": "https://github.com/apache/skywalking/pull/4745", "merged": true, "mergeCommit": {"oid": "816878897cfb586d9c2865e36f2f5cb4be0c1482"}, "closed": true, "closedAt": "2020-05-08T14:54:37Z", "author": {"login": "mrproliu"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceQZ5vgH2gAyNDEzNTkyNTY0OjdjZTBiYjlmNzVkYTRmY2JhN2E1NjU0Y2MzNTU1NTUyNzM3YWM1MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfR185gFqTQwODIzNTM2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7ce0bb9f75da4fcba7a5654cc3555552737ac534", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/7ce0bb9f75da4fcba7a5654cc3555552737ac534", "committedDate": "2020-05-05T09:10:35Z", "message": "support multiple segments analyze"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d496793812b2e5d1bd78536446a78070f49888d1", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/d496793812b2e5d1bd78536446a78070f49888d1", "committedDate": "2020-05-05T15:25:44Z", "message": "Support multiple ways to analyze segment data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "committedDate": "2020-05-05T15:35:40Z", "message": "Merge branch 'master' into rest-segment-parse-multi-lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTE2MzQ3", "url": "https://github.com/apache/skywalking/pull/4745#pullrequestreview-405916347", "createdAt": "2020-05-05T15:44:13Z", "commit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NDoxM1rOGQvnqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NDozMFrOGQvocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDYwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"/v3/segmentList\";\n          \n          \n            \n                    return \"/v3/segments.json\";", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420210602", "createdAt": "2020-05-05T15:44:13Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListJsonServletHandler.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserListenerManager;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Parsing segments from list json\n+ */\n+public class TraceSegmentReportListJsonServletHandler extends TraceSegmentReportBaseServletHandler {\n+\n+    private final Gson gson = new Gson();\n+\n+    public TraceSegmentReportListJsonServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n+        super(moduleManager, listenerManager, config);\n+    }\n+\n+    @Override\n+    protected List<SegmentObject> parseSegments(HttpServletRequest request) throws IOException {\n+        BufferedReader reader = request.getReader();\n+        String line;\n+        StringBuilder stringBuilder = new StringBuilder();\n+        while ((line = reader.readLine()) != null) {\n+            stringBuilder.append(line);\n+        }\n+\n+        final JsonArray array = gson.fromJson(stringBuilder.toString(), JsonArray.class);\n+        if (array.size() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        final ArrayList<SegmentObject> segments = new ArrayList<>(array.size());\n+        for (JsonElement element : array) {\n+            SegmentObject.Builder upstreamSegmentBuilder = SegmentObject.newBuilder();\n+            ProtoBufJsonUtils.fromJSON(element.toString(), upstreamSegmentBuilder);\n+            segments.add(upstreamSegmentBuilder.build());\n+        }\n+        return segments;\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v3/segmentList\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDgwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"/v3/segments\";\n          \n          \n            \n                    return \"/v3/segments.jsonl\";", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420210803", "createdAt": "2020-05-05T15:44:30Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportMultipleLineServletHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserListenerManager;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Parsing segments from multiple lines\n+ */\n+public class TraceSegmentReportMultipleLineServletHandler extends TraceSegmentReportBaseServletHandler {\n+\n+    public TraceSegmentReportMultipleLineServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n+        super(moduleManager, listenerManager, config);\n+    }\n+\n+    @Override\n+    protected List<SegmentObject> parseSegments(HttpServletRequest req) throws IOException {\n+        final List<SegmentObject> segments = new ArrayList<>();\n+        BufferedReader reader = req.getReader();\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            SegmentObject.Builder upstreamSegmentBuilder = SegmentObject.newBuilder();\n+            ProtoBufJsonUtils.fromJSON(line, upstreamSegmentBuilder);\n+            segments.add(upstreamSegmentBuilder.build());\n+        }\n+\n+        return segments;\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v3/segments\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjM0ODYy", "url": "https://github.com/apache/skywalking/pull/4745#pullrequestreview-406234862", "createdAt": "2020-05-06T00:02:59Z", "commit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDowMzowMFrOGQ_6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDowMzoyM1rOGQ_7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzYzMw==", "bodyText": "I don't think this is a good example. This is not an official format in JSON.", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420477633", "createdAt": "2020-05-06T00:03:00Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.none.MetricsCreatorNoop;\n+import org.apache.skywalking.oap.server.telemetry.none.NoneTelemetryProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.internal.util.reflection.Whitebox;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockIgnore({\"javax.management.*\"})\n+public class TraceSegmentReportServletHandlerTest {\n+\n+    @Mock\n+    private HttpServletRequest request;\n+    @Mock\n+    private ModuleManager moduleManager;\n+    @Mock\n+    private NoneTelemetryProvider telemetryProvider;\n+\n+    @Before\n+    public void init() throws IOException {\n+        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n+        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n+        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n+\n+        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n+            .thenReturn(new MetricsCreatorNoop());\n+    }\n+\n+    @Test\n+    public void testSingle() throws IOException {\n+        String singleJson = \"{\" +\n+            \"   \\\"traceId\\\":\\\"c480c738-b628-490d-ace7-69f7030d77cb\\\",\" +\n+            \"   \\\"spans\\\":[\" +\n+            \"       {\\\"operationName\\\":\\\"\\\\/ingress\\\"}\" +\n+            \"   ]\" +\n+            \"}\";\n+\n+        final TraceSegmentReportSingleServletHandler singleServletHandler =\n+            new TraceSegmentReportSingleServletHandler(moduleManager, null, null);\n+\n+        when(request.getReader()).thenReturn(new BufferedReader(new StringReader(singleJson)));\n+        final List<SegmentObject> segmentObjects = singleServletHandler.parseSegments(request);\n+        Assert.assertEquals(segmentObjects.size(), 1);\n+    }\n+\n+    @Test\n+    public void testMultipleLine() throws IOException {\n+        String multipleLineJson = \"{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzcyOA==", "bodyText": "And isn't better than the official JSON list way.", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420477728", "createdAt": "2020-05-06T00:03:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.none.MetricsCreatorNoop;\n+import org.apache.skywalking.oap.server.telemetry.none.NoneTelemetryProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.internal.util.reflection.Whitebox;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockIgnore({\"javax.management.*\"})\n+public class TraceSegmentReportServletHandlerTest {\n+\n+    @Mock\n+    private HttpServletRequest request;\n+    @Mock\n+    private ModuleManager moduleManager;\n+    @Mock\n+    private NoneTelemetryProvider telemetryProvider;\n+\n+    @Before\n+    public void init() throws IOException {\n+        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n+        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n+        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n+\n+        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n+            .thenReturn(new MetricsCreatorNoop());\n+    }\n+\n+    @Test\n+    public void testSingle() throws IOException {\n+        String singleJson = \"{\" +\n+            \"   \\\"traceId\\\":\\\"c480c738-b628-490d-ace7-69f7030d77cb\\\",\" +\n+            \"   \\\"spans\\\":[\" +\n+            \"       {\\\"operationName\\\":\\\"\\\\/ingress\\\"}\" +\n+            \"   ]\" +\n+            \"}\";\n+\n+        final TraceSegmentReportSingleServletHandler singleServletHandler =\n+            new TraceSegmentReportSingleServletHandler(moduleManager, null, null);\n+\n+        when(request.getReader()).thenReturn(new BufferedReader(new StringReader(singleJson)));\n+        final List<SegmentObject> segmentObjects = singleServletHandler.parseSegments(request);\n+        Assert.assertEquals(segmentObjects.size(), 1);\n+    }\n+\n+    @Test\n+    public void testMultipleLine() throws IOException {\n+        String multipleLineJson = \"{\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzYzMw=="}, "originalCommit": {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "807361f55357e2edc5d4e8dff912dd8e18cd6e49", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/807361f55357e2edc5d4e8dff912dd8e18cd6e49", "committedDate": "2020-05-06T05:24:50Z", "message": "Change to support single or list of the segment data, add the document"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MzM3Mzc5", "url": "https://github.com/apache/skywalking/pull/4745#pullrequestreview-406337379", "createdAt": "2020-05-06T06:42:05Z", "commit": {"oid": "807361f55357e2edc5d4e8dff912dd8e18cd6e49"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0MjowNlrOGRF09w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0MzoxNlrOGRF2pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDQ1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Report service instance\n          \n          \n            \n            - Report service instance properties", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420574455", "createdAt": "2020-05-06T06:42:06Z", "author": {"login": "wu-sheng"}, "path": "docs/en/protocols/HTTP-API-Protocol.md", "diffHunk": "@@ -1,6 +1,186 @@\n # HTTP API Protocol\n \n HTTP API Protocol defines the API data format, including api request and response data format.\n+They use the HTTP1.1 wrapper of the official [SkyWalking Trace Data Protocol v3](Trace-Data-Protocol-v3.md). Read it for more details.\n \n-HTTP APIs are the HTTP1.1 wrapper of the official [SkyWalking Trace Data Protocol v3](Trace-Data-Protocol-v3.md). Read it for more details.\n+## Instance Management\n \n+Detail information about data format can be found in [Instance Management](https://github.com/apache/skywalking-data-collect-protocol/blob/master/management/Management.proto).\n+\n+- Report service instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "807361f55357e2edc5d4e8dff912dd8e18cd6e49"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There has two way to report segment data.\n          \n          \n            \n            There are two ways to report segment data, one segment per request or segment array in the bulk mode.", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420574884", "createdAt": "2020-05-06T06:43:16Z", "author": {"login": "wu-sheng"}, "path": "docs/en/protocols/HTTP-API-Protocol.md", "diffHunk": "@@ -1,6 +1,186 @@\n # HTTP API Protocol\n \n HTTP API Protocol defines the API data format, including api request and response data format.\n+They use the HTTP1.1 wrapper of the official [SkyWalking Trace Data Protocol v3](Trace-Data-Protocol-v3.md). Read it for more details.\n \n-HTTP APIs are the HTTP1.1 wrapper of the official [SkyWalking Trace Data Protocol v3](Trace-Data-Protocol-v3.md). Read it for more details.\n+## Instance Management\n \n+Detail information about data format can be found in [Instance Management](https://github.com/apache/skywalking-data-collect-protocol/blob/master/management/Management.proto).\n+\n+- Report service instance\n+\n+> POST http://localhost:12800/v3/management/reportProperties\n+\n+Input:\n+\n+```json\n+{\n+\t\"service\": \"User Service Name\",\n+\t\"serviceInstance\": \"User Service Instance Name\",\n+\t\"properties\": [{\n+\t\t\"language\": \"Lua\"\n+\t}]\n+}\n+```\n+\n+Output JSON Array:\n+\n+```json\n+{}\n+```\n+\n+- Service instance ping\n+\n+> POST http://localhost:12800/v3/management/keepAlive\n+\n+Input:\n+\n+```json\n+{\n+\t\"service\": \"User Service Name\",\n+\t\"serviceInstance\": \"User Service Instance Name\"\n+}\n+```\n+\n+OutPut:\n+\n+```json\n+{}\n+```\n+\n+## Trace Report\n+\n+Detail information about data format can be found in [Instance Management](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Tracing.proto).\n+There has two way to report segment data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "807361f55357e2edc5d4e8dff912dd8e18cd6e49"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec15f33eead6619119b194f2672071df0d43b241", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/ec15f33eead6619119b194f2672071df0d43b241", "committedDate": "2020-05-08T04:58:38Z", "message": "fix document and change the lua agent commit id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9ddb40e818a63b684a4755047fbb6f85c7960c", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/dc9ddb40e818a63b684a4755047fbb6f85c7960c", "committedDate": "2020-05-08T05:09:42Z", "message": "Merge branch 'master' into rest-segment-parse-multi-lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a9a67d12289214325a6eef8659fc68adfa5a60", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/02a9a67d12289214325a6eef8659fc68adfa5a60", "committedDate": "2020-05-08T13:23:04Z", "message": "Merge branch 'master' into rest-segment-parse-multi-lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MjM1MzYx", "url": "https://github.com/apache/skywalking/pull/4745#pullrequestreview-408235361", "createdAt": "2020-05-08T13:25:03Z", "commit": {"oid": "02a9a67d12289214325a6eef8659fc68adfa5a60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2375, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}