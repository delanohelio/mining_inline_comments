{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTg3OTY4", "number": 4307, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0Njo0NlrODcdLpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0OToxOFrODcdMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY0ODM2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0Njo0NlrOFkgvqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0Njo0NlrOFkgvqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTU0Ng==", "bodyText": "Quick return to reduce nested levels", "url": "https://github.com/apache/skywalking/pull/4307#discussion_r373829546", "createdAt": "2020-02-02T08:46:46Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "diffHunk": "@@ -108,53 +103,36 @@ String serialize(HeaderVersion version) {\n      * @param text carries {@link #traceSegmentId} and {@link #spanId}, with '|' split.\n      */\n     ContextCarrier deserialize(String text, HeaderVersion version) {\n-        if (text != null) {\n-            // if this carrier is initialized by v1 or v2, don't do deserialize again for performance.\n-            if (this.isValid(HeaderVersion.v1) || this.isValid(HeaderVersion.v2)) {\n-                return this;\n-            }\n-            if (HeaderVersion.v1.equals(version)) {\n-                String[] parts = text.split(\"\\\\|\", 8);\n-                if (parts.length == 8) {\n-                    try {\n-                        this.traceSegmentId = new ID(parts[0]);\n-                        this.spanId = Integer.parseInt(parts[1]);\n-                        this.parentServiceInstanceId = Integer.parseInt(parts[2]);\n-                        this.entryServiceInstanceId = Integer.parseInt(parts[3]);\n-                        this.peerHost = parts[4];\n-                        this.entryEndpointName = parts[5];\n-                        this.parentEndpointName = parts[6];\n-                        this.primaryDistributedTraceId = new PropagatedTraceId(parts[7]);\n-                    } catch (NumberFormatException e) {\n-\n-                    }\n-                }\n-            } else if (HeaderVersion.v2.equals(version)) {\n-                String[] parts = text.split(\"\\\\-\", 9);\n-                if (parts.length == 9) {\n-                    try {\n-                        // parts[0] is sample flag, always trace if header exists.\n-                        this.primaryDistributedTraceId = new PropagatedTraceId(Base64.decode2UTFString(parts[1]));\n-                        this.traceSegmentId = new ID(Base64.decode2UTFString(parts[2]));\n-                        this.spanId = Integer.parseInt(parts[3]);\n-                        this.parentServiceInstanceId = Integer.parseInt(parts[4]);\n-                        this.entryServiceInstanceId = Integer.parseInt(parts[5]);\n-                        this.peerHost = Base64.decode2UTFString(parts[6]);\n-                        this.entryEndpointName = Base64.decode2UTFString(parts[7]);\n-                        this.parentEndpointName = Base64.decode2UTFString(parts[8]);\n-                    } catch (NumberFormatException e) {\n-\n-                    }\n+        if (text == null) {\n+            return this;\n+        }\n+        // if this carrier is initialized by v2, don't do deserialize again for performance.\n+        if (this.isValid(HeaderVersion.v2)) {\n+            return this;\n+        }\n+        if (HeaderVersion.v2 == version) {\n+            String[] parts = text.split(\"-\", 9);\n+            if (parts.length == 9) {\n+                try {\n+                    // parts[0] is sample flag, always trace if header exists.\n+                    this.primaryDistributedTraceId = new PropagatedTraceId(Base64.decode2UTFString(parts[1]));\n+                    this.traceSegmentId = new ID(Base64.decode2UTFString(parts[2]));\n+                    this.spanId = Integer.parseInt(parts[3]);\n+                    this.parentServiceInstanceId = Integer.parseInt(parts[4]);\n+                    this.entryServiceInstanceId = Integer.parseInt(parts[5]);\n+                    this.peerHost = Base64.decode2UTFString(parts[6]);\n+                    this.entryEndpointName = Base64.decode2UTFString(parts[7]);\n+                    this.parentEndpointName = Base64.decode2UTFString(parts[8]);\n+                } catch (NumberFormatException ignored) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY0OTI4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0OToxMVrOFkgwKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTowNjozOVrOFkg0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTY3Mw==", "bodyText": "Don't throw an exception in agent core API. Output a warning log.", "url": "https://github.com/apache/skywalking/pull/4307#discussion_r373829673", "createdAt": "2020-02-02T08:49:11Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "diffHunk": "@@ -108,53 +103,36 @@ String serialize(HeaderVersion version) {\n      * @param text carries {@link #traceSegmentId} and {@link #spanId}, with '|' split.\n      */\n     ContextCarrier deserialize(String text, HeaderVersion version) {\n-        if (text != null) {\n-            // if this carrier is initialized by v1 or v2, don't do deserialize again for performance.\n-            if (this.isValid(HeaderVersion.v1) || this.isValid(HeaderVersion.v2)) {\n-                return this;\n-            }\n-            if (HeaderVersion.v1.equals(version)) {\n-                String[] parts = text.split(\"\\\\|\", 8);\n-                if (parts.length == 8) {\n-                    try {\n-                        this.traceSegmentId = new ID(parts[0]);\n-                        this.spanId = Integer.parseInt(parts[1]);\n-                        this.parentServiceInstanceId = Integer.parseInt(parts[2]);\n-                        this.entryServiceInstanceId = Integer.parseInt(parts[3]);\n-                        this.peerHost = parts[4];\n-                        this.entryEndpointName = parts[5];\n-                        this.parentEndpointName = parts[6];\n-                        this.primaryDistributedTraceId = new PropagatedTraceId(parts[7]);\n-                    } catch (NumberFormatException e) {\n-\n-                    }\n-                }\n-            } else if (HeaderVersion.v2.equals(version)) {\n-                String[] parts = text.split(\"\\\\-\", 9);\n-                if (parts.length == 9) {\n-                    try {\n-                        // parts[0] is sample flag, always trace if header exists.\n-                        this.primaryDistributedTraceId = new PropagatedTraceId(Base64.decode2UTFString(parts[1]));\n-                        this.traceSegmentId = new ID(Base64.decode2UTFString(parts[2]));\n-                        this.spanId = Integer.parseInt(parts[3]);\n-                        this.parentServiceInstanceId = Integer.parseInt(parts[4]);\n-                        this.entryServiceInstanceId = Integer.parseInt(parts[5]);\n-                        this.peerHost = Base64.decode2UTFString(parts[6]);\n-                        this.entryEndpointName = Base64.decode2UTFString(parts[7]);\n-                        this.parentEndpointName = Base64.decode2UTFString(parts[8]);\n-                    } catch (NumberFormatException e) {\n-\n-                    }\n+        if (text == null) {\n+            return this;\n+        }\n+        // if this carrier is initialized by v2, don't do deserialize again for performance.\n+        if (this.isValid(HeaderVersion.v2)) {\n+            return this;\n+        }\n+        if (HeaderVersion.v2 == version) {\n+            String[] parts = text.split(\"-\", 9);\n+            if (parts.length == 9) {\n+                try {\n+                    // parts[0] is sample flag, always trace if header exists.\n+                    this.primaryDistributedTraceId = new PropagatedTraceId(Base64.decode2UTFString(parts[1]));\n+                    this.traceSegmentId = new ID(Base64.decode2UTFString(parts[2]));\n+                    this.spanId = Integer.parseInt(parts[3]);\n+                    this.parentServiceInstanceId = Integer.parseInt(parts[4]);\n+                    this.entryServiceInstanceId = Integer.parseInt(parts[5]);\n+                    this.peerHost = Base64.decode2UTFString(parts[6]);\n+                    this.entryEndpointName = Base64.decode2UTFString(parts[7]);\n+                    this.parentEndpointName = Base64.decode2UTFString(parts[8]);\n+                } catch (NumberFormatException ignored) {\n+\n                 }\n-            } else {\n-                throw new IllegalArgumentException(\"Unimplemented header version.\" + version);\n             }\n         }\n-        return this;\n+        throw new IllegalArgumentException(\"Unimplemented header version.\" + version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDczMQ==", "bodyText": "Just double check the original codes, the exception statement should never be reached, I simply remove them", "url": "https://github.com/apache/skywalking/pull/4307#discussion_r373830731", "createdAt": "2020-02-02T09:06:39Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "diffHunk": "@@ -108,53 +103,36 @@ String serialize(HeaderVersion version) {\n      * @param text carries {@link #traceSegmentId} and {@link #spanId}, with '|' split.\n      */\n     ContextCarrier deserialize(String text, HeaderVersion version) {\n-        if (text != null) {\n-            // if this carrier is initialized by v1 or v2, don't do deserialize again for performance.\n-            if (this.isValid(HeaderVersion.v1) || this.isValid(HeaderVersion.v2)) {\n-                return this;\n-            }\n-            if (HeaderVersion.v1.equals(version)) {\n-                String[] parts = text.split(\"\\\\|\", 8);\n-                if (parts.length == 8) {\n-                    try {\n-                        this.traceSegmentId = new ID(parts[0]);\n-                        this.spanId = Integer.parseInt(parts[1]);\n-                        this.parentServiceInstanceId = Integer.parseInt(parts[2]);\n-                        this.entryServiceInstanceId = Integer.parseInt(parts[3]);\n-                        this.peerHost = parts[4];\n-                        this.entryEndpointName = parts[5];\n-                        this.parentEndpointName = parts[6];\n-                        this.primaryDistributedTraceId = new PropagatedTraceId(parts[7]);\n-                    } catch (NumberFormatException e) {\n-\n-                    }\n-                }\n-            } else if (HeaderVersion.v2.equals(version)) {\n-                String[] parts = text.split(\"\\\\-\", 9);\n-                if (parts.length == 9) {\n-                    try {\n-                        // parts[0] is sample flag, always trace if header exists.\n-                        this.primaryDistributedTraceId = new PropagatedTraceId(Base64.decode2UTFString(parts[1]));\n-                        this.traceSegmentId = new ID(Base64.decode2UTFString(parts[2]));\n-                        this.spanId = Integer.parseInt(parts[3]);\n-                        this.parentServiceInstanceId = Integer.parseInt(parts[4]);\n-                        this.entryServiceInstanceId = Integer.parseInt(parts[5]);\n-                        this.peerHost = Base64.decode2UTFString(parts[6]);\n-                        this.entryEndpointName = Base64.decode2UTFString(parts[7]);\n-                        this.parentEndpointName = Base64.decode2UTFString(parts[8]);\n-                    } catch (NumberFormatException e) {\n-\n-                    }\n+        if (text == null) {\n+            return this;\n+        }\n+        // if this carrier is initialized by v2, don't do deserialize again for performance.\n+        if (this.isValid(HeaderVersion.v2)) {\n+            return this;\n+        }\n+        if (HeaderVersion.v2 == version) {\n+            String[] parts = text.split(\"-\", 9);\n+            if (parts.length == 9) {\n+                try {\n+                    // parts[0] is sample flag, always trace if header exists.\n+                    this.primaryDistributedTraceId = new PropagatedTraceId(Base64.decode2UTFString(parts[1]));\n+                    this.traceSegmentId = new ID(Base64.decode2UTFString(parts[2]));\n+                    this.spanId = Integer.parseInt(parts[3]);\n+                    this.parentServiceInstanceId = Integer.parseInt(parts[4]);\n+                    this.entryServiceInstanceId = Integer.parseInt(parts[5]);\n+                    this.peerHost = Base64.decode2UTFString(parts[6]);\n+                    this.entryEndpointName = Base64.decode2UTFString(parts[7]);\n+                    this.parentEndpointName = Base64.decode2UTFString(parts[8]);\n+                } catch (NumberFormatException ignored) {\n+\n                 }\n-            } else {\n-                throw new IllegalArgumentException(\"Unimplemented header version.\" + version);\n             }\n         }\n-        return this;\n+        throw new IllegalArgumentException(\"Unimplemented header version.\" + version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTY3Mw=="}, "originalCommit": null, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY0OTMzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0OToxOFrOFkgwLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODo0OToxOFrOFkgwLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTY3OA==", "bodyText": "Same here.", "url": "https://github.com/apache/skywalking/pull/4307#discussion_r373829678", "createdAt": "2020-02-02T08:49:18Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "diffHunk": "@@ -163,27 +141,16 @@ public boolean isValid() {\n      * @return true for unbroken {@link ContextCarrier} or no-initialized. Otherwise, false;\n      */\n     boolean isValid(HeaderVersion version) {\n-        if (HeaderVersion.v1.equals(version)) {\n-            return traceSegmentId != null\n-                && traceSegmentId.isValid()\n-                && getSpanId() > -1\n-                && parentServiceInstanceId != DictionaryUtil.nullValue()\n-                && entryServiceInstanceId != DictionaryUtil.nullValue()\n-                && !StringUtil.isEmpty(peerHost)\n-                && !StringUtil.isEmpty(entryEndpointName)\n-                && !StringUtil.isEmpty(parentEndpointName)\n-                && primaryDistributedTraceId != null;\n-        } else if (HeaderVersion.v2.equals(version)) {\n+        if (HeaderVersion.v2 == version) {\n             return traceSegmentId != null\n                 && traceSegmentId.isValid()\n                 && getSpanId() > -1\n                 && parentServiceInstanceId != DictionaryUtil.nullValue()\n                 && entryServiceInstanceId != DictionaryUtil.nullValue()\n                 && !StringUtil.isEmpty(peerHost)\n                 && primaryDistributedTraceId != null;\n-        } else {\n-            throw new IllegalArgumentException(\"Unimplemented header version.\" + version);\n         }\n+        throw new IllegalArgumentException(\"Unimplemented header version.\" + version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}