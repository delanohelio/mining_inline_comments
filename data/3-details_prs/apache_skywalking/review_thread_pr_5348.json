{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MzE4NzE5", "number": 5348, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxODo1M1rOEZY5UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0OTozNlrOEaChzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU3NzQ0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxODo1M1rOHCK72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo1Nzo0MFrOHCMT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODM2Mg==", "bodyText": "Use include, rather than exclude.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472038362", "createdAt": "2020-08-18T09:18:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +38,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should not\n+             * collect, this is for security purpose, values must be lowed case\n+             */\n+            public static List<String> EXCLUDE_HTTP_HEADERS = Arrays.asList(\"cookie\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60af67296c65f3e6cdc088c0bc611e882d77f67"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MDg5Nw==", "bodyText": "You never know what are in the headers, and default this should be OFF.\nYou also need to update the mvc plugin tests(not just UT), read the last section of plugin dev doc, that is about testing the agent in the real env. Then after this is OFF in default, you need to enhance that case, enable header collection and make tests passed.\nCurrently, as the default ON, the Spring related plugin tests will be failure.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472040897", "createdAt": "2020-08-18T09:23:08Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +38,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should not\n+             * collect, this is for security purpose, values must be lowed case\n+             */\n+            public static List<String> EXCLUDE_HTTP_HEADERS = Arrays.asList(\"cookie\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODM2Mg=="}, "originalCommit": {"oid": "a60af67296c65f3e6cdc088c0bc611e882d77f67"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2MDkwNQ==", "bodyText": "ok let me check", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472060905", "createdAt": "2020-08-18T09:57:40Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +38,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should not\n+             * collect, this is for security purpose, values must be lowed case\n+             */\n+            public static List<String> EXCLUDE_HTTP_HEADERS = Arrays.asList(\"cookie\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODM2Mg=="}, "originalCommit": {"oid": "a60af67296c65f3e6cdc088c0bc611e882d77f67"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU4MjQyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMDoxMVrOHCK-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMDoxMVrOHCK-2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTEzMA==", "bodyText": "Basically, I don't we don't need override=true. Do you have case to write headers more than once?", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472039130", "createdAt": "2020-08-18T09:20:11Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java", "diffHunk": "@@ -83,6 +83,8 @@ private Tags() {\n         public static final StringTag PARAMS = new StringTag(11, \"http.params\", true);\n \n         public static final StringTag BODY = new StringTag(13, \"http.body\");\n+\n+        public static final StringTag HEADERS = new StringTag(14, \"http.headers\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60af67296c65f3e6cdc088c0bc611e882d77f67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU4NDY0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMDo0NVrOHCLANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMDo0NVrOHCLANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTQ3Ng==", "bodyText": "This should be in Before and clear in the After.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472039476", "createdAt": "2020-08-18T09:20:45Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java", "diffHunk": "@@ -300,6 +303,37 @@ public void handleCase() throws Throwable {\n         SpanAssert.assertException(logDataEntities.get(0), RuntimeException.class);\n     }\n \n+    @Test\n+    public void testGetWithRequestHeaderCollected() throws Throwable {\n+        SpringMVCPluginConfig.Plugin.SpringMVC.COLLECT_HTTP_HEADERS = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60af67296c65f3e6cdc088c0bc611e882d77f67"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIyNjkxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyODo0NVrOHCRHEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxNzo0N1rOHCZf1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg==", "bodyText": "Why modify this", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472139536", "createdAt": "2020-08-18T12:28:45Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NDcxNg==", "bodyText": "grammer wrong", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472254716", "createdAt": "2020-08-18T14:47:36Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MDg1OA==", "bodyText": "What do you mean grammer wrong? is added is a correct expression.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472270858", "createdAt": "2020-08-18T15:09:11Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MjQxNA==", "bodyText": "I think we should use , was added , or is add,  the grammer check is wrong in IDEA", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472272414", "createdAt": "2020-08-18T15:11:31Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NTAyNQ==", "bodyText": "soory, my fault will revert this change", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472275025", "createdAt": "2020-08-18T15:15:03Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NTExNQ==", "bodyText": "I don't think so. The comments don't use past tense, because it describes the codes currently are for. Also, this is the object to be added, so clearly, is added is correct.\nI don't know why the IDE says so, but from my understanding in English, it is not an issue. IDE is not the standard for a speaking language.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472275115", "createdAt": "2020-08-18T15:15:10Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Njk1MA==", "bodyText": "yes you are right", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472276950", "createdAt": "2020-08-18T15:17:47Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIyNzg0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyOTowNFrOHCRHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0NzoxOVrOHCYIFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTY5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         * add for the sake of performance\n          \n          \n            \n                         * added for the sake of performance", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472139699", "createdAt": "2020-08-18T12:29:04Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NDQ4NQ==", "bodyText": "fix grammer wrong", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472254485", "createdAt": "2020-08-18T14:47:19Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTY5OQ=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIzNDI3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMDozOFrOHCRLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTowMjo0MVrOHCY16w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MDY0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        /**\n          \n          \n            \n                         * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should be\n          \n          \n            \n                         * collect, this is for security purpose, values must be lowed case\n          \n          \n            \n                         */\n          \n          \n            \n                        /**\n          \n          \n            \n                         * When {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, it controls what header data should be\n          \n          \n            \n                         * collected, this is for security purpose, values must be lower case\n          \n          \n            \n                         */", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472140641", "createdAt": "2020-08-18T12:30:38Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should be\n+             * collect, this is for security purpose, values must be lowed case\n+             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2NjIxOQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472266219", "createdAt": "2020-08-18T15:02:41Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should be\n+             * collect, this is for security purpose, values must be lowed case\n+             */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MDY0MQ=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTI1NTAxOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozNTozNVrOHCRYlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozODozNVrOHCRkRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDAyMw==", "bodyText": "COLLECT_HTTP_PARAMS <- copy/paste issue.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472144023", "createdAt": "2020-08-18T12:35:35Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |\n+`plugin.http.http_headers_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is added for the sake of performance.  | `1024` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NzAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `plugin.http.http_headers_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is added for the sake of performance.  | `1024` |\n          \n          \n            \n            `plugin.http.http_headers_length_threshold`| When `include_http_headers` declares header names, this threshold controls the length limitation of all header values. Note. this config item is added for the sake of performance.  | `1024` |", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472147013", "createdAt": "2020-08-18T12:38:35Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |\n+`plugin.http.http_headers_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is added for the sake of performance.  | `1024` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDAyMw=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTI1ODAwOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozNjowNlrOHCRalA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxOTozNVrOHCZkkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDUzMg==", "bodyText": "This is not necessary. header collecting should work once the include_http_headers not empty.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472144532", "createdAt": "2020-08-18T12:36:06Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NTExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472145116", "createdAt": "2020-08-18T12:36:41Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDUzMg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3ODE2Mw==", "bodyText": "that's ok for me", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472278163", "createdAt": "2020-08-18T15:19:35Z", "author": {"login": "xbkaishui"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDUzMg=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTI4MzMzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjo0MDoxNlrOHCRq3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxOToyMFrOHCZjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0ODcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `plugin.http.include_http_headers`| When `COLLECT_HTTP_PARAMS` is enabled, control what header data should collect, this is for security purpose, values must be lowed case,multi values split by ,  | `` |\n          \n          \n            \n            `plugin.http.include_http_headers`| Set the header names, which should be collected by the plugin. Header name must follow `javax.servlet.http` definition. Multiple names should be split by comma.  | ``(No header would be collected) |", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472148701", "createdAt": "2020-08-18T12:40:16Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |\n+`plugin.http.http_headers_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.http.include_http_headers`| When `COLLECT_HTTP_PARAMS` is enabled, control what header data should collect, this is for security purpose, values must be lowed case,multi values split by ,  | `` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Nzk2NQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472277965", "createdAt": "2020-08-18T15:19:20Z", "author": {"login": "xbkaishui"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,9 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.springmvc.collect_http_headers`| This config item controls that whether the SpringMVC plugin should collect the headers of the request, activate implicitly in the profiled trace. | `false` |\n+`plugin.http.http_headers_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.http.include_http_headers`| When `COLLECT_HTTP_PARAMS` is enabled, control what header data should collect, this is for security purpose, values must be lowed case,multi values split by ,  | `` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0ODcwMQ=="}, "originalCommit": {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjE4MTI1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTo0MTowN1rOHCaieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo1MDo1NlrOHCqf-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5NDAxMA==", "bodyText": "Please use the Array list rather than Map. The map is a heavy data structure, it costs more CPU, memory, and has more chances to trigger GC", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472294010", "createdAt": "2020-08-18T15:41:07Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +221,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final Map<String, String[]> headersMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NTUxNQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472555515", "createdAt": "2020-08-18T23:50:56Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +221,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final Map<String, String[]> headersMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5NDAxMA=="}, "originalCommit": {"oid": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA3OTQ3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozODo0M1rOHDKkIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozODo0M1rOHDKkIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MDg2NQ==", "bodyText": "There is CollectionUtil#isEmpty, you should use directly.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473080865", "createdAt": "2020-08-19T14:38:43Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd039069ba03d6559e5451f52f458f61a42683c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA4NTc1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MDowNlrOHDKoHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MDowNlrOHDKoHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTg4NA==", "bodyText": "SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS not empty should be at the first line of the method, to provide return fast.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473081884", "createdAt": "2020-08-19T14:40:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        Collections.list(headerNames).stream().forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            String headerValue = Collections.list(headerValues).toString();\n+            if (shouldCollectHeader() && SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.contains(headerName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd039069ba03d6559e5451f52f458f61a42683c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzA5MTM4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0MToyMVrOHDKrtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0NToxMFrOHDK21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjgwNg==", "bodyText": "The whole iteration should base on SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS rather than header, because you just config a subset of all headers. An HTTP request usually includes a lot of headers.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473082806", "createdAt": "2020-08-19T14:41:21Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        Collections.list(headerNames).stream().forEach(headerName -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd039069ba03d6559e5451f52f458f61a42683c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTY1NA==", "bodyText": "ok, that's better", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473085654", "createdAt": "2020-08-19T14:45:10Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        Collections.list(headerNames).stream().forEach(headerName -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjgwNg=="}, "originalCommit": {"oid": "8cd039069ba03d6559e5451f52f458f61a42683c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzM0MzUzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTozNjo1M1rOHDNJPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoyNzoxMlrOHDiZqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyMzEzMg==", "bodyText": "Why assign again?", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473123132", "createdAt": "2020-08-19T15:36:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MTQwMw==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473471403", "createdAt": "2020-08-20T00:27:12Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyMzEzMg=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzM2OTI1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0Mjo1NlrOHDNZUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoyNzowNVrOHDiZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ==", "bodyText": "I mean check SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS, because, you were trying to collect header in profiling, which has been removed.\nI think headerNames can't be null, right?", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473127251", "createdAt": "2020-08-19T15:42:56Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2MjgxNA==", "bodyText": "I have removed the profiling collect header logic, because we can't collect all headers when INCLUDE_HTTP_HEADERS is null", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473462814", "createdAt": "2020-08-20T00:13:53Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2ODA3OA==", "bodyText": "Yes, I know. So I said you were trying to collect header in profiling, which has been removed..\nThis == null checker is pointless. This is the reason I posted a comment here.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473468078", "createdAt": "2020-08-20T00:21:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2OTMwMg==", "bodyText": "got it. will change", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473469302", "createdAt": "2020-08-20T00:23:52Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MTM2MA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473471360", "createdAt": "2020-08-20T00:27:05Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzM3MzY3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0Mzo1M1rOHDNcAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDozNToyNlrOHDiunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ==", "bodyText": "SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0, according to the comments, if the value < 0, then collect all, I don't find the codes.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473127939", "createdAt": "2020-08-19T15:43:53Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NDUwMw==", "bodyText": "sorry, can't got your point, is the logic wrong ?", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473464503", "createdAt": "2020-08-20T00:16:27Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NDIwOA==", "bodyText": "According to your comments, use negative values to keep and send the complete headers., where is the logic of that? Please consider to correct the comments or logic :) They should be matched.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473474208", "createdAt": "2020-08-20T00:31:24Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NTUzOQ==", "bodyText": "code logic is\n   tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?\n                    StringUtil.cut(tagValue, SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD) : tagValue;\n\nalso changed the comments", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473475539", "createdAt": "2020-08-20T00:33:32Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NTc0Mg==", "bodyText": "please help to check again thanks", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473475742", "createdAt": "2020-08-20T00:33:51Z", "author": {"login": "xbkaishui"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3Njc2Nw==", "bodyText": "My mistake, ignore this.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473476767", "createdAt": "2020-08-20T00:35:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzM5ODUzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0OTozNlrOHDNrkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDoyNjo1MVrOHDiY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMTkyMQ==", "bodyText": "This description is not same as the comments. Please recheck.", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473131921", "createdAt": "2020-08-19T15:49:36Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,8 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.http.http_headers_length_threshold`| When `include_http_headers` declares header names, this threshold controls the length limitation of all header values. Note. this config item is added for the sake of performance. | `2048` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MTIzMQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473471231", "createdAt": "2020-08-20T00:26:51Z", "author": {"login": "xbkaishui"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -132,6 +132,8 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`plugin.http.http_headers_length_threshold`| When `include_http_headers` declares header names, this threshold controls the length limitation of all header values. Note. this config item is added for the sake of performance. | `2048` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzMTkyMQ=="}, "originalCommit": {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}