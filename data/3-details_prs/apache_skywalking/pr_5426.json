{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTg1NzQw", "number": 5426, "title": "exception-ignore-plugin", "bodyText": "Please answer these questions before submitting a pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\nRelated issues\n#5416\n\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.\nnow logic is only adjust status when throw ignore exception,\nfirst we define 2 kinds of exception. IgnoreException and OtherException\n\nif response code is 500 and don't throw exception ,the final status is error.\nif response code is 500 and throw OtherException,the final status is errror.\nif response code is 500 and throw IgnoreException,the final status is not error.\nfor example in spring mvc, maybe throw exception would be cause response code is 500, if the exception could be ignored,the span final staus would be not error", "createdAt": "2020-09-01T16:04:33Z", "url": "https://github.com/apache/skywalking/pull/5426", "merged": true, "mergeCommit": {"oid": "29de696c42901206848575e20dc1de2ca4943e64"}, "closed": true, "closedAt": "2020-09-09T07:07:02Z", "author": {"login": "EvanLjp"}, "timelineItems": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEyMwRgFqTQ4MDI5NDQ4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHFfa6gH2gAyNDc3MTg1NzQwOjhmMmQxYzY4OTlmMzk3ODYzZjA0ZWQ0ZjdhNjk5OTNmYTZmMmU3NmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMjk0NDg4", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-480294488", "createdAt": "2020-09-02T01:27:06Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToyNzowNlrOHLODiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTo1NTo1NFrOHLPLLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjY2NA==", "bodyText": "This could be overridden, such as two exceptions happened.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481526664", "createdAt": "2020-09-02T01:27:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "diffHunk": "@@ -96,6 +99,8 @@\n      */\n     protected boolean skipAnalysis;\n \n+    protected String exceptionKind = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNzQyNA==", "bodyText": "Adding two methods in the core level is unexpected. Usually, the span APIs are not providing capabilities to read fields.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481527424", "createdAt": "2020-09-02T01:28:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java", "diffHunk": "@@ -62,6 +62,10 @@\n \n     AbstractSpan errorOccurred();\n \n+    AbstractSpan undoErrorOccurred();\n+\n+    String exceptionKind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg==", "bodyText": "We can't do this in the agent, because some classes are not in this classloader, such as in Tomcat case, all user exception classes can't be scanned.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481545006", "createdAt": "2020-09-02T01:55:54Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODY1NzE5", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-480865719", "createdAt": "2020-09-02T14:16:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNjoyMlrOHLxSpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMTo0MVrOHLxiJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMzk3Mg==", "bodyText": "Why still use annotation?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482103972", "createdAt": "2020-09-02T14:16:22Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * the annotation is declared on business exception class\n+ **/\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface IgnoredException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNDAwOQ==", "bodyText": "This depedency is not allowed, related to you are still using annotation.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482104009", "createdAt": "2020-09-02T14:16:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/pom.xml", "diffHunk": "@@ -53,6 +53,11 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.apache.skywalking</groupId>\n+            <artifactId>apm-toolkit-trace</artifactId>\n+            <version>8.2.0-SNAPSHOT</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNTQ0NQ==", "bodyText": "Should this be removed?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482105445", "createdAt": "2020-09-02T14:18:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/DefaultExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+\n+@DefaultImplementor\n+public class DefaultExceptionIgnorerService implements ExceptionIgnorer, BootService {\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void boot() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void onComplete() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void shutdown() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public AbstractTracingSpan ignore(final AbstractTracingSpan span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjc5Nw==", "bodyText": "I still don't like the idea use the annotation.\n\nThe toolkit classes are in the user class loader zone, you can't assume it is usable in the agent core.\nWhy simply use the exception name string match? This is much safer and easier than this.\nLike (2), the exception class could be cached.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482106797", "createdAt": "2020-09-02T14:20:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;\n+        if (Objects.isNull(ignoredExceptionAnnotationClass)) {\n+            return true;\n+        }\n+        if (e.getClass().isAnnotationPresent(ignoredExceptionAnnotationClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzYxMw==", "bodyText": "Accessing the field directly is not allowed.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482107613", "createdAt": "2020-09-02T14:21:15Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzk0MA==", "bodyText": "What is this? Why are you doing this?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482107940", "createdAt": "2020-09-02T14:21:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/FastFailExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+public class FastFailExceptionCheckStrategy implements ExceptionCheckStrategy {\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        return !(e instanceof Exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwOTE3MjU2", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-480917256", "createdAt": "2020-09-02T15:04:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwOTU1NzEw", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-480955710", "createdAt": "2020-09-02T15:43:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0MzowOVrOHL1hzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1ODo1MFrOHL2NMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3MzM5MQ==", "bodyText": "These two methods can be simply replaced by java.lang.Class#isAssignableFrom", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482173391", "createdAt": "2020-09-02T15:43:09Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        if (isInheritMatch(getSuperclasses(clazz), ignoredExceptionNames)) {\n+            ignoredExceptions.add(clazz);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isInheritMatch(final List<String> superclasses, final String[] ignoredExceptionNames) {\n+        for (final String superclass : superclasses) {\n+            for (final String ignoreExceptionName : ignoredExceptionNames) {\n+                if (superclass.equals(ignoreExceptionName)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    List<String> getSuperclasses(Class<? extends Throwable> clazz) {\n+        List<String> superClasses = new ArrayList<>();\n+        superClasses.add(clazz.getName());\n+        Class<?> superclass = clazz.getSuperclass();\n+        while (superclass != null && !superclass.equals(Exception.class)) {\n+            superClasses.add(superclass.getName());\n+            superclass = superclass.getSuperclass();\n+        }\n+        return superClasses;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3Njk0NQ==", "bodyText": "regex == regular expression, so there is no need to add _expression\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # plugin.springannotation.classname_match_regex_expression=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX_EXPRESSION:}\n          \n          \n            \n            # plugin.springannotation.classname_match_regex=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX:}", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482176945", "createdAt": "2020-09-02T15:48:17Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -92,7 +96,7 @@ logging.level=${SW_LOGGING_LEVEL:INFO}\n # plugin.kafka.bootstrap_servers=${SW_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}\n \n # Exclude activated plugins\n-# plugin.exclude_plugins=${SW_EXCLUDE_PLUGINS:\"\"}\n+# plugin.exclude_plugins=${SW_EXCLUDE_PLUGINS:}\n \n # Match spring bean with regex expression for classname\n-# plugin.springannotation.classname_match_regex_expression=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX_EXPRESSION:\"\"}\n+# plugin.springannotation.classname_match_regex_expression=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX_EXPRESSION:}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MDI2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    errorOccurred = errorOccurred || ServiceManager.INSTANCE.findService(StatusCheckService.class).isError(t);\n          \n          \n            \n                    if (!errorOccurred  && ServiceManager.INSTANCE.findService(StatusCheckService.class).isError(t)) {\n          \n          \n            \n                        errorOccurred();\n          \n          \n            \n                    }", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482180263", "createdAt": "2020-09-02T15:52:53Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "diffHunk": "@@ -163,6 +165,7 @@ public AbstractTracingSpan log(Throwable t) {\n         if (logs == null) {\n             logs = new LinkedList<>();\n         }\n+        errorOccurred = errorOccurred || ServiceManager.INSTANCE.findService(StatusCheckService.class).isError(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MTcxMw==", "bodyText": "Better to have a recursive depth here, for the sake of performance", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482181713", "createdAt": "2020-09-02T15:54:52Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy(),\n+            new InheriteMatchExceptionCheckStrategy()\n+        )\n+    );\n+\n+    /**\n+     * If any strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicOrStrategies;\n+    /**\n+     * If all strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicAndStrategies;\n+\n+    StatusChecker(final List<ExceptionCheckStrategy> logicOrStrategies,\n+                  final List<ExceptionCheckStrategy> logicAndStrategies) {\n+        this.logicOrStrategies = logicOrStrategies;\n+        this.logicAndStrategies = logicAndStrategies;\n+    }\n+\n+    public boolean recursiveCheckStatus(Throwable e) {\n+        if (e == null) {\n+            return true;\n+        }\n+        if (checkStatus(e)) {\n+            return recursiveCheckStatus(e.getCause());\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MzI2NQ==", "bodyText": "Typo, Inherite -> Inherit", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482183265", "createdAt": "2020-09-02T15:56:59Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NDQ5Nw==", "bodyText": "Don't need @DefaultImplementor ?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482184497", "createdAt": "2020-09-02T15:58:50Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import lombok.Getter;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck.OPEN_RECURSIVE_CHECK;\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.OFF;\n+\n+public class StatusCheckService implements BootService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwOTYwMDY3", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-480960067", "createdAt": "2020-09-02T15:47:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0Nzo0NFrOHL1uPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowNDowNFrOHL2aZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjU3Mg==", "bodyText": "This is not necessary for explicit configuration. IGNORED_EXCEPTIONS==\"\" means STATUS_CHECKER = OFF", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482176572", "createdAt": "2020-09-02T15:47:44Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +270,12 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+        public static StatusChecker STATUS_CHECKER = OFF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NzM0OA==", "bodyText": "We are doing the name match and getCause, why we need to check this? instanceof is fast in JDK8, but this is not necessary.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482177348", "createdAt": "2020-09-02T15:48:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/FastFailExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+public class FastFailExceptionCheckStrategy implements ExceptionCheckStrategy {\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        return !(e instanceof Exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzk0MA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MTUxMQ==", "bodyText": "You are facing racing conditions for this hash set.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482181511", "createdAt": "2020-09-02T15:54:37Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjE2OA==", "bodyText": "Why there is a D suffix?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482182168", "createdAt": "2020-09-02T15:55:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjY3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                NAMED_MATCH(\n          \n          \n            \n                NAME_MATCH(", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482182674", "createdAt": "2020-09-02T15:56:10Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjE2OA=="}, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4Mjk0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                INHERIT_NAMED_MATCH(\n          \n          \n            \n                HIERARCHY_MATCH(", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482182943", "createdAt": "2020-09-02T15:56:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NTI1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n          \n          \n            \n                 * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n          \n          \n            \n                 * return normal status.<br/>\n          \n          \n            \n                 * Do hierarchy check for the exception. Tag span as error status unless it is listed in Config.StatusCheck#IGNORED_EXCEPTIONS", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482185258", "createdAt": "2020-09-02T15:59:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NjkzMQ==", "bodyText": "Inherite -> hierarchy", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482186931", "createdAt": "2020-09-02T16:02:28Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NzMwMQ==", "bodyText": "If I read the codes right, InheriteMatchExceptionCheckStrategy should have included the logic of NamedMatchExceptionCheckStrategy.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482187301", "createdAt": "2020-09-02T16:03:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy(),\n+            new InheriteMatchExceptionCheckStrategy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4Nzg3OQ==", "bodyText": "Do we really this complex constructor? From the coding perspective, this should be an And ExceptionCheckStrategy(s1, s2), but I doubt whether this is really necessary for now.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482187879", "createdAt": "2020-09-02T16:04:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy(),\n+            new InheriteMatchExceptionCheckStrategy()\n+        )\n+    );\n+\n+    /**\n+     * If any strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicOrStrategies;\n+    /**\n+     * If all strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicAndStrategies;\n+\n+    StatusChecker(final List<ExceptionCheckStrategy> logicOrStrategies,\n+                  final List<ExceptionCheckStrategy> logicAndStrategies) {\n+        this.logicOrStrategies = logicOrStrategies;\n+        this.logicAndStrategies = logicAndStrategies;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "committedDate": "2020-09-03T05:53:09Z", "message": "v4: annotation with  Activation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "committedDate": "2020-09-03T05:53:09Z", "message": "v4: annotation with  Activation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "614887acfc0c778d497b6500d54c87938adbf7e0", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/614887acfc0c778d497b6500d54c87938adbf7e0", "committedDate": "2020-09-03T07:51:58Z", "message": "inject value for annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/6e9d49d667b963c4731277841ec9ab002b90deac", "committedDate": "2020-09-03T09:02:36Z", "message": "fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjUxODE3", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-481651817", "createdAt": "2020-09-03T09:16:50Z", "commit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxNjo1MFrOHMduRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyMTowMVrOHMd4ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTk0Mw==", "bodyText": "Why return directly?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482831943", "createdAt": "2020-09-03T09:16:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        ClassLoader classLoader = clazz.getClassLoader();\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        for (final String ignoredExceptionName : ignoredExceptionNames) {\n+            try {\n+                Class<?> parentClazz = Class.forName(ignoredExceptionName, true, classLoader);\n+                if (parentClazz.isAssignableFrom(clazz)) {\n+                    ignoredExceptions.add(clazz);\n+                    return false;\n+                }\n+            } catch (ClassNotFoundException ignore) {\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMjQzNw==", "bodyText": "You don't cache the checked class, so basically, most exceptions have to be checked every time, which is a performance issue.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482832437", "createdAt": "2020-09-03T09:17:42Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDYyNw==", "bodyText": "This could do instanceof EnhancedInstance, should not use reflect.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482834627", "createdAt": "2020-09-03T09:21:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        try {\n+            String value = (String) clazz.getMethod(\"getSkyWalkingDynamicField\").invoke(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/244df648cce7449378b74c853215ddd92d1f53ac", "committedDate": "2020-09-03T09:51:18Z", "message": "add cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODk1MzY3", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-481895367", "createdAt": "2020-09-03T14:27:00Z", "commit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyNzowMFrOHMpNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDozMTo1N1rOHMpcrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA==", "bodyText": "Don't provide no limitation. That could cause OOM", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020160", "createdAt": "2020-09-03T14:27:00Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,19 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDUzNQ==", "bodyText": "All negative value should be considered as 0.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020535", "createdAt": "2020-09-03T14:27:29Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,19 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA=="}, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDk4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n          \n          \n            \n                private final Set<Class<? extends Throwable>> errorStatusExceptions = new CopyOnWriteArraySet<>();", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020985", "createdAt": "2020-09-03T14:28:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjE1Ng==", "bodyText": "@kezhenxu94 @EvanLjp Any of you know the performance difference between CopyOnWriteArraySet and ConcurrentHashMap? This check is highly performance sensitive.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483022156", "createdAt": "2020-09-03T14:29:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyNDA0Nw==", "bodyText": "Use TAG_NAME.equals... to avoid NPE.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483024047", "createdAt": "2020-09-03T14:31:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n+    private static final String TAG_NAME = AnnotationMatchExceptionCheckStrategy.class.getSimpleName();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        if (exceptions.contains(clazz)) {\n+            return true;\n+        }\n+        if (e instanceof EnhancedInstance && ((EnhancedInstance) e).getSkyWalkingDynamicField().equals(TAG_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3873e713fa234b06a463b67440c4e66aee8ceb6d", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3873e713fa234b06a463b67440c4e66aee8ceb6d", "committedDate": "2020-09-03T14:36:44Z", "message": "refactor plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "committedDate": "2020-09-03T15:25:01Z", "message": "add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5f109a3977b35574536fa3f549aea9b3bbc61af", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b5f109a3977b35574536fa3f549aea9b3bbc61af", "committedDate": "2020-09-03T15:38:55Z", "message": "replace with concurrentHashMap set view to store exception class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17609aef0c56b0d7bfa1616f78f1900a70c85130", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/17609aef0c56b0d7bfa1616f78f1900a70c85130", "committedDate": "2020-09-03T15:44:38Z", "message": "remove no limit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "committedDate": "2020-09-03T17:40:39Z", "message": "add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e76a85fcf36c28817f8f8d8cf823d2dde6d50084", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/e76a85fcf36c28817f8f8d8cf823d2dde6d50084", "committedDate": "2020-09-04T00:52:42Z", "message": "Merge branch 'master' into exception-ignore-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjkyOTM0", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-482292934", "createdAt": "2020-09-04T01:02:23Z", "commit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowMjoyM1rOHM8GrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxNzoxN1rOHM8Uvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyOTcwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Ignored exception list, also affect their subclasses.\n          \n          \n            \n                     * Listed exceptions would not be treated as an error. Because in some codes, the exception is being used as a way of controlling business flow.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483329708", "createdAt": "2020-09-04T01:02:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMDEyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n          \n          \n            \n                     * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n          \n          \n            \n                     * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n          \n          \n            \n                     * as error status, also affects its subclasses.\n          \n          \n            \n                     * The max recursive depth when checking the exception traced by the agent. Typically, we don't recommend setting this more than 10, which could cause a performance issue. Negative value and 0 would be ignored, which means all exceptions would make the span tagged in error status.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483330125", "createdAt": "2020-09-04T01:04:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n+         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n+         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n+         * as error status, also affects its subclasses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMDIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static Integer MAX_RECURSIVE_DEPTH = 0;\n          \n          \n            \n                    public static Integer MAX_RECURSIVE_DEPTH = 1;", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483330206", "createdAt": "2020-09-04T01:04:32Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n+         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n+         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n+         * as error status, also affects its subclasses.\n+         */\n+        public static Integer MAX_RECURSIVE_DEPTH = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMjMzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,\n          \n          \n            \n             * The exception annotated with org.apache.skywalking.apm.toolkit.trace.IgnoredException would not set the span in the error status.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483332335", "createdAt": "2020-09-04T01:13:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+/**\n+ * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMzExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n          \n          \n            \n             * thought as an error, also affects its subclasses.\n          \n          \n            \n             * HierarchyMatchExceptionCheckStrategy does a hierarchy check for a traced exception. If it or its parent has been listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS, the error status of the span wouldn't be changed.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483333117", "createdAt": "2020-09-04T01:16:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+/**\n+ * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n+ * thought as an error, also affects its subclasses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMzMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * All exceptions will be thought of as error status.\n          \n          \n            \n             * All exceptions would make the span tagged as the error status.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483333311", "createdAt": "2020-09-04T01:17:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+/**\n+ * All exceptions will be thought of as error status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e150044fa51f3640bf62bf446633bafd8ef8681", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4e150044fa51f3640bf62bf446633bafd8ef8681", "committedDate": "2020-09-04T09:30:46Z", "message": "update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ef37bdcf45509ff7da9ce11cfaa5068c982822", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/28ef37bdcf45509ff7da9ce11cfaa5068c982822", "committedDate": "2020-09-04T09:31:14Z", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/f13cf625c380eb74538ca6608aa517bfe0b1fb1e", "committedDate": "2020-09-04T09:31:57Z", "message": "Merge remote-tracking branch 'upstream/master' into exception-ignore-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTA4NjUw", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-482508650", "createdAt": "2020-09-04T09:37:18Z", "commit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozNzoxOFrOHNG5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozNzoxOFrOHNG5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n          \n          \n            \n             * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n          \n          \n            \n             * annotated with it.\n          \n          \n            \n             * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the exception\n          \n          \n            \n             * has this annotation. \n          \n      \n    \n    \n  \n\n\nBesides the annotation supports integration, the subclasses would be also annotated with it.\n\nI think subclass status is determined by the MAX_RECURSIVE_DEPTH, isn't it?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483506537", "createdAt": "2020-09-04T09:37:18Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n+ * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n+ * annotated with it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTA5NTcx", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-482509571", "createdAt": "2020-09-04T09:38:39Z", "commit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozODozOVrOHNG8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozODozOVrOHNG8Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNzI4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The <code>StatusCheckService</code> checks the status of a exception traced in a span.\n          \n          \n            \n             * The <code>StatusCheckService</code> determines whether the span should be tagged in error status if an exception captured in the scope.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483507287", "createdAt": "2020-09-04T09:38:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import lombok.Getter;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.HIERARCHY_MATCH;\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.OFF;\n+\n+/**\n+ * The <code>StatusCheckService</code> checks the status of a exception traced in a span.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34e388b0f97394a7739c1612545f774205944b48", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/34e388b0f97394a7739c1612545f774205944b48", "committedDate": "2020-09-04T10:16:09Z", "message": "update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59b923dc4e6d304c0f25aa77ddaaff86c4325264", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/59b923dc4e6d304c0f25aa77ddaaff86c4325264", "committedDate": "2020-09-04T13:34:12Z", "message": "Merge branch 'master' into exception-ignore-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMzYxMTg1", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-482361185", "createdAt": "2020-09-04T05:08:39Z", "commit": {"oid": "e76a85fcf36c28817f8f8d8cf823d2dde6d50084"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTowODozOVrOHM_v_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTowODozOVrOHM_v_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4OTQzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while (isError && Objects.nonNull(e) && maxDepth-- != 0) {\n          \n          \n            \n                    while (isError && Objects.nonNull(e) && maxDepth-- > 0) {\n          \n      \n    \n    \n  \n\nin case the user set maxDepth = -1", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483389436", "createdAt": "2020-09-04T05:08:39Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+@AllArgsConstructor\n+public enum StatusChecker {\n+\n+    /**\n+     * All exceptions will be thought of as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy())),\n+\n+    /**\n+     * If a exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS or\n+     * tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought as an\n+     * error status, also affects its subclasses.\n+     */\n+    HIERARCHY_MATCH(Arrays.asList(\n+        new HierarchyMatchExceptionCheckStrategy(),\n+        new AnnotationMatchExceptionCheckStrategy()\n+    ));\n+\n+    private final List<ExceptionCheckStrategy> strategies;\n+\n+    public boolean checkStatus(Throwable e) {\n+        int maxDepth = Config.StatusCheck.MAX_RECURSIVE_DEPTH;\n+        boolean isError = true;\n+        while (isError && Objects.nonNull(e) && maxDepth-- != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76a85fcf36c28817f8f8d8cf823d2dde6d50084"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8e820e1070cd770e9f2bf81202da19c9ddb432f", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/e8e820e1070cd770e9f2bf81202da19c9ddb432f", "committedDate": "2020-09-04T15:22:53Z", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22269d2b26724f2ab0a1107696e4850d8baa2222", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/22269d2b26724f2ab0a1107696e4850d8baa2222", "committedDate": "2020-09-06T10:34:56Z", "message": "add ExceptionCheckContext to store the exceptions that have checked before."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0f6c87c3130c8f927ac2d0d18b6b901543b3dea", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/e0f6c87c3130c8f927ac2d0d18b6b901543b3dea", "committedDate": "2020-09-06T10:49:08Z", "message": "add exception-checker-spring-scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "603b9625d23bc2d1f95039dc23c47bad6396bc41", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/603b9625d23bc2d1f95039dc23c47bad6396bc41", "committedDate": "2020-09-06T10:52:24Z", "message": "add exception-checker-spring-scenario github workflows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4677e85e8d685e6f99506b04466cc15ef538595", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/f4677e85e8d685e6f99506b04466cc15ef538595", "committedDate": "2020-09-06T10:53:56Z", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9e5c9c1f23882282116b2667336b3ceef8464b", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/ab9e5c9c1f23882282116b2667336b3ceef8464b", "committedDate": "2020-09-06T10:54:40Z", "message": "Merge remote-tracking branch 'upstream/master' into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7c50dd3d488d5708579119c662cea359b8be50", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3d7c50dd3d488d5708579119c662cea359b8be50", "committedDate": "2020-09-06T11:06:40Z", "message": "fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a17e406cc2f82c5c4f65108942a886d677d63c0", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/8a17e406cc2f82c5c4f65108942a886d677d63c0", "committedDate": "2020-09-06T12:31:02Z", "message": "fix operation name with RequestMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f516ff565f3dbc843ccf9df5f1bf646b1716cab6", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/f516ff565f3dbc843ccf9df5f1bf646b1716cab6", "committedDate": "2020-09-07T04:35:38Z", "message": "add exception-checker-tomcat-scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be25218e98cbd337604f1744a84bb1ebda37c935", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/be25218e98cbd337604f1744a84bb1ebda37c935", "committedDate": "2020-09-07T04:38:48Z", "message": "add exception-checker-tomcat-scenario github workflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3691456a92bfbdc7d112c0eaa9e0f136ffcc9acb", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3691456a92bfbdc7d112c0eaa9e0f136ffcc9acb", "committedDate": "2020-09-07T05:28:02Z", "message": "add exception checker callback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a73e659c45ae166aaebc4ab282dcf74f31199f0", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/4a73e659c45ae166aaebc4ab282dcf74f31199f0", "committedDate": "2020-09-08T08:46:51Z", "message": "Merge branch 'master' into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85052c7817496c4dafe0b2a64121e843d72028f3", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/85052c7817496c4dafe0b2a64121e843d72028f3", "committedDate": "2020-09-08T09:26:23Z", "message": "Merge remote-tracking branch 'upstream/master' into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35c565c9a6f8de8516ac6c7e98010045fcc7c6cc", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/35c565c9a6f8de8516ac6c7e98010045fcc7c6cc", "committedDate": "2020-09-08T09:28:09Z", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ee57114228c784184228ddf5ed04f8599bcd4b6", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/0ee57114228c784184228ddf5ed04f8599bcd4b6", "committedDate": "2020-09-08T14:43:17Z", "message": "fix grpc-plugin-test expectedData.yaml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjE2ODY5", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-484216869", "createdAt": "2020-09-08T14:47:12Z", "commit": {"oid": "0ee57114228c784184228ddf5ed04f8599bcd4b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NzoxM1rOHOgxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NzoxM1rOHOgxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTEwNA==", "bodyText": "I think you missed the toolkit document update about how to use this annotation.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r484979104", "createdAt": "2020-09-08T14:47:13Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/exception-checker-spring-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the\n+ * exception has this annotation.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Inherited\n+public @interface IgnoredException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee57114228c784184228ddf5ed04f8599bcd4b6"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63001c130e01f7cdef752d62e47ea2030056fd9a", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/63001c130e01f7cdef752d62e47ea2030056fd9a", "committedDate": "2020-09-08T23:41:05Z", "message": "Merge branch 'master' into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e742fe994a7444886e8fd53c75bb1e274fd6c030", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/e742fe994a7444886e8fd53c75bb1e274fd6c030", "committedDate": "2020-09-09T01:58:43Z", "message": "add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6433644d6ab1b6adfe3ebb6d8060e537b103d7f5", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/6433644d6ab1b6adfe3ebb6d8060e537b103d7f5", "committedDate": "2020-09-09T01:59:13Z", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7c9fbe6df3cd5153d400a26c80cf8dcca03655", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/3d7c9fbe6df3cd5153d400a26c80cf8dcca03655", "committedDate": "2020-09-09T05:29:55Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f238085b5b96afc25cb5dadf6fd1496269b784c0", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/f238085b5b96afc25cb5dadf6fd1496269b784c0", "committedDate": "2020-09-09T05:37:48Z", "message": "Update How-to-tolerate-exceptions.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0Njc0MzIx", "url": "https://github.com/apache/skywalking/pull/5426#pullrequestreview-484674321", "createdAt": "2020-09-09T05:38:22Z", "commit": {"oid": "f238085b5b96afc25cb5dadf6fd1496269b784c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f2d1c6899f397863f04ed4f7a69993fa6f2e76b", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/8f2d1c6899f397863f04ed4f7a69993fa6f2e76b", "committedDate": "2020-09-09T05:38:33Z", "message": "Merge branch 'master' into exception-ignore-plugin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1991, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}