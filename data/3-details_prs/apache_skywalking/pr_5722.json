{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NTQ4NDkx", "number": 5722, "title": "Improve Kubernetes service registry for ALS analysis", "bodyText": "Improve Kubernetes service registry for ALS analysis\nThe current implementation of Envoy ALS K8S analysis is based on the hierarchy, pod -> StatefulSet -> deployment, StatefulSet, or others. It's freaky and different from the Istio Kubernetes registry. And the service name pattern changed in recent Kubernetes versions, which generates weird service names in the topology.\nThe new path is pod -> endpoint -> service, and we should leverage Informer API instead of raw Kubernetes API.\n\n If this pull request closes/resolves/fixes an existing issue, replace the issue number. Closes #5706.\n Tests(E2E) are adjusted to verify the improvement.\n Update the CHANGES log.", "createdAt": "2020-10-25T07:09:27Z", "url": "https://github.com/apache/skywalking/pull/5722", "merged": true, "mergeCommit": {"oid": "92bb474c2d2dc196e96f635709acac287daae953"}, "closed": true, "closedAt": "2020-10-29T10:22:39Z", "author": {"login": "kezhenxu94"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdV6XzIABqjM5MTc1MzE4ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXOq5QgFqTUxOTQ3MTE3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzMwNDY0", "url": "https://github.com/apache/skywalking/pull/5722#pullrequestreview-516330464", "createdAt": "2020-10-25T07:14:13Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNDoxNFrOHn3ACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNDoxNFrOHn3ACw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzY0Mw==", "bodyText": "fo? Typo?", "url": "https://github.com/apache/skywalking/pull/5722#discussion_r511557643", "createdAt": "2020-10-25T07:14:14Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -9,6 +9,7 @@ Release Notes.\n #### Java Agent\n \n #### OAP-Backend\n+* Improve Kubernetes service registry fo ALS analysis.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzQyMjIx", "url": "https://github.com/apache/skywalking/pull/5722#pullrequestreview-516342221", "createdAt": "2020-10-25T09:59:33Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a2d90adbb383ad2916df0441d25ab0187b20d739", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/a2d90adbb383ad2916df0441d25ab0187b20d739", "committedDate": "2020-10-25T15:53:17Z", "message": "Improve K8S ALS analysis\n\nThe current implementation of envoy ALS K8S analysis is based on the hierarchy, pod -> StatefulSet -> deployment, StatefulSet, or others. It's freaky and different from the Istio Kubernetes registry.\n\nThe new path is pod -> endpoint -> service, and we should leverage Informer API instead of raw Kubernetes API."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NzE1ODI3", "url": "https://github.com/apache/skywalking/pull/5722#pullrequestreview-516715827", "createdAt": "2020-10-26T12:12:06Z", "commit": {"oid": "aeaa737115a085280a25ab9acb24cc351a16f48e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjoxMjowN1rOHoMuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjoxNTowN1rOHoM0dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMzUxNg==", "bodyText": "We had better introduce a service name rule to format it. For instance, if some users want to append a version to the service name, they have to issue an expression, like ${service.name}-${pod.labels.version}\nIf they deploy bookinfo, the service name of the service productpage might be productpage-v1, producatpage-v2 and etc.", "url": "https://github.com/apache/skywalking/pull/5722#discussion_r511913516", "createdAt": "2020-10-26T12:12:07Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8SServiceRegistry.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.envoy.als;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import io.kubernetes.client.informer.ResourceEventHandler;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.models.V1Endpoints;\n+import io.kubernetes.client.openapi.models.V1EndpointsList;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.util.Config;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.requireNonNull;\n+\n+@Slf4j\n+class K8SServiceRegistry {\n+    final Map<String, ServiceMetaInfo> ipServiceMap;\n+\n+    final ExecutorService executor;\n+\n+    K8SServiceRegistry() {\n+        ipServiceMap = new ConcurrentHashMap<>();\n+        executor = Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder()\n+                .setNameFormat(\"K8SServiceRegistry-%d\")\n+                .setDaemon(true)\n+                .build()\n+        );\n+    }\n+\n+    void start() throws IOException {\n+        final ApiClient apiClient = Config.defaultClient();\n+        apiClient.setHttpClient(apiClient.getHttpClient()\n+                                         .newBuilder()\n+                                         .readTimeout(0, TimeUnit.SECONDS)\n+                                         .build());\n+\n+        final CoreV1Api coreV1Api = new CoreV1Api(apiClient);\n+        final SharedInformerFactory factory = new SharedInformerFactory(executor);\n+\n+        listenEndpointsEvents(coreV1Api, factory);\n+        listenPodEvents(coreV1Api, factory);\n+\n+        factory.startAllRegisteredInformers();\n+    }\n+\n+    private void listenEndpointsEvents(final CoreV1Api coreV1Api, final SharedInformerFactory factory) {\n+        factory.sharedIndexInformerFor(\n+            params -> coreV1Api.listEndpointsForAllNamespacesCall(\n+                null,\n+                null,\n+                null,\n+                null,\n+                null,\n+                null,\n+                params.resourceVersion,\n+                params.timeoutSeconds,\n+                params.watch,\n+                null\n+            ),\n+            V1Endpoints.class,\n+            V1EndpointsList.class\n+        ).addEventHandler(new ResourceEventHandler<V1Endpoints>() {\n+            @Override\n+            public void onAdd(final V1Endpoints endpoints) {\n+                addEndpoints(endpoints);\n+            }\n+\n+            @Override\n+            public void onUpdate(final V1Endpoints oldEndpoints, final V1Endpoints newEndpoints) {\n+                addEndpoints(newEndpoints);\n+            }\n+\n+            @Override\n+            public void onDelete(final V1Endpoints endpoints, final boolean deletedFinalStateUnknown) {\n+                removeEndpoints(endpoints);\n+            }\n+        });\n+    }\n+\n+    private void listenPodEvents(final CoreV1Api coreV1Api, final SharedInformerFactory factory) {\n+        factory.sharedIndexInformerFor(\n+            params -> coreV1Api.listPodForAllNamespacesCall(\n+                null,\n+                null,\n+                null,\n+                null,\n+                null,\n+                null,\n+                params.resourceVersion,\n+                params.timeoutSeconds,\n+                params.watch,\n+                null\n+            ),\n+            V1Pod.class,\n+            V1PodList.class\n+        ).addEventHandler(new ResourceEventHandler<V1Pod>() {\n+            @Override\n+            public void onAdd(final V1Pod pod) {\n+                addPod(pod);\n+            }\n+\n+            @Override\n+            public void onUpdate(final V1Pod oldPod, final V1Pod newPod) {\n+                addPod(newPod);\n+            }\n+\n+            @Override\n+            public void onDelete(final V1Pod pod, final boolean deletedFinalStateUnknown) {\n+                removePod(pod);\n+            }\n+        });\n+    }\n+\n+    private void removePod(final V1Pod pod) {\n+        log.debug(\"Removing pod {}\", pod);\n+\n+        Optional.ofNullable(pod.getStatus()).ifPresent(\n+            status -> ipServiceMap.remove(status.getPodIP())\n+        );\n+    }\n+\n+    private void addPod(final V1Pod pod) {\n+        log.debug(\"Adding pod {}\", pod);\n+\n+        Optional.ofNullable(pod.getStatus()).ifPresent(\n+            status -> {\n+                final String ip = status.getPodIP();\n+                final ServiceMetaInfo service = ipServiceMap.computeIfAbsent(ip, unused -> new ServiceMetaInfo());\n+\n+                final V1ObjectMeta podMeta = requireNonNull(pod.getMetadata());\n+                service.setServiceInstanceName(String.format(\"%s.%s\", podMeta.getName(), podMeta.getNamespace()));\n+                service.setTags(transformLabelsToTags(podMeta.getLabels()));\n+            }\n+        );\n+    }\n+\n+    private void addEndpoints(final V1Endpoints endpoints) {\n+        log.debug(\"Adding endpoints {}\", endpoints);\n+\n+        final String serviceName = requireNonNull(endpoints.getMetadata()).getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa737115a085280a25ab9acb24cc351a16f48e"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxNTEyNQ==", "bodyText": "Endpoint slice resources should be listened to either.", "url": "https://github.com/apache/skywalking/pull/5722#discussion_r511915125", "createdAt": "2020-10-26T12:15:07Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/K8SServiceRegistry.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.envoy.als;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import io.kubernetes.client.informer.ResourceEventHandler;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.apis.CoreV1Api;\n+import io.kubernetes.client.openapi.models.V1Endpoints;\n+import io.kubernetes.client.openapi.models.V1EndpointsList;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import io.kubernetes.client.util.Config;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.requireNonNull;\n+\n+@Slf4j\n+class K8SServiceRegistry {\n+    final Map<String, ServiceMetaInfo> ipServiceMap;\n+\n+    final ExecutorService executor;\n+\n+    K8SServiceRegistry() {\n+        ipServiceMap = new ConcurrentHashMap<>();\n+        executor = Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder()\n+                .setNameFormat(\"K8SServiceRegistry-%d\")\n+                .setDaemon(true)\n+                .build()\n+        );\n+    }\n+\n+    void start() throws IOException {\n+        final ApiClient apiClient = Config.defaultClient();\n+        apiClient.setHttpClient(apiClient.getHttpClient()\n+                                         .newBuilder()\n+                                         .readTimeout(0, TimeUnit.SECONDS)\n+                                         .build());\n+\n+        final CoreV1Api coreV1Api = new CoreV1Api(apiClient);\n+        final SharedInformerFactory factory = new SharedInformerFactory(executor);\n+\n+        listenEndpointsEvents(coreV1Api, factory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeaa737115a085280a25ab9acb24cc351a16f48e"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aeaa737115a085280a25ab9acb24cc351a16f48e", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/aeaa737115a085280a25ab9acb24cc351a16f48e", "committedDate": "2020-10-26T10:17:47Z", "message": "Merge branch 'master' into k8s/service-registry"}, "afterCommit": {"oid": "d23c4aa2c159cd81ffb3d5994b55e7516d7cd0e8", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/d23c4aa2c159cd81ffb3d5994b55e7516d7cd0e8", "committedDate": "2020-10-27T09:34:34Z", "message": "Add service name formatter and remove unused codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f7cb324b0e7468c23ee5c6f0cc501111abfbf6c", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/3f7cb324b0e7468c23ee5c6f0cc501111abfbf6c", "committedDate": "2020-10-29T06:42:03Z", "message": "Improve K8S ALS analysis\n\nThe current implementation of envoy ALS K8S analysis is based on the hierarchy, pod -> StatefulSet -> deployment, StatefulSet, or others. It's freaky and different from the Istio Kubernetes registry.\n\nThe new path is pod -> endpoint -> service, and we should leverage Informer API instead of raw Kubernetes API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef23b1805f70f789ad0fb8e19b58c3fa9773b98", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/1ef23b1805f70f789ad0fb8e19b58c3fa9773b98", "committedDate": "2020-10-29T06:42:09Z", "message": "Add service name formatter and remove unused codes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c73959df2914562dc42fdb2e2df6de3399a5c73", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/8c73959df2914562dc42fdb2e2df6de3399a5c73", "committedDate": "2020-10-29T06:42:09Z", "message": "Add new jar to LICENSE and known dependencies file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c386738927567d1b55abff8763da668db05d159", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/7c386738927567d1b55abff8763da668db05d159", "committedDate": "2020-10-29T06:42:09Z", "message": "Fix E2E test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a126423252ee467b8a2bdc21b484210e78bb613c", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/a126423252ee467b8a2bdc21b484210e78bb613c", "committedDate": "2020-10-29T06:42:10Z", "message": "Exclude duplicated transitive dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6af3370aab05f7d0f55b50963c977a36b14fad00", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/6af3370aab05f7d0f55b50963c977a36b14fad00", "committedDate": "2020-10-29T06:42:10Z", "message": "Update SkyWalking Kubernetes commit hash"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e0f069f3dd5186f4b453c1f9111dc51597df26", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/42e0f069f3dd5186f4b453c1f9111dc51597df26", "committedDate": "2020-10-29T06:42:10Z", "message": "Add unit test for class ServiceNameFormatter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2846d619096514e323def2a9a245342811e23bba", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/2846d619096514e323def2a9a245342811e23bba", "committedDate": "2020-10-29T06:42:10Z", "message": "Add a TODO item to listen the EndpointSlice resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "653a3269b7931a74aea1cec051601df082d90c46", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/653a3269b7931a74aea1cec051601df082d90c46", "committedDate": "2020-10-28T06:19:11Z", "message": "Add a TODO item to listen the EndpointSlice resource"}, "afterCommit": {"oid": "2846d619096514e323def2a9a245342811e23bba", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/2846d619096514e323def2a9a245342811e23bba", "committedDate": "2020-10-29T06:42:10Z", "message": "Add a TODO item to listen the EndpointSlice resource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NDcxMTc1", "url": "https://github.com/apache/skywalking/pull/5722#pullrequestreview-519471175", "createdAt": "2020-10-29T09:23:01Z", "commit": {"oid": "2846d619096514e323def2a9a245342811e23bba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1564, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}