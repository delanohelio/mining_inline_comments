{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDM5MTcz", "number": 5955, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTo0MDo1MlrOFBbh-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTo0MDo1MlrOFBbh-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDQzOTYwOnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/SO11yE2E.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTo0MDo1MlrOIAJI1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTo0MDo1MlrOIAJI1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMDYzMQ==", "bodyText": "@kezhenxu94 this line throws NPE", "url": "https://github.com/apache/skywalking/pull/5955#discussion_r537020631", "createdAt": "2020-12-06T11:40:52Z", "author": {"login": "hanahmily"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/SO11yE2E.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.e2e;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n+import org.apache.skywalking.e2e.annotation.DockerCompose;\n+import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n+import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n+import org.apache.skywalking.e2e.common.HostAndPort;\n+import org.apache.skywalking.e2e.metrics.AtLeastOneOfMetricsMatcher;\n+import org.apache.skywalking.e2e.metrics.MetricsValueMatcher;\n+import org.apache.skywalking.e2e.metrics.ReadMetrics;\n+import org.apache.skywalking.e2e.metrics.ReadMetricsQuery;\n+import org.apache.skywalking.e2e.retryable.RetryableTest;\n+import org.apache.skywalking.e2e.service.Service;\n+import org.apache.skywalking.e2e.service.ServicesMatcher;\n+import org.apache.skywalking.e2e.service.ServicesQuery;\n+import org.apache.skywalking.e2e.service.instance.Instance;\n+import org.apache.skywalking.e2e.service.instance.Instances;\n+import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n+import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import static org.apache.skywalking.e2e.metrics.MetricsQuery.ALL_SO11Y_LINER_METRICS;\n+import static org.apache.skywalking.e2e.utils.Times.now;\n+import static org.apache.skywalking.e2e.utils.Yamls.load;\n+\n+/**\n+ * A test case for simple functionality verification\n+ *\n+ * The components are typically:\n+ *\n+ * - an single agent, (provider), generating traffic data\n+ *\n+ * - an OAP node, (oap)\n+ *\n+ * - a webapp, (ui) for querying\n+ *\n+ * The verifications are:\n+ *\n+ * - services\n+ *\n+ * - services metrics\n+ *\n+ * - services relations\n+ *\n+ * - endpoints\n+ *\n+ * - endpoints metrics\n+ *\n+ * - instances\n+ *\n+ * - instance metrics\n+ *\n+ * - topology\n+ *\n+ * - traces\n+ *\n+ * if your case needs the same aforementioned verifications, consider simply provide a docker-compose.yml with the specific orchestration and reuse these codes.\n+ */\n+@Slf4j\n+@SkyWalkingE2E\n+public class SO11yE2E extends SkyWalkingTestAdapter {\n+    @SuppressWarnings(\"unused\")\n+    @DockerCompose(\"docker/simple/so11y/docker-compose.yml\")\n+    protected DockerComposeContainer<?> justForSideEffects;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"ui\", port = 8080)\n+    protected HostAndPort swWebappHostPort;\n+\n+    @BeforeAll\n+    void setUp() {\n+        queryClient(swWebappHostPort);\n+    }\n+\n+    @AfterAll\n+    public void tearDown() {\n+        trafficController.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab26976d43d791a41e085b1367dabbfff745fdd4"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4642, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}