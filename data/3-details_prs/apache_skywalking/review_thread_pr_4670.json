{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NjA3NjIw", "number": 4670, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTozNzozMFrODzU4pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTozNzozMFrODzU4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTQ2MTQ4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v2/x/async/AsyncAppenderInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTozNzozMVrOGHynWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNTo0Mzo1M1rOGHyrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMjQ5MA==", "bodyText": "Do these two methods always execute in the app code thread?", "url": "https://github.com/apache/skywalking/pull/4670#discussion_r410822490", "createdAt": "2020-04-19T05:37:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v2/x/async/AsyncAppenderInstrumentation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class AsyncAppenderInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async.AsyncAppenderMethodInterceptor\";\n+    private static final String ENHANCE_CLASS = \"org.apache.logging.log4j.core.appender.AsyncAppender\";\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(\"transfer\");\n+                    }\n+\n+                    @Override\n+                    public String getMethodsInterceptor() {\n+                        return INTERCEPT_CLASS;\n+                    }\n+\n+                    @Override\n+                    public boolean isOverrideArgs() {\n+                        return false;\n+                    }\n+                },\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(\"logMessageInCurrentThread\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d050eb29d3bc60e5dfe2abe9412a861ebe5fd9e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMzUwMA==", "bodyText": "logMessageInCurrentThread method will be executed when the queue is full, transfer method always execute", "url": "https://github.com/apache/skywalking/pull/4670#discussion_r410823500", "createdAt": "2020-04-19T05:43:53Z", "author": {"login": "J-Cod3r"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v2/x/async/AsyncAppenderInstrumentation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class AsyncAppenderInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async.AsyncAppenderMethodInterceptor\";\n+    private static final String ENHANCE_CLASS = \"org.apache.logging.log4j.core.appender.AsyncAppender\";\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(\"transfer\");\n+                    }\n+\n+                    @Override\n+                    public String getMethodsInterceptor() {\n+                        return INTERCEPT_CLASS;\n+                    }\n+\n+                    @Override\n+                    public boolean isOverrideArgs() {\n+                        return false;\n+                    }\n+                },\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(\"logMessageInCurrentThread\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMjQ5MA=="}, "originalCommit": {"oid": "9d050eb29d3bc60e5dfe2abe9412a861ebe5fd9e"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 251, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}