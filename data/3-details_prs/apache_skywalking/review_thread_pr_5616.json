{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1OTkyOTQz", "number": 5616, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozNjoxNVrOEpgTNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDowNTo1MlrOEp07fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU2Mjc2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/conf/IgnoreConfigInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozNjoxNVrOHbNe0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NDozM1rOHbS0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDQ4MA==", "bodyText": "It is closed in L50.", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498294480", "createdAt": "2020-10-01T14:36:15Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/conf/IgnoreConfigInitializer.java", "diffHunk": "@@ -89,10 +88,12 @@ private static void overrideConfigBySystemProp() throws IllegalAccessException {\n     private static InputStream loadConfigFromAgentFolder() throws AgentPackageNotFoundException, ConfigNotFoundException {\n         File configFile = new File(AgentPackagePath.getPath(), CONFIG_FILE_NAME);\n         if (configFile.exists() && configFile.isFile()) {\n-            try {\n+            try(var configFileStream = new FileInputStream(configFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4MTk3Mw==", "bodyText": "ok, is false positive.", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498381973", "createdAt": "2020-10-01T16:44:33Z", "author": {"login": "x22x22"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/conf/IgnoreConfigInitializer.java", "diffHunk": "@@ -89,10 +88,12 @@ private static void overrideConfigBySystemProp() throws IllegalAccessException {\n     private static InputStream loadConfigFromAgentFolder() throws AgentPackageNotFoundException, ConfigNotFoundException {\n         File configFile = new File(AgentPackagePath.getPath(), CONFIG_FILE_NAME);\n         if (configFile.exists() && configFile.isFile()) {\n-            try {\n+            try(var configFileStream = new FileInputStream(configFile)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDQ4MA=="}, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU2NDYzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozNjozOVrOHbNf9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NTowM1rOHbS1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDc3NA==", "bodyText": "JarFile need to be resident in memory. @wu-sheng @acurtain", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498294774", "createdAt": "2020-10-01T14:36:39Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java", "diffHunk": "@@ -192,9 +193,11 @@ public URL nextElement() {\n                 for (String fileName : jarFileNames) {\n                     try {\n                         File file = new File(path, fileName);\n-                        Jar jar = new Jar(new JarFile(file), file);\n-                        jars.add(jar);\n-                        LOGGER.info(\"{} loaded.\", file.toString());\n+                        try(var jarFile = new JarFile(file)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1MzQ4Nw==", "bodyText": "var is not acceptable in the JDK8 compiler. Why use this?", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498353487", "createdAt": "2020-10-01T15:57:00Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java", "diffHunk": "@@ -192,9 +193,11 @@ public URL nextElement() {\n                 for (String fileName : jarFileNames) {\n                     try {\n                         File file = new File(path, fileName);\n-                        Jar jar = new Jar(new JarFile(file), file);\n-                        jars.add(jar);\n-                        LOGGER.info(\"{} loaded.\", file.toString());\n+                        try(var jarFile = new JarFile(file)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDc3NA=="}, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NjEzNg==", "bodyText": "We don't recommend abusing lombok. Its annotation-based usages are enough. Don't put var in the codes.", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498366136", "createdAt": "2020-10-01T16:17:21Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java", "diffHunk": "@@ -192,9 +193,11 @@ public URL nextElement() {\n                 for (String fileName : jarFileNames) {\n                     try {\n                         File file = new File(path, fileName);\n-                        Jar jar = new Jar(new JarFile(file), file);\n-                        jars.add(jar);\n-                        LOGGER.info(\"{} loaded.\", file.toString());\n+                        try(var jarFile = new JarFile(file)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDc3NA=="}, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NjkxOQ==", "bodyText": "We are using Java, rather than Scala or Kotlin today, we don't want to make codes simpler, but want to make the codes easier to read for everyone. At here, you are just trying to fix the muse recommendation, so, please don't bring any related thing in.", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498366919", "createdAt": "2020-10-01T16:18:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java", "diffHunk": "@@ -192,9 +193,11 @@ public URL nextElement() {\n                 for (String fileName : jarFileNames) {\n                     try {\n                         File file = new File(path, fileName);\n-                        Jar jar = new Jar(new JarFile(file), file);\n-                        jars.add(jar);\n-                        LOGGER.info(\"{} loaded.\", file.toString());\n+                        try(var jarFile = new JarFile(file)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDc3NA=="}, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4MjI0MA==", "bodyText": "is false positive, I have restored the original code", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498382240", "createdAt": "2020-10-01T16:45:03Z", "author": {"login": "x22x22"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/loader/AgentClassLoader.java", "diffHunk": "@@ -192,9 +193,11 @@ public URL nextElement() {\n                 for (String fileName : jarFileNames) {\n                     try {\n                         File file = new File(path, fileName);\n-                        Jar jar = new Jar(new JarFile(file), file);\n-                        jars.add(jar);\n-                        LOGGER.info(\"{} loaded.\", file.toString());\n+                        try(var jarFile = new JarFile(file)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDc3NA=="}, "originalCommit": {"oid": "e77744a5a13c070b0a44133140acd395562f269a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjk0MjY4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDowNTo1MlrOHbu-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMzoxOTowMVrOHcE0-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MzMyMw==", "bodyText": "Closing this?", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r498843323", "createdAt": "2020-10-02T14:05:52Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanProcessor.java", "diffHunk": "@@ -39,37 +39,36 @@ public SpanProcessor(SourceReceiver receiver) {\n     }\n \n     void convert(ZipkinReceiverConfig config, SpanBytesDecoder decoder, HttpServletRequest request) throws IOException {\n-        InputStream inputStream = getInputStream(request);\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        byte[] buffer = new byte[2048];\n-        int readCntOnce;\n+        try(InputStream inputStream = getInputStream(request)) {\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            byte[] buffer = new byte[2048];\n+            int readCntOnce;\n \n-        while ((readCntOnce = inputStream.read(buffer)) >= 0) {\n-            out.write(buffer, 0, readCntOnce);\n-        }\n+            while ((readCntOnce = inputStream.read(buffer)) >= 0) {\n+                out.write(buffer, 0, readCntOnce);\n+            }\n \n-        List<Span> spanList = decoder.decodeList(out.toByteArray());\n+            List<Span> spanList = decoder.decodeList(out.toByteArray());\n \n-        if (config.isNeedAnalysis()) {\n-            ZipkinSkyWalkingTransfer transfer = new ZipkinSkyWalkingTransfer();\n-            transfer.doTransfer(config, spanList);\n-        } else {\n-            SpanForward forward = new SpanForward(config, receiver);\n-            forward.send(spanList);\n+            if (config.isNeedAnalysis()) {\n+                ZipkinSkyWalkingTransfer transfer = new ZipkinSkyWalkingTransfer();\n+                transfer.doTransfer(config, spanList);\n+            } else {\n+                SpanForward forward = new SpanForward(config, receiver);\n+                forward.send(spanList);\n+            }\n         }\n     }\n \n     private InputStream getInputStream(HttpServletRequest request) throws IOException {\n-        InputStream requestInStream;\n-\n         String headEncoding = request.getHeader(\"accept-encoding\");\n         if (headEncoding != null && (headEncoding.indexOf(\"gzip\") != -1)) {\n-            requestInStream = new GZIPInputStream(request.getInputStream());\n+            try(InputStream requestInStream = new GZIPInputStream(request.getInputStream());){\n+                return requestInStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "658669179515084a3279522380db4a94de5ee7e6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTI3NQ==", "bodyText": "Restored code.", "url": "https://github.com/apache/skywalking/pull/5616#discussion_r499201275", "createdAt": "2020-10-04T03:19:01Z", "author": {"login": "x22x22"}, "path": "oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/handler/SpanProcessor.java", "diffHunk": "@@ -39,37 +39,36 @@ public SpanProcessor(SourceReceiver receiver) {\n     }\n \n     void convert(ZipkinReceiverConfig config, SpanBytesDecoder decoder, HttpServletRequest request) throws IOException {\n-        InputStream inputStream = getInputStream(request);\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        byte[] buffer = new byte[2048];\n-        int readCntOnce;\n+        try(InputStream inputStream = getInputStream(request)) {\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            byte[] buffer = new byte[2048];\n+            int readCntOnce;\n \n-        while ((readCntOnce = inputStream.read(buffer)) >= 0) {\n-            out.write(buffer, 0, readCntOnce);\n-        }\n+            while ((readCntOnce = inputStream.read(buffer)) >= 0) {\n+                out.write(buffer, 0, readCntOnce);\n+            }\n \n-        List<Span> spanList = decoder.decodeList(out.toByteArray());\n+            List<Span> spanList = decoder.decodeList(out.toByteArray());\n \n-        if (config.isNeedAnalysis()) {\n-            ZipkinSkyWalkingTransfer transfer = new ZipkinSkyWalkingTransfer();\n-            transfer.doTransfer(config, spanList);\n-        } else {\n-            SpanForward forward = new SpanForward(config, receiver);\n-            forward.send(spanList);\n+            if (config.isNeedAnalysis()) {\n+                ZipkinSkyWalkingTransfer transfer = new ZipkinSkyWalkingTransfer();\n+                transfer.doTransfer(config, spanList);\n+            } else {\n+                SpanForward forward = new SpanForward(config, receiver);\n+                forward.send(spanList);\n+            }\n         }\n     }\n \n     private InputStream getInputStream(HttpServletRequest request) throws IOException {\n-        InputStream requestInStream;\n-\n         String headEncoding = request.getHeader(\"accept-encoding\");\n         if (headEncoding != null && (headEncoding.indexOf(\"gzip\") != -1)) {\n-            requestInStream = new GZIPInputStream(request.getInputStream());\n+            try(InputStream requestInStream = new GZIPInputStream(request.getInputStream());){\n+                return requestInStream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MzMyMw=="}, "originalCommit": {"oid": "658669179515084a3279522380db4a94de5ee7e6"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}