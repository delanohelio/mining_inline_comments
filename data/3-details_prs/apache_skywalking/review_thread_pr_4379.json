{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjIyOTYw", "number": 4379, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDoyODoxOFrODg5rBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzo0MzozNFrODg942Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODI1OTI0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/EhcacheConstructorInterceptor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDoyODoxOFrOFrXRgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1MjoxMVrOFrZjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDQwMA==", "bodyText": "You don't need to use this try/catch. getConstructorsInterceptPoints returns an array, you should set up the interceptors separately. This one you didi has a performance issue.", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381014400", "createdAt": "2020-02-19T00:28:18Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/EhcacheConstructorInterceptor.java", "diffHunk": "@@ -18,18 +18,28 @@\n \n package org.apache.skywalking.apm.plugin.ehcache.v2;\n \n+import net.sf.ehcache.Cache;\n import net.sf.ehcache.config.CacheConfiguration;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n \n public class EhcacheConstructorInterceptor implements InstanceConstructorInterceptor {\n     @Override\n     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n-        CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n+        try {\n+            CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n \n-        // get cache name\n-        if (cacheConfiguration != null) {\n-            objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            // get cache name\n+            if (cacheConfiguration != null) {\n+                objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            }\n+        } catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e57176d05e00fa8893be15a206b0508f24cc56c1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0OTM0OQ==", "bodyText": "Can I use instanseof instead?\n       if (argument instanceof CacheConfiguration) {\n            CacheConfiguration cacheConfiguration = (CacheConfiguration) argument;\n\n            // get cache name\n            if (cacheConfiguration != null) {\n                objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n            }\n\n        } else if (argument instanceof Cache) {\n            Cache cache = (Cache) argument;\n\n            // get cache name\n            if (cache != null && cache.getCacheConfiguration() != null) {\n                objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cache.getCacheConfiguration().getName()));\n            }\n        }", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381049349", "createdAt": "2020-02-19T02:42:25Z", "author": {"login": "lsyf"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/EhcacheConstructorInterceptor.java", "diffHunk": "@@ -18,18 +18,28 @@\n \n package org.apache.skywalking.apm.plugin.ehcache.v2;\n \n+import net.sf.ehcache.Cache;\n import net.sf.ehcache.config.CacheConfiguration;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n \n public class EhcacheConstructorInterceptor implements InstanceConstructorInterceptor {\n     @Override\n     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n-        CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n+        try {\n+            CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n \n-        // get cache name\n-        if (cacheConfiguration != null) {\n-            objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            // get cache name\n+            if (cacheConfiguration != null) {\n+                objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            }\n+        } catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDQwMA=="}, "originalCommit": {"oid": "e57176d05e00fa8893be15a206b0508f24cc56c1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0OTc5MQ==", "bodyText": "Why? instanceof is still much much slower than instrumentation level match.", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381049791", "createdAt": "2020-02-19T02:44:15Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/EhcacheConstructorInterceptor.java", "diffHunk": "@@ -18,18 +18,28 @@\n \n package org.apache.skywalking.apm.plugin.ehcache.v2;\n \n+import net.sf.ehcache.Cache;\n import net.sf.ehcache.config.CacheConfiguration;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n \n public class EhcacheConstructorInterceptor implements InstanceConstructorInterceptor {\n     @Override\n     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n-        CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n+        try {\n+            CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n \n-        // get cache name\n-        if (cacheConfiguration != null) {\n-            objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            // get cache name\n+            if (cacheConfiguration != null) {\n+                objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            }\n+        } catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDQwMA=="}, "originalCommit": {"oid": "e57176d05e00fa8893be15a206b0508f24cc56c1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MTY4MA==", "bodyText": "ok. Thank you for your seriousness", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381051680", "createdAt": "2020-02-19T02:52:11Z", "author": {"login": "lsyf"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/EhcacheConstructorInterceptor.java", "diffHunk": "@@ -18,18 +18,28 @@\n \n package org.apache.skywalking.apm.plugin.ehcache.v2;\n \n+import net.sf.ehcache.Cache;\n import net.sf.ehcache.config.CacheConfiguration;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n \n public class EhcacheConstructorInterceptor implements InstanceConstructorInterceptor {\n     @Override\n     public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n-        CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n+        try {\n+            CacheConfiguration cacheConfiguration = (CacheConfiguration) allArguments[0];\n \n-        // get cache name\n-        if (cacheConfiguration != null) {\n-            objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            // get cache name\n+            if (cacheConfiguration != null) {\n+                objInst.setSkyWalkingDynamicField(new EhcacheEnhanceInfo(cacheConfiguration.getName()));\n+            }\n+        } catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNDQwMA=="}, "originalCommit": {"oid": "e57176d05e00fa8893be15a206b0508f24cc56c1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODk1MDAxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/define/EhcachePluginInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzo0MzozNFrOFrdyaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTowMTowNVrOFrf2IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMTEyOQ==", "bodyText": "Is this a code format error?", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381121129", "createdAt": "2020-02-19T07:43:34Z", "author": {"login": "mrproliu"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/define/EhcachePluginInstrumentation.java", "diffHunk": "@@ -82,13 +88,41 @@\n                 public String getConstructorInterceptor() {\n                     return CONSTRUCTOR_CLASS_INTERCEPT_CLASS;\n                 }\n+            },\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return isPrivate().and(takesArgument(0, named(\"net.sf.ehcache.Cache\")));\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return PRIVATE_CONSTRUCTOR_CLASS_INTERCEPT_CLASS;\n+                }\n             }\n         };\n     }\n \n     @Override\n     public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n         return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CACHE_NAME_ENHANCE_METHOD).and(takesArgument(0, String.class));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return CACHE_NAME_INTERCEPTOR_CLASS;\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                        return false;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ad63430bf9851e92e4d6bfcbcb7d96a6dcc6d7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNTU4OA==", "bodyText": "Yes. Do I need to format and check?", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381125588", "createdAt": "2020-02-19T07:55:34Z", "author": {"login": "lsyf"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/define/EhcachePluginInstrumentation.java", "diffHunk": "@@ -82,13 +88,41 @@\n                 public String getConstructorInterceptor() {\n                     return CONSTRUCTOR_CLASS_INTERCEPT_CLASS;\n                 }\n+            },\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return isPrivate().and(takesArgument(0, named(\"net.sf.ehcache.Cache\")));\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return PRIVATE_CONSTRUCTOR_CLASS_INTERCEPT_CLASS;\n+                }\n             }\n         };\n     }\n \n     @Override\n     public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n         return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CACHE_NAME_ENHANCE_METHOD).and(takesArgument(0, String.class));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return CACHE_NAME_INTERCEPTOR_CLASS;\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                        return false;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMTEyOQ=="}, "originalCommit": {"oid": "b2ad63430bf9851e92e4d6bfcbcb7d96a6dcc6d7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDg0OQ==", "bodyText": "Yes, you should. The format check will be more strict soon for the test case.", "url": "https://github.com/apache/skywalking/pull/4379#discussion_r381154849", "createdAt": "2020-02-19T09:01:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/ehcache-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/ehcache/v2/define/EhcachePluginInstrumentation.java", "diffHunk": "@@ -82,13 +88,41 @@\n                 public String getConstructorInterceptor() {\n                     return CONSTRUCTOR_CLASS_INTERCEPT_CLASS;\n                 }\n+            },\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return isPrivate().and(takesArgument(0, named(\"net.sf.ehcache.Cache\")));\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return PRIVATE_CONSTRUCTOR_CLASS_INTERCEPT_CLASS;\n+                }\n             }\n         };\n     }\n \n     @Override\n     public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n         return new InstanceMethodsInterceptPoint[] {\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(CACHE_NAME_ENHANCE_METHOD).and(takesArgument(0, String.class));\n+                }\n+\n+                @Override\n+                public String getMethodsInterceptor() {\n+                    return CACHE_NAME_INTERCEPTOR_CLASS;\n+                }\n+\n+                @Override\n+                public boolean isOverrideArgs() {\n+                        return false;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMTEyOQ=="}, "originalCommit": {"oid": "b2ad63430bf9851e92e4d6bfcbcb7d96a6dcc6d7"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4583, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}