{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Mjc3MzI3", "number": 4278, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NToxMVrODaLJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTozNzoyMFrODa2NHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzcyMTI0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NToxMVrOFg-lbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjoyODoyNVrOFhEmQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDE0MA==", "bodyText": "typo @author, and please remove the :", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370124140", "createdAt": "2020-01-23T13:45:11Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * @description: Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther: jialong  by 2020-01-23 15:41", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMjY1OQ==", "bodyText": "Thanks for your correction", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370222659", "createdAt": "2020-01-23T16:28:25Z", "author": {"login": "jialong121"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * @description: Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther: jialong  by 2020-01-23 15:41", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDE0MA=="}, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzcyMjg4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NTozOVrOFg-mZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NTozOVrOFg-mZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDM5MQ==", "bodyText": "remove @description, it's not a valid JavaDoc tag", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370124391", "createdAt": "2020-01-23T13:45:39Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * @description: Matching used to match method annotations, Can match annotations on interface methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzcyNTAxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/MethodInheritsDeclaringAnnotationMatcherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NjoxNlrOFg-nuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NjoxNlrOFg-nuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDczMQ==", "bodyText": "ditto", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370124731", "createdAt": "2020-01-23T13:46:16Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/MethodInheritsDeclaringAnnotationMatcherTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.MethodInheritsDeclaringAnnotationMatcher.isInheritsAnnotatedWith;\n+\n+/**\n+ * @description:\n+ * @auther: jialong  by 2020-01-23 16:09", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDI4NTUxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1Mjo0N1rOFh7QFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1Mjo0N1rOFh7QFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExODEwMg==", "bodyText": "Inherit is a verb. This method name should be byMethodInheritanceAnnotationMatcher", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r371118102", "createdAt": "2020-01-27T08:52:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther jialong\n+ */\n+@HashCodeAndEqualsPlugin.Enhance\n+public class MethodInheritsDeclaringAnnotationMatcher<T extends MethodDescription> extends ElementMatcher.Junction.AbstractBase<T> {\n+    /**\n+     * The matcher to be applied to the provided annotation list.\n+     */\n+    private final ElementMatcher<? super AnnotationList> matcher;\n+\n+    /**\n+     * Creates a new matcher for the annotations of an annotated element.\n+     *\n+     * @param matcher The matcher to be applied to the provided annotation list.\n+     */\n+    public MethodInheritsDeclaringAnnotationMatcher(ElementMatcher<? super AnnotationList> matcher) {\n+        this.matcher = matcher;\n+    }\n+\n+    @Override\n+    public boolean matches(T target) {\n+        if (matcher.matches(target.getDeclaredAnnotations())) {\n+            return true;\n+        }\n+        String name = target.getName();\n+        ParameterList<?> parameters = target.getParameters();\n+\n+        TypeDefinition declaringType = target.getDeclaringType();\n+        return recursiveMatches(declaringType, name, parameters);\n+    }\n+\n+\n+    private boolean recursiveMatches(TypeDefinition typeDefinition, String methodName, ParameterList<?> parameters) {\n+        TypeList.Generic interfaces = typeDefinition.getInterfaces();\n+        for (TypeDescription.Generic implInterface : interfaces) {\n+            if (recursiveMatches(implInterface, methodName, parameters)) {\n+                return true;\n+            }\n+            MethodList<MethodDescription.InGenericShape> declaredMethods = implInterface.getDeclaredMethods();\n+            for (MethodDescription declaredMethod : declaredMethods) {\n+                if (Objects.equals(declaredMethod.getName(), methodName) && parameterEquals(parameters, declaredMethod.getParameters())) {\n+                    return matcher.matches(declaredMethod.getDeclaredAnnotations());\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+\n+    private boolean parameterEquals(ParameterList<?> source, ParameterList<?> impl) {\n+        if (source.size() != impl.size()) {\n+            return false;\n+        }\n+        for (int i = 0; i < source.size(); i++) {\n+            if (!Objects.equals(source.get(i).getType(), impl.get(i).getType())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static <T extends AnnotationSource> ElementMatcher.Junction<T> isInheritsAnnotatedWith(ElementMatcher<? super TypeDescription> matcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDI4NjA0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1MzowMFrOFh7QaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1MzowMFrOFh7QaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExODE4NA==", "bodyText": "Should rename to MethodInheritanceAnnotationMatcher", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r371118184", "createdAt": "2020-01-27T08:53:00Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther jialong\n+ */\n+@HashCodeAndEqualsPlugin.Enhance\n+public class MethodInheritsDeclaringAnnotationMatcher<T extends MethodDescription> extends ElementMatcher.Junction.AbstractBase<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDc3NjYwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritanceAnnotationMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTozNzoyMFrOFh_xRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTozNzoyMFrOFh_xRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MjEzNQ==", "bodyText": "Still, @auther is not a valid JavaDoc\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @auther jialong\n          \n          \n            \n             * @author jialong", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r371192135", "createdAt": "2020-01-27T11:37:20Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritanceAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther jialong", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bfc8b99de78600ba6e2ba027490092d6aa3ee"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}