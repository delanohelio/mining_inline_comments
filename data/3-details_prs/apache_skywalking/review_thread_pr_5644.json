{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTU2NzA3", "number": 5644, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyMFrOEsRtiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzo0NzowOFrOEuANaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYyOTg3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyMFrOHffYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyMFrOHffYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjAyNA==", "bodyText": "Finally:  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782024", "createdAt": "2020-10-10T11:47:20Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();\n+                super.readFieldEnd();\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to create EntrySpan.\", throwable);\n+            } finally {\n+                context = null;\n+                return readFieldBegin();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYyOTkzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyMVrOHffYTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyMVrOHffYTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjAzMA==", "bodyText": "Finally:  If you return or throw from a finally, then values returned or thrown from the try-catch block will be ignored. Consider using try-with-resources instead.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782030", "createdAt": "2020-10-10T11:47:21Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();\n+                super.readFieldEnd();\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to create EntrySpan.\", throwable);\n+            } finally {\n+                context = null;\n+                return readFieldBegin();\n+            }\n+        }\n+        return field;\n+    }\n+\n+    private ContextCarrier createContextCarrier(Map<String, String> header) {\n+        ContextCarrier carrier = new ContextCarrier();\n+        if (Objects.nonNull(header)) {\n+            CarrierItem items = carrier.items();\n+            while (items.hasNext()) {\n+                items = items.next();\n+                items.setHeadValue(header.get(items.getHeadKey()));\n+            }\n+        }\n+        return carrier;\n+    }\n+\n+    @Override\n+    public TMessage readMessageBegin() throws TException {\n+        final TMessage message = super.readMessageBegin();\n+        try {\n+            context.setup(message.name);\n+        } finally {\n+            return message;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzMDAxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyM1rOHffYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzoyM1rOHffYVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjAzOA==", "bodyText": "JdkObsolete:  StringBuffer performs synchronization that is usually unnecessary; prefer StringBuilder.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782038", "createdAt": "2020-10-10T11:47:23Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientInterceptor.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ClientOutProtocolWrapper;\n+import org.apache.thrift.TBase;\n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.TServiceClient;\n+import org.apache.thrift.protocol.TProtocol;\n+\n+/**\n+ * @see TServiceClient is synchronized client.\n+ */\n+public class TServiceClientInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        if (!(allArguments[1] instanceof ClientOutProtocolWrapper)) {\n+            TProtocol protocol = (TProtocol) allArguments[1];\n+            ReflectionUtils.setValue(\n+                TServiceClient.class,\n+                objInst,\n+                \"oprot_\",\n+                new ClientOutProtocolWrapper(protocol)\n+            );\n+            Object dynamicField = ((EnhancedInstance) protocol.getTransport()).getSkyWalkingDynamicField();\n+            objInst.setSkyWalkingDynamicField(Objects.isNull(dynamicField) ? \"UNKNOWN\" : dynamicField);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createExitSpan(\n+            objInst.getClass().getName() + \".\" + allArguments[0],\n+            (String) objInst.getSkyWalkingDynamicField()\n+        );\n+        SpanLayer.asRPCFramework(span);\n+        span.setComponent(ComponentsDefine.THRIFT_CLIENT);\n+        span.tag(TAG_ARGS, getArguments((String) allArguments[0], (TBase) allArguments[1]));\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst,\n+                              Method method,\n+                              Object[] allArguments,\n+                              Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst,\n+                                      Method method,\n+                                      Object[] allArguments,\n+                                      Class<?>[] argumentsTypes,\n+                                      Throwable t) {\n+        if (ContextManager.isActive()) {\n+            ContextManager.activeSpan().errorOccurred().log(t);\n+        }\n+    }\n+\n+    private String getArguments(String method, TBase base) {\n+        int idx = 0;\n+        StringBuffer buffer = new StringBuffer(method).append(\"(\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzMDA4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/AsyncContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzozN1rOHffYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzozN1rOHffYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA0Nw==", "bodyText": "MissingOverride:  getArguments implements method in AbstractContext; expected @OverRide", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782047", "createdAt": "2020-10-10T11:47:37Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/AsyncContext.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.AsyncProcessFunction;\n+\n+public class AsyncContext extends AbstractContext {\n+    private final Map<String, AsyncProcessFunction> processMapView;\n+\n+    public AsyncContext(Map<String, AsyncProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzMDA5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/AsyncContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzozOVrOHffYYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0NzozOVrOHffYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA0OA==", "bodyText": "MissingOverride:  getOperatorName implements method in AbstractContext; expected @OverRide", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782048", "createdAt": "2020-10-10T11:47:39Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/AsyncContext.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.AsyncProcessFunction;\n+\n+public class AsyncContext extends AbstractContext {\n+    private final Map<String, AsyncProcessFunction> processMapView;\n+\n+    public AsyncContext(Map<String, AsyncProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {\n+        return processMapView.get(methodName).getEmptyArgsInstance().toString();\n+    }\n+\n+    public String getOperatorName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzMDEzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/Context.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0Nzo0MFrOHffYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0Nzo0MFrOHffYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA1Mw==", "bodyText": "MissingOverride:  getArguments implements method in AbstractContext; expected @OverRide", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782053", "createdAt": "2020-10-10T11:47:40Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/Context.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.ProcessFunction;\n+\n+public class Context extends AbstractContext {\n+    private final Map<String, ProcessFunction> processMapView;\n+\n+    public Context(Map<String, ProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzMDE1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/Context.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0Nzo0MVrOHffYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMTo0Nzo0MVrOHffYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MjA1Ng==", "bodyText": "MissingOverride:  getOperatorName implements method in AbstractContext; expected @OverRide", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502782056", "createdAt": "2020-10-10T11:47:41Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/Context.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.Map;\n+import org.apache.thrift.ProcessFunction;\n+\n+public class Context extends AbstractContext {\n+    private final Map<String, ProcessFunction> processMapView;\n+\n+    public Context(Map<String, ProcessFunction> processMapView) {\n+        this.processMapView = processMapView;\n+    }\n+\n+    public String getArguments() {\n+        return processMapView.get(methodName).getEmptyArgsInstance().toString();\n+    }\n+\n+    public String getOperatorName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef59e0d7e7d8947beb023a979cdd5c4281e7606b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzOTI0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/TBaseProcessorInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjowMDo0MVrOHffcpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjowMDo0MVrOHffcpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MzE0Mg==", "bodyText": "Should provide the full class name here. Also, I don't think only a @see is a reasonable comment.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502783142", "createdAt": "2020-10-10T12:00:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/TBaseProcessorInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.Context;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ServerInProtocolWrapper;\n+import org.apache.thrift.ProcessFunction;\n+import org.apache.thrift.TBaseProcessor;\n+\n+/**\n+ * @see TBaseProcessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d191993be310274be4be49ddb004a23ba126a6a3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODYzOTg4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjowMToxOVrOHffc6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjowMToxOVrOHffc6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MzIxMQ==", "bodyText": "See should be after the real comments, not before.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502783211", "createdAt": "2020-10-10T12:01:19Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncClientInterceptor.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ClientOutProtocolWrapper;\n+import org.apache.thrift.async.TAsyncClient;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+/**\n+ * @see TAsyncClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d191993be310274be4be49ddb004a23ba126a6a3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODY0MDAwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjowMTozOFrOHffc_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjowMTozOFrOHffc_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4MzIyOA==", "bodyText": "What do you mean TODO?", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502783228", "createdAt": "2020-10-10T12:01:38Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * @see TAsyncMethodCall is asynchronized client.\n+ * @see TServiceClientInterceptor to know synchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);\n+                } finally {\n+                    callback.onError(exception);\n+                }\n+            }\n+        });\n+        if (allArguments[2] instanceof EnhancedInstance) {\n+            remotePeer = (String) ((EnhancedInstance) allArguments[2]).getSkyWalkingDynamicField();\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        // TODO: It is hard to get arguments of method. So, currently, we don't do that. If you have a good idea, please fix it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d191993be310274be4be49ddb004a23ba126a6a3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg2ODUxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/define/transport/TSocketInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTozNzoxMFrOHfofFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxMjo0MFrOHgE_Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTIyMw==", "bodyText": "This is not the only constructor signature of the two classes in line 39/40.\nFor example, private TNonblockingSocket(SocketChannel socketChannel, int timeout, SocketAddress socketAddress) {, please recheck", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502931223", "createdAt": "2020-10-11T15:37:10Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/define/transport/TSocketInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.define.transport;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch;\n+\n+/**\n+ * @see org.apache.thrift.transport.TSocket\n+ * @see org.apache.thrift.transport.TNonblockingSocket\n+ */\n+public class TSocketInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return MultiClassNameMatch.byMultiClassMatch(\n+            \"org.apache.thrift.transport.TSocket\",\n+            \"org.apache.thrift.transport.TNonblockingSocket\"\n+        );\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return ElementMatchers.takesArguments(String.class, int.class, int.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b6688c0fae06135e706f5431512759a20306ea"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5ODE3MQ==", "bodyText": "As far as I know, NonblockingSocket(SocketChannel socketChannel) works for TServer.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503398171", "createdAt": "2020-10-12T16:12:40Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/define/transport/TSocketInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.define.transport;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.MultiClassNameMatch;\n+\n+/**\n+ * @see org.apache.thrift.transport.TSocket\n+ * @see org.apache.thrift.transport.TNonblockingSocket\n+ */\n+public class TSocketInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return MultiClassNameMatch.byMultiClassMatch(\n+            \"org.apache.thrift.transport.TSocket\",\n+            \"org.apache.thrift.transport.TNonblockingSocket\"\n+        );\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return ElementMatchers.takesArguments(String.class, int.class, int.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMTIyMw=="}, "originalCommit": {"oid": "14b6688c0fae06135e706f5431512759a20306ea"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg3Nzk1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTo0NzozOVrOHfojxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTo0NzozOVrOHfojxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMjQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Map<String, String> header = new HashMap(tMap.size);\n          \n          \n            \n                            Map<String, String> header = new HashMap<>(tMap.size);", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502932420", "createdAt": "2020-10-11T15:47:39Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b6688c0fae06135e706f5431512759a20306ea"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg4OTA4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTo1OToxM1rOHfopIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNTo1OToxM1rOHfopIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzMzc5NQ==", "bodyText": "Should be super.readMapEnd();?", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502933795", "createdAt": "2020-10-11T15:59:13Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b6688c0fae06135e706f5431512759a20306ea"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTg5MTM0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjowMTozN1rOHfoqPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjowMTozN1rOHfoqPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNDA3Ng==", "bodyText": "I think this should be in the finally block, otherwise, if it throws exception, there may be an infinite recursive call of readFieldBegin.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502934076", "createdAt": "2020-10-11T16:01:37Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                super.readMessageEnd();\n+                super.readFieldEnd();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b6688c0fae06135e706f5431512759a20306ea"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTkwMzU4OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/thrift-scenario/thrift-client/src/main/java/org/apache/skywalking/apm/testcase/thrift/client/controller/CaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjoxNTowNVrOHfowTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjoxNTowNVrOHfowTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNTYzMA==", "bodyText": "initialed -> initialized", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r502935630", "createdAt": "2020-10-11T16:15:05Z", "author": {"login": "kezhenxu94"}, "path": "test/plugin/scenarios/thrift-scenario/thrift-client/src/main/java/org/apache/skywalking/apm/testcase/thrift/client/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.thrift.client.controller;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.skywalking.apm.testcase.thrift.client.service.AsyncClient;\n+import org.apache.skywalking.apm.testcase.thrift.client.service.IClient;\n+import org.apache.skywalking.apm.testcase.thrift.client.service.SyncClient;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.transport.TTransportException;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/case\")\n+public class CaseController {\n+    private static final Logger logger = LogManager.getLogger(CaseController.class);\n+\n+    private static final String SUCCESS = \"Success\";\n+    private IClient async;\n+    private IClient sync;\n+\n+    private IClient hasync;\n+\n+    private final AtomicInteger status = new AtomicInteger(0);\n+    private final CountDownLatch initialed = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b6688c0fae06135e706f5431512759a20306ea"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI0NjQxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1OTowNVrOHf9sNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1OTowNVrOHf9sNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODY0Nw==", "bodyText": "log#throwable has included errorOccurred already", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503278647", "createdAt": "2020-10-12T12:59:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * Here is asynchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback<Object> callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59026d9998446b2e07779854612fe44066eefb6e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI1MjEwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowMDoyN1rOHf9vcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowMDo0MVrOHf9wEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTQ3Mg==", "bodyText": "This check is unusual, could you explain why?", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503279472", "createdAt": "2020-10-12T13:00:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * Here is asynchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback<Object> callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);\n+                } finally {\n+                    callback.onError(exception);\n+                }\n+            }\n+        });\n+        if (allArguments[2] instanceof EnhancedInstance) {\n+            remotePeer = (String) ((EnhancedInstance) allArguments[2]).getSkyWalkingDynamicField();\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createExitSpan(objInst.getClass().getName(), remotePeer);\n+        span.setComponent(ComponentsDefine.THRIFT_CLIENT);\n+        SpanLayer.asRPCFramework(span);\n+\n+        AbstractSpan async = span.prepareForAsync();\n+        objInst.setSkyWalkingDynamicField(async);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst,\n+                              Method method,\n+                              Object[] allArguments,\n+                              Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59026d9998446b2e07779854612fe44066eefb6e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTYzMw==", "bodyText": "Same question for all ContextManager.isActive() check.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503279633", "createdAt": "2020-10-12T13:00:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TAsyncMethodCallInterceptor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import org.apache.skywalking.apm.agent.core.context.AsyncSpan;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.thrift.commons.ReflectionUtils;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.async.TAsyncMethodCall;\n+\n+/**\n+ * Here is asynchronized client.\n+ */\n+public class TAsyncMethodCallInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    private String remotePeer = \"UNKNOWN\";\n+\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst,\n+                            Object[] allArguments) throws NoSuchFieldException, IllegalAccessException {\n+        ReflectionUtils.setValue(TAsyncMethodCall.class, objInst, \"callback\", new AsyncMethodCallback<Object>() {\n+            final AsyncMethodCallback<Object> callback = (AsyncMethodCallback) allArguments[3];\n+\n+            @Override\n+            public void onComplete(final Object response) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish();\n+                } finally {\n+                    callback.onComplete(response);\n+                }\n+            }\n+\n+            @Override\n+            public void onError(final Exception exception) {\n+                try {\n+                    AsyncSpan span = (AsyncSpan) objInst.getSkyWalkingDynamicField();\n+                    span.asyncFinish().errorOccurred().log(exception);\n+                } finally {\n+                    callback.onError(exception);\n+                }\n+            }\n+        });\n+        if (allArguments[2] instanceof EnhancedInstance) {\n+            remotePeer = (String) ((EnhancedInstance) allArguments[2]).getSkyWalkingDynamicField();\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst,\n+                             Method method,\n+                             Object[] allArguments,\n+                             Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createExitSpan(objInst.getClass().getName(), remotePeer);\n+        span.setComponent(ComponentsDefine.THRIFT_CLIENT);\n+        SpanLayer.asRPCFramework(span);\n+\n+        AbstractSpan async = span.prepareForAsync();\n+        objInst.setSkyWalkingDynamicField(async);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst,\n+                              Method method,\n+                              Object[] allArguments,\n+                              Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTQ3Mg=="}, "originalCommit": {"oid": "59026d9998446b2e07779854612fe44066eefb6e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI1NTM2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowMTowOVrOHf9xQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowMTowOVrOHf9xQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3OTkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ContextManager.activeSpan().errorOccurred().log(throwable);\n          \n          \n            \n                        ContextManager.activeSpan().log(throwable);", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503279936", "createdAt": "2020-10-12T13:01:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+/**\n+ * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n+ * TAsyncClient#receiveBase(...), into here for more efficiency.\n+ */\n+public class TServiceClientReceiveInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(final EnhancedInstance objInst,\n+                             final Method method,\n+                             final Object[] objects,\n+                             final Class<?>[] classes,\n+                             final MethodInterceptResult ret) throws Throwable {\n+    }\n+\n+    @Override\n+    public Object afterMethod(final EnhancedInstance objInst,\n+                              final Method method,\n+                              final Object[] objects,\n+                              final Class<?>[] classes,\n+                              final Object ret) throws Throwable {\n+        if (ContextManager.isActive() && Objects.nonNull(objInst.getSkyWalkingDynamicField())) {\n+            ContextManager.stopSpan();\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(final EnhancedInstance enhancedInstance,\n+                                      final Method method,\n+                                      final Object[] objects,\n+                                      final Class<?>[] classes,\n+                                      final Throwable throwable) {\n+        if (ContextManager.isActive()) {\n+            ContextManager.activeSpan().errorOccurred().log(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59026d9998446b2e07779854612fe44066eefb6e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjI2MjM1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzowMjo1NlrOHf91Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowOTozMVrOHgE4fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4MDk3OQ==", "bodyText": "All catches are not necessary in the interceptor scope, as the core has try/catch-log already.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503280979", "createdAt": "2020-10-12T13:02:56Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap<>(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to resolve header or create EntrySpan.\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59026d9998446b2e07779854612fe44066eefb6e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5NjQ3OQ==", "bodyText": "These wrapping objects are executed outside of interceptor.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r503396479", "createdAt": "2020-10-12T16:09:31Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.wrapper;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.protocol.TField;\n+import org.apache.thrift.protocol.TMap;\n+import org.apache.thrift.protocol.TMessage;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.protocol.TType;\n+\n+/**\n+ * Wrapping server input protocol for reading and parsing the trace header from the original protocol. It is a special\n+ * field which will be skipped without one deal with.\n+ */\n+public class ServerInProtocolWrapper extends AbstractProtocolWrapper {\n+    private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n+    private static final StringTag TAG_ARGS = new StringTag(\"args\");\n+    private AbstractContext context;\n+\n+    public ServerInProtocolWrapper(final TProtocol protocol) {\n+        super(protocol);\n+    }\n+\n+    public void initial(AbstractContext context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public TField readFieldBegin() throws TException {\n+        final TField field = super.readFieldBegin();\n+        if (field.id == SW_MAGIC_FIELD_ID && field.type == TType.MAP) {\n+            try {\n+                TMap tMap = super.readMapBegin();\n+                Map<String, String> header = new HashMap<>(tMap.size);\n+\n+                for (int i = 0; i < tMap.size; i++) {\n+                    header.put(readString(), readString());\n+                }\n+\n+                AbstractSpan span = ContextManager.createEntrySpan(\n+                    context.getOperatorName(), createContextCarrier(header));\n+                span.start(context.startTime);\n+                span.tag(TAG_ARGS, context.getArguments());\n+                span.setComponent(ComponentsDefine.THRIFT_SERVER);\n+                SpanLayer.asRPCFramework(span);\n+            } catch (Throwable throwable) {\n+                LOGGER.error(\"Failed to resolve header or create EntrySpan.\", throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4MDk3OQ=="}, "originalCommit": {"oid": "59026d9998446b2e07779854612fe44066eefb6e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTMzMTU0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzowOToyN1rOHhAh4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzowOToyN1rOHhAh4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MzczMA==", "bodyText": "Same question, why need this?", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r504373730", "createdAt": "2020-10-14T03:09:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+/**\n+ * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n+ * TAsyncClient#receiveBase(...), into here for more efficiency.\n+ */\n+public class TServiceClientReceiveInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(final EnhancedInstance objInst,\n+                             final Method method,\n+                             final Object[] objects,\n+                             final Class<?>[] classes,\n+                             final MethodInterceptResult ret) throws Throwable {\n+    }\n+\n+    @Override\n+    public Object afterMethod(final EnhancedInstance objInst,\n+                              final Method method,\n+                              final Object[] objects,\n+                              final Class<?>[] classes,\n+                              final Object ret) throws Throwable {\n+        if (ContextManager.isActive() && Objects.nonNull(objInst.getSkyWalkingDynamicField())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd67e7535906312af522bc16fde83897f69b737"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTMzNTI1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxMToyOVrOHhAkAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxMToyOVrOHhAkAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NDI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n          \n          \n            \n             * TAsyncClient#receiveBase(...), into here for more efficiency.\n          \n          \n            \n             * TAsyncClient creates a TServiceClient for receiving the response. So splitting this method,\n          \n          \n            \n             * TAsyncClient#receiveBase(...), into here for more efficiency.\n          \n      \n    \n    \n  \n\nI am not sure what So splitting this method, TAsyncClient#receiveBase(...), into here for more efficiency. this sentence means.", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r504374272", "createdAt": "2020-10-14T03:11:29Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/client/TServiceClientReceiveInterceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+/**\n+ * TAsyncClient will create a TServiceClient for receiving the response. So splitting the this method,\n+ * TAsyncClient#receiveBase(...), into here for more efficiency.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd67e7535906312af522bc16fde83897f69b737"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjczMzg0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/TBaseAsyncProcessorInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzo0NzowOFrOHiIrcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzo0NzowOFrOHiIrcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU1NTgyNg==", "bodyText": "I guess transparent should be transform or wrap, transparent is an adjective, same as the other places where transparent appeared", "url": "https://github.com/apache/skywalking/pull/5644#discussion_r505555826", "createdAt": "2020-10-15T13:47:08Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/TBaseAsyncProcessorInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.thrift;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.AsyncContext;\n+import org.apache.skywalking.apm.plugin.thrift.wrapper.ServerInProtocolWrapper;\n+import org.apache.thrift.AsyncProcessFunction;\n+import org.apache.thrift.TBaseAsyncProcessor;\n+import org.apache.thrift.protocol.TProtocol;\n+import org.apache.thrift.server.AbstractNonblockingServer;\n+\n+/**\n+ * To transparent the AsyncProcessFunction for getting arguments of method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b6d7d3ba7634d70aa7fc07fa2dae2bea3bd20e"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4889, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}