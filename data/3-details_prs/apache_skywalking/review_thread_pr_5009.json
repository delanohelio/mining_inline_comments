{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODA2NzM2", "number": 5009, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1Nzo0MlrOEKssFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1Nzo0MlrOEKssFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjUzMzk3OnYy", "diffSide": "RIGHT", "path": "docs/en/FAQ/Memory-leak-enhance-Worker-thread.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1Nzo0M1rOGr499Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMzoyM1rOGr5YZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NTMxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Checked SkyWalking Thread Schedule Framework at [SkyWalking Java agent supported list](../setup/service-agent/java-agent/Supported-list.md), such as Spring FrameWork @Async, such as Spring @Async, which can implement tracing without any modification. \n          \n          \n            \n            Checked SkyWalking Thread Schedule Framework at [SkyWalking Java agent supported list](../setup/service-agent/java-agent/Supported-list.md), such as Spring FrameWork @Async, which can implement tracing without any modification.", "url": "https://github.com/apache/skywalking/pull/5009#discussion_r448675317", "createdAt": "2020-07-01T23:57:43Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Memory-leak-enhance-Worker-thread.md", "diffHunk": "@@ -0,0 +1,32 @@\n+### Problem \n+When using a thread pool, `TraceSegment` data in a thread cannot be reported and there are memory data that cannot be recycled (memory leaks)\n+\n+### Example\n+``` java\n+    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n+    executor.setThreadFactory(r -> new Thread(RunnableWrapper.of(r)));\n+```\n+\n+### Reason\n+\n+* Worker threads are enhanced, when using thread pool. \n+* According to the SkyWalking Java Agent design, when you want to trace cross thread, you need to enhance the task thread.\n+\n+### Resolve\n+\n+* When using `Thread Schedule Framework`\n+Checked SkyWalking Thread Schedule Framework at [SkyWalking Java agent supported list](../setup/service-agent/java-agent/Supported-list.md), such as Spring FrameWork @Async, such as Spring @Async, which can implement tracing without any modification. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a07d33ea93cc8defd6082ca0b59b7975d2078d86"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MjA4NQ==", "bodyText": "fixed", "url": "https://github.com/apache/skywalking/pull/5009#discussion_r448682085", "createdAt": "2020-07-02T00:23:23Z", "author": {"login": "zhaoyuguang"}, "path": "docs/en/FAQ/Memory-leak-enhance-Worker-thread.md", "diffHunk": "@@ -0,0 +1,32 @@\n+### Problem \n+When using a thread pool, `TraceSegment` data in a thread cannot be reported and there are memory data that cannot be recycled (memory leaks)\n+\n+### Example\n+``` java\n+    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n+    executor.setThreadFactory(r -> new Thread(RunnableWrapper.of(r)));\n+```\n+\n+### Reason\n+\n+* Worker threads are enhanced, when using thread pool. \n+* According to the SkyWalking Java Agent design, when you want to trace cross thread, you need to enhance the task thread.\n+\n+### Resolve\n+\n+* When using `Thread Schedule Framework`\n+Checked SkyWalking Thread Schedule Framework at [SkyWalking Java agent supported list](../setup/service-agent/java-agent/Supported-list.md), such as Spring FrameWork @Async, such as Spring @Async, which can implement tracing without any modification. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NTMxNw=="}, "originalCommit": {"oid": "a07d33ea93cc8defd6082ca0b59b7975d2078d86"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 40, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}