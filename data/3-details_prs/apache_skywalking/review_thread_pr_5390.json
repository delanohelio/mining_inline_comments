{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzc1Nzk1", "number": 5390, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozMjozNFrOEcfqBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MTowOVrOEcj1bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE0MjQ3OnYy", "diffSide": "RIGHT", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozMjozNFrOHHEBCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MjoyNFrOHHEX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2Nzg4MA==", "bodyText": "I think this empty line is not required.", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477167880", "createdAt": "2020-08-26T09:32:34Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "diffHunk": "@@ -18,18 +18,42 @@\n \n package org.apache.skywalking.oal.rt.parser;\n \n-import lombok.AllArgsConstructor;\n+import java.util.LinkedList;\n+import java.util.List;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n @NoArgsConstructor\n-@AllArgsConstructor\n public class ConditionExpression {\n     // original from script\n     private String expressionType;\n     private String attribute;\n     private String value;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzczNQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477173735", "createdAt": "2020-08-26T09:42:24Z", "author": {"login": "arugal"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "diffHunk": "@@ -18,18 +18,42 @@\n \n package org.apache.skywalking.oal.rt.parser;\n \n-import lombok.AllArgsConstructor;\n+import java.util.LinkedList;\n+import java.util.List;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n @NoArgsConstructor\n-@AllArgsConstructor\n public class ConditionExpression {\n     // original from script\n     private String expressionType;\n     private String attribute;\n     private String value;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2Nzg4MA=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE1NTk4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/EqualMatch.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozNjowMVrOHHEJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MTowNFrOHHEVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2OTk1Nw==", "bodyText": "equal match support literal string?", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477169957", "createdAt": "2020-08-26T09:36:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/EqualMatch.java", "diffHunk": "@@ -23,6 +23,19 @@\n \n @FilterMatcher(\"stringMatch\")\n public class EqualMatch {\n+\n+    public boolean match(String left, String right) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM0Nw==", "bodyText": "Yes, passed the unit test.\n\n  \n    \n      skywalking/oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/ScriptParserTest.java\n    \n    \n        Lines 87 to 111\n      in\n      720c1dd\n    \n    \n    \n    \n\n        \n          \n           public void testParse3() throws IOException { \n        \n\n        \n          \n               ScriptParser parser = ScriptParser.createFromScriptText( \n        \n\n        \n          \n                   \"Endpoint_percent = from(Endpoint.*).filter(status == true).filter(name == \\\"/product/abc\\\").longAvg();\", \n        \n\n        \n          \n                   TEST_SOURCE_PACKAGE \n        \n\n        \n          \n               ); \n        \n\n        \n          \n               List<AnalysisResult> results = parser.parse().getMetricsStmts(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               AnalysisResult endpointPercent = results.get(0); \n        \n\n        \n          \n               Assert.assertEquals(\"EndpointPercent\", endpointPercent.getMetricsName()); \n        \n\n        \n          \n               Assert.assertEquals(\"Endpoint\", endpointPercent.getSourceName()); \n        \n\n        \n          \n               Assert.assertEquals(\"*\", endpointPercent.getSourceAttribute()); \n        \n\n        \n          \n               Assert.assertEquals(\"longAvg\", endpointPercent.getAggregationFunctionName()); \n        \n\n        \n          \n               List<ConditionExpression> expressions = endpointPercent.getFilterExpressionsParserResult(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               Assert.assertEquals(2, expressions.size()); \n        \n\n        \n          \n            \n        \n\n        \n          \n               ConditionExpression booleanMatchExp = expressions.get(0); \n        \n\n        \n          \n               Assert.assertEquals(\"status\", booleanMatchExp.getAttribute()); \n        \n\n        \n          \n               Assert.assertEquals(\"true\", booleanMatchExp.getValue()); \n        \n\n        \n          \n               Assert.assertEquals(\"booleanMatch\", booleanMatchExp.getExpressionType()); \n        \n\n        \n          \n            \n        \n\n        \n          \n               ConditionExpression stringMatchExp = expressions.get(1); \n        \n\n        \n          \n               Assert.assertEquals(\"name\", stringMatchExp.getAttribute()); \n        \n\n        \n          \n               Assert.assertEquals(\"\\\"/product/abc\\\"\", stringMatchExp.getValue()); \n        \n\n        \n          \n               Assert.assertEquals(\"stringMatch\", stringMatchExp.getExpressionType());", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477172347", "createdAt": "2020-08-26T09:39:58Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/EqualMatch.java", "diffHunk": "@@ -23,6 +23,19 @@\n \n @FilterMatcher(\"stringMatch\")\n public class EqualMatch {\n+\n+    public boolean match(String left, String right) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2OTk1Nw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3Mjk5Nw==", "bodyText": "I noticed there are tests, just confirm.", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477172997", "createdAt": "2020-08-26T09:41:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/EqualMatch.java", "diffHunk": "@@ -23,6 +23,19 @@\n \n @FilterMatcher(\"stringMatch\")\n public class EqualMatch {\n+\n+    public boolean match(String left, String right) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2OTk1Nw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE3MTkxOnYy", "diffSide": "RIGHT", "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MDowMlrOHHESqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0MDo1NlrOHHSJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw==", "bodyText": "@kezhenxu94, the like expression seems to have some issue when @arugal did local test. He did local tests, so he moved the symbols here.", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477172393", "createdAt": "2020-08-26T09:40:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3NzU3Mw==", "bodyText": "Please recheck. @arugal Could your current test case reproduce the error? If these changed back to the old way.", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477177573", "createdAt": "2020-08-26T09:48:57Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzNzIwNg==", "bodyText": "I don't see any difference between the like expression and others, and can be solved by simply moving these symbols, can you check why it (doesn't) work(s) (before) after moving these?", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477237206", "createdAt": "2020-08-26T11:44:41Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwNjA2Mw==", "bodyText": "From my understanding, antlr and all word analyzer are order sensitive. It could match the keyword or string before these matches.", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477306063", "createdAt": "2020-08-26T13:37:08Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1NTUyMg==", "bodyText": "Could your current test case reproduce the error? If these changed back to the old way.\n\nBased on the master branch", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477355522", "createdAt": "2020-08-26T14:41:52Z", "author": {"login": "arugal"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4MTEwMQ==", "bodyText": "@kezhenxu94 From my reading of the old OALLexer definition, like or in could be tagged as IDENTIFIER. So when the Parser wants to match the expression, mismatch happens. I don't know whether this is the case, or there is deeper reason for word analysis.\nexpression\n    : booleanMatch | stringMatch | greaterMatch | lessMatch | greaterEqualMatch | lessEqualMatch | notEqualMatch | booleanNotEqualMatch | likeMatch\n    ;\n\nbooleanMatch\n    :  conditionAttribute DUALEQUALS booleanConditionValue\n    ;", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477381101", "createdAt": "2020-08-26T15:15:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4MzI2OA==", "bodyText": "latency like could be IDENTIFIER + IDENTIFIER. That is why when we talked about the language, there is a concept called KEYWORDs, which are not allowed to be used as an IDENTIFIER name, right?", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477383268", "createdAt": "2020-08-26T15:18:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5OTQ1OQ==", "bodyText": "Yes confirmed, moving the like literally on top of IDENTIFIER solves the problem, it WAS treated as an identifier", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477399459", "createdAt": "2020-08-26T15:40:56Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjM5Mw=="}, "originalCommit": {"oid": "5bd9abc031f1d7fc65702d9e0b3b3e3b3410361c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzU3MTI1OnYy", "diffSide": "RIGHT", "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0MTowNVrOHHIIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDo0MzoyNlrOHHPitA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzNTM3Nw==", "bodyText": "I think the original LR_BRACKET means Left Round Bracket, so the new one can be simplified LS_BRACKET, or if you like L_SQUARE_BRACKET", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477235377", "createdAt": "2020-08-26T11:41:05Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols\n+\n+DOT:                                 '.';\n+LR_BRACKET:                          '(';\n+RR_BRACKET:                          ')';\n+LR_SQUARE_BRACKET:                   '[';\n+RR_SQUARE_BRACKET:                   ']';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1037cfa76598098ea1e632d679829574f2971c5f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1NjcyNA==", "bodyText": "Done, you're right :)", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477356724", "createdAt": "2020-08-26T14:43:26Z", "author": {"login": "arugal"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -61,6 +61,26 @@ SRC_PROFILE_TASK: 'profile_task';\n SRC_PROFILE_TASK_LOG: 'profile_task_log';\n SRC_PROFILE_THREAD_SHANPSHOT: 'profile_task_segment_snapshot';\n \n+// Constructors symbols\n+\n+DOT:                                 '.';\n+LR_BRACKET:                          '(';\n+RR_BRACKET:                          ')';\n+LR_SQUARE_BRACKET:                   '[';\n+RR_SQUARE_BRACKET:                   ']';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzNTM3Nw=="}, "originalCommit": {"oid": "1037cfa76598098ea1e632d679829574f2971c5f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzU4OTk5OnYy", "diffSide": "RIGHT", "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0Njo1MFrOHHIUFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozNDoxOVrOHHR29g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzODI5Mw==", "bodyText": "The minimal change is to annotate this field with @Builder.Default and give it a default value (null for example)", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477238293", "createdAt": "2020-08-26T11:46:50Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "diffHunk": "@@ -18,18 +18,41 @@\n \n package org.apache.skywalking.oal.rt.parser;\n \n-import lombok.AllArgsConstructor;\n+import java.util.LinkedList;\n+import java.util.List;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n @NoArgsConstructor\n-@AllArgsConstructor\n public class ConditionExpression {\n     // original from script\n     private String expressionType;\n     private String attribute;\n     private String value;\n+    private List<String> values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1037cfa76598098ea1e632d679829574f2971c5f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2MDYyNw==", "bodyText": "The values default isnull, what did I miss?", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477360627", "createdAt": "2020-08-26T14:48:28Z", "author": {"login": "arugal"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "diffHunk": "@@ -18,18 +18,41 @@\n \n package org.apache.skywalking.oal.rt.parser;\n \n-import lombok.AllArgsConstructor;\n+import java.util.LinkedList;\n+import java.util.List;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n @NoArgsConstructor\n-@AllArgsConstructor\n public class ConditionExpression {\n     // original from script\n     private String expressionType;\n     private String attribute;\n     private String value;\n+    private List<String> values;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzODI5Mw=="}, "originalCommit": {"oid": "1037cfa76598098ea1e632d679829574f2971c5f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NDY3OA==", "bodyText": "@arugal I think Zhenxu is talking about using Lombok.", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477394678", "createdAt": "2020-08-26T15:34:19Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/parser/ConditionExpression.java", "diffHunk": "@@ -18,18 +18,41 @@\n \n package org.apache.skywalking.oal.rt.parser;\n \n-import lombok.AllArgsConstructor;\n+import java.util.LinkedList;\n+import java.util.List;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n @NoArgsConstructor\n-@AllArgsConstructor\n public class ConditionExpression {\n     // original from script\n     private String expressionType;\n     private String attribute;\n     private String value;\n+    private List<String> values;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzODI5Mw=="}, "originalCommit": {"oid": "1037cfa76598098ea1e632d679829574f2971c5f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzgyNzAxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/LikeMatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MTowOVrOHHKjtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MTowOVrOHHKjtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NTA2MQ==", "bodyText": "OK I made a mistake here before :(", "url": "https://github.com/apache/skywalking/pull/5390#discussion_r477275061", "createdAt": "2020-08-26T12:51:09Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/expression/LikeMatch.java", "diffHunk": "@@ -23,14 +23,18 @@\n @FilterMatcher\n public class LikeMatch {\n     public boolean match(String left, String right) {\n-        if (left == null || right == null) {\n+        if (right == null || left == null) {\n             return false;\n         }\n-        if (left.startsWith(\"%\") && left.endsWith(\"%\")) { // %keyword%\n-            return right.contains(left.substring(1, left.length() - 1));\n+        if (right.startsWith(\"\\\"\") && right.endsWith(\"\\\"\")) {\n+            right = right.substring(1, right.length() - 1);\n         }\n-        return (left.startsWith(\"%\") && right.endsWith(left.substring(1)))  // %suffix\n-            || (left.endsWith(\"%\") && right.startsWith(left.substring(0, left.length() - 1))) // prefix%\n+\n+        if (right.startsWith(\"%\") && right.endsWith(\"%\")) { // %keyword%\n+            return left.contains(right.substring(1, right.length() - 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1037cfa76598098ea1e632d679829574f2971c5f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4976, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}