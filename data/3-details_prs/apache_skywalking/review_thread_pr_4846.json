{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTg1MzA2", "number": 4846, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1MzozOFrOEDJl4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzoxMDozM1rOEHXFsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM4MzM5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1MzozOFrOGgCSDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjo1NjoxOVrOGgDoHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTAwNQ==", "bodyText": "The artifactId and the description don't match, one says it's for 2.x while the other says it's for 1.x", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245005", "createdAt": "2020-06-06T06:53:38Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>apm-sdk-plugin</artifactId>\n+    <groupId>org.apache.skywalking</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>apm-influxdb-2.x-plugin</artifactId>\n+  <description>This plugin is for use with InfluxDB 1.x.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NzAzNw==", "bodyText": "apm-influxdb-2.x-plugin means  influxdb client lib version\nThis plugin is for use with InfluxDB 1.x. means influxdb version , then i'll change to client version", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436267037", "createdAt": "2020-06-06T12:56:19Z", "author": {"login": "dagmom"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>apm-sdk-plugin</artifactId>\n+    <groupId>org.apache.skywalking</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>apm-influxdb-2.x-plugin</artifactId>\n+  <description>This plugin is for use with InfluxDB 1.x.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTAwNQ=="}, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM4MzY1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1NDo1MFrOGgCSLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNjoyNDoyOFrOGgEfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTAzOQ==", "bodyText": "Capitalize the first letter of the sentence please", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245039", "createdAt": "2020-06-06T06:54:50Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3ODk4NQ==", "bodyText": "What does since date mean? Quiet unusual, from my understanding. We coulf know when be added through git log directly", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436278985", "createdAt": "2020-06-06T15:51:28Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTAzOQ=="}, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTEyNA==", "bodyText": "What does since date mean? Quiet unusual, from my understanding. We coulf know when be added through git log directly", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436279124", "createdAt": "2020-06-06T15:53:20Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTAzOQ=="}, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4MTI3NA==", "bodyText": "ok,I'll removesince", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436281274", "createdAt": "2020-06-06T16:24:28Z", "author": {"login": "dagmom"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTAzOQ=="}, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM4NDI4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1NTo1NVrOGgCSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1NTo1NVrOGgCSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String INFLUXDB_METHOD_INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor\";\n          \n          \n            \n                private static final String INFLUXDB_METHOD_INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor\";", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245114", "createdAt": "2020-06-06T06:55:55Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22\n+ */\n+public class InfluxDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.influxdb.impl.InfluxDBImpl\";\n+    private static final String INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBConstructorInterceptor\";\n+  private static final String INFLUXDB_METHOD_INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM4NDczOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/influxdb/InfluxDBMethodInterceptorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1Njo1NVrOGgCSsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1Njo1NVrOGgCSsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTE2OA==", "bodyText": "Remove if useless, or fix it if assertion is failed", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245168", "createdAt": "2020-06-06T06:56:55Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/influxdb/InfluxDBMethodInterceptorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.LogDataEntity;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor;\n+import org.hamcrest.CoreMatchers;\n+import org.influxdb.InfluxDBException;\n+import org.influxdb.dto.Point;\n+import org.influxdb.impl.InfluxDBImpl;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class InfluxDBMethodInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    private InfluxDBMethodInterceptor interceptor;\n+\n+    private Object[] allArgument;\n+\n+    private Class[] argumentType;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        allArgument = new Object[] {\n+            Point.measurement(\"cpu\")\n+                .tag(\"host\", \"127.0.0.1\")\n+                .addField(\"use_idle\", 0.8)\n+                .build()\n+        };\n+        argumentType = new Class[] {\n+            Point.class\n+        };\n+\n+        interceptor = new InfluxDBMethodInterceptor();\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(\"http://127.0.0.1:8086\");\n+    }\n+\n+    @Test\n+    public void testIntercept() throws Throwable {\n+        interceptor.beforeMethod(enhancedInstance, getMockWriteMethod(), allArgument, argumentType, null);\n+        interceptor.afterMethod(enhancedInstance, getMockWriteMethod(), allArgument, argumentType, null);\n+\n+        TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);\n+        assertThat(spans.size(), is(1));\n+        assertInfluxDBSpan(spans.get(0));\n+    }\n+\n+    @Test\n+    public void testInterceptWithException() throws Throwable {\n+        interceptor.beforeMethod(enhancedInstance, getMockWriteMethod(), allArgument, argumentType, null);\n+        interceptor.handleMethodException(enhancedInstance, getMockWriteMethod(), allArgument, argumentType, new InfluxDBException(\"test exception\"));\n+        interceptor.afterMethod(enhancedInstance, getMockWriteMethod(), allArgument, argumentType, null);\n+\n+        TraceSegment traceSegment = segmentStorage.getTraceSegments().get(0);\n+        List<AbstractTracingSpan> spans = SegmentHelper.getSpans(traceSegment);\n+        assertThat(spans.size(), is(1));\n+        assertInfluxDBSpan(spans.get(0));\n+\n+        assertLogData(SpanHelper.getLogs(spans.get(0)));\n+    }\n+\n+    private void assertLogData(List<LogDataEntity> logDataEntities) {\n+        assertThat(logDataEntities.size(), is(1));\n+        LogDataEntity logData = logDataEntities.get(0);\n+        Assert.assertThat(logData.getLogs().size(), is(4));\n+        Assert.assertThat(logData.getLogs().get(0).getValue(), CoreMatchers.<Object>is(\"error\"));\n+        Assert.assertThat(logData.getLogs()\n+                                 .get(1)\n+                                 .getValue(), CoreMatchers.<Object>is(InfluxDBException.class.getName()));\n+        Assert.assertEquals(\"test exception\", logData.getLogs().get(2).getValue());\n+        assertNotNull(logData.getLogs().get(3).getValue());\n+    }\n+\n+    private void assertInfluxDBSpan(AbstractTracingSpan span) {\n+        assertThat(span.getOperationName(), is(\"InfluxDB/write\"));\n+        assertThat(span.isExit(), is(true));\n+        assertThat(SpanHelper.getComponentId(span), is(ComponentsDefine.INFLUXDB_JAVA.getId()));\n+        List<TagValuePair> tags = SpanHelper.getTags(span);\n+        assertThat(tags.get(0).getValue(), is(\"InfluxDB\"));\n+//        assertThat(tags.get(1).getValue(), is(\"write \".concat(allArgument[0].toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM4NTg4OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/influxdb-scenario/src/main/java/org/apache/skywalking/apm/testcase/influxdb/executor/InfluxDBExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1OTowNlrOGgCTQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo1OTowNlrOGgCTQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTMxNA==", "bodyText": "Remove author tag", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245314", "createdAt": "2020-06-06T06:59:06Z", "author": {"login": "kezhenxu94"}, "path": "test/plugin/scenarios/influxdb-scenario/src/main/java/org/apache/skywalking/apm/testcase/influxdb/executor/InfluxDBExecutor.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.influxdb.executor;\n+\n+import org.influxdb.InfluxDB;\n+import org.influxdb.InfluxDBFactory;\n+import org.influxdb.dto.Point;\n+import org.influxdb.dto.Pong;\n+import org.influxdb.dto.Query;\n+import org.influxdb.dto.QueryResult;\n+\n+/**\n+ * InfluxDBExecutor\n+ *\n+ * @author guhao\n+ * @since 2020/6/3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM4NjI3OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/influxdb-scenario/src/test/java/org/apache/skywalking/apm/testcase/influxdb/executor/InfluxDBExecutorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNzowMDowNVrOGgCTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNzowMDowNVrOGgCTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTM2Mg==", "bodyText": "Remove this if it's useless", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245362", "createdAt": "2020-06-06T07:00:05Z", "author": {"login": "kezhenxu94"}, "path": "test/plugin/scenarios/influxdb-scenario/src/test/java/org/apache/skywalking/apm/testcase/influxdb/executor/InfluxDBExecutorTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.influxdb.executor;\n+\n+/**\n+ * InfluxDBExecutorTest\n+ *\n+ * @author guhao\n+ * @since 2020/6/3\n+ */\n+public class InfluxDBExecutorTest {\n+\n+//  @Test\n+//  public void testPing(){\n+//    InfluxDBExecutor executor = new InfluxDBExecutor(\"http://localhost:8086\");\n+//    Pong pong = executor.ping();\n+//    System.out.println(pong.getVersion());\n+//    Assert.assertNotNull(pong.getVersion());\n+//  }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM5MDk1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNzowOTowNVrOGgCVww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNjowNjowN1rOGgEa7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTk1NQ==", "bodyText": "This is good for encapsulation, but it's a pitfall that we check third-party classes in classes whose name end with *Instrumentation\n\n  \n    \n      skywalking/apm-checkstyle/checkStyle.xml\n    \n    \n        Lines 122 to 129\n      in\n      f3d907b\n    \n    \n    \n    \n\n        \n          \n           <module name=\"ImportControl\"> \n        \n\n        \n          \n               <property name=\"file\" value=\"${import.control}\"/> \n        \n\n        \n          \n               <property name=\"path\" value=\"apm-sniffer/(apm-sdk-plugin|bootstrap-plugins|optional-plugins)/.+/src/main/.+Instrumentation.java$\"/> \n        \n\n        \n          \n           </module> \n        \n\n        \n          \n            \n        \n\n        \n          \n           <module name=\"ImportControl\"> \n        \n\n        \n          \n               <property name=\"file\" value=\"${import.control}\"/> \n        \n\n        \n          \n               <property name=\"path\" value=\"apm-sniffer/apm-toolkit-activation/.+/src/main/.+Activation.java$\"/> \n        \n    \n  \n\n\nto avoid issues like this #2871 , but this breaks the checks, although there is no third-party class in the InfluxDBMethodMatch for now, other reviewers should pay attention to this class in the future, FYI @wu-sheng", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436245955", "createdAt": "2020-06-06T07:09:05Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22\n+ */\n+public class InfluxDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.influxdb.impl.InfluxDBImpl\";\n+    private static final String INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBConstructorInterceptor\";\n+  private static final String INFLUXDB_METHOD_INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArgument(0, String.class);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPTOR_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+      return new InstanceMethodsInterceptPoint[] {\n+          new InstanceMethodsInterceptPoint() {\n+            @Override\n+            public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+              return InfluxDBMethodMatch.INSTANCE.getInfluxDBMethodMatcher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3OTM0Nw==", "bodyText": "Question, why need this singleton. This method is not called in high frequently, and nothing cached there.", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436279347", "createdAt": "2020-06-06T15:56:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22\n+ */\n+public class InfluxDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.influxdb.impl.InfluxDBImpl\";\n+    private static final String INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBConstructorInterceptor\";\n+  private static final String INFLUXDB_METHOD_INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArgument(0, String.class);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPTOR_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+      return new InstanceMethodsInterceptPoint[] {\n+          new InstanceMethodsInterceptPoint() {\n+            @Override\n+            public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+              return InfluxDBMethodMatch.INSTANCE.getInfluxDBMethodMatcher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTk1NQ=="}, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4MDA0NQ==", "bodyText": "I did it the other way", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r436280045", "createdAt": "2020-06-06T16:06:07Z", "author": {"login": "dagmom"}, "path": "apm-sniffer/apm-sdk-plugin/influxdb-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/influxdb/define/InfluxDBInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.influxdb.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+import org.apache.skywalking.apm.plugin.influxdb.InfluxDBMethodMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+/**\n+ * enhance InfluxDB InfluxDBFactory\n+ * really impl class {@link org.influxdb.impl.InfluxDBImpl}\n+ *\n+ * @since  2020/05/22\n+ */\n+public class InfluxDBInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.influxdb.impl.InfluxDBImpl\";\n+    private static final String INTERCEPTOR_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBConstructorInterceptor\";\n+  private static final String INFLUXDB_METHOD_INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.influxdb.interceptor.InfluxDBMethodInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[] {\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArgument(0, String.class);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPTOR_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+      return new InstanceMethodsInterceptPoint[] {\n+          new InstanceMethodsInterceptPoint() {\n+            @Override\n+            public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+              return InfluxDBMethodMatch.INSTANCE.getInfluxDBMethodMatcher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTk1NQ=="}, "originalCommit": {"oid": "ca855b4a5837bf490727b3c9357ade2c38753a64"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDg2MjE3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzoxNzo0NlrOGmmhjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzoyNzozOFrOGmmkQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDI1Mg==", "bodyText": "Why Deleting? Mischange?", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r443130252", "createdAt": "2020-06-20T13:17:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -52,7 +52,7 @@ ORACLE:\n   languages: Java\n Redis:\n   id: 7\n-  languages: Java,C#,Node.js,PHP\n+  languages: Java,C#,Node.js", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e272e753b82db34098485e8d8c0c58ebe02e0995"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDk0Ng==", "bodyText": "Mischange when merge remote-tracing branch", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r443130946", "createdAt": "2020-06-20T13:27:38Z", "author": {"login": "dagmom"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -52,7 +52,7 @@ ORACLE:\n   languages: Java\n Redis:\n   id: 7\n-  languages: Java,C#,Node.js,PHP\n+  languages: Java,C#,Node.js", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDI1Mg=="}, "originalCommit": {"oid": "e272e753b82db34098485e8d8c0c58ebe02e0995"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTUzNzc4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/config/agent.config", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzoxMDozM1rOGmr5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzoxMDozM1rOGmr5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODE4Mw==", "bodyText": "This is not a widely used config, don't need to add it into the default agent.config. Putting it in the document should be enough.", "url": "https://github.com/apache/skywalking/pull/4846#discussion_r443218183", "createdAt": "2020-06-21T13:10:33Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -78,3 +78,6 @@ logging.level=${SW_LOGGING_LEVEL:INFO}\n \n # mysql plugin configuration\n # plugin.mysql.trace_sql_parameters=${SW_MYSQL_TRACE_SQL_PARAMETERS:false}\n+\n+# influxdb plugin configuration\n+# plugin.influxdb.trace_influxql=${SW_INFLUXDB_TRACE_INFLUXQL:true}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43af6268e95def8cea78bd720bff201278e42fa8"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 178, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}