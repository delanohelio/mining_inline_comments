{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1OTc3NDYw", "number": 5615, "title": " Support group concept in the alarm core", "bodyText": "Please answer these questions before submitting a pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n\n\n\nBug fix\n\n\nBug description.\n\n\nHow to fix?\n\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.\nSupport group concept in the alarm core. #5475", "createdAt": "2020-10-01T05:48:17Z", "url": "https://github.com/apache/skywalking/pull/5615", "merged": true, "mergeCommit": {"oid": "2c729b5d69b095962e7be5b8570eedc374659ec5"}, "closed": true, "closedAt": "2020-10-03T15:26:30Z", "author": {"login": "xbkaishui"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOIHhhAH2gAyNDk1OTc3NDYwOmI1M2EwMWZiYmJiNmY2ZTEwZWRmYTQ2MjhhMGQ2NGViN2YwOTAxN2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdO7mZlgFqTUwMTU1MDY5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b53a01fbbbb6f6e10edfa4628a0d64eb7f09017e", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/b53a01fbbbb6f6e10edfa4628a0d64eb7f09017e", "committedDate": "2020-10-01T02:39:38Z", "message": "add composite rule config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6e9a2d71502d91a4794760e9c6be48dc9fd4b86", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/d6e9a2d71502d91a4794760e9c6be48dc9fd4b86", "committedDate": "2020-10-01T05:19:35Z", "message": "add test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5adde1a114bbf789adb9f70f438e7de2449622b", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/b5adde1a114bbf789adb9f70f438e7de2449622b", "committedDate": "2020-10-01T05:35:03Z", "message": "fix test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4553cb15eb9f975b69b3d69f91943fbf88ebb21a", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/4553cb15eb9f975b69b3d69f91943fbf88ebb21a", "committedDate": "2020-10-01T06:22:33Z", "message": "Merge branch 'master' into group-alarm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759b0af0a23cb752b775cec1fe6244566537f210", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/759b0af0a23cb752b775cec1fe6244566537f210", "committedDate": "2020-10-01T07:08:10Z", "message": "Merge branch 'master' into group-alarm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDY1NzMw", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-500065730", "createdAt": "2020-10-01T07:15:20Z", "commit": {"oid": "4553cb15eb9f975b69b3d69f91943fbf88ebb21a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoxNToyMFrOHa9Xqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoxNToyMFrOHa9Xqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDUwNw==", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method RunningRule$Window.checkAlarm() indirectly reads without synchronization from this.values. Potentially races with write in method RunningRule$Window.add(...).\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498030507", "createdAt": "2020-10-01T07:15:20Z", "author": {"login": "sonatype-lift"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -323,7 +328,7 @@\n             }\n         }\n \n-        public AlarmMessage checkAlarm() {\n+        public Optional<AlarmMessage> checkAlarm() {\n             if (isMatch()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4553cb15eb9f975b69b3d69f91943fbf88ebb21a"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTQwMjcz", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-500140273", "createdAt": "2020-10-01T08:55:34Z", "commit": {"oid": "759b0af0a23cb752b775cec1fe6244566537f210"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1NTozNVrOHbA3_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1ODoyM1rOHbA-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4NzkzNA==", "bodyText": "The test cases should cover the exception cases. Such as, what happens for a_rule + b_rule, not_exist_rule && b_rule.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498087934", "createdAt": "2020-10-01T08:55:35Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.ExpressionContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class CompositeRuleEvaluatorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759b0af0a23cb752b775cec1fe6244566537f210"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4OTYzOA==", "bodyText": "As you add a new dependency, you need to update the LICENSE. You need to add the repo with license name(Apache 2.0) here.\nhttps://github.com/apache/skywalking/blob/master/dist-material/release-docs/LICENSE#L339\nAlso, you need to check whether it causes more dependencies added. If so, others' licenses should be added.\n\nAlso, you need to fix the check from the script in this folder, https://github.com/apache/skywalking/tree/master/tools/dependencies.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498089638", "createdAt": "2020-10-01T08:58:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/pom.xml", "diffHunk": "@@ -531,6 +532,11 @@\n                 <artifactId>groovy</artifactId>\n                 <version>${groovy.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.mvel</groupId>\n+                <artifactId>mvel2</artifactId>\n+                <version>${mvel.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759b0af0a23cb752b775cec1fe6244566537f210"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b288b815247072d5ae32ea0cb4e771f90af5e35", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/5b288b815247072d5ae32ea0cb4e771f90af5e35", "committedDate": "2020-10-01T15:07:24Z", "message": "add license and more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b625300ed7f7fa15ff33dd01e49cbda816e9d820", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/b625300ed7f7fa15ff33dd01e49cbda816e9d820", "committedDate": "2020-10-01T15:07:24Z", "message": "update document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/c620ad971f67252c1bd5bce921bea09959c25b42", "committedDate": "2020-10-01T15:11:41Z", "message": "revert change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDY1NDI4", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-500465428", "createdAt": "2020-10-01T15:25:42Z", "commit": {"oid": "b625300ed7f7fa15ff33dd01e49cbda816e9d820"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToyNTo0MlrOHbPvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToyNTo0MlrOHbPvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzMTUwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Service success rate lower than 80% in last 2 minutes.\n          \n          \n            \n            3. Percentile of service response time is over 1s in last 3 minutes\n          \n          \n            \n            4. Service Instance average response time over 1s in last 2 minutes, and the instance name matches the regex.\n          \n          \n            \n            5. Endpoint average response time over 1s in last 2 minutes.\n          \n          \n            \n            6. Database access average response time over 1s in last 2 minutes.\n          \n          \n            \n            7. Endpoint relation average response time over 1s in last 2 minutes.\n          \n          \n            \n            1. Service success rate lower than 80% in last 2 minutes.\n          \n          \n            \n            1. Percentile of service response time is over 1s in last 3 minutes\n          \n          \n            \n            1. Service Instance average response time over 1s in last 2 minutes, and the instance name matches the regex.\n          \n          \n            \n            1. Endpoint average response time over 1s in last 2 minutes.\n          \n          \n            \n            1. Database access average response time over 1s in last 2 minutes.\n          \n          \n            \n            1. Endpoint relation average response time over 1s in last 2 minutes.\n          \n      \n    \n    \n  \n\nThis is markdown, you don't need to increase by yourself.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498331504", "createdAt": "2020-10-01T15:25:42Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -93,17 +105,24 @@ rules:\n     count: 3\n     silence-period: 5\n     message: The request number of entity {name} non-200 status is more than expected.\n+    only-as-condition: false\n+composite-rules:\n+  comp_rule:\n+    # Must satisfied percent rule and resp time rule \n+    expression: service_percent_rule && service_resp_time_percentile_rule\n+    message: Service percent less than 80% and response time p50 > 1000\n ```\n \n+\n ### Default alarm rules\n We provided a default `alarm-setting.yml` in our distribution only for convenience, which including following rules\n 1. Service average response time over 1s in last 3 minutes.\n-1. Service success rate lower than 80% in last 2 minutes.\n-1. Percentile of service response time is over 1s in last 3 minutes\n-1. Service Instance average response time over 1s in last 2 minutes, and the instance name matches the regex.\n-1. Endpoint average response time over 1s in last 2 minutes.\n-1. Database access average response time over 1s in last 2 minutes.\n-1. Endpoint relation average response time over 1s in last 2 minutes.\n+2. Service success rate lower than 80% in last 2 minutes.\n+3. Percentile of service response time is over 1s in last 3 minutes\n+4. Service Instance average response time over 1s in last 2 minutes, and the instance name matches the regex.\n+5. Endpoint average response time over 1s in last 2 minutes.\n+6. Database access average response time over 1s in last 2 minutes.\n+7. Endpoint relation average response time over 1s in last 2 minutes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b625300ed7f7fa15ff33dd01e49cbda816e9d820"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODE4NDUx", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-500818451", "createdAt": "2020-10-02T01:46:02Z", "commit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMTo0NjowMlrOHbfW8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMjowMjowNlrOHbfh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4NzM3OQ==", "bodyText": "Do we have the chance to log or raise the exception when exceptions happen?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498587379", "createdAt": "2020-10-02T01:46:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.ExpressionContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class CompositeRuleEvaluatorTest {\n+\n+    private CompositeRuleEvaluator ruleEvaluator;\n+\n+    @Before\n+    public void init() {\n+        Expression expression = new Expression(new ExpressionContext());\n+        ruleEvaluator = new CompositeRuleEvaluator(expression);\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithAndOp() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule && b_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(1));\n+        assertThat(compositeMsgs.get(0).getAlarmMessage(), is(\"composite rule triggered!\"));\n+        assertThat(compositeMsgs.get(0).getRuleName(), is(\"dummy\"));\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithNotExistsRule() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule && not_exist_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(0));\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithException() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule + b_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4NzYzNA==", "bodyText": "Does the AlarmMessage include the id0/id1/name? Please verify those.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498587634", "createdAt": "2020-10-02T01:47:34Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.ExpressionContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class CompositeRuleEvaluatorTest {\n+\n+    private CompositeRuleEvaluator ruleEvaluator;\n+\n+    @Before\n+    public void init() {\n+        Expression expression = new Expression(new ExpressionContext());\n+        ruleEvaluator = new CompositeRuleEvaluator(expression);\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithAndOp() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule && b_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(1));\n+        assertThat(compositeMsgs.get(0).getAlarmMessage(), is(\"composite rule triggered!\"));\n+        assertThat(compositeMsgs.get(0).getRuleName(), is(\"dummy\"));\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithNotExistsRule() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule && not_exist_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(0));\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithException() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule + b_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(0));\n+    }\n+\n+    private List<AlarmMessage> getAlarmMessages() {\n+        List<AlarmMessage> alarmMessages = new ArrayList<>();\n+        AlarmMessage alarmMessage = new AlarmMessage();\n+        alarmMessage.setRuleName(\"a_rule\");\n+        alarmMessage.setOnlyAsCondition(true);\n+        alarmMessage.setId0(\"11\");\n+        alarmMessage.setName(\"\");\n+        alarmMessage.setScope(\"\");\n+        alarmMessage.setScopeId(1);\n+        alarmMessages.add(alarmMessage);\n+        alarmMessage = new AlarmMessage();\n+        alarmMessage.setRuleName(\"b_rule\");\n+        alarmMessage.setOnlyAsCondition(true);\n+        alarmMessage.setId0(\"11\");\n+        alarmMessage.setName(\"\");\n+        alarmMessage.setScope(\"\");\n+        alarmMessage.setScopeId(1);\n+        alarmMessages.add(alarmMessage);\n+        return alarmMessages;\n+    }\n+\n+    @Test\n+    public void testEvaluatorMessageWithOrOp() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule || b_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        alarmMessages.remove(0);\n+        List<AlarmMessage> compositeMsgs = ruleEvaluator.evaluator(compositeAlarmRules, alarmMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4OTAxOQ==", "bodyText": "Const#ID_CONNECTOR is _.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498589019", "createdAt": "2020-10-02T01:55:13Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage -> Joiner.on(\"_\").useForNull(\"\").join(alarmMessage.getId0(), alarmMessage.getId1()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4OTE0MA==", "bodyText": "The coverage reports many lines are not covered, please recheck, as this method is super important for this feature.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498589140", "createdAt": "2020-10-02T01:55:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU4OTQxMw==", "bodyText": "What does this remove mean?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498589413", "createdAt": "2020-10-02T01:57:33Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage -> Joiner.on(\"_\").useForNull(\"\").join(alarmMessage.getId0(), alarmMessage.getId1()));\n+        for (CompositeAlarmRule compositeAlarmRule : compositeAlarmRules) {\n+            String expr = compositeAlarmRule.getExpression();\n+            Set<String> dependencyRules = expression.analysisInputs(expr);\n+            Map<String, Object> dataContext = new HashMap<>();\n+            messageMap.asMap().forEach((key, alarmMessageList) -> {\n+                Set<String> allRuleNames = new HashSet<>(dependencyRules);\n+                alarmMessageList.forEach(alarmMessage -> {\n+                    if (allRuleNames.remove(alarmMessage.getRuleName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU5MDE4Mw==", "bodyText": "As these supported, I think name and id0/id1 are available in the message. Could you update the doc?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498590183", "createdAt": "2020-10-02T02:02:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage -> Joiner.on(\"_\").useForNull(\"\").join(alarmMessage.getId0(), alarmMessage.getId1()));\n+        for (CompositeAlarmRule compositeAlarmRule : compositeAlarmRules) {\n+            String expr = compositeAlarmRule.getExpression();\n+            Set<String> dependencyRules = expression.analysisInputs(expr);\n+            Map<String, Object> dataContext = new HashMap<>();\n+            messageMap.asMap().forEach((key, alarmMessageList) -> {\n+                Set<String> allRuleNames = new HashSet<>(dependencyRules);\n+                alarmMessageList.forEach(alarmMessage -> {\n+                    if (allRuleNames.remove(alarmMessage.getRuleName())) {\n+                        dataContext.put(alarmMessage.getRuleName(), true);\n+                    }\n+                });\n+                allRuleNames.forEach(ruleName -> {\n+                    dataContext.put(ruleName, false);\n+                });\n+                Object matched = expression.eval(expr, dataContext);\n+                if (matched instanceof Boolean && (Boolean) matched) {\n+                    AlarmMessage headMsg = alarmMessageList.iterator().next();\n+                    AlarmMessage message = new AlarmMessage();\n+                    message.setOnlyAsCondition(false);\n+                    message.setScopeId(headMsg.getScopeId());\n+                    message.setScope(headMsg.getScope());\n+                    message.setName(headMsg.getName());\n+                    message.setId0(headMsg.getId0());\n+                    message.setId1(headMsg.getId1());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c620ad971f67252c1bd5bce921bea09959c25b42"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba927b1090aed62032899a986cd4e16e7edd1976", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ba927b1090aed62032899a986cd4e16e7edd1976", "committedDate": "2020-10-02T13:25:57Z", "message": "refactor and add more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/4f3264cad6097ad74673db0b8ad007206c2d317c", "committedDate": "2020-10-02T14:10:37Z", "message": "Merge branch 'master' into group-alarm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTc1MDQ1", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501175045", "createdAt": "2020-10-02T14:16:50Z", "commit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDoxNjo1MFrOHbvX4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNjowMVrOHbwFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0OTc2Mg==", "bodyText": "evaluator is referring to an object. You may mean evaluate.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498849762", "createdAt": "2020-10-02T14:16:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDI0MA==", "bodyText": "If contains, then put?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498850240", "createdAt": "2020-10-02T14:17:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage -> Joiner.on(Const.ID_CONNECTOR).useForNull(Const.EMPTY_STRING).join(alarmMessage.getId0(), alarmMessage.getId1()));\n+        for (CompositeAlarmRule compositeAlarmRule : compositeAlarmRules) {\n+            String expr = compositeAlarmRule.getExpression();\n+            Set<String> dependencyRules = expression.analysisInputs(expr);\n+            Map<String, Object> dataContext = new HashMap<>();\n+            messageMap.asMap().forEach((key, alarmMessageList) -> {\n+                dependencyRules.forEach(ruleName -> dataContext.put(ruleName, false));\n+                alarmMessageList.forEach(alarmMessage -> {\n+                    if (dependencyRules.contains(alarmMessage.getRuleName())) {\n+                        dataContext.put(alarmMessage.getRuleName(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDk4Mg==", "bodyText": "This should move to the last field of the class.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498850982", "createdAt": "2020-10-02T14:18:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Rules.java", "diffHunk": "@@ -31,13 +31,15 @@\n @Getter\n @ToString\n public class Rules {\n+    private List<CompositeAlarmRule> compositeRules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MTA2Mw==", "bodyText": "Same here.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498851063", "createdAt": "2020-10-02T14:18:57Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Rules.java", "diffHunk": "@@ -31,13 +31,15 @@\n @Getter\n @ToString\n public class Rules {\n+    private List<CompositeAlarmRule> compositeRules;\n     private List<AlarmRule> rules;\n     private List<String> webhooks;\n     private GRPCAlarmSetting grpchookSetting;\n     private SlackSettings slacks;\n     private WechatSettings wecchats;\n \n     public Rules() {\n+        this.compositeRules = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MTQwNQ==", "bodyText": "Could you recheck what is the status if the dynamic config center pushing an illegal alarm setting?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498861405", "createdAt": "2020-10-02T14:36:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -49,93 +50,136 @@ public Rules readRules() {\n         Rules rules = new Rules();\n \n         if (Objects.nonNull(yamlData)) {\n-            Map rulesData = (Map) yamlData.get(\"rules\");\n-            if (rulesData != null) {\n-                rules.setRules(new ArrayList<>());\n-                rulesData.forEach((k, v) -> {\n-                    if (((String) k).endsWith(\"_rule\")) {\n-                        AlarmRule alarmRule = new AlarmRule();\n-                        alarmRule.setAlarmRuleName((String) k);\n-                        Map settings = (Map) v;\n-                        Object metricsName = settings.get(\"metrics-name\");\n-                        if (metricsName == null) {\n-                            throw new IllegalArgumentException(\"metrics-name can't be null\");\n-                        }\n-\n-                        alarmRule.setMetricsName((String) metricsName);\n-                        alarmRule.setIncludeNames((ArrayList) settings.getOrDefault(\"include-names\", new ArrayList(0)));\n-                        alarmRule.setExcludeNames((ArrayList) settings.getOrDefault(\"exclude-names\", new ArrayList(0)));\n-                        alarmRule.setIncludeNamesRegex((String) settings.getOrDefault(\"include-names-regex\", \"\"));\n-                        alarmRule.setExcludeNamesRegex((String) settings.getOrDefault(\"exclude-names-regex\", \"\"));\n-                        alarmRule.setIncludeLabels(\n-                            (ArrayList) settings.getOrDefault(\"include-labels\", new ArrayList(0)));\n-                        alarmRule.setExcludeLabels(\n-                            (ArrayList) settings.getOrDefault(\"exclude-labels\", new ArrayList(0)));\n-                        alarmRule.setIncludeLabelsRegex((String) settings.getOrDefault(\"include-labels-regex\", \"\"));\n-                        alarmRule.setExcludeLabelsRegex((String) settings.getOrDefault(\"exclude-labels-regex\", \"\"));\n-                        alarmRule.setThreshold(settings.get(\"threshold\").toString());\n-                        alarmRule.setOp((String) settings.get(\"op\"));\n-                        alarmRule.setPeriod((Integer) settings.getOrDefault(\"period\", 1));\n-                        alarmRule.setCount((Integer) settings.getOrDefault(\"count\", 1));\n-                        // How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.\n-                        alarmRule.setSilencePeriod((Integer) settings.getOrDefault(\"silence-period\", alarmRule.getPeriod()));\n-                        alarmRule.setMessage(\n-                            (String) settings.getOrDefault(\"message\", \"Alarm caused by Rule \" + alarmRule\n-                                .getAlarmRuleName()));\n+            readRulesConfig(rules);\n+            readCompositeRuleConfig(rules);\n+            readWebHookConfig(rules);\n+            readGrpcConfig(rules);\n+            readSlackConfig(rules);\n+            readWechatConfig(rules);\n+        }\n+        return rules;\n+    }\n \n-                        rules.getRules().add(alarmRule);\n-                    }\n-                });\n-            }\n-            List webhooks = (List) yamlData.get(\"webhooks\");\n-            if (webhooks != null) {\n-                rules.setWebhooks(new ArrayList<>());\n-                webhooks.forEach(url -> {\n-                    rules.getWebhooks().add((String) url);\n-                });\n+    private void readCompositeRuleConfig(Rules rules) {\n+        Map compositeRulesData = (Map) yamlData.get(\"composite-rules\");\n+        if (compositeRulesData == null) {\n+            return;\n+        }\n+        compositeRulesData.forEach((k, v) -> {\n+            String ruleName = (String) k;\n+            if (ruleName.endsWith(\"_rule\")) {\n+                Map settings = (Map) v;\n+                CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule();\n+                compositeAlarmRule.setAlarmRuleName(ruleName);\n+                String expression = (String) settings.get(\"expression\");\n+                if (expression == null) {\n+                    throw new IllegalArgumentException(\"expression can't be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjM2MjYz", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501236263", "createdAt": "2020-10-02T15:29:34Z", "commit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyOTozNFrOHbyDyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMjo1NlrOHbyLdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5Mzc2OA==", "bodyText": "Please test the parenthesis case, this is important with and and or.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498893768", "createdAt": "2020-10-02T15:29:34Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -41,10 +43,16 @@ Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, valu\n backend deployment env time.\n - **Count**. In the period window, if the number of **value**s over threshold(by OP), reaches count, alarm\n should send.\n+- **Only as condition**. Specify if the rule can send notfiy or just as an conditon of composite rule\n - **Silence period**. After alarm is triggered in Time-N, then keep silence in the **TN -> TN + period**.\n By default, it is as same as **Period**, which means in a period, same alarm(same ID in same \n metrics name) will be trigger once. \n \n+### Composite rules\n+Composite rule is constituted by following keys\n+- **Rule name**. Unique name, show in alarm message. Must end with `_rule`.\n+- **Expression**. Specify how to compose rules, support and/or expression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Composite rules\n          \n          \n            \n            ### Composite rules\n          \n          \n            \n            **NOTE**. Composite rules only work for alarm rules targeting the same entity level, such as alarm rules of the service level. For example, `service_percent_rule && service_resp_time_percentile_rule`. You shouldn't compose alarm rules of different entities, such as one alarm rule of the service metrics with another rule of the endpoint metrics.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498895735", "createdAt": "2020-10-02T15:32:56Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -41,10 +43,16 @@ Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, valu\n backend deployment env time.\n - **Count**. In the period window, if the number of **value**s over threshold(by OP), reaches count, alarm\n should send.\n+- **Only as condition**. Specify if the rule can send notfiy or just as an conditon of composite rule\n - **Silence period**. After alarm is triggered in Time-N, then keep silence in the **TN -> TN + period**.\n By default, it is as same as **Period**, which means in a period, same alarm(same ID in same \n metrics name) will be trigger once. \n \n+### Composite rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjQ3NDM4", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501247438", "createdAt": "2020-10-02T15:44:06Z", "commit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo0NDowNlrOHbyjvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowODowOFrOHbzV-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMTk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - **Only as condition**. Specify if the rule can send notfiy or just as an conditon of composite rule\n          \n          \n            \n            - **Only as condition**. Specify if the rule can send notification or just as an condition of composite rule", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498901948", "createdAt": "2020-10-02T15:44:06Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -41,10 +43,16 @@ Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, valu\n backend deployment env time.\n - **Count**. In the period window, if the number of **value**s over threshold(by OP), reaches count, alarm\n should send.\n+- **Only as condition**. Specify if the rule can send notfiy or just as an conditon of composite rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMzE0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Specify if the rule can send notfiy or just as an conditon of composite rule\n          \n          \n            \n                # Specify if the rule can send notification or just as an condition of composite rule", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498903140", "createdAt": "2020-10-02T15:46:06Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -60,6 +68,8 @@ rules:\n     count: 3\n     # How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.\n     silence-period: 10\n+    # Specify if the rule can send notfiy or just as an conditon of composite rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMDgyMw==", "bodyText": "compositeRuleEvaluator is effectively final, and doesn't need volatile", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498910823", "createdAt": "2020-10-02T16:00:14Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java", "diffHunk": "@@ -46,16 +48,24 @@\n     private volatile Map<AlarmRule, RunningRule> alarmRuleRunningRuleMap;\n     private volatile Rules rules;\n     private volatile String settingsString;\n+    @Getter\n+    private volatile CompositeRuleEvaluator compositeRuleEvaluator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMTY1MQ==", "bodyText": "evaluator is referring to an object. You may mean evaluate.\n\nSame as the comments above (the method and the class)", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498911651", "createdAt": "2020-10-02T16:01:54Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0OTc2Mg=="}, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDgxMA==", "bodyText": "Super long, please break the line", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r498914810", "createdAt": "2020-10-02T16:08:08Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluator composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+\n+    /**\n+     * Evaluator composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluator(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage -> Joiner.on(Const.ID_CONNECTOR).useForNull(Const.EMPTY_STRING).join(alarmMessage.getId0(), alarmMessage.getId1()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3264cad6097ad74673db0b8ad007206c2d317c"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70a4ed8cd4df0b1e84c8928d99aab6e7be8d082", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/f70a4ed8cd4df0b1e84c8928d99aab6e7be8d082", "committedDate": "2020-10-02T23:43:11Z", "message": "change naming style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8366b88907769e39e0308180aca09d1f5da840", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/4e8366b88907769e39e0308180aca09d1f5da840", "committedDate": "2020-10-02T23:46:23Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTExODY2", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501511866", "createdAt": "2020-10-03T01:52:52Z", "commit": {"oid": "4e8366b88907769e39e0308180aca09d1f5da840"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMTo1Mjo1MlrOHb--HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMjoxMzoxN1rOHb_EcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNTMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                message: Service percent less than 80% and response time p50 > 1000\n          \n          \n            \n                message: Service {name} successful rate is less than 80% and P50 of response time is over 1000ms\n          \n      \n    \n    \n  \n\nIs {name}available?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499105308", "createdAt": "2020-10-03T01:52:52Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -93,8 +108,15 @@ rules:\n     count: 3\n     silence-period: 5\n     message: The request number of entity {name} non-200 status is more than expected.\n+    only-as-condition: false\n+composite-rules:\n+  comp_rule:\n+    # Must satisfied percent rule and resp time rule \n+    expression: service_percent_rule && service_resp_time_percentile_rule\n+    message: Service percent less than 80% and response time p50 > 1000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e8366b88907769e39e0308180aca09d1f5da840"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNjMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CompositeRuleEvaluate {\n          \n          \n            \n            public class CompositeRuleEvaluator {\n          \n      \n    \n    \n  \n\nThe class name should be Evaluator, method name should be evaluate. :)", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499106311", "createdAt": "2020-10-03T02:05:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Evaluate composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+@AllArgsConstructor\n+public class CompositeRuleEvaluate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e8366b88907769e39e0308180aca09d1f5da840"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwNjkyOA==", "bodyText": "Just for confirmation, at here, nothing will show up as log or exception, right? As not_exist_rule doesn't exist.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499106928", "createdAt": "2020-10-03T02:13:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluateTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.ExpressionContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class CompositeRuleEvaluateTest {\n+\n+    private CompositeRuleEvaluate ruleEvaluate;\n+\n+    @Before\n+    public void init() {\n+        Expression expression = new Expression(new ExpressionContext());\n+        ruleEvaluate = new CompositeRuleEvaluate(expression);\n+    }\n+\n+    @Test\n+    public void testEvaluateMessageWithAndOp() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule && b_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);\n+        assertThat(compositeMsgs.size(), is(1));\n+        assertThat(compositeMsgs.get(0).getAlarmMessage(), is(\"composite rule triggered!\"));\n+        assertThat(compositeMsgs.get(0).getRuleName(), is(\"dummy\"));\n+        assertThat(compositeMsgs.get(0).getId0(), is(\"id0\"));\n+        assertThat(compositeMsgs.get(0).getId1(), is(\"id1\"));\n+        assertThat(compositeMsgs.get(0).isOnlyAsCondition(), is(false));\n+    }\n+\n+    @Test\n+    public void testEvaluateMessageWithNotExistsRule() {\n+        List<CompositeAlarmRule> compositeAlarmRules = new ArrayList<>();\n+        CompositeAlarmRule compositeAlarmRule = new CompositeAlarmRule(\"dummy\", \"a_rule && not_exist_rule\", \"composite rule triggered!\");\n+        compositeAlarmRules.add(compositeAlarmRule);\n+        List<AlarmMessage> alarmMessages = getAlarmMessages();\n+        List<AlarmMessage> compositeMsgs = ruleEvaluate.evaluate(compositeAlarmRules, alarmMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e8366b88907769e39e0308180aca09d1f5da840"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/dca9216b6ce44a7e25802a0f554349d5db4c629c", "committedDate": "2020-10-03T04:50:26Z", "message": "add format composite rule message, change class name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTMxMjA4", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501531208", "createdAt": "2020-10-03T08:41:44Z", "commit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwODo0MTo0NFrOHcAbvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwOTowMDoyOVrOHcAgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTI3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, `service_percent_rule && service_resp_time_percentile_rule`. You shouldn't compose alarm rules of different entities, \n          \n          \n            \n            For example, `service_percent_rule && service_resp_time_percentile_rule`. You shouldn't compose alarm rules of different entity levels. \n          \n      \n    \n    \n  \n\nWouldn't compose rules of different entities, that is alarm core's responsibility. But if use set for different entity levels, that alarm may not be triggered as the hash algorithm. That is the point of adding this note.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499129276", "createdAt": "2020-10-03T08:41:44Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -41,10 +43,19 @@ Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, valu\n backend deployment env time.\n - **Count**. In the period window, if the number of **value**s over threshold(by OP), reaches count, alarm\n should send.\n+- **Only as condition**. Specify if the rule can send notification or just as an condition of composite rule.\n - **Silence period**. After alarm is triggered in Time-N, then keep silence in the **TN -> TN + period**.\n By default, it is as same as **Period**, which means in a period, same alarm(same ID in same \n metrics name) will be trigger once. \n \n+### Composite rules\n+**NOTE**. Composite rules only work for alarm rules targeting the same entity level, such as alarm rules of the service level. \n+For example, `service_percent_rule && service_resp_time_percentile_rule`. You shouldn't compose alarm rules of different entities, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTM0NA==", "bodyText": "Would be a compile exception?", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499129344", "createdAt": "2020-10-03T08:42:54Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/Expression.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.expression;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.mvel2.MVEL;\n+import org.mvel2.ParserContext;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+@Slf4j\n+public class Expression {\n+    private Map<String, Object> expressionCache;\n+    private ExpressionContext context;\n+\n+    public Expression(ExpressionContext context) {\n+        this.context = context;\n+        this.expressionCache = new ConcurrentHashMap<>();\n+    }\n+\n+    public Object eval(String expression) {\n+        return eval(expression, null);\n+    }\n+\n+    public Object eval(String expression, Map<String, Object> vars) {\n+        Object obj = compile(expression, context);\n+        try {\n+            return MVEL.executeExpression(obj, vars);\n+        } catch (Throwable e) {\n+            log.error(\"eval expression {} error\", expression, e);\n+            return null;\n+        }\n+    }\n+\n+    public Object compile(String expression, ExpressionContext pctx) {\n+        Object o = expressionCache.get(expression);\n+        if (o == null) {\n+            o = MVEL.compileExpression(expression, pctx.getContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTc1Mg==", "bodyText": "The comments are missing for the class and methods.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499129752", "createdAt": "2020-10-03T08:49:24Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionContext.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.expression;\n+\n+import lombok.Getter;\n+import org.mvel2.ParserContext;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+public class ExpressionContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTgyMA==", "bodyText": "Miss a case about {name}.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499129820", "createdAt": "2020-10-03T08:50:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.ExpressionContext;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class CompositeRuleEvaluatorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTgzMQ==", "bodyText": "The comments are missing for the class and methods.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499129831", "createdAt": "2020-10-03T08:50:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/Expression.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.expression;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.mvel2.MVEL;\n+import org.mvel2.ParserContext;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+@Slf4j\n+public class Expression {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDM4Mw==", "bodyText": "Comments.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499130383", "createdAt": "2020-10-03T08:59:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.MetaInAlarm;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Evaluate composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+    private Map<String, AlarmMessageFormatter> messageFormatterCache;\n+\n+    public CompositeRuleEvaluator(Expression expression) {\n+        this.expression = expression;\n+        this.messageFormatterCache = new ConcurrentHashMap<>();\n+    }\n+\n+    /**\n+     * Evaluate composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluate(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage ->\n+                Joiner.on(Const.ID_CONNECTOR).useForNull(Const.EMPTY_STRING).join(alarmMessage.getId0(), alarmMessage.getId1()));\n+        for (CompositeAlarmRule compositeAlarmRule : compositeAlarmRules) {\n+            String expr = compositeAlarmRule.getExpression();\n+            Set<String> dependencyRules = expression.analysisInputs(expr);\n+            Map<String, Object> dataContext = new HashMap<>();\n+            messageMap.asMap().forEach((key, alarmMessageList) -> {\n+                dependencyRules.forEach(ruleName -> dataContext.put(ruleName, false));\n+                alarmMessageList.forEach(alarmMessage -> {\n+                    if (dependencyRules.contains(alarmMessage.getRuleName())) {\n+                        dataContext.put(alarmMessage.getRuleName(), true);\n+                    }\n+                });\n+                Object matched = expression.eval(expr, dataContext);\n+                if (matched instanceof Boolean && (Boolean) matched) {\n+                    AlarmMessage headMsg = alarmMessageList.iterator().next();\n+                    AlarmMessage message = new AlarmMessage();\n+                    message.setOnlyAsCondition(false);\n+                    message.setScopeId(headMsg.getScopeId());\n+                    message.setScope(headMsg.getScope());\n+                    message.setName(headMsg.getName());\n+                    message.setId0(headMsg.getId0());\n+                    message.setId1(headMsg.getId1());\n+                    message.setStartTime(System.currentTimeMillis());\n+                    message.setRuleName(compositeAlarmRule.getAlarmRuleName());\n+                    String alarmMessage = formatMessage(message, compositeAlarmRule.getMessage());\n+                    message.setAlarmMessage(alarmMessage);\n+                    compositeRuleMessages.add(message);\n+                }\n+            });\n+        }\n+        return compositeRuleMessages;\n+    }\n+\n+    private String formatMessage(AlarmMessage alarmMessage, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDQyOA==", "bodyText": "The metrics name should be filled as the expression literal text.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499130428", "createdAt": "2020-10-03T09:00:13Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/CompositeRuleEvaluator.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.Multimaps;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.MetaInAlarm;\n+import org.apache.skywalking.oap.server.core.alarm.provider.expression.Expression;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Evaluate composite rule using expression eval\n+ *\n+ * @since 8.2.0\n+ */\n+public class CompositeRuleEvaluator {\n+\n+    private Expression expression;\n+    private Map<String, AlarmMessageFormatter> messageFormatterCache;\n+\n+    public CompositeRuleEvaluator(Expression expression) {\n+        this.expression = expression;\n+        this.messageFormatterCache = new ConcurrentHashMap<>();\n+    }\n+\n+    /**\n+     * Evaluate composite rule\n+     *\n+     * @param compositeAlarmRules compositeRules\n+     * @param alarmMessages       triggered alarm messages\n+     * @return\n+     */\n+    public List<AlarmMessage> evaluate(List<CompositeAlarmRule> compositeAlarmRules, List<AlarmMessage> alarmMessages) {\n+        final List<AlarmMessage> compositeRuleMessages = new ArrayList<>();\n+        ImmutableListMultimap<String, AlarmMessage> messageMap = Multimaps.index(alarmMessages, alarmMessage ->\n+                Joiner.on(Const.ID_CONNECTOR).useForNull(Const.EMPTY_STRING).join(alarmMessage.getId0(), alarmMessage.getId1()));\n+        for (CompositeAlarmRule compositeAlarmRule : compositeAlarmRules) {\n+            String expr = compositeAlarmRule.getExpression();\n+            Set<String> dependencyRules = expression.analysisInputs(expr);\n+            Map<String, Object> dataContext = new HashMap<>();\n+            messageMap.asMap().forEach((key, alarmMessageList) -> {\n+                dependencyRules.forEach(ruleName -> dataContext.put(ruleName, false));\n+                alarmMessageList.forEach(alarmMessage -> {\n+                    if (dependencyRules.contains(alarmMessage.getRuleName())) {\n+                        dataContext.put(alarmMessage.getRuleName(), true);\n+                    }\n+                });\n+                Object matched = expression.eval(expr, dataContext);\n+                if (matched instanceof Boolean && (Boolean) matched) {\n+                    AlarmMessage headMsg = alarmMessageList.iterator().next();\n+                    AlarmMessage message = new AlarmMessage();\n+                    message.setOnlyAsCondition(false);\n+                    message.setScopeId(headMsg.getScopeId());\n+                    message.setScope(headMsg.getScope());\n+                    message.setName(headMsg.getName());\n+                    message.setId0(headMsg.getId0());\n+                    message.setId1(headMsg.getId1());\n+                    message.setStartTime(System.currentTimeMillis());\n+                    message.setRuleName(compositeAlarmRule.getAlarmRuleName());\n+                    String alarmMessage = formatMessage(message, compositeAlarmRule.getMessage());\n+                    message.setAlarmMessage(alarmMessage);\n+                    compositeRuleMessages.add(message);\n+                }\n+            });\n+        }\n+        return compositeRuleMessages;\n+    }\n+\n+    private String formatMessage(AlarmMessage alarmMessage, String message) {\n+        return messageFormatterCache.computeIfAbsent(message, AlarmMessageFormatter::new).format(new MetaInAlarm() {\n+            @Override\n+            public String getScope() {\n+                return null;\n+            }\n+\n+            @Override\n+            public int getScopeId() {\n+                return alarmMessage.getScopeId();\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return alarmMessage.getName();\n+            }\n+\n+            @Override\n+            public String getMetricsName() {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDQzOQ==", "bodyText": "Comments for these methods.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499130439", "createdAt": "2020-10-03T09:00:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -49,93 +50,136 @@ public Rules readRules() {\n         Rules rules = new Rules();\n \n         if (Objects.nonNull(yamlData)) {\n-            Map rulesData = (Map) yamlData.get(\"rules\");\n-            if (rulesData != null) {\n-                rules.setRules(new ArrayList<>());\n-                rulesData.forEach((k, v) -> {\n-                    if (((String) k).endsWith(\"_rule\")) {\n-                        AlarmRule alarmRule = new AlarmRule();\n-                        alarmRule.setAlarmRuleName((String) k);\n-                        Map settings = (Map) v;\n-                        Object metricsName = settings.get(\"metrics-name\");\n-                        if (metricsName == null) {\n-                            throw new IllegalArgumentException(\"metrics-name can't be null\");\n-                        }\n-\n-                        alarmRule.setMetricsName((String) metricsName);\n-                        alarmRule.setIncludeNames((ArrayList) settings.getOrDefault(\"include-names\", new ArrayList(0)));\n-                        alarmRule.setExcludeNames((ArrayList) settings.getOrDefault(\"exclude-names\", new ArrayList(0)));\n-                        alarmRule.setIncludeNamesRegex((String) settings.getOrDefault(\"include-names-regex\", \"\"));\n-                        alarmRule.setExcludeNamesRegex((String) settings.getOrDefault(\"exclude-names-regex\", \"\"));\n-                        alarmRule.setIncludeLabels(\n-                            (ArrayList) settings.getOrDefault(\"include-labels\", new ArrayList(0)));\n-                        alarmRule.setExcludeLabels(\n-                            (ArrayList) settings.getOrDefault(\"exclude-labels\", new ArrayList(0)));\n-                        alarmRule.setIncludeLabelsRegex((String) settings.getOrDefault(\"include-labels-regex\", \"\"));\n-                        alarmRule.setExcludeLabelsRegex((String) settings.getOrDefault(\"exclude-labels-regex\", \"\"));\n-                        alarmRule.setThreshold(settings.get(\"threshold\").toString());\n-                        alarmRule.setOp((String) settings.get(\"op\"));\n-                        alarmRule.setPeriod((Integer) settings.getOrDefault(\"period\", 1));\n-                        alarmRule.setCount((Integer) settings.getOrDefault(\"count\", 1));\n-                        // How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.\n-                        alarmRule.setSilencePeriod((Integer) settings.getOrDefault(\"silence-period\", alarmRule.getPeriod()));\n-                        alarmRule.setMessage(\n-                            (String) settings.getOrDefault(\"message\", \"Alarm caused by Rule \" + alarmRule\n-                                .getAlarmRuleName()));\n+            readRulesConfig(rules);\n+            readWebHookConfig(rules);\n+            readGrpcConfig(rules);\n+            readSlackConfig(rules);\n+            readWechatConfig(rules);\n+            readCompositeRuleConfig(rules);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca9216b6ce44a7e25802a0f554349d5db4c629c"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebeb288f3b65a33ea1f0c9c5057ba9229000dbd6", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ebeb288f3b65a33ea1f0c9c5057ba9229000dbd6", "committedDate": "2020-10-03T11:24:57Z", "message": "Add test case and comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTQxMzUz", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501541353", "createdAt": "2020-10-03T12:01:21Z", "commit": {"oid": "ebeb288f3b65a33ea1f0c9c5057ba9229000dbd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjowMToyMVrOHcBNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjowMToyMVrOHcBNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MjA3Mw==", "bodyText": "As logs said\n\nError:  Errors:\nError:    ExpressionTest.testCompile:75 \ufffd Compile [Error: [Error: was expecting type: ja...\n[INFO]\nError:  Tests run: 50, Failures: 0, Errors: 1, Skipped: 0\n\nSeems this would cause throwing exception. Please recheck.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499142073", "createdAt": "2020-10-03T12:01:21Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/ExpressionTest.java", "diffHunk": "@@ -70,7 +70,7 @@ public void testEvalWithEmptyContext() {\n \n     @Test\n     public void testCompile() {\n-        String expr = \" a && b \";\n+        String expr = \" a && * b \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebeb288f3b65a33ea1f0c9c5057ba9229000dbd6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b4d46781f91505c702a2e5fbb08b73f0d87e379", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/3b4d46781f91505c702a2e5fbb08b73f0d87e379", "committedDate": "2020-10-03T13:00:47Z", "message": "Fix test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTQ2NDg1", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501546485", "createdAt": "2020-10-03T13:34:54Z", "commit": {"oid": "3b4d46781f91505c702a2e5fbb08b73f0d87e379"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzozNDo1NVrOHcBmfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzozNDo1NVrOHcBmfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0ODQxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Composite rule is constituted by following keys\n          \n          \n            \n            \n          \n          \n            \n            Composite rule is constituted by the following keys\n          \n      \n    \n    \n  \n\nFix format issue.", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499148415", "createdAt": "2020-10-03T13:34:55Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -41,10 +43,19 @@ Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, valu\n backend deployment env time.\n - **Count**. In the period window, if the number of **value**s over threshold(by OP), reaches count, alarm\n should send.\n+- **Only as condition**. Specify if the rule can send notification or just as an condition of composite rule.\n - **Silence period**. After alarm is triggered in Time-N, then keep silence in the **TN -> TN + period**.\n By default, it is as same as **Period**, which means in a period, same alarm(same ID in same \n metrics name) will be trigger once. \n \n+### Composite rules\n+**NOTE**. Composite rules only work for alarm rules targeting the same entity level, such as alarm rules of the service level. \n+For example, `service_percent_rule && service_resp_time_percentile_rule`. You shouldn't compose alarm rules of different entity levels. \n+such as one alarm rule of the service metrics with another rule of the endpoint metrics.\n+Composite rule is constituted by following keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b4d46781f91505c702a2e5fbb08b73f0d87e379"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caa13c61893f70666c10e9f3465ba8403c676770", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/caa13c61893f70666c10e9f3465ba8403c676770", "committedDate": "2020-10-03T13:34:59Z", "message": "Update docs/en/setup/backend/backend-alarm.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTQ2NjE1", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501546615", "createdAt": "2020-10-03T13:37:03Z", "commit": {"oid": "caa13c61893f70666c10e9f3465ba8403c676770"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTQ2ODE1", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501546815", "createdAt": "2020-10-03T13:40:27Z", "commit": {"oid": "caa13c61893f70666c10e9f3465ba8403c676770"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzo0MDoyN1rOHcBoEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMzo0Mzo1OFrOHcBpAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0ODgxOA==", "bodyText": "Composite operation is not atomic, replace with ConcurrentHashMap#computeIfAbsent", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499148818", "createdAt": "2020-10-03T13:40:27Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/Expression.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.expression;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.mvel2.MVEL;\n+import org.mvel2.ParserContext;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Expression support eval java basic expressions, just like groovy script\n+ * The internal detail is it first compile the expression to a pareTree then execute the parseTree with data\n+ * It caches the compiled expression for sake of performance\n+ */\n+@Slf4j\n+public class Expression {\n+    private Map<String, Object> expressionCache;\n+    private ExpressionContext context;\n+\n+    public Expression(ExpressionContext context) {\n+        this.context = context;\n+        this.expressionCache = new ConcurrentHashMap<>();\n+    }\n+\n+    /**\n+     * Eval the given expression using empty data context\n+     */\n+    public Object eval(String expression) {\n+        return eval(expression, null);\n+    }\n+\n+    /**\n+     * Eval the given expression with data context\n+     */\n+    public Object eval(String expression, Map<String, Object> vars) {\n+        try {\n+            Object obj = compile(expression, context);\n+            return MVEL.executeExpression(obj, vars);\n+        } catch (Throwable e) {\n+            log.error(\"eval expression {} error\", expression, e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Compile the given expression to a parseTree\n+     */\n+    public Object compile(String expression, ExpressionContext pctx) {\n+        Object o = expressionCache.get(expression);\n+        if (o == null) {\n+            o = MVEL.compileExpression(expression, pctx.getContext());\n+            expressionCache.put(expression, o);\n+        }\n+        return o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa13c61893f70666c10e9f3465ba8403c676770"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0OTAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The internal detail is it first compile the expression to a pareTree then execute the parseTree with data\n          \n          \n            \n             * The internal detail is it first compile the expression to a parseTree then execute the parseTree with data", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499149031", "createdAt": "2020-10-03T13:43:36Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/Expression.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.expression;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.mvel2.MVEL;\n+import org.mvel2.ParserContext;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Expression support eval java basic expressions, just like groovy script\n+ * The internal detail is it first compile the expression to a pareTree then execute the parseTree with data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa13c61893f70666c10e9f3465ba8403c676770"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0OTA1OQ==", "bodyText": "Can be final", "url": "https://github.com/apache/skywalking/pull/5615#discussion_r499149059", "createdAt": "2020-10-03T13:43:58Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/expression/Expression.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.expression;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.mvel2.MVEL;\n+import org.mvel2.ParserContext;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Expression support eval java basic expressions, just like groovy script\n+ * The internal detail is it first compile the expression to a pareTree then execute the parseTree with data\n+ * It caches the compiled expression for sake of performance\n+ */\n+@Slf4j\n+public class Expression {\n+    private Map<String, Object> expressionCache;\n+    private ExpressionContext context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa13c61893f70666c10e9f3465ba8403c676770"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec375e27e1a9d596849ea56ff7dad16aac830fbf", "author": {"user": {"login": "xbkaishui", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ec375e27e1a9d596849ea56ff7dad16aac830fbf", "committedDate": "2020-10-03T14:10:01Z", "message": "Refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTUwMTQw", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501550140", "createdAt": "2020-10-03T14:31:03Z", "commit": {"oid": "ec375e27e1a9d596849ea56ff7dad16aac830fbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTUwNjkz", "url": "https://github.com/apache/skywalking/pull/5615#pullrequestreview-501550693", "createdAt": "2020-10-03T14:38:31Z", "commit": {"oid": "ec375e27e1a9d596849ea56ff7dad16aac830fbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1780, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}