{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4Nzg0MTAy", "number": 5718, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyNjo1N1rOExGv6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjowMTozMVrOE0HNIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI2MjQ4OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/configuration-vocabulary.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyNjo1N1rOHnD3CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1Mjo1OFrOHnG80w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxOTc1Mg==", "bodyText": "I suggest that is directly using enable.auto.commit.\nThat means we don't need to introduce a new configuration.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r510719752", "createdAt": "2020-10-23T08:26:57Z", "author": {"login": "dmsolr"}, "path": "docs/en/setup/backend/configuration-vocabulary.md", "diffHunk": "@@ -198,8 +198,11 @@ core|default|role|Option values, `Mixed/Receiver/Aggregator`. **Receiver** mode\n | - | - | isSharding | it was true when OAP Server in cluster. | SW_KAFKA_FETCHER_IS_SHARDING | false |\n | - | - | createTopicIfNotExist | If true, create the Kafka topic when it does not exist. | - | true |\n | - | - | partitions | The number of partitions for the topic being created. | SW_KAFKA_FETCHER_PARTITIONS | 3 |\n-| - | - | enableMeterSystem | To enable to fetch and handle [Meter System](backend-meter.md) data. | SW_KAFKA_FETCHER_ENABLE_METER_SYSTEM | false\n+| - | - | enableMeterSystem | To enable to fetch and handle [Meter System](backend-meter.md) data. | SW_KAFKA_FETCHER_ENABLE_METER_SYSTEM | false |\n | - | - | replicationFactor | The replication factor for each partition in the topic being created. | SW_KAFKA_FETCHER_PARTITIONS_FACTOR | 2 |\n+| - | - | enableKafkaMessageAutoCommit | If true the consumer's offset will be periodically committed in the background. | SW_ENABLE_KAFKA_MESSAGE_AUTO_COMMIT | false |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426772908cb4c6715efdd8ce75865d039e6d4a61"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3MDM4Nw==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r510770387", "createdAt": "2020-10-23T09:52:58Z", "author": {"login": "zifeihan"}, "path": "docs/en/setup/backend/configuration-vocabulary.md", "diffHunk": "@@ -198,8 +198,11 @@ core|default|role|Option values, `Mixed/Receiver/Aggregator`. **Receiver** mode\n | - | - | isSharding | it was true when OAP Server in cluster. | SW_KAFKA_FETCHER_IS_SHARDING | false |\n | - | - | createTopicIfNotExist | If true, create the Kafka topic when it does not exist. | - | true |\n | - | - | partitions | The number of partitions for the topic being created. | SW_KAFKA_FETCHER_PARTITIONS | 3 |\n-| - | - | enableMeterSystem | To enable to fetch and handle [Meter System](backend-meter.md) data. | SW_KAFKA_FETCHER_ENABLE_METER_SYSTEM | false\n+| - | - | enableMeterSystem | To enable to fetch and handle [Meter System](backend-meter.md) data. | SW_KAFKA_FETCHER_ENABLE_METER_SYSTEM | false |\n | - | - | replicationFactor | The replication factor for each partition in the topic being created. | SW_KAFKA_FETCHER_PARTITIONS_FACTOR | 2 |\n+| - | - | enableKafkaMessageAutoCommit | If true the consumer's offset will be periodically committed in the background. | SW_ENABLE_KAFKA_MESSAGE_AUTO_COMMIT | false |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxOTc1Mg=="}, "originalCommit": {"oid": "426772908cb4c6715efdd8ce75865d039e6d4a61"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTI3MzU1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODoyOTo1MVrOHnD9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1Mjo0OVrOHnG8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMTQ2Mw==", "bodyText": "Change the condition to no enable.auto.commit. :)", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r510721463", "createdAt": "2020-10-23T08:29:51Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,16 +157,21 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {\n+                ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n+                if (!consumerRecords.isEmpty()) {\n+                    Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n+                    while (iterator.hasNext()) {\n+                        ConsumerRecord<String, Bytes> record = iterator.next();\n+                        executor.submit(() -> handlerMap.get(record.topic()).handle(record));\n+                    }\n+                    if (!enableKafkaMessageAutoCommit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426772908cb4c6715efdd8ce75865d039e6d4a61"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3MDMwNQ==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r510770305", "createdAt": "2020-10-23T09:52:49Z", "author": {"login": "zifeihan"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,16 +157,21 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {\n+                ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n+                if (!consumerRecords.isEmpty()) {\n+                    Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n+                    while (iterator.hasNext()) {\n+                        ConsumerRecord<String, Bytes> record = iterator.next();\n+                        executor.submit(() -> handlerMap.get(record.topic()).handle(record));\n+                    }\n+                    if (!enableKafkaMessageAutoCommit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMTQ2Mw=="}, "originalCommit": {"oid": "426772908cb4c6715efdd8ce75865d039e6d4a61"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjQ2OTQyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwODoyNDozOFrOHoE3ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOToyMDo1M1rOHoGz8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NDgxMA==", "bodyText": "I don't think we still need this single thread pool when we introduce the thread pool. @zifeihan\nCould we use the same one?\n\n  \n    \n      skywalking/oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java\n    \n    \n         Line 154\n      in\n      b79436e\n    \n    \n    \n    \n\n        \n          \n           Executors.newSingleThreadExecutor(new DefaultThreadFactory(\"KafkaConsumer\")).submit(this);", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r511784810", "createdAt": "2020-10-26T08:24:38Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,16 +157,21 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b79436e798546102781b9e57f1116eb74113a7d8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwMTc4MA==", "bodyText": "@dmsolr hello, kafka consumer poll data is fast, and each partition can only have one thread to consume. In our stress testing process, data pulled by Kafka is not a performance bottleneck, but trace data analysis is the performance bottleneck. So I think it's better to pull the data as it is.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r511801780", "createdAt": "2020-10-26T08:55:33Z", "author": {"login": "zifeihan"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,16 +157,21 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NDgxMA=="}, "originalCommit": {"oid": "b79436e798546102781b9e57f1116eb74113a7d8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNjY4OQ==", "bodyText": "@dmsolr Modified to use the same thread pool to poll Kafka data and process data.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r511816689", "createdAt": "2020-10-26T09:20:53Z", "author": {"login": "zifeihan"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -132,16 +157,21 @@ public void start() {\n     @Override\n     public void run() {\n         while (true) {\n-            ConsumerRecords<String, Bytes> consumerRecords = consumer.poll(Duration.ofMillis(500L));\n-            if (!consumerRecords.isEmpty()) {\n-                Iterator<ConsumerRecord<String, Bytes>> iterator = consumerRecords.iterator();\n-                while (iterator.hasNext()) {\n-                    ConsumerRecord<String, Bytes> record = iterator.next();\n-                    handlerMap.get(record.topic()).handle(record);\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc4NDgxMA=="}, "originalCommit": {"oid": "b79436e798546102781b9e57f1116eb74113a7d8"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDA4NjcxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMzowMzowM1rOHrnVfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMzoxOToxNFrOHrnahA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5NTI5NA==", "bodyText": "If you need to reuse this, CustomThreadFactory should move from org.apache.skywalking.oap.server.library.server.grpc to org.apache.skywalking.oap.server.library.server.pool. Otherwise, the codes look like, Kafka is using gRPC pool.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r515495294", "createdAt": "2020-10-31T13:03:03Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -110,7 +118,22 @@ public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStart\n         } else {\n             isSharding = false;\n         }\n+        if (config.getKafkaHandlerThreadPoolSize() > 0) {\n+            threadPoolSize = config.getKafkaHandlerThreadPoolSize();\n+        }\n+        if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n+            threadPoolQueueSize = config.getKafkaHandlerThreadPoolQueueSize();\n+        }\n+\n+        enableKafkaMessageAutoCommit = (boolean) properties.getOrDefault(\n+            ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, true);\n         consumer = new KafkaConsumer<>(properties, new StringDeserializer(), new BytesDeserializer());\n+        executor = new ThreadPoolExecutor(threadPoolSize, threadPoolSize,\n+                                          60, TimeUnit.SECONDS,\n+                                          new ArrayBlockingQueue(threadPoolQueueSize),\n+                                          new CustomThreadFactory(\"KafkaConsumer\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc868bb420e031c403e08ace0af7c9ce5bfc6ff"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5NjU4MA==", "bodyText": "@wu-sheng Thank you for your suggestion.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r515496580", "createdAt": "2020-10-31T13:19:14Z", "author": {"login": "zifeihan"}, "path": "oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java", "diffHunk": "@@ -110,7 +118,22 @@ public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStart\n         } else {\n             isSharding = false;\n         }\n+        if (config.getKafkaHandlerThreadPoolSize() > 0) {\n+            threadPoolSize = config.getKafkaHandlerThreadPoolSize();\n+        }\n+        if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n+            threadPoolQueueSize = config.getKafkaHandlerThreadPoolQueueSize();\n+        }\n+\n+        enableKafkaMessageAutoCommit = (boolean) properties.getOrDefault(\n+            ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, true);\n         consumer = new KafkaConsumer<>(properties, new StringDeserializer(), new BytesDeserializer());\n+        executor = new ThreadPoolExecutor(threadPoolSize, threadPoolSize,\n+                                          60, TimeUnit.SECONDS,\n+                                          new ArrayBlockingQueue(threadPoolQueueSize),\n+                                          new CustomThreadFactory(\"KafkaConsumer\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5NTI5NA=="}, "originalCommit": {"oid": "6dc868bb420e031c403e08ace0af7c9ce5bfc6ff"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDEyMzQzOnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMzo1NDo0NFrOHrnmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMzo1NDo0NFrOHrnmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5OTYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Improve Kafka data consumption capacity.\n          \n          \n            \n            * Add the thread pool to the Kafka fetcher to increase the performance.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r515499616", "createdAt": "2020-10-31T13:54:44Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -15,6 +15,7 @@ Release Notes.\n * Support keeping collecting the slowly segments in the sampling mechanism.\n * Support choose files to active the meter analyzer.\n * Improve Kubernetes service registry for ALS analysis.\n+* Improve Kafka data consumption capacity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbb44550f86440b83a93808c70c8cc31726509f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDc5NDU5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/application.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjowMTozMVrOHrsgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQwNjoyNTozOFrOHrsnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3OTk4MQ==", "bodyText": "Traditionally, -1 means using the default value. 0 means size == 0. Please fix this.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r515579981", "createdAt": "2020-11-01T06:01:31Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/application.yml", "diffHunk": "@@ -269,6 +269,8 @@ kafka-fetcher:\n     enableMeterSystem: ${SW_KAFKA_FETCHER_ENABLE_METER_SYSTEM:false}\n     isSharding: ${SW_KAFKA_FETCHER_IS_SHARDING:false}\n     consumePartitions: ${SW_KAFKA_FETCHER_CONSUME_PARTITIONS:\"\"}\n+    kafkaHandlerThreadPoolSize: ${SW_KAFKA_HANDLER_THREAD_POOL_SIZE:0}\n+    kafkaHandlerThreadPoolQueueSize: ${SW_KAFKA_HANDLER_THREAD_POOL_QUEUE_SIZE:0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9364f38319840fcba28e8a9d15307749fe3b2c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU4MTc1OQ==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5718#discussion_r515581759", "createdAt": "2020-11-01T06:25:38Z", "author": {"login": "zifeihan"}, "path": "oap-server/server-bootstrap/src/main/resources/application.yml", "diffHunk": "@@ -269,6 +269,8 @@ kafka-fetcher:\n     enableMeterSystem: ${SW_KAFKA_FETCHER_ENABLE_METER_SYSTEM:false}\n     isSharding: ${SW_KAFKA_FETCHER_IS_SHARDING:false}\n     consumePartitions: ${SW_KAFKA_FETCHER_CONSUME_PARTITIONS:\"\"}\n+    kafkaHandlerThreadPoolSize: ${SW_KAFKA_HANDLER_THREAD_POOL_SIZE:0}\n+    kafkaHandlerThreadPoolQueueSize: ${SW_KAFKA_HANDLER_THREAD_POOL_QUEUE_SIZE:0}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3OTk4MQ=="}, "originalCommit": {"oid": "3e9364f38319840fcba28e8a9d15307749fe3b2c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4726, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}