{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTI1ODY4", "number": 5849, "title": "Support `sideCar.internalErrorCode` in the sources", "bodyText": "If this pull request closes/resolves/fixes an existing issue, replace the issue number. Closes #.\n Update the CHANGES log.\n\nThe sidecar is a common concept today, as the service mesh has been the next-generation infrastructure, no matter in k8s or out. I found we need to support this in the mesh telemetry internal format to support defining metrics in the mesh case.\nThere are 2 major changes in the PR\n\nNested classes definition is not supported in the previous OAL core, so I added them. It should support any nested class.\nSupport sideCar.internalErrorCode in the Service, ServiceInstance, Endpoint, ServiceRelation, and ServiceInstanceRelation sources, then you could have OAL scripts like this\n\nservice_cpm_sidecar = from(Service.*).filter(sideCar.internalErrorCode != \"\").cpm();\nservice_sla_sidecar = from(Service.*).percent(sideCar.internalErrorCode != \"\");\n\nThe current Istio+Envoy mesh telemetry's sideCar.internalErrorCode is mapping to envoy's v2 ALS definition, https://www.envoyproxy.io/docs/envoy/latest/api-v2/data/accesslog/v2/accesslog.proto#data-accesslog-v2-responseflags.\nAt last, I didn't change anything in the default OAL, all these two features are open to the users. If they want to this, they could add new OAL scripts, and set up the UI.", "createdAt": "2020-11-16T09:16:56Z", "url": "https://github.com/apache/skywalking/pull/5849", "merged": true, "mergeCommit": {"oid": "9c486a05ee3ad8947011168e0039f5b48922e4ab"}, "closed": true, "closedAt": "2020-11-17T01:03:49Z", "author": {"login": "wu-sheng"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddBO1kgH2gAyNTIxNTI1ODY4OjQ0Nzk0YjFkOTQyZTJlODE3YzM3ZDAyNWE0YTlhYzBhYzJlODA2ZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddHQjHgFqTUzMTQ2OTg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44794b1d942e2e817c37d025a4a9ac0ac2e806fc", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/44794b1d942e2e817c37d025a4a9ac0ac2e806fc", "committedDate": "2020-11-16T09:07:09Z", "message": "Support nested sidecar object in the scope."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/93e83d0c9b83023e2661f5ad1be91ac23ecd54b9", "committedDate": "2020-11-16T09:10:11Z", "message": "Update the changelog."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTUxNjc5", "url": "https://github.com/apache/skywalking/pull/5849#pullrequestreview-531151679", "createdAt": "2020-11-16T09:36:17Z", "commit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozNjoxN1rOHzwQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozNjoxN1rOHzwQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyOTk1Ng==", "bodyText": "@lizan Does this kind of conversion make sense?  Is there any chance of having multiple error codes? Even if so, doesn't it matter or have priority?", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524029956", "createdAt": "2020-11-16T09:36:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java", "diffHunk": "@@ -164,4 +169,52 @@ protected static String parseTLS(final TLSProperties properties) {\n         return M_TLS;\n     }\n \n+    /**\n+     * Refer to https://www.envoyproxy.io/docs/envoy/latest/api-v2/data/accesslog/v2/accesslog.proto#data-accesslog-v2-responseflags\n+     *\n+     * @param responseFlags in the ALS v2\n+     * @return empty string if no internal error code, or literal string representing the code.\n+     */\n+    protected static String parseInternalErrorCode(final ResponseFlags responseFlags) {\n+        if (responseFlags != null) {\n+            if (responseFlags.getFailedLocalHealthcheck()) {\n+                return \"failed_local_healthcheck\";\n+            } else if (responseFlags.getNoHealthyUpstream()) {\n+                return \"no_healthy_upstream\";\n+            } else if (responseFlags.getUpstreamRequestTimeout()) {\n+                return \"upstream_request_timeout\";\n+            } else if (responseFlags.getLocalReset()) {\n+                return \"local_reset\";\n+            } else if (responseFlags.getUpstreamConnectionFailure()) {\n+                return \"upstream_connection_failure\";\n+            } else if (responseFlags.getUpstreamConnectionTermination()) {\n+                return \"upstream_connection_termination\";\n+            } else if (responseFlags.getUpstreamOverflow()) {\n+                return \"upstream_overflow\";\n+            } else if (responseFlags.getNoRouteFound()) {\n+                return \"no_route_found\";\n+            } else if (responseFlags.getDelayInjected()) {\n+                return \"delay_injected\";\n+            } else if (responseFlags.getFaultInjected()) {\n+                return \"fault_injected\";\n+            } else if (responseFlags.getRateLimited()) {\n+                return \"rate_limited\";\n+            } else if (responseFlags.getUnauthorizedDetails() != null) {\n+                return \"unauthorized_details\";\n+            } else if (responseFlags.getRateLimitServiceError()) {\n+                return \"rate_limit_service_error\";\n+            } else if (responseFlags.getDownstreamConnectionTermination()) {\n+                return \"downstream_connection_termination\";\n+            } else if (responseFlags.getUpstreamRetryLimitExceeded()) {\n+                return \"upstream_retry_limit_exceeded\";\n+            } else if (responseFlags.getStreamIdleTimeout()) {\n+                return \"stream_idle_timeout\";\n+            } else if (responseFlags.getInvalidEnvoyRequestHeaders()) {\n+                return \"invalid_envoy_request_headers\";\n+            } else if (responseFlags.getDownstreamProtocolError()) {\n+                return \"downstream_protocol_error\";\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMzU4ODk5", "url": "https://github.com/apache/skywalking/pull/5849#pullrequestreview-531358899", "createdAt": "2020-11-16T14:16:40Z", "commit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMzk2MzM0", "url": "https://github.com/apache/skywalking/pull/5849#pullrequestreview-531396334", "createdAt": "2020-11-16T14:55:02Z", "commit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo1NTowM1rOH0CatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo1NTowM1rOH0CatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzYwNQ==", "bodyText": "FWIK, \"proxy\" is a more general name than sidecar. The latter one is often put together with \"gateway\" as Istio does, and therefore I prefer to use \"proxy.internalErrorCode\" instead of \"sidecar.internalErrorCode\".", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524327605", "createdAt": "2020-11-16T14:55:03Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/scope-definitions.md", "diffHunk": "@@ -29,6 +29,7 @@ Calculate the metrics data from each request of the service.\n | responseCode | Represent the response code of HTTP response, if this request is the HTTP call | | int|\n | type | Represent the type of each request. Such as: Database, HTTP, RPC, gRPC. | | enum |\n | tags | Represent the labels of each request and each value is made up with the `TagKey:TagValue` in the segment. | | `List<String>` |\n+| sideCar.internalErrorCode | Represent the sidecar/proxy internal error code, the value bases on the implementation. | | string|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16924b90e87bfb21c1376e7ff71dec04314ebf5c", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/16924b90e87bfb21c1376e7ff71dec04314ebf5c", "committedDate": "2020-11-16T15:31:23Z", "message": "Fix comments and docs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDY5ODYw", "url": "https://github.com/apache/skywalking/pull/5849#pullrequestreview-531469860", "createdAt": "2020-11-16T16:08:27Z", "commit": {"oid": "16924b90e87bfb21c1376e7ff71dec04314ebf5c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1651, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}