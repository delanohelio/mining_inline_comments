{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTIxMzcw", "number": 4748, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0Nzo0MlrOD52l2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNDoxM1rOD6f0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTg5ODUxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALDefine.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0Nzo0MlrOGRWuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNToyNDowNFrOGRu2LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTMwMg==", "bodyText": "Enum is now good for extension, because you have to change the source codes. Please consider this as an abstract type.", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r420851302", "createdAt": "2020-05-06T14:47:42Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALDefine.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import lombok.Getter;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Define multiple OAL configuration\n+ */\n+@Getter\n+public enum OALDefine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ce145ddb2236fa4cb3b4c43966dc85d5dda400"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwMTY1Mg==", "bodyText": "Is that right ?\n@Getter\npublic abstract class OALDefine {\n\n    OALDefine(final String configFile,\n              final String sourcePackage,\n              final String dynamicMetricsClassPackage,\n              final String dynamicMetricsBuilderClassPackage, final String dynamicDispatcherClassPackage) {\n        this.configFile = requireNonNull(configFile);\n        this.sourcePackage = requireNonNull(sourcePackage);\n        this.dynamicMetricsClassPackage = requireNonNull(dynamicMetricsClassPackage);\n        this.dynamicMetricsBuilderClassPackage = requireNonNull(dynamicMetricsBuilderClassPackage);\n        this.dynamicDispatcherClassPackage = requireNonNull(dynamicDispatcherClassPackage);\n    }\n\n    private final String configFile;\n    private final String sourcePackage;\n    private final String dynamicMetricsClassPackage;\n    private final String dynamicMetricsBuilderClassPackage;\n    private final String dynamicDispatcherClassPackage;\n}\npublic class OfficialOALDefine extends OALDefine {\n\n    public static final OfficialOALDefine INSTANCE = new OfficialOALDefine();\n\n    private OfficialOALDefine() {\n        super(\n            \"official_analysis.oal\",\n            \"org.apache.skywalking.oap.server.core.source.\",\n            \"org.apache.skywalking.oal.rt.official.metrics.\",\n            \"org.apache.skywalking.oal.rt.official.metrics.builder.\",\n            \"org.apache.skywalking.oal.rt.official.dispatcher.\"\n        );\n    }\n}", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r420901652", "createdAt": "2020-05-06T15:53:36Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALDefine.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import lombok.Getter;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Define multiple OAL configuration\n+ */\n+@Getter\n+public enum OALDefine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTMwMg=="}, "originalCommit": {"oid": "37ce145ddb2236fa4cb3b4c43966dc85d5dda400"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MDkxNQ==", "bodyText": "Yes. Like this.", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421150915", "createdAt": "2020-05-06T23:30:14Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALDefine.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import lombok.Getter;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Define multiple OAL configuration\n+ */\n+@Getter\n+public enum OALDefine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTMwMg=="}, "originalCommit": {"oid": "37ce145ddb2236fa4cb3b4c43966dc85d5dda400"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NjUwOQ==", "bodyText": "Done.", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421246509", "createdAt": "2020-05-07T05:24:04Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALDefine.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import lombok.Getter;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Define multiple OAL configuration\n+ */\n+@Getter\n+public enum OALDefine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MTMwMg=="}, "originalCommit": {"oid": "37ce145ddb2236fa4cb3b4c43966dc85d5dda400"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjM3ODExOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDo0NzoyOVrOGSVKYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTozNDozNlrOGSV8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NDI3Mw==", "bodyText": "loader -> load", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421874273", "createdAt": "2020-05-08T00:47:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void loader(OALDefine define) throws ModuleStartException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963b68118eb59e3d80b52a737aad767d2b54d589"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NDMzOQ==", "bodyText": "Should not have ModuleStartException, this is not a module", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421874339", "createdAt": "2020-05-08T00:47:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void loader(OALDefine define) throws ModuleStartException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NDI3Mw=="}, "originalCommit": {"oid": "963b68118eb59e3d80b52a737aad767d2b54d589"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NzAyMg==", "bodyText": "OALEngine throws ModuleStartException and OALCompileException. Meanwhile OALEngineLoaderService#load() is called in ModuleProvider#start().\n\n  \n    \n      skywalking/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngine.java\n    \n    \n        Lines 28 to 36\n      in\n      d713076\n    \n    \n    \n    \n\n        \n          \n           public interface OALEngine { \n        \n\n        \n          \n               void setStreamListener(StreamAnnotationListener listener) throws ModuleStartException; \n        \n\n        \n          \n            \n        \n\n        \n          \n               void setDispatcherListener(DispatcherDetectorListener listener) throws ModuleStartException; \n        \n\n        \n          \n            \n        \n\n        \n          \n               void start(ClassLoader currentClassLoader) throws ModuleStartException, OALCompileException; \n        \n\n        \n          \n            \n        \n\n        \n          \n               void notifyAllListeners() throws ModuleStartException; \n        \n\n        \n          \n           }", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421887022", "createdAt": "2020-05-08T01:34:20Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void loader(OALDefine define) throws ModuleStartException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NDI3Mw=="}, "originalCommit": {"oid": "963b68118eb59e3d80b52a737aad767d2b54d589"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NzA4Mw==", "bodyText": "loader -> load\n\nDone.", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421887083", "createdAt": "2020-05-08T01:34:36Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void loader(OALDefine define) throws ModuleStartException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NDI3Mw=="}, "originalCommit": {"oid": "963b68118eb59e3d80b52a737aad767d2b54d589"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY1Mzg1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNDoxM1rOGSXqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDoyMjo1MVrOGSYhtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNTI2MA==", "bodyText": "Seems you did not override the hashCode and equals methods in OALDefine and its subclasses", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421915260", "createdAt": "2020-05-08T03:24:13Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void load(OALDefine define) throws ModuleStartException {\n+        if (oalDefineSet.contains(define)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05f007ef66281409ba71930b1321d38464f36b5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNjIyNg==", "bodyText": "Default, hash* uses the object ID, so, this only works for the same object, rather than the same OAL.\nThis should be fixed.\nBTW, I am considering to enhance this later, merging the content rather than the file only. But this is totally another story.", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421916226", "createdAt": "2020-05-08T03:28:00Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void load(OALDefine define) throws ModuleStartException {\n+        if (oalDefineSet.contains(define)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNTI2MA=="}, "originalCommit": {"oid": "f05f007ef66281409ba71930b1321d38464f36b5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkyOTM5Nw==", "bodyText": "Done.", "url": "https://github.com/apache/skywalking/pull/4748#discussion_r421929397", "createdAt": "2020-05-08T04:22:51Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineLoaderService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashSet;\n+import java.util.Set;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+/**\n+ * Activate {@link OALEngine} according to {@link OALDefine}\n+ */\n+@Slf4j\n+@RequiredArgsConstructor\n+public class OALEngineLoaderService implements Service {\n+\n+    private final Set<OALDefine> oalDefineSet = new HashSet<>();\n+    private final ModuleManager moduleManager;\n+\n+    /**\n+     * Normally it is invoked in the {@link ModuleProvider#start()} of the receiver-plugin module.\n+     */\n+    public void load(OALDefine define) throws ModuleStartException {\n+        if (oalDefineSet.contains(define)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNTI2MA=="}, "originalCommit": {"oid": "f05f007ef66281409ba71930b1321d38464f36b5"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 296, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}