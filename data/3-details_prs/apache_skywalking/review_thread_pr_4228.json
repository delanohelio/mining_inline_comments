{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTMzMTU2", "number": 4228, "reviewThreads": {"totalCount": 63, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozMDowOVrODYLIJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyODozOFrOEdI14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Njc0NzI3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozMDowOVrOFd4Qvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzozMDowOVrOFd4Qvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NDgxNA==", "bodyText": "service_version -> one_version_of_service_*.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r366874814", "createdAt": "2020-01-15T13:30:09Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+service_redirect_avg = from(ServicePerfDetail.redirectTime).longAvg();\n+service_dns_avg = from(ServicePerfDetail.dnsTime).longAvg();\n+service_req_avg = from(ServicePerfDetail.reqTime).longAvg();\n+service_dom_analysis_avg = from(ServicePerfDetail.domAnalysisTime).longAvg();\n+service_dom_ready_avg = from(ServicePerfDetail.domReadyTime).longAvg();\n+service_blank_avg = from(ServicePerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+service_redirect_percentile = from(ServicePerfDetail.redirectTime).percentile(10);\n+service_dns_percentile = from(ServicePerfDetail.dnsTime).percentile(10);\n+service_req_percentile = from(ServicePerfDetail.reqTime).percentile(10);\n+service_dom_analysis_percentile = from(ServicePerfDetail.domAnalysisTime).percentile(10);\n+service_dom_ready_percentile = from(ServicePerfDetail.domReadyTime).percentile(10);\n+service_blank_percentile = from(ServicePerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+service_page_pv = from(ServicePagePathPerfDetail.count).sum();\n+service_page_error_rate = from(ServicePagePathPerfDetail.*).percent(status == false);\n+\n+service_page_redirect_avg = from(ServicePagePathPerfDetail.redirectTime).longAvg();\n+service_page_dns_avg = from(ServicePagePathPerfDetail.dnsTime).longAvg();\n+service_page_req_avg = from(ServicePagePathPerfDetail.reqTime).longAvg();\n+service_page_dom_analysis_avg = from(ServicePagePathPerfDetail.domAnalysisTime).longAvg();\n+service_page_dom_ready_avg = from(ServicePagePathPerfDetail.domReadyTime).longAvg();\n+service_page_blank_avg = from(ServicePagePathPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+service_page_redirect_percentile = from(ServicePagePathPerfDetail.redirectTime).percentile(10);\n+service_page_dns_percentile = from(ServicePagePathPerfDetail.dnsTime).percentile(10);\n+service_page_req_percentile = from(ServicePagePathPerfDetail.reqTime).percentile(10);\n+service_page_dom_analysis_percentile = from(ServicePagePathPerfDetail.domAnalysisTime).percentile(10);\n+service_page_dom_ready_percentile = from(ServicePagePathPerfDetail.domReadyTime).percentile(10);\n+service_page_blank_percentile = from(ServicePagePathPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version\n+service_version_redirect_avg = from(ServiceVersionPerfDetail.redirectTime).longAvg();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8628e6618ae9e4dee96ceea4e8b20734bb4283"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTI2MzAzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjo1NToyMFrOFfJ0kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwODoxNDoxMlrOFfKAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTA5MA==", "bodyText": "If these are TODOs, why add this?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368211090", "createdAt": "2020-01-18T06:55:20Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +82,12 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            // TODO handler service page path catalog\n+            return;\n+        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n+            // TODO handler service version page path catalog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxNDIwNg==", "bodyText": "Done.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368214206", "createdAt": "2020-01-18T08:14:12Z", "author": {"login": "arugal"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +82,12 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            // TODO handler service page path catalog\n+            return;\n+        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n+            // TODO handler service version page path catalog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTA5MA=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTI2NDA4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjo1ODo0NVrOFfJ1Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwMzowNjoxMlrOFfSlTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw==", "bodyText": "@Fine0830 Please verify, do we really need all these percentiles? I think we shouldn't.\n@Fine0830 After you are back from the vacation, please check which metrics we really require.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368211223", "createdAt": "2020-01-18T06:58:45Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDk1OQ==", "bodyText": "@kezhenxu94 I want to discuss a thing with you. In @arugal prev PR, this part of OAL is separated in another OAL, I asked him to change like this. But in these days, I prefer his way more. If those are in another OAL file, then OAL engine could provide an API to activate some OAL files, such as from browser-receiver provider. This should make our document easier. What do you think? @arugal", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230959", "createdAt": "2020-01-18T14:57:30Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4ODIwOQ==", "bodyText": "In @arugal prev PR, this part of OAL is separated in another OAL\n\nWhich PR? I'd like to have a look;\nModularizing the OAL sounds good to me, maybe divide them as per entity or metrics, and make it possible for the users to put their custom metrics in a separate file", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368288209", "createdAt": "2020-01-19T11:57:09Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4OTM1Mw==", "bodyText": "Actually, I don't want to separate too many files. It was this PR, there were two OAL files, one for backend service, the other for browser. They are activated by receiver. What do you think?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368289353", "createdAt": "2020-01-19T12:17:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4OTg0OQ==", "bodyText": "Actually, I don't want to separate too many files. It was this PR, there were two OAL files, one for backend service, the other for browser. They are activated by receiver. What do you think?\n\nAnyway, I'm with this idea, it doesn't matter for me how many OAL files are divided into, finally :)", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368289849", "createdAt": "2020-01-19T12:24:30Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MDY2MA==", "bodyText": "@arugal Sorry for requesting you to change back. Could you revert to your prev idea? And activate the OAL by the receiver? The current OAL file should be activated by the core module directly.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368290660", "createdAt": "2020-01-19T12:38:13Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1Mjg3MA==", "bodyText": "And activate the OAL by the receiver?\n\nAgree.\nDesign\n\nofficial_analysis.oal and browser_analysis.oal\nofficial_analysis.oal activate by mission-metric, istio-telemetry, service-mesh, receiver-trace, receiver-so11y, receiver-jvm, receiver-clr \nbrowser_analysis.oal activate by browser-receiver\neach file will only be activated once", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368352870", "createdAt": "2020-01-20T02:53:50Z", "author": {"login": "arugal"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1NDYzNw==", "bodyText": "Good for me.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368354637", "createdAt": "2020-01-20T03:06:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -102,3 +102,77 @@ envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricNam\n // disable(top_n_database_statement);\n // disable(zipkin_span);\n // disable(jaeger_span);\n+\n+\n+// Browser metrics begin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTIyMw=="}, "originalCommit": {"oid": "5bf63428ed4080cac8ea728af56468be8bbaf9ef"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxMzM2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-alarm.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0Mzo0NlrOFfK_qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NjowOFrOFfLALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDMxMw==", "bodyText": "Do we use this today?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230313", "createdAt": "2020-01-18T14:43:46Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -85,7 +85,7 @@ Webhook requires the peer is a web container. The alarm message will send throug\n - **scopeId**, **scope**. All scopes are defined in org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.\n - **name**. Target scope entity name.\n - **id0**. The ID of scope entity, matched the name.\n-- **id1**. Not used today.\n+- **id1**. The ID1 of scope entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDQ0NA==", "bodyText": "ID1 is designed for relationship alert. I think it is not related to this PR, right?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230444", "createdAt": "2020-01-18T14:46:08Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -85,7 +85,7 @@ Webhook requires the peer is a web container. The alarm message will send throug\n - **scopeId**, **scope**. All scopes are defined in org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.\n - **name**. Target scope entity name.\n - **id0**. The ID of scope entity, matched the name.\n-- **id1**. Not used today.\n+- **id1**. The ID1 of scope entity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDMxMw=="}, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxMzY1OnYy", "diffSide": "RIGHT", "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NDoyMVrOFfK_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NDoyMVrOFfK_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDM1MA==", "bodyText": "All these should be named Browser*. ServiceVersion should be BrowserSingleVersion*.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230350", "createdAt": "2020-01-18T14:44:21Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -44,6 +44,12 @@ SRC_SERVICE_INSTANCE_CLR_GC: 'ServiceInstanceCLRGC';\n SRC_SERVICE_INSTANCE_CLR_THREAD: 'ServiceInstanceCLRThread';\n SRC_ENVOY_INSTANCE_METRIC: 'EnvoyInstanceMetric';\n \n+// Browser keywords\n+SRC_BROWSER_SERVICE_PERF_DETAIL: 'ServicePerfDetail';\n+SRC_BROWSER_SERVICE_PAGE_PATH_PERF_DETAIL: 'ServicePagePathPerfDetail';\n+SRC_BROWSER_SERVICE_VERSION_PERF_DETAIL: 'ServiceVersionPerfDetail';\n+SRC_BROWSER_SERVICE_VERSION_PAGE_PATH_PERF_DETAIL: 'ServiceVersionPagePathPerfDetail';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxNDU1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NjoyNFrOFfLAOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NjoyNFrOFfLAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDQ1OQ==", "bodyText": "Same question about id1", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230459", "createdAt": "2020-01-18T14:46:24Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java", "diffHunk": "@@ -55,6 +55,9 @@ public AlarmMessageFormatter(String format) {\n                         case \"id\":\n                             valueFroms.add(ValueFrom.ID);\n                             break;\n+                        case \"id1\":\n+                            valueFroms.add(ValueFrom.ID1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxNTAwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NzozOVrOFfLAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0NzozOVrOFfLAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDUyMQ==", "bodyText": "ID1 should not be used in this way. If this is page related alert, then id0=pageId, which is unique, so don't worry about it.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230521", "createdAt": "2020-01-18T14:47:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +84,38 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            String metricsId = meta.getId();\n+            String[] ids = metricsId.split(Const.ID_SPLIT);\n+            int serviceId = Integer.parseInt(ids[0]);\n+            int pagePathId = Integer.parseInt(ids[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxNTA2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0Nzo1OFrOFfLAgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0Nzo1OFrOFfLAgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDUzMQ==", "bodyText": "Same issue here about id1", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230531", "createdAt": "2020-01-18T14:47:58Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +84,38 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            String metricsId = meta.getId();\n+            String[] ids = metricsId.split(Const.ID_SPLIT);\n+            int serviceId = Integer.parseInt(ids[0]);\n+            int pagePathId = Integer.parseInt(ids[1]);\n+            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n+            EndpointInventory endpointInventory = endpointInventoryCache.get(pagePathId);\n+\n+            ServicePageMetaInAlarm servicePageMetaInAlarm = new ServicePageMetaInAlarm();\n+            servicePageMetaInAlarm.setMetricsName(meta.getMetricsName());\n+            servicePageMetaInAlarm.setServiceId(serviceId);\n+            servicePageMetaInAlarm.setPagePathId(pagePathId);\n+\n+            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n+            servicePageMetaInAlarm.setName(textName);\n+            metaInAlarm = servicePageMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n+            String metricsId = meta.getId();\n+            String[] ids = metricsId.split(Const.ID_SPLIT);\n+            int serviceVersionId = Integer.parseInt(ids[0]);\n+            int pagePathId = Integer.parseInt(ids[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxNTI4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0ODozMFrOFfLAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0ODozMFrOFfLAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDU1Nw==", "bodyText": "SERVICE_ should be renamed to BROWSER_", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230557", "createdAt": "2020-01-18T14:48:30Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int SERVICE_PERF_DETAIL = 41;\n+    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n+    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxNTQ5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0ODo0N1rOFfLAtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0ODo0N1rOFfLAtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDU4Mg==", "bodyText": "Same rename suggestion.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230582", "createdAt": "2020-01-18T14:48:47Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int SERVICE_PERF_DETAIL = 41;\n+    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n+    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+\n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n      */\n     public static final String SERVICE_CATALOG_NAME = \"SERVICE\";\n     public static final String SERVICE_INSTANCE_CATALOG_NAME = \"SERVICE_INSTANCE\";\n     public static final String ENDPOINT_CATALOG_NAME = \"ENDPOINT\";\n \n+    public static final String SERVICE_PAGE_PATH_CATALOG_NAME = \"SERVICE_PAGE_PATH\";\n+    public static final String SERVICE_VERSION_PAGE_PATH_CATALOG_NAME = \"SERVICE_VERSION_PAGE_PATH\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQxNTUxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0ODo1MlrOFfLAuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDo0ODo1MlrOFfLAuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDU4NQ==", "bodyText": "Same rename suggestion.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230585", "createdAt": "2020-01-18T14:48:52Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int SERVICE_PERF_DETAIL = 41;\n+    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n+    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+\n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n      */\n     public static final String SERVICE_CATALOG_NAME = \"SERVICE\";\n     public static final String SERVICE_INSTANCE_CATALOG_NAME = \"SERVICE_INSTANCE\";\n     public static final String ENDPOINT_CATALOG_NAME = \"ENDPOINT\";\n \n+    public static final String SERVICE_PAGE_PATH_CATALOG_NAME = \"SERVICE_PAGE_PATH\";\n+    public static final String SERVICE_VERSION_PAGE_PATH_CATALOG_NAME = \"SERVICE_VERSION_PAGE_PATH\";\n+\n     private static final Map<Integer, Boolean> SERVICE_CATALOG = new HashMap<>();\n     private static final Map<Integer, Boolean> SERVICE_INSTANCE_CATALOG = new HashMap<>();\n     private static final Map<Integer, Boolean> ENDPOINT_CATALOG = new HashMap<>();\n+    private static final Map<Integer, Boolean> SERVICE_PAGE_PATH_CATALOG = new HashMap<>();\n+    private static final Map<Integer, Boolean> SERVICE_VERSION_PAGE_PATH_CATALOG = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509a1e6fcc7b634823d5d13933b63c340b2a865"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjIyMzQ1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjozOTo1NVrOFjG-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjozOTo1NVrOFjG-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1ODc4NA==", "bodyText": "Who will provide an external ClassLoader?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372358784", "createdAt": "2020-01-29T12:39:55Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author zhangwei\n+ */\n+@Slf4j\n+public class OALEngineService implements Service {\n+\n+    private final Map<OALEngine.Group, OALEngine> engineMap = new HashMap<>();\n+    private final ModuleManager moduleManager;\n+\n+    public OALEngineService(ModuleManager moduleManager) {\n+        this.moduleManager = moduleManager;\n+    }\n+\n+    public void activate(OALEngine.Group group) throws ModuleStartException {\n+        activate(group, OALEngineService.class.getClassLoader());\n+    }\n+\n+    public void activate(OALEngine.Group group, ClassLoader classLoader) throws ModuleStartException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjIyODgwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0MTo1MFrOFjHByw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0MTo1MFrOFjHByw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1OTYyNw==", "bodyText": "This should be mapping to the service instance, right? Then it should be named. BROWSER_APP_SINGLE_VERSION_CATALOG_NAME", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372359627", "createdAt": "2020-01-29T12:41:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int BROWSER_PERF_DETAIL = 41;\n+    public static final int BROWSER_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int BROWSER_SINGLE_VERSION_PERF_DETAIL = 43;\n+    public static final int BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+\n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n      */\n     public static final String SERVICE_CATALOG_NAME = \"SERVICE\";\n     public static final String SERVICE_INSTANCE_CATALOG_NAME = \"SERVICE_INSTANCE\";\n     public static final String ENDPOINT_CATALOG_NAME = \"ENDPOINT\";\n \n+    public static final String BROWSER_PAGE_PATH_CATALOG_NAME = \"BROWSER_PAGE_PATH\";\n+    public static final String BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME = \"BROWSER_SINGLE_VERSION_PAGE_PATH\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjIzMjQ4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0MzoxOVrOFjHEMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0MzoxOVrOFjHEMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MDI0MQ==", "bodyText": "BROWSER_ -> BROWSER_APP_.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372360241", "createdAt": "2020-01-29T12:43:19Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI0NTQ0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parse/BrowserPerfDataParse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0ODowMlrOFjHMAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0ODowMlrOFjHMAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MjI0MQ==", "bodyText": "Parse -> Parser.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372362241", "createdAt": "2020-01-29T12:48:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parse/BrowserPerfDataParse.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parse;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n+import org.apache.skywalking.oap.server.library.buffer.BufferData;\n+import org.apache.skywalking.oap.server.library.buffer.DataStreamReader;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserPerfDataCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserPerfDataDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.listener.BrowserPerfDataListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.BrowserPerfDataStandardization;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.BrowserPerfDataStandardizationWorker;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.PagePathIdExchanger;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.CounterMetrics;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@Slf4j\n+public class BrowserPerfDataParse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI1NjUyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPagePathPerfDetail.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1MTo1MFrOFjHSng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1MTo1MFrOFjHSng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MzkzNA==", "bodyText": "Naming issue. This should be related to BrowserAppSignleVersion. Not to page path even you could include the path for filter and metrics funcs.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372363934", "createdAt": "2020-01-29T12:51:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPagePathPerfDetail.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL, name = \"BrowserSingleVersionPagePathPerfDetail\", catalog = BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserSingleVersionPagePathPerfDetail extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI1ODE4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1MjoyN1rOFjHTrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1MjoyN1rOFjHTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NDIwNA==", "bodyText": "Catalog is not right.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372364204", "createdAt": "2020-01-29T12:52:27Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PERF_DETAIL, name = \"BrowserSingleVersionPerfDetail\", catalog = SERVICE_INSTANCE_CATALOG_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI2MTA1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPagePathPerfDetail.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1MzoyOVrOFjHVoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1MzoyOVrOFjHVoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NDcwNA==", "bodyText": "BrowserPagePathPerfDetail-> BrowserAppPagePerf", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372364704", "createdAt": "2020-01-29T12:53:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPagePathPerfDetail.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PAGE_PATH_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PAGE_PATH_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_PAGE_PATH_PERF_DETAIL, name = \"BrowserPagePathPerfDetail\", catalog = BROWSER_PAGE_PATH_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserPagePathPerfDetail extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI2NjI3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPerfData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1NTozNFrOFjHY8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1NTozNFrOFjHY8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NTU1Mw==", "bodyText": "Browser-> BrowserApp.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372365553", "createdAt": "2020-01-29T12:55:34Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPerfData.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PERF_DATA;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_PERF_DATA, name = \"BrowserPerfData\")\n+public class BrowserPerfData extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI3MTgwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo1NzozNFrOFjHcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTo0MTozMFrOFkg7YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NjQ0MA==", "bodyText": "This comment is not right.\n\nPerformance metrics of every single version .", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372366440", "createdAt": "2020-01-29T12:57:34Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n+browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n+\n+browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();\n+browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();\n+browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();\n+browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();\n+browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();\n+browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);\n+browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);\n+browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);\n+browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);\n+browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);\n+browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjEwNA==", "bodyText": "We should add error rate ranking for pages in service version.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373832104", "createdAt": "2020-02-02T09:32:48Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n+browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n+\n+browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();\n+browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();\n+browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();\n+browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();\n+browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();\n+browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);\n+browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);\n+browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);\n+browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);\n+browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);\n+browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NjQ0MA=="}, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjU0NA==", "bodyText": "As per service version dimension, will calculate all of errors sum and different catalogs sum.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373832544", "createdAt": "2020-02-02T09:41:30Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n+browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n+\n+browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();\n+browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();\n+browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();\n+browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();\n+browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();\n+browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);\n+browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);\n+browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);\n+browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);\n+browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);\n+browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NjQ0MA=="}, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjI4MjM4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowMTowM1rOFjHixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzowMTowM1rOFjHixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODA3MQ==", "bodyText": "Browser -> BrowserApp.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372368071", "createdAt": "2020-01-29T13:01:03Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PERF_DETAIL, name = \"BrowserSingleVersionPerfDetail\", catalog = SERVICE_INSTANCE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserSingleVersionPerfDetail extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY0MTg5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODozMjo1OVrOFkgsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODozMjo1OVrOFkgsfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODczMg==", "bodyText": "I don't think we need those metrics. service page metrics are enough.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373828732", "createdAt": "2020-02-02T08:32:59Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY1NjA4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTowNDoyOVrOFkgzvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTowNDoyOVrOFkgzvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMDU5MQ==", "bodyText": "We should add error rate ranking for versions in service.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373830591", "createdAt": "2020-02-02T09:04:29Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY2MDk5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOToxNzoyNlrOFkg2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOToxNzoyNlrOFkg2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMTI4MA==", "bodyText": "We need to sort errors and calculate errors sum for different catalogs. Will need all of errors sum. Please add metics for those.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373831280", "createdAt": "2020-02-02T09:17:26Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n+browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY3MjU1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTo0ODoyMVrOFkg8rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTo0ODoyMVrOFkg8rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg3OA==", "bodyText": "Those metrics should be removed.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373832878", "createdAt": "2020-02-02T09:48:21Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n+browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n+\n+browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();\n+browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();\n+browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();\n+browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();\n+browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();\n+browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);\n+browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);\n+browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);\n+browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);\n+browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);\n+browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version\n+browser_single_version_redirect_avg = from(BrowserSingleVersionPerfDetail.redirectTime).longAvg();\n+browser_single_version_dns_avg = from(BrowserSingleVersionPerfDetail.dnsTime).longAvg();\n+browser_single_version_req_avg = from(BrowserSingleVersionPerfDetail.reqTime).longAvg();\n+browser_single_version_dom_analysis_avg = from(BrowserSingleVersionPerfDetail.domAnalysisTime).longAvg();\n+browser_single_version_dom_ready_avg = from(BrowserSingleVersionPerfDetail.domReadyTime).longAvg();\n+browser_single_version_blank_avg = from(BrowserSingleVersionPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_single_version_redirect_percentile = from(BrowserSingleVersionPerfDetail.redirectTime).percentile(10);\n+browser_single_version_dns_percentile = from(BrowserSingleVersionPerfDetail.dnsTime).percentile(10);\n+browser_single_version_req_percentile = from(BrowserSingleVersionPerfDetail.reqTime).percentile(10);\n+browser_single_version_dom_analysis_percentile = from(BrowserSingleVersionPerfDetail.domAnalysisTime).percentile(10);\n+browser_single_version_dom_ready_percentile = from(BrowserSingleVersionPerfDetail.domReadyTime).percentile(10);\n+browser_single_version_blank_percentile = from(BrowserSingleVersionPerfDetail.blankTime).percentile(10);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTY3MzgxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTo1MTowMFrOFkg9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwOTo1MTowMFrOFkg9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA0OQ==", "bodyText": "Please let version page metrics keep in line with service pages.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r373833049", "createdAt": "2020-02-02T09:51:00Z", "author": {"login": "Fine0830"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// Browser service\n+browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n+browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n+browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n+browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n+browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n+browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n+browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n+browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n+browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n+browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n+browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n+\n+// Browser service page\n+browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n+browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n+\n+browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();\n+browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();\n+browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();\n+browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();\n+browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();\n+browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);\n+browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);\n+browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);\n+browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);\n+browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);\n+browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version\n+browser_single_version_redirect_avg = from(BrowserSingleVersionPerfDetail.redirectTime).longAvg();\n+browser_single_version_dns_avg = from(BrowserSingleVersionPerfDetail.dnsTime).longAvg();\n+browser_single_version_req_avg = from(BrowserSingleVersionPerfDetail.reqTime).longAvg();\n+browser_single_version_dom_analysis_avg = from(BrowserSingleVersionPerfDetail.domAnalysisTime).longAvg();\n+browser_single_version_dom_ready_avg = from(BrowserSingleVersionPerfDetail.domReadyTime).longAvg();\n+browser_single_version_blank_avg = from(BrowserSingleVersionPerfDetail.blankTime).longAvg();\n+\n+// Multiple values including p50, p75, p90, p95, p99\n+browser_single_version_redirect_percentile = from(BrowserSingleVersionPerfDetail.redirectTime).percentile(10);\n+browser_single_version_dns_percentile = from(BrowserSingleVersionPerfDetail.dnsTime).percentile(10);\n+browser_single_version_req_percentile = from(BrowserSingleVersionPerfDetail.reqTime).percentile(10);\n+browser_single_version_dom_analysis_percentile = from(BrowserSingleVersionPerfDetail.domAnalysisTime).percentile(10);\n+browser_single_version_dom_ready_percentile = from(BrowserSingleVersionPerfDetail.domReadyTime).percentile(10);\n+browser_single_version_blank_percentile = from(BrowserSingleVersionPerfDetail.blankTime).percentile(10);\n+\n+// Browser service version page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0804f6151b25fa5a98c645a310f99c1967b9c619"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk5Mzg4OnYy", "diffSide": "RIGHT", "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowNzoxNFrOFm8anQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowNzoxNFrOFm8anQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4MDA2MQ==", "bodyText": "What is this? I think SRC_BROWSER_APP_ERROR_LOG should represent the error log?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376380061", "createdAt": "2020-02-07T13:07:14Z", "author": {"login": "wu-sheng"}, "path": "oap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4", "diffHunk": "@@ -45,10 +45,11 @@ SRC_SERVICE_INSTANCE_CLR_THREAD: 'ServiceInstanceCLRThread';\n SRC_ENVOY_INSTANCE_METRIC: 'EnvoyInstanceMetric';\n \n // Browser keywords\n-SRC_BROWSER_PERF_DETAIL: 'BrowserPerfDetail';\n-SRC_BROWSER_PAGE_PATH_PERF_DETAIL: 'BrowserPagePathPerfDetail';\n-SRC_BROWSER_SINGLE_VERSION_PERF_DETAIL: 'BrowserSingleVersionPerfDetail';\n-SRC_BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL: 'BrowserSingleVersionPagePathPerfDetail';\n+SRC_BROWSER_APP_PERF: 'BrowserAppPerf';\n+SRC_BROWSER_APP_PAGE_PERF: 'BrowserAppPagePerf';\n+SRC_BROWSER_APP_SINGLE_VERSION_PERF: 'BrowserAppSingleVersionPerf';\n+SRC_BROWSER_APP_ERROR_LOG: 'BrowserAppErrorLog';\n+SRC_BROWSER_APP_PAGE_ERROR_LOG: 'BrowserAppPageErrorLog';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fde26ef710c301322f3ab27ceb8c2165e9aaee"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk5NjUzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowODoyNVrOFm8cQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowODoyNVrOFm8cQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4MDQ4MA==", "bodyText": "Remove unless OAL.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376380480", "createdAt": "2020-02-07T13:08:25Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -16,72 +16,34 @@\n *\n */\n \n-// Browser service\n-browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();\n-browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();\n-browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();\n-browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();\n-browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();\n-browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();\n-\n-// Multiple values including p50, p75, p90, p95, p99\n-browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);\n-browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);\n-browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);\n-browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);\n-browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);\n-browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);\n-\n-// Browser service page\n-browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();\n-browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);\n-\n-browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();\n-browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();\n-browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();\n-browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();\n-browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();\n-browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();\n-\n-// Multiple values including p50, p75, p90, p95, p99\n-browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);\n-browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);\n-browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);\n-browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);\n-browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);\n-browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);\n-\n-// Browser service version\n-browser_single_version_redirect_avg = from(BrowserSingleVersionPerfDetail.redirectTime).longAvg();\n-browser_single_version_dns_avg = from(BrowserSingleVersionPerfDetail.dnsTime).longAvg();\n-browser_single_version_req_avg = from(BrowserSingleVersionPerfDetail.reqTime).longAvg();\n-browser_single_version_dom_analysis_avg = from(BrowserSingleVersionPerfDetail.domAnalysisTime).longAvg();\n-browser_single_version_dom_ready_avg = from(BrowserSingleVersionPerfDetail.domReadyTime).longAvg();\n-browser_single_version_blank_avg = from(BrowserSingleVersionPerfDetail.blankTime).longAvg();\n-\n-// Multiple values including p50, p75, p90, p95, p99\n-browser_single_version_redirect_percentile = from(BrowserSingleVersionPerfDetail.redirectTime).percentile(10);\n-browser_single_version_dns_percentile = from(BrowserSingleVersionPerfDetail.dnsTime).percentile(10);\n-browser_single_version_req_percentile = from(BrowserSingleVersionPerfDetail.reqTime).percentile(10);\n-browser_single_version_dom_analysis_percentile = from(BrowserSingleVersionPerfDetail.domAnalysisTime).percentile(10);\n-browser_single_version_dom_ready_percentile = from(BrowserSingleVersionPerfDetail.domReadyTime).percentile(10);\n-browser_single_version_blank_percentile = from(BrowserSingleVersionPerfDetail.blankTime).percentile(10);\n-\n-// Browser service version page\n-browser_single_version_page_pv = from(BrowserSingleVersionPagePathPerfDetail.count).sum();\n-browser_single_version_page_error_rate = from(BrowserSingleVersionPagePathPerfDetail.*).percent(status == false);\n-\n-browser_single_version_page_redirect_avg = from(BrowserSingleVersionPagePathPerfDetail.redirectTime).longAvg();\n-browser_single_version_page_dns_avg = from(BrowserSingleVersionPagePathPerfDetail.dnsTime).longAvg();\n-browser_single_version_page_req_avg = from(BrowserSingleVersionPagePathPerfDetail.reqTime).longAvg();\n-browser_single_version_page_dom_analysis_avg = from(BrowserSingleVersionPagePathPerfDetail.domAnalysisTime).longAvg();\n-browser_single_version_page_dom_ready_avg = from(BrowserSingleVersionPagePathPerfDetail.domReadyTime).longAvg();\n-browser_single_version_page_blank_avg = from(BrowserSingleVersionPagePathPerfDetail.blankTime).longAvg();\n-\n-// Multiple values including p50, p75, p90, p95, p99\n-browser_single_version_page_redirect_percentile = from(BrowserSingleVersionPagePathPerfDetail.redirectTime).percentile(10);\n-browser_single_version_page_dns_percentile = from(BrowserSingleVersionPagePathPerfDetail.dnsTime).percentile(10);\n-browser_single_version_page_req_percentile = from(BrowserSingleVersionPagePathPerfDetail.reqTime).percentile(10);\n-browser_single_version_page_dom_analysis_percentile = from(BrowserSingleVersionPagePathPerfDetail.domAnalysisTime).percentile(10);\n-browser_single_version_page_dom_ready_percentile = from(BrowserSingleVersionPagePathPerfDetail.domReadyTime).percentile(10);\n-browser_single_version_page_blank_percentile = from(BrowserSingleVersionPagePathPerfDetail.blankTime).percentile(10);\n\\ No newline at end of file\n+// browser app\n+browser_app_pv = from(BrowserAppPerf.count).sum();\n+// browser_app_error_sum = from(BrowserAppErrorLog.count).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fde26ef710c301322f3ab27ceb8c2165e9aaee"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA1MjE3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/errorlog/SourceBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoyODo1M1rOFm891g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoyODo1M1rOFm891g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4OTA3OA==", "bodyText": "There is already a SourceBuilder, please don't use duplicated name.  Also, the existing one should be renamed to Trace SourceBuilder.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376389078", "createdAt": "2020-02-07T13:28:53Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/errorlog/SourceBuilder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.errorlog;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserAppErrorLog;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserAppPageErrorLog;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorCategory;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@Setter\n+@Getter\n+class SourceBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA2Mzk2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzozMjoyOFrOFm9EoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzozMjoyOFrOFm9EoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MDgxNg==", "bodyText": "If uniqueId == null, this seems a NPE?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376390816", "createdAt": "2020-02-07T13:32:28Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.record;\n+\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorLog;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListenerFactory;\n+\n+/**\n+ * Process error record.\n+ *\n+ * @author zhangwei\n+ */\n+public class BrowserErrorLogRecordListener implements BrowserErrorLogListener {\n+\n+    private final SourceReceiver sourceReceiver;\n+    private final BrowserErrorLog browserErrorLog;\n+    private BrowserErrorLogRecordSampler sampler;\n+    private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n+\n+    private BrowserErrorLogRecordListener(ModuleManager moduleManager, BrowserErrorLogRecordSampler sampler) {\n+        sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n+        browserErrorLog = new BrowserErrorLog();\n+        this.sampler = sampler;\n+    }\n+\n+    @Override\n+    public void build() {\n+        filter(() -> sourceReceiver.receive(browserErrorLog));\n+    }\n+\n+    @Override\n+    public void parse(BrowserErrorLogDecorator decorator, BrowserErrorLogCoreInfo coreInfo) {\n+        filter(coreInfo.getUniqueId(), () -> {\n+            browserErrorLog.setUniqueId(coreInfo.getUniqueId());\n+            browserErrorLog.setServiceId(coreInfo.getServiceId());\n+            browserErrorLog.setServiceVersionId(coreInfo.getServiceVersionId());\n+            browserErrorLog.setPagePathId(coreInfo.getPagePathId());\n+            browserErrorLog.setPagePath(decorator.getPagePath());\n+            browserErrorLog.setTime(decorator.getTime());\n+            browserErrorLog.setTimeBucket(coreInfo.getMinuteTimeBucket());\n+            browserErrorLog.setCategory(coreInfo.getCategory());\n+            browserErrorLog.setDataBinary(decorator.toByteArray());\n+        });\n+    }\n+\n+    private void filter(Runnable runnable) {\n+        filter(null, runnable);\n+    }\n+\n+    private void filter(String uniqueId, Runnable runnable) {\n+        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n+            return;\n+        }\n+        if (sampleStatus.equals(SAMPLE_STATUS.UNKNOWN)) {\n+            if (sampler.shouldSample(uniqueId.hashCode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA2NTA0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzozMjo1NVrOFm9FSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzozMjo1NVrOFm9FSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MDk4Nw==", "bodyText": "Why have this? Related to the following NPE question.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376390987", "createdAt": "2020-02-07T13:32:55Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.record;\n+\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorLog;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListenerFactory;\n+\n+/**\n+ * Process error record.\n+ *\n+ * @author zhangwei\n+ */\n+public class BrowserErrorLogRecordListener implements BrowserErrorLogListener {\n+\n+    private final SourceReceiver sourceReceiver;\n+    private final BrowserErrorLog browserErrorLog;\n+    private BrowserErrorLogRecordSampler sampler;\n+    private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n+\n+    private BrowserErrorLogRecordListener(ModuleManager moduleManager, BrowserErrorLogRecordSampler sampler) {\n+        sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n+        browserErrorLog = new BrowserErrorLog();\n+        this.sampler = sampler;\n+    }\n+\n+    @Override\n+    public void build() {\n+        filter(() -> sourceReceiver.receive(browserErrorLog));\n+    }\n+\n+    @Override\n+    public void parse(BrowserErrorLogDecorator decorator, BrowserErrorLogCoreInfo coreInfo) {\n+        filter(coreInfo.getUniqueId(), () -> {\n+            browserErrorLog.setUniqueId(coreInfo.getUniqueId());\n+            browserErrorLog.setServiceId(coreInfo.getServiceId());\n+            browserErrorLog.setServiceVersionId(coreInfo.getServiceVersionId());\n+            browserErrorLog.setPagePathId(coreInfo.getPagePathId());\n+            browserErrorLog.setPagePath(decorator.getPagePath());\n+            browserErrorLog.setTime(decorator.getTime());\n+            browserErrorLog.setTimeBucket(coreInfo.getMinuteTimeBucket());\n+            browserErrorLog.setCategory(coreInfo.getCategory());\n+            browserErrorLog.setDataBinary(decorator.toByteArray());\n+        });\n+    }\n+\n+    private void filter(Runnable runnable) {\n+        filter(null, runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA4OTI2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MToxMlrOFm9T1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MToxMlrOFm9T1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDcxMQ==", "bodyText": "This is error traffic, not error log. You should rename to *ErrorTraffic", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376394711", "createdAt": "2020-02-07T13:41:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorLog extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA5MDM5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MTozMFrOFm9Uew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MTozMFrOFm9Uew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDg3NQ==", "bodyText": "Log -> Traffic too.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376394875", "createdAt": "2020-02-07T13:41:30Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_PAGE_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_PAGE_ERROR_LOG, name = \"BrowserAppPageErrorLog\", catalog = ENDPOINT_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppPageErrorLog extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA5MjE2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MjoxOFrOFm9VtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzoxMjo0NVrOFn_AQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTE4OQ==", "bodyText": "Log collect service is a streaming process mode, you should support that, so this count could be > 1.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376395189", "createdAt": "2020-02-07T13:42:18Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorLog extends Source {\n+\n+    @Override\n+    public int scope() {\n+        return BROWSER_APP_ERROR_LOG;\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return String.valueOf(id);\n+    }\n+\n+    @Getter @Setter private int id;\n+    @Getter private final int count = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3MTA0MA==", "bodyText": "Because the client calls the uncertainty of onCompleted, leave it as it is.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r377471040", "createdAt": "2020-02-11T07:12:45Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorLog extends Source {\n+\n+    @Override\n+    public int scope() {\n+        return BROWSER_APP_ERROR_LOG;\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return String.valueOf(id);\n+    }\n+\n+    @Getter @Setter private int id;\n+    @Getter private final int count = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTE4OQ=="}, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODA5MzI0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MjozOFrOFm9Wag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0MjozOFrOFm9Wag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTM3MA==", "bodyText": "Same as above, could be > 1", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376395370", "createdAt": "2020-02-07T13:42:38Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_PAGE_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_PAGE_ERROR_LOG, name = \"BrowserAppPageErrorLog\", catalog = ENDPOINT_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppPageErrorLog extends Source {\n+\n+    @Override\n+    public int scope() {\n+        return BROWSER_APP_PAGE_ERROR_LOG;\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return String.valueOf(id);\n+    }\n+\n+\n+    @Getter @Setter private int id;\n+    @Getter @Setter private int serviceId;\n+    @Getter private final int count = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzA2NjMwOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTo1Mjo0MFrOFpxCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjoyNTo1NFrOFp0_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzOTI4NA==", "bodyText": "I think receiver-browser should be activated by default, right? Even the UI is not ready, but it should be there because this will be a part of UI when it is ready.\nChange this to Find browser-receiver setup in the backend receiver doc. as the 2nd point.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379339284", "createdAt": "2020-02-14T09:52:40Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/README.md", "diffHunk": "@@ -25,6 +25,12 @@ You can go to their project repositories for additional info about guides and re\n \n - [SkyAPM GO2Sky](https://github.com/SkyAPM/go2sky). See GO2Sky project document for more details.\n \n+## Browser agent\n+\n+- Activate the [browser-receiver](backend/backend-receivers.md#browser-receiver) following the document.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwNDI0Ng==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379404246", "createdAt": "2020-02-14T12:25:54Z", "author": {"login": "arugal"}, "path": "docs/en/setup/README.md", "diffHunk": "@@ -25,6 +25,12 @@ You can go to their project repositories for additional info about guides and re\n \n - [SkyAPM GO2Sky](https://github.com/SkyAPM/go2sky). See GO2Sky project document for more details.\n \n+## Browser agent\n+\n+- Activate the [browser-receiver](backend/backend-receivers.md#browser-receiver) following the document.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzOTI4NA=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzA3ODMyOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTo1NjoyMVrOFpxI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjoyNTo0OVrOFp0_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0MTAxMA==", "bodyText": "Move this to the 1st point. And change to\nBrowser JS Client. JS client reports the browser performance data to the backend. See skywalking-client-js project document for more details.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379341010", "createdAt": "2020-02-14T09:56:21Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/README.md", "diffHunk": "@@ -25,6 +25,12 @@ You can go to their project repositories for additional info about guides and re\n \n - [SkyAPM GO2Sky](https://github.com/SkyAPM/go2sky). See GO2Sky project document for more details.\n \n+## Browser agent\n+\n+- Activate the [browser-receiver](backend/backend-receivers.md#browser-receiver) following the document.\n+\n+- [Browser Js Client](https://github.com/apache/skywalking-client-js). See `skywalking-client-js` project document for more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwNDE5OQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379404199", "createdAt": "2020-02-14T12:25:49Z", "author": {"login": "arugal"}, "path": "docs/en/setup/README.md", "diffHunk": "@@ -25,6 +25,12 @@ You can go to their project repositories for additional info about guides and re\n \n - [SkyAPM GO2Sky](https://github.com/SkyAPM/go2sky). See GO2Sky project document for more details.\n \n+## Browser agent\n+\n+- Activate the [browser-receiver](backend/backend-receivers.md#browser-receiver) following the document.\n+\n+- [Browser Js Client](https://github.com/apache/skywalking-client-js). See `skywalking-client-js` project document for more details.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0MTAxMA=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzI0MTA3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo0OTo0M1rOFpystw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo0OTo0M1rOFpystw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2NjU4Mw==", "bodyText": "Add [WIP] as prefix.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379366583", "createdAt": "2020-02-14T10:49:43Z", "author": {"login": "wu-sheng"}, "path": "README.md", "diffHunk": "@@ -27,6 +27,7 @@ The core features are following.\n - Distributed tracing and context propagation\n - Database access metrics. Detect slow database access statements(including SQL statements).\n - Alarm\n+- Browser performance monitoring", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzI0MjEwOnYy", "diffSide": "RIGHT", "path": "dist-material/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1MDowNlrOFpytWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjoyNTozNVrOFp0_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2Njc0NA==", "bodyText": "Open as default", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379366744", "createdAt": "2020-02-14T10:50:06Z", "author": {"login": "wu-sheng"}, "path": "dist-material/application.yml", "diffHunk": "@@ -151,6 +151,17 @@ receiver-jvm:\n   default:\n receiver-clr:\n   default:\n+#receiver-browser:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwNDExNQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379404115", "createdAt": "2020-02-14T12:25:35Z", "author": {"login": "arugal"}, "path": "dist-material/application.yml", "diffHunk": "@@ -151,6 +151,17 @@ receiver-jvm:\n   default:\n receiver-clr:\n   default:\n+#receiver-browser:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2Njc0NA=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzI1NjA2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1NDo1MFrOFpy12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjoyNTozMFrOFp0_PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2ODkyMQ==", "bodyText": "Where is the error rate you asked before?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379368921", "createdAt": "2020-02-14T10:54:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// browser app\n+browser_app_pv = from(BrowserAppPerf.count).sum();\n+browser_app_error_sum = from(BrowserAppErrorTraffic.count).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwNDA5Mw==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379404093", "createdAt": "2020-02-14T12:25:30Z", "author": {"login": "arugal"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// browser app\n+browser_app_pv = from(BrowserAppPerf.count).sum();\n+browser_app_error_sum = from(BrowserAppErrorTraffic.count).sum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2ODkyMQ=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzI2MDE0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/BrowserErrorTrafficRecord.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDo1NjoxOVrOFpy4dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjoyNToxNVrOFp0-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2OTU4OA==", "bodyText": "As a record type, this should be in the disable oal too. Make sense?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379369588", "createdAt": "2020-02-14T10:56:19Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/BrowserErrorTrafficRecord.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.manual;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.analysis.Stream;\n+import org.apache.skywalking.oap.server.core.analysis.record.Record;\n+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;\n+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n+\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Stream(name = BrowserErrorTrafficRecord.INDEX_NAME, scopeId = DefaultScopeDefine.BROWSER_ERROR_TRAFFIC, builder = BrowserErrorTrafficRecord.Builder.class, processor = RecordStreamProcessor.class)\n+public class BrowserErrorTrafficRecord extends Record {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwMzk5OA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379403998", "createdAt": "2020-02-14T12:25:15Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/manual/BrowserErrorTrafficRecord.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.manual;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.analysis.Stream;\n+import org.apache.skywalking.oap.server.core.analysis.record.Record;\n+import org.apache.skywalking.oap.server.core.analysis.worker.RecordStreamProcessor;\n+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;\n+import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+import org.apache.skywalking.oap.server.library.util.CollectionUtils;\n+\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Stream(name = BrowserErrorTrafficRecord.INDEX_NAME, scopeId = DefaultScopeDefine.BROWSER_ERROR_TRAFFIC, builder = BrowserErrorTrafficRecord.Builder.class, processor = RecordStreamProcessor.class)\n+public class BrowserErrorTrafficRecord extends Record {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2OTU4OA=="}, "originalCommit": null, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzUwMDk2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjozMzowMlrOFp1Kqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjozMzowMlrOFp1Kqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQwNzAxOQ==", "bodyText": "This requires the antlr change.  browser_error_traffic should be a source.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379407019", "createdAt": "2020-02-14T12:33:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/browser_analysis.oal", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+\n+// browser app\n+browser_app_pv = from(BrowserAppPerf.count).sum();\n+browser_app_error_rate = from(BrowserAppPerf.*).percent(status == false)\n+browser_app_error_sum = from(BrowserAppErrorTraffic.count).sum();\n+\n+// browser app single version\n+browser_app_single_version_pv = from(BrowserAppSingleVersionPerf.count).sum();\n+browser_app_single_version_error_rate = from(BrowserAppSingleVersionPerf.*).percent(status == false)\n+\n+// browser app page\n+browser_app_page_pv = from(BrowserAppPagePerf.count).sum();\n+browser_app_page_error_rate = from(BrowserAppPagePerf.*).percent(status == false)\n+browser_app_page_error_sum = from(BrowserAppPageErrorTraffic.count).sum();\n+\n+browser_app_page_ajax_error_sum = from(BrowserAppPageErrorTraffic.count).filter(category == BrowserErrorCategory.AJAX).sum();\n+browsre_app_page_resource_error_sum = from(BrowserAppPageErrorTraffic.count).filter(category == BrowserErrorCategory.RESOURCE).sum();\n+browsre_app_page_vue_error_sum = from(BrowserAppPageErrorTraffic.count).filter(category == BrowserErrorCategory.VUE).sum();\n+browsre_app_page_promise_error_sum = from(BrowserAppPageErrorTraffic.count).filter(category == BrowserErrorCategory.PROMISE).sum();\n+browser_app_page_js_error_sum = from(BrowserAppPageErrorTraffic.count).filter(category == BrowserErrorCategory.JS).sum();\n+browser_app_page_unknown_error_sum = from(BrowserAppPageErrorTraffic.count).filter(category == BrowserErrorCategory.UNKNOWN).sum();\n+\n+browser_app_page_redirect_avg = from(BrowserAppPagePerf.redirectTime).longAvg();\n+browser_app_page_dns_avg = from(BrowserAppPagePerf.dnsTime).longAvg();\n+browser_app_page_req_avg = from(BrowserAppPagePerf.reqTime).longAvg();\n+browser_app_page_dom_analysis_avg = from(BrowserAppPagePerf.domAnalysisTime).longAvg();\n+browser_app_page_dom_ready_avg = from(BrowserAppPagePerf.domReadyTime).longAvg();\n+browser_app_page_blank_avg = from(BrowserAppPagePerf.blankTime).longAvg();\n+\n+browser_app_page_redirect_percentile = from(BrowserAppPagePerf.redirectTime).percentile(10);\n+browser_app_page_dns_percentile = from(BrowserAppPagePerf.dnsTime).percentile(10);\n+browser_app_page_req_percentile = from(BrowserAppPagePerf.reqTime).percentile(10);\n+browser_app_page_dom_analysis_percentile = from(BrowserAppPagePerf.domAnalysisTime).percentile(10);\n+browser_app_page_dom_ready_percentile = from(BrowserAppPagePerf.domReadyTime).percentile(10);\n+browser_app_page_blank_percentile = from(BrowserAppPagePerf.blankTime).percentile(10);\n+\n+// Disable unnecessary hard core stream, targeting @Stream#name\n+/////////\n+// disable(browser_error_traffic)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzUzNzE0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorTraffic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0NjozM1rOFp1gIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMjoyMzowMFrOFqO5Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjUxNA==", "bodyText": "Just for confirmation, is this source forwarding to OAL and manual record entity at the same time?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379412514", "createdAt": "2020-02-14T12:46:33Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorTraffic.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_TRAFFIC;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_TRAFFIC, name = \"BrowserAppErrorTraffic\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorTraffic extends Source {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyODQ5OA==", "bodyText": "Only to OAL, record entity is generated by BrowserErrorTraffic.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379828498", "createdAt": "2020-02-15T12:23:00Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorTraffic.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_TRAFFIC;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_TRAFFIC, name = \"BrowserAppErrorTraffic\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorTraffic extends Source {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjUxNA=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzU0MzQ3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/BrowserErrorLogListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0OTowMVrOFp1jzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0OTowMVrOFp1jzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMzQ1Mg==", "bodyText": "Comments for the interface and all implementations are required.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379413452", "createdAt": "2020-02-14T12:49:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/BrowserErrorLogListener.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener;\n+\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n+\n+public interface BrowserErrorLogListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzU0NDQ2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/BrowserErrorLogParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0OToyOVrOFp1kdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0OToyOVrOFp1kdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMzYyMQ==", "bodyText": "Comments are required.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379413621", "createdAt": "2020-02-14T12:49:29Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/BrowserErrorLogParser.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.language.agent.BrowserErrorLog;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n+import org.apache.skywalking.oap.server.library.buffer.BufferData;\n+import org.apache.skywalking.oap.server.library.buffer.DataStreamReader;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.BrowserDataSource;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.standardization.BrowserErrorLogStandardization;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.standardization.BrowserErrorLogStandardizationWorker;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.standardization.PagePathIdExchanger;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.CounterMetrics;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+@Slf4j\n+public class BrowserErrorLogParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzU2MDQ5OnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo1NTo1MFrOFp1uBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMTo1OToxMFrOFqO0qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ==", "bodyText": "Why use UTC TZ specifically? Could you explain?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379416071", "createdAt": "2020-02-14T12:55:50Z", "author": {"login": "wu-sheng"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTI0Mw==", "bodyText": "Before that was the UTC TZ, I just overload verifyMetrics.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379435243", "createdAt": "2020-02-14T13:42:18Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNjY2NA==", "bodyText": "Why change it? Please give me more details?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379436664", "createdAt": "2020-02-14T13:45:23Z", "author": {"login": "wu-sheng"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwOTgzMQ==", "bodyText": "Convenient debug, set end time according to local TZ.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379509831", "createdAt": "2020-02-14T15:59:40Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNDExOQ==", "bodyText": "My point is, if you want to change, why don't change the existing method? Instead, you add a new method.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379514119", "createdAt": "2020-02-14T16:07:33Z", "author": {"login": "wu-sheng"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxNTk1NQ==", "bodyText": "I get it.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379715955", "createdAt": "2020-02-15T04:08:19Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ=="}, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNzM2OA==", "bodyText": "Has been rollback.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379827368", "createdAt": "2020-02-15T11:59:10Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-base/src/main/java/org/apache/skywalking/e2e/metrics/MetricsMatcher.java", "diffHunk": "@@ -64,15 +72,23 @@ public static void verifyMetrics(SimpleQueryClient queryClient, String metricNam\n     }\n \n     public static void verifyPercentileMetrics(SimpleQueryClient queryClient, String metricName, String id,\n-        final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+                                               final LocalDateTime minutesAgo, long retryInterval, Runnable generateTraffic) throws Exception {\n+        verifyPercentileMetrics(queryClient, metricName, id, minutesAgo, LocalDateTime.now(ZoneOffset.UTC).plusMinutes(1), retryInterval, generateTraffic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjA3MQ=="}, "originalCommit": null, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzU2MzY0OnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-browser/e2e-browser-es/src/test/java/org/apache/skywalking/e2e/ESWithBrowserPerfITCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo1NzoxM1rOFp1v7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMTo1NToxOVrOFqOz6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjU1OQ==", "bodyText": "Storage should be based on backend storage settings, why test case cares about this? Especially, there is nothing different with BrowserPerfITCase", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379416559", "createdAt": "2020-02-14T12:57:13Z", "author": {"login": "wu-sheng"}, "path": "test/e2e/e2e-browser/e2e-browser-es/src/test/java/org/apache/skywalking/e2e/ESWithBrowserPerfITCase.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.e2e;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.e2e.browser.BrowserPerfITCase;\n+\n+@Slf4j\n+public class ESWithBrowserPerfITCase extends BrowserPerfITCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNzE3Ng==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379827176", "createdAt": "2020-02-15T11:55:19Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-browser/e2e-browser-es/src/test/java/org/apache/skywalking/e2e/ESWithBrowserPerfITCase.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.e2e;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.e2e.browser.BrowserPerfITCase;\n+\n+@Slf4j\n+public class ESWithBrowserPerfITCase extends BrowserPerfITCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxNjU1OQ=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzU4NjU1OnYy", "diffSide": "RIGHT", "path": ".github/workflows/e2e.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzowNTo1OFrOFp19eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMTo1NTowNlrOFqOz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQyMDAyNQ==", "bodyText": "Please add the tests for different storage. And browser e2e tests should be in an separated e2e-browser-perf.yaml file.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379420025", "createdAt": "2020-02-14T13:05:58Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/e2e.yaml", "diffHunk": "@@ -118,3 +118,19 @@ jobs:\n         run: export E2E_VERSION=jdk8-1.3 && bash -x test/e2e/run.sh e2e-profile/e2e-profile-test-runner --storage=elasticsearch\n       - name: Profile Tests ES7(JDK8)\n         run: export E2E_VERSION=jdk8-1.3 DIST_PACKAGE=apache-skywalking-apm-bin-es7.tar.gz ES_VERSION=7.4.2 && bash -x test/e2e/run.sh e2e-profile/e2e-profile-test-runner --storage=elasticsearch\n+        \n+  Browser:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v1\n+        with:\n+          submodules: true\n+      - name: Set environment\n+        run: export MAVEN_OPTS='-Dmaven.repo.local=~/.m2/repository -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit -Xmx3g'\n+      - name: Compile & Install Test Codes\n+        run: |\n+          ./mvnw checkstyle:check apache-rat:check\n+          ./mvnw -Dcheckstyle.skip -Drat.skip -T2 -Dmaven.compile.fork -Dmaven.compiler.maxmem=3072 -DskipTests clean install\n+          ./mvnw -f test/e2e/pom.xml -pl e2e-base clean install\n+      - name: Browser Tests ES6(JDK8)\n+        run: export E2E_VERSION=jdk8-1.3 && bash -x test/e2e/run.sh e2e-browser/e2e-browser-es", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNzE2Nw==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r379827167", "createdAt": "2020-02-15T11:55:06Z", "author": {"login": "arugal"}, "path": ".github/workflows/e2e.yaml", "diffHunk": "@@ -118,3 +118,19 @@ jobs:\n         run: export E2E_VERSION=jdk8-1.3 && bash -x test/e2e/run.sh e2e-profile/e2e-profile-test-runner --storage=elasticsearch\n       - name: Profile Tests ES7(JDK8)\n         run: export E2E_VERSION=jdk8-1.3 DIST_PACKAGE=apache-skywalking-apm-bin-es7.tar.gz ES_VERSION=7.4.2 && bash -x test/e2e/run.sh e2e-profile/e2e-profile-test-runner --storage=elasticsearch\n+        \n+  Browser:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v1\n+        with:\n+          submodules: true\n+      - name: Set environment\n+        run: export MAVEN_OPTS='-Dmaven.repo.local=~/.m2/repository -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit -Xmx3g'\n+      - name: Compile & Install Test Codes\n+        run: |\n+          ./mvnw checkstyle:check apache-rat:check\n+          ./mvnw -Dcheckstyle.skip -Drat.skip -T2 -Dmaven.compile.fork -Dmaven.compiler.maxmem=3072 -DskipTests clean install\n+          ./mvnw -f test/e2e/pom.xml -pl e2e-base clean install\n+      - name: Browser Tests ES6(JDK8)\n+        run: export E2E_VERSION=jdk8-1.3 && bash -x test/e2e/run.sh e2e-browser/e2e-browser-es", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQyMDAyNQ=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTE2NDQ1OnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1Njo0M1rOF41G7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1Njo0M1rOF41G7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzNDcwMQ==", "bodyText": "Based on the tests, you don't need this", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395134701", "createdAt": "2020-03-19T15:56:43Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.e2e.browser;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.internal.DnsNameResolverProvider;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.common.KeyIntValuePair;\n+import org.apache.skywalking.apm.network.common.ServiceType;\n+import org.apache.skywalking.apm.network.language.agent.BrowserErrorLog;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfServiceGrpc;\n+import org.apache.skywalking.apm.network.language.agent.ErrorCategory;\n+import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstance;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstanceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstances;\n+import org.apache.skywalking.apm.network.register.v2.ServiceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.Services;\n+import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n+import org.apache.skywalking.e2e.annotation.DockerCompose;\n+import org.apache.skywalking.e2e.annotation.DockerContainer;\n+import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n+import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n+import org.apache.skywalking.e2e.base.TrafficController;\n+import org.apache.skywalking.e2e.common.HostAndPort;\n+import org.apache.skywalking.e2e.retryable.RetryableTest;\n+import org.apache.skywalking.e2e.service.Service;\n+import org.apache.skywalking.e2e.service.ServicesMatcher;\n+import org.apache.skywalking.e2e.service.ServicesQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n+import org.apache.skywalking.e2e.service.instance.Instance;\n+import org.apache.skywalking.e2e.service.instance.Instances;\n+import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n+import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.testcontainers.containers.ContainerState;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static java.util.Objects.nonNull;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_SINGLE_VERSION_METRICS;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyPercentileMetrics;\n+import static org.apache.skywalking.e2e.utils.Times.now;\n+import static org.apache.skywalking.e2e.utils.Yamls.load;\n+\n+@Slf4j\n+@SkyWalkingE2E\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTE3NTYzOnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/ClusterE2E.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo1OTowOVrOF41OSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0Mjo0MVrOF5ULNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzNjU4NA==", "bodyText": "revert these, and format the ones in BrowserE2E", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395136584", "createdAt": "2020-03-19T15:59:09Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/ClusterE2E.java", "diffHunk": "@@ -122,18 +123,18 @@ void topology() throws Exception {\n         verifyServiceRelationMetrics(topology.getCalls());\n \n         final String clientId = topology.getNodes()\n-                                        .stream()\n-                                        .filter(n -> n.getName().equals(providerName))\n-                                        .findFirst()\n-                                        .orElseThrow(NullPointerException::new)\n-                                        .getId();\n+            .stream()\n+            .filter(n -> n.getName().equals(providerName))\n+            .findFirst()\n+            .orElseThrow(NullPointerException::new)\n+            .getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MzcwMg==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395643702", "createdAt": "2020-03-20T13:42:41Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/ClusterE2E.java", "diffHunk": "@@ -122,18 +123,18 @@ void topology() throws Exception {\n         verifyServiceRelationMetrics(topology.getCalls());\n \n         final String clientId = topology.getNodes()\n-                                        .stream()\n-                                        .filter(n -> n.getName().equals(providerName))\n-                                        .findFirst()\n-                                        .orElseThrow(NullPointerException::new)\n-                                        .getId();\n+            .stream()\n+            .filter(n -> n.getName().equals(providerName))\n+            .findFirst()\n+            .orElseThrow(NullPointerException::new)\n+            .getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzNjU4NA=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjQ0NjQ3OnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxMjozMVrOF5VVbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMjo0MDowMVrOF5nG5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2MjcwMQ==", "bodyText": "this should be a test case too, verifying that registering works, and order the cases, place this at the 1st, and the others that depend on this after that, as for ordering cases, refer to AgentRebootE2E", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395662701", "createdAt": "2020-03-20T14:12:31Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.e2e.browser;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.internal.DnsNameResolverProvider;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.common.KeyIntValuePair;\n+import org.apache.skywalking.apm.network.common.ServiceType;\n+import org.apache.skywalking.apm.network.language.agent.BrowserErrorLog;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfServiceGrpc;\n+import org.apache.skywalking.apm.network.language.agent.ErrorCategory;\n+import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstance;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstanceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstances;\n+import org.apache.skywalking.apm.network.register.v2.ServiceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.Services;\n+import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n+import org.apache.skywalking.e2e.annotation.DockerCompose;\n+import org.apache.skywalking.e2e.annotation.DockerContainer;\n+import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n+import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n+import org.apache.skywalking.e2e.base.TrafficController;\n+import org.apache.skywalking.e2e.common.HostAndPort;\n+import org.apache.skywalking.e2e.retryable.RetryableTest;\n+import org.apache.skywalking.e2e.service.Service;\n+import org.apache.skywalking.e2e.service.ServicesMatcher;\n+import org.apache.skywalking.e2e.service.ServicesQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n+import org.apache.skywalking.e2e.service.instance.Instance;\n+import org.apache.skywalking.e2e.service.instance.Instances;\n+import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n+import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.testcontainers.containers.ContainerState;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import static java.util.Objects.nonNull;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_SINGLE_VERSION_METRICS;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyPercentileMetrics;\n+import static org.apache.skywalking.e2e.utils.Times.now;\n+import static org.apache.skywalking.e2e.utils.Yamls.load;\n+\n+@Slf4j\n+@SkyWalkingE2E\n+public class BrowserE2E extends SkyWalkingTestAdapter {\n+\n+    private static final int MAX_INBOUND_MESSAGE_SIZE = 1024 * 1024 * 50;\n+\n+    private static final String BROWSER_NAME = \"e2e\";\n+\n+    private static final String BROWSER_SINGLE_VERSION_NAME = \"v1.0.0\";\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerCompose({\n+        \"docker/browser/docker-compose.${SW_STORAGE}.yml\",\n+    })\n+    protected DockerComposeContainer<?> compose;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"ui\", port = 8080)\n+    private HostAndPort swWebappHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"oap\", port = 11800)\n+    private HostAndPort oapHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerContainer(\"oap\")\n+    private ContainerState oapContainer;\n+\n+    private RegisterGrpc.RegisterBlockingStub registerStub;\n+\n+    private BrowserPerfServiceGrpc.BrowserPerfServiceStub browserPerfServiceStub;\n+\n+    private volatile int browserId;\n+\n+    private volatile int browserSingleVersionId;\n+\n+    @BeforeAll\n+    public void setUp() {\n+        queryClient(swWebappHostPort);\n+\n+        final ManagedChannel channel =\n+            NettyChannelBuilder.forAddress(oapHostPort.host(), oapHostPort.port())\n+                               .nameResolverFactory(new DnsNameResolverProvider())\n+                               .maxInboundMessageSize(MAX_INBOUND_MESSAGE_SIZE)\n+                               .usePlaintext()\n+                               .build();\n+\n+        registerStub = RegisterGrpc.newBlockingStub(channel);\n+        browserPerfServiceStub = BrowserPerfServiceGrpc.newStub(channel);\n+\n+        register();\n+        generateTraffic();\n+    }\n+\n+    @RetryableTest\n+    void verify() throws Exception {\n+        final List<Service> services = graphql.browserServices(new ServicesQuery().start(startTime).end(now()));\n+        LOGGER.info(\"services: {}\", services);\n+\n+        load(\"expected/browser/services.yml\")\n+            .as(ServicesMatcher.class).verify(services);\n+\n+        for (Service service : services) {\n+            LOGGER.info(\"verifying service version: {}\", service);\n+            // service metrics\n+            verifyBrowserMetrics(service);\n+\n+            // service version\n+            verifyBrowserSingleVersion(service);\n+\n+            // service page path\n+            verifyBrowserPagePath(service);\n+        }\n+    }\n+\n+    private void verifyBrowserMetrics(final Service service) throws Exception {\n+        for (String metricName : ALL_BROWSER_METRICS) {\n+            verifyMetrics(graphql, metricName, service.getKey(), startTime);\n+        }\n+    }\n+\n+    private Instances verifyBrowserSingleVersion(final Service service) throws Exception {\n+        Instances instances = graphql.instances(\n+            new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now())\n+        );\n+        LOGGER.info(\"instances: {}\", instances);\n+        load(\"expected/browser/version.yml\").as(InstancesMatcher.class).verify(instances);\n+        // service version metrics\n+        for (Instance instance : instances.getInstances()) {\n+            verifyBrowserSingleVersionMetrics(instance);\n+        }\n+        return instances;\n+    }\n+\n+    private void verifyBrowserSingleVersionMetrics(Instance instance) throws Exception {\n+        for (String metricName : ALL_BROWSER_SINGLE_VERSION_METRICS) {\n+            verifyMetrics(graphql, metricName, instance.getKey(), startTime);\n+        }\n+    }\n+\n+    private Endpoints verifyBrowserPagePath(final Service service) throws Exception {\n+        Endpoints endpoints = graphql.endpoints(new EndpointQuery().serviceId(String.valueOf(service.getKey())));\n+        LOGGER.info(\"endpoints: {}\", endpoints);\n+        load(\"expected/browser/pagePath.yml\").as(EndpointsMatcher.class).verify(endpoints);\n+        // service page metrics\n+        for (Endpoint endpoint : endpoints.getEndpoints()) {\n+            verifyBrowserPagePathMetrics(endpoint);\n+        }\n+        return endpoints;\n+    }\n+\n+    private void verifyBrowserPagePathMetrics(Endpoint endpoint) throws Exception {\n+        for (String metricName : ALL_BROWSER_PAGE_METRICS) {\n+            verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n+        }\n+\n+        for (String metricName : ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS) {\n+            verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n+        }\n+    }\n+\n+    private void generateTraffic() {\n+        trafficController = TrafficController.builder()\n+                                             .sender(this::sendBrowserData)\n+                                             .build()\n+                                             .start();\n+    }\n+\n+    private boolean sendBrowserData() {\n+        try {\n+            BrowserPerfData.Builder perfBuilder = BrowserPerfData.newBuilder()\n+                                                                 .setServiceId(browserId)\n+                                                                 .setServiceVersionId(browserSingleVersionId)\n+                                                                 .setPagePath(\"/e2e-browser\")\n+                                                                 .setRedirectTime(10)\n+                                                                 .setDnsTime(10)\n+                                                                 .setReqTime(10)\n+                                                                 .setDomAnalysisTime(10)\n+                                                                 .setDomReadyTime(10)\n+                                                                 .setBlankTime(10);\n+            sendBrowserPerfData(perfBuilder.build());\n+\n+            for (ErrorCategory category : ErrorCategory.values()) {\n+                if (category == ErrorCategory.UNRECOGNIZED) {\n+                    continue;\n+                }\n+                BrowserErrorLog.Builder errorLogBuilder = BrowserErrorLog.newBuilder()\n+                                                                         .setUniqueId(UUID.randomUUID().toString())\n+                                                                         .setServiceId(browserId)\n+                                                                         .setServiceVersionId(browserSingleVersionId)\n+                                                                         .setPagePath(\"/e2e-browser\")\n+                                                                         .setCategory(category)\n+                                                                         .setMessage(\"test\")\n+                                                                         .setLine(1)\n+                                                                         .setCol(1)\n+                                                                         .setStack(\"e2e\")\n+                                                                         .setErrorUrl(\"/e2e/browser\");\n+                if (category == ErrorCategory.js) {\n+                    errorLogBuilder.setFirstReportedError(true);\n+                }\n+                sendBrowserErrorLog(errorLogBuilder.build());\n+            }\n+            return true;\n+        } catch (Throwable e) {\n+            LOGGER.warn(e.getMessage(), e);\n+            return false;\n+        }\n+    }\n+\n+    private void sendBrowserPerfData(BrowserPerfData browserPerfData) throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        browserPerfServiceStub.collectPerfData(browserPerfData, new StreamObserver<Commands>() {\n+            @Override\n+            public void onNext(Commands commands) {\n+\n+            }\n+\n+            @Override\n+            public void onError(Throwable throwable) {\n+                throwable.printStackTrace();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCompleted() {\n+                latch.countDown();\n+            }\n+        });\n+        latch.await();\n+    }\n+\n+    private void sendBrowserErrorLog(BrowserErrorLog browserErrorLog) throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        StreamObserver<BrowserErrorLog> collectStream = browserPerfServiceStub.collectErrorLogs(\n+            new StreamObserver<Commands>() {\n+                @Override\n+                public void onNext(Commands commands) {\n+\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    throwable.printStackTrace();\n+                    latch.countDown();\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    latch.countDown();\n+                }\n+            });\n+        collectStream.onNext(browserErrorLog);\n+        collectStream.onCompleted();\n+        latch.await();\n+    }\n+\n+    private void register() {\n+        int retryIndex = 0;\n+        while (browserId == 0 || browserSingleVersionId == 0) {\n+            try {\n+                if (browserId == 0) {\n+                    browserId = registerBrowser();\n+                }\n+                if (browserId > 0) {\n+                    browserSingleVersionId = registerBrowserSingleVersion(browserId);\n+                }\n+                if (browserId > 0 && browserSingleVersionId > 0) {\n+                    break;\n+                }\n+            } catch (Throwable e) {\n+                if (++retryIndex % 5 == 0) {\n+                    LOGGER.error(e.getMessage(), e);\n+                }\n+            }\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1Mzg5Mw==", "bodyText": "Thanks @kezhenxu94.  I've changed the code based on the comments :)", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395953893", "createdAt": "2020-03-21T02:40:01Z", "author": {"login": "arugal"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.e2e.browser;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.internal.DnsNameResolverProvider;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.common.KeyIntValuePair;\n+import org.apache.skywalking.apm.network.common.ServiceType;\n+import org.apache.skywalking.apm.network.language.agent.BrowserErrorLog;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfServiceGrpc;\n+import org.apache.skywalking.apm.network.language.agent.ErrorCategory;\n+import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstance;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstanceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstances;\n+import org.apache.skywalking.apm.network.register.v2.ServiceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.Services;\n+import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n+import org.apache.skywalking.e2e.annotation.DockerCompose;\n+import org.apache.skywalking.e2e.annotation.DockerContainer;\n+import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n+import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n+import org.apache.skywalking.e2e.base.TrafficController;\n+import org.apache.skywalking.e2e.common.HostAndPort;\n+import org.apache.skywalking.e2e.retryable.RetryableTest;\n+import org.apache.skywalking.e2e.service.Service;\n+import org.apache.skywalking.e2e.service.ServicesMatcher;\n+import org.apache.skywalking.e2e.service.ServicesQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n+import org.apache.skywalking.e2e.service.instance.Instance;\n+import org.apache.skywalking.e2e.service.instance.Instances;\n+import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n+import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.testcontainers.containers.ContainerState;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import static java.util.Objects.nonNull;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_SINGLE_VERSION_METRICS;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyPercentileMetrics;\n+import static org.apache.skywalking.e2e.utils.Times.now;\n+import static org.apache.skywalking.e2e.utils.Yamls.load;\n+\n+@Slf4j\n+@SkyWalkingE2E\n+public class BrowserE2E extends SkyWalkingTestAdapter {\n+\n+    private static final int MAX_INBOUND_MESSAGE_SIZE = 1024 * 1024 * 50;\n+\n+    private static final String BROWSER_NAME = \"e2e\";\n+\n+    private static final String BROWSER_SINGLE_VERSION_NAME = \"v1.0.0\";\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerCompose({\n+        \"docker/browser/docker-compose.${SW_STORAGE}.yml\",\n+    })\n+    protected DockerComposeContainer<?> compose;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"ui\", port = 8080)\n+    private HostAndPort swWebappHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"oap\", port = 11800)\n+    private HostAndPort oapHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerContainer(\"oap\")\n+    private ContainerState oapContainer;\n+\n+    private RegisterGrpc.RegisterBlockingStub registerStub;\n+\n+    private BrowserPerfServiceGrpc.BrowserPerfServiceStub browserPerfServiceStub;\n+\n+    private volatile int browserId;\n+\n+    private volatile int browserSingleVersionId;\n+\n+    @BeforeAll\n+    public void setUp() {\n+        queryClient(swWebappHostPort);\n+\n+        final ManagedChannel channel =\n+            NettyChannelBuilder.forAddress(oapHostPort.host(), oapHostPort.port())\n+                               .nameResolverFactory(new DnsNameResolverProvider())\n+                               .maxInboundMessageSize(MAX_INBOUND_MESSAGE_SIZE)\n+                               .usePlaintext()\n+                               .build();\n+\n+        registerStub = RegisterGrpc.newBlockingStub(channel);\n+        browserPerfServiceStub = BrowserPerfServiceGrpc.newStub(channel);\n+\n+        register();\n+        generateTraffic();\n+    }\n+\n+    @RetryableTest\n+    void verify() throws Exception {\n+        final List<Service> services = graphql.browserServices(new ServicesQuery().start(startTime).end(now()));\n+        LOGGER.info(\"services: {}\", services);\n+\n+        load(\"expected/browser/services.yml\")\n+            .as(ServicesMatcher.class).verify(services);\n+\n+        for (Service service : services) {\n+            LOGGER.info(\"verifying service version: {}\", service);\n+            // service metrics\n+            verifyBrowserMetrics(service);\n+\n+            // service version\n+            verifyBrowserSingleVersion(service);\n+\n+            // service page path\n+            verifyBrowserPagePath(service);\n+        }\n+    }\n+\n+    private void verifyBrowserMetrics(final Service service) throws Exception {\n+        for (String metricName : ALL_BROWSER_METRICS) {\n+            verifyMetrics(graphql, metricName, service.getKey(), startTime);\n+        }\n+    }\n+\n+    private Instances verifyBrowserSingleVersion(final Service service) throws Exception {\n+        Instances instances = graphql.instances(\n+            new InstancesQuery().serviceId(service.getKey()).start(startTime).end(now())\n+        );\n+        LOGGER.info(\"instances: {}\", instances);\n+        load(\"expected/browser/version.yml\").as(InstancesMatcher.class).verify(instances);\n+        // service version metrics\n+        for (Instance instance : instances.getInstances()) {\n+            verifyBrowserSingleVersionMetrics(instance);\n+        }\n+        return instances;\n+    }\n+\n+    private void verifyBrowserSingleVersionMetrics(Instance instance) throws Exception {\n+        for (String metricName : ALL_BROWSER_SINGLE_VERSION_METRICS) {\n+            verifyMetrics(graphql, metricName, instance.getKey(), startTime);\n+        }\n+    }\n+\n+    private Endpoints verifyBrowserPagePath(final Service service) throws Exception {\n+        Endpoints endpoints = graphql.endpoints(new EndpointQuery().serviceId(String.valueOf(service.getKey())));\n+        LOGGER.info(\"endpoints: {}\", endpoints);\n+        load(\"expected/browser/pagePath.yml\").as(EndpointsMatcher.class).verify(endpoints);\n+        // service page metrics\n+        for (Endpoint endpoint : endpoints.getEndpoints()) {\n+            verifyBrowserPagePathMetrics(endpoint);\n+        }\n+        return endpoints;\n+    }\n+\n+    private void verifyBrowserPagePathMetrics(Endpoint endpoint) throws Exception {\n+        for (String metricName : ALL_BROWSER_PAGE_METRICS) {\n+            verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n+        }\n+\n+        for (String metricName : ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS) {\n+            verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n+        }\n+    }\n+\n+    private void generateTraffic() {\n+        trafficController = TrafficController.builder()\n+                                             .sender(this::sendBrowserData)\n+                                             .build()\n+                                             .start();\n+    }\n+\n+    private boolean sendBrowserData() {\n+        try {\n+            BrowserPerfData.Builder perfBuilder = BrowserPerfData.newBuilder()\n+                                                                 .setServiceId(browserId)\n+                                                                 .setServiceVersionId(browserSingleVersionId)\n+                                                                 .setPagePath(\"/e2e-browser\")\n+                                                                 .setRedirectTime(10)\n+                                                                 .setDnsTime(10)\n+                                                                 .setReqTime(10)\n+                                                                 .setDomAnalysisTime(10)\n+                                                                 .setDomReadyTime(10)\n+                                                                 .setBlankTime(10);\n+            sendBrowserPerfData(perfBuilder.build());\n+\n+            for (ErrorCategory category : ErrorCategory.values()) {\n+                if (category == ErrorCategory.UNRECOGNIZED) {\n+                    continue;\n+                }\n+                BrowserErrorLog.Builder errorLogBuilder = BrowserErrorLog.newBuilder()\n+                                                                         .setUniqueId(UUID.randomUUID().toString())\n+                                                                         .setServiceId(browserId)\n+                                                                         .setServiceVersionId(browserSingleVersionId)\n+                                                                         .setPagePath(\"/e2e-browser\")\n+                                                                         .setCategory(category)\n+                                                                         .setMessage(\"test\")\n+                                                                         .setLine(1)\n+                                                                         .setCol(1)\n+                                                                         .setStack(\"e2e\")\n+                                                                         .setErrorUrl(\"/e2e/browser\");\n+                if (category == ErrorCategory.js) {\n+                    errorLogBuilder.setFirstReportedError(true);\n+                }\n+                sendBrowserErrorLog(errorLogBuilder.build());\n+            }\n+            return true;\n+        } catch (Throwable e) {\n+            LOGGER.warn(e.getMessage(), e);\n+            return false;\n+        }\n+    }\n+\n+    private void sendBrowserPerfData(BrowserPerfData browserPerfData) throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        browserPerfServiceStub.collectPerfData(browserPerfData, new StreamObserver<Commands>() {\n+            @Override\n+            public void onNext(Commands commands) {\n+\n+            }\n+\n+            @Override\n+            public void onError(Throwable throwable) {\n+                throwable.printStackTrace();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCompleted() {\n+                latch.countDown();\n+            }\n+        });\n+        latch.await();\n+    }\n+\n+    private void sendBrowserErrorLog(BrowserErrorLog browserErrorLog) throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        StreamObserver<BrowserErrorLog> collectStream = browserPerfServiceStub.collectErrorLogs(\n+            new StreamObserver<Commands>() {\n+                @Override\n+                public void onNext(Commands commands) {\n+\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    throwable.printStackTrace();\n+                    latch.countDown();\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    latch.countDown();\n+                }\n+            });\n+        collectStream.onNext(browserErrorLog);\n+        collectStream.onCompleted();\n+        latch.await();\n+    }\n+\n+    private void register() {\n+        int retryIndex = 0;\n+        while (browserId == 0 || browserSingleVersionId == 0) {\n+            try {\n+                if (browserId == 0) {\n+                    browserId = registerBrowser();\n+                }\n+                if (browserId > 0) {\n+                    browserSingleVersionId = registerBrowserSingleVersion(browserId);\n+                }\n+                if (browserId > 0 && browserSingleVersionId > 0) {\n+                    break;\n+                }\n+            } catch (Throwable e) {\n+                if (++retryIndex % 5 == 0) {\n+                    LOGGER.error(e.getMessage(), e);\n+                }\n+            }\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2MjcwMQ=="}, "originalCommit": null, "originalPosition": 317}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjQ1NjkxOnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxNToxMVrOF5VcIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxNToxMVrOF5VcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NDQxOA==", "bodyText": "rename this, because the test framework will automatically convert the method name camelCaseMethodName to verify camel case method name", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395664418", "createdAt": "2020-03-20T14:15:11Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.e2e.browser;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.internal.DnsNameResolverProvider;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.common.KeyIntValuePair;\n+import org.apache.skywalking.apm.network.common.ServiceType;\n+import org.apache.skywalking.apm.network.language.agent.BrowserErrorLog;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfServiceGrpc;\n+import org.apache.skywalking.apm.network.language.agent.ErrorCategory;\n+import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstance;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstanceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstances;\n+import org.apache.skywalking.apm.network.register.v2.ServiceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.Services;\n+import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n+import org.apache.skywalking.e2e.annotation.DockerCompose;\n+import org.apache.skywalking.e2e.annotation.DockerContainer;\n+import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n+import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n+import org.apache.skywalking.e2e.base.TrafficController;\n+import org.apache.skywalking.e2e.common.HostAndPort;\n+import org.apache.skywalking.e2e.retryable.RetryableTest;\n+import org.apache.skywalking.e2e.service.Service;\n+import org.apache.skywalking.e2e.service.ServicesMatcher;\n+import org.apache.skywalking.e2e.service.ServicesQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n+import org.apache.skywalking.e2e.service.instance.Instance;\n+import org.apache.skywalking.e2e.service.instance.Instances;\n+import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n+import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.testcontainers.containers.ContainerState;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import static java.util.Objects.nonNull;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_SINGLE_VERSION_METRICS;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyPercentileMetrics;\n+import static org.apache.skywalking.e2e.utils.Times.now;\n+import static org.apache.skywalking.e2e.utils.Yamls.load;\n+\n+@Slf4j\n+@SkyWalkingE2E\n+public class BrowserE2E extends SkyWalkingTestAdapter {\n+\n+    private static final int MAX_INBOUND_MESSAGE_SIZE = 1024 * 1024 * 50;\n+\n+    private static final String BROWSER_NAME = \"e2e\";\n+\n+    private static final String BROWSER_SINGLE_VERSION_NAME = \"v1.0.0\";\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerCompose({\n+        \"docker/browser/docker-compose.${SW_STORAGE}.yml\",\n+    })\n+    protected DockerComposeContainer<?> compose;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"ui\", port = 8080)\n+    private HostAndPort swWebappHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"oap\", port = 11800)\n+    private HostAndPort oapHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerContainer(\"oap\")\n+    private ContainerState oapContainer;\n+\n+    private RegisterGrpc.RegisterBlockingStub registerStub;\n+\n+    private BrowserPerfServiceGrpc.BrowserPerfServiceStub browserPerfServiceStub;\n+\n+    private volatile int browserId;\n+\n+    private volatile int browserSingleVersionId;\n+\n+    @BeforeAll\n+    public void setUp() {\n+        queryClient(swWebappHostPort);\n+\n+        final ManagedChannel channel =\n+            NettyChannelBuilder.forAddress(oapHostPort.host(), oapHostPort.port())\n+                               .nameResolverFactory(new DnsNameResolverProvider())\n+                               .maxInboundMessageSize(MAX_INBOUND_MESSAGE_SIZE)\n+                               .usePlaintext()\n+                               .build();\n+\n+        registerStub = RegisterGrpc.newBlockingStub(channel);\n+        browserPerfServiceStub = BrowserPerfServiceGrpc.newStub(channel);\n+\n+        register();\n+        generateTraffic();\n+    }\n+\n+    @RetryableTest\n+    void verify() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjQ1OTQ1OnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxNTo1MFrOF5VdxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxNTo1MFrOF5VdxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NDgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    load(\"expected/browser/services.yml\")\n          \n          \n            \n                        .as(ServicesMatcher.class).verify(services);\n          \n          \n            \n                    load(\"expected/browser/services.yml\").as(ServicesMatcher.class).verify(services);", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r395664837", "createdAt": "2020-03-20T14:15:50Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/browser/BrowserE2E.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.e2e.browser;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.internal.DnsNameResolverProvider;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.common.KeyIntValuePair;\n+import org.apache.skywalking.apm.network.common.ServiceType;\n+import org.apache.skywalking.apm.network.language.agent.BrowserErrorLog;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfServiceGrpc;\n+import org.apache.skywalking.apm.network.language.agent.ErrorCategory;\n+import org.apache.skywalking.apm.network.register.v2.RegisterGrpc;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstance;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstanceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.ServiceInstances;\n+import org.apache.skywalking.apm.network.register.v2.ServiceRegisterMapping;\n+import org.apache.skywalking.apm.network.register.v2.Services;\n+import org.apache.skywalking.e2e.annotation.ContainerHostAndPort;\n+import org.apache.skywalking.e2e.annotation.DockerCompose;\n+import org.apache.skywalking.e2e.annotation.DockerContainer;\n+import org.apache.skywalking.e2e.base.SkyWalkingE2E;\n+import org.apache.skywalking.e2e.base.SkyWalkingTestAdapter;\n+import org.apache.skywalking.e2e.base.TrafficController;\n+import org.apache.skywalking.e2e.common.HostAndPort;\n+import org.apache.skywalking.e2e.retryable.RetryableTest;\n+import org.apache.skywalking.e2e.service.Service;\n+import org.apache.skywalking.e2e.service.ServicesMatcher;\n+import org.apache.skywalking.e2e.service.ServicesQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoint;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointQuery;\n+import org.apache.skywalking.e2e.service.endpoint.Endpoints;\n+import org.apache.skywalking.e2e.service.endpoint.EndpointsMatcher;\n+import org.apache.skywalking.e2e.service.instance.Instance;\n+import org.apache.skywalking.e2e.service.instance.Instances;\n+import org.apache.skywalking.e2e.service.instance.InstancesMatcher;\n+import org.apache.skywalking.e2e.service.instance.InstancesQuery;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.testcontainers.containers.ContainerState;\n+import org.testcontainers.containers.DockerComposeContainer;\n+\n+import static java.util.Objects.nonNull;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_PAGE_MULTIPLE_LINEAR_METRICS;\n+import static org.apache.skywalking.e2e.metrics.BrowserMetricsQuery.ALL_BROWSER_SINGLE_VERSION_METRICS;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyMetrics;\n+import static org.apache.skywalking.e2e.metrics.MetricsMatcher.verifyPercentileMetrics;\n+import static org.apache.skywalking.e2e.utils.Times.now;\n+import static org.apache.skywalking.e2e.utils.Yamls.load;\n+\n+@Slf4j\n+@SkyWalkingE2E\n+public class BrowserE2E extends SkyWalkingTestAdapter {\n+\n+    private static final int MAX_INBOUND_MESSAGE_SIZE = 1024 * 1024 * 50;\n+\n+    private static final String BROWSER_NAME = \"e2e\";\n+\n+    private static final String BROWSER_SINGLE_VERSION_NAME = \"v1.0.0\";\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerCompose({\n+        \"docker/browser/docker-compose.${SW_STORAGE}.yml\",\n+    })\n+    protected DockerComposeContainer<?> compose;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"ui\", port = 8080)\n+    private HostAndPort swWebappHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @ContainerHostAndPort(name = \"oap\", port = 11800)\n+    private HostAndPort oapHostPort;\n+\n+    @SuppressWarnings(\"unused\")\n+    @DockerContainer(\"oap\")\n+    private ContainerState oapContainer;\n+\n+    private RegisterGrpc.RegisterBlockingStub registerStub;\n+\n+    private BrowserPerfServiceGrpc.BrowserPerfServiceStub browserPerfServiceStub;\n+\n+    private volatile int browserId;\n+\n+    private volatile int browserSingleVersionId;\n+\n+    @BeforeAll\n+    public void setUp() {\n+        queryClient(swWebappHostPort);\n+\n+        final ManagedChannel channel =\n+            NettyChannelBuilder.forAddress(oapHostPort.host(), oapHostPort.port())\n+                               .nameResolverFactory(new DnsNameResolverProvider())\n+                               .maxInboundMessageSize(MAX_INBOUND_MESSAGE_SIZE)\n+                               .usePlaintext()\n+                               .build();\n+\n+        registerStub = RegisterGrpc.newBlockingStub(channel);\n+        browserPerfServiceStub = BrowserPerfServiceGrpc.newStub(channel);\n+\n+        register();\n+        generateTraffic();\n+    }\n+\n+    @RetryableTest\n+    void verify() throws Exception {\n+        final List<Service> services = graphql.browserServices(new ServicesQuery().start(startTime).end(now()));\n+        LOGGER.info(\"services: {}\", services);\n+\n+        load(\"expected/browser/services.yml\")\n+            .as(ServicesMatcher.class).verify(services);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTg0MzIyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToyMDo0OVrOHC-yKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToyMDo0OVrOHC-yKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4Nzg0OQ==", "bodyText": "Forget to change.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472887849", "createdAt": "2020-08-19T09:20:49Z", "author": {"login": "wu-sheng"}, "path": "README.md", "diffHunk": "@@ -28,7 +28,7 @@ The core features are following.\n - Distributed tracing and context propagation\n - Database access metrics. Detect slow database access statements(including SQL statements).\n - Alarm\n-\n+- [WIP] Browser performance monitoring", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTg1NTEwOnYy", "diffSide": "RIGHT", "path": "docs/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToyMzozNFrOHC-5EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToyMzozNFrOHC-5EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4OTYxNg==", "bodyText": "I think this should be linked as a Browser agent, not here.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472889616", "createdAt": "2020-08-19T09:23:34Z", "author": {"login": "wu-sheng"}, "path": "docs/README.md", "diffHunk": "@@ -91,6 +91,7 @@ If you are already familiar with SkyWalking, you could use this catalog to find\n       * [Uninstrumented Gateways](en/setup/backend/uninstrumented-gateways.md). Configure gateways/proxies that are not supported by SkyWalking agent plugins, to reflect the delegation in topology graph.\n     * [UI setup document](en/setup/backend/ui-setup.md).\n     * [CLI setup document](https://github.com/apache/skywalking-cli).\n+    * [Browser performance monitoring setup document](https://github.com/apache/skywalking-client-js).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTg2MjI0OnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/oal.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOToyNToxMFrOHC-9Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxOTozM1rOHDJp3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5MDY5MQ==", "bodyText": "percent is for this. I don't think we need this.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472890691", "createdAt": "2020-08-19T09:25:10Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/oal.md", "diffHunk": "@@ -78,10 +78,15 @@ The parameter (2) is the status of this request. The status(success/failure) eff\n **percentile** is the first multiple value metrics, introduced since 7.0.0. As having multiple values, it could be query through `getMultipleLinearIntValues` GraphQL query.\n In this case, `p99`, `p95`, `p90`, `p75`, `p50` of all incoming request. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n Before 7.0.0, use `p99`, `p95`, `p90`, `p75`, `p50` func(s) to calculate metrics separately. Still supported in 7.x, but don't be recommended, and don't be included in official OAL script. \n-> All_p99 = from(All.latency).p99(10);\n+> all_p99 = from(All.latency).p99(10);\n \n In this case, p99 value of all incoming requests. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n \n+- `errorRate`. The error rate of browser traffic (only browser).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5MTM5Mw==", "bodyText": "If the percent is not suitable, then you should consider whether the scope design is correct.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472891393", "createdAt": "2020-08-19T09:26:12Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/oal.md", "diffHunk": "@@ -78,10 +78,15 @@ The parameter (2) is the status of this request. The status(success/failure) eff\n **percentile** is the first multiple value metrics, introduced since 7.0.0. As having multiple values, it could be query through `getMultipleLinearIntValues` GraphQL query.\n In this case, `p99`, `p95`, `p90`, `p75`, `p50` of all incoming request. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n Before 7.0.0, use `p99`, `p95`, `p90`, `p75`, `p50` func(s) to calculate metrics separately. Still supported in 7.x, but don't be recommended, and don't be included in official OAL script. \n-> All_p99 = from(All.latency).p99(10);\n+> all_p99 = from(All.latency).p99(10);\n \n In this case, p99 value of all incoming requests. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n \n+- `errorRate`. The error rate of browser traffic (only browser).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5MDY5MQ=="}, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTQ5MQ==", "bodyText": "And, I can't find this in the real OAL script. please recheck.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472895491", "createdAt": "2020-08-19T09:32:29Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/oal.md", "diffHunk": "@@ -78,10 +78,15 @@ The parameter (2) is the status of this request. The status(success/failure) eff\n **percentile** is the first multiple value metrics, introduced since 7.0.0. As having multiple values, it could be query through `getMultipleLinearIntValues` GraphQL query.\n In this case, `p99`, `p95`, `p90`, `p75`, `p50` of all incoming request. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n Before 7.0.0, use `p99`, `p95`, `p90`, `p75`, `p50` func(s) to calculate metrics separately. Still supported in 7.x, but don't be recommended, and don't be included in official OAL script. \n-> All_p99 = from(All.latency).p99(10);\n+> all_p99 = from(All.latency).p99(10);\n \n In this case, p99 value of all incoming requests. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n \n+- `errorRate`. The error rate of browser traffic (only browser).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5MDY5MQ=="}, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NTk0OA==", "bodyText": "A new richPercent function is provided.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r473065948", "createdAt": "2020-08-19T14:19:33Z", "author": {"login": "arugal"}, "path": "docs/en/concepts-and-designs/oal.md", "diffHunk": "@@ -78,10 +78,15 @@ The parameter (2) is the status of this request. The status(success/failure) eff\n **percentile** is the first multiple value metrics, introduced since 7.0.0. As having multiple values, it could be query through `getMultipleLinearIntValues` GraphQL query.\n In this case, `p99`, `p95`, `p90`, `p75`, `p50` of all incoming request. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n Before 7.0.0, use `p99`, `p95`, `p90`, `p75`, `p50` func(s) to calculate metrics separately. Still supported in 7.x, but don't be recommended, and don't be included in official OAL script. \n-> All_p99 = from(All.latency).p99(10);\n+> all_p99 = from(All.latency).p99(10);\n \n In this case, p99 value of all incoming requests. The parameter is the precision of p99 latency calculation, such as in above case, 120ms and 124 are considered same.\n \n+- `errorRate`. The error rate of browser traffic (only browser).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5MDY5MQ=="}, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTkyMTI5OnYy", "diffSide": "RIGHT", "path": "docs/en/protocols/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTozOTozNFrOHC_gZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTozOTozNFrOHC_gZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5OTY4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The probe in [skywalking-client-js](https://github.com/apache/skywalking-client-js) cloud use this protocol to send to backendEnd. This service provided by gRPC.\n          \n          \n            \n            The browser probe, such as  [skywalking-client-js](https://github.com/apache/skywalking-client-js) could use this protocol to send to backend. This service provided by gRPC.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472899684", "createdAt": "2020-08-19T09:39:34Z", "author": {"login": "wu-sheng"}, "path": "docs/en/protocols/README.md", "diffHunk": "@@ -29,6 +29,12 @@ SkyWalking javaagent begins to support this since 8.0.0.\n \n [SkyWalking Trace Data Protocol v3](Trace-Data-Protocol-v3.md) defines the communication way and format between agent and backend.\n \n+### Browser probe protocol\n+\n+The probe in [skywalking-client-js](https://github.com/apache/skywalking-client-js) cloud use this protocol to send to backendEnd. This service provided by gRPC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTk0MTE5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/oal/browser.oal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTo0NToxN1rOHC_tAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMTo1N1rOHFm4qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwMjkxMw==", "bodyText": "Do we really need so many metrics? Please recheck @arugal @Fine0830. From the UI prototype, it doesn't need so much. Please analysis the metrics used by UI.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r472902913", "createdAt": "2020-08-19T09:45:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/oal/browser.oal", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+// browser app", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0MjAyNQ==", "bodyText": "@wu-sheng @Fine0830  Some percentile associated metrics have been reduced, please review.", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r475642025", "createdAt": "2020-08-24T14:11:57Z", "author": {"login": "arugal"}, "path": "oap-server/server-bootstrap/src/main/resources/oal/browser.oal", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*\n+*/\n+// browser app", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwMjkxMw=="}, "originalCommit": {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTYzNTU1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTo0OTo1NVrOHD4RYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjowMTozOVrOHEcodA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTczMA==", "bodyText": "This should be rate, numerator and denominator", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r473829730", "createdAt": "2020-08-20T09:49:55Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Expression;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.query.sql.Function;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+@MetricsFunction(functionName = \"richPercent\")\n+public abstract class RichPercentMetrics extends Metrics implements IntValueHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a4c5e44ca8cad78c6a2888867c52dc8034e95f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNTQ2MA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r474425460", "createdAt": "2020-08-21T06:01:39Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Expression;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.query.sql.Function;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+@MetricsFunction(functionName = \"richPercent\")\n+public abstract class RichPercentMetrics extends Metrics implements IntValueHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTczMA=="}, "originalCommit": {"oid": "89a4c5e44ca8cad78c6a2888867c52dc8034e95f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODAxNDY4OnYy", "diffSide": "RIGHT", "path": "docs/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjozOTowNlrOHH03Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjozOTowNlrOHH03Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk2ODE1MA==", "bodyText": "@arugal I fixed this doc. The browser agent has nothing related to distributed tracing.\n@kezhenxu94 @ascrutae I hope either/both of you could check, whether your nodejs agents could work in the browser?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r477968150", "createdAt": "2020-08-27T02:39:06Z", "author": {"login": "wu-sheng"}, "path": "docs/README.md", "diffHunk": "@@ -66,6 +66,8 @@ If you are already familiar with SkyWalking, you could use this catalog to find\n       * [Plugin development guide](en/setup/service-agent/java-agent/README.md#plugin-development-guide).\n       * [Agent plugin tests and performance tests](en/setup/service-agent/java-agent/README.md#test).\n     * [Other language agents](en/setup/README.md#language-agents-in-service) includes Nginx LUA, Python, .NetCore, PHP, NodeJS, Go.\n+    * Browser performance monitoring\n+      * Track the performance of the browser, such as latency of redirect, dns, ttfb. For more information, [click here](https://github.com/apache/skywalking-client-js).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODA2NTMzOnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/oal.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMjo0NTozMVrOHH1aHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMzowOTozOVrOHH3aUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3NzExOA==", "bodyText": "I think you missed Filter about the in", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r477977118", "createdAt": "2020-08-27T02:45:31Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/oal.md", "diffHunk": "@@ -53,6 +53,12 @@ In this case, input are request of each ServiceInstanceJVMCPU scope, avg is base\n > endpoint_percent = from(Endpoint.*).percent(status == true);\n \n In this case, all input are requests of each endpoint, condition is `endpoint.status == true`.\n+- `rate`. The rate expressed as a fraction of 100, for the condition matched input.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAwOTkzNw==", "bodyText": "It has been merged into the master branch https://github.com/apache/skywalking/blob/master/docs/en/concepts-and-designs/oal.md#filter", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r478009937", "createdAt": "2020-08-27T03:09:39Z", "author": {"login": "arugal"}, "path": "docs/en/concepts-and-designs/oal.md", "diffHunk": "@@ -53,6 +53,12 @@ In this case, input are request of each ServiceInstanceJVMCPU scope, avg is base\n > endpoint_percent = from(Endpoint.*).percent(status == true);\n \n In this case, all input are requests of each endpoint, condition is `endpoint.status == true`.\n+- `rate`. The rate expressed as a fraction of 100, for the condition matched input.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzk3NzExOA=="}, "originalCommit": {"oid": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTg4NTgyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNzoyNFrOHIIBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyNzoyNFrOHIIBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MjA1NA==", "bodyText": "Why many classes have this empty line?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r478282054", "createdAt": "2020-08-27T09:27:24Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+public class BrowserErrorLog {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTg5MDI3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyODozOFrOHIIEDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOToyODozOFrOHIIEDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4Mjc2Ng==", "bodyText": "Same here. Could you recheck the codes and local format?", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r478282766", "createdAt": "2020-08-27T09:28:38Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.query.graphql.resolver;\n+\n+import com.coxautodev.graphql.tools.GraphQLQueryResolver;\n+import java.io.IOException;\n+import java.util.Optional;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.query.BrowserLogQueryService;\n+import org.apache.skywalking.oap.server.core.query.input.BrowserErrorLogQueryCondition;\n+import org.apache.skywalking.oap.server.core.query.type.BrowserErrorLogs;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+\n+import static java.util.Objects.nonNull;\n+\n+@RequiredArgsConstructor\n+public class BrowserLogQuery implements GraphQLQueryResolver {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4522, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}