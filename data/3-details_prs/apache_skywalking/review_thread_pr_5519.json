{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDI4NDMy", "number": 5519, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1MToyM1rOElKIPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1OToyNlrOElKK3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzk4NzE5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1MToyM1rOHUfyHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMjozOTo0OFrOHUgDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDMwMQ==", "bodyText": "Why need to change this?", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254301", "createdAt": "2020-09-19T01:51:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java", "diffHunk": "@@ -57,7 +57,7 @@ public boolean isMatch(TypeDescription typeDescription) {\n         return matchClassNames.contains(typeDescription.getTypeName());\n     }\n \n-    public static ClassMatch byMultiClassMatch(String... classNames) {\n+    public static IndirectMatch byMultiClassMatch(String... classNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1ODY0NQ==", "bodyText": "Change to use it here\nLogicalMatchOperation#not only accept subtype IndirectMatch.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491258645", "createdAt": "2020-09-19T02:39:48Z", "author": {"login": "hailin0"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java", "diffHunk": "@@ -57,7 +57,7 @@ public boolean isMatch(TypeDescription typeDescription) {\n         return matchClassNames.contains(typeDescription.getTypeName());\n     }\n \n-    public static ClassMatch byMultiClassMatch(String... classNames) {\n+    public static IndirectMatch byMultiClassMatch(String... classNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDMwMQ=="}, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzk4ODYzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1MjoyNVrOHUfy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1MjoyNVrOHUfy-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDUyMg==", "bodyText": "Why put maven URL here?", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254522", "createdAt": "2020-09-19T01:52:25Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-sdk-plugin</artifactId>\n+        <groupId>org.apache.skywalking</groupId>\n+        <version>8.2.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-xxl-job-2.x-plugin</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>xxl-job-2.x-plugin</name>\n+    <url>http://maven.apache.org</url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzk5MDA2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/ScriptJobHandlerMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1NDo0M1rOHUfzrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1NTo0OFrOHUf0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDcwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ContextManager.activeSpan().errorOccurred().log(t);\n          \n          \n            \n                    ContextManager.activeSpan().log(t);\n          \n      \n    \n    \n  \n\nSince #5426, errorOccurred() should be called when and only when the logic error, like response code 500.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254702", "createdAt": "2020-09-19T01:54:43Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/ScriptJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.ScriptJobHandler#execute(String)}.\n+ * record the xxl-job script job local span.\n+ */\n+public class ScriptJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobTypeAndId = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/ScriptJob/\" + jobTypeAndId;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDgzNw==", "bodyText": "Normally, #log has included the errorOccurred.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254837", "createdAt": "2020-09-19T01:55:48Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/ScriptJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.ScriptJobHandler#execute(String)}.\n+ * record the xxl-job script job local span.\n+ */\n+public class ScriptJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobTypeAndId = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/ScriptJob/\" + jobTypeAndId;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDcwMg=="}, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzk5MDMzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/SimpleJobHandlerMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1NDo1N1rOHUfzzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1NDo1N1rOHUfzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDczMw==", "bodyText": "Same here about errorOccurred.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254733", "createdAt": "2020-09-19T01:54:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/SimpleJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept execute(String) method on implement class of {@link com.xxl.job.core.handler.IJobHandler}.\n+ * record the xxl-job simple job local span.\n+ */\n+public class SimpleJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/SimpleJob/\" + method.getDeclaringClass().getName();\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzk5MDg4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1NToxN1rOHUf0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1NToxN1rOHUf0CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDc5Mg==", "bodyText": "Same errorOccurred here.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254792", "createdAt": "2020-09-19T01:55:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/MethodJob/\" + methodName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzk5MzkwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1OToyNlrOHUf1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMjo1NTozN1rOHUgJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng==", "bodyText": "Is there any rule, such as length limitation, for this parameter?", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491255156", "createdAt": "2020-09-19T01:59:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1OTE2Mw==", "bodyText": "xxl-job defines the type as varchar(512)", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491259163", "createdAt": "2020-09-19T02:44:08Z", "author": {"login": "hailin0"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng=="}, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI2MDI3NA==", "bodyText": "Good, then, it is safe for our memory cost.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491260274", "createdAt": "2020-09-19T02:55:37Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng=="}, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4820, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}