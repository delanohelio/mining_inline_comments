{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Njc2MjAz", "number": 4858, "title": "support class cache for ByteBuddy", "bodyText": "Please answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\nwhen use skywalking agent ,arthas is can\u2018t work well\n#4820\n[Question] How to advice a class that have been intercepted by another javaagent but not loaded\nraphw/byte-buddy#829\n\n\n\nBug fix\n\n\nBug description.\n\n\nHow to fix?\n\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.\nByteBuddy generates auxiliary classes with different random names every time. When other javaagent executes retransform, it will trigger the SkyWalking agent to enhance the class again. The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, and the retransform fails.\nSupport class cache for ByteBuddy, solve the problem of other javaagent retransform classes enhanced by SkyWalking.\nhttps://github.com/hengyunabc/skywalking-error-demo test pass.", "createdAt": "2020-06-04T08:34:43Z", "url": "https://github.com/apache/skywalking/pull/4858", "merged": true, "mergeCommit": {"oid": "1817386391fa01c436437e098f32447f1209d6f4"}, "closed": true, "closedAt": "2020-07-01T15:20:52Z", "author": {"login": "kylixs"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn5lFAgH2gAyNDI3Njc2MjAzOmUyNWI0ZjlmNzNjNzFmZWU4YmMyNzhkYzBiYTVkZjBkYjVkODk5NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwoO9DgH2gAyNDI3Njc2MjAzOmI5ZDMyMDNhZDhjNzJjOWFkNTIyNWIzOWFkN2IxZGZkZDZkMDJmYzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/e25b4f9f73c71fee8bc278dc0ba5df0db5d89976", "committedDate": "2020-06-04T08:14:13Z", "message": "fix #4820, support class cache for ByteBuddy, solve the problem of other javaagent retransform classes enhanced by SkyWalking."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjI2NzY2", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-424226766", "createdAt": "2020-06-04T08:41:13Z", "commit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjU2ODQy", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-424256842", "createdAt": "2020-06-04T09:19:06Z", "commit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxOTowNlrOGe9IfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToxOTowNlrOGe9IfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMjA2MQ==", "bodyText": "Copying from JDK requires you to explain which JDK, what is original license.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435112061", "createdAt": "2020-06-04T09:19:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/util/IOUtils.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.util;\n+\n+/**\n+ * Copied from {@link org.apache.commons.io.IOUtils}\n+ */\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+public class IOUtils {\n+\n+    private static final int EOF = -1;\n+\n+    /**\n+     * The default buffer size ({@value}) to use for\n+     * {@link #copyLarge(InputStream, OutputStream)}\n+     */\n+    private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;\n+\n+    /**\n+     * Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.\n+     * <p>\n+     * This method buffers the input internally, so there is no need to use a\n+     * <code>BufferedInputStream</code>.\n+     *\n+     * @param input  the <code>InputStream</code> to read from\n+     * @return the requested byte array\n+     * @throws NullPointerException if the input is null\n+     * @throws IOException if an I/O error occurs\n+     */\n+    public static byte[] toByteArray(InputStream input) throws IOException {\n+        ByteArrayOutputStream output = new ByteArrayOutputStream();\n+        copy(input, output);\n+        return output.toByteArray();\n+    }\n+\n+\n+    /**\n+     * Copy bytes from an <code>InputStream</code> to an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjU4MTc5", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-424258179", "createdAt": "2020-06-04T09:20:52Z", "commit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToyMDo1MlrOGe9Mkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToyMDo1MlrOGe9Mkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExMzEwNw==", "bodyText": "Why need caching, and when should use. Those should be explained clearly in the document. People would quite confused about what is this config for.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435113107", "createdAt": "2020-06-04T09:20:52Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -78,6 +78,8 @@ property key | Description | Default |\n `agent.span_limit_per_segment`|The max number of spans in a single segment. Through this config item, SkyWalking keep your application memory cost estimated.|300 |\n `agent.ignore_suffix`|If the operation name of the first span is included in this set, this segment should be ignored.|Not set|\n `agent.is_open_debugging_class`|If true, skywalking agent will save all instrumented classes files in `/debugging` folder. SkyWalking team may ask for these files in order to resolve compatible problem.|Not set|\n+`agent.is_cache_enhanced_class`|If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode), allow other javaagent to enhance those classes that enhanced by SkyWalking agent.|Not set|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYwOTky", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-424260992", "createdAt": "2020-06-04T09:24:30Z", "commit": {"oid": "e25b4f9f73c71fee8bc278dc0ba5df0db5d89976"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb0860e7fc6e0f044d464ba1145af70928e4e151", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/bb0860e7fc6e0f044d464ba1145af70928e4e151", "committedDate": "2020-06-04T09:51:39Z", "message": "Class caches isolate by classloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f549188d901e5952a32ca56065ce3f017985fd", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/f1f549188d901e5952a32ca56065ce3f017985fd", "committedDate": "2020-06-04T11:15:57Z", "message": "Add origin license of IOUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b67f1a3aca000f4888604eec3159c047efc84e3d", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/b67f1a3aca000f4888604eec3159c047efc84e3d", "committedDate": "2020-06-04T11:33:49Z", "message": "add usage of config `agent.is_cache_enhanced_class`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzU4MjU1", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-424358255", "createdAt": "2020-06-04T11:43:00Z", "commit": {"oid": "b67f1a3aca000f4888604eec3159c047efc84e3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0MzowMVrOGfB7FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0MzowMVrOGfB7FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MDU0OA==", "bodyText": "This is not necessary, but OK. The key is License in the root folder of SkyWalking. We need to follow the License requirement, which require we add the explicit statement in the end of the license file.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r435190548", "createdAt": "2020-06-04T11:43:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/util/IOUtils.java", "diffHunk": "@@ -18,16 +18,17 @@\n \n package org.apache.skywalking.apm.agent.core.util;\n \n-/**\n- * Copied from {@link org.apache.commons.io.IOUtils}\n- */\n-\n import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n+/**\n+ * Copied from commons-io-2.2 {@link org.apache.commons.io.IOUtils}\n+ * Origin license: http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67f1a3aca000f4888604eec3159c047efc84e3d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c4f03630d6c243c85bbc9daf524bb57cfb0b419", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/7c4f03630d6c243c85bbc9daf524bb57cfb0b419", "committedDate": "2020-06-07T16:22:54Z", "message": "agent class cache feature is disabled by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906dc61c5428638b223fa548b4ca004d51aeaa68", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/906dc61c5428638b223fa548b4ca004d51aeaa68", "committedDate": "2020-06-07T16:24:09Z", "message": "add testcase for agent class cache feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjY4MTU5", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-427668159", "createdAt": "2020-06-10T02:26:23Z", "commit": {"oid": "906dc61c5428638b223fa548b4ca004d51aeaa68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjoyNjoyM1rOGhirWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjoyNjoyM1rOGhirWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyNDM0Ng==", "bodyText": "author should be removed.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r437824346", "createdAt": "2020-06-10T02:26:23Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/retransform-class-scenario/src/main/java/org/apache/skywalking/apm/testcase/retransform_class/RetransformUtil.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.apache.skywalking.apm.testcase.retransform_class;\n+\n+import net.bytebuddy.agent.ByteBuddyAgent;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import test.org.apache.skywalking.apm.testcase.controller.TestController;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+\n+/**\n+ * @author gongdewei 2020/6/7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906dc61c5428638b223fa548b4ca004d51aeaa68"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f13edbc4bb347dcd12397c9ca65cf57a8f4c77", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/60f13edbc4bb347dcd12397c9ca65cf57a8f4c77", "committedDate": "2020-06-11T02:54:04Z", "message": "simplify retransform class testcase detection, remove author info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "106a180946b6c8fa8ea6f93b98366ab35c7b54f5", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/106a180946b6c8fa8ea6f93b98366ab35c7b54f5", "committedDate": "2020-06-11T03:29:01Z", "message": "add license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6a47c35cc7a88f89a058f0491ef2e0b09d46f5", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/cb6a47c35cc7a88f89a058f0491ef2e0b09d46f5", "committedDate": "2020-06-11T07:23:23Z", "message": "delete class cache dir on exit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6998018b519728b83654753c0eace6351f02d9a", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/a6998018b519728b83654753c0eace6351f02d9a", "committedDate": "2020-06-11T09:28:45Z", "message": "add testcase to github workflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7244f9811622c429815e07d14f04687403ace505", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/7244f9811622c429815e07d14f04687403ace505", "committedDate": "2020-06-11T09:40:17Z", "message": "add doc for FileUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "032305635a72f556b26609fa221b861a3d058125", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/032305635a72f556b26609fa221b861a3d058125", "committedDate": "2020-06-13T06:50:59Z", "message": "Merge branch 'master' into agent-class-cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTIwNDg0", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-430120484", "createdAt": "2020-06-13T07:20:39Z", "commit": {"oid": "032305635a72f556b26609fa221b861a3d058125"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNzoyMDozOVrOGjWNZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNzoyNjozM1rOGjWOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzIyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.info(\"SkyWalking agent setup class cache: {}\", Config.Agent.CLASS_CACHE_MODE);\n          \n          \n            \n                            logger.info(\"SkyWalking agent class cache [{}] activated.\", Config.Agent.CLASS_CACHE_MODE);", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717220", "createdAt": "2020-06-13T07:20:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -99,6 +100,15 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n             return;\n         }\n \n+        if (Config.Agent.IS_CACHE_ENHANCED_CLASS) {\n+            try {\n+                agentBuilder = agentBuilder.with(new CacheableTransformerDecorator(Config.Agent.CLASS_CACHE_MODE));\n+                logger.info(\"SkyWalking agent setup class cache: {}\", Config.Agent.CLASS_CACHE_MODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "032305635a72f556b26609fa221b861a3d058125"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzI3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(e, \"SkyWalking agent setup class cache failure.\");\n          \n          \n            \n                            logger.error(e, \"SkyWalking agent can't active class cache.\");", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717270", "createdAt": "2020-06-13T07:21:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent/src/main/java/org/apache/skywalking/apm/agent/SkyWalkingAgent.java", "diffHunk": "@@ -99,6 +100,15 @@ public static void premain(String agentArgs, Instrumentation instrumentation) th\n             return;\n         }\n \n+        if (Config.Agent.IS_CACHE_ENHANCED_CLASS) {\n+            try {\n+                agentBuilder = agentBuilder.with(new CacheableTransformerDecorator(Config.Agent.CLASS_CACHE_MODE));\n+                logger.info(\"SkyWalking agent setup class cache: {}\", Config.Agent.CLASS_CACHE_MODE);\n+            } catch (Exception e) {\n+                logger.error(e, \"SkyWalking agent setup class cache failure.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "032305635a72f556b26609fa221b861a3d058125"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzM1Mg==", "bodyText": "Both these are very advanced config, please keep these two in the documents only. Most users even can't understand what this is about, causing unnecessary confusion. I would like to recommend you adding a FAQ doc, including the error you were facing, and link to the agent set up the document and the config.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717352", "createdAt": "2020-06-13T07:22:49Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -38,6 +38,15 @@ agent.service_name=${SW_AGENT_NAME:Your_ApplicationName}\n # SkyWalking team may ask for these files in order to resolve compatible problem.\n # agent.is_open_debugging_class = ${SW_AGENT_OPEN_DEBUG:true}\n \n+# If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "032305635a72f556b26609fa221b861a3d058125"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU2Mw==", "bodyText": "File cache is a very sensitive and tricky thing, thinking in this way, once 2+ agents are sharing the agent.config, and open this feature, most likely they will share this dir. What will happen if they active file cache?\nIn most cases, file cache is meaning you need a dir lock, and generate the dir automatically.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717563", "createdAt": "2020-06-13T07:26:07Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/CacheableTransformerDecorator.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.agent.builder.ResettableClassFileTransformer;\n+import net.bytebuddy.utility.RandomString;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.util.FileUtils;\n+import org.apache.skywalking.apm.agent.core.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.nio.file.Files;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Wrapper classFileTransformer of ByteBuddy, save the enhanced bytecode to memory cache or file cache,\n+ * and automatically load the previously generated bytecode during the second retransform,\n+ * to solve the problem that ByteBuddy generates auxiliary classes with different random names every time.\n+ * Allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+ */\n+public class CacheableTransformerDecorator implements AgentBuilder.TransformerDecorator {\n+\n+    private static final ILog logger = LogManager.getLogger(CacheableTransformerDecorator.class);\n+\n+    private String cacheDirBase;\n+    private final ClassCacheMode cacheMode;\n+    private ClassCacheResolver cacheResolver;\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode) throws IOException {\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode, String cacheDirBase) throws IOException {\n+        this.cacheDirBase = cacheDirBase;\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    private void initClassCache() throws IOException {\n+        if (this.cacheMode.equals(ClassCacheMode.FILE)) {\n+            File cacheDir;\n+            if (this.cacheDirBase == null) {\n+                cacheDir = Files.createTempDirectory(\"class-cache\").toFile();\n+            } else {\n+                cacheDir = new File(this.cacheDirBase + \"/class-cache-\" + RandomString.make());\n+            }\n+            cacheResolver = new FileCacheResolver(cacheDir);\n+        } else {\n+            cacheResolver = new MemoryCacheResolver();\n+        }\n+    }\n+\n+    @Override\n+    public ResettableClassFileTransformer decorate(ResettableClassFileTransformer classFileTransformer) {\n+        return new ResettableClassFileTransformer.WithDelegation(classFileTransformer) {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+                // load from cache\n+                byte[] classCache = cacheResolver.getClassCache(loader, className);\n+                if (classCache != null) {\n+                    return classCache;\n+                }\n+\n+                //transform class\n+                classfileBuffer = classFileTransformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);\n+\n+                // save to cache\n+                if (classfileBuffer != null) {\n+                    cacheResolver.putClassCache(loader, className, classfileBuffer);\n+                }\n+\n+                return classfileBuffer;\n+            }\n+        };\n+    }\n+\n+    private static String getClassLoaderHash(ClassLoader loader) {\n+        String classloader;\n+        if (loader != null) {\n+            classloader = Integer.toHexString(loader.hashCode());\n+        } else {\n+            //classloader is null for BootstrapClassLoader\n+            classloader = \"00000000\";\n+        }\n+        return classloader;\n+    }\n+\n+    interface ClassCacheResolver {\n+\n+        byte[] getClassCache(ClassLoader loader, String className);\n+\n+        void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer);\n+    }\n+\n+    static class MemoryCacheResolver implements ClassCacheResolver {\n+        // classloaderHashcode@className -> class bytes\n+        private Map<String, byte[]> classCacheMap = new ConcurrentHashMap<String, byte[]>();\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            String cacheKey = getCacheKey(loader, className);\n+            return classCacheMap.get(cacheKey);\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            String cacheKey = getCacheKey(loader, className);\n+            classCacheMap.put(cacheKey, classfileBuffer);\n+        }\n+\n+        private String getCacheKey(ClassLoader loader, String className) {\n+            return getClassLoaderHash(loader) + \"@\" + className;\n+        }\n+    }\n+\n+    static class FileCacheResolver implements ClassCacheResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "032305635a72f556b26609fa221b861a3d058125"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNzU4Mg==", "bodyText": "Deleting file shares the same issue of cache dir confliction.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r439717582", "createdAt": "2020-06-13T07:26:33Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/CacheableTransformerDecorator.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.agent.builder.ResettableClassFileTransformer;\n+import net.bytebuddy.utility.RandomString;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.util.FileUtils;\n+import org.apache.skywalking.apm.agent.core.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.nio.file.Files;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Wrapper classFileTransformer of ByteBuddy, save the enhanced bytecode to memory cache or file cache,\n+ * and automatically load the previously generated bytecode during the second retransform,\n+ * to solve the problem that ByteBuddy generates auxiliary classes with different random names every time.\n+ * Allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+ */\n+public class CacheableTransformerDecorator implements AgentBuilder.TransformerDecorator {\n+\n+    private static final ILog logger = LogManager.getLogger(CacheableTransformerDecorator.class);\n+\n+    private String cacheDirBase;\n+    private final ClassCacheMode cacheMode;\n+    private ClassCacheResolver cacheResolver;\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode) throws IOException {\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode, String cacheDirBase) throws IOException {\n+        this.cacheDirBase = cacheDirBase;\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    private void initClassCache() throws IOException {\n+        if (this.cacheMode.equals(ClassCacheMode.FILE)) {\n+            File cacheDir;\n+            if (this.cacheDirBase == null) {\n+                cacheDir = Files.createTempDirectory(\"class-cache\").toFile();\n+            } else {\n+                cacheDir = new File(this.cacheDirBase + \"/class-cache-\" + RandomString.make());\n+            }\n+            cacheResolver = new FileCacheResolver(cacheDir);\n+        } else {\n+            cacheResolver = new MemoryCacheResolver();\n+        }\n+    }\n+\n+    @Override\n+    public ResettableClassFileTransformer decorate(ResettableClassFileTransformer classFileTransformer) {\n+        return new ResettableClassFileTransformer.WithDelegation(classFileTransformer) {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+                // load from cache\n+                byte[] classCache = cacheResolver.getClassCache(loader, className);\n+                if (classCache != null) {\n+                    return classCache;\n+                }\n+\n+                //transform class\n+                classfileBuffer = classFileTransformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);\n+\n+                // save to cache\n+                if (classfileBuffer != null) {\n+                    cacheResolver.putClassCache(loader, className, classfileBuffer);\n+                }\n+\n+                return classfileBuffer;\n+            }\n+        };\n+    }\n+\n+    private static String getClassLoaderHash(ClassLoader loader) {\n+        String classloader;\n+        if (loader != null) {\n+            classloader = Integer.toHexString(loader.hashCode());\n+        } else {\n+            //classloader is null for BootstrapClassLoader\n+            classloader = \"00000000\";\n+        }\n+        return classloader;\n+    }\n+\n+    interface ClassCacheResolver {\n+\n+        byte[] getClassCache(ClassLoader loader, String className);\n+\n+        void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer);\n+    }\n+\n+    static class MemoryCacheResolver implements ClassCacheResolver {\n+        // classloaderHashcode@className -> class bytes\n+        private Map<String, byte[]> classCacheMap = new ConcurrentHashMap<String, byte[]>();\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            String cacheKey = getCacheKey(loader, className);\n+            return classCacheMap.get(cacheKey);\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            String cacheKey = getCacheKey(loader, className);\n+            classCacheMap.put(cacheKey, classfileBuffer);\n+        }\n+\n+        private String getCacheKey(ClassLoader loader, String className) {\n+            return getClassLoaderHash(loader) + \"@\" + className;\n+        }\n+    }\n+\n+    static class FileCacheResolver implements ClassCacheResolver {\n+\n+        private final File cacheDir;\n+\n+        FileCacheResolver(File cacheDir) {\n+            this.cacheDir = cacheDir;\n+            if (!cacheDir.exists()) {\n+                cacheDir.mkdirs();\n+            }\n+\n+            //clean cache dir on exit\n+            FileUtils.deleteDirectoryOnExit(cacheDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "032305635a72f556b26609fa221b861a3d058125"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3a0dfbb0768ed1564b4c0968366755c57f1217", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/9d3a0dfbb0768ed1564b4c0968366755c57f1217", "committedDate": "2020-06-15T02:35:25Z", "message": "Update log message of class cache\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8645c7cf817bbee67cdea0d85efced749147db37", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/8645c7cf817bbee67cdea0d85efced749147db37", "committedDate": "2020-06-15T02:36:12Z", "message": "Update log message of class cache\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9225cebe6d50714aa003306a58eb5ff1984111", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/ef9225cebe6d50714aa003306a58eb5ff1984111", "committedDate": "2020-06-16T09:39:05Z", "message": "Merge branch 'master' into agent-class-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5301c23453a6e3c8a1d219357b5b51e69e5f121", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/e5301c23453a6e3c8a1d219357b5b51e69e5f121", "committedDate": "2020-06-29T09:20:39Z", "message": "create class cache dir under agent path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a823a017427886301fa83c024388daeaa9dc41a4", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/a823a017427886301fa83c024388daeaa9dc41a4", "committedDate": "2020-06-29T12:24:29Z", "message": "Comment class cache config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f95fe80aa1998e503934794268bc9f02fe6a9f56", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/f95fe80aa1998e503934794268bc9f02fe6a9f56", "committedDate": "2020-06-30T02:29:09Z", "message": "Merge branch 'master' into agent-class-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69115cb4fffc285b24c75588980f33a9d8a018b8", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/69115cb4fffc285b24c75588980f33a9d8a018b8", "committedDate": "2020-06-30T03:47:11Z", "message": "Add class cache faq doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/2326ab7bbc5f5751d189e568ec02015de3a49bab", "committedDate": "2020-06-30T07:14:56Z", "message": "fix javadoc ref error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzYyMTE3", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-439762117", "createdAt": "2020-06-30T07:57:09Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1NzowOVrOGqwX8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1NzowOVrOGqwX8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NTkzNg==", "bodyText": "You are putting all files in one folder, NOTICE potential issue\nFAT32: Maximum number of files per directory: 216 - 1 (65,535)\nNTFS:Maximum number of files: 2^32 - 1 (4,294,967,295)\next2/ext3:Maximum number of files per directory: ~1.3 \u00d7 1020 (performance issues past 10,000)\next4: Maximum number of files per directory: unlimited\nMaterial source, https://stackoverflow.com/questions/466521/how-many-files-can-i-put-in-a-directory", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r447485936", "createdAt": "2020-06-30T07:57:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/CacheableTransformerDecorator.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.agent.builder.ResettableClassFileTransformer;\n+import net.bytebuddy.utility.RandomString;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.util.FileUtils;\n+import org.apache.skywalking.apm.agent.core.util.IOUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Wrapper classFileTransformer of ByteBuddy, save the enhanced bytecode to memory cache or file cache,\n+ * and automatically load the previously generated bytecode during the second retransform,\n+ * to solve the problem that ByteBuddy generates auxiliary classes with different random names every time.\n+ * Allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+ */\n+public class CacheableTransformerDecorator implements AgentBuilder.TransformerDecorator {\n+\n+    private static final ILog logger = LogManager.getLogger(CacheableTransformerDecorator.class);\n+\n+    private final ClassCacheMode cacheMode;\n+    private ClassCacheResolver cacheResolver;\n+\n+    public CacheableTransformerDecorator(ClassCacheMode cacheMode) throws IOException {\n+        this.cacheMode = cacheMode;\n+        initClassCache();\n+    }\n+\n+    private void initClassCache() throws IOException {\n+        if (this.cacheMode.equals(ClassCacheMode.FILE)) {\n+            String cacheDirBase = null;\n+            try {\n+                cacheDirBase = AgentPackagePath.getPath() + \"/class-cache\";\n+            } catch (AgentPackageNotFoundException e) {\n+                throw new IOException(\"Can't find the root path for creating /class-cache folder.\");\n+            }\n+            File cacheDir = new File(cacheDirBase + \"/class-cache-\" + RandomString.make());\n+            if (!cacheDir.exists()) {\n+                cacheDir.mkdirs();\n+            }\n+            if (!cacheDir.exists()) {\n+                throw new IOException(\"Create class cache dir failure\");\n+            }\n+\n+            cacheResolver = new FileCacheResolver(cacheDir);\n+        } else {\n+            cacheResolver = new MemoryCacheResolver();\n+        }\n+    }\n+\n+    @Override\n+    public ResettableClassFileTransformer decorate(ResettableClassFileTransformer classFileTransformer) {\n+        return new ResettableClassFileTransformer.WithDelegation(classFileTransformer) {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n+                // load from cache\n+                byte[] classCache = cacheResolver.getClassCache(loader, className);\n+                if (classCache != null) {\n+                    return classCache;\n+                }\n+\n+                //transform class\n+                classfileBuffer = classFileTransformer.transform(loader, className, classBeingRedefined, protectionDomain, classfileBuffer);\n+\n+                // save to cache\n+                if (classfileBuffer != null) {\n+                    cacheResolver.putClassCache(loader, className, classfileBuffer);\n+                }\n+\n+                return classfileBuffer;\n+            }\n+        };\n+    }\n+\n+    private static String getClassLoaderHash(ClassLoader loader) {\n+        String classloader;\n+        if (loader != null) {\n+            classloader = Integer.toHexString(loader.hashCode());\n+        } else {\n+            //classloader is null for BootstrapClassLoader\n+            classloader = \"00000000\";\n+        }\n+        return classloader;\n+    }\n+\n+    interface ClassCacheResolver {\n+\n+        byte[] getClassCache(ClassLoader loader, String className);\n+\n+        void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer);\n+    }\n+\n+    static class MemoryCacheResolver implements ClassCacheResolver {\n+        // classloaderHashcode@className -> class bytes\n+        private Map<String, byte[]> classCacheMap = new ConcurrentHashMap<String, byte[]>();\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            String cacheKey = getCacheKey(loader, className);\n+            return classCacheMap.get(cacheKey);\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            String cacheKey = getCacheKey(loader, className);\n+            classCacheMap.put(cacheKey, classfileBuffer);\n+        }\n+\n+        private String getCacheKey(ClassLoader loader, String className) {\n+            return getClassLoaderHash(loader) + \"@\" + className;\n+        }\n+    }\n+\n+    static class FileCacheResolver implements ClassCacheResolver {\n+\n+        private final File cacheDir;\n+\n+        FileCacheResolver(File cacheDir) {\n+            this.cacheDir = cacheDir;\n+\n+            //clean cache dir on exit\n+            FileUtils.deleteDirectoryOnExit(cacheDir);\n+        }\n+\n+        @Override\n+        public byte[] getClassCache(ClassLoader loader, String className) {\n+            // load from cache\n+            File cacheFile = getCacheFile(loader, className);\n+            if (cacheFile.exists()) {\n+                FileInputStream fileInputStream = null;\n+                try {\n+                    fileInputStream = new FileInputStream(cacheFile);\n+                    return IOUtils.toByteArray(fileInputStream);\n+                } catch (IOException e) {\n+                    logger.error(\"load class bytes from cache file failure\", e);\n+                } finally {\n+                    IOUtils.closeQuietly(fileInputStream);\n+                }\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public void putClassCache(ClassLoader loader, String className, byte[] classfileBuffer) {\n+            File cacheFile = getCacheFile(loader, className);\n+            FileOutputStream output = null;\n+            try {\n+                output = new FileOutputStream(cacheFile);\n+                IOUtils.copy(new ByteArrayInputStream(classfileBuffer), output);\n+            } catch (IOException e) {\n+                logger.error(\"save class bytes to cache file failure\", e);\n+            } finally {\n+                IOUtils.closeQuietly(output);\n+            }\n+        }\n+\n+        private File getCacheFile(ClassLoader loader, String className) {\n+            String filename = getClassLoaderHash(loader) + \"@\" + className.replace('/', '.') + \".class\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDY5NDY0", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440469464", "createdAt": "2020-07-01T00:21:33Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyMTozM1rOGrSwIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyMTozM1rOGrSwIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0OTE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. when use skywalking agent, arthas can't work well \n          \n          \n            \n            1. When use skywalking agent, some other agent, such as Arthas, can't work well", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448049184", "createdAt": "2020-07-01T00:21:33Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcwNTgz", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440470583", "createdAt": "2020-07-01T00:25:26Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyNToyNlrOGrSz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyNToyNlrOGrSz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MDE3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Custom java agent retransform class fails with Skywalking agent  \n          \n          \n            \n             https://github.com/hengyunabc/skywalking-error-demo\n          \n          \n            \n            2. Java agent retransforming class fails with Skywalking agent, such as in this [demo](https://github.com/hengyunabc/skywalking-error-demo)\n          \n      \n    \n    \n  \n\nAlso, this code, would you like to push them into SkyAPMTest, I could create a repo for you and invite you in. The reason I recommend there is, we host unofficial tests and demo codes there, which need to be linked from the official repo.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448050172", "createdAt": "2020-07-01T00:25:26Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcwNzU3", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440470757", "createdAt": "2020-07-01T00:26:01Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyNjowMVrOGrS0lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyNjowMVrOGrS0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MDMyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n          \n          \n            \n            SkyWalking agent uses ByteBuddy to transform classes when the Java application starts.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448050325", "createdAt": "2020-07-01T00:26:01Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcwODkw", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440470890", "createdAt": "2020-07-01T00:26:30Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyNjozMVrOGrS1JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyNjozMVrOGrS1JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MDQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. \n          \n          \n            \n            When another java agent retransforms the same class, it triggers the SkyWalking agent to enhance the class again.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448050469", "createdAt": "2020-07-01T00:26:31Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n+ByteBuddy generates auxiliary classes with different random names every time. \n+\n+When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcxNDQ3", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440471447", "createdAt": "2020-07-01T00:28:23Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyODoyM1rOGrS3Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyODoyM1rOGrS3Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MDk3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, the jvm verifys class bytecode failed, and the retransform fails.\n          \n          \n            \n            The bytecode regenerated by ByteBuddy is changed, the fields and imported class names are modified, the JVM verifications about class bytecode fail, causing the retransform fails.\n          \n      \n    \n    \n  \n\nI think there is no imports in the byte codes level. All classes are in the full name.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448050971", "createdAt": "2020-07-01T00:28:23Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n+ByteBuddy generates auxiliary classes with different random names every time. \n+\n+When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. \n+The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, the jvm verifys class bytecode failed, and the retransform fails.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcxOTA4", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440471908", "createdAt": "2020-07-01T00:29:54Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyOTo1NFrOGrS4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoyOTo1NFrOGrS4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MTM1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the class cahce feature is enabled, save the class bytecode of the ByteBuddy retransform to memory or a temporary file. \n          \n          \n            \n            If the class cache feature is enabled, save the instrumented class bytecode to memory or a temporary file.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448051357", "createdAt": "2020-07-01T00:29:54Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n+ByteBuddy generates auxiliary classes with different random names every time. \n+\n+When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. \n+The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, the jvm verifys class bytecode failed, and the retransform fails.\n+\n+\n+### Resolve\n+\n+**1.Enable the class cache feature**  \n+\n+Add JVM parameters:  \n+`-Dskywalking.agent.is_cache_enhanced_class=true -Dskywalking.agent.class_cache_mode=MEMORY`    \n+\n+Or uncomment options in `agent.conf`:\n+  \n+```\n+# If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode),\n+# allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+agent.is_cache_enhanced_class = ${SW_AGENT_CACHE_CLASS:false}\n+\n+# The instrumented classes cache mode: MEMORY or FILE\n+# MEMORY: cache class bytes to memory, if instrumented classes is too many or too large, it may take up more memory\n+# FILE: cache class bytes to user temp folder starts with 'class-cache', automatically clean up cached class files when the application exits\n+agent.class_cache_mode = ${SW_AGENT_CLASS_CACHE_MODE:MEMORY}\n+\n+```\n+\n+If the class cahce feature is enabled, save the class bytecode of the ByteBuddy retransform to memory or a temporary file. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcyMDIw", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440472020", "createdAt": "2020-07-01T00:30:18Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozMDoxOVrOGrS5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozMDoxOVrOGrS5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MTQ3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When other java agents retransform the same class, Skywalking agent first attempts to load from the cache.\n          \n          \n            \n            When other java agents retransform the same class, SkyWalking agent first attempts to load from the cache.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448051473", "createdAt": "2020-07-01T00:30:19Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n+ByteBuddy generates auxiliary classes with different random names every time. \n+\n+When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. \n+The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, the jvm verifys class bytecode failed, and the retransform fails.\n+\n+\n+### Resolve\n+\n+**1.Enable the class cache feature**  \n+\n+Add JVM parameters:  \n+`-Dskywalking.agent.is_cache_enhanced_class=true -Dskywalking.agent.class_cache_mode=MEMORY`    \n+\n+Or uncomment options in `agent.conf`:\n+  \n+```\n+# If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode),\n+# allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+agent.is_cache_enhanced_class = ${SW_AGENT_CACHE_CLASS:false}\n+\n+# The instrumented classes cache mode: MEMORY or FILE\n+# MEMORY: cache class bytes to memory, if instrumented classes is too many or too large, it may take up more memory\n+# FILE: cache class bytes to user temp folder starts with 'class-cache', automatically clean up cached class files when the application exits\n+agent.class_cache_mode = ${SW_AGENT_CLASS_CACHE_MODE:MEMORY}\n+\n+```\n+\n+If the class cahce feature is enabled, save the class bytecode of the ByteBuddy retransform to memory or a temporary file. \n+When other java agents retransform the same class, Skywalking agent first attempts to load from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcyNTY1", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440472565", "createdAt": "2020-07-01T00:32:10Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozMjoxMFrOGrS67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozMjoxMFrOGrS67A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MTk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is recommended to put the cache class in memory, but if it takes up more memory, it should be placed in a temporary file. Set the class cache save mode through the following options:  \n          \n          \n            \n            It is recommended to put the cache class in memory, meanwhile if it costs more memory resources. Another option is using the local file system. Set the class cache mode through the following options:", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448051948", "createdAt": "2020-07-01T00:32:10Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n+ByteBuddy generates auxiliary classes with different random names every time. \n+\n+When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. \n+The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, the jvm verifys class bytecode failed, and the retransform fails.\n+\n+\n+### Resolve\n+\n+**1.Enable the class cache feature**  \n+\n+Add JVM parameters:  \n+`-Dskywalking.agent.is_cache_enhanced_class=true -Dskywalking.agent.class_cache_mode=MEMORY`    \n+\n+Or uncomment options in `agent.conf`:\n+  \n+```\n+# If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode),\n+# allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+agent.is_cache_enhanced_class = ${SW_AGENT_CACHE_CLASS:false}\n+\n+# The instrumented classes cache mode: MEMORY or FILE\n+# MEMORY: cache class bytes to memory, if instrumented classes is too many or too large, it may take up more memory\n+# FILE: cache class bytes to user temp folder starts with 'class-cache', automatically clean up cached class files when the application exits\n+agent.class_cache_mode = ${SW_AGENT_CLASS_CACHE_MODE:MEMORY}\n+\n+```\n+\n+If the class cahce feature is enabled, save the class bytecode of the ByteBuddy retransform to memory or a temporary file. \n+When other java agents retransform the same class, Skywalking agent first attempts to load from the cache.\n+\n+If the cached class is found, it will be used directly without regenerating a new random name auxiliary class, \n+which will not affect the processing of the subsequent java agent.\n+\n+**2.Class cache save mode**  \n+It is recommended to put the cache class in memory, but if it takes up more memory, it should be placed in a temporary file. Set the class cache save mode through the following options:  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDcyNjIz", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440472623", "createdAt": "2020-07-01T00:32:21Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozMjoyMVrOGrS7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozMjoyMVrOGrS7Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MjAwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `-Dskywalking.agent.class_cache_mode=FILE` : save cache classes to Skywalking agent path '/class-cache'.  \n          \n          \n            \n            `-Dskywalking.agent.class_cache_mode=FILE` : save cache classes to SkyWalking agent path '/class-cache'.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448052006", "createdAt": "2020-07-01T00:32:21Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,53 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. when use skywalking agent, arthas can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Custom java agent retransform class fails with Skywalking agent  \n+ https://github.com/hengyunabc/skywalking-error-demo\n+ \n+### Reason\n+Skywalking agent uses ByteBuddy to retransform classes when java application starts. \n+ByteBuddy generates auxiliary classes with different random names every time. \n+\n+When other javaagent retransforms the same class, it will trigger the SkyWalking agent to enhance the class again. \n+The bytecode regenerated by ByteBuddy is changed, the fields and imports are modified, the jvm verifys class bytecode failed, and the retransform fails.\n+\n+\n+### Resolve\n+\n+**1.Enable the class cache feature**  \n+\n+Add JVM parameters:  \n+`-Dskywalking.agent.is_cache_enhanced_class=true -Dskywalking.agent.class_cache_mode=MEMORY`    \n+\n+Or uncomment options in `agent.conf`:\n+  \n+```\n+# If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode),\n+# allow other javaagent to enhance those classes that enhanced by SkyWalking agent.\n+agent.is_cache_enhanced_class = ${SW_AGENT_CACHE_CLASS:false}\n+\n+# The instrumented classes cache mode: MEMORY or FILE\n+# MEMORY: cache class bytes to memory, if instrumented classes is too many or too large, it may take up more memory\n+# FILE: cache class bytes to user temp folder starts with 'class-cache', automatically clean up cached class files when the application exits\n+agent.class_cache_mode = ${SW_AGENT_CLASS_CACHE_MODE:MEMORY}\n+\n+```\n+\n+If the class cahce feature is enabled, save the class bytecode of the ByteBuddy retransform to memory or a temporary file. \n+When other java agents retransform the same class, Skywalking agent first attempts to load from the cache.\n+\n+If the cached class is found, it will be used directly without regenerating a new random name auxiliary class, \n+which will not affect the processing of the subsequent java agent.\n+\n+**2.Class cache save mode**  \n+It is recommended to put the cache class in memory, but if it takes up more memory, it should be placed in a temporary file. Set the class cache save mode through the following options:  \n+`-Dskywalking.agent.class_cache_mode=MEMORY` : save cache classes to java memory.    \n+`-Dskywalking.agent.class_cache_mode=FILE` : save cache classes to Skywalking agent path '/class-cache'.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDczNDMz", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440473433", "createdAt": "2020-07-01T00:35:03Z", "commit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNTowM1rOGrS9zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDozNTowM1rOGrS9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1MjY4Ng==", "bodyText": "I think you have a very clear explanation in the FAQ doc, please consider to add a link here. Such as\n..... you need to enable this feature. Read this FAQ for more details.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448052686", "createdAt": "2020-07-01T00:35:03Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -78,6 +78,8 @@ property key | Description | Default |\n `agent.span_limit_per_segment`|The max number of spans in a single segment. Through this config item, SkyWalking keep your application memory cost estimated.|300 |\n `agent.ignore_suffix`|If the operation name of the first span is included in this set, this segment should be ignored.|Not set|\n `agent.is_open_debugging_class`|If true, skywalking agent will save all instrumented classes files in `/debugging` folder. SkyWalking team may ask for these files in order to resolve compatible problem.|Not set|\n+`agent.is_cache_enhanced_class`|If true, SkyWalking agent will cache all instrumented classes files to memory or disk files (decided by class cache mode), allow other javaagent to enhance those classes that enhanced by SkyWalking agent. To use some Java diagnostic tools (such as BTrace, Arthas) to diagnose applications or add a custom javaagent to enhance classes, you need to enable this feature.|`false`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2326ab7bbc5f5751d189e568ec02015de3a49bab"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff9de1285999c2423cb97e379f41603cc3edaae8", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/ff9de1285999c2423cb97e379f41603cc3edaae8", "committedDate": "2020-07-01T02:24:12Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e61d1e5d00533a3c001c5f5562e78926c9579ee2", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/e61d1e5d00533a3c001c5f5562e78926c9579ee2", "committedDate": "2020-07-01T02:26:48Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6355ce87bebaba46657e5ba2615f49d3ff0ca63", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/a6355ce87bebaba46657e5ba2615f49d3ff0ca63", "committedDate": "2020-07-01T02:27:14Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1831a6c31150380f2a46a6ddf56b807ef8935572", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/1831a6c31150380f2a46a6ddf56b807ef8935572", "committedDate": "2020-07-01T02:27:43Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1421a4e1f5b504e9360fc4ea3b6d02fbc73180", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/1f1421a4e1f5b504e9360fc4ea3b6d02fbc73180", "committedDate": "2020-07-01T02:31:30Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15bb8d75d939a857549ab1212fdafbc0d6bb672f", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/15bb8d75d939a857549ab1212fdafbc0d6bb672f", "committedDate": "2020-07-01T02:31:52Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6b64c2612104884437459b3d4469ad7f67f5ab", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/4e6b64c2612104884437459b3d4469ad7f67f5ab", "committedDate": "2020-07-01T02:32:11Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c975b07f2e2308e068d159ef1b38304ff6df151", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/4c975b07f2e2308e068d159ef1b38304ff6df151", "committedDate": "2020-07-01T02:32:43Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eabc3b44c6b9fa9eb436987ec454f99a113eefcb", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/eabc3b44c6b9fa9eb436987ec454f99a113eefcb", "committedDate": "2020-07-01T02:39:24Z", "message": "Merge branch 'master' into agent-class-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a3aae22fe3bc7b5d5cec9c3f3d24311ae004851", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/2a3aae22fe3bc7b5d5cec9c3f3d24311ae004851", "committedDate": "2020-07-01T02:42:43Z", "message": "Add FAQ link to `agent.is_cache_enhanced_class`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f3a82e0217a36ec8ec2404cbe707c55f382469", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/f8f3a82e0217a36ec8ec2404cbe707c55f382469", "committedDate": "2020-07-01T02:43:53Z", "message": "Update docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f221261776e9656a6f45da8b930da8a853ae82de", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/f221261776e9656a6f45da8b930da8a853ae82de", "committedDate": "2020-07-01T03:02:00Z", "message": "save class cache as structured file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTc3MzY3", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440577367", "createdAt": "2020-07-01T06:26:37Z", "commit": {"oid": "f221261776e9656a6f45da8b930da8a853ae82de"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNjozN1rOGrYYzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNzo0NFrOGrYaWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTUxOA==", "bodyText": "Waiting for update at https://github.com/SkyAPMTest/retransform-conflict-demo", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448141518", "createdAt": "2020-07-01T06:26:37Z", "author": {"login": "wu-sheng"}, "path": "docs/en/FAQ/Compatible-with-other-javaagent-bytecode-processing.md", "diffHunk": "@@ -0,0 +1,52 @@\n+## Compatible with other javaagent bytecode processing\n+\n+### Problem\n+1. When use skywalking agent, some other agent, such as Arthas, can't work well \n+https://github.com/apache/skywalking/pull/4858\n+\n+2. Java agent retransforming class fails with Skywalking agent, such as in this [demo](https://github.com/hengyunabc/skywalking-error-demo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f221261776e9656a6f45da8b930da8a853ae82de"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTkxNA==", "bodyText": "Only found the jvm test, still, need your Tomcat test for different ClassLoader scenarios.", "url": "https://github.com/apache/skywalking/pull/4858#discussion_r448141914", "createdAt": "2020-07-01T06:27:44Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/retransform-class-scenario/configuration.yml", "diffHunk": "@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+type: jvm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f221261776e9656a6f45da8b930da8a853ae82de"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8cd53c279b5fc54d4cd5db4a4502c5751b8872c", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/d8cd53c279b5fc54d4cd5db4a4502c5751b8872c", "committedDate": "2020-07-01T07:38:56Z", "message": "Change retransform demo repo link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93f3389eeb21f2a25dba9250f8ac8648fec412a", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/d93f3389eeb21f2a25dba9250f8ac8648fec412a", "committedDate": "2020-07-01T09:51:04Z", "message": "add retransform class testcase for tomcat container"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7da2bc5c0f7795b510cf183793adeee939d823ed", "author": {"user": {"login": "kylixs", "name": "Gong Dewei"}}, "url": "https://github.com/apache/skywalking/commit/7da2bc5c0f7795b510cf183793adeee939d823ed", "committedDate": "2020-07-01T09:58:17Z", "message": "enable class cache feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzM3OTc0", "url": "https://github.com/apache/skywalking/pull/4858#pullrequestreview-440737974", "createdAt": "2020-07-01T10:17:15Z", "commit": {"oid": "7da2bc5c0f7795b510cf183793adeee939d823ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d3203ad8c72c9ad5225b39ad7b1dfdd6d02fc2", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/b9d3203ad8c72c9ad5225b39ad7b1dfdd6d02fc2", "committedDate": "2020-07-01T11:06:59Z", "message": "Merge branch 'master' into agent-class-cache"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2228, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}