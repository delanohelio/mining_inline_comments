{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDk1NTQ0", "number": 4972, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1OToyOFrOEJTwOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODoxNTo1NFrOESCAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2MjgxOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1OToyOFrOGpyu8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1OToyOFrOGpyu8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n          \n          \n            \n            Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476018", "createdAt": "2020-06-27T02:59:28Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NTA1OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowMjoyNFrOGpyv_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowMjoyNFrOGpyv_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  # Appoint percentiles if using avgHistogramPercentile operation.\n          \n          \n            \n                  # <Optional> Appoint percentiles if using avgHistogramPercentile operation.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476287", "createdAt": "2020-06-27T03:02:24Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NjMzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNDo1MFrOGpywpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNDo1MFrOGpywpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjQ1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n          \n          \n            \n            Use `meter[\"\"]` to refer the metrics raw data, and multiple build-in methods to help filter or operate the value.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476453", "createdAt": "2020-06-27T03:04:50Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2NzU5OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNTozOVrOGpyxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowNjoxMlrOGpyxOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It will combine the values and collect into the Meter System.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476584", "createdAt": "2020-06-27T03:05:39Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjYwMw==", "bodyText": "Don't use future tense if possible.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476603", "createdAt": "2020-06-27T03:06:12Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjU4NA=="}, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2OTE3OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowODowMlrOGpyx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowODowMlrOGpyx6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Njc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `add`, `reduce`, `multiply`, `mean` with Meter only support operate from single Meter value, you could using `tagFilter` to filter, Because we could not operation between two multiple values.\n          \n          \n            \n            The `add`, `reduce`, `multiply`, and `mean` support single Meter value. Use `tagFilter` to filter.\n          \n      \n    \n    \n  \n\nWhat do you mean Because we could not operation between two multiple values.?", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476776", "createdAt": "2020-06-27T03:08:02Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.\n+\n+|Function|Support meter type|Description|\n+|------|-------|------|\n+|tagFilter(String, String)|Counter,Gauge,Histogram|Filter tag key/value from meter|\n+|add(double)|Counter,Gauge|Add value into meter|\n+|add(Meter)|Counter,Gauge|Add value from a meter value|\n+|reduce(double)|Counter,Gauge|Reduce value into meter|\n+|reduce(Meter)|Counter,Gauge|Reduce value from a meter value|\n+|multiply(double)|Counter,Gauge|Multiply value into meter|\n+|multiply(Meter)|Counter,Gauge|Multiply value form a meter value|\n+|mean(double)|Counter,Gauge|Mean value into meter|\n+|mean(Meter)|Counter,Gauge|Mean value from a meter value|\n+|scale(int)|Counter,Gauge|Scale the meter value|\n+|rate(string)|Counter,Gauge,Histogram|Rate value from the time range|\n+|irate(string)|Counter,Gauge,Histogram|IRate value from the time range|\n+|increase(string)|Counter,Gauge,Histogram|Increase value from the time range|\n+\n+The `add`, `reduce`, `multiply`, `mean` with Meter only support operate from single Meter value, you could using `tagFilter` to filter, Because we could not operation between two multiple values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk2OTM2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowODozNlrOGpyyAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzowODozNlrOGpyyAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjgwMQ==", "bodyText": "What do you mean mean? A little confused about this term", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476801", "createdAt": "2020-06-27T03:08:36Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.\n+\n+|Function|Support meter type|Description|\n+|------|-------|------|\n+|tagFilter(String, String)|Counter,Gauge,Histogram|Filter tag key/value from meter|\n+|add(double)|Counter,Gauge|Add value into meter|\n+|add(Meter)|Counter,Gauge|Add value from a meter value|\n+|reduce(double)|Counter,Gauge|Reduce value into meter|\n+|reduce(Meter)|Counter,Gauge|Reduce value from a meter value|\n+|multiply(double)|Counter,Gauge|Multiply value into meter|\n+|multiply(Meter)|Counter,Gauge|Multiply value form a meter value|\n+|mean(double)|Counter,Gauge|Mean value into meter|\n+|mean(Meter)|Counter,Gauge|Mean value from a meter value|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3MDMxOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxMDowMlrOGpyybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMTo1NTowOVrOGwMYQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjkxMQ==", "bodyText": "Do we have counter and guage type? In the protocol, we define https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto#L49. There is no such thing. You must keep the nouns consistent, otherwise, people are going to be very confused. Even I am hard to follow.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476911", "createdAt": "2020-06-27T03:10:02Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.\n+\n+|Function|Support meter type|Description|\n+|------|-------|------|\n+|tagFilter(String, String)|Counter,Gauge,Histogram|Filter tag key/value from meter|\n+|add(double)|Counter,Gauge|Add value into meter|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4NzY1MA==", "bodyText": "Have changed to the SingleValue or Histogram", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r453187650", "createdAt": "2020-07-11T11:55:09Z", "author": {"login": "mrproliu"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.\n+\n+|Function|Support meter type|Description|\n+|------|-------|------|\n+|tagFilter(String, String)|Counter,Gauge,Histogram|Filter tag key/value from meter|\n+|add(double)|Counter,Gauge|Add value into meter|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NjkxMQ=="}, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3MDc0OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxMDozMVrOGpyyow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxMDozMVrOGpyyow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Njk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want to using `rate`, `irate`, `increase` function, I suggest to let it rate counter at the agent side. \n          \n          \n            \n            If you want to use `rate`, `irate`, `increase` function, use client-side API.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446476963", "createdAt": "2020-06-27T03:10:31Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.\n+\n+|Function|Support meter type|Description|\n+|------|-------|------|\n+|tagFilter(String, String)|Counter,Gauge,Histogram|Filter tag key/value from meter|\n+|add(double)|Counter,Gauge|Add value into meter|\n+|add(Meter)|Counter,Gauge|Add value from a meter value|\n+|reduce(double)|Counter,Gauge|Reduce value into meter|\n+|reduce(Meter)|Counter,Gauge|Reduce value from a meter value|\n+|multiply(double)|Counter,Gauge|Multiply value into meter|\n+|multiply(Meter)|Counter,Gauge|Multiply value form a meter value|\n+|mean(double)|Counter,Gauge|Mean value into meter|\n+|mean(Meter)|Counter,Gauge|Mean value from a meter value|\n+|scale(int)|Counter,Gauge|Scale the meter value|\n+|rate(string)|Counter,Gauge,Histogram|Rate value from the time range|\n+|irate(string)|Counter,Gauge,Histogram|IRate value from the time range|\n+|increase(string)|Counter,Gauge,Histogram|Increase value from the time range|\n+\n+The `add`, `reduce`, `multiply`, `mean` with Meter only support operate from single Meter value, you could using `tagFilter` to filter, Because we could not operation between two multiple values.\n+\n+If you want to using `rate`, `irate`, `increase` function, I suggest to let it rate counter at the agent side. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3Mjk2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxNDoxM1rOGpyztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxNDoxM1rOGpyztQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NzIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Because if the connection between agent and backend has reconnected, the time windows will be break, so we cannot find previous value from the window.\n          \n          \n            \n            \n          \n          \n            \n            - FAQ, why no `rate`, `irate`, `increase` at the backend.\n          \n          \n            \n            Once the agent reconnected to another OAP instance, the time windows of rate calculation will break. Then, the result would not be accurate.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477237", "createdAt": "2020-06-27T03:14:13Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Using `meter[\"\"]` to get one meter from all of the meter witch received at ***per agent***, also there have multiple build-in method to help filter or operate the value.\n+It will combine the values and collect into the Meter System.\n+\n+|Function|Support meter type|Description|\n+|------|-------|------|\n+|tagFilter(String, String)|Counter,Gauge,Histogram|Filter tag key/value from meter|\n+|add(double)|Counter,Gauge|Add value into meter|\n+|add(Meter)|Counter,Gauge|Add value from a meter value|\n+|reduce(double)|Counter,Gauge|Reduce value into meter|\n+|reduce(Meter)|Counter,Gauge|Reduce value from a meter value|\n+|multiply(double)|Counter,Gauge|Multiply value into meter|\n+|multiply(Meter)|Counter,Gauge|Multiply value form a meter value|\n+|mean(double)|Counter,Gauge|Mean value into meter|\n+|mean(Meter)|Counter,Gauge|Mean value from a meter value|\n+|scale(int)|Counter,Gauge|Scale the meter value|\n+|rate(string)|Counter,Gauge,Histogram|Rate value from the time range|\n+|irate(string)|Counter,Gauge,Histogram|IRate value from the time range|\n+|increase(string)|Counter,Gauge,Histogram|Increase value from the time range|\n+\n+The `add`, `reduce`, `multiply`, `mean` with Meter only support operate from single Meter value, you could using `tagFilter` to filter, Because we could not operation between two multiple values.\n+\n+If you want to using `rate`, `irate`, `increase` function, I suggest to let it rate counter at the agent side. \n+Because if the connection between agent and backend has reconnected, the time windows will be break, so we cannot find previous value from the window.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3NDMyOnYy", "diffSide": "RIGHT", "path": "oap-server/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxNTo1MFrOGpy0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxNTo1MFrOGpy0VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NzM5Nw==", "bodyText": "Check check-LICENSE.sh and known-oap-backend-dependencies.txt/known-oap-backend-dependencies-es7.txt. You need to update LICENSE/NOTICE and license check process. You are bringing a new like, maybe including many jars into OAP.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477397", "createdAt": "2020-06-27T03:15:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/pom.xml", "diffHunk": "@@ -89,6 +89,7 @@\n         <freemarker.version>2.3.28</freemarker.version>\n         <javaassist.version>3.25.0-GA</javaassist.version>\n         <vavr.version>0.10.3</vavr.version>\n+        <groovy.version>3.0.3</groovy.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3NDg3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxNjo0NFrOGpy0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxNjo0NFrOGpy0mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NzQ2Nw==", "bodyText": "I think this should be - by default.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477467", "createdAt": "2020-06-27T03:16:44Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/application.yml", "diffHunk": "@@ -196,6 +196,10 @@ prometheus-fetcher:\n   default:\n     active: ${SW_PROMETHEUS_FETCHER_ACTIVE:false}\n \n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3NTgzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxODoyNFrOGpy1FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoxODoyNFrOGpy1FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NzU4OQ==", "bodyText": "I think you should provide Sleuth config in the folder, the example of agent setup, UI template, and full documentation to explain the document.\nThere is nothing than an example to show how to use this feature.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477589", "createdAt": "2020-06-27T03:18:24Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accept meter from [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) into the [Meter System](./../../concepts-and-designs/meter.md).o\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3NzA1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMDowNlrOGpy1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMDowNlrOGpy1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NzczNw==", "bodyText": "This file is being packeged into the boostrap jar, please recheck the pom.xml", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477737", "createdAt": "2020-06-27T03:20:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+meters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3NzgzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMDo0NlrOGpy2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMDo0NlrOGpy2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NzgyNQ==", "bodyText": "What are these metrics for? Who are sending this? Please check my suggestion about your default meter YAML.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477825", "createdAt": "2020-06-27T03:20:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+meters:\n+  - name: jvm_heap_usage_avg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3ODI0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMToxNVrOGpy2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMToxNVrOGpy2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Nzg3Mw==", "bodyText": "Code style is not right.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477873", "createdAt": "2020-06-27T03:21:15Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.config;\n+\n+import lombok.Data;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class MeterConfigs {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MeterConfigs.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk3ODMxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMToyNlrOGpy2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMzoyMToyNlrOGpy2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Nzg4Mg==", "bodyText": "Comments?", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477882", "createdAt": "2020-06-27T03:21:26Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.config;\n+\n+import lombok.Data;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class MeterConfigs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTk1MTcwOnYy", "diffSide": "RIGHT", "path": "dist-material/release-docs/LICENSE", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNDoxMDowMlrOGwNEBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNDoxMDowMlrOGwNEBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5ODg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Material Icons 3.0.1 https://github.com/google/material-design-icons Apache-2.0\n          \n          \n            \n            groovy 3.0.3 https://github.com/apache/groovy Apache-2.0\n          \n          \n            \n            Material Icons 3.0.1 https://github.com/google/material-design-icons Apache-2.0\n          \n          \n            \n            groovy             3.0.3 https://github.com/apache/groovy Apache-2.0", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r453198854", "createdAt": "2020-07-11T14:10:02Z", "author": {"login": "wu-sheng"}, "path": "dist-material/release-docs/LICENSE", "diffHunk": "@@ -444,6 +444,7 @@ Apache 2.0 licenses\n ========================================\n echarts\t4.1.0:\thttps://github.com/apache/incubator-echarts\tApache-2.0\n Material Icons 3.0.1 https://github.com/google/material-design-icons Apache-2.0\n+groovy 3.0.3 https://github.com/apache/groovy Apache-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTk1NDI2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNDoxMzo0OFrOGwNFPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMTo1NToyN1rOGzrxRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTE2NQ==", "bodyText": "This file is not available. Also at the same time, what is this file for?", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r453199165", "createdAt": "2020-07-11T14:13:48Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTMzNQ==", "bodyText": "Do you plan to have a config for Spring app?", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r453199335", "createdAt": "2020-07-11T14:15:30Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTE2NQ=="}, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NzY4NA==", "bodyText": "Rename to the spring.yaml, support moniting on the spring application.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456847684", "createdAt": "2020-07-19T01:55:27Z", "author": {"login": "mrproliu"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTE2NQ=="}, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTk1NzkzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNDoxOToxN1rOGwNG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMTo1NDozNVrOGzrw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTYxMQ==", "bodyText": "We need grammar expressions. Take a look on SkyWalking's OAL doc and grammar expressions.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r453199611", "createdAt": "2020-07-11T14:19:17Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Use `meter[\"\"]` to refer the metrics raw data, and multiple build-in methods to help filter or operate the value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NzYxMg==", "bodyText": "Has changed the doc, add the grammar expressions explain.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456847612", "createdAt": "2020-07-19T01:54:35Z", "author": {"login": "mrproliu"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,77 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/meter-receive-config.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+Use `meter[\"\"]` to refer the metrics raw data, and multiple build-in methods to help filter or operate the value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5OTYxMQ=="}, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTk2MTc4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNDoyNDozN1rOGwNIzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwMTo1Mzo1MFrOGzrwxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMDA3OA==", "bodyText": "This file is in the official release, what is this for? hikaricp and many things are not in every app.\nThis should a test config file, or example only.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r453200078", "createdAt": "2020-07-11T14:24:37Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "diffHunk": "@@ -0,0 +1,358 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+meters:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0NzU1OA==", "bodyText": "Has removed hikaricp meters.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456847558", "createdAt": "2020-07-19T01:53:50Z", "author": {"login": "mrproliu"}, "path": "oap-server/server-bootstrap/src/main/resources/meter-receive-config/config.yaml", "diffHunk": "@@ -0,0 +1,358 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+meters:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwMDA3OA=="}, "originalCommit": {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0NDgzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-receivers.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo0ODo1N1rOGzsw2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyNDowM1rOG0MLxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2Mzk2MA==", "bodyText": "You missed the receiver set up doc in this page.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456863960", "createdAt": "2020-07-19T05:48:57Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-receivers.md", "diffHunk": "@@ -14,6 +14,7 @@ We have following receivers, and `default` implementors are provided in our Apac\n 1. **receiver_zipkin**. See [details](#zipkin-receiver).\n 1. **receiver_jaeger**. See [details](#jaeger-receiver).\n 1. **receiver-oc**. See [details](#oc-receiver).\n+1. **receiver-meter**. See [details](backend-meter.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3ODc1OA==", "bodyText": "Has added a simple description in the document.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r457378758", "createdAt": "2020-07-20T13:24:03Z", "author": {"login": "mrproliu"}, "path": "docs/en/setup/backend/backend-receivers.md", "diffHunk": "@@ -14,6 +14,7 @@ We have following receivers, and `default` implementors are provided in our Apac\n 1. **receiver_zipkin**. See [details](#zipkin-receiver).\n 1. **receiver_jaeger**. See [details](#jaeger-receiver).\n 1. **receiver-oc**. See [details](#oc-receiver).\n+1. **receiver-meter**. See [details](backend-meter.md).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2Mzk2MA=="}, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0NTc3OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MDowOFrOGzsxQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNjowMjozM1rOGzs1Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDA2Ng==", "bodyText": "This file is still in server-bootstrap/src/main/resources/, so, once this file exists, does it mean the index will be created after the OAP starts up? I think all meter system config should be OFF in default.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864066", "createdAt": "2020-07-19T05:50:08Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDg4OQ==", "bodyText": "This example should be listed separately about Spring Sleuth Setup Doc. Both agent doc(Application-toolkit-meter.md) and here should provide a link to that separated documentation.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864889", "createdAt": "2020-07-19T05:59:45Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDA2Ng=="}, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NTAwNA==", "bodyText": "And backend-setup.md should add a link of Spring Sleuth Metrics Analysis section in Advanced feature document link list", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456865004", "createdAt": "2020-07-19T06:01:07Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDA2Ng=="}, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NTEwNg==", "bodyText": "Spring Sleuth Metrics Analysis provides a fully detailed documents including\n\nSet up agent\nSet up backend receiver\nAdd UI dashboard\n\nAnd the screenshot could be hosted in skywalking-website repo, there are a lot of screenshots hosted there.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456865106", "createdAt": "2020-07-19T06:02:33Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDA2Ng=="}, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0NjI2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MDozM1rOGzsxfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMTo0OVrOG0MDmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDEyNw==", "bodyText": "What is scale N? Do you have some public doc to explain this name?", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864127", "createdAt": "2020-07-19T05:50:33Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+##### Meter value grammar\n+```\n+// Declare the meter value.\n+meter[METER_NAME]\n+[.tagFilter(TAG_KEY, TAG_VALUE)]\n+.FUNCTION(VALUE | METER)\n+```\n+##### Meter Name\n+\n+Use name to refer the metrics raw data from agent side.\n+\n+##### Tag Filter\n+\n+Use the meter tag to filter the meter value.\n+> meter[\"test_meter\"].tagFilter(\"k1\", \"v1\")\n+\n+In this case, filter the tag key equals `k1` and tag value equals `v1` value from `test_meter`.\n+\n+##### Aggregation Function\n+\n+Use multiple build-in methods to help operate the value.\n+\n+Provided functions\n+- `add`. Add value into meter. Support single value.\n+> meter[\"test_meter\"].add(2)\n+\n+In this case, all of the meter values will add `2`.\n+> meter[\"test_meter1\"].add(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will add value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `subtract`. Subtract value into meter. Support single value.\n+> meter[\"test_meter\"].subtract(2)\n+\n+In this case, all of the meter values will subtract `2`.\n+> meter[\"test_meter1\"].subtract(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will subtract value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `multiply`. Multiply value into meter. Support single value.\n+> meter[\"test_meter\"].multiply(2)\n+\n+In this case, all of the meter values will multiply `2`.\n+> meter[\"test_meter1\"].multiply(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will multiply value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `divide`. Divide value into meter. Support single value.\n+> meter[\"test_meter\"].divide(2)\n+\n+In this case, all of the meter values will divide `2`.\n+> meter[\"test_meter1\"].divide(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will divide value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `scale`. Scale value into meter. Support single value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NjY2NA==", "bodyText": "Has add a example.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r457376664", "createdAt": "2020-07-20T13:21:49Z", "author": {"login": "mrproliu"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+##### Meter value grammar\n+```\n+// Declare the meter value.\n+meter[METER_NAME]\n+[.tagFilter(TAG_KEY, TAG_VALUE)]\n+.FUNCTION(VALUE | METER)\n+```\n+##### Meter Name\n+\n+Use name to refer the metrics raw data from agent side.\n+\n+##### Tag Filter\n+\n+Use the meter tag to filter the meter value.\n+> meter[\"test_meter\"].tagFilter(\"k1\", \"v1\")\n+\n+In this case, filter the tag key equals `k1` and tag value equals `v1` value from `test_meter`.\n+\n+##### Aggregation Function\n+\n+Use multiple build-in methods to help operate the value.\n+\n+Provided functions\n+- `add`. Add value into meter. Support single value.\n+> meter[\"test_meter\"].add(2)\n+\n+In this case, all of the meter values will add `2`.\n+> meter[\"test_meter1\"].add(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will add value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `subtract`. Subtract value into meter. Support single value.\n+> meter[\"test_meter\"].subtract(2)\n+\n+In this case, all of the meter values will subtract `2`.\n+> meter[\"test_meter1\"].subtract(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will subtract value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `multiply`. Multiply value into meter. Support single value.\n+> meter[\"test_meter\"].multiply(2)\n+\n+In this case, all of the meter values will multiply `2`.\n+> meter[\"test_meter1\"].multiply(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will multiply value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `divide`. Divide value into meter. Support single value.\n+> meter[\"test_meter\"].divide(2)\n+\n+In this case, all of the meter values will divide `2`.\n+> meter[\"test_meter1\"].divide(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will divide value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `scale`. Scale value into meter. Support single value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDEyNw=="}, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0NzY3OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MjozMVrOGzsyMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MjozMVrOGzsyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDMwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want to use `rate`, `irate`, `increase` function, use client-side API.\n          \n          \n            \n            - FAQ, why no `rate`, `irate`, `increase` at the backend.\n          \n          \n            \n            Once the agent reconnected to another OAP instance, the time windows of rate calculation will break. Then, the result would not be accurate.\n          \n          \n            \n            Even we supported `rate`, `irate`, `increase` function in the backend, but we still recommend user to consider using client-side APIs to do these. Because\n          \n          \n            \n            1. The OAP has to set up caches to calculate the value.\n          \n          \n            \n            1. Once the agent reconnected to another OAP instance, the time windows of rate calculation will break. Then, the result would not be accurate.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864306", "createdAt": "2020-07-19T05:52:31Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+##### Meter value grammar\n+```\n+// Declare the meter value.\n+meter[METER_NAME]\n+[.tagFilter(TAG_KEY, TAG_VALUE)]\n+.FUNCTION(VALUE | METER)\n+```\n+##### Meter Name\n+\n+Use name to refer the metrics raw data from agent side.\n+\n+##### Tag Filter\n+\n+Use the meter tag to filter the meter value.\n+> meter[\"test_meter\"].tagFilter(\"k1\", \"v1\")\n+\n+In this case, filter the tag key equals `k1` and tag value equals `v1` value from `test_meter`.\n+\n+##### Aggregation Function\n+\n+Use multiple build-in methods to help operate the value.\n+\n+Provided functions\n+- `add`. Add value into meter. Support single value.\n+> meter[\"test_meter\"].add(2)\n+\n+In this case, all of the meter values will add `2`.\n+> meter[\"test_meter1\"].add(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will add value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `subtract`. Subtract value into meter. Support single value.\n+> meter[\"test_meter\"].subtract(2)\n+\n+In this case, all of the meter values will subtract `2`.\n+> meter[\"test_meter1\"].subtract(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will subtract value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `multiply`. Multiply value into meter. Support single value.\n+> meter[\"test_meter\"].multiply(2)\n+\n+In this case, all of the meter values will multiply `2`.\n+> meter[\"test_meter1\"].multiply(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will multiply value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `divide`. Divide value into meter. Support single value.\n+> meter[\"test_meter\"].divide(2)\n+\n+In this case, all of the meter values will divide `2`.\n+> meter[\"test_meter1\"].divide(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will divide value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `scale`. Scale value into meter. Support single value.\n+> meter[\"test_meter\"].scale(2)\n+\n+In this case, all of the meter values will scale `2`.\n+- `rate`. Rate value from the time range. Support single value and Histogram.\n+> meter[\"test_meter\"].rate(\"P15S\")\n+\n+In this case, all of the meter values will rate from `15s` before.\n+- `irate`. IRate value from the time range. Support single value and Histogram.\n+> meter[\"test_meter\"].irate(\"P15S\")\n+\n+In this case, all of the meter values will irate from `15s` before.\n+- `increase`. increase value from the time range. Support single value and Histogram.\n+> meter[\"test_meter\"].increase(\"P15S\")\n+\n+In this case, all of the meter values will increase from `15s` before.\n+\n+If you want to use `rate`, `irate`, `increase` function, use client-side API.\n+- FAQ, why no `rate`, `irate`, `increase` at the backend.\n+Once the agent reconnected to another OAP instance, the time windows of rate calculation will break. Then, the result would not be accurate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0ODA2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MzowNVrOGzsyZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MzowNVrOGzsyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDM1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `rate`. Rate value from the time range. Support single value and Histogram.\n          \n          \n            \n            - `rate`.(Not Recommended) Rate value from the time range. Support single value and Histogram.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864358", "createdAt": "2020-07-19T05:53:05Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+##### Meter value grammar\n+```\n+// Declare the meter value.\n+meter[METER_NAME]\n+[.tagFilter(TAG_KEY, TAG_VALUE)]\n+.FUNCTION(VALUE | METER)\n+```\n+##### Meter Name\n+\n+Use name to refer the metrics raw data from agent side.\n+\n+##### Tag Filter\n+\n+Use the meter tag to filter the meter value.\n+> meter[\"test_meter\"].tagFilter(\"k1\", \"v1\")\n+\n+In this case, filter the tag key equals `k1` and tag value equals `v1` value from `test_meter`.\n+\n+##### Aggregation Function\n+\n+Use multiple build-in methods to help operate the value.\n+\n+Provided functions\n+- `add`. Add value into meter. Support single value.\n+> meter[\"test_meter\"].add(2)\n+\n+In this case, all of the meter values will add `2`.\n+> meter[\"test_meter1\"].add(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will add value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `subtract`. Subtract value into meter. Support single value.\n+> meter[\"test_meter\"].subtract(2)\n+\n+In this case, all of the meter values will subtract `2`.\n+> meter[\"test_meter1\"].subtract(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will subtract value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `multiply`. Multiply value into meter. Support single value.\n+> meter[\"test_meter\"].multiply(2)\n+\n+In this case, all of the meter values will multiply `2`.\n+> meter[\"test_meter1\"].multiply(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will multiply value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `divide`. Divide value into meter. Support single value.\n+> meter[\"test_meter\"].divide(2)\n+\n+In this case, all of the meter values will divide `2`.\n+> meter[\"test_meter1\"].divide(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will divide value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `scale`. Scale value into meter. Support single value.\n+> meter[\"test_meter\"].scale(2)\n+\n+In this case, all of the meter values will scale `2`.\n+- `rate`. Rate value from the time range. Support single value and Histogram.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0ODEwOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MzoxNFrOGzsybQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1MzoxNFrOGzsybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `irate`. IRate value from the time range. Support single value and Histogram.\n          \n          \n            \n            - `irate`.(Not Recommended) IRate value from the time range. Support single value and Histogram.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864365", "createdAt": "2020-07-19T05:53:14Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+##### Meter value grammar\n+```\n+// Declare the meter value.\n+meter[METER_NAME]\n+[.tagFilter(TAG_KEY, TAG_VALUE)]\n+.FUNCTION(VALUE | METER)\n+```\n+##### Meter Name\n+\n+Use name to refer the metrics raw data from agent side.\n+\n+##### Tag Filter\n+\n+Use the meter tag to filter the meter value.\n+> meter[\"test_meter\"].tagFilter(\"k1\", \"v1\")\n+\n+In this case, filter the tag key equals `k1` and tag value equals `v1` value from `test_meter`.\n+\n+##### Aggregation Function\n+\n+Use multiple build-in methods to help operate the value.\n+\n+Provided functions\n+- `add`. Add value into meter. Support single value.\n+> meter[\"test_meter\"].add(2)\n+\n+In this case, all of the meter values will add `2`.\n+> meter[\"test_meter1\"].add(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will add value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `subtract`. Subtract value into meter. Support single value.\n+> meter[\"test_meter\"].subtract(2)\n+\n+In this case, all of the meter values will subtract `2`.\n+> meter[\"test_meter1\"].subtract(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will subtract value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `multiply`. Multiply value into meter. Support single value.\n+> meter[\"test_meter\"].multiply(2)\n+\n+In this case, all of the meter values will multiply `2`.\n+> meter[\"test_meter1\"].multiply(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will multiply value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `divide`. Divide value into meter. Support single value.\n+> meter[\"test_meter\"].divide(2)\n+\n+In this case, all of the meter values will divide `2`.\n+> meter[\"test_meter1\"].divide(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will divide value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `scale`. Scale value into meter. Support single value.\n+> meter[\"test_meter\"].scale(2)\n+\n+In this case, all of the meter values will scale `2`.\n+- `rate`. Rate value from the time range. Support single value and Histogram.\n+> meter[\"test_meter\"].rate(\"P15S\")\n+\n+In this case, all of the meter values will rate from `15s` before.\n+- `irate`. IRate value from the time range. Support single value and Histogram.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI0ODUzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-meter.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NDowOFrOGzsyqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NDowOFrOGzsyqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `increase`. increase value from the time range. Support single value and Histogram.\n          \n          \n            \n            - `increase`.(Not Recommended) increase value from the time range. Support single value and Histogram.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864425", "createdAt": "2020-07-19T05:54:08Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-meter.md", "diffHunk": "@@ -0,0 +1,125 @@\n+# Meter Receiver\n+Meter receiver is accepting the metrics of [meter protocol](https://github.com/apache/skywalking-data-collect-protocol/blob/master/language-agent/Meter.proto) format into the [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Module define\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+\n+## Configuration file\n+Meter receiver is configured via a configuration file. The configuration file defines everything related to receiving \n+ from agents, as well as which rule files to load.\n+ \n+OAP can load the configuration at bootstrap. If the new configuration is not well-formed, OAP fails to start up. The files\n+are located at `$CLASSPATH/meter-receive-config`.\n+\n+The file is written in YAML format, defined by the scheme described below. Brackets indicate that a parameter is optional.\n+\n+A example can be found [here](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring.yaml)\n+\n+### Meters configure\n+\n+```yaml\n+# Meter config allow your to recompute\n+meters:\n+  # Meter name which combines with a prefix 'meter_' as the index/table name in storage.\n+  - name: <string>\n+    # The meter scope\n+    scope:\n+      # Scope type should be one of SERVICE, SERVICE_INSTANCE, ENDPOINT\n+      type: <string>\n+      # <Optional> Appoint the endpoint name if using ENDPOINT scope\n+      endpoint: <string>\n+    # The agent source of the transformation operation.\n+    meter:\n+      # The transformation operation from prometheus metrics to Skywalking ones. \n+      operation: <string>\n+      # Meter value parse groovy script.\n+      value: <string>\n+      # <Optional> Appoint percentiles if using avgHistogramPercentile operation.\n+      percentile:\n+        - <rank>\n+```\n+\n+#### Meter transform operation\n+\n+The available operations are `avg`, `avgHistogram` and `avgHistogramPercentile`. The `avg` and `avgXXX` mean to average\n+the raw received metrics. \n+\n+When you specify `avgHistogram` and `avgHistogramPercentile`, the source should be the type of `histogram`.\n+\n+#### Meter value script\n+\n+The script is provide a easy way to custom build a complex value, and it also support combine multiple meter into one.\n+\n+##### Meter value grammar\n+```\n+// Declare the meter value.\n+meter[METER_NAME]\n+[.tagFilter(TAG_KEY, TAG_VALUE)]\n+.FUNCTION(VALUE | METER)\n+```\n+##### Meter Name\n+\n+Use name to refer the metrics raw data from agent side.\n+\n+##### Tag Filter\n+\n+Use the meter tag to filter the meter value.\n+> meter[\"test_meter\"].tagFilter(\"k1\", \"v1\")\n+\n+In this case, filter the tag key equals `k1` and tag value equals `v1` value from `test_meter`.\n+\n+##### Aggregation Function\n+\n+Use multiple build-in methods to help operate the value.\n+\n+Provided functions\n+- `add`. Add value into meter. Support single value.\n+> meter[\"test_meter\"].add(2)\n+\n+In this case, all of the meter values will add `2`.\n+> meter[\"test_meter1\"].add(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will add value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `subtract`. Subtract value into meter. Support single value.\n+> meter[\"test_meter\"].subtract(2)\n+\n+In this case, all of the meter values will subtract `2`.\n+> meter[\"test_meter1\"].subtract(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will subtract value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `multiply`. Multiply value into meter. Support single value.\n+> meter[\"test_meter\"].multiply(2)\n+\n+In this case, all of the meter values will multiply `2`.\n+> meter[\"test_meter1\"].multiply(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will multiply value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `divide`. Divide value into meter. Support single value.\n+> meter[\"test_meter\"].divide(2)\n+\n+In this case, all of the meter values will divide `2`.\n+> meter[\"test_meter1\"].divide(meter[\"test_meter2\"])\n+\n+In this case, all of the `test_meter1` values will divide value from `test_meter2`, ensure `test_meter2` only has single value to operate, could use `tagFilter`.\n+- `scale`. Scale value into meter. Support single value.\n+> meter[\"test_meter\"].scale(2)\n+\n+In this case, all of the meter values will scale `2`.\n+- `rate`. Rate value from the time range. Support single value and Histogram.\n+> meter[\"test_meter\"].rate(\"P15S\")\n+\n+In this case, all of the meter values will rate from `15s` before.\n+- `irate`. IRate value from the time range. Support single value and Histogram.\n+> meter[\"test_meter\"].irate(\"P15S\")\n+\n+In this case, all of the meter values will irate from `15s` before.\n+- `increase`. increase value from the time range. Support single value and Histogram.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI1MDEzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NTo0N1rOGzszYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NTo0N1rOGzszYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDYxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              - name: Spring\n          \n          \n            \n              - name: Spring-Sleuth", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864611", "createdAt": "2020-07-19T05:55:47Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "diffHunk": "@@ -1067,4 +1067,124 @@ templates:\n     # False means providing a basic template, user needs to add it manually.\n     activated: true\n     # True means wouldn't show up on the dashboard. Only keeps the definition in the storage.\n+    disabled: false\n+  - name: Spring", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI1MDI2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NTo1NlrOGzszcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NTo1NlrOGzszcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDYyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"name\":\"Spring\",\n          \n          \n            \n                      \"name\":\"Spring \",", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864626", "createdAt": "2020-07-19T05:55:56Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "diffHunk": "@@ -1067,4 +1067,124 @@ templates:\n     # False means providing a basic template, user needs to add it manually.\n     activated: true\n     # True means wouldn't show up on the dashboard. Only keeps the definition in the storage.\n+    disabled: false\n+  - name: Spring\n+    type: \"DASHBOARD\"\n+    configuration: |-\n+      [\n+        {\n+          \"name\":\"Spring\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDI1MDQ0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NjoxNVrOGzszhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwNTo1NjoxNVrOGzszhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg2NDY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"name\":\"micro-meter\",\n          \n          \n            \n                          \"name\":\"Sleuth\",", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456864647", "createdAt": "2020-07-19T05:56:15Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "diffHunk": "@@ -1067,4 +1067,124 @@ templates:\n     # False means providing a basic template, user needs to add it manually.\n     activated: true\n     # True means wouldn't show up on the dashboard. Only keeps the definition in the storage.\n+    disabled: false\n+  - name: Spring\n+    type: \"DASHBOARD\"\n+    configuration: |-\n+      [\n+        {\n+          \"name\":\"Spring\",\n+          \"type\":\"service\",\n+          \"children\":[\n+            {\n+              \"name\":\"micro-meter\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTEyNTk0OnYy", "diffSide": "RIGHT", "path": ".github/workflows/e2e.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoxMTowM1rOGzzdiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoxMTowM1rOGzzdiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3MzcwNQ==", "bodyText": "Wrong name.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456973705", "createdAt": "2020-07-20T00:11:03Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/e2e.yaml", "diffHunk": "@@ -100,3 +100,25 @@ jobs:\n         with:\n           name: logs\n           path: logs\n+\n+  FeatureGroup04:\n+    name: Meter\n+    runs-on: ubuntu-latest\n+    timeout-minutes: 90\n+    steps:\n+      - uses: actions/checkout@v2\n+        with:\n+          submodules: true\n+      - name: Compile and Build\n+        run: make docker\n+      - name: Copy dist package\n+        run: cp -R dist test/e2e/\n+      - name: Uninstrumnented gateway", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d548d5a02b79e13df77e7d142a6d461a24288d11"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTEzMDExOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoxNTo0N1rOGzzfpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoxNTo0N1rOGzzfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDI0Nw==", "bodyText": "All loggers, please use @Slf4j", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456974247", "createdAt": "2020-07-20T00:15:47Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import groovy.lang.GroovyShell;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.AcceptableValue;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.AvgHistogramPercentileFunction;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.BucketedValues;\n+import org.apache.skywalking.oap.server.receiver.meter.provider.config.MeterConfig;\n+import org.apache.skywalking.oap.server.receiver.meter.provider.config.Scope;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Help to build meter into Meter System.\n+ */\n+public class MeterBuilder {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MeterBuilder.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d548d5a02b79e13df77e7d142a6d461a24288d11"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTEzMjQwOnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-service-provider/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoxODowNlrOGzzgyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMDoxODowNlrOGzzgyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDUzNg==", "bodyText": "I found this in the parent pom(apache.pom), are you sure you need this again?\n  <repositories>\n    <repository>\n      <id>apache.snapshots</id>\n      <name>Apache Snapshot Repository</name>\n      <url>https://repository.apache.org/snapshots</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n    </repository>\n  </repositories>", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456974536", "createdAt": "2020-07-20T00:18:06Z", "author": {"login": "wu-sheng"}, "path": "test/e2e/e2e-service-provider/pom.xml", "diffHunk": "@@ -68,4 +77,11 @@\n         </plugins>\n     </build>\n \n+    <repositories>\n+        <repository>\n+            <id>apache-snapshot</id>\n+            <name>Apache Snapshot</name>\n+            <url>https://repository.apache.org/content/repositories/snapshots</url>\n+        </repository>\n+    </repositories>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d548d5a02b79e13df77e7d142a6d461a24288d11"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Njk5ODE4OnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-service-provider/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTowNjo1NlrOG0oQ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTozMTo0MVrOG0otXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzODg0MA==", "bodyText": "Why expose these endpoints? The info endpoint conflict with the example service, if they're really needed, please expose them to another base-path", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r457838840", "createdAt": "2020-07-21T05:06:56Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-service-provider/src/main/resources/application.yml", "diffHunk": "@@ -32,3 +32,17 @@ spring:\n     properties:\n       hibernate.format_sql: true\n     show-sql: true\n+\n+management:\n+  metrics:\n+    use-global-registry: true\n+    web:\n+      server:\n+        request:\n+          autotime:\n+            enabled: true\n+  endpoints:\n+    web:\n+      exposure:\n+        include: info,health\n+      base-path: /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef524894bd36ca7e84df2a7e5a38a0be9b580490"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0NjEwOA==", "bodyText": "Thanks a lot. Has fixed.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r457846108", "createdAt": "2020-07-21T05:31:41Z", "author": {"login": "mrproliu"}, "path": "test/e2e/e2e-service-provider/src/main/resources/application.yml", "diffHunk": "@@ -32,3 +32,17 @@ spring:\n     properties:\n       hibernate.format_sql: true\n     show-sql: true\n+\n+management:\n+  metrics:\n+    use-global-registry: true\n+    web:\n+      server:\n+        request:\n+          autotime:\n+            enabled: true\n+  endpoints:\n+    web:\n+      exposure:\n+        include: info,health\n+      base-path: /", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzODg0MA=="}, "originalCommit": {"oid": "ef524894bd36ca7e84df2a7e5a38a0be9b580490"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODU3OTE2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoxMDo1OVrOG03MSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoxMjowNlrOG03PKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4MzQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"name\":\"Spring \",\n          \n          \n            \n                      \"name\":\"Spring Sleuth\",\n          \n      \n    \n    \n  \n\nThis seems much easier than meter-receive-config/spring.yaml provided, could you share why? I expect they are matched and used by the end-user directly.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r458083403", "createdAt": "2020-07-21T13:10:59Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "diffHunk": "@@ -1067,4 +1067,124 @@ templates:\n     # False means providing a basic template, user needs to add it manually.\n     activated: true\n     # True means wouldn't show up on the dashboard. Only keeps the definition in the storage.\n+    disabled: false\n+  - name: Spring-Sleuth\n+    type: \"DASHBOARD\"\n+    configuration: |-\n+      [\n+        {\n+          \"name\":\"Spring \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6efd480e9ee978986adf1b99e935efd97af4ce4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NDEzOQ==", "bodyText": "And notice, this change effects your screenshot, please consider the name. Because you have whitespace after Spring, I assume you are missing something.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r458084139", "createdAt": "2020-07-21T13:12:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/ui-initialized-templates.yml", "diffHunk": "@@ -1067,4 +1067,124 @@ templates:\n     # False means providing a basic template, user needs to add it manually.\n     activated: true\n     # True means wouldn't show up on the dashboard. Only keeps the definition in the storage.\n+    disabled: false\n+  - name: Spring-Sleuth\n+    type: \"DASHBOARD\"\n+    configuration: |-\n+      [\n+        {\n+          \"name\":\"Spring \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4MzQwMw=="}, "originalCommit": {"oid": "c6efd480e9ee978986adf1b99e935efd97af4ce4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzgyMTIwOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/spring-sleuth-setup.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNToxNjo1NFrOG2PYug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxMTowNDowOVrOG3ENMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyODM3OA==", "bodyText": "Please separate the cpm and latency on the dashboard. They use different units.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r459528378", "createdAt": "2020-07-23T15:16:54Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/spring-sleuth-setup.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Spring sleuth setup\n+Spring Sleuth provides Spring Boot auto-configuration for distributed tracing. Skywalking integrates it's micrometer part, \n+and it can send metrics to the Skywalking [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Set up agent\n+\n+1. Add the Micrometer and Skywalking meter registry dependency into project `pom.xml` file. Also you could found more detail at [Toolkit micrometer](./../service-agent/java-agent/Application-toolkit-micrometer.md).\n+```xml\n+<dependency>\n+    <groupId>org.springframework.boot</groupId>\n+    <artifactId>spring-boot-starter-actuator</artifactId>\n+</dependency>\n+<dependency>\n+    <groupId>org.apache.skywalking</groupId>\n+    <artifactId>apm-toolkit-micrometer-registry</artifactId>\n+    <version>${skywalking.version}</version>\n+</dependency>\n+```\n+\n+2. Create the Skywalking meter resgitry into spring bean management.\n+```java\n+@Bean\n+SkywalkingMeterRegistry skywalkingMeterRegistry() {\n+    // Add rate configs If you need, otherwise using none args construct\n+    SkywalkingConfig config = new SkywalkingConfig(Arrays.asList(\"\"));\n+    return new SkywalkingMeterRegistry(config);\n+}\n+```\n+\n+## Set up backend receiver\n+\n+1. Enable meter receiver in the `applicaiton.yml`.\n+```yaml\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+```\n+\n+2. Configure the meter config file, It already has the [spring sleuth meter config](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring-sleuth.yaml).\n+If you also has some customized meter at the agent side, please read [meter document](backend-meter.md#meters-configure) to configure meter.\n+\n+## Add UI dashboard\n+\n+1. Open the dashboard view, click `edit` button to edit the templates.\n+\n+    ![Click edit button](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-01.png)\n+\n+1. Create a new template. Template type: `Standard` -> Template Configuration: `Spring` -> Input the Template Name.\n+\n+    ![Create template](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-02.png)\n+\n+1. Click `view` button, Finally get the spring sleuth dashboard.\n+\n+    ![Save template](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-03.png)\n+    ![Spring Sleuth Dashboard](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-04.png)\n+\n+## Supported meter\n+\n+Supported 3 types information: Application, System, JVM.\n+\n+1. Application: HTTP request count and duration, JDBC max/idle/active connection count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5Mzc3OQ==", "bodyText": "Has changed the dashboard.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460393779", "createdAt": "2020-07-25T11:04:09Z", "author": {"login": "mrproliu"}, "path": "docs/en/setup/backend/spring-sleuth-setup.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Spring sleuth setup\n+Spring Sleuth provides Spring Boot auto-configuration for distributed tracing. Skywalking integrates it's micrometer part, \n+and it can send metrics to the Skywalking [Meter System](./../../concepts-and-designs/meter.md).\n+\n+## Set up agent\n+\n+1. Add the Micrometer and Skywalking meter registry dependency into project `pom.xml` file. Also you could found more detail at [Toolkit micrometer](./../service-agent/java-agent/Application-toolkit-micrometer.md).\n+```xml\n+<dependency>\n+    <groupId>org.springframework.boot</groupId>\n+    <artifactId>spring-boot-starter-actuator</artifactId>\n+</dependency>\n+<dependency>\n+    <groupId>org.apache.skywalking</groupId>\n+    <artifactId>apm-toolkit-micrometer-registry</artifactId>\n+    <version>${skywalking.version}</version>\n+</dependency>\n+```\n+\n+2. Create the Skywalking meter resgitry into spring bean management.\n+```java\n+@Bean\n+SkywalkingMeterRegistry skywalkingMeterRegistry() {\n+    // Add rate configs If you need, otherwise using none args construct\n+    SkywalkingConfig config = new SkywalkingConfig(Arrays.asList(\"\"));\n+    return new SkywalkingMeterRegistry(config);\n+}\n+```\n+\n+## Set up backend receiver\n+\n+1. Enable meter receiver in the `applicaiton.yml`.\n+```yaml\n+receiver-meter:\n+  selector: ${SW_RECEIVER_METER:default}\n+  default:\n+```\n+\n+2. Configure the meter config file, It already has the [spring sleuth meter config](../../../../oap-server/server-bootstrap/src/main/resources/meter-receive-config/spring-sleuth.yaml).\n+If you also has some customized meter at the agent side, please read [meter document](backend-meter.md#meters-configure) to configure meter.\n+\n+## Add UI dashboard\n+\n+1. Open the dashboard view, click `edit` button to edit the templates.\n+\n+    ![Click edit button](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-01.png)\n+\n+1. Create a new template. Template type: `Standard` -> Template Configuration: `Spring` -> Input the Template Name.\n+\n+    ![Create template](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-02.png)\n+\n+1. Click `view` button, Finally get the spring sleuth dashboard.\n+\n+    ![Save template](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-03.png)\n+    ![Spring Sleuth Dashboard](http://skywalking.apache.org/screenshots/8.0.0/spring-sleuth-setup-ui-20200723-04.png)\n+\n+## Supported meter\n+\n+Supported 3 types information: Application, System, JVM.\n+\n+1. Application: HTTP request count and duration, JDBC max/idle/active connection count.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyODM3OA=="}, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzQxODg2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODowMzoyNlrOG3DVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxMTowMzo0NlrOG3ENKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTU4OQ==", "bodyText": "Suggestion: make all the methods in this interface default and throws new UnsupportedOperationException(), so that the subclasses can only override the methods they need, and don't need to override all the methods that they don't need.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460379589", "createdAt": "2020-07-25T08:03:26Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+/**\n+ * Meter support calculate operation\n+ */\n+public interface MeterEvalOperation<FROM extends EvalData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5Mzc3MA==", "bodyText": "Thanks for simply the code.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460393770", "createdAt": "2020-07-25T11:03:46Z", "author": {"login": "mrproliu"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+/**\n+ * Meter support calculate operation\n+ */\n+public interface MeterEvalOperation<FROM extends EvalData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTU4OQ=="}, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzQyMjQxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODowODozMlrOG3DXXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxMTowMjo0NlrOG3EM6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTk5OQ==", "bodyText": "From the exception message Only support multiply from single value, the condition should be if (!(data instanceof EvalSingleData)) so that it also applies when data instanceof EvalMultipleData or data instanceof other future subclass of EvalData", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460379999", "createdAt": "2020-07-25T08:08:32Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import lombok.Data;\n+import org.apache.skywalking.apm.network.language.agent.v3.Label;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterSingleValue;\n+\n+import java.math.BigDecimal;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Support counter, gauge\n+ */\n+@Data\n+public class EvalSingleData extends EvalData<EvalData> {\n+\n+    private double value;\n+\n+    public static EvalSingleData build(MeterSingleValue value, MeterProcessor processor) {\n+        final EvalSingleData singleEvalData = new EvalSingleData();\n+        singleEvalData.name = value.getName();\n+        singleEvalData.labels = value.getLabelsList().stream()\n+            .collect(Collectors.toMap(Label::getName, Label::getValue));\n+        singleEvalData.processor = processor;\n+        singleEvalData.value = value.getValue();\n+        return singleEvalData;\n+    }\n+\n+    @Override\n+    public EvalData multiply(double value) {\n+        return copyTo(EvalSingleData.class, instance -> instance.value = this.value * value);\n+    }\n+\n+    @Override\n+    public EvalData multiply(EvalData data) {\n+        if (data instanceof EvalHistogramData) {\n+            throw new IllegalArgumentException(\"Only support multiply from single value\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5MzcwNQ==", "bodyText": "Thanks, that's a good suggest.", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460393705", "createdAt": "2020-07-25T11:02:46Z", "author": {"login": "mrproliu"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import lombok.Data;\n+import org.apache.skywalking.apm.network.language.agent.v3.Label;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterSingleValue;\n+\n+import java.math.BigDecimal;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Support counter, gauge\n+ */\n+@Data\n+public class EvalSingleData extends EvalData<EvalData> {\n+\n+    private double value;\n+\n+    public static EvalSingleData build(MeterSingleValue value, MeterProcessor processor) {\n+        final EvalSingleData singleEvalData = new EvalSingleData();\n+        singleEvalData.name = value.getName();\n+        singleEvalData.labels = value.getLabelsList().stream()\n+            .collect(Collectors.toMap(Label::getName, Label::getValue));\n+        singleEvalData.processor = processor;\n+        singleEvalData.value = value.getValue();\n+        return singleEvalData;\n+    }\n+\n+    @Override\n+    public EvalData multiply(double value) {\n+        return copyTo(EvalSingleData.class, instance -> instance.value = this.value * value);\n+    }\n+\n+    @Override\n+    public EvalData multiply(EvalData data) {\n+        if (data instanceof EvalHistogramData) {\n+            throw new IllegalArgumentException(\"Only support multiply from single value\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTk5OQ=="}, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzQyNzMwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODoxNTo0MFrOG3DZpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODoxNTo0MFrOG3DZpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            double rateVal = (sum - i._2) / ((now - i._1) / 1000);\n          \n          \n            \n                            double rateVal = (sum - i._2) / ((now - i._1) / 1000.0);", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460380581", "createdAt": "2020-07-25T08:15:40Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Function2;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Agent base window. Using on counter function, such as rate, irate, increase.\n+ */\n+public class Window {\n+\n+    private static Map<String, Window> INSTANCE_WINDOW = new ConcurrentHashMap<>();\n+    private final Map<ID, Queue<Tuple2<Long, Double>>> windows = Maps.newHashMap();\n+\n+    private Window() {\n+    }\n+\n+    public static Window getWindow(String service, String serviceInstance) {\n+        return INSTANCE_WINDOW.computeIfAbsent(service + \"_\" + serviceInstance, k -> new Window());\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalSingleData data) {\n+        ID id = new ID(data.getName(), ImmutableMap.copyOf(data.getLabels()));\n+        return (calculateType, range) -> operateCounter(id, data.getValue(), calculateType, range);\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalHistogramData data, double bucket) {\n+        ID id = new ID(data.getName(), ImmutableMap.<String, String>builder()\n+            .putAll(data.getLabels()).put(\"_bucket\", String.valueOf(bucket)).build());\n+        return (calculateType, range) -> operateCounter(id, (double) data.getBuckets().get(bucket), calculateType, range);\n+    }\n+\n+    private Double operateCounter(ID id, Double sum, CalculateType calculateType, String range) {\n+        long now = System.currentTimeMillis();\n+        switch (calculateType) {\n+            case INCREASE:\n+                Tuple2<Long, Double> i = increase(sum, id, Duration.parse(range).toMillis());\n+                return sum - i._2;\n+            case RATE:\n+                i = increase(sum, id, Duration.parse(range).toMillis());\n+                double rateVal = (sum - i._2) / ((now - i._1) / 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzQyNzM1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODoxNTo1NFrOG3DZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODoxNTo1NFrOG3DZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            double iRateVal = (sum - i._2) / ((now - i._1) / 1000);\n          \n          \n            \n                            double iRateVal = (sum - i._2) / ((now - i._1) / 1000.0);", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460380590", "createdAt": "2020-07-25T08:15:54Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Function2;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Agent base window. Using on counter function, such as rate, irate, increase.\n+ */\n+public class Window {\n+\n+    private static Map<String, Window> INSTANCE_WINDOW = new ConcurrentHashMap<>();\n+    private final Map<ID, Queue<Tuple2<Long, Double>>> windows = Maps.newHashMap();\n+\n+    private Window() {\n+    }\n+\n+    public static Window getWindow(String service, String serviceInstance) {\n+        return INSTANCE_WINDOW.computeIfAbsent(service + \"_\" + serviceInstance, k -> new Window());\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalSingleData data) {\n+        ID id = new ID(data.getName(), ImmutableMap.copyOf(data.getLabels()));\n+        return (calculateType, range) -> operateCounter(id, data.getValue(), calculateType, range);\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalHistogramData data, double bucket) {\n+        ID id = new ID(data.getName(), ImmutableMap.<String, String>builder()\n+            .putAll(data.getLabels()).put(\"_bucket\", String.valueOf(bucket)).build());\n+        return (calculateType, range) -> operateCounter(id, (double) data.getBuckets().get(bucket), calculateType, range);\n+    }\n+\n+    private Double operateCounter(ID id, Double sum, CalculateType calculateType, String range) {\n+        long now = System.currentTimeMillis();\n+        switch (calculateType) {\n+            case INCREASE:\n+                Tuple2<Long, Double> i = increase(sum, id, Duration.parse(range).toMillis());\n+                return sum - i._2;\n+            case RATE:\n+                i = increase(sum, id, Duration.parse(range).toMillis());\n+                double rateVal = (sum - i._2) / ((now - i._1) / 1000);\n+                return Objects.equals(rateVal, Double.NaN) ? 0d : rateVal;\n+            case IRATE:\n+                i = increase(sum, id, 0);\n+                double iRateVal = (sum - i._2) / ((now - i._1) / 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 34, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}