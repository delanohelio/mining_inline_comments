{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzY4OTM4", "number": 4517, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNjozNlrODojNwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowODowMlrODrt9uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ2NTkzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNjozNlrOF3KtPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoyMzo1NVrOF3Ni0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTQyMQ==", "bodyText": "recommended to put these and below const string witnesses in one place better.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393391421", "createdAt": "2020-03-17T01:06:36Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java", "diffHunk": "@@ -60,4 +60,10 @@ public String getConstructorInterceptor() {\n     protected ClassMatch enhanceClass() {\n         return byHierarchyMatch(new String[] {\"org.elasticsearch.action.GenericAction\"});\n     }\n+\n+    @Override\n+    protected String[] witnessClasses() {\n+        return new String[]{\"org.elasticsearch.common.transport.InetSocketTransportAddress\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNzkwNQ==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393437905", "createdAt": "2020-03-17T04:23:55Z", "author": {"login": "Indifer"}, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java", "diffHunk": "@@ -60,4 +60,10 @@ public String getConstructorInterceptor() {\n     protected ClassMatch enhanceClass() {\n         return byHierarchyMatch(new String[] {\"org.elasticsearch.action.GenericAction\"});\n     }\n+\n+    @Override\n+    protected String[] witnessClasses() {\n+        return new String[]{\"org.elasticsearch.common.transport.InetSocketTransportAddress\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTQyMQ=="}, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ4Nzg5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToyMDo1OVrOF3K6ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToyMDo1OVrOF3K6ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NDc4OQ==", "bodyText": "This comment be modified to describe the function of the class, same as follows.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393394789", "createdAt": "2020-03-17T01:20:59Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6;\n+\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * date 2020.02.13 20:50", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODUwNjUzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozMzo1OFrOF3LGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoyNDowNlrOF3Ni9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Nzc2Mg==", "bodyText": "recommended to change ; to  , here, which is also consistent with the ES multi-hosts configuration method.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393397762", "createdAt": "2020-03-17T01:33:58Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6;\n+\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * date 2020.02.13 20:50\n+ */\n+public class TransportAddressCache {\n+\n+    private List<TransportAddress> transportAddresses = new ArrayList<TransportAddress>();\n+    private String transportAddressesStr = \"\";\n+\n+    public synchronized void addDiscoveryNode(TransportAddress... transportAddress) {\n+        transportAddresses.addAll(Arrays.asList(transportAddress));\n+        transportAddressesStr = format();\n+    }\n+\n+    public synchronized void removeDiscoveryNode(TransportAddress transportAddress) {\n+        List<TransportAddress> nodesBuilder = new ArrayList<TransportAddress>();\n+\n+        for (TransportAddress otherNode : transportAddresses) {\n+            if (!otherNode.getAddress().equals(transportAddress.getAddress())) {\n+                nodesBuilder.add(otherNode);\n+            }\n+        }\n+\n+        transportAddresses = nodesBuilder;\n+        transportAddressesStr = format();\n+    }\n+\n+    private String format() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (TransportAddress node : transportAddresses) {\n+            stringBuilder.append(node.getAddress()).append(\":\").append(node.getPort()).append(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNzk0MA==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393437940", "createdAt": "2020-03-17T04:24:06Z", "author": {"login": "Indifer"}, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6;\n+\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * date 2020.02.13 20:50\n+ */\n+public class TransportAddressCache {\n+\n+    private List<TransportAddress> transportAddresses = new ArrayList<TransportAddress>();\n+    private String transportAddressesStr = \"\";\n+\n+    public synchronized void addDiscoveryNode(TransportAddress... transportAddress) {\n+        transportAddresses.addAll(Arrays.asList(transportAddress));\n+        transportAddressesStr = format();\n+    }\n+\n+    public synchronized void removeDiscoveryNode(TransportAddress transportAddress) {\n+        List<TransportAddress> nodesBuilder = new ArrayList<TransportAddress>();\n+\n+        for (TransportAddress otherNode : transportAddresses) {\n+            if (!otherNode.getAddress().equals(transportAddress.getAddress())) {\n+                nodesBuilder.add(otherNode);\n+            }\n+        }\n+\n+        transportAddresses = nodesBuilder;\n+        transportAddressesStr = format();\n+    }\n+\n+    private String format() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (TransportAddress node : transportAddresses) {\n+            stringBuilder.append(node.getAddress()).append(\":\").append(node.getPort()).append(\";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Nzc2Mg=="}, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODU2OTMxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNDo0M1rOF3Lr-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNDo0M1rOF3Lr-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzQ4MA==", "bodyText": "It is recommended that the content of tags here be tested and verified.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393407480", "createdAt": "2020-03-17T02:14:43Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+/**\n+ * date 2020.03.15 21:02\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300;\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testMethodsAround() throws Throwable {\n+        TRACE_DSL = true;\n+        Object[] allArguments = new Object[]{discoveryNode, getRequest};\n+\n+        interceptor.beforeMethod(enhancedInstance, null, allArguments, null, null);\n+        interceptor.afterMethod(enhancedInstance, null, allArguments, null, null);\n+\n+        List<TraceSegment> traceSegmentList = segmentStorage.getTraceSegments();\n+        Assert.assertThat(traceSegmentList.size(), is(1));\n+        TraceSegment traceSegment = traceSegmentList.get(0);\n+\n+        AbstractTracingSpan getSpan = SegmentHelper.getSpans(traceSegment).get(0);\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    private void assertGetSpan(AbstractTracingSpan getSpan, Object ret) {\n+        assertThat(getSpan instanceof ExitSpan, is(true));\n+\n+        ExitSpan span = (ExitSpan) getSpan;\n+        assertThat(span.getOperationName().split(\"[$$]\")[0], is(\"Elasticsearch/GetRequest\"));\n+        assertThat(SpanHelper.getComponentId(span), is(TRANSPORT_CLIENT.getId()));\n+\n+        List<TagValuePair> tags = SpanHelper.getTags(span);\n+        Assert.assertTrue(tags.size() > 4);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTM2Nzc5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportActionNodeProxyInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowNDoyNVrOF8LVIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowNDoyNVrOF8LVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0NDUxMg==", "bodyText": "this comment is meaningless, it is recommended to add class comment, as are other important classes.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398644512", "createdAt": "2020-03-26T15:04:25Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportActionNodeProxyInstrumentation.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor.Constants;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * date 2020.02.13 20:32\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTM3NjI1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportClientNodesServiceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowNTo1OVrOF8LaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowNTo1OVrOF8LaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0NTg0NA==", "bodyText": "this is same as above.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398645844", "createdAt": "2020-03-26T15:05:59Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportClientNodesServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor.Constants;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * date 2020.02.13 22:29\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU5NDE1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportServiceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0OToyM1rOF8Njgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0OToyM1rOF8Njgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MDk2Mw==", "bodyText": "same as above", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398680963", "createdAt": "2020-03-26T15:49:23Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor.Constants;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * date 2020.02.13 20:49\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTY1NzM1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowMjoxNVrOF8OLiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowMjoxNVrOF8OLiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MTIxMQ==", "bodyText": "comment should delete", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398691211", "createdAt": "2020-03-26T16:02:15Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTY1ODkwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowMjozN1rOF8OMeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowMjozN1rOF8OMeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MTQ0OQ==", "bodyText": "also this", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398691449", "createdAt": "2020-03-26T16:02:37Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTY3MDIwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowNDo1M1rOF8OTZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowNDo1M1rOF8OTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MzIyMA==", "bodyText": "getRequest  maybe indexRequest?", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398693220", "createdAt": "2020-03-26T16:04:53Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});\n+\n+        when(getRequest.index()).thenReturn(\"endpoint\");\n+        when(getRequest.type()).thenReturn(\"getType\");\n+\n+        when(indexRequest.index()).thenReturn(\"endpoint\");\n+        when(indexRequest.type()).thenReturn(\"indexType\");\n+\n+        when(updateRequest.index()).thenReturn(\"endpoint\");\n+        when(updateRequest.type()).thenReturn(\"updateType\");\n+\n+        when(deleteRequest.index()).thenReturn(\"endpoint\");\n+        when(deleteRequest.type()).thenReturn(\"deleteType\");\n+\n+        when(deleteIndexRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testIndexRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTY3Mjc3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowNToyNlrOF8OVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowNToyNlrOF8OVFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MzY1NQ==", "bodyText": "getRequest  maybe updateRequest?", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398693655", "createdAt": "2020-03-26T16:05:26Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});\n+\n+        when(getRequest.index()).thenReturn(\"endpoint\");\n+        when(getRequest.type()).thenReturn(\"getType\");\n+\n+        when(indexRequest.index()).thenReturn(\"endpoint\");\n+        when(indexRequest.type()).thenReturn(\"indexType\");\n+\n+        when(updateRequest.index()).thenReturn(\"endpoint\");\n+        when(updateRequest.type()).thenReturn(\"updateType\");\n+\n+        when(deleteRequest.index()).thenReturn(\"endpoint\");\n+        when(deleteRequest.type()).thenReturn(\"deleteType\");\n+\n+        when(deleteIndexRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testIndexRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testUpdateRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTY4NDQwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowODowMlrOF8OctA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowODowMlrOF8OctA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NTYwNA==", "bodyText": "getRequest  maybe deleteRequest?", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398695604", "createdAt": "2020-03-26T16:08:02Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});\n+\n+        when(getRequest.index()).thenReturn(\"endpoint\");\n+        when(getRequest.type()).thenReturn(\"getType\");\n+\n+        when(indexRequest.index()).thenReturn(\"endpoint\");\n+        when(indexRequest.type()).thenReturn(\"indexType\");\n+\n+        when(updateRequest.index()).thenReturn(\"endpoint\");\n+        when(updateRequest.type()).thenReturn(\"updateType\");\n+\n+        when(deleteRequest.index()).thenReturn(\"endpoint\");\n+        when(deleteRequest.type()).thenReturn(\"deleteType\");\n+\n+        when(deleteIndexRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testIndexRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testUpdateRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testDeleteRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4430, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}