{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDg2MTg1", "number": 4209, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzozMVrODXTtDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowNDozMVrODXTtOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY2NjY4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzozMVrOFcjxDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzozMVrOFcjxDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Got * in pattern, entry the wildcard mode.\n          \n          \n            \n                        // Got * in pattern, enter the wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490447", "createdAt": "2020-01-11T02:03:31Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY2NjczOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo0N1rOFcjxIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo0N1rOFcjxIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Got * in pattern again, entry the multi-wildcard mode.\n          \n          \n            \n                            // Got * in pattern again, enter the multi-wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490464", "createdAt": "2020-01-11T02:03:47Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY2NjkyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo1OVrOFcjxOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo1OVrOFcjxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Entry the multi-wildcard mode.\n          \n          \n            \n                                // Enter the multi-wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490489", "createdAt": "2020-01-11T02:03:59Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY2NzA0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowNDowOVrOFcjxSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowNDowOVrOFcjxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDUwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Entry the wildcard mode.\n          \n          \n            \n                                // Enter the wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490504", "createdAt": "2020-01-11T02:04:09Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.\n+                    //              \u2193        \u2193\n+                    // pattern: a/**     a/**\n+                    //            \u2193        \u2193\n+                    // string:  a/bcd    a/\n+                    return multiWildcardMatch(pat, p, str, s);\n+                } else {\n+                    // Entry the wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY2NzEzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowNDozMVrOFcjxWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowNDozMVrOFcjxWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDUyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Try to entry normal mode, if not matched, increasing s and try again.\n          \n          \n            \n                        // Try to enter normal mode, if not matched, increasing s and try again.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490523", "createdAt": "2020-01-11T02:04:31Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.\n+                    //              \u2193        \u2193\n+                    // pattern: a/**     a/**\n+                    //            \u2193        \u2193\n+                    // string:  a/bcd    a/\n+                    return multiWildcardMatch(pat, p, str, s);\n+                } else {\n+                    // Entry the wildcard mode.\n+                    //             \u2193\n+                    // pattern: a/*\n+                    //            \u2193\n+                    // string:  a/bcd\n+                    return wildcardMatch(pat, p, str, s);\n+                }\n+            }\n+\n+            // Matching ? for non-'/' char, or matching the same chars.\n+            //            \u2193        \u2193       \u2193\n+            // pattern: a/?/c    a/b/c    a/b\n+            //            \u2193        \u2193       \u2193\n+            // string:  a/b/c    a/b/d    a/d\n+            if ((pc == '?' && sc != 0 && sc != '/') || pc == sc) {\n+                s++;\n+                p++;\n+                continue;\n+            }\n+\n+            // Not matched.\n+            //            \u2193\n+            // pattern: a/b\n+            //            \u2193\n+            // string:  a/c\n+            return false;\n+        }\n+\n+        return s == str.length();\n+    }\n+\n+    private boolean wildcardMatch(String pat, int p, String str, int s) {\n+        char pc = safeCharAt(pat, p);\n+\n+        while (true) {\n+            char sc = safeCharAt(str, s);\n+\n+            if (sc == '/') {\n+                // Both of pattern and string '/' matched, exit wildcard mode.\n+                //             \u2193\n+                // pattern: a/*/\n+                //              \u2193\n+                // string:  a/bc/\n+                if (pc == sc) {\n+                    return normalMatch(pat, p + 1, str, s + 1);\n+                }\n+\n+                // Not matched string in current path part.\n+                //             \u2193        \u2193\n+                // pattern: a/*      a/*d\n+                //              \u2193        \u2193\n+                // string:  a/bc/    a/bc/\n+                return false;\n+            }\n+\n+            // Try to entry normal mode, if not matched, increasing s and try again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}