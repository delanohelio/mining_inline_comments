{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDg2MTg1", "number": 4209, "title": "Optimize trace ignore plugin", "bodyText": "Skywalking with fast ignore\nThis PR enhances the trace ignore plugin of Skywalking.\nIt makes that plugin faster and lightweight.\nChecklist\nThis PR still in WIP state, you can merge this PR after all check is done.\n\n Implementation\n Test\n Documents\n CI build pass\n Review\n\nDescription\nThe original trace ignore plugin has bad performance and memory usage.\nI optimized it at those points:\n\nThe FastPathMatcher provided pattern matching without any new object created.\nSpace complexity: O(1)\nThe FastPathMatcher uses the Depth-first search algorithm for pattern matching.\nWorst time complexity: O(MN)\nBest time complexity: O(M)\n(M: the String size, N: the Pattern size)\nWe split the configs in initializing code, not every createTraceContext method.\n\nBenchmark\nThis PR improves the performance of the matcher from 475767.318 \u00b1 1507.989 ops/s to 3921231.220 \u00b1 15153.711 ops/s. It improves performance by about 824.2%.\n\n\n\nBenchmark\nmatcher\nMode\nCnt\nScore\nError\nUnits\n\n\n\n\nMatcherBenchmark.init\nOriginal\nthrpt\n20\n475767.318\n\u00b1  1507.989\nops/s\n\n\nMatcherBenchmark.init\nPR Provided\nthrpt\n20\n3921231.220\n\u00b1 15153.711\nops/s\n\n\nMatcherBenchmark.init\nOriginal\navgt\n20\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init\nPR Provided\navgt\n20\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init\nOriginal\nsample\n579005\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.00\nOriginal\nsample\n\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.50\nOriginal\nsample\n\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.90\nOriginal\nsample\n\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.95\nOriginal\nsample\n\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.99\nOriginal\nsample\n\n\u2248 10\u207b\u2076\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.999\nOriginal\nsample\n\n\u2248 10\u207b\u2075\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.9999\nOriginal\nsample\n\n\u2248 10\u207b\u2074\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p1.00\nOriginal\nsample\n\n0.001\n\ns/op\n\n\nMatcherBenchmark.init\nPR Provided\nsample\n581269\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.00\nPR Provided\nsample\n\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.50\nPR Provided\nsample\n\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.90\nPR Provided\nsample\n\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.95\nPR Provided\nsample\n\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.99\nPR Provided\nsample\n\n\u2248 10\u207b\u2077\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.999\nPR Provided\nsample\n\n\u2248 10\u207b\u2075\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p0.9999\nPR Provided\nsample\n\n\u2248 10\u207b\u2075\n\ns/op\n\n\nMatcherBenchmark.init:init\u00b7p1.00\nPR Provided\nsample\n\n\u2248 10\u207b\u2074\n\ns/op\n\n\nMatcherBenchmark.init\nOriginal\nss\n\n\u2248 10\u207b\u2075\n\ns/op\n\n\nMatcherBenchmark.init\nPR Provided\nss\n\n\u2248 10\u207b\u2075\n\ns/op", "createdAt": "2020-01-09T17:59:03Z", "url": "https://github.com/apache/skywalking/pull/4209", "merged": true, "mergeCommit": {"oid": "dcb71cdeee7ad14188fcecb3674172e18d0c6158"}, "closed": true, "closedAt": "2020-01-12T01:49:29Z", "author": {"login": "devkanro"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4tfGRgH2gAyMzYxMDg2MTg1OjA4YjBkNmU4MDRjMTEyYWQ4NGYxMThiYzhmMjEyM2Y2OGI1ZjRjNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5dw9QAFqTM0MTU0OTUxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "08b0d6e804c112ad84f118bc8f2123f68b5f4c70", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/08b0d6e804c112ad84f118bc8f2123f68b5f4c70", "committedDate": "2020-01-09T17:34:23Z", "message": "Optimize trace ignore plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8090291643f190e06c294e6fa90609fdf3f83de5", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/8090291643f190e06c294e6fa90609fdf3f83de5", "committedDate": "2020-01-09T17:53:47Z", "message": "Add license for FastPathMatcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef7f5e1da1406658a45b1b43049b4f0f9e9a4a4", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/3ef7f5e1da1406658a45b1b43049b4f0f9e9a4a4", "committedDate": "2020-01-10T03:24:18Z", "message": "Merge branch 'master' into trace-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88dde3c88800d9fda6a8794ff53b33b1a31d1757", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/88dde3c88800d9fda6a8794ff53b33b1a31d1757", "committedDate": "2020-01-10T04:16:37Z", "message": "Boot again after setting config in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f8895cfd7e9377894789a5fb6414a0036199f1", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/54f8895cfd7e9377894789a5fb6414a0036199f1", "committedDate": "2020-01-10T07:15:07Z", "message": "Fix check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/4df92aed6814842067a7094bbe67f468cf3819b3", "committedDate": "2020-01-10T11:53:05Z", "message": "Merge branch 'master' into trace-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDk0OTQ4", "url": "https://github.com/apache/skywalking/pull/4209#pullrequestreview-341494948", "createdAt": "2020-01-11T01:42:27Z", "commit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d8a07019f8809fed0246d63e135895a46f72b7f", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/4d8a07019f8809fed0246d63e135895a46f72b7f", "committedDate": "2020-01-11T11:44:13Z", "message": "Merge branch 'master' into trace-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDk2NDcy", "url": "https://github.com/apache/skywalking/pull/4209#pullrequestreview-341496472", "createdAt": "2020-01-11T02:03:31Z", "commit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzozMVrOFcjxDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowNDozMVrOFcjxWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Got * in pattern, entry the wildcard mode.\n          \n          \n            \n                        // Got * in pattern, enter the wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490447", "createdAt": "2020-01-11T02:03:31Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Got * in pattern again, entry the multi-wildcard mode.\n          \n          \n            \n                            // Got * in pattern again, enter the multi-wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490464", "createdAt": "2020-01-11T02:03:47Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Entry the multi-wildcard mode.\n          \n          \n            \n                                // Enter the multi-wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490489", "createdAt": "2020-01-11T02:03:59Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDUwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Entry the wildcard mode.\n          \n          \n            \n                                // Enter the wildcard mode.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490504", "createdAt": "2020-01-11T02:04:09Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.\n+                    //              \u2193        \u2193\n+                    // pattern: a/**     a/**\n+                    //            \u2193        \u2193\n+                    // string:  a/bcd    a/\n+                    return multiWildcardMatch(pat, p, str, s);\n+                } else {\n+                    // Entry the wildcard mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDUyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Try to entry normal mode, if not matched, increasing s and try again.\n          \n          \n            \n                        // Try to enter normal mode, if not matched, increasing s and try again.", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490523", "createdAt": "2020-01-11T02:04:31Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.\n+                    //              \u2193        \u2193\n+                    // pattern: a/**     a/**\n+                    //            \u2193        \u2193\n+                    // string:  a/bcd    a/\n+                    return multiWildcardMatch(pat, p, str, s);\n+                } else {\n+                    // Entry the wildcard mode.\n+                    //             \u2193\n+                    // pattern: a/*\n+                    //            \u2193\n+                    // string:  a/bcd\n+                    return wildcardMatch(pat, p, str, s);\n+                }\n+            }\n+\n+            // Matching ? for non-'/' char, or matching the same chars.\n+            //            \u2193        \u2193       \u2193\n+            // pattern: a/?/c    a/b/c    a/b\n+            //            \u2193        \u2193       \u2193\n+            // string:  a/b/c    a/b/d    a/d\n+            if ((pc == '?' && sc != 0 && sc != '/') || pc == sc) {\n+                s++;\n+                p++;\n+                continue;\n+            }\n+\n+            // Not matched.\n+            //            \u2193\n+            // pattern: a/b\n+            //            \u2193\n+            // string:  a/c\n+            return false;\n+        }\n+\n+        return s == str.length();\n+    }\n+\n+    private boolean wildcardMatch(String pat, int p, String str, int s) {\n+        char pc = safeCharAt(pat, p);\n+\n+        while (true) {\n+            char sc = safeCharAt(str, s);\n+\n+            if (sc == '/') {\n+                // Both of pattern and string '/' matched, exit wildcard mode.\n+                //             \u2193\n+                // pattern: a/*/\n+                //              \u2193\n+                // string:  a/bc/\n+                if (pc == sc) {\n+                    return normalMatch(pat, p + 1, str, s + 1);\n+                }\n+\n+                // Not matched string in current path part.\n+                //             \u2193        \u2193\n+                // pattern: a/*      a/*d\n+                //              \u2193        \u2193\n+                // string:  a/bc/    a/bc/\n+                return false;\n+            }\n+\n+            // Try to entry normal mode, if not matched, increasing s and try again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTIwODIw", "url": "https://github.com/apache/skywalking/pull/4209#pullrequestreview-341520820", "createdAt": "2020-01-11T12:39:28Z", "commit": {"oid": "4d8a07019f8809fed0246d63e135895a46f72b7f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "author": {"user": {"login": "devkanro", "name": "Kanro"}}, "url": "https://github.com/apache/skywalking/commit/5a9f4a7172cfc730947689e9860b22e10f3c47f5", "committedDate": "2020-01-11T15:41:20Z", "message": "Fix typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTQ4Njg1", "url": "https://github.com/apache/skywalking/pull/4209#pullrequestreview-341548685", "createdAt": "2020-01-12T01:20:25Z", "commit": {"oid": "5a9f4a7172cfc730947689e9860b22e10f3c47f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTQ5NTE5", "url": "https://github.com/apache/skywalking/pull/4209#pullrequestreview-341549519", "createdAt": "2020-01-12T01:49:20Z", "commit": {"oid": "5a9f4a7172cfc730947689e9860b22e10f3c47f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2551, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}