{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDY5Njc3", "number": 4214, "title": "Support multiple linear values and merging p50/75/90/95/99 into percentile", "bodyText": "New query protocol\n    # Query the type of metrics including multiple values, and format them as multiple linears.\n    # The seq of these multiple lines base on the calculation func in OAL\n    # Such as, should us this to query the result of func percentile(50,75,90,95,99) in OAL,\n    # then five lines will be responsed, p50 is the first element of return value.\n    getMultipleLinearIntValues(metric: MetricCondition!, numOfLinear: Int!, duration: Duration!): [IntValues!]!\n\nnumOfLinear, represents how many lines expected. This related to the metrics name.\n\nNew OAL\n\nall_percentile = from(All.latency).percentile(10);\n\nThis will replace all existing Pxx metrics, which makes indexes merged and the number of index decreased. percentile is a new func in OAL, which calculate p50/75/90/95/99 all, and clearly reduce the performance of Pxx calculation.\nOne side effect\n\nWe will remove the old PXX metrics in default, will affect dashboard, topology, and metrics comparison pages. cc @Fine0830\nOne storage interface changed, a new method added. @dmsolr\n\nTODO\nAdd the e2e tests for new query protocol.\nResolves #4190", "createdAt": "2020-01-10T14:15:49Z", "url": "https://github.com/apache/skywalking/pull/4214", "merged": true, "mergeCommit": {"oid": "9149de2a6e686ff5442ec5bfd2d00ea4912fb911"}, "closed": true, "closedAt": "2020-01-12T14:10:51Z", "author": {"login": "wu-sheng"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb46yP6AH2gAyMzYxNDY5Njc3OjM5YzkyMjJkZWQwNzA1YTUyOTYzNmI3YTljYWVkZDkzOTg4NmE3YWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5niCIgFqTM0MTU3NDQ4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39c9222ded0705a529636b7a9caedd939886a7af", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/39c9222ded0705a529636b7a9caedd939886a7af", "committedDate": "2020-01-10T09:04:04Z", "message": "Support new percentile func with new alarm and exporter for this new func."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "604feef09e678b044f0b2faf3acf4ac2fa62e69e", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/604feef09e678b044f0b2faf3acf4ac2fa62e69e", "committedDate": "2020-01-10T09:10:19Z", "message": "Fix e2e and OAL script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "898cefacd9dab058c392096fd4cfeacb37f68f82", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/898cefacd9dab058c392096fd4cfeacb37f68f82", "committedDate": "2020-01-10T09:54:14Z", "message": "Fix wrong column."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446032a0e904e1a3eabaec31d3985459b219352d", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/446032a0e904e1a3eabaec31d3985459b219352d", "committedDate": "2020-01-10T12:27:38Z", "message": "Fix percentile bug and oal engine bug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d791a92f28fc48dbf8d6bde5f7e974867c8b93", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/05d791a92f28fc48dbf8d6bde5f7e974867c8b93", "committedDate": "2020-01-10T12:54:14Z", "message": "Update query protocol and add percentile test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4f2cbae12f28421a5cbc4845f7e323843c937e", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/0d4f2cbae12f28421a5cbc4845f7e323843c937e", "committedDate": "2020-01-10T14:02:19Z", "message": "Support new query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf", "committedDate": "2020-01-10T14:08:50Z", "message": "Adopt GraphQL requirement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/12c8796f6eeb2b9d28b677add2b2ab00e401777b", "committedDate": "2020-01-10T15:05:48Z", "message": "Fix wrong type cast."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2113b12fd765c3a27b31b45964f8e8df33a8c4d", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/a2113b12fd765c3a27b31b45964f8e8df33a8c4d", "committedDate": "2020-01-10T15:21:19Z", "message": "Fix query in H2 and ES."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/9b7cc82f1de464174a369f670bed885652b3abb7", "committedDate": "2020-01-10T15:22:15Z", "message": "Merge branch 'master' into percentile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjA1ODgx", "url": "https://github.com/apache/skywalking/pull/4214#pullrequestreview-341205881", "createdAt": "2020-01-10T14:43:51Z", "commit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo0Mzo1MVrOFcWFvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyNzoxNlrOFcXYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NjM2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * IntValueHolder always holds a set of int(s).\n          \n          \n            \n             * MultiIntValuesHolder always holds a set of int(s).", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365266365", "createdAt": "2020-01-10T14:43:51Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MultiIntValuesHolder.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+/**\n+ * IntValueHolder always holds a set of int(s).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NzA4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n          \n          \n            \n             * PercentileMetrics is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365267087", "createdAt": "2020-01-10T14:45:21Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ==", "bodyText": "Is it reasonable to make it 0 by default? My intuition of the following configs:\nthreshold: 1000,1000\nmay be just monitor and alarm the p99 and p95 only, ignoring others percentile metrics, and your implementation seems to always send alarm? (because the other metrics may be almostly always > 0).\nAnd are there any possibility when the users want to monitor p99 and p75, how to config the threshold?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365283971", "createdAt": "2020-01-10T15:20:22Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjU3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    percentileValues = new IntKeyLongValueHashMap(5);\n          \n          \n            \n                    percentileValues = new IntKeyLongValueHashMap(RANKS.length);", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365286579", "createdAt": "2020-01-10T15:25:31Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Njk1Ng==", "bodyText": "may reduce one multiply operation, I'm not sure though?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n          \n          \n            \n                            roofs[i] = Math.round(total * RANKS[i] / 100.0);", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365286956", "createdAt": "2020-01-10T15:26:10Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA==", "bodyText": "Do we need .toArray?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365287588", "createdAt": "2020-01-10T15:27:16Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502d0a6bfb2f509f99c3108d9c68eae52d9a747e", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/502d0a6bfb2f509f99c3108d9c68eae52d9a747e", "committedDate": "2020-01-10T15:49:10Z", "message": "Fix docs and comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/dcbd3055c2360787a1e1812efdaf9de8b7e3e594", "committedDate": "2020-01-10T15:49:32Z", "message": "Merge branch 'percentile' of https://github.com/apache/skywalking into percentile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409aeb7bdb6f24e9d4f23b1d8e2406fe33783437", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/409aeb7bdb6f24e9d4f23b1d8e2406fe33783437", "committedDate": "2020-01-10T16:21:50Z", "message": "Fix an e2e compile issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjgxMzQ5", "url": "https://github.com/apache/skywalking/pull/4214#pullrequestreview-341281349", "createdAt": "2020-01-10T16:35:09Z", "commit": {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjozNTowOVrOFcZgyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjozNTowOVrOFcZgyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA==", "bodyText": "may be if condition count >= roofs[i] && count<roofs[i+1]? also change for i;", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365322440", "createdAt": "2020-01-10T16:35:09Z", "author": null, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(RANKS.length);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);\n+            for (IntKeyLongValue element : sortedData) {\n+                count += element.getValue();\n+                for (int i = index; i < roofs.length; i++) {\n+                    int roof = roofs[i];\n+\n+                    if (count >= roof) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be9d4bd28b965da202e96944efb4a2bb09496507", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/be9d4bd28b965da202e96944efb4a2bb09496507", "committedDate": "2020-01-11T01:26:47Z", "message": "Fix javadoc issue and e2e test issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDk2NTEx", "url": "https://github.com/apache/skywalking/pull/4214#pullrequestreview-341496511", "createdAt": "2020-01-11T02:03:59Z", "commit": {"oid": "be9d4bd28b965da202e96944efb4a2bb09496507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo1OVrOFcjxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo1OVrOFcjxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ5MA==", "bodyText": "Regarding pxx, we now use the percentile query at one time. From getMultipleLinearIntValues, we look at one index of the query, but now the back-end index is still divided into five Pxx. This is the next step of transformation? Or is it a merged index that has already been queried?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365490490", "createdAt": "2020-01-11T02:03:59Z", "author": null, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -17,22 +17,14 @@\n  */\n \n // All scope metrics\n-all_p99 = from(All.latency).p99(10);\n-all_p95 = from(All.latency).p95(10);\n-all_p90 = from(All.latency).p90(10);\n-all_p75 = from(All.latency).p75(10);\n-all_p50 = from(All.latency).p50(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9d4bd28b965da202e96944efb4a2bb09496507"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e95c8444b069757eb3abf089ecec306f5d4dd34", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/6e95c8444b069757eb3abf089ecec306f5d4dd34", "committedDate": "2020-01-11T12:28:55Z", "message": "Change CPM to Apdex in TTL test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df57014cd0b66be220a429d782fa0f8301023227", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/df57014cd0b66be220a429d782fa0f8301023227", "committedDate": "2020-01-11T13:25:32Z", "message": "Fix OAL for TTL e2e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24e07ddae3dcbc71a6ed5a948d6e42a6248ccfd", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/e24e07ddae3dcbc71a6ed5a948d6e42a6248ccfd", "committedDate": "2020-01-11T14:13:56Z", "message": "Add metrics query for service percentile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4fedef409047b0fd56b4430895a192e3fea5ba5", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/b4fedef409047b0fd56b4430895a192e3fea5ba5", "committedDate": "2020-01-11T15:22:17Z", "message": "Fix OAL engine bug. Method deserialize is not working when more than two field types are IntKeyLongValueHashMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ae78103ef6d20e4fffc34ae771e072920824f54", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/3ae78103ef6d20e4fffc34ae771e072920824f54", "committedDate": "2020-01-11T16:04:45Z", "message": "Support multiple IntKeyLongValueHashMap fields in remote. About serialize/deserialize methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "857a9a990cfa559e517187aef35e67aeccffd6a3", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/857a9a990cfa559e517187aef35e67aeccffd6a3", "committedDate": "2020-01-11T16:32:19Z", "message": "Fix graphql statement error in e2e."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "831721d1dfbff1b31de3f2b5d0cb53d35f3dffbf", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/831721d1dfbff1b31de3f2b5d0cb53d35f3dffbf", "committedDate": "2020-01-12T00:59:47Z", "message": "Fix serialize not working and add generated serialize/deserialize of percentile into test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75b9446827a44842ed3a3a562b607f4c6b412ae0", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/75b9446827a44842ed3a3a562b607f4c6b412ae0", "committedDate": "2020-01-12T01:03:22Z", "message": "Fix test case format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1cc88160b4613e2ffbc868b3a29abd2d2f9b640", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/b1cc88160b4613e2ffbc868b3a29abd2d2f9b640", "committedDate": "2020-01-12T01:25:20Z", "message": "Merge branch 'master' into percentile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1f06054380f09ac12709c701222cf34ca4d8206", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/c1f06054380f09ac12709c701222cf34ca4d8206", "committedDate": "2020-01-12T01:46:45Z", "message": "Remove generated code test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f31c41292b50cf14113ed1c4d584023bc6d7dc5", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/8f31c41292b50cf14113ed1c4d584023bc6d7dc5", "committedDate": "2020-01-12T06:13:51Z", "message": "Fix failed e2e test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e600712b9112daa300e25bd9e18f34486ae397", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/b1e600712b9112daa300e25bd9e18f34486ae397", "committedDate": "2020-01-12T07:38:46Z", "message": "Use avg resp time to apdex in the TTL test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef90eeda05af3abe75708cee7ada406742f6d46", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/cef90eeda05af3abe75708cee7ada406742f6d46", "committedDate": "2020-01-12T08:07:07Z", "message": "Merge branch 'master' into percentile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf61473575ca13be390b4c26e0dda13a7fe7adf", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/8cf61473575ca13be390b4c26e0dda13a7fe7adf", "committedDate": "2020-01-12T08:07:23Z", "message": "ADD multiple linear metrics check for endpoint in e2e cluster."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567621de539a8f90489b591ccc3c1c8f1aa76506", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/567621de539a8f90489b591ccc3c1c8f1aa76506", "committedDate": "2020-01-12T08:26:45Z", "message": "Support `-` to represent no threshold and doc of alarm about this."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ece13a3af694b9e1d24ff58a6e197c499e1ece", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/c8ece13a3af694b9e1d24ff58a6e197c499e1ece", "committedDate": "2020-01-12T08:53:36Z", "message": "Move break to right place."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/d2ed279952c345d866a5127aa9ae98c5edcec392", "committedDate": "2020-01-12T08:56:21Z", "message": "Fix wrong break(s)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTYyMTYz", "url": "https://github.com/apache/skywalking/pull/4214#pullrequestreview-341562163", "createdAt": "2020-01-12T09:05:06Z", "commit": {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwOTowNTowNlrOFcofrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwOTowNTo0NlrOFcofzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NzkxNg==", "bodyText": "Missing break after if statement\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                }\n          \n          \n            \n                                                }\n          \n          \n            \n                                                break;", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365567916", "createdAt": "2020-01-12T09:05:06Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,38 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        Integer[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK:\n+                        for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            Integer iNullableExpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iNullableExpected = iaexpected[i];\n+                                if (iNullableExpected == null) {\n+                                    continue;\n+                                }\n+                            }\n+                            switch (op) {\n+                                case LESS:\n+                                    if (ivalue < iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2Nzk1MA==", "bodyText": "Same here", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365567950", "createdAt": "2020-01-12T09:05:46Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,38 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        Integer[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK:\n+                        for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            Integer iNullableExpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iNullableExpected = iaexpected[i];\n+                                if (iNullableExpected == null) {\n+                                    continue;\n+                                }\n+                            }\n+                            switch (op) {\n+                                case LESS:\n+                                    if (ivalue < iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }\n+                                case GREATER:\n+                                    if (ivalue > iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }\n+                                case EQUAL:\n+                                    if (ivalue == iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da11ad3c1a656137e944723e8a8ace1d429a2463", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/da11ad3c1a656137e944723e8a8ace1d429a2463", "committedDate": "2020-01-12T09:30:58Z", "message": "Fix break and add a test case for multiple values alarm."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/35cf76e21daefee4a870569bc5b3d7711c9201b4", "committedDate": "2020-01-12T09:43:19Z", "message": "Fix format."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTY1NTQ2", "url": "https://github.com/apache/skywalking/pull/4214#pullrequestreview-341565546", "createdAt": "2020-01-12T10:13:18Z", "commit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxMzoxOFrOFcoutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoyMDoxN1rOFcowbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng==", "bodyText": "I'm not very comfortable with the magic number here", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571766", "createdAt": "2020-01-12T10:13:18Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -121,7 +134,43 @@ protected void functionAggregation(Function function, TermsAggregationBuilder pa\n         return intValues;\n     }\n \n-    @Override public Thermodynamic getThermodynamic(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException {\n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids, int numOfLinear, String valueCName) throws IOException {\n+        String indexName = ModelName.build(downsampling, indName);\n+\n+        SearchResponse response = getClient().ids(indexName, ids.toArray(new String[0]));\n+        Map<String, Map<String, Object>> idMap = toMap(response);\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        for (String id : ids) {\n+            for (int i = 0; i < intValuesArray.length; i++) {\n+                KVInt kvInt = new KVInt();\n+                kvInt.setId(id);\n+                kvInt.setValue(0);\n+                intValuesArray[i].addKVInt(kvInt);\n+            }\n+\n+            if (idMap.containsKey(id)) {\n+                Map<String, Object> source = idMap.get(id);\n+                IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc5MA==", "bodyText": "Same here", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571790", "createdAt": "2020-01-12T10:13:28Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java", "diffHunk": "@@ -129,6 +143,48 @@ public IntValues getValues(String indName, Downsampling downsampling, long start\n         return orderWithDefault0(intValues, ids);\n     }\n \n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids,\n+        int numOfLinear,\n+        String valueCName) throws IOException {\n+        String tableName = ModelName.build(downsampling, indName);\n+\n+        StringBuilder idValues = new StringBuilder();\n+        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n+            if (valueIdx != 0) {\n+                idValues.append(\",\");\n+            }\n+            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n+        }\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        try (Connection connection = h2Client.getConnection()) {\n+            try (ResultSet resultSet = h2Client.executeQuery(connection, \"select id, \" + valueCName + \" from \" + tableName + \" where id in (\" + idValues.toString() + \")\")) {\n+                while (resultSet.next()) {\n+                    String id = resultSet.getString(\"id\");\n+\n+                    IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTk1Nw==", "bodyText": "Is this sentence completed? forget to update?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571957", "createdAt": "2020-01-12T10:16:29Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -13,7 +13,11 @@ Alarm rule is constituted by following keys\n endpoint name.\n - **Exclude names**. The following entity names are excluded in this rule. Such as Service name,\n   endpoint name.\n-- **Threshold**. The target value.\n+- **Threshold**. The target value. \n+For multiple values metrics, such as **percentile**, the threshold is an array. Described like  `value1, value2, value3, value4, value5`.\n+Each value could the threshold for each value of the metrics. Set the value to `-` if don't want to trigger alarm by this or some of the values.  \n+Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, value4, value5` means, there is no threshold for P50 and P75 in percentile alarm rule.\n+Could be an array, such as `value1, value2, value3` if the metrics are multiple values metrics. Element of the array could be NULL, then ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MjExMQ==", "bodyText": "[1] (for reference)", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572111", "createdAt": "2020-01-12T10:18:52Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -13,7 +13,11 @@ Alarm rule is constituted by following keys\n endpoint name.\n - **Exclude names**. The following entity names are excluded in this rule. Such as Service name,\n   endpoint name.\n-- **Threshold**. The target value.\n+- **Threshold**. The target value. \n+For multiple values metrics, such as **percentile**, the threshold is an array. Described like  `value1, value2, value3, value4, value5`.\n+Each value could the threshold for each value of the metrics. Set the value to `-` if don't want to trigger alarm by this or some of the values.  \n+Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, value4, value5` means, there is no threshold for P50 and P75 in percentile alarm rule.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MjIwNg==", "bodyText": "I don't know how other people think of this, I'm confused with the order of the thresholds at first glance, p99 -> p50 or p50 -> p99, and seems only [1] tells the order, vaguely though", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572206", "createdAt": "2020-01-12T10:20:17Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -51,13 +54,22 @@ rules:\n     op: <\n     period: 10\n     count: 4\n+  service_resp_time_percentile_rule:\n+    # Metrics value need to be long, double or int\n+    metrics-name: service_percentile\n+    op: \">\"\n+    threshold: 1000,1000,1000,1000,1000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6ea4138d4528377e79644792bb482c81af8ca4", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/cf6ea4138d4528377e79644792bb482c81af8ca4", "committedDate": "2020-01-12T12:51:24Z", "message": "Add more doc for this new feature and GraphQL query protocol."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTc0NDg2", "url": "https://github.com/apache/skywalking/pull/4214#pullrequestreview-341574486", "createdAt": "2020-01-12T13:12:05Z", "commit": {"oid": "cf6ea4138d4528377e79644792bb482c81af8ca4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}