{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTg1NzQw", "number": 5426, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToyNzowNlrOEfI56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NzoxM1rOEhSHpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDg3MjEwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToyNzowNlrOHLODiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDoyODoxM1rOHLWbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjY2NA==", "bodyText": "This could be overridden, such as two exceptions happened.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481526664", "createdAt": "2020-09-02T01:27:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "diffHunk": "@@ -96,6 +99,8 @@\n      */\n     protected boolean skipAnalysis;\n \n+    protected String exceptionKind = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYwMTEzOQ==", "bodyText": "in local span only may be 1 exception at most\nmany exceptions log may be only entry span or exist span.\n(entry1)-->(entry2)-->(local3)-->(exit4)-->(exit5)\nthe exceptions in entry2,entry3,entry4 should be thought as exception Kind.\nthe exceptions in entry1,exit5 should not be thought as exception kind.\nhow do u think about it?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481601139", "createdAt": "2020-09-02T03:23:54Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "diffHunk": "@@ -96,6 +99,8 @@\n      */\n     protected boolean skipAnalysis;\n \n+    protected String exceptionKind = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjY2NA=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY2MzkxMQ==", "bodyText": "Whether one or mutiple error logs are based on plugin, not core. They didn't say that API is allowed to be called max once per span in any document", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481663911", "createdAt": "2020-09-02T04:28:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "diffHunk": "@@ -96,6 +99,8 @@\n      */\n     protected boolean skipAnalysis;\n \n+    protected String exceptionKind = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNjY2NA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDg3NjczOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToyODoyMlrOHLOGgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMToyODoyMlrOHLOGgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUyNzQyNA==", "bodyText": "Adding two methods in the core level is unexpected. Usually, the span APIs are not providing capabilities to read fields.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481527424", "createdAt": "2020-09-02T01:28:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java", "diffHunk": "@@ -62,6 +62,10 @@\n \n     AbstractSpan errorOccurred();\n \n+    AbstractSpan undoErrorOccurred();\n+\n+    String exceptionKind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDk4MzAxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTo1NTo1NFrOHLPLLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDo0MzowMFrOHLXT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg==", "bodyText": "We can't do this in the agent, because some classes are not in this classloader, such as in Tomcat case, all user exception classes can't be scanned.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481545006", "createdAt": "2020-09-02T01:55:54Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU4NTUzMQ==", "bodyText": "I've done this before in inner apm system,there is some thinking about this feature.\n\nthe package classes scan is only for the exceptions tagged with @IgnoredException in  user code,so we don't need to scan all classes.PluginBootstrap.class.getClassLoader() have been meet the demand.\nIf some exception defined in other lib which out of user control, the exceptions cannot be tagged be @IgnoredException,so package scan scope is no sense to it. the kind of exception should be ignored by hard code config.\n\nIn my mind , user would be like to add a new  ignored exception by @IgnoredException annotation rather than change skywalking agent config frequency.\nHow do you think about it? @wu-sheng", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481585531", "createdAt": "2020-09-02T02:59:39Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYyODAxNw==", "bodyText": "In my mind , user would be like to add a new ignored exception by @IgnoredException annotation rather than change skywalking agent config frequency.\n\nI don't agree, for those exceptions thrown by some frameworks, users cannot do anything to ignore them but only change the agent config, and I suppose that's a common case where users want to ignore exceptions from frameworks, if they have control to where the exceptions are thrown, they can choose not to throw the exceptions and only log some errors", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481628017", "createdAt": "2020-09-02T03:51:25Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzNjAyMQ==", "bodyText": "I don't agree, for those exceptions thrown by some frameworks, users cannot do anything to ignore them but only change the agent config\n\nyes, that is the 2 point what i thought.\n\n2. If some exception defined in other lib which out of user control, the exceptions cannot be tagged be @IgnoredException,so package scan scope is no sense to it. the kind of exception should be ignored by hard code config.\n\nmy option is @IgnoredException is more friendly to use in user service code.\n\n\nthe package classes scan is only for the exceptions tagged with @IgnoredException in  user code,so we don't need to scan all classes.PluginBootstrap.class.getClassLoader() have been meet the demand.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481636021", "createdAt": "2020-09-02T03:59:29Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MDQ3Ng==", "bodyText": "the package classes scan is only for the exceptions tagged with @IgnoredException in user code,so we don't need to scan all classes.PluginBootstrap.class.getClassLoader() have been meet the demand.\n\nThat would not be the case. Once you open @IgnoredException you can't tell where it will be used. PluginBootstrap.class.getClassLoader() wouldn't be able to access many classes when you use the standard J2EE container. Scan tech is not allowed in the agent core stack or plugin stack.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481640476", "createdAt": "2020-09-02T04:04:19Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MTY5MA==", "bodyText": "User code is the wrong statement. All codes are user codes from the agent's perspective. And the user could have a class loader, the framework could have a class loader.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481641690", "createdAt": "2020-09-02T04:05:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY1NDk1NQ==", "bodyText": "this would be cause so many problems.\n\nPluginBootstrap.class.getClassLoader() is application classloader, cannot access custom classloder classes.\nSo we cannot to solve it but for to judge it at run time,for excample have following steps.\n2.1 find classes in every call by the hard config\n2.2 check the status\nI don't know if this has a performance impact when find classes instance every time\n\n@wu-sheng @kezhenxu94\nDo you have any ideas to implement this feature?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481654955", "createdAt": "2020-09-02T04:19:47Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY1Njc3OA==", "bodyText": "That is why, I asked you don't do the scan for class match. You should determine the flow after exception happens and logs.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481656778", "createdAt": "2020-09-02T04:21:38Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY3MzA0Ng==", "bodyText": "PluginBootstrap.class.getClassLoader() is application classloader, cannot access custom classloder classes.\n\n\nIf you check the exception only when it's thrown(in the Span#log(Throwable e)), you can simply use the same class loader (i.e. e.getClass().getClassLoader()) to load the configured class by name\n\n\nSo we cannot to solve it but for to judge it at run time,for excample have following steps.\n2.1 find classes in every call by the hard config\n2.2 check the status\nI don't know if this has a performance impact when find classes instance every time\n\n\nSome simple caching should be enough, I don't think the Ignored Exception list would be very long", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481673046", "createdAt": "2020-09-02T04:37:44Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY3ODMzMA==", "bodyText": "it's almost similar to a custom implement skywalking plugin in our company, i would push it laster,thx\n\nSome simple caching should be enough, I don't think the Ignored Exception list would be very long", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r481678330", "createdAt": "2020-09-02T04:43:00Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/optional-plugins/exception-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/exception/ignore/ExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.exception.ignore;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.reflect.ClassPath;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.boot.OverrideImplementor;\n+import org.apache.skywalking.apm.agent.core.context.DefaultExceptionIgnorerService;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.PluginBootstrap;\n+import org.apache.skywalking.apm.toolkit.trace.IgnoredException;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_CLASS_NAMES;\n+import static org.apache.skywalking.apm.plugin.exception.ignore.ExceptionAnalyzerConfig.Plugin.IgnoredException.IGNORED_EXCEPTION_SCAN_SCOPE;\n+\n+@OverrideImplementor(DefaultExceptionIgnorerService.class)\n+public class ExceptionIgnorerService extends DefaultExceptionIgnorerService {\n+\n+    private final Set<String> exceptionClassNames = new HashSet<>();\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_CLASS_NAMES)) {\n+            exceptionClassNames.addAll(Arrays.asList(IGNORED_EXCEPTION_CLASS_NAMES.split(\",\")));\n+        }\n+        if (StringUtil.isNotEmpty(IGNORED_EXCEPTION_SCAN_SCOPE)) {\n+            ClassPath classpath = ClassPath.from(PluginBootstrap.class.getClassLoader());\n+            ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClasses(IGNORED_EXCEPTION_SCAN_SCOPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTU0NTAwNg=="}, "originalCommit": null, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQwNTMxOnYy", "diffSide": "RIGHT", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNjoyMlrOHLxSpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNjoyMlrOHLxSpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMzk3Mg==", "bodyText": "Why still use annotation?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482103972", "createdAt": "2020-09-02T14:16:22Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * the annotation is declared on business exception class\n+ **/\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface IgnoredException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQwNTUyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxNjoyNlrOHLxSyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTowMTo0MlrOHMRgZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNDAwOQ==", "bodyText": "This depedency is not allowed, related to you are still using annotation.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482104009", "createdAt": "2020-09-02T14:16:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/pom.xml", "diffHunk": "@@ -53,6 +53,11 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.apache.skywalking</groupId>\n+            <artifactId>apm-toolkit-trace</artifactId>\n+            <version>8.2.0-SNAPSHOT</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMzc3OA==", "bodyText": "If i was a user,i would to add ignore exception by annotation,this would be easy to control rather than change env config frequency. in our department,skywalking is throught as a platform, env is a only way to custom config.But env config is out of user code config, user would not like to frequency config.Env should keep stable.\nthat is why i want to keep annotation . Could i extract a common light sdk for tookit and agent together?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482133778", "createdAt": "2020-09-02T14:54:31Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/pom.xml", "diffHunk": "@@ -53,6 +53,11 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.apache.skywalking</groupId>\n+            <artifactId>apm-toolkit-trace</artifactId>\n+            <version>8.2.0-SNAPSHOT</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNDAwOQ=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMTc4Mg==", "bodyText": "If you want to use annotation, consider using toolkit + activation mode. My point is, the core should not depend on the toolkit. It is not safe in the class loader manipulation.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482631782", "createdAt": "2020-09-03T01:01:42Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/pom.xml", "diffHunk": "@@ -53,6 +53,11 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.apache.skywalking</groupId>\n+            <artifactId>apm-toolkit-trace</artifactId>\n+            <version>8.2.0-SNAPSHOT</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNDAwOQ=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQxNDYwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/DefaultExceptionIgnorerService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxODoyM1rOHLxYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1MjowOFrOHLy_4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNTQ0NQ==", "bodyText": "Should this be removed?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482105445", "createdAt": "2020-09-02T14:18:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/DefaultExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+\n+@DefaultImplementor\n+public class DefaultExceptionIgnorerService implements ExceptionIgnorer, BootService {\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void boot() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void onComplete() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void shutdown() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public AbstractTracingSpan ignore(final AbstractTracingSpan span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExMjA4OQ==", "bodyText": "yes", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482112089", "createdAt": "2020-09-02T14:26:54Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/DefaultExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+\n+@DefaultImplementor\n+public class DefaultExceptionIgnorerService implements ExceptionIgnorer, BootService {\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void boot() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void onComplete() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void shutdown() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public AbstractTracingSpan ignore(final AbstractTracingSpan span) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNTQ0NQ=="}, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMTkzOA==", "bodyText": "i would remove the past version codes if the idea of this version is passed", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482131938", "createdAt": "2020-09-02T14:52:08Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/DefaultExceptionIgnorerService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+\n+@DefaultImplementor\n+public class DefaultExceptionIgnorerService implements ExceptionIgnorer, BootService {\n+\n+    @Override\n+    public void prepare() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void boot() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void onComplete() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public void shutdown() throws Throwable {\n+\n+    }\n+\n+    @Override\n+    public AbstractTracingSpan ignore(final AbstractTracingSpan span) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNTQ0NQ=="}, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQyMzQwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMDowOVrOHLxdrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTowNjoyOFrOHMRlIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjc5Nw==", "bodyText": "I still don't like the idea use the annotation.\n\nThe toolkit classes are in the user class loader zone, you can't assume it is usable in the agent core.\nWhy simply use the exception name string match? This is much safer and easier than this.\nLike (2), the exception class could be cached.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482106797", "createdAt": "2020-09-02T14:20:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;\n+        if (Objects.isNull(ignoredExceptionAnnotationClass)) {\n+            return true;\n+        }\n+        if (e.getClass().isAnnotationPresent(ignoredExceptionAnnotationClass)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzMTAwNg==", "bodyText": "The toolkit classes are in the user class loader zone, you can't assume it is usable in the agent core.\n\n\n\nload the ignoredExceptionAnnotationClass by application classloader, it is already passed in the manual test.\n\n\n2. Why simply use the exception name string match? This is much safer and easier than this.\n\nIf i was a user,i would to add ignore exception by annotation,this would be easy to control rather than change env config frequency. in our department,skywalking is throught as a platform, env is a only way to custom config.But env config is out of user code config, user would not like to frequency config.Env should keep stable.\n\n3. Like (2), the exception class could be cached.\n\nprivate final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\nalready cache ignored exceptions.\nwe should add a new cache to store unignored exceptions.Is that what you're saying?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482131006", "createdAt": "2020-09-02T14:50:57Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;\n+        if (Objects.isNull(ignoredExceptionAnnotationClass)) {\n+            return true;\n+        }\n+        if (e.getClass().isAnnotationPresent(ignoredExceptionAnnotationClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjc5Nw=="}, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMjI0Mg==", "bodyText": "load the ignoredExceptionAnnotationClass by application classloader, it is already passed in the manual test.\n\nignoredExceptionAnnotationClass by application classloader, it could not be.\n\nprivate final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\nalready cache ignored exceptions.\nwe should add a new cache to store unignored exceptions.Is that what you're saying?\n\nWe could use a Map directly.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482632242", "createdAt": "2020-09-03T01:03:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;\n+        if (Objects.isNull(ignoredExceptionAnnotationClass)) {\n+            return true;\n+        }\n+        if (e.getClass().isAnnotationPresent(ignoredExceptionAnnotationClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjc5Nw=="}, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMjk5Mw==", "bodyText": "Also, the key is not right, you need to use classLoaderInstance + Exception class as the key. The same class could be loaded by different class loaders with the same name.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482632993", "createdAt": "2020-09-03T01:06:28Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;\n+        if (Objects.isNull(ignoredExceptionAnnotationClass)) {\n+            return true;\n+        }\n+        if (e.getClass().isAnnotationPresent(ignoredExceptionAnnotationClass)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNjc5Nw=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQyODUyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMToxNVrOHLxg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo1NjowNVrOHLzMBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzYxMw==", "bodyText": "Accessing the field directly is not allowed.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482107613", "createdAt": "2020-09-02T14:21:15Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExNjk5Mw==", "bodyText": "package access", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482116993", "createdAt": "2020-09-02T14:32:52Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzYxMw=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMzI0Nw==", "bodyText": "The same thing, all accesses should be through methods unless it is in the same class and children. But this is not the key, please check comments about the annotation, which is my primary concern.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482123247", "createdAt": "2020-09-02T14:41:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzYxMw=="}, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEzNTA0NQ==", "bodyText": "The same thing, all accesses should be through methods unless it is in the same class and children. But this is\n\nalready reply", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482135045", "createdAt": "2020-09-02T14:56:05Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        if (ignoredExceptions.contains(e.getClass())) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        Class<? extends Annotation> ignoredExceptionAnnotationClass = statusTriggerService.ignoredExceptionAnnotationClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzYxMw=="}, "originalCommit": null, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQzMDU4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/FastFailExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMTo0MVrOHLxiJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0ODo1MFrOHL1xRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzk0MA==", "bodyText": "What is this? Why are you doing this?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482107940", "createdAt": "2020-09-02T14:21:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/FastFailExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+public class FastFailExceptionCheckStrategy implements ExceptionCheckStrategy {\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        return !(e instanceof Exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjExNjE2NQ==", "bodyText": "in throwable, there are 2parts error or exception.\n\nerror occurs mostly occurs when system error\nexception mostly occurs  when  application error\nso we should only allow adjust exception status", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482116165", "createdAt": "2020-09-02T14:31:48Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/FastFailExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+public class FastFailExceptionCheckStrategy implements ExceptionCheckStrategy {\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        return !(e instanceof Exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzk0MA=="}, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NzM0OA==", "bodyText": "We are doing the name match and getCause, why we need to check this? instanceof is fast in JDK8, but this is not necessary.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482177348", "createdAt": "2020-09-02T15:48:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/FastFailExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+public class FastFailExceptionCheckStrategy implements ExceptionCheckStrategy {\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        return !(e instanceof Exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwNzk0MA=="}, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDgzNjg2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0MzowOVrOHL1hzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTowNToxOFrOHMRkFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3MzM5MQ==", "bodyText": "These two methods can be simply replaced by java.lang.Class#isAssignableFrom", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482173391", "createdAt": "2020-09-02T15:43:09Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        if (isInheritMatch(getSuperclasses(clazz), ignoredExceptionNames)) {\n+            ignoredExceptions.add(clazz);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isInheritMatch(final List<String> superclasses, final String[] ignoredExceptionNames) {\n+        for (final String superclass : superclasses) {\n+            for (final String ignoreExceptionName : ignoredExceptionNames) {\n+                if (superclass.equals(ignoreExceptionName)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    List<String> getSuperclasses(Class<? extends Throwable> clazz) {\n+        List<String> superClasses = new ArrayList<>();\n+        superClasses.add(clazz.getName());\n+        Class<?> superclass = clazz.getSuperclass();\n+        while (superclass != null && !superclass.equals(Exception.class)) {\n+            superClasses.add(superclass.getName());\n+            superclass = superclass.getSuperclass();\n+        }\n+        return superClasses;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwOTM1MQ==", "bodyText": "i know \uff0cbut i want to ignore classloader affect. we don't know how to load config class by which classloader.so I only judged it by class name.because of only little class in loop,it would not cost much time.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482209351", "createdAt": "2020-09-02T16:37:41Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        if (isInheritMatch(getSuperclasses(clazz), ignoredExceptionNames)) {\n+            ignoredExceptions.add(clazz);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isInheritMatch(final List<String> superclasses, final String[] ignoredExceptionNames) {\n+        for (final String superclass : superclasses) {\n+            for (final String ignoreExceptionName : ignoredExceptionNames) {\n+                if (superclass.equals(ignoreExceptionName)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    List<String> getSuperclasses(Class<? extends Throwable> clazz) {\n+        List<String> superClasses = new ArrayList<>();\n+        superClasses.add(clazz.getName());\n+        Class<?> superclass = clazz.getSuperclass();\n+        while (superclass != null && !superclass.equals(Exception.class)) {\n+            superClasses.add(superclass.getName());\n+            superclass = superclass.getSuperclass();\n+        }\n+        return superClasses;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3MzM5MQ=="}, "originalCommit": null, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMjcyNw==", "bodyText": "If you want this, use this way\n\nc = e.getClass().getClassLoader()\nIf c.forName(exception Class) has classNotFound, then should not ignore\nIf c.forName(exception Class) has a class reference, you could do isAssignableFrom", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482632727", "createdAt": "2020-09-03T01:05:18Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        if (isInheritMatch(getSuperclasses(clazz), ignoredExceptionNames)) {\n+            ignoredExceptions.add(clazz);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isInheritMatch(final List<String> superclasses, final String[] ignoredExceptionNames) {\n+        for (final String superclass : superclasses) {\n+            for (final String ignoreExceptionName : ignoredExceptionNames) {\n+                if (superclass.equals(ignoreExceptionName)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    List<String> getSuperclasses(Class<? extends Throwable> clazz) {\n+        List<String> superClasses = new ArrayList<>();\n+        superClasses.add(clazz.getName());\n+        Class<?> superclass = clazz.getSuperclass();\n+        while (superclass != null && !superclass.equals(Exception.class)) {\n+            superClasses.add(superclass.getName());\n+            superclass = superclass.getSuperclass();\n+        }\n+        return superClasses;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3MzM5MQ=="}, "originalCommit": null, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg1NjY0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0Nzo0NFrOHL1uPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0Nzo0NFrOHL1uPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjU3Mg==", "bodyText": "This is not necessary for explicit configuration. IGNORED_EXCEPTIONS==\"\" means STATUS_CHECKER = OFF", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482176572", "createdAt": "2020-09-02T15:47:44Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +270,12 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+        public static StatusChecker STATUS_CHECKER = OFF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg1ODkzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/config/agent.config", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0ODoxN1rOHL1vsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo0ODoxN1rOHL1vsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3Njk0NQ==", "bodyText": "regex == regular expression, so there is no need to add _expression\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # plugin.springannotation.classname_match_regex_expression=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX_EXPRESSION:}\n          \n          \n            \n            # plugin.springannotation.classname_match_regex=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX:}", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482176945", "createdAt": "2020-09-02T15:48:17Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -92,7 +96,7 @@ logging.level=${SW_LOGGING_LEVEL:INFO}\n # plugin.kafka.bootstrap_servers=${SW_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}\n \n # Exclude activated plugins\n-# plugin.exclude_plugins=${SW_EXCLUDE_PLUGINS:\"\"}\n+# plugin.exclude_plugins=${SW_EXCLUDE_PLUGINS:}\n \n # Match spring bean with regex expression for classname\n-# plugin.springannotation.classname_match_regex_expression=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX_EXPRESSION:\"\"}\n+# plugin.springannotation.classname_match_regex_expression=${SW_SPRINGANNOTATION_CLASSNAME_MATCH_REGEX_EXPRESSION:}", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg4MDUwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1Mjo1M1rOHL18pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1Mjo1M1rOHL18pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MDI2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    errorOccurred = errorOccurred || ServiceManager.INSTANCE.findService(StatusCheckService.class).isError(t);\n          \n          \n            \n                    if (!errorOccurred  && ServiceManager.INSTANCE.findService(StatusCheckService.class).isError(t)) {\n          \n          \n            \n                        errorOccurred();\n          \n          \n            \n                    }", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482180263", "createdAt": "2020-09-02T15:52:53Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractTracingSpan.java", "diffHunk": "@@ -163,6 +165,7 @@ public AbstractTracingSpan log(Throwable t) {\n         if (logs == null) {\n             logs = new LinkedList<>();\n         }\n+        errorOccurred = errorOccurred || ServiceManager.INSTANCE.findService(StatusCheckService.class).isError(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg4ODUyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NDozN1rOHL2Bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NDozN1rOHL2Bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MTUxMQ==", "bodyText": "You are facing racing conditions for this hash set.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482181511", "createdAt": "2020-09-02T15:54:37Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final HashSet<Class<? extends Throwable>> ignoredExceptions = new HashSet<>(16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg4OTgzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NDo1MlrOHL2CUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NDo1MlrOHL2CUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MTcxMw==", "bodyText": "Better to have a recursive depth here, for the sake of performance", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482181713", "createdAt": "2020-09-02T15:54:52Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy(),\n+            new InheriteMatchExceptionCheckStrategy()\n+        )\n+    );\n+\n+    /**\n+     * If any strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicOrStrategies;\n+    /**\n+     * If all strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicAndStrategies;\n+\n+    StatusChecker(final List<ExceptionCheckStrategy> logicOrStrategies,\n+                  final List<ExceptionCheckStrategy> logicAndStrategies) {\n+        this.logicOrStrategies = logicOrStrategies;\n+        this.logicAndStrategies = logicAndStrategies;\n+    }\n+\n+    public boolean recursiveCheckStatus(Throwable e) {\n+        if (e == null) {\n+            return true;\n+        }\n+        if (checkStatus(e)) {\n+            return recursiveCheckStatus(e.getCause());\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg5Mjc4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NToyN1rOHL2EGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NjoxMFrOHL2GEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjE2OA==", "bodyText": "Why there is a D suffix?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482182168", "createdAt": "2020-09-02T15:55:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjY3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                NAMED_MATCH(\n          \n          \n            \n                NAME_MATCH(", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482182674", "createdAt": "2020-09-02T15:56:10Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MjE2OA=="}, "originalCommit": null, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg5Nzc2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NjozNVrOHL2HHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1NjozNVrOHL2HHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4Mjk0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                INHERIT_NAMED_MATCH(\n          \n          \n            \n                HIERARCHY_MATCH(", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482182943", "createdAt": "2020-09-02T15:56:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDg5OTg1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1Njo1OVrOHL2IYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1Njo1OVrOHL2IYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4MzI2NQ==", "bodyText": "Typo, Inherite -> Inherit", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482183265", "createdAt": "2020-09-02T15:56:59Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkwNzIxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1ODo1MFrOHL2NMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1ODo1MFrOHL2NMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NDQ5Nw==", "bodyText": "Don't need @DefaultImplementor ?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482184497", "createdAt": "2020-09-02T15:58:50Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import lombok.Getter;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck.OPEN_RECURSIVE_CHECK;\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.OFF;\n+\n+public class StatusCheckService implements BootService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkxMTk4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1OTo1N1rOHL2QKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTo1OTo1N1rOHL2QKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NTI1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n          \n          \n            \n                 * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n          \n          \n            \n                 * return normal status.<br/>\n          \n          \n            \n                 * Do hierarchy check for the exception. Tag span as error status unless it is listed in Config.StatusCheck#IGNORED_EXCEPTIONS", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482185258", "createdAt": "2020-09-02T15:59:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkyMjMyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMjoyOFrOHL2Wsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMjoyOFrOHL2Wsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NjkzMQ==", "bodyText": "Inherite -> hierarchy", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482186931", "createdAt": "2020-09-02T16:02:28Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/InheriteMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class InheriteMatchExceptionCheckStrategy implements ExceptionCheckStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkyNDMzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMzowNVrOHL2YJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowMzowNVrOHL2YJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4NzMwMQ==", "bodyText": "If I read the codes right, InheriteMatchExceptionCheckStrategy should have included the logic of NamedMatchExceptionCheckStrategy.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482187301", "createdAt": "2020-09-02T16:03:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy(),\n+            new InheriteMatchExceptionCheckStrategy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkyNzgwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowNDowNFrOHL2aZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowNDowNFrOHL2aZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4Nzg3OQ==", "bodyText": "Do we really this complex constructor? From the coding perspective, this should be an And ExceptionCheckStrategy(s1, s2), but I doubt whether this is really necessary for now.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482187879", "createdAt": "2020-09-02T16:04:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+public enum StatusChecker {\n+\n+    /**\n+     * All exception is thought as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy()), new ArrayList<>()),\n+\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy()\n+        )\n+    ),\n+    /**\n+     * 1. The throwable is not instance of exception, return error status. <br/> 2. The exception name is exist in\n+     * ignoreExceptions, return normal status.<br/> 3. The exception superclass name is exist in ignoreExceptions,\n+     * return normal status.<br/>\n+     *\n+     * @see Config.StatusCheck#IGNORED_EXCEPTIONS\n+     */\n+    INHERIT_NAMED_MATCH(\n+        Collections.singletonList(new FastFailExceptionCheckStrategy()),\n+        Arrays.asList(\n+            new NamedMatchExceptionCheckStrategy(),\n+            new InheriteMatchExceptionCheckStrategy()\n+        )\n+    );\n+\n+    /**\n+     * If any strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicOrStrategies;\n+    /**\n+     * If all strategy check the status is error,the error status is true.\n+     */\n+    private final List<ExceptionCheckStrategy> logicAndStrategies;\n+\n+    StatusChecker(final List<ExceptionCheckStrategy> logicOrStrategies,\n+                  final List<ExceptionCheckStrategy> logicAndStrategies) {\n+        this.logicOrStrategies = logicOrStrategies;\n+        this.logicAndStrategies = logicAndStrategies;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODg1NjU1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxNjo1MFrOHMduRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxNjo1MFrOHMduRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTk0Mw==", "bodyText": "Why return directly?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482831943", "createdAt": "2020-09-03T09:16:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        ClassLoader classLoader = clazz.getClassLoader();\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        for (final String ignoredExceptionName : ignoredExceptionNames) {\n+            try {\n+                Class<?> parentClazz = Class.forName(ignoredExceptionName, true, classLoader);\n+                if (parentClazz.isAssignableFrom(clazz)) {\n+                    ignoredExceptions.add(clazz);\n+                    return false;\n+                }\n+            } catch (ClassNotFoundException ignore) {\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODg1OTg2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxNzo0MlrOHMdwNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxNzo0MlrOHMdwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMjQzNw==", "bodyText": "You don't cache the checked class, so basically, most exceptions have to be checked every time, which is a performance issue.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482832437", "createdAt": "2020-09-03T09:17:42Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODg3NDYyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyMTowMVrOHMd4ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyMTowMVrOHMd4ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDYyNw==", "bodyText": "This could do instanceof EnhancedInstance, should not use reflect.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482834627", "createdAt": "2020-09-03T09:21:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        try {\n+            String value = (String) clazz.getMethod(\"getSkyWalkingDynamicField\").invoke(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDA3MTEzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyNzowMFrOHMpNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0MTowMVrOHMsk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA==", "bodyText": "Don't provide no limitation. That could cause OOM", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020160", "createdAt": "2020-09-03T14:27:00Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,19 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDUzNQ==", "bodyText": "All negative value should be considered as 0.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020535", "createdAt": "2020-09-03T14:27:29Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,19 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA=="}, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NTMxMQ==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483075311", "createdAt": "2020-09-03T15:41:01Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,19 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA=="}, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDA3NjQzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyODowNVrOHMpQuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyODowNVrOHMpQuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n          \n          \n            \n                private final Set<Class<? extends Throwable>> errorStatusExceptions = new CopyOnWriteArraySet<>();", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020985", "createdAt": "2020-09-03T14:28:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDA4Mzg2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyOTozOVrOHMpVTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0NjoxNVrOHMszFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjE1Ng==", "bodyText": "@kezhenxu94 @EvanLjp Any of you know the performance difference between CopyOnWriteArraySet and ConcurrentHashMap? This check is highly performance sensitive.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483022156", "createdAt": "2020-09-03T14:29:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3ODkzMg==", "bodyText": "Read some doc , and replace it  with the  set view of concurrentHashMap to store exception class.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483078932", "createdAt": "2020-09-03T15:46:15Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjE1Ng=="}, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDA5NjI0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDozMTo1N1rOHMpcrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDozMTo1N1rOHMpcrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyNDA0Nw==", "bodyText": "Use TAG_NAME.equals... to avoid NPE.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483024047", "createdAt": "2020-09-03T14:31:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n+    private static final String TAG_NAME = AnnotationMatchExceptionCheckStrategy.class.getSimpleName();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        if (exceptions.contains(clazz)) {\n+            return true;\n+        }\n+        if (e instanceof EnhancedInstance && ((EnhancedInstance) e).getSkyWalkingDynamicField().equals(TAG_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244df648cce7449378b74c853215ddd92d1f53ac"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjAzNzE1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowMjoyM1rOHM8GrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowMjoyM1rOHM8GrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyOTcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Ignored exception list, also affect their subclasses.\n          \n          \n            \n                     * Listed exceptions would not be treated as an error. Because in some codes, the exception is being used as a way of controlling business flow.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483329708", "createdAt": "2020-09-04T01:02:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjAzOTc5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowNDoxM1rOHM8ITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowNDoxM1rOHM8ITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMDEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n          \n          \n            \n                     * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n          \n          \n            \n                     * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n          \n          \n            \n                     * as error status, also affects its subclasses.\n          \n          \n            \n                     * The max recursive depth when checking the exception traced by the agent. Typically, we don't recommend setting this more than 10, which could cause a performance issue. Negative value and 0 would be ignored, which means all exceptions would make the span tagged in error status.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483330125", "createdAt": "2020-09-04T01:04:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n+         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n+         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n+         * as error status, also affects its subclasses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjA0MDM1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowNDozMlrOHM8Ing==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTowNDozMlrOHM8Ing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMDIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static Integer MAX_RECURSIVE_DEPTH = 0;\n          \n          \n            \n                    public static Integer MAX_RECURSIVE_DEPTH = 1;", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483330206", "createdAt": "2020-09-04T01:04:32Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n+         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n+         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n+         * as error status, also affects its subclasses.\n+         */\n+        public static Integer MAX_RECURSIVE_DEPTH = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjA1NDY1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxMzoyMlrOHM8Q7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxMzoyMlrOHM8Q7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMjMzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,\n          \n          \n            \n             * The exception annotated with org.apache.skywalking.apm.toolkit.trace.IgnoredException would not set the span in the error status.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483332335", "createdAt": "2020-09-04T01:13:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+/**\n+ * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjA2MDAxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxNjozMVrOHM8T_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxNjozMVrOHM8T_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMzExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n          \n          \n            \n             * thought as an error, also affects its subclasses.\n          \n          \n            \n             * HierarchyMatchExceptionCheckStrategy does a hierarchy check for a traced exception. If it or its parent has been listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS, the error status of the span wouldn't be changed.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483333117", "createdAt": "2020-09-04T01:16:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+/**\n+ * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n+ * thought as an error, also affects its subclasses.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjA2MTI2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxNzoxN1rOHM8Uvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToxNzoxN1rOHM8Uvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMzMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * All exceptions will be thought of as error status.\n          \n          \n            \n             * All exceptions would make the span tagged as the error status.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483333311", "createdAt": "2020-09-04T01:17:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+/**\n+ * All exceptions will be thought of as error status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjQ0MDgwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTowODozOVrOHM_v_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTowODozOVrOHM_v_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4OTQzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while (isError && Objects.nonNull(e) && maxDepth-- != 0) {\n          \n          \n            \n                    while (isError && Objects.nonNull(e) && maxDepth-- > 0) {\n          \n      \n    \n    \n  \n\nin case the user set maxDepth = -1", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483389436", "createdAt": "2020-09-04T05:08:39Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+@AllArgsConstructor\n+public enum StatusChecker {\n+\n+    /**\n+     * All exceptions will be thought of as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy())),\n+\n+    /**\n+     * If a exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS or\n+     * tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought as an\n+     * error status, also affects its subclasses.\n+     */\n+    HIERARCHY_MATCH(Arrays.asList(\n+        new HierarchyMatchExceptionCheckStrategy(),\n+        new AnnotationMatchExceptionCheckStrategy()\n+    ));\n+\n+    private final List<ExceptionCheckStrategy> strategies;\n+\n+    public boolean checkStatus(Throwable e) {\n+        int maxDepth = Config.StatusCheck.MAX_RECURSIVE_DEPTH;\n+        boolean isError = true;\n+        while (isError && Objects.nonNull(e) && maxDepth-- != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76a85fcf36c28817f8f8d8cf823d2dde6d50084"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzIwNzIyOnYy", "diffSide": "RIGHT", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozNzoxOFrOHNG5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTo0OToxMVrOHNHRhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n          \n          \n            \n             * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n          \n          \n            \n             * annotated with it.\n          \n          \n            \n             * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the exception\n          \n          \n            \n             * has this annotation. \n          \n      \n    \n    \n  \n\n\nBesides the annotation supports integration, the subclasses would be also annotated with it.\n\nI think subclass status is determined by the MAX_RECURSIVE_DEPTH, isn't it?", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483506537", "createdAt": "2020-09-04T09:37:18Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n+ * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n+ * annotated with it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMDUxMQ==", "bodyText": "Yes, 2 ways are all controlled by MAX_RECURSIVE_DEPTH . They are almost equivalent, and both support inheritance.\norg.apache.skywalking.apm.toolkit.trace.IgnoredException\norg.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483510511", "createdAt": "2020-09-04T09:45:04Z", "author": {"login": "EvanLjp"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n+ * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n+ * annotated with it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw=="}, "originalCommit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMjcxMQ==", "bodyText": "Then, please correct the comment.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483512711", "createdAt": "2020-09-04T09:49:11Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n+ * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n+ * annotated with it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw=="}, "originalCommit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzIxMjAwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozODozOVrOHNG8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozODozOVrOHNG8Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNzI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The <code>StatusCheckService</code> checks the status of a exception traced in a span.\n          \n          \n            \n             * The <code>StatusCheckService</code> determines whether the span should be tagged in error status if an exception captured in the scope.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483507287", "createdAt": "2020-09-04T09:38:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import lombok.Getter;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.HIERARCHY_MATCH;\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.OFF;\n+\n+/**\n+ * The <code>StatusCheckService</code> checks the status of a exception traced in a span.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzM1MzM1OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/exception-checker-spring-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NzoxM1rOHOgxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTowNDoxMVrOHOhodw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTEwNA==", "bodyText": "I think you missed the toolkit document update about how to use this annotation.", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r484979104", "createdAt": "2020-09-08T14:47:13Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/exception-checker-spring-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the\n+ * exception has this annotation.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Inherited\n+public @interface IgnoredException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ee57114228c784184228ddf5ed04f8599bcd4b6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5MzE0Mw==", "bodyText": "thx for your notice will add it later", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r484993143", "createdAt": "2020-09-08T15:04:11Z", "author": {"login": "EvanLjp"}, "path": "test/plugin/scenarios/exception-checker-spring-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the\n+ * exception has this annotation.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Inherited\n+public @interface IgnoredException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTEwNA=="}, "originalCommit": {"oid": "0ee57114228c784184228ddf5ed04f8599bcd4b6"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 16, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}