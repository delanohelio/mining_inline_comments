{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODcwODg5", "number": 5413, "title": "Add support for quartz-scheduler", "bodyText": "Please answer these questions before submitting a pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n\n\nResolves #5069", "createdAt": "2020-08-30T06:29:21Z", "url": "https://github.com/apache/skywalking/pull/5413", "merged": true, "mergeCommit": {"oid": "ca957699dcaaa33d104ee574e0e66c5ee1fef589"}, "closed": true, "closedAt": "2020-08-30T15:48:27Z", "author": {"login": "hailin0"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdD3m7BAH2gAyNDc1ODcwODg5OjcyY2RkODk3Y2IxNzNhZTZkYjhiOWFhMjExZjkwMDM0M2FhMzQyMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdD_eyFgFqTQ3ODIxMDMxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72cdd897cb173ae6db8b9aa211f900343aa34200", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/72cdd897cb173ae6db8b9aa211f900343aa34200", "committedDate": "2020-08-30T05:46:18Z", "message": "Add support for quartz-scheduler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f7c2c6b67fe39d6a7f47fda6892e978b8409f40", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3f7c2c6b67fe39d6a7f47fda6892e978b8409f40", "committedDate": "2020-08-30T06:41:46Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5", "committedDate": "2020-08-30T07:01:32Z", "message": "fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTg2NDE2", "url": "https://github.com/apache/skywalking/pull/5413#pullrequestreview-478186416", "createdAt": "2020-08-30T09:24:09Z", "commit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOToyNDowOVrOHJhVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOToyNDozNVrOHJhVkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA==", "bodyText": "What is this? The job parameter?", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479745384", "createdAt": "2020-08-30T09:24:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTQyNQ==", "bodyText": "What is jobGroup? Could you provide a document link?", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479745425", "createdAt": "2020-08-30T09:24:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTk4MzM4", "url": "https://github.com/apache/skywalking/pull/5413#pullrequestreview-478198338", "createdAt": "2020-08-30T12:22:05Z", "commit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjoyMjowNVrOHJia_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjoyMjowNVrOHJia_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MzE5OQ==", "bodyText": "I mean here, you build a new map, which is expensive. If originalJobDataMap could toString directly, we should do that.", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479763199", "createdAt": "2020-08-30T12:22:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);\n+    }\n+\n+    private static Map<String, String> getJobDataMap(JobDetail jobDetail) {\n+        JobDataMap originalJobDataMap = jobDetail.getJobDataMap();\n+        if (originalJobDataMap != null) {\n+            Map<String, String> jobDataMap = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5048e111352782dd3d743619d25cac32cd19f9a", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b5048e111352782dd3d743619d25cac32cd19f9a", "committedDate": "2020-08-30T13:07:35Z", "message": "fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjEwMjU3", "url": "https://github.com/apache/skywalking/pull/5413#pullrequestreview-478210257", "createdAt": "2020-08-30T14:55:51Z", "commit": {"oid": "b5048e111352782dd3d743619d25cac32cd19f9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNDo1NTo1MlrOHJjcWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNDo1NTo1MlrOHJjcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc3OTkyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Plugin of quartz-scheduler-2.x in optional plugin folder. The reason of being optional plugin is, many task scheduling system are based on quartz-scheduler, this will caused duplicate tracing.\n          \n          \n            \n            * Plugin of quartz-scheduler-2.x in the optional plugin folder. The reason for being an optional plugin is, many task scheduling systems are based on quartz-scheduler, this will cause duplicate tracing and link different sub-tasks as they share the same quartz level trigger, such as ElasticJob.", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479779929", "createdAt": "2020-08-30T14:55:52Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -170,6 +170,7 @@ Now, we have the following known optional plugins.\n * Plugin of Spring Cloud Gateway 2.1.x in optional plugin folder. Please only active this plugin when you install agent in Spring Gateway. spring-cloud-gateway-2.x-plugin and spring-webflux-5.x-plugin are both required.\n * Plugin of Spring Transaction in optional plugin folder. The reason of being optional plugin is, many local span are generated, which also spend more CPU, memory and network.\n * [Plugin of Kotlin coroutine](agent-optional-plugins/Kotlin-Coroutine-plugin.md) provides the tracing across coroutines automatically. As it will add local spans to all across routines scenarios, Please assess the performance impact.\n+* Plugin of quartz-scheduler-2.x in optional plugin folder. The reason of being optional plugin is, many task scheduling system are based on quartz-scheduler, this will caused duplicate tracing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5048e111352782dd3d743619d25cac32cd19f9a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c04ce017973a3702d559cd7df83db40ad08e5429", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/c04ce017973a3702d559cd7df83db40ad08e5429", "committedDate": "2020-08-30T14:56:03Z", "message": "Update docs/en/setup/service-agent/java-agent/README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjEwMzEy", "url": "https://github.com/apache/skywalking/pull/5413#pullrequestreview-478210312", "createdAt": "2020-08-30T14:56:39Z", "commit": {"oid": "c04ce017973a3702d559cd7df83db40ad08e5429"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1972, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}