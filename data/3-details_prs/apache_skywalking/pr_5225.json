{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDk3NzIx", "number": 5225, "title": "Add HBase hbase-client plugin", "bodyText": "Please answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#5212", "createdAt": "2020-08-04T02:58:06Z", "url": "https://github.com/apache/skywalking/pull/5225", "merged": true, "mergeCommit": {"oid": "7a20c260bbff806905eb2975f4176ab9106f03d0"}, "closed": true, "closedAt": "2020-08-05T09:55:21Z", "author": {"login": "zhaoyuguang"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7diWlgH2gAyNDYyNDk3NzIxOmQ2ZDZkYTMzMTIwNThjNGNhNjM4MmY4MTFkOWNjZjVmMjYxMTdkNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc73kAJgFqTQ2MTQ4MTc2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d6d6da3312058c4ca6382f811d9ccf5f26117d41", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/d6d6da3312058c4ca6382f811d9ccf5f26117d41", "committedDate": "2020-08-04T02:52:23Z", "message": "add hbase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28fa9239a5ffcb8314b930774b68057012b71bbc", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/28fa9239a5ffcb8314b930774b68057012b71bbc", "committedDate": "2020-08-04T02:58:15Z", "message": "Merge branch 'master' into zhaoyuguang_00003"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "683a4e3d894f0467e6a5c63bd0c87dfc2ad2c120", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/683a4e3d894f0467e6a5c63bd0c87dfc2ad2c120", "committedDate": "2020-08-04T03:08:35Z", "message": "fix version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "017f4fe7c355acf849f657e3dc6d29eb4df49659", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/017f4fe7c355acf849f657e3dc6d29eb4df49659", "committedDate": "2020-08-04T04:05:23Z", "message": "fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf06f70b0ed3108f8d563bb46f139b79ab6cd768", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/cf06f70b0ed3108f8d563bb46f139b79ab6cd768", "committedDate": "2020-08-04T05:12:49Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd", "committedDate": "2020-08-04T06:53:44Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTYyMDEx", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-460562011", "createdAt": "2020-08-04T07:29:04Z", "commit": {"oid": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoyOTowNFrOG7UcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoyOTowNFrOG7UcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDE3Nw==", "bodyText": "Does this method provide a header/metadata injection way? Or does HBase network protocol support that? If so, we should consider that, because as a Java based server, we will have a chance to tracing and monitoring the HBase server in the future.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r464854177", "createdAt": "2020-08-04T07:29:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/define/HTableInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HTableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.apache.hadoop.hbase.client.HTable\";\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.hbase.HTableInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArguments(6);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPT_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"delete\").or(named(\"put\")).or(isPublic().and(named(\"get\")))\n+                            .or(named(\"getScanner\").and(takesArguments(1))\n+                                    .and(takesArgument(0, named(\"org.apache.hadoop.hbase.client.Scan\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e2c62a97007f9138477943243d34af3f74be96", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/d1e2c62a97007f9138477943243d34af3f74be96", "committedDate": "2020-08-04T09:53:41Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c45a43bcb4ca65cfef8f6bc061516bcdf615294b", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/c45a43bcb4ca65cfef8f6bc061516bcdf615294b", "committedDate": "2020-08-04T11:37:01Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/fd02e9b7b657a934ea7c8c639089718e4c08fb77", "committedDate": "2020-08-04T11:48:36Z", "message": "Merge branch 'master' into zhaoyuguang_00003"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODAzNDQy", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-460803442", "createdAt": "2020-08-04T13:18:26Z", "commit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxODoyNlrOG7f_Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxODoyNlrOG7f_Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw==", "bodyText": "What is the case not instanceof OperationWithAttributes?", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465043247", "createdAt": "2020-08-04T13:18:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/Htable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODUwNTM5", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-460850539", "createdAt": "2020-08-04T14:11:10Z", "commit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMToxMFrOG7iMsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMToxMFrOG7iMsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTQ3NQ==", "bodyText": "HBase client with HTable? What is the relationship between these?", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465079475", "createdAt": "2020-08-04T14:11:10Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "diffHunk": "@@ -70,6 +70,8 @@\n     * [SolrJ](https://github.com/apache/lucene-solr/tree/master/solr/solrj) 7.x\n   * [Cassandra](https://github.com/apache/cassandra) 3.x\n     * [cassandra-java-driver](https://github.com/datastax/java-driver) 3.7.0-3.7.2\n+  * Hbase\n+    * [hbase-client](https://github.com/apache/hbase) HTable 1.x", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODUwOTQ1", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-460850945", "createdAt": "2020-08-04T14:11:32Z", "commit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMTozMlrOG7iNzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMTozMlrOG7iNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTc1OA==", "bodyText": "I think all Hbase should be HBase according to the official document.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465079758", "createdAt": "2020-08-04T14:11:32Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -311,6 +311,9 @@ GraphQL:\n spring-annotation:\n   id: 93\n   languages: Java\n+Hbase:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f4c3667d96678b998373f06918923b1346f74c", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/d4f4c3667d96678b998373f06918923b1346f74c", "committedDate": "2020-08-04T15:27:54Z", "message": "Merge branch 'master' into zhaoyuguang_00003"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/93b77e62f7b89f055db12af6563c91cfeb962dd6", "committedDate": "2020-08-05T01:42:53Z", "message": "fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjg1OTUw", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-461285950", "createdAt": "2020-08-05T01:50:00Z", "commit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1MDowMVrOG73SJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1MDowMVrOG73SJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDkzNA==", "bodyText": "The agent core has try-catch already. We don't need this in the interceptor.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465424934", "createdAt": "2020-08-05T01:50:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/HTable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {\n+            ContextCarrier contextCarrier = new ContextCarrier();\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    contextCarrier, (String) objInst.getSkyWalkingDynamicField());\n+            CarrierItem next = contextCarrier.items();\n+            while (next.hasNext()) {\n+                next = next.next();\n+                if (operation != null) {\n+                    operation.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                } else {\n+                    for (OperationWithAttributes o : operations) {\n+                        o.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                    }\n+                }\n+            }\n+        } else {\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    (String) objInst.getSkyWalkingDynamicField());\n+        }\n+        span.setComponent(ComponentsDefine.HBASE);\n+        Tags.DB_TYPE.set(span, HBASE_DB_TYPE);\n+        Tags.DB_INSTANCE.set(span, ((HTable) objInst).getName().getNameAsString());\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        AbstractSpan span = ContextManager.activeSpan();\n+        span.errorOccurred();\n+        span.log(t);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        try {\n+            Configuration connection = ((ClusterConnection) allArguments[1]).getConfiguration();\n+            Field field = connection.getClass().getDeclaredField(\"overlay\");\n+            field.setAccessible(true);\n+            Properties properties = (Properties) field.get(connection);\n+            for (Map.Entry entry : properties.entrySet()) {\n+                if (\"hbase.zookeeper.quorum\".equals(entry.getKey())) {\n+                    objInst.setSkyWalkingDynamicField(entry.getValue().toString());\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjg4Mjc2", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-461288276", "createdAt": "2020-08-05T01:57:40Z", "commit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1Nzo0MFrOG73ahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1Nzo0MFrOG73ahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzA3Nw==", "bodyText": "What is this? If they are same, you don't need mapping.", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465427077", "createdAt": "2020-08-05T01:57:40Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  Hase: HBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c343ada9b42edc0d77a78f337c9c20a1926c472c", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/c343ada9b42edc0d77a78f337c9c20a1926c472c", "committedDate": "2020-08-05T01:58:37Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d488f2742cf1418a5d866531d55bd826108c46a1", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/d488f2742cf1418a5d866531d55bd826108c46a1", "committedDate": "2020-08-05T02:48:16Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd29af488f03b076a51a42cb686319f4a325b9d4", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/cd29af488f03b076a51a42cb686319f4a325b9d4", "committedDate": "2020-08-05T03:36:47Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0", "committedDate": "2020-08-05T05:35:25Z", "message": "Merge branch 'master' into zhaoyuguang_00003"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2fa99dd069d00526616e28ec652a5862d5b7a9", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/6a2fa99dd069d00526616e28ec652a5862d5b7a9", "committedDate": "2020-08-05T05:37:33Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb9a0e9e8aa9a6d4d56f5fd97ea3dfb9b8edfea1", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/cb9a0e9e8aa9a6d4d56f5fd97ea3dfb9b8edfea1", "committedDate": "2020-08-05T05:37:55Z", "message": "Merge branch 'zhaoyuguang_00003' of https://github.com/zhaoyuguang/incubator-skywalking into zhaoyuguang_00003"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzkwMjA5", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-461390209", "createdAt": "2020-08-05T06:59:49Z", "commit": {"oid": "8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1OTo0OVrOG78v-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1OTo0OVrOG78v-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDQ4OQ==", "bodyText": "Whether we don't need this? Have you checked locally?", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465514489", "createdAt": "2020-08-05T06:59:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/component-libraries.yml", "diffHunk": "@@ -493,4 +496,5 @@ Component-Server-Mappings:\n   Mysqli: Mysql\n   influxdb-java: InfluxDB\n   Predis: Redis\n-  PyMysql: Mysql\n\\ No newline at end of file\n+  PyMysql: Mysql\n+  HBase: HBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4751d8f3b8d9daac5017477bf82ea55de02081", "author": {"user": {"login": "zhaoyuguang", "name": "\u4e8e\u7389\u6854"}}, "url": "https://github.com/apache/skywalking/commit/ed4751d8f3b8d9daac5017477bf82ea55de02081", "committedDate": "2020-08-05T08:14:37Z", "message": "Merge branch 'master' into zhaoyuguang_00003"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNDgxNzYw", "url": "https://github.com/apache/skywalking/pull/5225#pullrequestreview-461481760", "createdAt": "2020-08-05T09:11:43Z", "commit": {"oid": "ed4751d8f3b8d9daac5017477bf82ea55de02081"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1850, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}