{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMjM1MTQ5", "number": 4555, "title": "Correlation protocol implement", "bodyText": "Please answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#4509\n\n\n\nNew feature or improvement\n\nImplement Correlation protocol, java version.", "createdAt": "2020-03-23T08:35:26Z", "url": "https://github.com/apache/skywalking/pull/4555", "merged": true, "mergeCommit": {"oid": "569baf3236226b17c3b40e376e5681b5623abf38"}, "closed": true, "closedAt": "2020-03-26T01:02:15Z", "author": {"login": "mrproliu"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQYu3fgH2gAyMzkyMjM1MTQ5OmIxYjkwZWIxMWU5ODVmZTA2OThhMzUxMzU0YzZiNTJmZDE5MTljODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRRb-MAFqTM4MTYzODUwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1b90eb11e985fe0698a351354c6b52fd1919c86", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b1b90eb11e985fe0698a351354c6b52fd1919c86", "committedDate": "2020-03-23T06:57:47Z", "message": "Provide correlation protocol java implement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32b949f3b672dfe75fa1b05f075582e61578d016", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/32b949f3b672dfe75fa1b05f075582e61578d016", "committedDate": "2020-03-23T08:26:02Z", "message": "add doc link, check toolkit plugin test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/9e3afc528fb5b35bec031d16597eb86e28bc8889", "committedDate": "2020-03-23T08:36:00Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjcxODk4", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-379271898", "createdAt": "2020-03-23T09:50:25Z", "commit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1MDoyNVrOF590Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1NTo0MFrOF5-CHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNTk3NA==", "bodyText": "We don't add any configuration in the default agent.config, unless they are necessary. For the correlation context, they are not. Please remove them, and keep them in the documentation only.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396325974", "createdAt": "2020-03-23T09:50:25Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -77,3 +77,9 @@ logging.level=${SW_LOGGING_LEVEL:INFO}\n \n # mysql plugin configuration\n # plugin.mysql.trace_sql_parameters=${SW_MYSQL_TRACE_SQL_PARAMETERS:false}\n+\n+# Correlation max key count in tracing context\n+correlation.key_count=${SW_CORRELATION_KEY_COUNT:3}\n+\n+# Correlation max value length in the every key\n+correlation.value_length=${SW_CORRELATION_VALUE_LENGTH:128}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNjM5OA==", "bodyText": "Why this is not a part of current toolkit document?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396326398", "createdAt": "2020-03-23T09:51:05Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-correlation.md", "diffHunk": "@@ -0,0 +1,33 @@\n+## Cross Process Correlation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNjY3Nw==", "bodyText": "Clearly, you are adding the new APIs in the same lib jar, but you separate the document.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396326677", "createdAt": "2020-03-23T09:51:29Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-correlation.md", "diffHunk": "@@ -0,0 +1,33 @@\n+## Cross Process Correlation\n+\n+## Introduce\n+This plugin is help user to transport custom data in the tracing context. [Follow this to get protocol description.](../../../protocols/Skywalking-Cross-Process-Correlation-Headers-Protocol-v1.md)\n+\n+## How to use it\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-trace</artifactId>\n+      <version>${skywalking.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNzE5MA==", "bodyText": "A question about the design, what is the point of result, how do the user codes react with this?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396327190", "createdAt": "2020-03-23T09:52:16Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-correlation.md", "diffHunk": "@@ -0,0 +1,33 @@\n+## Cross Process Correlation\n+\n+## Introduce\n+This plugin is help user to transport custom data in the tracing context. [Follow this to get protocol description.](../../../protocols/Skywalking-Cross-Process-Correlation-Headers-Protocol-v1.md)\n+\n+## How to use it\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-trace</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* Use `CorrelationContext.set()` API to setting custom data.\n+```java\n+CorrelationSettingResult settingResult = CorrelationContext.set(\"customKey\", \"customValue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNzk4MQ==", "bodyText": "I think in the JDK 1.8, the recommended way is returning option. We can't have that because agent used to be JDK1.6 compatible, but we are not anymore. The new API should follow the JDK1.8 sytle.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396327981", "createdAt": "2020-03-23T09:53:23Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-correlation.md", "diffHunk": "@@ -0,0 +1,33 @@\n+## Cross Process Correlation\n+\n+## Introduce\n+This plugin is help user to transport custom data in the tracing context. [Follow this to get protocol description.](../../../protocols/Skywalking-Cross-Process-Correlation-Headers-Protocol-v1.md)\n+\n+## How to use it\n+* Dependency the toolkit, such as using maven or gradle\n+```xml\n+   <dependency>\n+      <groupId>org.apache.skywalking</groupId>\n+      <artifactId>apm-toolkit-trace</artifactId>\n+      <version>${skywalking.version}</version>\n+   </dependency>\n+```\n+\n+* Use `CorrelationContext.set()` API to setting custom data.\n+```java\n+CorrelationSettingResult settingResult = CorrelationContext.set(\"customKey\", \"customValue\");\n+```\n+_Sample codes only_\n+\n+1. Add `CorrelationContext.set` to setting your custom data.\n+1. Key and value only support `String` type.\n+1. Please follow [the agent configuration](README.md#table-of-agent-configuration-properties) to get more setting limit.\n+\n+* Use `CorrelationContext.get()` API to get custom data.\n+```java\n+CorrelationContext.get(\"customKey\");\n+```\n+_Sample codes only_\n+\n+1. `CorrelationContext.get` to get custom data.\n+1. Return empty string if cannot found the custom key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyODc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * If you want to cross process correlation your custom data, use [Correlation solution APIs](Application-toolkit-correlation.md).\n          \n          \n            \n                * If you want to propagate custom data by using tracing context channel, use [Correlation solution APIs](Application-toolkit-correlation.md).", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396328779", "createdAt": "2020-03-23T09:54:33Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -160,6 +162,7 @@ Now, we have the following known bootstrap plugins.\n [log4j2](Application-toolkit-log4j-2.x.md), [logback](Application-toolkit-logback-1.x.md)\n     * If you want to use annotations or SkyWalking native APIs to read context, try [SkyWalking manual APIs](Application-toolkit-trace.md)\n     * If you want to continue traces across thread manually, use [across thread solution APIs](Application-toolkit-trace-cross-thread.md).\n+    * If you want to cross process correlation your custom data, use [Correlation solution APIs](Application-toolkit-correlation.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyOTUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * If you want to use annotations or SkyWalking native APIs to read context, try [SkyWalking manual APIs](Application-toolkit-trace.md)\n          \n          \n            \n                * If you want your codes interact with SkyWalking agent, including `getting trace id`, `set tags`, etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md)", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396329503", "createdAt": "2020-03-23T09:55:40Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -160,6 +162,7 @@ Now, we have the following known bootstrap plugins.\n [log4j2](Application-toolkit-log4j-2.x.md), [logback](Application-toolkit-logback-1.x.md)\n     * If you want to use annotations or SkyWalking native APIs to read context, try [SkyWalking manual APIs](Application-toolkit-trace.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzgyMjcy", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-379382272", "createdAt": "2020-03-23T12:29:03Z", "commit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyOTowM1rOF6DM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjozODozOFrOF6DgQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNDE2NA==", "bodyText": "Should be renamed to ELEMENT_MAX_NUMBER.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396414164", "createdAt": "2020-03-23T12:29:03Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -394,4 +394,16 @@\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n     }\n+\n+    public static class Correlation {\n+        /**\n+         * Max key count in the correlation context.\n+         */\n+        public static int KEY_COUNT = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNDYxOQ==", "bodyText": "Should be renamed to VALUE_MAX_LENGTH .", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396414619", "createdAt": "2020-03-23T12:29:54Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -394,4 +394,16 @@\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n     }\n+\n+    public static class Correlation {\n+        /**\n+         * Max key count in the correlation context.\n+         */\n+        public static int KEY_COUNT = 3;\n+\n+        /**\n+         * Max value length in each key.\n+         */\n+        public static int VALUE_LENGTH = 128;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjM2Mg==", "bodyText": "Why there is reset here? Why does a context require reset?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396416362", "createdAt": "2020-03-23T12:33:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private volatile Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(0);\n+    }\n+\n+    public SettingResult set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return SettingResult.buildWithSettingError(\"Key Cannot be null\");\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }\n+\n+        // check value length\n+        if (value.length() > Config.Correlation.VALUE_LENGTH) {\n+            return SettingResult.buildWithSettingError(\"Out out correlation value length limit\");\n+        }\n+\n+        // already contain key\n+        if (data.containsKey(key)) {\n+            final String previousValue = data.put(key, value);\n+            return SettingResult.buildWithSuccess(previousValue);\n+        }\n+\n+        // check keys count\n+        if (data.size() >= Config.Correlation.KEY_COUNT) {\n+            return SettingResult.buildWithSettingError(\"Out out correlation key count limit\");\n+        }\n+\n+        // setting\n+        data.put(key, value);\n+        return SettingResult.buildWithSuccess(null);\n+    }\n+\n+    public String get(String key) {\n+        if (key == null) {\n+            return \"\";\n+        }\n+\n+        final String value = data.get(key);\n+        return value == null ? \"\" : value;\n+    }\n+\n+    /**\n+     * Serialize this {@link CorrelationContext} to a {@link String}\n+     *\n+     * @return the serialization string.\n+     */\n+    String serialize() {\n+        if (data.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        return data.entrySet().stream()\n+            .map(entry -> Base64.encode(entry.getKey()) + \":\" + Base64.encode(entry.getValue()))\n+            .collect(Collectors.joining(\",\"));\n+    }\n+\n+    /**\n+     * Deserialize data from {@link String}\n+     */\n+    void deserialize(String value) {\n+        if (StringUtil.isEmpty(value)) {\n+            return;\n+        }\n+\n+        for (String perData : value.split(\",\")) {\n+            final String[] parts = perData.split(\":\");\n+            String perDataKey = parts[0];\n+            String perDataValue = parts.length > 1 ? parts[1] : \"\";\n+            data.put(Base64.decode2UTFString(perDataKey), Base64.decode2UTFString(perDataValue));\n+        }\n+    }\n+\n+    /**\n+     * Reset correlation context from other context\n+     */\n+    public void resetFrom(CorrelationContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjkxMA==", "bodyText": "Why this could be changed? And further as a volatile? What are the cases?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396416910", "createdAt": "2020-03-23T12:34:18Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private volatile Map<String, String> data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNzU2NA==", "bodyText": "Why isn't this inject/extract like the existing API design?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396417564", "createdAt": "2020-03-23T12:35:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private volatile Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(0);\n+    }\n+\n+    public SettingResult set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return SettingResult.buildWithSettingError(\"Key Cannot be null\");\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }\n+\n+        // check value length\n+        if (value.length() > Config.Correlation.VALUE_LENGTH) {\n+            return SettingResult.buildWithSettingError(\"Out out correlation value length limit\");\n+        }\n+\n+        // already contain key\n+        if (data.containsKey(key)) {\n+            final String previousValue = data.put(key, value);\n+            return SettingResult.buildWithSuccess(previousValue);\n+        }\n+\n+        // check keys count\n+        if (data.size() >= Config.Correlation.KEY_COUNT) {\n+            return SettingResult.buildWithSettingError(\"Out out correlation key count limit\");\n+        }\n+\n+        // setting\n+        data.put(key, value);\n+        return SettingResult.buildWithSuccess(null);\n+    }\n+\n+    public String get(String key) {\n+        if (key == null) {\n+            return \"\";\n+        }\n+\n+        final String value = data.get(key);\n+        return value == null ? \"\" : value;\n+    }\n+\n+    /**\n+     * Serialize this {@link CorrelationContext} to a {@link String}\n+     *\n+     * @return the serialization string.\n+     */\n+    String serialize() {\n+        if (data.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        return data.entrySet().stream()\n+            .map(entry -> Base64.encode(entry.getKey()) + \":\" + Base64.encode(entry.getValue()))\n+            .collect(Collectors.joining(\",\"));\n+    }\n+\n+    /**\n+     * Deserialize data from {@link String}\n+     */\n+    void deserialize(String value) {\n+        if (StringUtil.isEmpty(value)) {\n+            return;\n+        }\n+\n+        for (String perData : value.split(\",\")) {\n+            final String[] parts = perData.split(\":\");\n+            String perDataKey = parts[0];\n+            String perDataValue = parts.length > 1 ? parts[1] : \"\";\n+            data.put(Base64.decode2UTFString(perDataKey), Base64.decode2UTFString(perDataValue));\n+        }\n+    }\n+\n+    /**\n+     * Reset correlation context from other context\n+     */\n+    public void resetFrom(CorrelationContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNjM2Mg=="}, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxNzk5Mg==", "bodyText": "inject is for further propagation, I am confused the implementation here.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396417992", "createdAt": "2020-03-23T12:36:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/IgnoredTracerContext.java", "diffHunk": "@@ -32,30 +32,33 @@\n public class IgnoredTracerContext implements AbstractTracerContext {\n     private static final NoopSpan NOOP_SPAN = new NoopSpan();\n \n+    private final CorrelationContext correlationContext;\n+\n     private int stackDepth;\n \n     public IgnoredTracerContext() {\n         this.stackDepth = 0;\n+        this.correlationContext = new CorrelationContext();\n     }\n \n     @Override\n     public void inject(ContextCarrier carrier) {\n-\n+        carrier.getCorrelationContext().resetFrom(this.correlationContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxOTEzOQ==", "bodyText": "As you are propagating the context, and this is called a snapshot, you should clone the existing context to new thread. Otherwise, this is not a ContextSnapshot. Think in this way, when you do the thread snapshot, what does it mean?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396419139", "createdAt": "2020-03-23T12:38:38Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextSnapshot.java", "diffHunk": "@@ -49,12 +49,15 @@\n \n     private int entryApplicationInstanceId = DictionaryUtil.nullValue();\n \n-    ContextSnapshot(ID traceSegmentId, int spanId, List<DistributedTraceId> distributedTraceIds) {\n+    private CorrelationContext correlationContext;\n+\n+    ContextSnapshot(ID traceSegmentId, int spanId, List<DistributedTraceId> distributedTraceIds, CorrelationContext correlationContext) {\n         this.traceSegmentId = traceSegmentId;\n         this.spanId = spanId;\n         if (distributedTraceIds != null) {\n             this.primaryDistributedTraceId = distributedTraceIds.get(0);\n         }\n+        this.correlationContext = correlationContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3afc528fb5b35bec031d16597eb86e28bc8889"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a510f4559734a837d63c768e45d5246081eeb6e0", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/a510f4559734a837d63c768e45d5246081eeb6e0", "committedDate": "2020-03-23T15:17:08Z", "message": "fix some issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce7a3e9201fa65067677d2721dc55dc65fc2650", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/9ce7a3e9201fa65067677d2721dc55dc65fc2650", "committedDate": "2020-03-23T15:29:21Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8da122e2cb3ded5057ca56751d1856e4eb36c52e", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/8da122e2cb3ded5057ca56751d1856e4eb36c52e", "committedDate": "2020-03-23T15:37:45Z", "message": "fix plugin test error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/71d076b3208a07ac2aadc2e3be41f54c006553b8", "committedDate": "2020-03-23T15:38:18Z", "message": "Merge remote-tracking branch 'origin/correlation-protocol-implement' into correlation-protocol-implement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTM3MDQ0", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-379937044", "createdAt": "2020-03-24T01:13:40Z", "commit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxMzo0MFrOF6dzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjo1NDozNFrOF6fV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg0OTk5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return not empty when override the previous value.\n          \n          \n            \n                 * @return previous value if it exists.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396849997", "createdAt": "2020-03-24T01:13:40Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Propagate the custom data in the tracing context.\n+ */\n+public class CorrelationContext {\n+\n+    /**\n+     * Try to get the custom value from trace context.\n+     *\n+     * @return custom data value.\n+     */\n+    public static Optional<String> get(String key) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Setting the custom key/value into trace context.\n+     *\n+     * @return not empty when override the previous value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MzA1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Max value length in each key.\n          \n          \n            \n                     * Max value length of each element.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396853059", "createdAt": "2020-03-24T01:25:40Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -394,4 +394,16 @@\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n         }\n     }\n+\n+    public static class Correlation {\n+        /**\n+         * Max element count in the correlation context.\n+         */\n+        public static int ELEMENT_MAX_NUMBER = 3;\n+\n+        /**\n+         * Max value length in each key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MzY3Ng==", "bodyText": "0 should be replaced by ELEMENT_MAX_NUMBER to avoid resize for most cases.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396853676", "createdAt": "2020-03-24T01:27:56Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private final Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDc1OA==", "bodyText": "Remove this, we don't log unless this is a serious issue.  Can't see the case this will happen.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396870758", "createdAt": "2020-03-24T02:36:55Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CorrelationContextGetInterceptor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.trace;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+public class CorrelationContextGetInterceptor implements StaticMethodsAroundInterceptor {\n+\n+    private ILog logger = LogManager.getLogger(CorrelationContextGetInterceptor.class);\n+\n+    @Override\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+        final String key = (String) allArguments[0];\n+        final Optional<String> data = ContextManager.getCorrelationContext().get(key);\n+\n+        result.defineReturnValue(data);\n+    }\n+\n+    @Override\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+        logger.error(\"Failed to get correlation value.\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDc5Mg==", "bodyText": "Same here.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396870792", "createdAt": "2020-03-24T02:37:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CorrelationContextSetInterceptor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.trace;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+public class CorrelationContextSetInterceptor implements StaticMethodsAroundInterceptor {\n+\n+    private ILog logger = LogManager.getLogger(CorrelationContextSetInterceptor.class);\n+\n+    @Override\n+    public void beforeMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, MethodInterceptResult result) {\n+        final String key = (String) allArguments[0];\n+        final String value = (String) allArguments[1];\n+        final Optional<String> previous = ContextManager.getCorrelationContext().set(key, value);\n+\n+        result.defineReturnValue(previous);\n+    }\n+\n+    @Override\n+    public Object afterMethod(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Object ret) {\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(Class clazz, Method method, Object[] allArguments, Class<?>[] parameterTypes, Throwable t) {\n+        logger.error(\"Failed to setting correlation.\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use `CorrelationContext.set()` API to setting custom data in tracing context. Please follow [the agent configuration](README.md#table-of-agent-configuration-properties) to get more setting limit.\n          \n          \n            \n            * Use `CorrelationContext.set()` API to setting custom data in tracing context.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396871171", "createdAt": "2020-03-24T02:38:25Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,13 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `CorrelationContext.set()` API to setting custom data in tracing context. Please follow [the agent configuration](README.md#table-of-agent-configuration-properties) to get more setting limit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MTcxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            CorrelationContext configuration descriptions could be found in the [the agent configuration](README.md#table-of-agent-configuration-properties) documentation, with `correlation.` as the prefix.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396871715", "createdAt": "2020-03-24T02:40:43Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,13 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `CorrelationContext.set()` API to setting custom data in tracing context. Please follow [the agent configuration](README.md#table-of-agent-configuration-properties) to get more setting limit.\n+```java\n+optional<String> previous = CorrelationContext.set(\"customKey\", \"customValue\");\n+```\n+\n+* Use `CorrelationContext.get()` API to get custom data.\n+```java\n+optional<String> value = CorrelationContext.get(\"customKey\");\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `correlation.element_max_number`|Correlation max element count in the correlation context.|`3`|\n          \n          \n            \n            `correlation.element_max_number`| Max element count of the correlation context.|`3`|", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396872008", "createdAt": "2020-03-24T02:41:55Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -125,6 +125,8 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`correlation.element_max_number`|Correlation max element count in the correlation context.|`3`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjA4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `correlation.value_max_length`|Correlation max value length in each key.|`128`|\n          \n          \n            \n            `correlation.value_max_length`|Max value length of correlation context element.|`128`|", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396872086", "createdAt": "2020-03-24T02:42:15Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -125,6 +125,8 @@ property key | Description | Default |\n `plugin.tomcat.collect_http_params`| This config item controls that whether the Tomcat plugin should collect the parameters of the request. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.springmvc.collect_http_params`| This config item controls that whether the SpringMVC plugin should collect the parameters of the request, when your Spring application is based on Tomcat, consider only setting either `plugin.tomcat.collect_http_params` or `plugin.springmvc.collect_http_params`. Also, activate implicitly in the profiled trace. | `false` |\n `plugin.http.http_params_length_threshold`| When `COLLECT_HTTP_PARAMS` is enabled, how many characters to keep and send to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is added for the sake of performance.  | `1024` |\n+`correlation.element_max_number`|Correlation max element count in the correlation context.|`3`|\n+`correlation.value_max_length`|Correlation max value length in each key.|`128`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MjM1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * If you want your codes interact with SkyWalking agent, including `getting trace id`, `set tags`, etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).\n          \n          \n            \n                * If you want your codes to interact with SkyWalking agent, including `getting trace id`, `set tags`, `propagating custom data` etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396872352", "createdAt": "2020-03-24T02:43:16Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -158,7 +160,7 @@ Now, we have the following known bootstrap plugins.\n     * If you want to use OpenTracing Java APIs, try [SkyWalking OpenTracing compatible tracer](Opentracing.md). More details you could find at http://opentracing.io\n     * If you want to print trace context(e.g. traceId) in your logs, choose the log frameworks, [log4j](Application-toolkit-log4j-1.x.md), \n [log4j2](Application-toolkit-log4j-2.x.md), [logback](Application-toolkit-logback-1.x.md)\n-    * If you want to use annotations or SkyWalking native APIs to read context, try [SkyWalking manual APIs](Application-toolkit-trace.md)\n+    * If you want your codes interact with SkyWalking agent, including `getting trace id`, `set tags`, etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NTE5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Propagate the custom data in the tracing context.\n          \n          \n            \n             * CorrelationContext is the interactive API for end user to put/set custom data.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396875190", "createdAt": "2020-03-24T02:54:18Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/apm-toolkit-trace-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Propagate the custom data in the tracing context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NTI0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Propagate the custom data in the tracing context.\n          \n          \n            \n             * CorrelationContext is the interactive API for end user to put/set custom data.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396875248", "createdAt": "2020-03-24T02:54:34Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Propagate the custom data in the tracing context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d076b3208a07ac2aadc2e3be41f54c006553b8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b7e05391a96abfeed0edec911c6d54675bd426", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/d1b7e05391a96abfeed0edec911c6d54675bd426", "committedDate": "2020-03-24T02:55:04Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/fcf4aee99dd99b95734113947f947a95e8aa57b1", "committedDate": "2020-03-24T04:15:11Z", "message": "resolve issues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTkyODA3", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-379992807", "createdAt": "2020-03-24T04:28:08Z", "commit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNDoyODowOFrOF6gokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyNjoyOFrOF6haIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NjQwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use `CorrelationContext.set()` API to setting custom data in tracing context. \n          \n          \n            \n            * Use `CorrelationContext.set()` API to set custom data in tracing context.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396896402", "createdAt": "2020-03-24T04:28:08Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,13 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `CorrelationContext.set()` API to setting custom data in tracing context. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NjQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            optional<String> previous = CorrelationContext.set(\"customKey\", \"customValue\");\n          \n          \n            \n            Optional<String> previous = CorrelationContext.set(\"customKey\", \"customValue\");", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396896440", "createdAt": "2020-03-24T04:28:19Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,13 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `CorrelationContext.set()` API to setting custom data in tracing context. \n+```java\n+optional<String> previous = CorrelationContext.set(\"customKey\", \"customValue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NjQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            optional<String> value = CorrelationContext.get(\"customKey\");\n          \n          \n            \n            Optional<String> value = CorrelationContext.get(\"customKey\");", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396896476", "createdAt": "2020-03-24T04:28:30Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,13 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `CorrelationContext.set()` API to setting custom data in tracing context. \n+```java\n+optional<String> previous = CorrelationContext.set(\"customKey\", \"customValue\");\n+```\n+\n+* Use `CorrelationContext.get()` API to get custom data.\n+```java\n+optional<String> value = CorrelationContext.get(\"customKey\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NjUzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CorrelationContext configuration descriptions could be found in the [the agent configuration](README.md#table-of-agent-configuration-properties) documentation, with `correlation.` as the prefix.\n          \n          \n            \n            CorrelationContext configuration descriptions could be found in [the agent configuration](README.md#table-of-agent-configuration-properties) documentation, with `correlation.` as the prefix.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396896536", "createdAt": "2020-03-24T04:28:45Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,13 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `CorrelationContext.set()` API to setting custom data in tracing context. \n+```java\n+optional<String> previous = CorrelationContext.set(\"customKey\", \"customValue\");\n+```\n+\n+* Use `CorrelationContext.get()` API to get custom data.\n+```java\n+optional<String> value = CorrelationContext.get(\"customKey\");\n+```\n+CorrelationContext configuration descriptions could be found in the [the agent configuration](README.md#table-of-agent-configuration-properties) documentation, with `correlation.` as the prefix.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzEyOA==", "bodyText": "please unify the forms,\ngetting trace id, setting tags, propagating custom data\nor\nget trace id, set tags, propagate custom data", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396897128", "createdAt": "2020-03-24T04:31:47Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -158,7 +160,7 @@ Now, we have the following known bootstrap plugins.\n     * If you want to use OpenTracing Java APIs, try [SkyWalking OpenTracing compatible tracer](Opentracing.md). More details you could find at http://opentracing.io\n     * If you want to print trace context(e.g. traceId) in your logs, choose the log frameworks, [log4j](Application-toolkit-log4j-1.x.md), \n [log4j2](Application-toolkit-log4j-2.x.md), [logback](Application-toolkit-logback-1.x.md)\n-    * If you want to use annotations or SkyWalking native APIs to read context, try [SkyWalking manual APIs](Application-toolkit-trace.md)\n+    * If you want your codes to interact with SkyWalking agent, including `getting trace id`, `set tags`, `propagating custom data` etc.. Try [SkyWalking manual APIs](Application-toolkit-trace.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMDY0OA==", "bodyText": "remove this", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396900648", "createdAt": "2020-03-24T04:49:09Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/trace/CorrelationContextGetInterceptor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.trace;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.StaticMethodsAroundInterceptor;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+public class CorrelationContextGetInterceptor implements StaticMethodsAroundInterceptor {\n+\n+    private ILog logger = LogManager.getLogger(CorrelationContextGetInterceptor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMjM4Nw==", "bodyText": "How do I remove a key if you consider a null as \"\". For example, if I already have 3 items in the context and I want to remove one of them and put another one (different key), there's no way to do so", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396902387", "createdAt": "2020-03-24T04:57:01Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private final Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(Config.Correlation.ELEMENT_MAX_NUMBER);\n+    }\n+\n+    public Optional<String> set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return Optional.empty();\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTA4OQ==", "bodyText": "Personally, I don't recommend to return Optional<String> in these two APIs, for Strings, we(developers, our users are developers too) don't usually JUST care about the nullability, we also want to check whether it's empty/blank, with Optional<String>, we have to unwrap the Optional, and check isEmpty/isBlank:\n        Optional<String> s = CorrelationContext.get(CORRELATION_CONTEXT_KEY);\n        if (s.isPresent() && Strings.isNotBlank(s.get())) {\n            // ...\n        }\nOR\n        if (!Strings.isNullOrEmpty(CorrelationContext.get(CORRELATION_CONTEXT_KEY).orElse(\"\"))) {\n            \n        }\nMy point is that in this specific situation, Optional<String> may not bring much convenience as it should have done, simply returning nullable String may do, in the contrast", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396909089", "createdAt": "2020-03-24T05:26:28Z", "author": {"login": "kezhenxu94"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * CorrelationContext is the interactive API for end user to put/set custom data.\n+ */\n+public class CorrelationContext {\n+\n+    /**\n+     * Try to get the custom value from trace context.\n+     *\n+     * @return custom data value.\n+     */\n+    public static Optional<String> get(String key) {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Setting the custom key/value into trace context.\n+     *\n+     * @return previous value if it exists.\n+     */\n+    public static Optional<String> set(String key, String value) {\n+        return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf4aee99dd99b95734113947f947a95e8aa57b1"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2316ae3602a541100de32d00afd7d54f01acca0", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b2316ae3602a541100de32d00afd7d54f01acca0", "committedDate": "2020-03-24T05:59:17Z", "message": "fix naming issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDU5Njc4", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-380059678", "createdAt": "2020-03-24T07:41:46Z", "commit": {"oid": "b2316ae3602a541100de32d00afd7d54f01acca0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo0MTo0NlrOF6kBsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo0MTo0NlrOF6kBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MTk4NA==", "bodyText": "This is using putAll, I am feeling we have a memory leak point. If user to inject a header with more elements than our limitation, inject and deserialize both wouldn't reject or ignore part of them, then basically, the config of this agent is useless.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r396951984", "createdAt": "2020-03-24T07:41:46Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Correlation context, use to propagation user custom data.\n+ * Working on the protocol and delegate set/get method.\n+ */\n+public class CorrelationContext {\n+\n+    private final Map<String, String> data;\n+\n+    public CorrelationContext() {\n+        this.data = new HashMap<>(Config.Correlation.ELEMENT_MAX_NUMBER);\n+    }\n+\n+    public Optional<String> set(String key, String value) {\n+        // key must not null\n+        if (key == null) {\n+            return Optional.empty();\n+        }\n+        if (value == null) {\n+            value = \"\";\n+        }\n+\n+        // check value length\n+        if (value.length() > Config.Correlation.VALUE_MAX_LENGTH) {\n+            return Optional.empty();\n+        }\n+\n+        // already contain key\n+        if (data.containsKey(key)) {\n+            final String previousValue = data.put(key, value);\n+            return Optional.of(previousValue);\n+        }\n+\n+        // check keys count\n+        if (data.size() >= Config.Correlation.ELEMENT_MAX_NUMBER) {\n+            return Optional.empty();\n+        }\n+\n+        // setting\n+        data.put(key, value);\n+        return Optional.empty();\n+    }\n+\n+    public Optional<String> get(String key) {\n+        if (key == null) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.ofNullable(data.get(key));\n+    }\n+\n+    /**\n+     * Serialize this {@link CorrelationContext} to a {@link String}\n+     *\n+     * @return the serialization string.\n+     */\n+    String serialize() {\n+        if (data.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        return data.entrySet().stream()\n+            .map(entry -> Base64.encode(entry.getKey()) + \":\" + Base64.encode(entry.getValue()))\n+            .collect(Collectors.joining(\",\"));\n+    }\n+\n+    /**\n+     * Deserialize data from {@link String}\n+     */\n+    void deserialize(String value) {\n+        if (StringUtil.isEmpty(value)) {\n+            return;\n+        }\n+\n+        for (String perData : value.split(\",\")) {\n+            final String[] parts = perData.split(\":\");\n+            String perDataKey = parts[0];\n+            String perDataValue = parts.length > 1 ? parts[1] : \"\";\n+            data.put(Base64.decode2UTFString(perDataKey), Base64.decode2UTFString(perDataValue));\n+        }\n+    }\n+\n+    /**\n+     * Prepare for the cross-process propagation. Inject the {@link #data} into {@link ContextCarrier#getCorrelationContext()}\n+     */\n+    void inject(ContextCarrier carrier) {\n+        carrier.getCorrelationContext().data.putAll(this.data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2316ae3602a541100de32d00afd7d54f01acca0"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "788a17b99febfc7d7e9d8fda66a29a8ef3b4a53f", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/788a17b99febfc7d7e9d8fda66a29a8ef3b4a53f", "committedDate": "2020-03-24T13:02:50Z", "message": "resolve issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6087cec0681fd9507cb939ee40766e117816f8", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/0f6087cec0681fd9507cb939ee40766e117816f8", "committedDate": "2020-03-24T13:04:25Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjk4NjM0", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-380298634", "createdAt": "2020-03-24T13:19:28Z", "commit": {"oid": "0f6087cec0681fd9507cb939ee40766e117816f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoxOToyOFrOF6vx5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoxOToyOFrOF6vx5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0NDU0OA==", "bodyText": "There are two CorrelationContext in your codes. Seems strange. In the old APIs, we have TraceContext(for users) and ContextManager/TracingContext for internal. I suggest we fix the duplicated naming issue.\nSuch as for users, we could have TraceContext#putCorrelation. @kezhenxu94 @mrproliu WDYT?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397144548", "createdAt": "2020-03-24T13:19:28Z", "author": {"login": "wu-sheng"}, "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/CorrelationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.util.Optional;\n+\n+/**\n+ * CorrelationContext is the interactive API for end user to put/set custom data.\n+ */\n+public class CorrelationContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f6087cec0681fd9507cb939ee40766e117816f8"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6d488c230143392f7764977513c8fbf1a1126e7", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/d6d488c230143392f7764977513c8fbf1a1126e7", "committedDate": "2020-03-24T13:20:35Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8be4a420eefe42284e093e477ecfbb542c1563", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/ec8be4a420eefe42284e093e477ecfbb542c1563", "committedDate": "2020-03-24T14:20:15Z", "message": "fix missing module packaging type declare"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5b446fea5c4b0e8db2f833af207350569190818", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b5b446fea5c4b0e8db2f833af207350569190818", "committedDate": "2020-03-24T14:50:35Z", "message": "fix wrong interceptor class name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d04e34037bc850032978202b57148a2e495bc2c3", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/d04e34037bc850032978202b57148a2e495bc2c3", "committedDate": "2020-03-24T15:15:47Z", "message": "Change method name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c497d7a6101ef09e1a0d7d5e11ce0272a07d7383", "author": {"user": {"login": "mrproliu", "name": null}}, "url": "https://github.com/apache/skywalking/commit/c497d7a6101ef09e1a0d7d5e11ce0272a07d7383", "committedDate": "2020-03-24T15:47:31Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7770524ad0173f46389a46a819821023c58b6d19", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/7770524ad0173f46389a46a819821023c58b6d19", "committedDate": "2020-03-25T05:28:38Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTA4OTk5", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-381108999", "createdAt": "2020-03-25T12:41:40Z", "commit": {"oid": "7770524ad0173f46389a46a819821023c58b6d19"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c91aa8cbe5c0096f45b7def557c9bf92e1189d", "author": {"user": {"login": "kezhenxu94", "name": "kezhenxu94"}}, "url": "https://github.com/apache/skywalking/commit/03c91aa8cbe5c0096f45b7def557c9bf92e1189d", "committedDate": "2020-03-25T14:12:08Z", "message": "Merge branch 'master' into correlation-protocol-implement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMjI3NDQ3", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-381227447", "createdAt": "2020-03-25T14:54:11Z", "commit": {"oid": "03c91aa8cbe5c0096f45b7def557c9bf92e1189d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1NDoxMVrOF7fBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1NDoyNFrOF7fCHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODU3NA==", "bodyText": "I think this is a typo of the documentation? get with 2 parameters?", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397918574", "createdAt": "2020-03-25T14:54:11Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,14 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `TraceContext.getCorrelation()` API to put custom data in tracing context. \n+```java\n+Optional<String> previous = TraceContext.getCorrelation(\"customKey\", \"customValue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03c91aa8cbe5c0096f45b7def557c9bf92e1189d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODc0OQ==", "bodyText": "Another typo here.", "url": "https://github.com/apache/skywalking/pull/4555#discussion_r397918749", "createdAt": "2020-03-25T14:54:24Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/Application-toolkit-trace.md", "diffHunk": "@@ -53,3 +53,14 @@ public User methodYouWantToTrace(String param1, String param2) {\n }\n ```\n \n+* Use `TraceContext.getCorrelation()` API to put custom data in tracing context. \n+```java\n+Optional<String> previous = TraceContext.getCorrelation(\"customKey\", \"customValue\");\n+```\n+CorrelationContext will remove the item when the value is `null` or empty.\n+\n+* Use `TraceContext.putCorrelation()` API to get custom data.\n+```java\n+Optional<String> value = TraceContext.putCorrelation(\"customKey\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03c91aa8cbe5c0096f45b7def557c9bf92e1189d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "469b6213224dc0c38b82e8e108f6d326a202e8e5", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/469b6213224dc0c38b82e8e108f6d326a202e8e5", "committedDate": "2020-03-25T15:00:00Z", "message": "fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjM1NzUy", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-381635752", "createdAt": "2020-03-26T00:52:14Z", "commit": {"oid": "469b6213224dc0c38b82e8e108f6d326a202e8e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjM4NTA1", "url": "https://github.com/apache/skywalking/pull/4555#pullrequestreview-381638505", "createdAt": "2020-03-26T01:01:44Z", "commit": {"oid": "469b6213224dc0c38b82e8e108f6d326a202e8e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2487, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}