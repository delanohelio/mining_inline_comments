{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzU0Mjgw", "number": 4441, "title": "Add finagle plugin", "bodyText": "Please answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#4433\n\n\n\nBug fix\n\n\nBug description.\n\n\nHow to fix?\n\n\n\nNew feature or improvement\n\nAdd finagle plugin, version from 6.25.0 to 20.1.0", "createdAt": "2020-03-04T05:53:41Z", "url": "https://github.com/apache/skywalking/pull/4441", "merged": true, "mergeCommit": {"oid": "ced5cb28283b56456f33fd2f7d038c3770dd3914"}, "closed": true, "closedAt": "2020-03-11T05:04:59Z", "author": {"login": "huangyoje"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKQWypAH2gAyMzgzMzU0MjgwOmUxZjMzOTFkYjRjOTM3NjcwODBkNDBjNTZmNmY4OTMyNjQyYjcxYTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMdufYAH2gAyMzgzMzU0MjgwOmMwNTYwODRmNWFiMDAwODRlMzgwYTBhMTc5Y2I4NjQ0ZWU1ODZlMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1f3391db4c93767080d40c56f6f8932642b71a9", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/e1f3391db4c93767080d40c56f6f8932642b71a9", "committedDate": "2020-03-04T05:48:42Z", "message": "Add finagle plugin (#4433)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTIwNjMx", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-368520631", "createdAt": "2020-03-04T05:56:51Z", "commit": {"oid": "e1f3391db4c93767080d40c56f6f8932642b71a9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4fbe9d49476c6ae31954e47505db0e645aad088", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/e4fbe9d49476c6ae31954e47505db0e645aad088", "committedDate": "2020-03-04T05:58:14Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58219dd5e9fb1c7166c4edc20f6d9c7cf397711d", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/58219dd5e9fb1c7166c4edc20f6d9c7cf397711d", "committedDate": "2020-03-04T14:37:43Z", "message": "fix failed checks for pr(#4441)\n* Add licenses for some files\n* Update Supported doc\n* Add finagle to test component-libraries.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/2b9df1a3bd3df20b561b340223f6f23c005c9cbf", "committedDate": "2020-03-04T14:53:04Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODYzNTM4", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-368863538", "createdAt": "2020-03-04T15:15:40Z", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDQwMTU5", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-369440159", "createdAt": "2020-03-05T10:08:49Z", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowODo0OVrOFyNdYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowODo0OVrOFyNdYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzYzMg==", "bodyText": "These methods are overridden by methods in subsequent integrations. Recommend to modify these methods to abstract methods, so that the logic may be clearer.  construct like this abstract void onConstruct(EnhancedInstance objInst, Object[] allArguments, AbstractSpan span). Or they can be split into two classes like InstanceConstructorInterceptor InstanceMethodsAroundInterceptor ?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388193632", "createdAt": "2020-03-05T10:08:49Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AbstractInterceptor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+abstract class AbstractInterceptor implements InstanceConstructorInterceptor, InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            onConstructImpl(objInst, allArguments);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            beforeMethodImpl(objInst, method, allArguments, argumentsTypes, result);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (CompatibilityChecker.isCompatible()) {\n+            return afterMethodImpl(objInst, method, allArguments, argumentsTypes, ret);\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (CompatibilityChecker.isCompatible()) {\n+            handleMethodExceptionImpl(objInst, method, allArguments, argumentsTypes, t);\n+        }\n+    }\n+\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                    Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+    }\n+\n+    protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                     Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        return ret;\n+    }\n+\n+    protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                             Class<?>[] argumentsTypes, Throwable t) {\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDQ5MDQw", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-369449040", "createdAt": "2020-03-05T10:21:40Z", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMTo0MVrOFyN4zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMTo0MVrOFyN4zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMDY1Mg==", "bodyText": "Exception information to be added like ContextManager.activeSpan().errorOccurred().log(t)", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388200652", "createdAt": "2020-03-05T10:21:41Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientDestTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.finagle.Address;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextCarrierHelper.setPeerHost;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+public class ClientDestTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    @Override\n+    public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+        enhancedInstance.setSkyWalkingDynamicField(getRemote(objects));\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, MethodInterceptResult methodInterceptResult) throws Throwable {\n+        String peer = (String) enhancedInstance.getSkyWalkingDynamicField();\n+        AbstractSpan span = getSpan();\n+        if (span != null) {\n+            span.setPeer(peer);\n+        }\n+        SWContextCarrier swContextCarrier = getContextCarrier();\n+        if (swContextCarrier != null) {\n+            setPeerHost(swContextCarrier.carrier(), peer);\n+        }\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object o) throws Throwable {\n+        return o;\n+    }\n+\n+    @Override\n+    public void handleMethodExceptionImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Throwable throwable) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDU3MDE5", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-369457019", "createdAt": "2020-03-05T10:33:06Z", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMzowNlrOFyORXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMzowNlrOFyORXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjk0Mw==", "bodyText": "why comment this?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388206943", "createdAt": "2020-03-05T10:33:06Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));\n+    }\n+\n+    @Override\n+    public Object afterMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes, Object ret) throws Throwable {\n+        CacheObjects cacheObjects = (CacheObjects) enhancedInstance.getSkyWalkingDynamicField();\n+\n+        final AbstractSpan finagleSpan = cacheObjects.localContextHolder.remove(SW_SPAN);\n+        cacheObjects.marshlledContextHolder.remove(SWContextCarrier$.MODULE$);\n+\n+        finagleSpan.prepareForAsync();\n+        ContextManager.stopSpan(finagleSpan);\n+\n+        ((Future<?>) ret).addEventListener(new FutureEventListener<Object>() {\n+            @Override\n+            public void onSuccess(Object value) {\n+                finagleSpan.asyncFinish();\n+            }\n+\n+            @Override\n+            public void onFailure(Throwable cause) {\n+                finagleSpan.errorOccurred();\n+//                finagleSpan.log(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjM5NjI4", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-369639628", "createdAt": "2020-03-05T14:59:12Z", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1OToxMlrOFyW3eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1OToxMlrOFyW3eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Nzc3MA==", "bodyText": "Version compatibility feature is provided by a thing called witness class. If you provide that in the instrumentation definition, your plugin is activated only those class exists.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388347770", "createdAt": "2020-03-05T14:59:12Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+public class CompatibilityChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed9a08c741fbbccb1b0f4a298cbe2b2d233f935", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4ed9a08c741fbbccb1b0f4a298cbe2b2d233f935", "committedDate": "2020-03-05T15:01:59Z", "message": "Add finagle automatic tests into CI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjQyNjUy", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-369642652", "createdAt": "2020-03-05T15:01:43Z", "commit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTowMTo0M1rOFyXAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTowMjoyMlrOFyXBkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0OTk1NQ==", "bodyText": "This is not allowed, if it is copied from somewhere else, you are facing source code level LICENSE update. Also, as I commented above, I prefer to remove this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388349955", "createdAt": "2020-03-05T15:01:43Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * @see com.twitter.finagle.context.Context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MDM1Mg==", "bodyText": "Read my comments about witness class, and remove this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r388350352", "createdAt": "2020-03-05T15:02:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextHolderFactory.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.finagle.context.Context;\n+import com.twitter.finagle.context.Contexts;\n+import com.twitter.finagle.context.LocalContext;\n+import com.twitter.finagle.context.MarshalledContext;\n+import com.twitter.io.Buf;\n+import com.twitter.util.Local;\n+import scala.Option;\n+import scala.Predef;\n+import scala.Some;\n+import scala.Some$;\n+import scala.Tuple2;\n+import scala.collection.JavaConverters;\n+import scala.collection.JavaConverters$;\n+\n+import javax.annotation.Nullable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class ContextHolderFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b9df1a3bd3df20b561b340223f6f23c005c9cbf"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5ccf23c988f226942614a8bd5715eba492e76b2", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/e5ccf23c988f226942614a8bd5715eba492e76b2", "committedDate": "2020-03-07T07:11:06Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a64e210e5485d763b4671d0d6e1276314094295", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4a64e210e5485d763b4671d0d6e1276314094295", "committedDate": "2020-03-07T07:11:47Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2855b350592ad93b7c51c301f999e958bc16da2d", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/2855b350592ad93b7c51c301f999e958bc16da2d", "committedDate": "2020-03-07T10:24:37Z", "message": "update comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/426df4268c0ad624995eebfca13a6345a0bddd2e", "committedDate": "2020-03-07T10:24:59Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzM4NTg2", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-370738586", "createdAt": "2020-03-07T11:14:26Z", "commit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToxNDoyNlrOFzNxRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToxNDoyNlrOFzNxRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzMwMw==", "bodyText": "You are using a Thread local to check compatibility, why you think it makes sense?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389247303", "createdAt": "2020-03-07T11:14:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/CompatibilityChecker.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+\n+/**\n+ * The implementation detail of this plugin depend on a private class of Finagle Framework, we can not ensure that\n+ * class will still exists in future versions. The mechanism of witness class can ensure this plugin can work in\n+ * existing versions, it can not ensure this plugin will still work in future versions. So the purpose of the class\n+ * is to check whether this plugin is compatible with future versions, if it does't, the plugin just do nothing,\n+ * avoiding unexpected runtime exceptions.\n+ */\n+public class CompatibilityChecker {\n+\n+    static ILog LOGGER = LogManager.getLogger(CompatibilityChecker.class);\n+\n+    private static boolean COMPATIBILITY = false;\n+\n+    static {\n+        try {\n+            if (FinagleCtxs.RPC != null\n+                    && FinagleCtxs.SW_SPAN != null\n+                    && checkContextHolder()) {\n+                COMPATIBILITY = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzM4NzQx", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-370738741", "createdAt": "2020-03-07T11:18:05Z", "commit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToxODowNVrOFzNyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToxODowNVrOFzNyFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NzUxMQ==", "bodyText": "Are these versions using different coding API for framework end users? Even from 6.33 to 6.34? Could you explain?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389247511", "createdAt": "2020-03-07T11:18:05Z", "author": {"login": "wu-sheng"}, "path": ".github/workflows/plugins-test.yaml", "diffHunk": "@@ -271,6 +271,12 @@ jobs:\n         run: bash test/plugin/run.sh undertow-scenario\n       - name: Run jedis 2.4.0-2.9.0 (18)\n         run: bash test/plugin/run.sh jedis-scenario\n+      - name: Run finagle 6.25.0-6.43.0\n+        run: bash test/plugin/run.sh finagle-6.25.x-scenario\n+      - name: Run finagle 6.44.0-7.1.0\n+        run: bash test/plugin/run.sh finagle-6.44.x-scenario\n+      - name: Run finagle 17.10.0-20.1.0\n+        run: bash test/plugin/run.sh finagle-17.10.x-scenario", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426df4268c0ad624995eebfca13a6345a0bddd2e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c519e51f7c8199d8cfbeca8b7074c34ca81c6e68", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/c519e51f7c8199d8cfbeca8b7074c34ca81c6e68", "committedDate": "2020-03-07T13:44:59Z", "message": "Remove CompatibilityChecker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/4ab50f5dcb5e32454ef12829bceb55e113749478", "committedDate": "2020-03-07T13:47:01Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzQ1MjU4", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-370745258", "createdAt": "2020-03-07T13:54:07Z", "commit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzQ1NTY4", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-370745568", "createdAt": "2020-03-07T14:00:49Z", "commit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNDowMDo0OVrOFzOWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNDowMDo0OVrOFzOWCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg==", "bodyText": "Why don't you create the exit span in the ClientDestTracingFilterInterceptor directly? ContextCarrier require the peer information, otherwise the topology will break.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389256712", "createdAt": "2020-03-07T14:00:49Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/66d3b2865265c0176c9507d9c053dd8ebe184a6a", "committedDate": "2020-03-07T14:51:30Z", "message": "Move query-protocol submodule to the right version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzUwNDg3", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-370750487", "createdAt": "2020-03-07T15:46:35Z", "commit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNTo0NjozNVrOFzOv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjowNTozOVrOFzO0kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzMyNQ==", "bodyText": "OK. From your codes, you are not just setting the peer later, you are hijacking the ContextCarrier.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263325", "createdAt": "2020-03-07T15:46:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzM2Ng==", "bodyText": "You also hijacking the op name in the ContextCarrier. Those two are uncommon case for me. Are these really necessary?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263366", "createdAt": "2020-03-07T15:47:14Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NjcxMg=="}, "originalCommit": {"oid": "4ab50f5dcb5e32454ef12829bceb55e113749478"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzQzMg==", "bodyText": "Once this interceptor is not in the user thread, there is no active span.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263432", "createdAt": "2020-03-07T15:48:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later\n+                    getLocalContextHolder().let(FinagleCtxs.RPC, rpc);\n+                } else {\n+                    span.setOperationName(rpc);\n+                }\n+                SWContextCarrier swContextCarrier = getContextCarrier();\n+                if (swContextCarrier != null) {\n+                    swContextCarrier.setOperationName(rpc);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        protected void beforeMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+\n+        }\n+\n+        @Override\n+        protected Object afterMethodImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+            return ret;\n+        }\n+\n+        @Override\n+        protected void handleMethodExceptionImpl(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+            ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzU1NA==", "bodyText": "What does this in case mean? Why there is unexpected execution sequence?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263554", "createdAt": "2020-03-07T15:49:44Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/AnnotationInterceptor.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getContextCarrier;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * Finagle use Annotation to represent data that tracing system interested, usually these annotations are created by\n+ * filters after ClientTracingFilter in the rpc call stack. We can intercept annotations that we interested.\n+ */\n+public class AnnotationInterceptor {\n+\n+    abstract static class Abstract extends AbstractInterceptor {\n+\n+        @Override\n+        public void onConstructImpl(EnhancedInstance enhancedInstance, Object[] objects) {\n+            onConstruct(enhancedInstance, objects, getSpan());\n+        }\n+\n+        protected abstract void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span);\n+    }\n+\n+    /**\n+     * When we create exitspan in ClientTracingFilter, we can't know the operation name, however the Rpc annotation\n+     * contains the operation name we need, so we intercept the constructor of this Annotation and set operation name\n+     * to exitspan.\n+     */\n+    public static class Rpc extends Abstract {\n+\n+        @Override\n+        protected void onConstruct(EnhancedInstance enhancedInstance, Object[] objects, AbstractSpan span) {\n+            if (objects != null && objects.length == 1) {\n+                String rpc = (String) objects[0];\n+                if (span == null) {\n+                    // in case the exitspan is created later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2MzgxNA==", "bodyText": "Why this one in Scala?  Could you explain the reason? I can't see that through codes.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389263814", "createdAt": "2020-03-07T15:53:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/scala/org/apache/skywalking/apm/plugin/finagle/SWContextCarrier.scala", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle\n+\n+import com.twitter.finagle.context.Contexts\n+import com.twitter.io.Buf\n+import com.twitter.util.{Return, Try}\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier\n+\n+class SWContextCarrier(val carrier: ContextCarrier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA==", "bodyText": "Is the enhancedInstance used in only one thread only? If there is a race condition, you can't use the dynamic field.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389264270", "createdAt": "2020-03-07T16:01:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDM1MA==", "bodyText": "I am confused here, if the dynamic field is safe enough, why you need the ContextHolder?", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389264350", "createdAt": "2020-03-07T16:02:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDUyOA==", "bodyText": "dynamic field could set any customized class, from my reading, it should be used to replace the ContextHolder.\nAnyway, I think I need your further explanation about this.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389264528", "createdAt": "2020-03-07T16:05:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ClientTracingFilterInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.FINAGLE;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.SW_SPAN;\n+\n+public class ClientTracingFilterInterceptor extends AbstractInterceptor {\n+\n+    private static class CacheObjects {\n+        private ContextHolder marshlledContextHolder;\n+        private ContextHolder localContextHolder;\n+\n+        private CacheObjects(ContextHolder marshlledContextHolder, ContextHolder localContextHolder) {\n+            this.marshlledContextHolder = marshlledContextHolder;\n+            this.localContextHolder = localContextHolder;\n+        }\n+    }\n+\n+    @Override\n+    protected void onConstructImpl(EnhancedInstance objInst, Object[] allArguments) {\n+\n+    }\n+\n+    @Override\n+    public void beforeMethodImpl(EnhancedInstance enhancedInstance, Method method, Object[] objects, Class<?>[] classes,\n+                                 MethodInterceptResult methodInterceptResult) throws Throwable {\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        /*\n+         * At this time, we can't know the operation name and peer address, so we just use placeholders here, the\n+         * operation name will be filled by {@link AnnotationInterceptor$Rpc} and the peer address will be filled by\n+         * {@link ClientDestTracingFilterInterceptor} later.\n+         */\n+        AbstractSpan finagleSpan = ContextManager.createExitSpan(\"pending\", contextCarrier, \"\");\n+\n+        finagleSpan.setComponent(FINAGLE);\n+        SpanLayer.asRPCFramework(finagleSpan);\n+\n+        ContextHolder marshlledContextHolder = getMarshalledContextHolder();\n+        marshlledContextHolder.let(SWContextCarrier$.MODULE$, SWContextCarrier.of(contextCarrier));\n+\n+        ContextHolder localContextHolder = getLocalContextHolder();\n+        localContextHolder.let(SW_SPAN, finagleSpan);\n+\n+        enhancedInstance.setSkyWalkingDynamicField(new CacheObjects(marshlledContextHolder, localContextHolder));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDI3MA=="}, "originalCommit": {"oid": "66d3b2865265c0176c9507d9c053dd8ebe184a6a"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f398fe2e2628e38ad13c67fccd11449f336f75d", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/5f398fe2e2628e38ad13c67fccd11449f336f75d", "committedDate": "2020-03-08T02:59:09Z", "message": "Remove `enhancedInstance.setSkyWalkingDynamicField` in `ClientTracingFilterInterceptor`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a32e6c94956ee4a3d994999da7c5c7caff3a60", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/39a32e6c94956ee4a3d994999da7c5c7caff3a60", "committedDate": "2020-03-08T03:06:29Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed6276b2099e956350f34b1077eadb3c3003178", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/7ed6276b2099e956350f34b1077eadb3c3003178", "committedDate": "2020-03-08T03:44:47Z", "message": "Update expectedData.yaml of finagle tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79a6c6340120f828645e31a28a173ead9ced3190", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/79a6c6340120f828645e31a28a173ead9ced3190", "committedDate": "2020-03-08T10:36:02Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fea4ff4ee871780d337620d803739ecb2d38df6", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/1fea4ff4ee871780d337620d803739ecb2d38df6", "committedDate": "2020-03-08T11:33:33Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10bc9b6e876596a408e12f75c3f5fdff50e3b31", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/c10bc9b6e876596a408e12f75c3f5fdff50e3b31", "committedDate": "2020-03-08T13:23:27Z", "message": "Use lazy ContextCarrier injection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ad0d49eda45e3c86d6f98a579910941d9e5abfe", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/3ad0d49eda45e3c86d6f98a579910941d9e5abfe", "committedDate": "2020-03-08T13:26:44Z", "message": "Merge remote-tracking branch 'github/finagle-plugin' into finagle-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODMxMDM4", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-370831038", "createdAt": "2020-03-08T13:41:07Z", "commit": {"oid": "3ad0d49eda45e3c86d6f98a579910941d9e5abfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzo0MTowN1rOFzVS4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzo0MTowN1rOFzVS4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3MDU5Mw==", "bodyText": "This format seems wrong.", "url": "https://github.com/apache/skywalking/pull/4441#discussion_r389370593", "createdAt": "2020-03-08T13:41:07Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/finagle-6.25.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/finagle/ContextCarrierHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.finagle;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getLocalContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.ContextHolderFactory.getMarshalledContextHolder;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.RPC;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getOperationName;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getPeerHost;\n+import static org.apache.skywalking.apm.plugin.finagle.FinagleCtxs.getSpan;\n+\n+/**\n+ * We need set peer host to {@link ContextCarrier} in {@link ClientDestTracingFilterInterceptor}, but there is no\n+ * public method to do this, so we use this helper to achieve it.\n+ */\n+class ContextCarrierHelper {\n+\n+    static void tryInjectContext() {\n+        String operationName = getOperationName();\n+        if (operationName == null) {\n+            return;\n+        }\n+        String peer = getPeerHost();\n+        if (peer == null) {\n+            return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad0d49eda45e3c86d6f98a579910941d9e5abfe"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05804658bd456aee7df26e86084f057b7a1a5ca6", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/05804658bd456aee7df26e86084f057b7a1a5ca6", "committedDate": "2020-03-08T13:50:44Z", "message": "Add comments for `ContextCarrierHelper`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f8aa6f5c9fe639277e04daeccf4b4582e8c2f6f", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/1f8aa6f5c9fe639277e04daeccf4b4582e8c2f6f", "committedDate": "2020-03-10T15:55:53Z", "message": "Fix ContextHolderFactory to avoid context pollution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf0acb5f26ab44318d80d7c326d294404a59db37", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/bf0acb5f26ab44318d80d7c326d294404a59db37", "committedDate": "2020-03-10T15:58:04Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d062aeb3a0c088d96e02a001d39a1a720ffe50", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/84d062aeb3a0c088d96e02a001d39a1a720ffe50", "committedDate": "2020-03-11T01:00:54Z", "message": "Merge branch 'master' into finagle-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDIzMDgw", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-372423080", "createdAt": "2020-03-11T01:26:54Z", "commit": {"oid": "bf0acb5f26ab44318d80d7c326d294404a59db37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDIzNzM2", "url": "https://github.com/apache/skywalking/pull/4441#pullrequestreview-372423736", "createdAt": "2020-03-11T01:29:33Z", "commit": {"oid": "84d062aeb3a0c088d96e02a001d39a1a720ffe50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c056084f5ab00084e380a0a179cb8644ee586e05", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/c056084f5ab00084e380a0a179cb8644ee586e05", "committedDate": "2020-03-11T02:31:12Z", "message": "Merge branch 'master' into finagle-plugin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2403, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}