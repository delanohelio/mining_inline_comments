{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjY2NTkw", "number": 5320, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjoxNTo1NVrOEYrBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMToxNDo0OFrOEY3IOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzA2MTU3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjoxNTo1NlrOHBIJgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjo0NTo0OVrOHBISDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0NDEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        public static String REGEX_EXPRESSION = \".*Service.*,.*Dao.*,.*Repository.*\";\n          \n          \n            \n                        public static String REGEX_EXPRESSION = \".*Service$,.*Dao$,.*DAO$,.*Repository$\";", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r470944128", "createdAt": "2020-08-15T06:15:56Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.spring.annotations;\n+\n+import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n+\n+public class SpringAnnotationConfig {\n+\n+    public static class Plugin {\n+        @PluginConfig(root = SpringAnnotationConfig.class)\n+        public static class SpringAnnotation {\n+            /**\n+             * regex expression to match spring bean\n+             */\n+            public static String REGEX_EXPRESSION = \".*Service.*,.*Dao.*,.*Repository.*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26acc3939dcd05c1225339b354160dc6c606a5bd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0NjMxOA==", "bodyText": "This should not You set this works in default, which could make users confused, because, once their classes are not matching these default rules, they will not be traced.\nSo, this should be default OFF.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r470946318", "createdAt": "2020-08-15T06:45:49Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.spring.annotations;\n+\n+import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n+\n+public class SpringAnnotationConfig {\n+\n+    public static class Plugin {\n+        @PluginConfig(root = SpringAnnotationConfig.class)\n+        public static class SpringAnnotation {\n+            /**\n+             * regex expression to match spring bean\n+             */\n+            public static String REGEX_EXPRESSION = \".*Service.*,.*Dao.*,.*Repository.*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0NDEyOA=="}, "originalCommit": {"oid": "26acc3939dcd05c1225339b354160dc6c606a5bd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzA2NDE1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/ClassAnnotationPackageRegexMatch.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjoyMDozN1rOHBIKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNjoyMDozN1rOHBIKsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk0NDQzNQ==", "bodyText": "This class is very case-specific, please consider reusing org.apache.skywalking.apm.agent.core.plugin.match.logical.LogicalMatchOperation to perform the logical operations", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r470944435", "createdAt": "2020-08-15T06:20:37Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/ClassAnnotationPackageRegexMatch.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import net.bytebuddy.description.annotation.AnnotationDescription;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isAnnotatedWith;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+/**\n+ * Match the class by the given annotations and regex expression matching package name.\n+ */\n+public class ClassAnnotationPackageRegexMatch implements IndirectMatch {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26acc3939dcd05c1225339b354160dc6c606a5bd"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDQ1OTk2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/config/agent.config", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzo0NDoxMFrOHBSkow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzo0NDoxMFrOHBSkow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNDkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Optional Plugins config\n          \n      \n    \n    \n  \n\nMany plugins above are optional too. If you want to indicate some are optional, which requires activating first, then we could work on this in a separate PR.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471114915", "createdAt": "2020-08-16T13:44:10Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/config/agent.config", "diffHunk": "@@ -93,3 +93,7 @@ logging.level=${SW_LOGGING_LEVEL:INFO}\n \n # Exclude activated plugins\n # plugin.exclude_plugins=${SW_EXCLUDE_PLUGINS:\"\"}\n+\n+# Optional Plugins config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b486f6376c94299ae913d09f025f9e6134342833"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDQ2MTEwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzo0NToyNVrOHBSlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDowOToyN1rOHBSujQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNTA1NA==", "bodyText": "I think this is the Class Name match? Not a package name?\nThe default value should be empty, which is more high-efficiency.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471115054", "createdAt": "2020-08-16T13:45:25Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.spring.annotations;\n+\n+import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n+\n+public class SpringAnnotationConfig {\n+\n+    public static class Plugin {\n+        @PluginConfig(root = SpringAnnotationConfig.class)\n+        public static class SpringAnnotation {\n+            /**\n+             * regex expression to match spring bean\n+             */\n+            public static String PACKAGE_MATCH_REGEX_EXPRESSION = \".*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b486f6376c94299ae913d09f025f9e6134342833"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNzQ1Mw==", "bodyText": "resolved", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471117453", "createdAt": "2020-08-16T14:09:27Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/SpringAnnotationConfig.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.spring.annotations;\n+\n+import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n+\n+public class SpringAnnotationConfig {\n+\n+    public static class Plugin {\n+        @PluginConfig(root = SpringAnnotationConfig.class)\n+        public static class SpringAnnotation {\n+            /**\n+             * regex expression to match spring bean\n+             */\n+            public static String PACKAGE_MATCH_REGEX_EXPRESSION = \".*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNTA1NA=="}, "originalCommit": {"oid": "b486f6376c94299ae913d09f025f9e6134342833"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDQ2Mjg1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/services/SpringServicesInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzo0Nzo0N1rOHBSmCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDowOToxN1rOHBSuhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNTI3Mw==", "bodyText": "Should only activate and byRegexMatch if the  #getRegexExpressions return not null. Then, it is better for matching mechanism performance.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471115273", "createdAt": "2020-08-16T13:47:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/services/SpringServicesInstrumentation.java", "diffHunk": "@@ -19,16 +19,21 @@\n package org.apache.skywalking.apm.plugin.spring.annotations.services;\n \n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.logical.LogicalMatchOperation;\n import org.apache.skywalking.apm.plugin.spring.annotations.AbstractSpringBeanInstrumentation;\n \n import static org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch.byClassAnnotationMatch;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.RegexMatch.byRegexMatch;\n \n public class SpringServicesInstrumentation extends AbstractSpringBeanInstrumentation {\n \n     public static final String ENHANCE_ANNOTATION = \"org.springframework.stereotype.Service\";\n \n     @Override\n     protected ClassMatch enhanceClass() {\n-        return byClassAnnotationMatch(new String[] {ENHANCE_ANNOTATION});\n+        return LogicalMatchOperation.and(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b486f6376c94299ae913d09f025f9e6134342833"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNzQ0NA==", "bodyText": "resolved", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471117444", "createdAt": "2020-08-16T14:09:17Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/optional-plugins/optional-spring-plugins/spring-annotation-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/annotations/services/SpringServicesInstrumentation.java", "diffHunk": "@@ -19,16 +19,21 @@\n package org.apache.skywalking.apm.plugin.spring.annotations.services;\n \n import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.logical.LogicalMatchOperation;\n import org.apache.skywalking.apm.plugin.spring.annotations.AbstractSpringBeanInstrumentation;\n \n import static org.apache.skywalking.apm.agent.core.plugin.match.ClassAnnotationMatch.byClassAnnotationMatch;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.RegexMatch.byRegexMatch;\n \n public class SpringServicesInstrumentation extends AbstractSpringBeanInstrumentation {\n \n     public static final String ENHANCE_ANNOTATION = \"org.springframework.stereotype.Service\";\n \n     @Override\n     protected ClassMatch enhanceClass() {\n-        return byClassAnnotationMatch(new String[] {ENHANCE_ANNOTATION});\n+        return LogicalMatchOperation.and(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExNTI3Mw=="}, "originalCommit": {"oid": "b486f6376c94299ae913d09f025f9e6134342833"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDUwNDk3OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDozNzo0MVrOHBS6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDozNzo0MVrOHBS6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyMDQ2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `plugin.springannotation.classname_match_regex_expression` | Match spring bean with regex expression for classname. | `the spring beans tagged with @Bean,@Service,@Dao or @Repository` |\n          \n          \n            \n            `plugin.springannotation.classname_match_regex_expression` | Match spring beans with regex expression for the class name. Multiple expressions could be separated by a comma. This only works when `Spring annotation plugin` has been activated. | All the spring beans tagged with @Bean,@Service,@Dao, or @Repository. |", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471120469", "createdAt": "2020-08-16T14:37:41Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -151,6 +150,8 @@ property key | Description | Default |\n `plugin.kafka.topic_segment` | Specify which Kafka topic name for traces data to report to. | `skywalking_segments` |\n `plugin.kafka.topic_profilings` | Specify which Kafka topic name for Thread Profiling snapshot to report to. | `skywalking_profilings` |\n `plugin.kafka.topic_management` | Specify which Kafka topic name for the register or heartbeat data of Service Instance to report to. | `skywalking_managements` |\n+`plugin.springannotation.classname_match_regex_expression` | Match spring bean with regex expression for classname. | `the spring beans tagged with @Bean,@Service,@Dao or @Repository` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b149a67eeeeb058a2d9cfb6545cca10b938887"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDUxODMzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNDo1MjozNVrOHBTAwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjowMToxNlrOHBTcfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyMjExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Match the class by the given annotations and regex expression matching package name.\n          \n          \n            \n             * Match the class by the given annotations and regex expression matching class name.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471122112", "createdAt": "2020-08-16T14:52:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+\n+/**\n+ * Match the class by the given annotations and regex expression matching package name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a6f5dd2d14871c953bd53225acc858ed29a95b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyOTIxMg==", "bodyText": "thx for your notice. Has been resolved. Would be careful next time.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471129212", "createdAt": "2020-08-16T16:01:16Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+\n+/**\n+ * Match the class by the given annotations and regex expression matching package name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyMjExMg=="}, "originalCommit": {"oid": "57a6f5dd2d14871c953bd53225acc858ed29a95b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTAxNTc4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDo1MDo1MVrOHBWwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMTowMDo1MlrOHBW2pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MzQ1NA==", "bodyText": "Question, this is a one-line method, why need this?", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471183454", "createdAt": "2020-08-17T00:50:51Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+\n+/**\n+ * Match the class by given class name regex expression.\n+ */\n+public class RegexMatch implements IndirectMatch {\n+    private String[] regexExpressions;\n+\n+    private RegexMatch(String... regexExpressions) {\n+        if (regexExpressions == null || regexExpressions.length == 0) {\n+            throw new IllegalArgumentException(\"annotations is null\");\n+        }\n+        this.regexExpressions = regexExpressions;\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction buildJunction() {\n+        ElementMatcher.Junction regexJunction = null;\n+        for (String regexExpression : regexExpressions) {\n+            if (regexJunction == null) {\n+                regexJunction = buildEachMatchExpression(regexExpression);\n+            } else {\n+                regexJunction = regexJunction.or(buildEachMatchExpression(regexExpression));\n+            }\n+        }\n+        return regexJunction;\n+    }\n+\n+    @Override\n+    public boolean isMatch(TypeDescription typeDescription) {\n+        boolean isMatch = false;\n+        for (String matchExpression : regexExpressions) {\n+            isMatch = isMatch || typeDescription.getTypeName().matches(matchExpression);\n+        }\n+        return isMatch;\n+    }\n+\n+    private ElementMatcher.Junction buildEachMatchExpression(String matchExpression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df617439d1103839a58f5323ad5c94b7bf20f0c6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4NTA2Mw==", "bodyText": "sorry,has been removed", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471185063", "createdAt": "2020-08-17T01:00:52Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+\n+/**\n+ * Match the class by given class name regex expression.\n+ */\n+public class RegexMatch implements IndirectMatch {\n+    private String[] regexExpressions;\n+\n+    private RegexMatch(String... regexExpressions) {\n+        if (regexExpressions == null || regexExpressions.length == 0) {\n+            throw new IllegalArgumentException(\"annotations is null\");\n+        }\n+        this.regexExpressions = regexExpressions;\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction buildJunction() {\n+        ElementMatcher.Junction regexJunction = null;\n+        for (String regexExpression : regexExpressions) {\n+            if (regexJunction == null) {\n+                regexJunction = buildEachMatchExpression(regexExpression);\n+            } else {\n+                regexJunction = regexJunction.or(buildEachMatchExpression(regexExpression));\n+            }\n+        }\n+        return regexJunction;\n+    }\n+\n+    @Override\n+    public boolean isMatch(TypeDescription typeDescription) {\n+        boolean isMatch = false;\n+        for (String matchExpression : regexExpressions) {\n+            isMatch = isMatch || typeDescription.getTypeName().matches(matchExpression);\n+        }\n+        return isMatch;\n+    }\n+\n+    private ElementMatcher.Junction buildEachMatchExpression(String matchExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MzQ1NA=="}, "originalCommit": {"oid": "df617439d1103839a58f5323ad5c94b7bf20f0c6"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTA0NTA1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMToxNDo0OFrOHBW_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMToyMjowMFrOHBXD4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4NzMwNg==", "bodyText": "This is just a reminder, (I don't know whether existing matches have this issue), even a type has been matched, it still needs to iterate the whole expression array. There should be a break.", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471187306", "createdAt": "2020-08-17T01:14:48Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+\n+/**\n+ * Match the class by given class name regex expression.\n+ */\n+public class RegexMatch implements IndirectMatch {\n+    private String[] regexExpressions;\n+\n+    private RegexMatch(String... regexExpressions) {\n+        if (regexExpressions == null || regexExpressions.length == 0) {\n+            throw new IllegalArgumentException(\"annotations is null\");\n+        }\n+        this.regexExpressions = regexExpressions;\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction buildJunction() {\n+        ElementMatcher.Junction regexJunction = null;\n+        for (String regexExpression : regexExpressions) {\n+            if (regexJunction == null) {\n+                regexJunction = nameMatches(regexExpression);\n+            } else {\n+                regexJunction = regexJunction.or(nameMatches(regexExpression));\n+            }\n+        }\n+        return regexJunction;\n+    }\n+\n+    @Override\n+    public boolean isMatch(TypeDescription typeDescription) {\n+        boolean isMatch = false;\n+        for (String matchExpression : regexExpressions) {\n+            isMatch = isMatch || typeDescription.getTypeName().matches(matchExpression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7290031724823da57ceb4bc38a04cd1dcb320574"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4ODQ0OA==", "bodyText": "thx for your notice.already add break", "url": "https://github.com/apache/skywalking/pull/5320#discussion_r471188448", "createdAt": "2020-08-17T01:22:00Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/RegexMatch.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.nameMatches;\n+\n+/**\n+ * Match the class by given class name regex expression.\n+ */\n+public class RegexMatch implements IndirectMatch {\n+    private String[] regexExpressions;\n+\n+    private RegexMatch(String... regexExpressions) {\n+        if (regexExpressions == null || regexExpressions.length == 0) {\n+            throw new IllegalArgumentException(\"annotations is null\");\n+        }\n+        this.regexExpressions = regexExpressions;\n+    }\n+\n+    @Override\n+    public ElementMatcher.Junction buildJunction() {\n+        ElementMatcher.Junction regexJunction = null;\n+        for (String regexExpression : regexExpressions) {\n+            if (regexJunction == null) {\n+                regexJunction = nameMatches(regexExpression);\n+            } else {\n+                regexJunction = regexJunction.or(nameMatches(regexExpression));\n+            }\n+        }\n+        return regexJunction;\n+    }\n+\n+    @Override\n+    public boolean isMatch(TypeDescription typeDescription) {\n+        boolean isMatch = false;\n+        for (String matchExpression : regexExpressions) {\n+            isMatch = isMatch || typeDescription.getTypeName().matches(matchExpression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4NzMwNg=="}, "originalCommit": {"oid": "7290031724823da57ceb4bc38a04cd1dcb320574"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4944, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}