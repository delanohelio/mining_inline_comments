{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzcyMTg0", "number": 5084, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMTo1OTo0NFrOENjLXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMTo1OTo0NFrOENjLXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQzMjk0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMTo1OTo0NFrOGwQiEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNToxNDo1MVrOGxYbeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NTY5Ng==", "bodyText": "The requestURL is updated after addPathMapping. This means it will use {POST}/url the first time the endpoint is hit and then fall back to /url every time it's hit afterward.\n\nI think you just need move original L86 after L87. The way you changing right now, will make the cache invalid. RIght?", "url": "https://github.com/apache/skywalking/pull/5084#discussion_r453255696", "createdAt": "2020-07-12T01:59:44Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -82,11 +82,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             EnhanceRequireObjectCache pathMappingCache = (EnhanceRequireObjectCache) objInst.getSkyWalkingDynamicField();\n             String requestURL = pathMappingCache.findPathMapping(method);\n             if (requestURL == null) {\n-                requestURL = getRequestURL(method);\n-                pathMappingCache.addPathMapping(method, requestURL);\n-                requestURL = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);\n+                pathMappingCache.addPathMapping(method, getRequestURL(method));\n             }\n-            operationName = requestURL;\n+            operationName = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fdc8762682b48eb93173449bd0b7bc6250c5fe5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5Njc4NA==", "bodyText": "I've taken a look at this and moving L87 to L86 is not ideal because of this line:\n\n  \n    \n      skywalking/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/PathMappingCache.java\n    \n    \n         Line 52\n      in\n      c5972c2\n    \n    \n    \n    \n\n        \n          \n           methodPathMapping.put(method, (classPath + methodPath).replace(\"//\", \"/\")); \n        \n    \n  \n\n\nThis appends whatever URL is to be cached to a method with classPath. Meaning a method annotated with @RequestMapping(\"/test\", method = RequestMethod.GET) which falls under a class annotated with @RequestMapping(\"/case\") will result in the URL /case/{GET}/test being cached to the method.", "url": "https://github.com/apache/skywalking/pull/5084#discussion_r454296784", "createdAt": "2020-07-14T11:45:00Z", "author": {"login": "BFergerson"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -82,11 +82,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             EnhanceRequireObjectCache pathMappingCache = (EnhanceRequireObjectCache) objInst.getSkyWalkingDynamicField();\n             String requestURL = pathMappingCache.findPathMapping(method);\n             if (requestURL == null) {\n-                requestURL = getRequestURL(method);\n-                pathMappingCache.addPathMapping(method, requestURL);\n-                requestURL = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);\n+                pathMappingCache.addPathMapping(method, getRequestURL(method));\n             }\n-            operationName = requestURL;\n+            operationName = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NTY5Ng=="}, "originalCommit": {"oid": "8fdc8762682b48eb93173449bd0b7bc6250c5fe5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQzMzY1OA==", "bodyText": "My point is, there is a logic error above. execute pathMappingCache.findPathMapping(method) twice if cache found.", "url": "https://github.com/apache/skywalking/pull/5084#discussion_r454433658", "createdAt": "2020-07-14T15:14:51Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -82,11 +82,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             EnhanceRequireObjectCache pathMappingCache = (EnhanceRequireObjectCache) objInst.getSkyWalkingDynamicField();\n             String requestURL = pathMappingCache.findPathMapping(method);\n             if (requestURL == null) {\n-                requestURL = getRequestURL(method);\n-                pathMappingCache.addPathMapping(method, requestURL);\n-                requestURL = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);\n+                pathMappingCache.addPathMapping(method, getRequestURL(method));\n             }\n-            operationName = requestURL;\n+            operationName = getAcceptedMethodTypes(method) + pathMappingCache.findPathMapping(method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NTY5Ng=="}, "originalCommit": {"oid": "8fdc8762682b48eb93173449bd0b7bc6250c5fe5"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 72, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}