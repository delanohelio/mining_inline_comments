{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDI4NDMy", "number": 5519, "title": "Add support for xxl-job", "bodyText": "Please answer these questions before submitting a pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\nResolves #2527", "createdAt": "2020-09-18T16:46:04Z", "url": "https://github.com/apache/skywalking/pull/5519", "merged": true, "mergeCommit": {"oid": "e200ef104508ca46139d891b92c0200af78af06e"}, "closed": true, "closedAt": "2020-09-20T02:04:33Z", "author": {"login": "hailin0"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKIXRKAH2gAyNDg5NDI4NDMyOjZmNzg0NDQ3YTgwNTgxMWQxNDEzNmY1Zjc0MDVkMTA4MjJhYWFkNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKkh0cAFqTQ5MjE2NTM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/6f784447a805811d14136f5f7405d10822aaad44", "committedDate": "2020-09-18T16:41:08Z", "message": "Add support for xxl-job"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODUxOTQ4", "url": "https://github.com/apache/skywalking/pull/5519#pullrequestreview-491851948", "createdAt": "2020-09-19T01:51:22Z", "commit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1MToyM1rOHUfyHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMTo1OToyNlrOHUf1dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDMwMQ==", "bodyText": "Why need to change this?", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254301", "createdAt": "2020-09-19T01:51:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MultiClassNameMatch.java", "diffHunk": "@@ -57,7 +57,7 @@ public boolean isMatch(TypeDescription typeDescription) {\n         return matchClassNames.contains(typeDescription.getTypeName());\n     }\n \n-    public static ClassMatch byMultiClassMatch(String... classNames) {\n+    public static IndirectMatch byMultiClassMatch(String... classNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDUyMg==", "bodyText": "Why put maven URL here?", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254522", "createdAt": "2020-09-19T01:52:25Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>apm-sdk-plugin</artifactId>\n+        <groupId>org.apache.skywalking</groupId>\n+        <version>8.2.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>apm-xxl-job-2.x-plugin</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>xxl-job-2.x-plugin</name>\n+    <url>http://maven.apache.org</url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDcwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ContextManager.activeSpan().errorOccurred().log(t);\n          \n          \n            \n                    ContextManager.activeSpan().log(t);\n          \n      \n    \n    \n  \n\nSince #5426, errorOccurred() should be called when and only when the logic error, like response code 500.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254702", "createdAt": "2020-09-19T01:54:43Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/ScriptJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.ScriptJobHandler#execute(String)}.\n+ * record the xxl-job script job local span.\n+ */\n+public class ScriptJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobTypeAndId = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/ScriptJob/\" + jobTypeAndId;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDczMw==", "bodyText": "Same here about errorOccurred.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254733", "createdAt": "2020-09-19T01:54:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/SimpleJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept execute(String) method on implement class of {@link com.xxl.job.core.handler.IJobHandler}.\n+ * record the xxl-job simple job local span.\n+ */\n+public class SimpleJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/SimpleJob/\" + method.getDeclaringClass().getName();\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDc5Mg==", "bodyText": "Same errorOccurred here.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254792", "createdAt": "2020-09-19T01:55:17Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/MethodJob/\" + methodName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDgzNw==", "bodyText": "Normally, #log has included the errorOccurred.", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491254837", "createdAt": "2020-09-19T01:55:48Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/ScriptJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.ScriptJobHandler#execute(String)}.\n+ * record the xxl-job script job local span.\n+ */\n+public class ScriptJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String jobTypeAndId = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];\n+        String operationName = ComponentsDefine.XXL_JOB.getName() + \"/ScriptJob/\" + jobTypeAndId;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.XXL_JOB);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_PARAM, jobParam);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NDcwMg=="}, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1NTE1Ng==", "bodyText": "Is there any rule, such as length limitation, for this parameter?", "url": "https://github.com/apache/skywalking/pull/5519#discussion_r491255156", "createdAt": "2020-09-19T01:59:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/xxl-job-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/xxljob/MethodJobHandlerMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.xxljob;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.apache.skywalking.apm.plugin.xxljob.Constants.JOB_PARAM;\n+\n+/**\n+ * Intercept method of {@link com.xxl.job.core.handler.impl.MethodJobHandler#execute(String)}.\n+ * record the xxl-job method job local span.\n+ */\n+public class MethodJobHandlerMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String methodName = (String) objInst.getSkyWalkingDynamicField();\n+        String jobParam = (String) allArguments[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f784447a805811d14136f5f7405d10822aaad44"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d5c111bf509e3be9f95c8a1ab516bdc5f139d5", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/88d5c111bf509e3be9f95c8a1ab516bdc5f139d5", "committedDate": "2020-09-19T02:48:14Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606fce24958afe629c0b59923e689b9b5f43fa8c", "author": {"user": {"login": "hailin0", "name": "hailin0"}}, "url": "https://github.com/apache/skywalking/commit/606fce24958afe629c0b59923e689b9b5f43fa8c", "committedDate": "2020-09-19T12:33:24Z", "message": "Merge branch 'master' into xxl-job"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTk5MjE1", "url": "https://github.com/apache/skywalking/pull/5519#pullrequestreview-491999215", "createdAt": "2020-09-19T13:36:12Z", "commit": {"oid": "606fce24958afe629c0b59923e689b9b5f43fa8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTY1Mzc4", "url": "https://github.com/apache/skywalking/pull/5519#pullrequestreview-492165378", "createdAt": "2020-09-20T01:30:00Z", "commit": {"oid": "606fce24958afe629c0b59923e689b9b5f43fa8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1708, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}