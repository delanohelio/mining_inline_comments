{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTI1ODY4", "number": 5849, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozNjoxN1rOE5WgEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo1NTowM1rOE5hmJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTcyOTQ3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozNjoxN1rOHzwQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozNzoyMVrOHzwVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyOTk1Ng==", "bodyText": "@lizan Does this kind of conversion make sense?  Is there any chance of having multiple error codes? Even if so, doesn't it matter or have priority?", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524029956", "createdAt": "2020-11-16T09:36:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java", "diffHunk": "@@ -164,4 +169,52 @@ protected static String parseTLS(final TLSProperties properties) {\n         return M_TLS;\n     }\n \n+    /**\n+     * Refer to https://www.envoyproxy.io/docs/envoy/latest/api-v2/data/accesslog/v2/accesslog.proto#data-accesslog-v2-responseflags\n+     *\n+     * @param responseFlags in the ALS v2\n+     * @return empty string if no internal error code, or literal string representing the code.\n+     */\n+    protected static String parseInternalErrorCode(final ResponseFlags responseFlags) {\n+        if (responseFlags != null) {\n+            if (responseFlags.getFailedLocalHealthcheck()) {\n+                return \"failed_local_healthcheck\";\n+            } else if (responseFlags.getNoHealthyUpstream()) {\n+                return \"no_healthy_upstream\";\n+            } else if (responseFlags.getUpstreamRequestTimeout()) {\n+                return \"upstream_request_timeout\";\n+            } else if (responseFlags.getLocalReset()) {\n+                return \"local_reset\";\n+            } else if (responseFlags.getUpstreamConnectionFailure()) {\n+                return \"upstream_connection_failure\";\n+            } else if (responseFlags.getUpstreamConnectionTermination()) {\n+                return \"upstream_connection_termination\";\n+            } else if (responseFlags.getUpstreamOverflow()) {\n+                return \"upstream_overflow\";\n+            } else if (responseFlags.getNoRouteFound()) {\n+                return \"no_route_found\";\n+            } else if (responseFlags.getDelayInjected()) {\n+                return \"delay_injected\";\n+            } else if (responseFlags.getFaultInjected()) {\n+                return \"fault_injected\";\n+            } else if (responseFlags.getRateLimited()) {\n+                return \"rate_limited\";\n+            } else if (responseFlags.getUnauthorizedDetails() != null) {\n+                return \"unauthorized_details\";\n+            } else if (responseFlags.getRateLimitServiceError()) {\n+                return \"rate_limit_service_error\";\n+            } else if (responseFlags.getDownstreamConnectionTermination()) {\n+                return \"downstream_connection_termination\";\n+            } else if (responseFlags.getUpstreamRetryLimitExceeded()) {\n+                return \"upstream_retry_limit_exceeded\";\n+            } else if (responseFlags.getStreamIdleTimeout()) {\n+                return \"stream_idle_timeout\";\n+            } else if (responseFlags.getInvalidEnvoyRequestHeaders()) {\n+                return \"invalid_envoy_request_headers\";\n+            } else if (responseFlags.getDownstreamProtocolError()) {\n+                return \"downstream_protocol_error\";\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzMTIzMw==", "bodyText": "To @ZackButcher too.", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524031233", "createdAt": "2020-11-16T09:37:21Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/LogEntry2MetricsAdapter.java", "diffHunk": "@@ -164,4 +169,52 @@ protected static String parseTLS(final TLSProperties properties) {\n         return M_TLS;\n     }\n \n+    /**\n+     * Refer to https://www.envoyproxy.io/docs/envoy/latest/api-v2/data/accesslog/v2/accesslog.proto#data-accesslog-v2-responseflags\n+     *\n+     * @param responseFlags in the ALS v2\n+     * @return empty string if no internal error code, or literal string representing the code.\n+     */\n+    protected static String parseInternalErrorCode(final ResponseFlags responseFlags) {\n+        if (responseFlags != null) {\n+            if (responseFlags.getFailedLocalHealthcheck()) {\n+                return \"failed_local_healthcheck\";\n+            } else if (responseFlags.getNoHealthyUpstream()) {\n+                return \"no_healthy_upstream\";\n+            } else if (responseFlags.getUpstreamRequestTimeout()) {\n+                return \"upstream_request_timeout\";\n+            } else if (responseFlags.getLocalReset()) {\n+                return \"local_reset\";\n+            } else if (responseFlags.getUpstreamConnectionFailure()) {\n+                return \"upstream_connection_failure\";\n+            } else if (responseFlags.getUpstreamConnectionTermination()) {\n+                return \"upstream_connection_termination\";\n+            } else if (responseFlags.getUpstreamOverflow()) {\n+                return \"upstream_overflow\";\n+            } else if (responseFlags.getNoRouteFound()) {\n+                return \"no_route_found\";\n+            } else if (responseFlags.getDelayInjected()) {\n+                return \"delay_injected\";\n+            } else if (responseFlags.getFaultInjected()) {\n+                return \"fault_injected\";\n+            } else if (responseFlags.getRateLimited()) {\n+                return \"rate_limited\";\n+            } else if (responseFlags.getUnauthorizedDetails() != null) {\n+                return \"unauthorized_details\";\n+            } else if (responseFlags.getRateLimitServiceError()) {\n+                return \"rate_limit_service_error\";\n+            } else if (responseFlags.getDownstreamConnectionTermination()) {\n+                return \"downstream_connection_termination\";\n+            } else if (responseFlags.getUpstreamRetryLimitExceeded()) {\n+                return \"upstream_retry_limit_exceeded\";\n+            } else if (responseFlags.getStreamIdleTimeout()) {\n+                return \"stream_idle_timeout\";\n+            } else if (responseFlags.getInvalidEnvoyRequestHeaders()) {\n+                return \"invalid_envoy_request_headers\";\n+            } else if (responseFlags.getDownstreamProtocolError()) {\n+                return \"downstream_protocol_error\";\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyOTk1Ng=="}, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzU0NzI2OnYy", "diffSide": "RIGHT", "path": "docs/en/concepts-and-designs/scope-definitions.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDo1NTowM1rOH0CatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTozMjo0NVrOH0EJkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzYwNQ==", "bodyText": "FWIK, \"proxy\" is a more general name than sidecar. The latter one is often put together with \"gateway\" as Istio does, and therefore I prefer to use \"proxy.internalErrorCode\" instead of \"sidecar.internalErrorCode\".", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524327605", "createdAt": "2020-11-16T14:55:03Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/scope-definitions.md", "diffHunk": "@@ -29,6 +29,7 @@ Calculate the metrics data from each request of the service.\n | responseCode | Represent the response code of HTTP response, if this request is the HTTP call | | int|\n | type | Represent the type of each request. Such as: Database, HTTP, RPC, gRPC. | | enum |\n | tags | Represent the labels of each request and each value is made up with the `TagKey:TagValue` in the segment. | | `List<String>` |\n+| sideCar.internalErrorCode | Represent the sidecar/proxy internal error code, the value bases on the implementation. | | string|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyOTYxNg==", "bodyText": "In the Istio concept, yes, I agree. But note here, we are adding a description for a service. If this is a gateway, as you mentioned, the service itself is the gateway, rather than this.\nAlso, for the gateway case, actually, there is no point to indicate whether sidecar issue or not, all errors are gateway's issue.", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524329616", "createdAt": "2020-11-16T14:57:36Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/scope-definitions.md", "diffHunk": "@@ -29,6 +29,7 @@ Calculate the metrics data from each request of the service.\n | responseCode | Represent the response code of HTTP response, if this request is the HTTP call | | int|\n | type | Represent the type of each request. Such as: Database, HTTP, RPC, gRPC. | | enum |\n | tags | Represent the labels of each request and each value is made up with the `TagKey:TagValue` in the segment. | | `List<String>` |\n+| sideCar.internalErrorCode | Represent the sidecar/proxy internal error code, the value bases on the implementation. | | string|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzYwNQ=="}, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyOTk2Mg==", "bodyText": "As the attachment, I don't want it to be a proxy.", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524329962", "createdAt": "2020-11-16T14:58:03Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/scope-definitions.md", "diffHunk": "@@ -29,6 +29,7 @@ Calculate the metrics data from each request of the service.\n | responseCode | Represent the response code of HTTP response, if this request is the HTTP call | | int|\n | type | Represent the type of each request. Such as: Database, HTTP, RPC, gRPC. | | enum |\n | tags | Represent the labels of each request and each value is made up with the `TagKey:TagValue` in the segment. | | `List<String>` |\n+| sideCar.internalErrorCode | Represent the sidecar/proxy internal error code, the value bases on the implementation. | | string|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzYwNQ=="}, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MDkwNA==", "bodyText": "Also, for the gateway case, actually, there is no point to indicate whether sidecar issue or not, all errors are gateway's issue.\n\nDefinitely, a gateway is abstracted to service, but it still needs sidecar.xxxx to represent this dimension. It looks a little tricky, especially, the remarks emphasize the sidecar/proxy internal error code. if that, the sidecar/gateway proxy internal error code makes more sense to me.", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524350904", "createdAt": "2020-11-16T15:26:25Z", "author": {"login": "hanahmily"}, "path": "docs/en/concepts-and-designs/scope-definitions.md", "diffHunk": "@@ -29,6 +29,7 @@ Calculate the metrics data from each request of the service.\n | responseCode | Represent the response code of HTTP response, if this request is the HTTP call | | int|\n | type | Represent the type of each request. Such as: Database, HTTP, RPC, gRPC. | | enum |\n | tags | Represent the labels of each request and each value is made up with the `TagKey:TagValue` in the segment. | | `List<String>` |\n+| sideCar.internalErrorCode | Represent the sidecar/proxy internal error code, the value bases on the implementation. | | string|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzYwNQ=="}, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTk4NA==", "bodyText": "Fixed the comments and docs. Others are unchanged.", "url": "https://github.com/apache/skywalking/pull/5849#discussion_r524355984", "createdAt": "2020-11-16T15:32:45Z", "author": {"login": "wu-sheng"}, "path": "docs/en/concepts-and-designs/scope-definitions.md", "diffHunk": "@@ -29,6 +29,7 @@ Calculate the metrics data from each request of the service.\n | responseCode | Represent the response code of HTTP response, if this request is the HTTP call | | int|\n | type | Represent the type of each request. Such as: Database, HTTP, RPC, gRPC. | | enum |\n | tags | Represent the labels of each request and each value is made up with the `TagKey:TagValue` in the segment. | | `List<String>` |\n+| sideCar.internalErrorCode | Represent the sidecar/proxy internal error code, the value bases on the implementation. | | string|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyNzYwNQ=="}, "originalCommit": {"oid": "93e83d0c9b83023e2661f5ad1be91ac23ecd54b9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}