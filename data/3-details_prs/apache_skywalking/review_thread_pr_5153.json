{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTAxODY4", "number": 5153, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozODoxMVrOEU5xbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMDo0NzowNlrOEWoPsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzUzNTE2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozODoxMVrOG7WyTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxMTowM1rOG7fsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5MjQ5Mg==", "bodyText": "Sorry, Apache Elastic Job? Maybe Apache ShardingSphere-Elasticjob is better?", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r464892492", "createdAt": "2020-08-04T08:38:11Z", "author": {"login": "tristaZero"}, "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "diffHunk": "@@ -81,6 +81,7 @@\n * [Hystrix: Latency and Fault Tolerance for Distributed Systems](https://github.com/Netflix/Hystrix) 1.4.20 -> 1.5.12\n * Scheduler\n   * [Elastic Job](https://github.com/elasticjob/elastic-job) 2.x\n+  * [Apache Elastic Job](https://github.com/apache/shardingsphere-elasticjob) 3.0.0-alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7eca2cdd40906307cd50f27f599bf8e12ebfc27"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzODQ2Ng==", "bodyText": "had update, please recheck", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r465038466", "createdAt": "2020-08-04T13:11:03Z", "author": {"login": "zhaoyuguang"}, "path": "docs/en/setup/service-agent/java-agent/Supported-list.md", "diffHunk": "@@ -81,6 +81,7 @@\n * [Hystrix: Latency and Fault Tolerance for Distributed Systems](https://github.com/Netflix/Hystrix) 1.4.20 -> 1.5.12\n * Scheduler\n   * [Elastic Job](https://github.com/elasticjob/elastic-job) 2.x\n+  * [Apache Elastic Job](https://github.com/apache/shardingsphere-elasticjob) 3.0.0-alpha", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5MjQ5Mg=="}, "originalCommit": {"oid": "c7eca2cdd40906307cd50f27f599bf8e12ebfc27"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTYzNDY1OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/elasticjob-3.x-scenario/config/expectedData.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMDo0Njo0MVrOG9_Haw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMDo0Njo0MVrOG9_Haw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MDQxMQ==", "bodyText": "@tristaZero Could you check whether these are recommended and important messages for the elastic job users? Any thing more?", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r467650411", "createdAt": "2020-08-10T00:46:41Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/elasticjob-3.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,53 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: elasticjob-3.x-scenario\n+  segmentSize: ge 2\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: /elasticjob-3.x-scenario/case/ping\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      spanLayer: Http\n+      startTime: not null\n+      endTime: not null\n+      componentId: 12\n+      isError: false\n+      spanType: Exit\n+      peer: localhost:8080\n+      skipAnalysis: false\n+      tags:\n+        - {key: http.method, value: GET}\n+        - {key: url, value: 'http://localhost:8080/elasticjob-3.x-scenario/case/ping'}\n+    - operationName: ElasticJob/simpleJob\n+      operationId: 0\n+      parentSpanId: -1\n+      spanId: 0\n+      spanLayer: Unknown\n+      startTime: not null\n+      endTime: not null\n+      componentId: 24\n+      isError: false\n+      spanType: Entry\n+      peer: ''\n+      skipAnalysis: false\n+      tags:\n+        - {key: item, value: '0'}\n+        - {key: shardingTotalCount, value: '1'}\n+        - {key: taskId, value: not null}\n+        - {key: shardingItemParameters, value: '{0=Beijing}'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58669023a04c0a7c4f8dbaa68da41bc8292a10bc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTYzNTA0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/elastic-job-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticjob/ElasticJobExecutorInterceptor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMDo0NzowNlrOG9_Hmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjo1MToxOVrOG-AJBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MDQ1OQ==", "bodyText": "@zhaoyuguang Tag key should be added as a constant in the plugin.", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r467650459", "createdAt": "2020-08-10T00:47:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/elastic-job-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticjob/ElasticJobExecutorInterceptor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticjob;\n+\n+import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class ElasticJobExecutorInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        ShardingContexts shardingContexts = (ShardingContexts) allArguments[0];\n+        Integer item = (Integer) allArguments[1];\n+        String operateName = ComponentsDefine.ELASTIC_JOB.getName() + \"/\" + shardingContexts.getJobName();\n+        AbstractSpan span = ContextManager.createEntrySpan(operateName, new ContextCarrier());\n+        span.setComponent(ComponentsDefine.ELASTIC_JOB);\n+        span.tag(\"item\", item == null ? \"\" : String.valueOf(item));\n+        span.tag(\"shardingTotalCount\", Integer.toString(shardingContexts.getShardingTotalCount()));\n+        span.tag(\"taskId\", shardingContexts.getTaskId());\n+        span.tag(\"shardingItemParameters\", shardingContexts.getShardingItemParameters() == null ? \"\" : shardingContexts.getShardingItemParameters().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58669023a04c0a7c4f8dbaa68da41bc8292a10bc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MDU0NQ==", "bodyText": "@tristaZero This is how we get these tags.", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r467650545", "createdAt": "2020-08-10T00:47:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/elastic-job-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticjob/ElasticJobExecutorInterceptor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticjob;\n+\n+import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class ElasticJobExecutorInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        ShardingContexts shardingContexts = (ShardingContexts) allArguments[0];\n+        Integer item = (Integer) allArguments[1];\n+        String operateName = ComponentsDefine.ELASTIC_JOB.getName() + \"/\" + shardingContexts.getJobName();\n+        AbstractSpan span = ContextManager.createEntrySpan(operateName, new ContextCarrier());\n+        span.setComponent(ComponentsDefine.ELASTIC_JOB);\n+        span.tag(\"item\", item == null ? \"\" : String.valueOf(item));\n+        span.tag(\"shardingTotalCount\", Integer.toString(shardingContexts.getShardingTotalCount()));\n+        span.tag(\"taskId\", shardingContexts.getTaskId());\n+        span.tag(\"shardingItemParameters\", shardingContexts.getShardingItemParameters() == null ? \"\" : shardingContexts.getShardingItemParameters().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MDQ1OQ=="}, "originalCommit": {"oid": "58669023a04c0a7c4f8dbaa68da41bc8292a10bc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NjQ3MQ==", "bodyText": "Hi @wu-sheng It seems these tags come from ShardingContexts, which is a necessary job context for users. I am not familiar with what content skyWalking needs for its plugin, but if it wants to get core job information, I think it is enough. :)", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r467666471", "createdAt": "2020-08-10T02:46:29Z", "author": {"login": "tristaZero"}, "path": "apm-sniffer/apm-sdk-plugin/elastic-job-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticjob/ElasticJobExecutorInterceptor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticjob;\n+\n+import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class ElasticJobExecutorInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        ShardingContexts shardingContexts = (ShardingContexts) allArguments[0];\n+        Integer item = (Integer) allArguments[1];\n+        String operateName = ComponentsDefine.ELASTIC_JOB.getName() + \"/\" + shardingContexts.getJobName();\n+        AbstractSpan span = ContextManager.createEntrySpan(operateName, new ContextCarrier());\n+        span.setComponent(ComponentsDefine.ELASTIC_JOB);\n+        span.tag(\"item\", item == null ? \"\" : String.valueOf(item));\n+        span.tag(\"shardingTotalCount\", Integer.toString(shardingContexts.getShardingTotalCount()));\n+        span.tag(\"taskId\", shardingContexts.getTaskId());\n+        span.tag(\"shardingItemParameters\", shardingContexts.getShardingItemParameters() == null ? \"\" : shardingContexts.getShardingItemParameters().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MDQ1OQ=="}, "originalCommit": {"oid": "58669023a04c0a7c4f8dbaa68da41bc8292a10bc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NzIwNA==", "bodyText": "BTW, there are other props from ShardingContexts, like jobName, jobParameter, and so forth. I am not sure whether you @zhaoyuguang  @wu-sheng need them or not. Thanks.", "url": "https://github.com/apache/skywalking/pull/5153#discussion_r467667204", "createdAt": "2020-08-10T02:51:19Z", "author": {"login": "tristaZero"}, "path": "apm-sniffer/apm-sdk-plugin/elastic-job-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticjob/ElasticJobExecutorInterceptor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticjob;\n+\n+import org.apache.shardingsphere.elasticjob.api.listener.ShardingContexts;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class ElasticJobExecutorInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        ShardingContexts shardingContexts = (ShardingContexts) allArguments[0];\n+        Integer item = (Integer) allArguments[1];\n+        String operateName = ComponentsDefine.ELASTIC_JOB.getName() + \"/\" + shardingContexts.getJobName();\n+        AbstractSpan span = ContextManager.createEntrySpan(operateName, new ContextCarrier());\n+        span.setComponent(ComponentsDefine.ELASTIC_JOB);\n+        span.tag(\"item\", item == null ? \"\" : String.valueOf(item));\n+        span.tag(\"shardingTotalCount\", Integer.toString(shardingContexts.getShardingTotalCount()));\n+        span.tag(\"taskId\", shardingContexts.getTaskId());\n+        span.tag(\"shardingItemParameters\", shardingContexts.getShardingItemParameters() == null ? \"\" : shardingContexts.getShardingItemParameters().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1MDQ1OQ=="}, "originalCommit": {"oid": "58669023a04c0a7c4f8dbaa68da41bc8292a10bc"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 110, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}