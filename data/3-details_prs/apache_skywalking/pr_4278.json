{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Mjc3MzI3", "number": 4278, "title": "Make MVC plugin support inherited annotations from interface", "bodyText": "Why submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#3847 how to enhance method with @RequestMapping annotation declared in interface?\n\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.", "createdAt": "2020-01-23T10:04:00Z", "url": "https://github.com/apache/skywalking/pull/4278", "merged": true, "mergeCommit": {"oid": "5c6914fc9eea78eb7285976060690e1a1a80010f"}, "closed": true, "closedAt": "2020-02-01T08:18:23Z", "author": {"login": "jialong121"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9HMxsAH2gAyMzY2Mjc3MzI3OjM2YTlmYWE0YzhiZWY5NzljYjJhYmI4MjA0MjY5OTIwN2YxMDYxMWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb__T5zgFqTM1MTg3MjU0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/36a9faa4c8bef979cb2abb82042699207f10611f", "committedDate": "2020-01-23T09:47:36Z", "message": "Solve the problem of matching annotations of MVC plugin interface methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzA0ODM1", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-347304835", "createdAt": "2020-01-23T13:45:11Z", "commit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NToxMVrOFg-lbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NjoxNlrOFg-nuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDE0MA==", "bodyText": "typo @author, and please remove the :", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370124140", "createdAt": "2020-01-23T13:45:11Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * @description: Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther: jialong  by 2020-01-23 15:41", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDM5MQ==", "bodyText": "remove @description, it's not a valid JavaDoc tag", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370124391", "createdAt": "2020-01-23T13:45:39Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * @description: Matching used to match method annotations, Can match annotations on interface methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDczMQ==", "bodyText": "ditto", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r370124731", "createdAt": "2020-01-23T13:46:16Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/bytebuddy/MethodInheritsDeclaringAnnotationMatcherTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.bytebuddy;\n+\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.MethodInheritsDeclaringAnnotationMatcher.isInheritsAnnotatedWith;\n+\n+/**\n+ * @description:\n+ * @auther: jialong  by 2020-01-23 16:09", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a9faa4c8bef979cb2abb82042699207f10611f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17c3967b88b66f8204abaf52d85de4b9f297873f", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/17c3967b88b66f8204abaf52d85de4b9f297873f", "committedDate": "2020-01-23T14:37:39Z", "message": "Modify the wrong JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc7ebdc8e947801420ac186856aa5dd639bc1ef9", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/fc7ebdc8e947801420ac186856aa5dd639bc1ef9", "committedDate": "2020-01-23T16:24:51Z", "message": "update springmvc plugin test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9c1fdee60cdf63f3c09c129d7b5dabcc86dc492", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/f9c1fdee60cdf63f3c09c129d7b5dabcc86dc492", "committedDate": "2020-01-23T16:37:11Z", "message": "add apache license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a0056a948813ee1b94c2724fe3c439c219a6353", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/1a0056a948813ee1b94c2724fe3c439c219a6353", "committedDate": "2020-01-24T06:23:45Z", "message": "fix update plugin bug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1a0056a948813ee1b94c2724fe3c439c219a6353", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/1a0056a948813ee1b94c2724fe3c439c219a6353", "committedDate": "2020-01-24T06:23:45Z", "message": "fix update plugin bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28d5e523d92d89e11697492120a3f9c43666bf32", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/28d5e523d92d89e11697492120a3f9c43666bf32", "committedDate": "2020-01-24T10:06:47Z", "message": "fix code bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/07002bd6be532ab16e5b01846f1a0bd603ca58bb", "committedDate": "2020-01-24T11:28:39Z", "message": "update spring-4.3.x-scenario expectedData"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTA2MzYy", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-348506362", "createdAt": "2020-01-27T08:52:47Z", "commit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1Mjo0N1rOFh7QFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1Mjo0N1rOFh7QFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExODEwMg==", "bodyText": "Inherit is a verb. This method name should be byMethodInheritanceAnnotationMatcher", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r371118102", "createdAt": "2020-01-27T08:52:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther jialong\n+ */\n+@HashCodeAndEqualsPlugin.Enhance\n+public class MethodInheritsDeclaringAnnotationMatcher<T extends MethodDescription> extends ElementMatcher.Junction.AbstractBase<T> {\n+    /**\n+     * The matcher to be applied to the provided annotation list.\n+     */\n+    private final ElementMatcher<? super AnnotationList> matcher;\n+\n+    /**\n+     * Creates a new matcher for the annotations of an annotated element.\n+     *\n+     * @param matcher The matcher to be applied to the provided annotation list.\n+     */\n+    public MethodInheritsDeclaringAnnotationMatcher(ElementMatcher<? super AnnotationList> matcher) {\n+        this.matcher = matcher;\n+    }\n+\n+    @Override\n+    public boolean matches(T target) {\n+        if (matcher.matches(target.getDeclaredAnnotations())) {\n+            return true;\n+        }\n+        String name = target.getName();\n+        ParameterList<?> parameters = target.getParameters();\n+\n+        TypeDefinition declaringType = target.getDeclaringType();\n+        return recursiveMatches(declaringType, name, parameters);\n+    }\n+\n+\n+    private boolean recursiveMatches(TypeDefinition typeDefinition, String methodName, ParameterList<?> parameters) {\n+        TypeList.Generic interfaces = typeDefinition.getInterfaces();\n+        for (TypeDescription.Generic implInterface : interfaces) {\n+            if (recursiveMatches(implInterface, methodName, parameters)) {\n+                return true;\n+            }\n+            MethodList<MethodDescription.InGenericShape> declaredMethods = implInterface.getDeclaredMethods();\n+            for (MethodDescription declaredMethod : declaredMethods) {\n+                if (Objects.equals(declaredMethod.getName(), methodName) && parameterEquals(parameters, declaredMethod.getParameters())) {\n+                    return matcher.matches(declaredMethod.getDeclaredAnnotations());\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+\n+    private boolean parameterEquals(ParameterList<?> source, ParameterList<?> impl) {\n+        if (source.size() != impl.size()) {\n+            return false;\n+        }\n+        for (int i = 0; i < source.size(); i++) {\n+            if (!Objects.equals(source.get(i).getType(), impl.get(i).getType())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static <T extends AnnotationSource> ElementMatcher.Junction<T> isInheritsAnnotatedWith(ElementMatcher<? super TypeDescription> matcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTA2NDY0", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-348506464", "createdAt": "2020-01-27T08:53:00Z", "commit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1MzowMFrOFh7QaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo1MzowMFrOFh7QaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExODE4NA==", "bodyText": "Should rename to MethodInheritanceAnnotationMatcher", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r371118184", "createdAt": "2020-01-27T08:53:00Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritsDeclaringAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther jialong\n+ */\n+@HashCodeAndEqualsPlugin.Enhance\n+public class MethodInheritsDeclaringAnnotationMatcher<T extends MethodDescription> extends ElementMatcher.Junction.AbstractBase<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07002bd6be532ab16e5b01846f1a0bd603ca58bb"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35fb823346693b01c6fa002c9314e50470d14443", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/35fb823346693b01c6fa002c9314e50470d14443", "committedDate": "2020-01-27T09:15:43Z", "message": "modify method name and class name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507bfc8b99de78600ba6e2ba027490092d6aa3ee", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/507bfc8b99de78600ba6e2ba027490092d6aa3ee", "committedDate": "2020-01-27T09:18:46Z", "message": "Modify method name class name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjAwMTI0", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-348600124", "createdAt": "2020-01-27T11:37:20Z", "commit": {"oid": "507bfc8b99de78600ba6e2ba027490092d6aa3ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTozNzoyMFrOFh_xRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTozNzoyMFrOFh_xRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MjEzNQ==", "bodyText": "Still, @auther is not a valid JavaDoc\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @auther jialong\n          \n          \n            \n             * @author jialong", "url": "https://github.com/apache/skywalking/pull/4278#discussion_r371192135", "createdAt": "2020-01-27T11:37:20Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/match/MethodInheritanceAnnotationMatcher.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.agent.core.plugin.match;\n+\n+import net.bytebuddy.build.HashCodeAndEqualsPlugin;\n+import net.bytebuddy.description.annotation.AnnotationList;\n+import net.bytebuddy.description.annotation.AnnotationSource;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.method.MethodList;\n+import net.bytebuddy.description.method.ParameterList;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.description.type.TypeList;\n+import net.bytebuddy.matcher.CollectionItemMatcher;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.Objects;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.annotationType;\n+\n+/**\n+ * Matching used to match method annotations, Can match annotations on interface methods\n+ * @auther jialong", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507bfc8b99de78600ba6e2ba027490092d6aa3ee"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjMzMTE4", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-350633118", "createdAt": "2020-01-30T07:56:07Z", "commit": {"oid": "507bfc8b99de78600ba6e2ba027490092d6aa3ee"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "362dc4906242689dfa90683711267725e55b5525", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/362dc4906242689dfa90683711267725e55b5525", "committedDate": "2020-02-01T06:19:55Z", "message": "update error JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b309e6eaf14dbb2d82cb8e0f625a0192d4ede3", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/a1b309e6eaf14dbb2d82cb8e0f625a0192d4ede3", "committedDate": "2020-02-01T06:40:46Z", "message": "fix test case error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b06b78c6e55d02ab08af71787725bf48f46b9b00", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/b06b78c6e55d02ab08af71787725bf48f46b9b00", "committedDate": "2020-02-01T06:42:50Z", "message": "Merge branch 'master' into mvc_method_inherits_annotation_match_problem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODcxMDU2", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-351871056", "createdAt": "2020-02-01T07:35:46Z", "commit": {"oid": "b06b78c6e55d02ab08af71787725bf48f46b9b00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODcyNTQ5", "url": "https://github.com/apache/skywalking/pull/4278#pullrequestreview-351872549", "createdAt": "2020-02-01T08:17:55Z", "commit": {"oid": "b06b78c6e55d02ab08af71787725bf48f46b9b00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2621, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}