{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMzI0NTk4", "number": 5658, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0NjowMlrOEtDDOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNzo1OFrOEtEp0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjcxMzU0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0NjowMlrOHgnkvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxNjozM1rOHgpEGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDg2MA==", "bodyText": "Please put this in the finally and try{} the whole afterMethod in case it leaks.", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r503964860", "createdAt": "2020-10-13T13:46:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,29 +45,30 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n+        ContextSnapshot contextSnapshot = ContextManager.capture();\n         if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+            String uri = RestTemplateRuntimeContextHelper.getUri();\n+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n         }\n+\n+        RestTemplateRuntimeContextHelper.cleanUri();\n+        RestTemplateRuntimeContextHelper.cleanContextCarrier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c8b0afba196310eadf106bca58198b339fa8be"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MzUzNw==", "bodyText": "got it", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r503973537", "createdAt": "2020-10-13T13:56:44Z", "author": {"login": "thanq"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,29 +45,30 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n+        ContextSnapshot contextSnapshot = ContextManager.capture();\n         if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+            String uri = RestTemplateRuntimeContextHelper.getUri();\n+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n         }\n+\n+        RestTemplateRuntimeContextHelper.cleanUri();\n+        RestTemplateRuntimeContextHelper.cleanContextCarrier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDg2MA=="}, "originalCommit": {"oid": "69c8b0afba196310eadf106bca58198b339fa8be"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4OTI3Mw==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r503989273", "createdAt": "2020-10-13T14:16:33Z", "author": {"login": "thanq"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,29 +45,30 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n+        ContextSnapshot contextSnapshot = ContextManager.capture();\n         if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+            String uri = RestTemplateRuntimeContextHelper.getUri();\n+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n         }\n+\n+        RestTemplateRuntimeContextHelper.cleanUri();\n+        RestTemplateRuntimeContextHelper.cleanContextCarrier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDg2MA=="}, "originalCommit": {"oid": "69c8b0afba196310eadf106bca58198b339fa8be"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk3MTUyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNjo1OFrOHgqElw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNjo1OFrOHgqElw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTc4Mw==", "bodyText": "Don't use catch, just try/finally, please.", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r504005783", "createdAt": "2020-10-13T14:36:58Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,30 +50,34 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n-        if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+        try {\n+            ContextSnapshot contextSnapshot = ContextManager.capture();\n+            if (ret != null) {\n+                String uri = RestTemplateRuntimeContextHelper.getUri();\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+            }\n+        } catch (Throwable e){\n+            LOGGER.warn(\"resttemplate plugin has error: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70ceeb354b02f5ec303ed47aa613e9a735022933"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk3NjE5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNzo1OFrOHgqHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjozMzozOFrOHhEJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNjU4Mw==", "bodyText": "Move this into the try. Because this could have NPE.", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r504006583", "createdAt": "2020-10-13T14:37:58Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,30 +50,34 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n-        if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+        try {\n+            ContextSnapshot contextSnapshot = ContextManager.capture();\n+            if (ret != null) {\n+                String uri = RestTemplateRuntimeContextHelper.getUri();\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+            }\n+        } catch (Throwable e){\n+            LOGGER.warn(\"resttemplate plugin has error: \", e);\n+        } finally {\n+            ContextManager.stopSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70ceeb354b02f5ec303ed47aa613e9a735022933"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMzAyOQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r504433029", "createdAt": "2020-10-14T06:33:38Z", "author": {"login": "thanq"}, "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,30 +50,34 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n-        if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+        try {\n+            ContextSnapshot contextSnapshot = ContextManager.capture();\n+            if (ret != null) {\n+                String uri = RestTemplateRuntimeContextHelper.getUri();\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+            }\n+        } catch (Throwable e){\n+            LOGGER.warn(\"resttemplate plugin has error: \", e);\n+        } finally {\n+            ContextManager.stopSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNjU4Mw=="}, "originalCommit": {"oid": "70ceeb354b02f5ec303ed47aa613e9a735022933"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4899, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}