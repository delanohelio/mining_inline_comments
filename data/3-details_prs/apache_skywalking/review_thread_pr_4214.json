{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDY5Njc3", "number": 4214, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo0Mzo1MVrODXLFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoyMDoxN1rODXXlqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjI1NDY5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MultiIntValuesHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo0Mzo1MVrOFcWFvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo0Mzo1MVrOFcWFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NjM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * IntValueHolder always holds a set of int(s).\n          \n          \n            \n             * MultiIntValuesHolder always holds a set of int(s).", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365266365", "createdAt": "2020-01-10T14:43:51Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/MultiIntValuesHolder.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+/**\n+ * IntValueHolder always holds a set of int(s).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjI1OTMzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo0NToyMVrOFcWIjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0Mzo0NVrOFcX7Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NzA4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n          \n          \n            \n             * PercentileMetrics is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365267087", "createdAt": "2020-01-10T14:45:21Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NjQ4Mw==", "bodyText": "This is using the func name.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365296483", "createdAt": "2020-01-10T15:43:45Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NzA4Nw=="}, "originalCommit": {"oid": "d7b42e3150fdb5f65fa61e00b31ba25e1c3c2fdf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM2Mzg0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyMDoyMlrOFcXKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwODoyNzoxN1rOFcoXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ==", "bodyText": "Is it reasonable to make it 0 by default? My intuition of the following configs:\nthreshold: 1000,1000\nmay be just monitor and alarm the p99 and p95 only, ignoring others percentile metrics, and your implementation seems to always send alarm? (because the other metrics may be almostly always > 0).\nAnd are there any possibility when the users want to monitor p99 and p75, how to config the threshold?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365283971", "createdAt": "2020-01-10T15:20:22Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5NzUxNg==", "bodyText": "This is only a fail-safe mechanism, in case user doesn't set enough values.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365297516", "createdAt": "2020-01-10T15:45:36Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxNjk1OQ==", "bodyText": "So the users are expected to set all thresholds for all percentile metrics?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365316959", "createdAt": "2020-01-10T16:24:12Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMDI4NQ==", "bodyText": "Yes. Or set to 0, then percentile alarm wouldn't be triggered by it. Because you will use > as OP.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365320285", "createdAt": "2020-01-10T16:31:03Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NDkxMw==", "bodyText": "Sorry, my mistake. All thresholds must be set at current implementation.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365564913", "createdAt": "2020-01-12T08:10:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NDk2NA==", "bodyText": "I haven't found a better way to support setting part of it, maybe set - to represent skipping?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365564964", "createdAt": "2020-01-12T08:11:44Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTA0Mw==", "bodyText": "I haven't found a better way to support setting part of it, maybe set - to represent skipping?\n\nSounds good to me", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365565043", "createdAt": "2020-01-12T08:13:23Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTgyMg==", "bodyText": "Done, please review.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365565822", "createdAt": "2020-01-12T08:27:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,31 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        int[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK: for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            iexpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iexpected = iaexpected[i];\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Mzk3MQ=="}, "originalCommit": {"oid": "12c8796f6eeb2b9d28b677add2b2ab00e401777b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM4MDA5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyNTozMVrOFcXUsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyNTozMVrOFcXUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NjU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    percentileValues = new IntKeyLongValueHashMap(5);\n          \n          \n            \n                    percentileValues = new IntKeyLongValueHashMap(RANKS.length);", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365286579", "createdAt": "2020-01-10T15:25:31Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM4MjQ4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyNjoxMFrOFcXWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0NjozNVrOFcYBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Njk1Ng==", "bodyText": "may reduce one multiply operation, I'm not sure though?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n          \n          \n            \n                            roofs[i] = Math.round(total * RANKS[i] / 100.0);", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365286956", "createdAt": "2020-01-10T15:26:10Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODAxNg==", "bodyText": "This should be optimized by the JDK, from my understanding.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365298016", "createdAt": "2020-01-10T15:46:35Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4Njk1Ng=="}, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjM4NjY0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNToyNzoxNlrOFcXYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMjozNTo1MFrOFclgaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA==", "bodyText": "Do we need .toArray?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365287588", "createdAt": "2020-01-10T15:27:16Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5OTMyNw==", "bodyText": "What do you suggest?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365299327", "createdAt": "2020-01-10T15:49:00Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4OTI4Mw==", "bodyText": "Simply iterate over the \u201cstream\u201d without creating new object", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365489283", "createdAt": "2020-01-11T01:47:45Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4OTQ2Nw==", "bodyText": "I am not familiar with the stream API. Do you have a proposal about how to change?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365489467", "createdAt": "2020-01-11T01:50:07Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDE3Mw==", "bodyText": "Did not open in IDE just now, and the comparator can be simplified too, trivial though:\ndataset.values().stream().sorted(Comparator.comparingInt(IntKeyLongValue::getKey)).forEach(element -> {\n                count += element.getValue();\n                for (int i = index; i < roofs.length; i++) {\n                    int roof = roofs[i];\n\n                    if (count >= roof) {\n                        percentileValues.put(index, new IntKeyLongValue(index, element.getKey() * precision));\n                        index++;\n                    } else {\n                        break;\n                    }\n                }\n            });\n\nSimply iterate over the \u201cstream\u201d without creating new object\n\nSince you're using several variables that are non-final, it may make it uncomfortable to iterate over the stream directly, just ignore my previous comment, but the comparator can be simplified indeed", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365490173", "createdAt": "2020-01-11T01:59:07Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxODk1Mg==", "bodyText": "I copied most of the codes from Pxx, so, I prefer don't change it in this PR at least. If you want to change, let's move this to another new PR about code refactor, OK?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365518952", "createdAt": "2020-01-11T12:35:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(5);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI4NzU4OA=="}, "originalCommit": {"oid": "9b7cc82f1de464174a369f670bed885652b3abb7"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjYwODUzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNjozNTowOVrOFcZgyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNTowMjo0OVrOFcpx0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA==", "bodyText": "may be if condition count >= roofs[i] && count<roofs[i+1]? also change for i;", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365322440", "createdAt": "2020-01-10T16:35:09Z", "author": null, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(RANKS.length);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);\n+            for (IntKeyLongValue element : sortedData) {\n+                count += element.getValue();\n+                for (int i = index; i < roofs.length; i++) {\n+                    int roof = roofs[i];\n+\n+                    if (count >= roof) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyODExOQ==", "bodyText": "Why? I am not following. Please provide test case to describe the concern.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365328119", "createdAt": "2020-01-10T16:47:03Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(RANKS.length);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);\n+            for (IntKeyLongValue element : sortedData) {\n+                count += element.getValue();\n+                for (int i = index; i < roofs.length; i++) {\n+                    int roof = roofs[i];\n+\n+                    if (count >= roof) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA=="}, "originalCommit": {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4ODk0Ng==", "bodyText": "Should be correct, logical thinking is a bit problematic. above roofs should all hit", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365588946", "createdAt": "2020-01-12T15:02:49Z", "author": null, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/PercentileMetrics.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import java.util.Comparator;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Arg;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.SourceFrom;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+/**\n+ * Percentile is a better implementation than {@link PxxMetrics}. It is introduced since 7.0.0, it could calculate the\n+ * multiple P50/75/90/95/99 values once for all.\n+ *\n+ * @author wusheng\n+ */\n+@MetricsFunction(functionName = \"percentile\")\n+public abstract class PercentileMetrics extends GroupMetrics implements MultiIntValuesHolder {\n+    protected static final String DATASET = \"dataset\";\n+    protected static final String VALUE = \"value\";\n+    protected static final String PRECISION = \"precision\";\n+\n+    private static final int[] RANKS = {50, 75, 90, 95, 99};\n+\n+    @Getter @Setter @Column(columnName = VALUE, isValue = true) private IntKeyLongValueHashMap percentileValues;\n+    @Getter @Setter @Column(columnName = PRECISION) private int precision;\n+    @Getter @Setter @Column(columnName = DATASET) private IntKeyLongValueHashMap dataset;\n+\n+    private boolean isCalculated;\n+\n+    public PercentileMetrics() {\n+        percentileValues = new IntKeyLongValueHashMap(RANKS.length);\n+        dataset = new IntKeyLongValueHashMap(30);\n+    }\n+\n+    @Entrance\n+    public final void combine(@SourceFrom int value, @Arg int precision) {\n+        this.isCalculated = false;\n+        this.precision = precision;\n+\n+        int index = value / precision;\n+        IntKeyLongValue element = dataset.get(index);\n+        if (element == null) {\n+            element = new IntKeyLongValue(index, 1);\n+            dataset.put(element.getKey(), element);\n+        } else {\n+            element.addValue(1);\n+        }\n+    }\n+\n+    @Override\n+    public void combine(Metrics metrics) {\n+        this.isCalculated = false;\n+\n+        PercentileMetrics percentileMetrics = (PercentileMetrics)metrics;\n+        combine(percentileMetrics.getDataset(), this.dataset);\n+    }\n+\n+    @Override\n+    public final void calculate() {\n+\n+        if (!isCalculated) {\n+            int total = dataset.values().stream().mapToInt(element -> (int)element.getValue()).sum();\n+\n+            int index = 0;\n+            int[] roofs = new int[RANKS.length];\n+            for (int i = 0; i < RANKS.length; i++) {\n+                roofs[i] = Math.round(total * RANKS[i] * 1.0f / 100);\n+            }\n+\n+            int count = 0;\n+            IntKeyLongValue[] sortedData = dataset.values().stream().sorted(new Comparator<IntKeyLongValue>() {\n+                @Override public int compare(IntKeyLongValue o1, IntKeyLongValue o2) {\n+                    return o1.getKey() - o2.getKey();\n+                }\n+            }).toArray(IntKeyLongValue[]::new);\n+            for (IntKeyLongValue element : sortedData) {\n+                count += element.getValue();\n+                for (int i = index; i < roofs.length; i++) {\n+                    int roof = roofs[i];\n+\n+                    if (count >= roof) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMyMjQ0MA=="}, "originalCommit": {"oid": "dcbd3055c2360787a1e1812efdaf9de8b7e3e594"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY2NjkzOnYy", "diffSide": "LEFT", "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowMzo1OVrOFcjxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjowODowMVrOFcjyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ5MA==", "bodyText": "Regarding pxx, we now use the percentile query at one time. From getMultipleLinearIntValues, we look at one index of the query, but now the back-end index is still divided into five Pxx. This is the next step of transformation? Or is it a merged index that has already been queried?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365490490", "createdAt": "2020-01-11T02:03:59Z", "author": null, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -17,22 +17,14 @@\n  */\n \n // All scope metrics\n-all_p99 = from(All.latency).p99(10);\n-all_p95 = from(All.latency).p95(10);\n-all_p90 = from(All.latency).p90(10);\n-all_p75 = from(All.latency).p75(10);\n-all_p50 = from(All.latency).p50(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9d4bd28b965da202e96944efb4a2bb09496507"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDc1Mw==", "bodyText": "This is the next step of transformation? Or is it a merged index that has already been queried?\n\nUI will change after this merged. @Fine0830 will do that part.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365490753", "createdAt": "2020-01-11T02:08:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-bootstrap/src/main/resources/official_analysis.oal", "diffHunk": "@@ -17,22 +17,14 @@\n  */\n \n // All scope metrics\n-all_p99 = from(All.latency).p99(10);\n-all_p95 = from(All.latency).p95(10);\n-all_p90 = from(All.latency).p90(10);\n-all_p75 = from(All.latency).p75(10);\n-all_p50 = from(All.latency).p50(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ5MA=="}, "originalCommit": {"oid": "be9d4bd28b965da202e96944efb4a2bb09496507"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODI3MDc4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwOTowNTowNlrOFcofrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwOTowNTowNlrOFcofrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NzkxNg==", "bodyText": "Missing break after if statement\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                }\n          \n          \n            \n                                                }\n          \n          \n            \n                                                break;", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365567916", "createdAt": "2020-01-12T09:05:06Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,38 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        Integer[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK:\n+                        for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            Integer iNullableExpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iNullableExpected = iaexpected[i];\n+                                if (iNullableExpected == null) {\n+                                    continue;\n+                                }\n+                            }\n+                            switch (op) {\n+                                case LESS:\n+                                    if (ivalue < iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODI3MTA2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwOTowNTo0NlrOFcofzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwOTowNTo0NlrOFcofzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2Nzk1MA==", "bodyText": "Same here", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365567950", "createdAt": "2020-01-12T09:05:46Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RunningRule.java", "diffHunk": "@@ -343,6 +345,38 @@ private boolean isMatch() {\n                                 break;\n                         }\n                         break;\n+                    case MULTI_INTS:\n+                        int[] ivalueArray = ((MultiIntValuesHolder)metrics).getValues();\n+                        Integer[] iaexpected = RunningRule.this.threshold.getIntValuesThreshold();\n+                        MULTI_VALUE_CHECK:\n+                        for (int i = 0; i < ivalueArray.length; i++) {\n+                            ivalue = ivalueArray[i];\n+                            Integer iNullableExpected = 0;\n+                            if (iaexpected.length > i) {\n+                                iNullableExpected = iaexpected[i];\n+                                if (iNullableExpected == null) {\n+                                    continue;\n+                                }\n+                            }\n+                            switch (op) {\n+                                case LESS:\n+                                    if (ivalue < iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }\n+                                case GREATER:\n+                                    if (ivalue > iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }\n+                                case EQUAL:\n+                                    if (ivalue == iNullableExpected) {\n+                                        matchCount++;\n+                                        break MULTI_VALUE_CHECK;\n+                                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ed279952c345d866a5127aa9ae98c5edcec392"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODI5OTc5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxMzoxOFrOFcoutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDozMzo1NFrOFcozZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng==", "bodyText": "I'm not very comfortable with the magic number here", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571766", "createdAt": "2020-01-12T10:13:18Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -121,7 +134,43 @@ protected void functionAggregation(Function function, TermsAggregationBuilder pa\n         return intValues;\n     }\n \n-    @Override public Thermodynamic getThermodynamic(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException {\n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids, int numOfLinear, String valueCName) throws IOException {\n+        String indexName = ModelName.build(downsampling, indName);\n+\n+        SearchResponse response = getClient().ids(indexName, ids.toArray(new String[0]));\n+        Map<String, Map<String, Object>> idMap = toMap(response);\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        for (String id : ids) {\n+            for (int i = 0; i < intValuesArray.length; i++) {\n+                KVInt kvInt = new KVInt();\n+                kvInt.setId(id);\n+                kvInt.setValue(0);\n+                intValuesArray[i].addKVInt(kvInt);\n+            }\n+\n+            if (idMap.containsKey(id)) {\n+                Map<String, Object> source = idMap.get(id);\n+                IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3Mjc2MA==", "bodyText": "What do you expect? 5 should be suitable for 5-10 elements.", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572760", "createdAt": "2020-01-12T10:30:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -121,7 +134,43 @@ protected void functionAggregation(Function function, TermsAggregationBuilder pa\n         return intValues;\n     }\n \n-    @Override public Thermodynamic getThermodynamic(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException {\n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids, int numOfLinear, String valueCName) throws IOException {\n+        String indexName = ModelName.build(downsampling, indName);\n+\n+        SearchResponse response = getClient().ids(indexName, ids.toArray(new String[0]));\n+        Map<String, Map<String, Object>> idMap = toMap(response);\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        for (String id : ids) {\n+            for (int i = 0; i < intValuesArray.length; i++) {\n+                KVInt kvInt = new KVInt();\n+                kvInt.setId(id);\n+                kvInt.setValue(0);\n+                intValuesArray[i].addKVInt(kvInt);\n+            }\n+\n+            if (idMap.containsKey(id)) {\n+                Map<String, Object> source = idMap.get(id);\n+                IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng=="}, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3Mjk2NA==", "bodyText": "What do you expect? 5 should be suitable for 5-10 elements.\n\noops, didn't notice it is a map, I thought it was array mistakenly, ignore me \ud83d\ude04", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572964", "createdAt": "2020-01-12T10:33:54Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -121,7 +134,43 @@ protected void functionAggregation(Function function, TermsAggregationBuilder pa\n         return intValues;\n     }\n \n-    @Override public Thermodynamic getThermodynamic(String indName, Downsampling downsampling, List<String> ids, String valueCName) throws IOException {\n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids, int numOfLinear, String valueCName) throws IOException {\n+        String indexName = ModelName.build(downsampling, indName);\n+\n+        SearchResponse response = getClient().ids(indexName, ids.toArray(new String[0]));\n+        Map<String, Map<String, Object>> idMap = toMap(response);\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        for (String id : ids) {\n+            for (int i = 0; i < intValuesArray.length; i++) {\n+                KVInt kvInt = new KVInt();\n+                kvInt.setId(id);\n+                kvInt.setValue(0);\n+                intValuesArray[i].addKVInt(kvInt);\n+            }\n+\n+            if (idMap.containsKey(id)) {\n+                Map<String, Object> source = idMap.get(id);\n+                IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc2Ng=="}, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODMwMDAwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxMzoyOFrOFcouzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxMzoyOFrOFcouzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTc5MA==", "bodyText": "Same here", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571790", "createdAt": "2020-01-12T10:13:28Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java", "diffHunk": "@@ -129,6 +143,48 @@ public IntValues getValues(String indName, Downsampling downsampling, long start\n         return orderWithDefault0(intValues, ids);\n     }\n \n+    @Override public IntValues[] getMultipleLinearIntValues(String indName, Downsampling downsampling,\n+        List<String> ids,\n+        int numOfLinear,\n+        String valueCName) throws IOException {\n+        String tableName = ModelName.build(downsampling, indName);\n+\n+        StringBuilder idValues = new StringBuilder();\n+        for (int valueIdx = 0; valueIdx < ids.size(); valueIdx++) {\n+            if (valueIdx != 0) {\n+                idValues.append(\",\");\n+            }\n+            idValues.append(\"'\").append(ids.get(valueIdx)).append(\"'\");\n+        }\n+\n+        IntValues[] intValuesArray = new IntValues[numOfLinear];\n+        for (int i = 0; i < intValuesArray.length; i++) {\n+            intValuesArray[i] = new IntValues();\n+        }\n+\n+        try (Connection connection = h2Client.getConnection()) {\n+            try (ResultSet resultSet = h2Client.executeQuery(connection, \"select id, \" + valueCName + \" from \" + tableName + \" where id in (\" + idValues.toString() + \")\")) {\n+                while (resultSet.next()) {\n+                    String id = resultSet.getString(\"id\");\n+\n+                    IntKeyLongValueHashMap multipleValues = new IntKeyLongValueHashMap(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODMwMTI5OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-alarm.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxNjoyOVrOFcovdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxNjoyOVrOFcovdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MTk1Nw==", "bodyText": "Is this sentence completed? forget to update?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365571957", "createdAt": "2020-01-12T10:16:29Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -13,7 +13,11 @@ Alarm rule is constituted by following keys\n endpoint name.\n - **Exclude names**. The following entity names are excluded in this rule. Such as Service name,\n   endpoint name.\n-- **Threshold**. The target value.\n+- **Threshold**. The target value. \n+For multiple values metrics, such as **percentile**, the threshold is an array. Described like  `value1, value2, value3, value4, value5`.\n+Each value could the threshold for each value of the metrics. Set the value to `-` if don't want to trigger alarm by this or some of the values.  \n+Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, value4, value5` means, there is no threshold for P50 and P75 in percentile alarm rule.\n+Could be an array, such as `value1, value2, value3` if the metrics are multiple values metrics. Element of the array could be NULL, then ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODMwMjQ0OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-alarm.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxODo1MlrOFcowDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoxODo1MlrOFcowDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MjExMQ==", "bodyText": "[1] (for reference)", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572111", "createdAt": "2020-01-12T10:18:52Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -13,7 +13,11 @@ Alarm rule is constituted by following keys\n endpoint name.\n - **Exclude names**. The following entity names are excluded in this rule. Such as Service name,\n   endpoint name.\n-- **Threshold**. The target value.\n+- **Threshold**. The target value. \n+For multiple values metrics, such as **percentile**, the threshold is an array. Described like  `value1, value2, value3, value4, value5`.\n+Each value could the threshold for each value of the metrics. Set the value to `-` if don't want to trigger alarm by this or some of the values.  \n+Such as in **percentile**, `value1` is threshold of P50, and `-, -, value3, value4, value5` means, there is no threshold for P50 and P75 in percentile alarm rule.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODMwMzEzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-alarm.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDoyMDoxN1rOFcowbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMDozNjoxMlrOFcoz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MjIwNg==", "bodyText": "I don't know how other people think of this, I'm confused with the order of the thresholds at first glance, p99 -> p50 or p50 -> p99, and seems only [1] tells the order, vaguely though", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572206", "createdAt": "2020-01-12T10:20:17Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -51,13 +54,22 @@ rules:\n     op: <\n     period: 10\n     count: 4\n+  service_resp_time_percentile_rule:\n+    # Metrics value need to be long, double or int\n+    metrics-name: service_percentile\n+    op: \">\"\n+    threshold: 1000,1000,1000,1000,1000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3Mjg5OA==", "bodyText": "Do you want me to put comments here? Or put doc at some places?", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365572898", "createdAt": "2020-01-12T10:32:48Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -51,13 +54,22 @@ rules:\n     op: <\n     period: 10\n     count: 4\n+  service_resp_time_percentile_rule:\n+    # Metrics value need to be long, double or int\n+    metrics-name: service_percentile\n+    op: \">\"\n+    threshold: 1000,1000,1000,1000,1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MjIwNg=="}, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MzA4Nw==", "bodyText": "Do you want me to put comments here? Or put doc at some places?\n\nI prefer to point out the order here, users don't need to refer to other doc when they're uncertain with the order \ud83d\ude04", "url": "https://github.com/apache/skywalking/pull/4214#discussion_r365573087", "createdAt": "2020-01-12T10:36:12Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -51,13 +54,22 @@ rules:\n     op: <\n     period: 10\n     count: 4\n+  service_resp_time_percentile_rule:\n+    # Metrics value need to be long, double or int\n+    metrics-name: service_percentile\n+    op: \">\"\n+    threshold: 1000,1000,1000,1000,1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3MjIwNg=="}, "originalCommit": {"oid": "35cf76e21daefee4a870569bc5b3d7711c9201b4"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4511, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}