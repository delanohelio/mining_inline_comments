{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MzYzNzg0", "number": 5887, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODowM1rOE8rZ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo0MzozN1rOE9d03Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMTY1OnYy", "diffSide": "RIGHT", "path": "test/plugin/run.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODowM1rOH48h2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNDowN1rOH48vSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDAwOA==", "bodyText": "wrong hand?", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r529474008", "createdAt": "2020-11-24T11:28:03Z", "author": {"login": "dmsolr"}, "path": "test/plugin/run.sh", "diffHunk": "@@ -24,7 +24,7 @@ force_build=\"off\"\n cleanup=\"off\"\n debug_mode=\n \n-mvnw=${home}/../../mvnw\n+mvnw=mvn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6166533bceff32b6b0e23276d07acf436b24705"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzQ0OA==", "bodyText": "wrong hand?\n\nsorry, fixed.", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r529477448", "createdAt": "2020-11-24T11:34:07Z", "author": {"login": "zifeihan"}, "path": "test/plugin/run.sh", "diffHunk": "@@ -24,7 +24,7 @@ force_build=\"off\"\n cleanup=\"off\"\n debug_mode=\n \n-mvnw=${home}/../../mvnw\n+mvnw=mvn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDAwOA=="}, "originalCommit": {"oid": "a6166533bceff32b6b0e23276d07acf436b24705"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxNTIxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/cxf-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/cxf/v3/client/MessageSenderInterceptorInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyOTowN1rOH48kIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNzozNFrOH483dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDU5NA==", "bodyText": "suggest: new ArrayList<>(1)", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r529474594", "createdAt": "2020-11-24T11:29:07Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/cxf-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/cxf/v3/client/MessageSenderInterceptorInterceptor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.cxf.v3.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.binding.soap.SoapMessage;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.transport.http.Address;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+public class MessageSenderInterceptorInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(final EnhancedInstance objInst,\n+                             final Method method,\n+                             final Object[] allArguments,\n+                             final Class<?>[] argumentsTypes,\n+                             final MethodInterceptResult result) throws Throwable {\n+        SoapMessage message = (SoapMessage) allArguments[0];\n+        final String httpRequestMethod = (String) message.get(Message.HTTP_REQUEST_METHOD);\n+        final MessageInfo messageInfo = (MessageInfo) message.get(\"org.apache.cxf.service.model.MessageInfo\");\n+        final Address address = (Address) message.get(\"http.connection.address\");\n+\n+        if (null == httpRequestMethod || null == messageInfo || null == address) {\n+            return;\n+        }\n+        final String operationName = generateOperationName(messageInfo, address);\n+        AbstractSpan span = ContextManager.createExitSpan(operationName, address.getURI().getAuthority());\n+\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        ContextManager.inject(contextCarrier);\n+        span.setComponent(ComponentsDefine.APACHE_CXF);\n+        Tags.HTTP.METHOD.set(span, httpRequestMethod);\n+        Tags.URL.set(span, generateRequestURL(messageInfo, address));\n+        SpanLayer.asRPCFramework(span);\n+\n+        Map protocolHeaders = (Map) message.get(Message.PROTOCOL_HEADERS);\n+\n+        CarrierItem next = contextCarrier.items();\n+        while (next.hasNext()) {\n+            next = next.next();\n+            List<String> headerList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6166533bceff32b6b0e23276d07acf436b24705"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3OTU0MQ==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r529479541", "createdAt": "2020-11-24T11:37:34Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/cxf-3.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/cxf/v3/client/MessageSenderInterceptorInterceptor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.cxf.v3.client;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.binding.soap.SoapMessage;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.service.model.MessageInfo;\n+import org.apache.cxf.transport.http.Address;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+public class MessageSenderInterceptorInterceptor implements InstanceMethodsAroundInterceptor {\n+    @Override\n+    public void beforeMethod(final EnhancedInstance objInst,\n+                             final Method method,\n+                             final Object[] allArguments,\n+                             final Class<?>[] argumentsTypes,\n+                             final MethodInterceptResult result) throws Throwable {\n+        SoapMessage message = (SoapMessage) allArguments[0];\n+        final String httpRequestMethod = (String) message.get(Message.HTTP_REQUEST_METHOD);\n+        final MessageInfo messageInfo = (MessageInfo) message.get(\"org.apache.cxf.service.model.MessageInfo\");\n+        final Address address = (Address) message.get(\"http.connection.address\");\n+\n+        if (null == httpRequestMethod || null == messageInfo || null == address) {\n+            return;\n+        }\n+        final String operationName = generateOperationName(messageInfo, address);\n+        AbstractSpan span = ContextManager.createExitSpan(operationName, address.getURI().getAuthority());\n+\n+        ContextCarrier contextCarrier = new ContextCarrier();\n+        ContextManager.inject(contextCarrier);\n+        span.setComponent(ComponentsDefine.APACHE_CXF);\n+        Tags.HTTP.METHOD.set(span, httpRequestMethod);\n+        Tags.URL.set(span, generateRequestURL(messageInfo, address));\n+        SpanLayer.asRPCFramework(span);\n+\n+        Map protocolHeaders = (Map) message.get(Message.PROTOCOL_HEADERS);\n+\n+        CarrierItem next = contextCarrier.items();\n+        while (next.hasNext()) {\n+            next = next.next();\n+            List<String> headerList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDU5NA=="}, "originalCommit": {"oid": "a6166533bceff32b6b0e23276d07acf436b24705"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTM5Mzc0OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/cxf-scenario/config/expectedData.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDo0MToxN1rOH5D9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjo1OTo0MlrOH5hU1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NTg0Mw==", "bodyText": "This async invoke could be in the same thread? I found out you have capture/continued, but in the test, this is in the same thread", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r529595843", "createdAt": "2020-11-24T14:41:17Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/cxf-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,84 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+  - serviceName: cxf-scenario\n+    segmentSize: ge 3\n+    segments:\n+      - segmentId: not null\n+        spans:\n+          - operationName: /CXF/AsyncInvoke", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df74f6c911692a8c495081a4083fbdb22b89088"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3Njg4NA==", "bodyText": "fixed.", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r530076884", "createdAt": "2020-11-25T02:59:42Z", "author": {"login": "zifeihan"}, "path": "test/plugin/scenarios/cxf-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,84 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+  - serviceName: cxf-scenario\n+    segmentSize: ge 3\n+    segments:\n+      - segmentId: not null\n+        spans:\n+          - operationName: /CXF/AsyncInvoke", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5NTg0Mw=="}, "originalCommit": {"oid": "0df74f6c911692a8c495081a4083fbdb22b89088"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg0OTgzOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/cxf-scenario/config/expectedData.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzoyOToxNVrOH6Knzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo0Nzo0OFrOH6K4vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1MzQ4Ng==", "bodyText": "What is the value of this ID?", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r530753486", "createdAt": "2020-11-26T03:29:15Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/cxf-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,90 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+  - serviceName: cxf-scenario\n+    segmentSize: ge 4\n+    segments:\n+      - segmentId: not null\n+        spans:\n+          - operationName: /cxf-scenario/soap/user\n+            operationId: 0\n+            parentSpanId: -1\n+            spanId: 0\n+            spanLayer: Http\n+            startTime: nq 0\n+            endTime: nq 0\n+            componentId: not null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2a7411c5455beb01ca884d43e253b130849c98"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NzgyMA==", "bodyText": "fixed.", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r530757820", "createdAt": "2020-11-26T03:47:48Z", "author": {"login": "zifeihan"}, "path": "test/plugin/scenarios/cxf-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,90 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+  - serviceName: cxf-scenario\n+    segmentSize: ge 4\n+    segments:\n+      - segmentId: not null\n+        spans:\n+          - operationName: /cxf-scenario/soap/user\n+            operationId: 0\n+            parentSpanId: -1\n+            spanId: 0\n+            spanLayer: Http\n+            startTime: nq 0\n+            endTime: nq 0\n+            componentId: not null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1MzQ4Ng=="}, "originalCommit": {"oid": "aa2a7411c5455beb01ca884d43e253b130849c98"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg3MjYxOnYy", "diffSide": "RIGHT", "path": ".github/workflows/plugins-test.0.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo0MzozN1rOH6K04Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo0ODoxMVrOH6K5BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NjgzMw==", "bodyText": "Better move this to pugins-test.1.yaml or plugins-test.2.yaml.\n$ python3 tools/select-group.py\n/Volumes/data/developer/skywalking/.github/workflows/plugins-test.1.yaml 81\n/Volumes/data/developer/skywalking/.github/workflows/plugins-test.2.yaml 81\n/Volumes/data/developer/skywalking/.github/workflows/plugins-test.3.yaml 95\n/Volumes/data/developer/skywalking/.github/workflows/plugins-test.0.yaml 118", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r530756833", "createdAt": "2020-11-26T03:43:37Z", "author": {"login": "kezhenxu94"}, "path": ".github/workflows/plugins-test.0.yaml", "diffHunk": "@@ -70,6 +70,7 @@ jobs:\n           - gson-scenario\n           - elasticjob-3.x-scenario\n           - springmvc-reactive-scenario\n+          - cxf-scenario", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2a7411c5455beb01ca884d43e253b130849c98"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1Nzg5Mg==", "bodyText": "fixed.", "url": "https://github.com/apache/skywalking/pull/5887#discussion_r530757892", "createdAt": "2020-11-26T03:48:11Z", "author": {"login": "zifeihan"}, "path": ".github/workflows/plugins-test.0.yaml", "diffHunk": "@@ -70,6 +70,7 @@ jobs:\n           - gson-scenario\n           - elasticjob-3.x-scenario\n           - springmvc-reactive-scenario\n+          - cxf-scenario", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NjgzMw=="}, "originalCommit": {"oid": "aa2a7411c5455beb01ca884d43e253b130849c98"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4613, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}