{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NzY4OTM4", "number": 4517, "title": "fix elasticsearch-5.x-plugin when use es6.x TransportClient error", "bodyText": "fix elasticsearch-5.x-plugin when use es6.x TransportClient error:\nclass[class org.elasticsearch.client.transport.TransportClientNodesService] after method[addTransportAddresses] intercept failure\njava.lang.IncompatibleClassChangeError: Found class org.elasticsearch.common.transport.TransportAddress, but interface was expected\n\nbecause the org.elasticsearch.common.transport.TransportAddress is class in es6.x\n\nso, up es5.x plugin, make it inoperative on es6.x client\n\nup es6.x plugin to support TransportClient", "createdAt": "2020-03-15T17:24:41Z", "url": "https://github.com/apache/skywalking/pull/4517", "merged": true, "mergeCommit": {"oid": "1bc408282176363e6d98b3969be12810dfcded72"}, "closed": true, "closedAt": "2020-03-27T05:50:28Z", "author": {"login": "Indifer"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbbUXokAH2gAyMzg4NzY4OTM4OmJlMzUwMjhhNGZjOWZmOTNkMDc0NGFiYTE0OTBjZmQwODA2MjMzOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRqKHBgFqTM4MjU5NDE1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "be35028a4fc9ff93d0744aba1490cfd080623397", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/be35028a4fc9ff93d0744aba1490cfd080623397", "committedDate": "2019-10-10T09:54:48Z", "message": "Merge pull request #1 from apache/master\n\nup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6f54b2ecaa2eb65fdc2d17f827510286c1b35a4", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/b6f54b2ecaa2eb65fdc2d17f827510286c1b35a4", "committedDate": "2019-10-10T11:15:21Z", "message": "up ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5976c7f0c1f6ed69d86b4a1296af1491c8666cd", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/d5976c7f0c1f6ed69d86b4a1296af1491c8666cd", "committedDate": "2019-10-10T11:25:20Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c67c8e2bd5ed1ad3b168c1bafa1a296656f50c", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/74c67c8e2bd5ed1ad3b168c1bafa1a296656f50c", "committedDate": "2019-10-11T02:08:49Z", "message": "up ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd2092730953ca1af4cc67d5317d46d316ebfc3", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/9dd2092730953ca1af4cc67d5317d46d316ebfc3", "committedDate": "2019-10-11T02:18:39Z", "message": "Merge branch 'master' of https://github.com/apache/skywalking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4204457199946faeaf56b2ccec8d00b48baa716b", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/4204457199946faeaf56b2ccec8d00b48baa716b", "committedDate": "2020-03-07T14:55:28Z", "message": "Merge branch 'master' of github.com:apache/skywalking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a9a01c016c70adaf574818721fa349667dac172", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/1a9a01c016c70adaf574818721fa349667dac172", "committedDate": "2020-03-07T19:03:52Z", "message": "fix elasticsearch-5.x-plugin on es6.x TransportClient error, Found class org.elasticsearch.common.transport.TransportAddress, but interface was expected\nup elasticsearch-6.x-plugin support TransportClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4ae6a743e20c549750f2f86194ad49d9e342bb2", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/c4ae6a743e20c549750f2f86194ad49d9e342bb2", "committedDate": "2020-03-07T19:04:05Z", "message": "fix elasticsearch-5.x-plugin on es6.x TransportClient error, Found class org.elasticsearch.common.transport.TransportAddress, but interface was expected\nup elasticsearch-6.x-plugin support TransportClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6dbfae45e3ea2b865c5d93852c65500079c05d", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/6b6dbfae45e3ea2b865c5d93852c65500079c05d", "committedDate": "2020-03-15T15:26:26Z", "message": "fix elasticsearch-5.x-plugin on es6.x TransportClient error, Found class org.elasticsearch.common.transport.TransportAddress, but interface was expected\nup elasticsearch-6.x-plugin support TransportClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52acc6538d6df3cdd9f5ad501f4b7d50b1860268", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/52acc6538d6df3cdd9f5ad501f4b7d50b1860268", "committedDate": "2020-03-15T15:32:08Z", "message": "Merge branch 'master' of github.com:apache/skywalking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/35cd560bd53ea6ad72de1572a79eafcc5afedfdc", "committedDate": "2020-03-15T15:35:30Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODUyNTgy", "url": "https://github.com/apache/skywalking/pull/4517#pullrequestreview-374852582", "createdAt": "2020-03-16T00:31:43Z", "commit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njc2ODM4", "url": "https://github.com/apache/skywalking/pull/4517#pullrequestreview-375676838", "createdAt": "2020-03-17T01:06:36Z", "commit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNjozNlrOF3KtPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNDo0M1rOF3Lr-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTQyMQ==", "bodyText": "recommended to put these and below const string witnesses in one place better.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393391421", "createdAt": "2020-03-17T01:06:36Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-5.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v5/define/GenericActionInstrumentation.java", "diffHunk": "@@ -60,4 +60,10 @@ public String getConstructorInterceptor() {\n     protected ClassMatch enhanceClass() {\n         return byHierarchyMatch(new String[] {\"org.elasticsearch.action.GenericAction\"});\n     }\n+\n+    @Override\n+    protected String[] witnessClasses() {\n+        return new String[]{\"org.elasticsearch.common.transport.InetSocketTransportAddress\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NDc4OQ==", "bodyText": "This comment be modified to describe the function of the class, same as follows.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393394789", "createdAt": "2020-03-17T01:20:59Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6;\n+\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * date 2020.02.13 20:50", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Nzc2Mg==", "bodyText": "recommended to change ; to  , here, which is also consistent with the ES multi-hosts configuration method.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393397762", "createdAt": "2020-03-17T01:33:58Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/TransportAddressCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6;\n+\n+import org.elasticsearch.common.transport.TransportAddress;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * date 2020.02.13 20:50\n+ */\n+public class TransportAddressCache {\n+\n+    private List<TransportAddress> transportAddresses = new ArrayList<TransportAddress>();\n+    private String transportAddressesStr = \"\";\n+\n+    public synchronized void addDiscoveryNode(TransportAddress... transportAddress) {\n+        transportAddresses.addAll(Arrays.asList(transportAddress));\n+        transportAddressesStr = format();\n+    }\n+\n+    public synchronized void removeDiscoveryNode(TransportAddress transportAddress) {\n+        List<TransportAddress> nodesBuilder = new ArrayList<TransportAddress>();\n+\n+        for (TransportAddress otherNode : transportAddresses) {\n+            if (!otherNode.getAddress().equals(transportAddress.getAddress())) {\n+                nodesBuilder.add(otherNode);\n+            }\n+        }\n+\n+        transportAddresses = nodesBuilder;\n+        transportAddressesStr = format();\n+    }\n+\n+    private String format() {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        for (TransportAddress node : transportAddresses) {\n+            stringBuilder.append(node.getAddress()).append(\":\").append(node.getPort()).append(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzQ4MA==", "bodyText": "It is recommended that the content of tags here be tested and verified.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r393407480", "createdAt": "2020-03-17T02:14:43Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+/**\n+ * date 2020.03.15 21:02\n+ */\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300;\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testMethodsAround() throws Throwable {\n+        TRACE_DSL = true;\n+        Object[] allArguments = new Object[]{discoveryNode, getRequest};\n+\n+        interceptor.beforeMethod(enhancedInstance, null, allArguments, null, null);\n+        interceptor.afterMethod(enhancedInstance, null, allArguments, null, null);\n+\n+        List<TraceSegment> traceSegmentList = segmentStorage.getTraceSegments();\n+        Assert.assertThat(traceSegmentList.size(), is(1));\n+        TraceSegment traceSegment = traceSegmentList.get(0);\n+\n+        AbstractTracingSpan getSpan = SegmentHelper.getSpans(traceSegment).get(0);\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    private void assertGetSpan(AbstractTracingSpan getSpan, Object ret) {\n+        assertThat(getSpan instanceof ExitSpan, is(true));\n+\n+        ExitSpan span = (ExitSpan) getSpan;\n+        assertThat(span.getOperationName().split(\"[$$]\")[0], is(\"Elasticsearch/GetRequest\"));\n+        assertThat(SpanHelper.getComponentId(span), is(TRANSPORT_CLIENT.getId()));\n+\n+        List<TagValuePair> tags = SpanHelper.getTags(span);\n+        Assert.assertTrue(tags.size() > 4);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35cd560bd53ea6ad72de1572a79eafcc5afedfdc"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a38a9f9a4ea758cd279e6008dc01eaef271e453e", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/a38a9f9a4ea758cd279e6008dc01eaef271e453e", "committedDate": "2020-03-17T03:27:39Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41f937b221c274ff7f8ec0462b8967e5205a18c", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/d41f937b221c274ff7f8ec0462b8967e5205a18c", "committedDate": "2020-03-17T17:36:12Z", "message": "const string witnesses\nadd some unit test\nrecommended to change ; to ,"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03bb7214f3097445ccf9af2a8e623083b322a040", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/03bb7214f3097445ccf9af2a8e623083b322a040", "committedDate": "2020-03-19T02:40:40Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6859fc12429962814bc289681d5ef4a71238b9b", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/c6859fc12429962814bc289681d5ef4a71238b9b", "committedDate": "2020-03-22T06:59:47Z", "message": "Merge branch 'master' of https://github.com/apache/skywalking into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5bad0ad36cec800c02766132beb5b5b6d854fb", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/2c5bad0ad36cec800c02766132beb5b5b6d854fb", "committedDate": "2020-03-22T11:44:44Z", "message": "const string witnesses\nadd some unit test\nrecommended to change ; to ,"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f2a572d32f18e2ec9dc98277aa8f6524941916b", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/6f2a572d32f18e2ec9dc98277aa8f6524941916b", "committedDate": "2020-03-24T14:28:55Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46991fa79e0316da5714da1750e21aa15f01f8dc", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/46991fa79e0316da5714da1750e21aa15f01f8dc", "committedDate": "2020-03-24T15:47:35Z", "message": "up ES6.X test-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea5e3891c5bb8d9daf45ed2d3c236683509ee09", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/dea5e3891c5bb8d9daf45ed2d3c236683509ee09", "committedDate": "2020-03-24T15:48:54Z", "message": "Merge branch 'feature/es6.x-plugin_super_transportclient' of https://github.com/Indifer/skywalking into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391e3127ce4d4b00291abf08d23926e14b4b9f89", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/391e3127ce4d4b00291abf08d23926e14b4b9f89", "committedDate": "2020-03-24T15:56:00Z", "message": "Merge branch 'master' of https://github.com/apache/skywalking into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916e9792e0647b42e12d73efaebaa5cba23f8bc7", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/916e9792e0647b42e12d73efaebaa5cba23f8bc7", "committedDate": "2020-03-24T16:35:11Z", "message": "up es6.x test-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f9c8dbb27284ab4ee06133d923056e68bbf999a", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/7f9c8dbb27284ab4ee06133d923056e68bbf999a", "committedDate": "2020-03-24T17:20:49Z", "message": "up es6.x test-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ba0951f0d1792e146b691ebac30610e51e8136e", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/3ba0951f0d1792e146b691ebac30610e51e8136e", "committedDate": "2020-03-24T17:37:15Z", "message": "up es6.x test-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042aeed1efe1042bf3e29db7b31040824d384ccf", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/042aeed1efe1042bf3e29db7b31040824d384ccf", "committedDate": "2020-03-24T18:20:19Z", "message": "add DeleteIndexRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b4835430dd07c4ed98e15d988fb695d7079c82", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/96b4835430dd07c4ed98e15d988fb695d7079c82", "committedDate": "2020-03-24T18:21:06Z", "message": "up es6.x test-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/1347f94a4e6369851b7d6ed91e3e0cb4c095b010", "committedDate": "2020-03-25T06:47:08Z", "message": "remove TransportCaseController.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTAwNjk3", "url": "https://github.com/apache/skywalking/pull/4517#pullrequestreview-382100697", "createdAt": "2020-03-26T15:04:24Z", "commit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowNDoyNVrOF8LVIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowODowMlrOF8OctA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0NDUxMg==", "bodyText": "this comment is meaningless, it is recommended to add class comment, as are other important classes.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398644512", "createdAt": "2020-03-26T15:04:25Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportActionNodeProxyInstrumentation.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor.Constants;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * date 2020.02.13 20:32\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0NTg0NA==", "bodyText": "this is same as above.", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398645844", "createdAt": "2020-03-26T15:05:59Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportClientNodesServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor.Constants;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.bytebuddy.ArgumentTypeNameMatch.takesArgumentWithType;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * date 2020.02.13 22:29\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MDk2Mw==", "bodyText": "same as above", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398680963", "createdAt": "2020-03-26T15:49:23Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/define/TransportServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor.Constants;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+/**\n+ * date 2020.02.13 20:49\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MTIxMQ==", "bodyText": "comment should delete", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398691211", "createdAt": "2020-03-26T16:02:15Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MTQ0OQ==", "bodyText": "also this", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398691449", "createdAt": "2020-03-26T16:02:37Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MzIyMA==", "bodyText": "getRequest  maybe indexRequest?", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398693220", "createdAt": "2020-03-26T16:04:53Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});\n+\n+        when(getRequest.index()).thenReturn(\"endpoint\");\n+        when(getRequest.type()).thenReturn(\"getType\");\n+\n+        when(indexRequest.index()).thenReturn(\"endpoint\");\n+        when(indexRequest.type()).thenReturn(\"indexType\");\n+\n+        when(updateRequest.index()).thenReturn(\"endpoint\");\n+        when(updateRequest.type()).thenReturn(\"updateType\");\n+\n+        when(deleteRequest.index()).thenReturn(\"endpoint\");\n+        when(deleteRequest.type()).thenReturn(\"deleteType\");\n+\n+        when(deleteIndexRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testIndexRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5MzY1NQ==", "bodyText": "getRequest  maybe updateRequest?", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398693655", "createdAt": "2020-03-26T16:05:26Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});\n+\n+        when(getRequest.index()).thenReturn(\"endpoint\");\n+        when(getRequest.type()).thenReturn(\"getType\");\n+\n+        when(indexRequest.index()).thenReturn(\"endpoint\");\n+        when(indexRequest.type()).thenReturn(\"indexType\");\n+\n+        when(updateRequest.index()).thenReturn(\"endpoint\");\n+        when(updateRequest.type()).thenReturn(\"updateType\");\n+\n+        when(deleteRequest.index()).thenReturn(\"endpoint\");\n+        when(deleteRequest.type()).thenReturn(\"deleteType\");\n+\n+        when(deleteIndexRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testIndexRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testUpdateRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NTYwNA==", "bodyText": "getRequest  maybe deleteRequest?", "url": "https://github.com/apache/skywalking/pull/4517#discussion_r398695604", "createdAt": "2020-03-26T16:08:02Z", "author": null, "path": "apm-sniffer/apm-sdk-plugin/elasticsearch-6.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/elasticsearch/v6/interceptor/TransportActionNodeProxyExecuteMethodsInterceptorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.elasticsearch.v6.interceptor;\n+\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractTracingSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.ExitSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.TraceSegment;\n+import org.apache.skywalking.apm.agent.core.context.util.TagValuePair;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.test.helper.SegmentHelper;\n+import org.apache.skywalking.apm.agent.test.helper.SpanHelper;\n+import org.apache.skywalking.apm.agent.test.tools.AgentServiceRule;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStorage;\n+import org.apache.skywalking.apm.agent.test.tools.SegmentStoragePoint;\n+import org.apache.skywalking.apm.agent.test.tools.TracingSegmentRunner;\n+import org.apache.skywalking.apm.plugin.elasticsearch.v6.TransportClientEnhanceInfo;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.delete.DeleteRequest;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.update.UpdateRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.transport.TransportAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.modules.junit4.PowerMockRunnerDelegate;\n+\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Plugin.Elasticsearch.TRACE_DSL;\n+import static org.apache.skywalking.apm.network.trace.component.ComponentsDefine.TRANSPORT_CLIENT;\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockRunnerDelegate(TracingSegmentRunner.class)\n+public class TransportActionNodeProxyExecuteMethodsInterceptorTest {\n+\n+    @SegmentStoragePoint\n+    private SegmentStorage segmentStorage;\n+\n+    @Rule\n+    public AgentServiceRule serviceRule = new AgentServiceRule();\n+\n+    @Mock\n+    private EnhancedInstance enhancedInstance;\n+\n+    @Mock\n+    private DiscoveryNode discoveryNode;\n+\n+//    @Mock\n+//    private SearchRequest searchRequest;\n+\n+    @Mock\n+    private GetRequest getRequest;\n+\n+    @Mock\n+    private IndexRequest indexRequest;\n+\n+    @Mock\n+    private UpdateRequest updateRequest;\n+\n+    @Mock\n+    private DeleteRequest deleteRequest;\n+\n+    @Mock\n+    private DeleteIndexRequest deleteIndexRequest;\n+\n+    @Mock\n+    private TransportClientEnhanceInfo enhanceInfo;\n+\n+    private TransportActionNodeProxyExecuteMethodsInterceptor interceptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        InetSocketAddress inetSocketAddress = new InetSocketAddress(\"122.122.122.122\", 9300);\n+        TransportAddress transportAddress = new TransportAddress(inetSocketAddress);\n+        when(discoveryNode.getAddress()).thenReturn(transportAddress);\n+\n+        when(enhanceInfo.transportAddresses()).thenReturn(\"122.122.122.122:9300\");\n+        when(enhanceInfo.getClusterName()).thenReturn(\"skywalking-es\");\n+        when(enhancedInstance.getSkyWalkingDynamicField()).thenReturn(enhanceInfo);\n+\n+//        when(searchRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+//        when(searchRequest.types()).thenReturn(new String[]{\"searchType\"});\n+\n+        when(getRequest.index()).thenReturn(\"endpoint\");\n+        when(getRequest.type()).thenReturn(\"getType\");\n+\n+        when(indexRequest.index()).thenReturn(\"endpoint\");\n+        when(indexRequest.type()).thenReturn(\"indexType\");\n+\n+        when(updateRequest.index()).thenReturn(\"endpoint\");\n+        when(updateRequest.type()).thenReturn(\"updateType\");\n+\n+        when(deleteRequest.index()).thenReturn(\"endpoint\");\n+        when(deleteRequest.type()).thenReturn(\"deleteType\");\n+\n+        when(deleteIndexRequest.indices()).thenReturn(new String[]{\"endpoint\"});\n+\n+        interceptor = new TransportActionNodeProxyExecuteMethodsInterceptor();\n+    }\n+\n+    @Test\n+    public void testConstruct() {\n+\n+        final EnhancedInstance objInst1 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        final EnhancedInstance objInst2 = new EnhancedInstance() {\n+            private Object object = null;\n+\n+            @Override\n+            public Object getSkyWalkingDynamicField() {\n+                return object;\n+            }\n+\n+            @Override\n+            public void setSkyWalkingDynamicField(Object value) {\n+                this.object = value;\n+            }\n+        };\n+\n+        objInst1.setSkyWalkingDynamicField(123);\n+        Object[] allArguments = new Object[]{null, null, objInst1};\n+\n+        interceptor.onConstruct(objInst2, allArguments);\n+        assertThat(objInst1.getSkyWalkingDynamicField(), is(objInst2.getSkyWalkingDynamicField()));\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testIndexRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testUpdateRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);\n+    }\n+\n+    @Test\n+    public void testDeleteRequest() throws Throwable {\n+\n+        AbstractTracingSpan getSpan = getSpan();\n+        assertGetSpan(getSpan, getRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1347f94a4e6369851b7d6ed91e3e0cb4c095b010"}, "originalPosition": 192}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6211b357027445445d1c526b086eea0ab84f52", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/cd6211b357027445445d1c526b086eea0ab84f52", "committedDate": "2020-03-26T16:33:43Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a608c481bbdb2e2f14b13389d1c9533df6e1dc", "author": {"user": {"login": "Indifer", "name": "yi.liang"}}, "url": "https://github.com/apache/skywalking/commit/b7a608c481bbdb2e2f14b13389d1c9533df6e1dc", "committedDate": "2020-03-26T17:21:25Z", "message": "fix TransportActionNodeProxyExecuteMethodsInterceptorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09c26f3d46775141fc24de53e8a62a26a05ba9a", "author": {"user": null}, "url": "https://github.com/apache/skywalking/commit/f09c26f3d46775141fc24de53e8a62a26a05ba9a", "committedDate": "2020-03-27T02:21:09Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84361da7b60aaf9a61692f4fb60644a24000631c", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/84361da7b60aaf9a61692f4fb60644a24000631c", "committedDate": "2020-03-27T05:00:56Z", "message": "Merge branch 'master' into feature/es6.x-plugin_super_transportclient"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTk0MTU1", "url": "https://github.com/apache/skywalking/pull/4517#pullrequestreview-382594155", "createdAt": "2020-03-27T05:49:51Z", "commit": {"oid": "84361da7b60aaf9a61692f4fb60644a24000631c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2462, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}