{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDMzOTcx", "number": 4344, "title": "supprt gRPC alarm hook.", "bodyText": "Please answer these questions before submitting pull request\n\n\nWhy submit this pull request?\n\n\n Bug fix\n\n\n New feature provided\n\n\n Improve performance\n\n\nRelated issues\n#3752\n\n\n\nNew feature or improvement\n\nDescribe the details and related test reports.\nsend alarm message through remote gRPC way.", "createdAt": "2020-02-10T09:44:48Z", "url": "https://github.com/apache/skywalking/pull/4344", "merged": true, "mergeCommit": {"oid": "7ff9a0cfd95c0ee376607b5294740a458fdf0e8e"}, "closed": true, "closedAt": "2020-02-12T08:20:20Z", "author": {"login": "JaredTan95"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC52YTgH2gAyMzczMDMzOTcxOjc4OGE0MTZiOTBlNzIxY2ZmZmMzMDAwMjNlYmQxZmYwNWM1MGQ2ZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDgZSJAFqTM1NzIxNDY4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "788a416b90e721cfffc300023ebd1ff05c50d6d8", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/788a416b90e721cfffc300023ebd1ff05c50d6d8", "committedDate": "2020-02-10T09:37:55Z", "message": "support gRPC hook."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f8926144931812a19fdc1dd0a4b8ce305edea71", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/7f8926144931812a19fdc1dd0a4b8ce305edea71", "committedDate": "2020-02-10T09:42:10Z", "message": "Merge branch 'master' into grpc_alarm\n\n# Conflicts:\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODAyNDE5", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-355802419", "createdAt": "2020-02-10T09:49:37Z", "commit": {"oid": "7f8926144931812a19fdc1dd0a4b8ce305edea71"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69bdcf75e0a67c1148ebdb1acef3344d75b99adc", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/69bdcf75e0a67c1148ebdb1acef3344d75b99adc", "committedDate": "2020-02-10T09:50:39Z", "message": "revert submodule commit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODA0ODY4", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-355804868", "createdAt": "2020-02-10T09:53:15Z", "commit": {"oid": "7f8926144931812a19fdc1dd0a4b8ce305edea71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1MzoxNVrOFnfyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1MzoxNVrOFnfyvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1OTY3Ng==", "bodyText": "If you are using gRPC stream, you should use wait for the onComplete event to avoid the memory leak. What do you think?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r376959676", "createdAt": "2020-02-10T09:53:15Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ *\n+ * @author jian.tan\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+        if (alarmSetting != null) {\n+            GRPCClient client = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+            client.connect();\n+            alarmServiceStub = AlarmServiceGrpc.newStub(client.getChannel());\n+        }\n+    }\n+\n+    @Override public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmServiceStub == null) {\n+            return;\n+        }\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override public void onNext(Response response) {\n+\n+                }\n+\n+                @Override public void onError(Throwable throwable) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+\n+                }\n+\n+                @Override public void onCompleted() {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8926144931812a19fdc1dd0a4b8ce305edea71"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3613ff6e9b9de3ee2170aaf7a38d35847d8f66ce", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/3613ff6e9b9de3ee2170aaf7a38d35847d8f66ce", "committedDate": "2020-02-10T09:53:49Z", "message": "revert submodule commitid."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7605f7bb3eedfa9e13bf2da8bdab863e957c756", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/b7605f7bb3eedfa9e13bf2da8bdab863e957c756", "committedDate": "2020-02-10T11:11:36Z", "message": "Merge branch 'master' into grpc_alarm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTkxODkx", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-355991891", "createdAt": "2020-02-10T14:45:46Z", "commit": {"oid": "b7605f7bb3eedfa9e13bf2da8bdab863e957c756"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0NTo0N1rOFnossw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0NTo0N1rOFnossw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTU4Nw==", "bodyText": "This code language  could be protobuf. It will result as following:\nmessage AlarmMessage {\n    int64 scopeId = 1;\n    string scope = 2;\n    string name = 3;\n    int64 id0 = 4;\n    int64 id1 = 5;\n    string ruleName = 6;\n    string alarmMessage = 7;\n    int64 startTime = 8;\n}", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377105587", "createdAt": "2020-02-10T14:45:47Z", "author": {"login": "JohnNiang"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -113,6 +114,24 @@ Example as following\n }]\n ```\n \n+## gRPCHook\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n+\n+Example as following\n+```text", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7605f7bb3eedfa9e13bf2da8bdab863e957c756"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194df3e78407479b2042cb3ba6fcdc6103418ac5", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/194df3e78407479b2042cb3ba6fcdc6103418ac5", "committedDate": "2020-02-11T01:18:57Z", "message": "finish logical."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Mzc4MjMw", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356378230", "createdAt": "2020-02-11T01:30:53Z", "commit": {"oid": "194df3e78407479b2042cb3ba6fcdc6103418ac5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTozMDo1NFrOFn7Yng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMTozMDo1NFrOFn7Yng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQxMTc0Mg==", "bodyText": "Don't add @author, all these will be removed by @kezhenxu94 's PR once for all.", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377411742", "createdAt": "2020-02-11T01:30:54Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/exporter/ExportData.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.exporter;\n+\n+import lombok.Getter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.MetricsMetaInfo;\n+\n+/**\n+ * @author jian.tan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194df3e78407479b2042cb3ba6fcdc6103418ac5"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d3ef4eaf0697bb0b2154f800028ba30fa40fe4", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/c9d3ef4eaf0697bb0b2154f800028ba30fa40fe4", "committedDate": "2020-02-11T01:39:28Z", "message": "remove author anonatation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa8e9834335cee408c52844d7ff9111bc7b98dd", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/afa8e9834335cee408c52844d7ff9111bc7b98dd", "committedDate": "2020-02-11T03:31:13Z", "message": "Merge branch 'master' into grpc_alarm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e5b333894cca4e4d513e421cbe9751ba7c0c49", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/17e5b333894cca4e4d513e421cbe9751ba7c0c49", "committedDate": "2020-02-11T04:08:14Z", "message": "fix ci."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11f0ea1d1ef9164bd5719ee134c5165299aa3a87", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/11f0ea1d1ef9164bd5719ee134c5165299aa3a87", "committedDate": "2020-02-11T10:05:43Z", "message": "Merge commit '5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2' into grpc_alarm\n\n# Conflicts:\n#\toap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporter.java\n#\toap-server/exporter/src/test/java/org/apache/skywalking/oap/server/exporter/provider/grpc/GRPCExporterTest.java\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/Rules.java\n#\toap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81fd13759d416ed72b45ced199c0d6d1c3850e0", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/f81fd13759d416ed72b45ced199c0d6d1c3850e0", "committedDate": "2020-02-11T10:06:21Z", "message": "Merge branch 'master' into grpc_alarm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f5a4ee7453dfe82cd0ae6f4a8f27382a9336b44", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/2f5a4ee7453dfe82cd0ae6f4a8f27382a9336b44", "committedDate": "2020-02-11T10:13:19Z", "message": "revert submodule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c86f56c5fb583a92f2deec7d86a80d469b28382a", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/c86f56c5fb583a92f2deec7d86a80d469b28382a", "committedDate": "2020-02-11T12:26:04Z", "message": "Merge branch 'master' into grpc_alarm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjE4OTQw", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356618940", "createdAt": "2020-02-11T12:32:02Z", "commit": {"oid": "c86f56c5fb583a92f2deec7d86a80d469b28382a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjozMjowMlrOFoHOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo0MDo0NFrOFoHdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwNTcyMw==", "bodyText": "@JaredTan95 This should be fixed.", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377605723", "createdAt": "2020-02-11T12:32:02Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -113,6 +114,24 @@ Example as following\n }]\n ```\n \n+## gRPCHook\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n+\n+Example as following\n+```text", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTU4Nw=="}, "originalCommit": {"oid": "b7605f7bb3eedfa9e13bf2da8bdab863e957c756"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTA3Mw==", "bodyText": "Why isn't this private?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377609073", "createdAt": "2020-02-11T12:39:41Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    GRPCAlarmSetting alarmSetting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c86f56c5fb583a92f2deec7d86a80d469b28382a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTQ3Mw==", "bodyText": "Look like this setting isn't supporting dynamic change? But the HTTP could. I think we should keep this consistent?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377609473", "createdAt": "2020-02-11T12:40:44Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+        if (alarmSetting != null) {\n+            GRPCClient client = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c86f56c5fb583a92f2deec7d86a80d469b28382a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a362985e456e75627704bbac565be94d6449923", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/5a362985e456e75627704bbac565be94d6449923", "committedDate": "2020-02-11T13:22:37Z", "message": "update logical."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjUzODE4", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356653818", "createdAt": "2020-02-11T13:28:24Z", "commit": {"oid": "5a362985e456e75627704bbac565be94d6449923"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyODoyNVrOFoI3wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoyODoyNVrOFoI3wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzMjcwNQ==", "bodyText": "This way may not appropriate. I am working on it~", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377632705", "createdAt": "2020-02-11T13:28:25Z", "author": {"login": "JaredTan95"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a362985e456e75627704bbac565be94d6449923"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/2bb16b193074a1398db260a8ea658f22da7e0423", "committedDate": "2020-02-11T13:56:01Z", "message": "update logical."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njc2MjY4", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356676268", "createdAt": "2020-02-11T13:59:19Z", "commit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1OToyMFrOFoJ7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1OToyMFrOFoJ7vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MDEwOA==", "bodyText": "This is not example, this is the message protocol :)", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377650108", "createdAt": "2020-02-11T13:59:20Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -115,9 +115,11 @@ Example as following\n ```\n \n ## gRPCHook\n-This code language could be `Protobuf` which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n-It will result as following:\n-```text\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.\n+\n+Example as following", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njc3NTQw", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356677540", "createdAt": "2020-02-11T14:01:06Z", "commit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMTowNlrOFoJ_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMTowNlrOFoJ_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MTA4OQ==", "bodyText": "Why this extends ModuleConfig?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377651089", "createdAt": "2020-02-11T14:01:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCAlarmSetting.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import java.util.Objects;\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+\n+@Setter\n+@Getter\n+public class GRPCAlarmSetting extends ModuleConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b26c16720d5c694d8720b2b88042eaf86c32701", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/3b26c16720d5c694d8720b2b88042eaf86c32701", "committedDate": "2020-02-11T14:06:41Z", "message": "update logical."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njc5NTA0", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356679504", "createdAt": "2020-02-11T14:03:43Z", "commit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMzo0NFrOFoKFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMzo0NFrOFoKFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjUzOQ==", "bodyText": "equals and hashCode methods could be replaced by Lombok annotation: @EqualsAndHashCode(callSuper = false)", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652539", "createdAt": "2020-02-11T14:03:44Z", "author": {"login": "JohnNiang"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCAlarmSetting.java", "diffHunk": "@@ -27,4 +28,20 @@\n public class GRPCAlarmSetting extends ModuleConfig {\n     private String targetHost;\n     private int targetPort;\n+\n+    @Override\n+    public boolean equals(final Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Njc4ODE0", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356678814", "createdAt": "2020-02-11T14:02:49Z", "commit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMjo0OVrOFoKDRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowNDowMFrOFoKF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjAzNw==", "bodyText": "There is a connection leak here, the old one should be closed.", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652037", "createdAt": "2020-02-11T14:02:49Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        grpcClient.connect();\n+        alarmServiceStub = AlarmServiceGrpc.newStub(grpcClient.getChannel());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**\n+         * For memory safe of oap, we must wait for the peer confirmation.\n+         */\n+        while (!status.isDone()) {\n+            try {\n+                sleepTime += cycle;\n+                Thread.sleep(cycle);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Send {} alarm message to {}:{}.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort()\n+                );\n+            }\n+\n+            if (sleepTime > 2000L) {\n+                log.debug(\"Send {} alarm message to {}:{}, wait {} milliseconds.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort(), sleepTime\n+                );\n+                cycle = 2000L;\n+            }\n+        }\n+    }\n+\n+    private void onGRPCAlarmSettingUpdated(GRPCAlarmSetting grpcAlarmSetting) {\n+        if (!grpcAlarmSetting.equals(alarmSetting)) {\n+            grpcClient = new GRPCClient(grpcAlarmSetting.getTargetHost(), grpcAlarmSetting.getTargetPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjM1MA==", "bodyText": "I think we should not create stub and connect every time. Right?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652350", "createdAt": "2020-02-11T14:03:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        grpcClient.connect();\n+        alarmServiceStub = AlarmServiceGrpc.newStub(grpcClient.getChannel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjY5NQ==", "bodyText": "This should be a warning?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377652695", "createdAt": "2020-02-11T14:04:00Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        grpcClient.connect();\n+        alarmServiceStub = AlarmServiceGrpc.newStub(grpcClient.getChannel());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**\n+         * For memory safe of oap, we must wait for the peer confirmation.\n+         */\n+        while (!status.isDone()) {\n+            try {\n+                sleepTime += cycle;\n+                Thread.sleep(cycle);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Send {} alarm message to {}:{}.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort()\n+                );\n+            }\n+\n+            if (sleepTime > 2000L) {\n+                log.debug(\"Send {} alarm message to {}:{}, wait {} milliseconds.\", alarmMessage.size(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb16b193074a1398db260a8ea658f22da7e0423"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/415b15dddba8b7bfb87ed535b3ab5dba3ea4974a", "committedDate": "2020-02-11T14:29:33Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzAzMzYz", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356703363", "createdAt": "2020-02-11T14:33:02Z", "commit": {"oid": "3b26c16720d5c694d8720b2b88042eaf86c32701"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozMzowMlrOFoLK1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxMDoxMVrOFoMrow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MDM1Nw==", "bodyText": "We may not need to show \"Part of protocol\" file, my suggestion is to link to the alarm-hook.proto file directly, because the gRPC receiver may be implemented in any language, and the proto file is fundamental in any kind of implementation. If I were the user, I'd like to click the link and navigate to the proto file directly, instead of finding in the souce codes myself.", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377670357", "createdAt": "2020-02-11T14:33:02Z", "author": {"login": "kezhenxu94"}, "path": "docs/en/setup/backend/backend-alarm.md", "diffHunk": "@@ -113,6 +114,24 @@ Example as following\n }]\n ```\n \n+## gRPCHook\n+The alarm message will send through remote gRPC method by `Protobuf` content type. \n+The message format with following key information which are defined in `oap-server/server-alarm-plugin/src/main/proto/alarm-hook.proto`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b26c16720d5c694d8720b2b88042eaf86c32701"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NDg1OA==", "bodyText": "There may be thread-visibility issue,  org.apache.skywalking.oap.server.core.exporter.ExportStatus#done is not volatile, BTW, ExportStatus can be annotated with Lombok annotations", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377694858", "createdAt": "2020-02-11T15:09:44Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**\n+         * For memory safe of oap, we must wait for the peer confirmation.\n+         */\n+        while (!status.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NTEzOQ==", "bodyText": "Dangling Javadoc comment", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377695139", "createdAt": "2020-02-11T15:10:11Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        ExportStatus status = new ExportStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+        /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzUzMjY1", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-356753265", "createdAt": "2020-02-11T15:30:25Z", "commit": {"oid": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozMDoyNVrOFoNiuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozMDoyNVrOFoNiuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwOTI0MQ==", "bodyText": "ExportStatus is in exporter, why use it in the alarm?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377709241", "createdAt": "2020-02-11T15:30:25Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.core.exporter.ExportStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415b15dddba8b7bfb87ed535b3ab5dba3ea4974a"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9079ed0407691933cd770c3601441242183bed5a", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/9079ed0407691933cd770c3601441242183bed5a", "committedDate": "2020-02-12T00:29:54Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTI1NDUw", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-357125450", "createdAt": "2020-02-12T00:56:29Z", "commit": {"oid": "9079ed0407691933cd770c3601441242183bed5a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1NjozMFrOFoeh8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1ODoxMlrOFoejqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NzU3MQ==", "bodyText": "What if the user delete the gRPC hooks entirely? Say target host and port is empty", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377987571", "createdAt": "2020-02-12T00:56:30Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+import org.apache.skywalking.oap.server.library.util.GRPCStreamStatus;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());\n+        }\n+    }\n+\n+    @Override\n+    public void doAlarm(List<AlarmMessage> alarmMessage) {\n+\n+        if (alarmSetting == null) {\n+            return;\n+        }\n+\n+        // recreate gRPC client if host and port configuration changed.\n+        onGRPCAlarmSettingUpdated(alarmRulesWatcher.getGrpchookSetting());\n+\n+        GRPCStreamStatus status = new GRPCStreamStatus();\n+\n+        StreamObserver<org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage> streamObserver =\n+            alarmServiceStub.withDeadlineAfter(10, TimeUnit.SECONDS).doAlarm(new StreamObserver<Response>() {\n+                @Override\n+                public void onNext(Response response) {\n+                    // ignore empty response\n+                }\n+\n+                @Override\n+                public void onError(Throwable throwable) {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message failed: {}\", throwable.getMessage());\n+                    }\n+                }\n+\n+                @Override\n+                public void onCompleted() {\n+                    status.done();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Send alarm message successful.\");\n+                    }\n+                }\n+            });\n+\n+        alarmMessage.forEach(message -> {\n+            org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.Builder builder =\n+                org.apache.skywalking.oap.server.core.alarm.grpc.AlarmMessage.newBuilder();\n+\n+            builder.setScopeId(message.getScopeId());\n+            builder.setScope(message.getScope());\n+            builder.setName(message.getName());\n+            builder.setId0(message.getId0());\n+            builder.setId1(message.getId1());\n+            builder.setRuleName(message.getRuleName());\n+            builder.setAlarmMessage(message.getAlarmMessage());\n+            builder.setStartTime(message.getStartTime());\n+\n+            streamObserver.onNext(builder.build());\n+        });\n+\n+        streamObserver.onCompleted();\n+\n+        long sleepTime = 0;\n+        long cycle = 100L;\n+\n+        // For memory safe of oap, we must wait for the peer confirmation.\n+        while (!status.isDone()) {\n+            try {\n+                sleepTime += cycle;\n+                Thread.sleep(cycle);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Send {} alarm message to {}:{}.\", alarmMessage.size(),\n+                          alarmSetting.getTargetHost(), alarmSetting.getTargetPort()\n+                );\n+            }\n+\n+            if (sleepTime > 2000L) {\n+                log.warn(\"Send {} alarm message to {}:{}, wait {} milliseconds.\", alarmMessage.size(),\n+                         alarmSetting.getTargetHost(), alarmSetting.getTargetPort(), sleepTime\n+                );\n+                cycle = 2000L;\n+            }\n+        }\n+    }\n+\n+    private void onGRPCAlarmSettingUpdated(GRPCAlarmSetting grpcAlarmSetting) {\n+        if (!grpcAlarmSetting.equals(alarmSetting)) {\n+            grpcClient.shutdown();\n+            grpcClient = new GRPCClient(grpcAlarmSetting.getTargetHost(), grpcAlarmSetting.getTargetPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9079ed0407691933cd770c3601441242183bed5a"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODAwOA==", "bodyText": "Alarm is rare in most cases, this client may be lazily initialized (in doAlarm method)?", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r377988008", "createdAt": "2020-02-12T00:58:12Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/grpc/GRPCCallback.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.AlarmServiceGrpc;\n+import org.apache.skywalking.oap.server.core.alarm.grpc.Response;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.apache.skywalking.oap.server.library.client.grpc.GRPCClient;\n+import org.apache.skywalking.oap.server.library.util.GRPCStreamStatus;\n+\n+/**\n+ * Use SkyWalking alarm grpc API call a remote methods.\n+ */\n+@Slf4j\n+public class GRPCCallback implements AlarmCallback {\n+\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+\n+    private GRPCAlarmSetting alarmSetting;\n+\n+    private AlarmServiceGrpc.AlarmServiceStub alarmServiceStub;\n+\n+    private GRPCClient grpcClient;\n+\n+    public GRPCCallback(AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        alarmSetting = alarmRulesWatcher.getGrpchookSetting();\n+\n+        if (alarmSetting != null) {\n+            grpcClient = new GRPCClient(alarmSetting.getTargetHost(), alarmSetting.getTargetPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9079ed0407691933cd770c3601441242183bed5a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b63fda47101a488fa431147ddf1ee55b8790a072", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/b63fda47101a488fa431147ddf1ee55b8790a072", "committedDate": "2020-02-12T02:45:45Z", "message": "fix empty settings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0635bbe9b637a9baabd2ca244cdf99e6d9f62efe", "author": {"user": {"login": "JaredTan95", "name": "Jared Tan"}}, "url": "https://github.com/apache/skywalking/commit/0635bbe9b637a9baabd2ca244cdf99e6d9f62efe", "committedDate": "2020-02-12T02:57:07Z", "message": "fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abaee0f41da3873f90e208e200176086ed45bb98", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/abaee0f41da3873f90e208e200176086ed45bb98", "committedDate": "2020-02-12T06:08:12Z", "message": "Merge branch 'master' into grpc_alarm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjEyMzM3", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-357212337", "createdAt": "2020-02-12T06:24:22Z", "commit": {"oid": "abaee0f41da3873f90e208e200176086ed45bb98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjoyNDoyMlrOFoi6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjoyNDoyMlrOFoi6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1OTM5OQ==", "bodyText": "FYI @kezhenxu94 By following your style, do we have a format way to make sure all these imports are in the same order rather than different people using different orders.", "url": "https://github.com/apache/skywalking/pull/4344#discussion_r378059399", "createdAt": "2020-02-12T06:24:22Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmRulesWatcher.java", "diffHunk": "@@ -18,23 +18,22 @@\n \n package org.apache.skywalking.oap.server.core.alarm.provider;\n \n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.core.alarm.AlarmModule;\n+import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCAlarmSetting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abaee0f41da3873f90e208e200176086ed45bb98"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjE0Njg1", "url": "https://github.com/apache/skywalking/pull/4344#pullrequestreview-357214685", "createdAt": "2020-02-12T06:32:26Z", "commit": {"oid": "abaee0f41da3873f90e208e200176086ed45bb98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2668, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}