{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTM0MTAw", "number": 5579, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozMzozOFrOEoUP7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozMzozOFrOEoUP7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEwMjU0OnYy", "diffSide": "LEFT", "path": "oap-server/server-configuration/configuration-etcd/src/test/java/org/apache/skywalking/oap/server/configuration/etcd/EtcdConfigWatcherRegisterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozMzozOFrOHZVN6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozOToxMlrOHZVT3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDA3NQ==", "bodyText": "@kezhenxu94 @dmsolr @JaredTan95 This test can't pass on the GitHub Action's JDK11, but passed on the local JDK 11.", "url": "https://github.com/apache/skywalking/pull/5579#discussion_r496324075", "createdAt": "2020-09-29T01:33:38Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-configuration/configuration-etcd/src/test/java/org/apache/skywalking/oap/server/configuration/etcd/EtcdConfigWatcherRegisterTest.java", "diffHunk": "@@ -1,134 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.configuration.etcd;\n-\n-import com.google.common.collect.Sets;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import mousio.client.promises.ResponsePromise;\n-import mousio.etcd4j.EtcdClient;\n-import mousio.etcd4j.promises.EtcdResponsePromise;\n-import mousio.etcd4j.requests.EtcdKeyGetRequest;\n-import mousio.etcd4j.responses.EtcdKeysResponse;\n-import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.reflect.Whitebox;\n-\n-import static junit.framework.TestCase.assertEquals;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Mockito.spy;\n-import static org.powermock.api.mockito.PowerMockito.mock;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n-import static org.powermock.api.mockito.PowerMockito.when;\n-import static org.powermock.api.mockito.PowerMockito.whenNew;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({\n-    EtcdKeysResponse.class,\n-    EtcdUtils.class,\n-    EtcdClient.class,\n-    URI.class\n-})\n-@PowerMockIgnore({\"javax.management.*\"})\n-public class EtcdConfigWatcherRegisterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0071b3934013e93efd431474befee0d3398b9ec9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNTU5OQ==", "bodyText": "At the GitHub Linux JDK1 env, this causes\n\njdk.internal.loader.ClassLoaderValue (in module java.base) because module java.base does not export jdk.internal.loader to unnamed module\n\nNOTE, I changed the ignore to @PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.*\"})", "url": "https://github.com/apache/skywalking/pull/5579#discussion_r496325599", "createdAt": "2020-09-29T01:39:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-configuration/configuration-etcd/src/test/java/org/apache/skywalking/oap/server/configuration/etcd/EtcdConfigWatcherRegisterTest.java", "diffHunk": "@@ -1,134 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.configuration.etcd;\n-\n-import com.google.common.collect.Sets;\n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import mousio.client.promises.ResponsePromise;\n-import mousio.etcd4j.EtcdClient;\n-import mousio.etcd4j.promises.EtcdResponsePromise;\n-import mousio.etcd4j.requests.EtcdKeyGetRequest;\n-import mousio.etcd4j.responses.EtcdKeysResponse;\n-import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.reflect.Whitebox;\n-\n-import static junit.framework.TestCase.assertEquals;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Mockito.spy;\n-import static org.powermock.api.mockito.PowerMockito.mock;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n-import static org.powermock.api.mockito.PowerMockito.when;\n-import static org.powermock.api.mockito.PowerMockito.whenNew;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({\n-    EtcdKeysResponse.class,\n-    EtcdUtils.class,\n-    EtcdClient.class,\n-    URI.class\n-})\n-@PowerMockIgnore({\"javax.management.*\"})\n-public class EtcdConfigWatcherRegisterTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNDA3NQ=="}, "originalCommit": {"oid": "0071b3934013e93efd431474befee0d3398b9ec9"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4847, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}