{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTAwODU3", "number": 4475, "title": "Add file change detection mechanism", "bodyText": "Due to some strict management rules inside the enterprise, some companies use tool such as Vault to manage username and password of the storage. These tools would change the content by injecting the new username and password into some certain file, through using some tech like sidecar or agent.\nThis PR makes the first change, it provides the basic file content(or we should say modified flag) changed detection mechanism. Once it is changed, the notification will be triggered.\nThe next step will be activating this mechanism for ES storage. Once username and password changed, the ES client should trigger reconnection.", "createdAt": "2020-03-10T02:13:37Z", "url": "https://github.com/apache/skywalking/pull/4475", "merged": true, "mergeCommit": {"oid": "069b99bdbcd0a3364a371a6d79fcb568ee6ae075"}, "closed": true, "closedAt": "2020-03-11T02:29:44Z", "author": {"login": "wu-sheng"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMI0EMgH2gAyMzg1OTAwODU3OjhhYzFlMjM2YjZlZmUzNmJlYjA4MTQ2ZGQ0MWNiNTZmNzRiMTNmNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMdsfcgFqTM3MjQzOTk3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ac1e236b6efe36beb08146dd41cb56f74b13f47", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/8ac1e236b6efe36beb08146dd41cb56f74b13f47", "committedDate": "2020-03-10T02:09:17Z", "message": "Add file change detection mechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf854225c77cdc9b2f6fd95b8559a92c7eaab2c9", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/cf854225c77cdc9b2f6fd95b8559a92c7eaab2c9", "committedDate": "2020-03-10T02:15:59Z", "message": "Merge branch 'master' into vault-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/aeefcba24a9c5c1142b205925ae4e363e60bad3c", "committedDate": "2020-03-10T02:19:03Z", "message": "Fix format."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjQ0Mzg0", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-371644384", "createdAt": "2020-03-10T02:28:54Z", "commit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjoyODo1NVrOFz_g6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjoyODo1NVrOFz_g6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA==", "bodyText": "We should consider another scenario if the content of file doesn't change the monitor should not notify the related component.\nA possible approach is to compare the binary data of them.", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390062314", "createdAt": "2020-03-10T02:28:55Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjU5MjI2", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-371659226", "createdAt": "2020-03-10T03:21:22Z", "commit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyMToyMlrOF0ATIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyMToyMlrOF0ATIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ==", "bodyText": "better place it else where, in case the RAT plugin scans it occasionally", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390075169", "createdAt": "2020-03-10T03:21:22Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitorTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FileChangeMonitorTest {\n+    private static String FILE_NAME = \"FileChangeMonitorTest.tmp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjY5MTg5", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-371669189", "createdAt": "2020-03-10T04:01:49Z", "commit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDowMTo1MFrOF0A1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDowMTo1MFrOF0A1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Mzk5Ng==", "bodyText": "At least, this part should be replaced, and you can provide a so called Callback to the caller", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390083996", "createdAt": "2020-03-10T04:01:50Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final ContentChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {\n+        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n+            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n+                                                   .scheduleAtFixedRate(\n+                                                       FileChangeMonitor::run, 1, 1,\n+                                                       TimeUnit.SECONDS\n+                                                   );\n+        }\n+\n+        this.checkAndNotify();\n+        MONITOR_INSTANCES.add(this);\n+    }\n+\n+    public synchronized void stop() {\n+        MONITOR_INSTANCES.remove(this);\n+    }\n+\n+    /**\n+     * Check the file status, if changed, send the notification.\n+     */\n+    private void checkAndNotify() {\n+        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n+            // Don't reach the period threshold, ignore this check.\n+            return;\n+        }\n+        File targetFile = new File(filePath);\n+        if (!targetFile.exists() && acceptFileNotExisting) {\n+            notifier.fileNotFound();\n+        }\n+        if (targetFile.isFile()) {\n+            long lastModified = targetFile.lastModified();\n+\n+            if (lastModified != lastModifiedTimestamp) {\n+                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n+                    notifier.newFileContent(fileInputStream);\n+                } catch (FileNotFoundException e) {\n+                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n+                } catch (IOException e) {\n+                    log.error(\"Read file failure, watch file=\" + filePath, e);\n+                } finally {\n+                    lastModifiedTimestamp = lastModified;\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14cf0b906a49ef37dabfb44d36de38914fc70468", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/14cf0b906a49ef37dabfb44d36de38914fc70468", "committedDate": "2020-03-10T06:00:57Z", "message": "Make file content changed monitor easier."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3fe48507316967a6057e08120f27540e1d89019", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/f3fe48507316967a6057e08120f27540e1d89019", "committedDate": "2020-03-10T06:26:45Z", "message": "Add secondary round change and check the result."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzA2OTA1", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-371706905", "createdAt": "2020-03-10T06:34:15Z", "commit": {"oid": "f3fe48507316967a6057e08120f27540e1d89019"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjozNDoxNVrOF0C3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjo1NToyMVrOF0DLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzEzMQ==", "bodyText": "I don't think it's a good design, unless you're perfectly sure that the caller will always use the file content as an InputStream, otherwise, you create the USELESS input stream too eagerly", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390117131", "createdAt": "2020-03-10T06:34:15Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final FileChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {\n+        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n+            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n+                                                   .scheduleAtFixedRate(\n+                                                       FileChangeMonitor::run, 1, 1,\n+                                                       TimeUnit.SECONDS\n+                                                   );\n+        }\n+\n+        this.checkAndNotify();\n+        MONITOR_INSTANCES.add(this);\n+    }\n+\n+    public synchronized void stop() {\n+        MONITOR_INSTANCES.remove(this);\n+    }\n+\n+    /**\n+     * Check the file status, if changed, send the notification.\n+     */\n+    private void checkAndNotify() {\n+        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n+            // Don't reach the period threshold, ignore this check.\n+            return;\n+        }\n+        File targetFile = new File(filePath);\n+        if (!targetFile.exists() && acceptFileNotExisting) {\n+            notifier.fileNotFound();\n+        }\n+        if (targetFile.isFile()) {\n+            long lastModified = targetFile.lastModified();\n+\n+            if (lastModified != lastModifiedTimestamp) {\n+                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n+                    notifier.fileChanged(fileInputStream);\n+                } catch (FileNotFoundException e) {\n+                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n+                } catch (IOException e) {\n+                    log.error(\"Read file failure, watch file=\" + filePath, e);\n+                } finally {\n+                    lastModifiedTimestamp = lastModified;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check all registered file.\n+     */\n+    private static void run() {\n+        MONITOR_INSTANCES.forEach(monitor -> {\n+            try {\n+                monitor.checkAndNotify();\n+            } catch (Throwable e) {\n+                log.error(\"Error happens during monitoring file=\" + monitor.filePath, e);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * The callback when file changed.\n+     */\n+    public interface FileChangedNotifier {\n+        /**\n+         * Notify the new content by providing the file input stream\n+         *\n+         * @param readableStream points to the new content\n+         * @throws IOException if error happens during reading.\n+         */\n+        void fileChanged(InputStream readableStream) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fe48507316967a6057e08120f27540e1d89019"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMjIyMQ==", "bodyText": "the synchronized makes no sense, it's locked by the caller, and every caller is different from others", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390122221", "createdAt": "2020-03-10T06:55:09Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final FileChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fe48507316967a6057e08120f27540e1d89019"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMjI2NQ==", "bodyText": "same here", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390122265", "createdAt": "2020-03-10T06:55:21Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final FileChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {\n+        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n+            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n+                                                   .scheduleAtFixedRate(\n+                                                       FileChangeMonitor::run, 1, 1,\n+                                                       TimeUnit.SECONDS\n+                                                   );\n+        }\n+\n+        this.checkAndNotify();\n+        MONITOR_INSTANCES.add(this);\n+    }\n+\n+    public synchronized void stop() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3fe48507316967a6057e08120f27540e1d89019"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11623ee9b45368a1fefb93c8c137676d0f189f2d", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/11623ee9b45368a1fefb93c8c137676d0f189f2d", "committedDate": "2020-03-10T13:21:22Z", "message": "Update to support multiple files change monitoring."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b064ce593d59d82e4c8d4f20091221854f0e7dd", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/4b064ce593d59d82e4c8d4f20091221854f0e7dd", "committedDate": "2020-03-10T13:22:16Z", "message": "Merge branch 'master' into vault-support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08", "committedDate": "2020-03-10T23:59:55Z", "message": "Merge branch 'master' into vault-support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDAzMzg4", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-372403388", "createdAt": "2020-03-11T00:14:59Z", "commit": {"oid": "4b064ce593d59d82e4c8d4f20091221854f0e7dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDoxNjoxM1rOF0lW_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDoxNjoxM1rOF0lW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MjM2Ng==", "bodyText": "Why do we need to double-check? To avoid the new added Monitor will re-check at once?\nIMO, we can set the check period as watchingPeriodInSec, because this case is a minority case and only affects the first check.", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390682366", "createdAt": "2020-03-11T00:16:13Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/MultipleFilesChangeMonitor.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * MultipleFilesChangeMonitor provides the capability to detect file or multiple files changed. It provide second level\n+ * change detection and feedback mechanism.\n+ *\n+ * Due to memory cost, this monitor mechanism is not suitable for small files and usually being changed on the runtime\n+ * by user manually or 3rd party tool. Typical, these files are config information or authentication files.\n+ */\n+@Slf4j\n+public class MultipleFilesChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    private static ReentrantLock SCHEDULER_CHANGE_LOCK = new ReentrantLock();\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<MultipleFilesChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    private List<WatchedFile> watchedFiles;\n+    private FilesChangedNotifier notifier;\n+\n+    /**\n+     * Create a new monitor for the given files\n+     *\n+     * @param watchingPeriodInSec The check period.\n+     * @param notifier            to accept the file changed notification.\n+     * @param files               to be monitored.\n+     */\n+    public MultipleFilesChangeMonitor(long watchingPeriodInSec,\n+                                      FilesChangedNotifier notifier,\n+                                      String... files) {\n+        watchedFiles = new ArrayList<>();\n+        this.watchingPeriodInSec = watchingPeriodInSec;\n+        this.notifier = notifier;\n+        for (final String file : files) {\n+            WatchedFile monitor = new WatchedFile(file);\n+            watchedFiles.add(monitor);\n+        }\n+    }\n+\n+    /**\n+     * Check file changed status, if so, send the notification.\n+     */\n+    private void checkAndNotify() {\n+        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n+            // Don't reach the period threshold, ignore this check.\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDM1NzAz", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-372435703", "createdAt": "2020-03-11T02:14:04Z", "commit": {"oid": "d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDM5OTcx", "url": "https://github.com/apache/skywalking/pull/4475#pullrequestreview-372439971", "createdAt": "2020-03-11T02:29:01Z", "commit": {"oid": "d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2433, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}