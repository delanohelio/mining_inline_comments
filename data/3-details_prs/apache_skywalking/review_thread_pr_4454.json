{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODU2OTY4", "number": 4454, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxNDo0OVrODl2n2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjozMTo1OVrODl_7JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDE4ODQzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxNDo0OVrOFy-eYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo1MjozNFrOFzMLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5NjcwNQ==", "bodyText": "Consider using \"fast return\", instead of so many nested blocks", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r388996705", "createdAt": "2020-03-06T16:14:49Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "diffHunk": "@@ -119,4 +127,22 @@ public int getServiceInstanceId(int serviceId, int addressId) {\n         }\n         return serviceInstanceId;\n     }\n+\n+    public String getServiceInstanceLanguage(int serviceInstanceId) {\n+        String language = languageCache.getIfPresent(serviceInstanceId);\n+        if (isNull(language)) {\n+            ServiceInstanceInventory inventory = get(serviceInstanceId);\n+            if (nonNull(inventory)) {\n+                JsonObject properties = inventory.getProperties();\n+                for (String key : properties.keySet()) {\n+                    if (key.equals(ServiceInstanceInventory.PropertyUtil.LANGUAGE)) {\n+                        language = properties.get(key).getAsString().toLowerCase();\n+                        languageCache.put(serviceInstanceId, language);\n+                        return language;\n+                    }\n+                }\n+            }\n+        }\n+        return Const.EMPTY_STRING;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTIzNQ==", "bodyText": "Done, thanks for your review \ud83d\ude06", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389221235", "createdAt": "2020-03-07T02:52:34Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "diffHunk": "@@ -119,4 +127,22 @@ public int getServiceInstanceId(int serviceId, int addressId) {\n         }\n         return serviceInstanceId;\n     }\n+\n+    public String getServiceInstanceLanguage(int serviceInstanceId) {\n+        String language = languageCache.getIfPresent(serviceInstanceId);\n+        if (isNull(language)) {\n+            ServiceInstanceInventory inventory = get(serviceInstanceId);\n+            if (nonNull(inventory)) {\n+                JsonObject properties = inventory.getProperties();\n+                for (String key : properties.keySet()) {\n+                    if (key.equals(ServiceInstanceInventory.PropertyUtil.LANGUAGE)) {\n+                        language = properties.get(key).getAsString().toLowerCase();\n+                        languageCache.put(serviceInstanceId, language);\n+                        return language;\n+                    }\n+                }\n+            }\n+        }\n+        return Const.EMPTY_STRING;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5NjcwNQ=="}, "originalCommit": {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDIwMDI2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/NoUpstreamRealAddressAgentConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxODozMFrOFy-mCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxODozMFrOFy-mCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5ODY2NA==", "bodyText": "Gateway?", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r388998664", "createdAt": "2020-03-06T16:18:30Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/NoUpstreamRealAddressAgentConfig.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileNotFoundException;\n+import java.io.Reader;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class NoUpstreamRealAddressAgentConfig extends ConfigChangeWatcher {\n+\n+    private final AtomicReference<String> settingsString;\n+    private volatile Languages ignoreByLanguage = Languages.EMPTY;\n+\n+    public NoUpstreamRealAddressAgentConfig(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"noUpstreamRealAddressAgent\");\n+        this.settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n+        final Languages defaultLanguages = parseLanguageFromFile(\"no_upstream_real_address_agent.yml\");\n+        log.info(\"Default configured no upstream real address agent: {}\", defaultLanguages);\n+        onLanguageUpdated(defaultLanguages);\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        this.settingsString.set(config);\n+        onLanguageUpdated(parseGatewayFromYml(config));\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(\"\");\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return settingsString.get();\n+    }\n+\n+    private void onLanguageUpdated(final Languages languages) {\n+        log.info(\"Updating no upstream real address agent with:{}\", languages);\n+        languages.languages = languages.getLanguages().stream().map(String::toLowerCase).collect(Collectors.toSet());\n+        ignoreByLanguage = languages;\n+    }\n+\n+    public boolean ignoreLanguage(final String language) {\n+        if (StringUtil.isEmpty(language)) {\n+            return false;\n+        }\n+        final boolean isIgnored = ignoreByLanguage.getLanguages().contains(language);\n+        if (log.isDebugEnabled() && isIgnored) {\n+            log.debug(\"Language [{}] is ignored\", language);\n+        }\n+        return isIgnored;\n+    }\n+\n+    private Languages parseLanguageFromFile(final String file) {\n+        try {\n+            final Reader reader = ResourceUtils.read(file);\n+            return new Yaml().loadAs(reader, Languages.class);\n+        } catch (FileNotFoundException e) {\n+            log.error(\"Cannot load languages from: {}\", file, e);\n+        }\n+        return Languages.EMPTY;\n+    }\n+\n+    private Languages parseGatewayFromYml(final String ymlContent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ1MTc1OnYy", "diffSide": "RIGHT", "path": "apm-dist/src/main/assembly/binary.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NToyN1rOFzKotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NToyN1rOFzKotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTk1Ng==", "bodyText": "Don't use a new file. This is a very simple config, please add a field to tracr receiver module provider.\nOnly If the content is complex and usually changed, we need a separated file. This fix is not that case.\nThis config is nearly static, nearly no one should change.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389195956", "createdAt": "2020-03-06T23:45:27Z", "author": {"login": "wu-sheng"}, "path": "apm-dist/src/main/assembly/binary.xml", "diffHunk": "@@ -51,6 +51,7 @@\n                 <include>official_analysis.oal</include>\r\n                 <include>gateways.yml</include>\r\n                 <include>service-apdex-threshold.yml</include>\r\n+                <include>no_upstream_real_address_agent.yml</include>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ1MzgzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0Njo0MVrOFzKp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMzoyOTozOFrOFzMUpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjI3MQ==", "bodyText": "We support list here, take a look at downsampling config. And you should put LUA as the default element.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389196271", "createdAt": "2020-03-06T23:46:41Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private NoUpstreamRealAddressAgentConfig noUpstreamRealAddressAgentConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMzU5MA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389223590", "createdAt": "2020-03-07T03:29:38Z", "author": {"login": "arugal"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private NoUpstreamRealAddressAgentConfig noUpstreamRealAddressAgentConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjI3MQ=="}, "originalCommit": {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTYxNjg3OnYy", "diffSide": "RIGHT", "path": "dist-material/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0MzoxNFrOFzMIvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo1NTo1MVrOFzMMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDU0Mw==", "bodyText": "\u00a0I think we don't need to open this to the end user. WDYT?", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220543", "createdAt": "2020-03-07T02:43:14Z", "author": {"login": "wu-sheng"}, "path": "dist-material/application.yml", "diffHunk": "@@ -180,6 +180,8 @@ receiver-trace:\n     bufferFileCleanWhenRestart: ${SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART:false}\n     sampleRate: ${SW_TRACE_SAMPLE_RATE:10000} # The sample rate precision is 1/10000. 10000 means 100% sample in default.\n     slowDBAccessThreshold: ${SW_SLOW_DB_THRESHOLD:default:200,mongodb:100} # The slow database access thresholds. Unit ms.\n+    noUpstreamRealAddressAgents: # The no upstream real address agents, service instance mapping and service instance client side relation are ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTQ1OQ==", "bodyText": "Agree.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389221459", "createdAt": "2020-03-07T02:55:51Z", "author": {"login": "arugal"}, "path": "dist-material/application.yml", "diffHunk": "@@ -180,6 +180,8 @@ receiver-trace:\n     bufferFileCleanWhenRestart: ${SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART:false}\n     sampleRate: ${SW_TRACE_SAMPLE_RATE:10000} # The sample rate precision is 1/10000. 10000 means 100% sample in default.\n     slowDBAccessThreshold: ${SW_SLOW_DB_THRESHOLD:default:200,mongodb:100} # The slow database access thresholds. Unit ms.\n+    noUpstreamRealAddressAgents: # The no upstream real address agents, service instance mapping and service instance client side relation are ignored.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDU0Mw=="}, "originalCommit": {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTYxOTQwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0ODoxN1rOFzMKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMzoyOTozMFrOFzMUog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDg4OA==", "bodyText": "This should be initialized to include LUA. As a native agent, we know, LUA agent can't support in this value.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220888", "createdAt": "2020-03-07T02:48:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -41,7 +44,13 @@\n     @Setter\n     @Getter\n     private int sampleRate = 10000;\n-\n+    /**\n+     * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+     * service instance mapping and service instance client side relation are ignored.\n+     */\n+    @Setter\n+    @Getter\n+    private List<String> noUpstreamRealAddressAgents = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMzU4Ng==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389223586", "createdAt": "2020-03-07T03:29:30Z", "author": {"login": "arugal"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -41,7 +44,13 @@\n     @Setter\n     @Getter\n     private int sampleRate = 10000;\n-\n+    /**\n+     * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+     * service instance mapping and service instance client side relation are ignored.\n+     */\n+    @Setter\n+    @Getter\n+    private List<String> noUpstreamRealAddressAgents = Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDg4OA=="}, "originalCommit": {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTYyMDExOnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OTozMFrOFzMKaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OTozMFrOFzMKaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk2OQ==", "bodyText": "I think we don't need log for this.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220969", "createdAt": "2020-03-07T02:49:30Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java", "diffHunk": "@@ -306,7 +309,17 @@ public void build() {\n \n             exitSourceBuilder.setTimeBucket(minuteTimeBucket);\n             sourceReceiver.receive(exitSourceBuilder.toServiceRelation());\n-            sourceReceiver.receive(exitSourceBuilder.toServiceInstanceRelation());\n+            String sourceLanguage = instanceInventoryCache.getServiceInstanceLanguage(exitSourceBuilder.getSourceServiceInstanceId());\n+            if (config.getNoUpstreamRealAddressAgents().contains(sourceLanguage)) {\n+                /*\n+                 * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+                 */\n+                if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTYyMDE5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OTo0MlrOFzMKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMjo0OTo0MlrOFzMKdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk4MQ==", "bodyText": "We don't need the log too.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220981", "createdAt": "2020-03-07T02:49:42Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java", "diffHunk": "@@ -79,6 +81,17 @@ public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI\n         if (!spanDecorator.getSpanLayer().equals(SpanLayer.MQ)) {\n             if (spanDecorator.getRefsCount() > 0) {\n                 for (int i = 0; i < spanDecorator.getRefsCount(); i++) {\n+                    ReferenceDecorator referenceDecorator = spanDecorator.getRefs(i);\n+                    String parentLanguage = serviceInstanceInventoryCache.getServiceInstanceLanguage(referenceDecorator.getParentServiceInstanceId());\n+                    if (config.getNoUpstreamRealAddressAgents().contains(parentLanguage)) {\n+                        /*\n+                         * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+                         */\n+                        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTYzMzYwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMzoxNTozOFrOFzMRRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMzoyOTo1MlrOFzMUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMjcyNw==", "bodyText": "I think comparing to this implementation, I would say, adding a no-@column field in the ServiceInstanceInventory to cache the status should be better in performance and understanding.\nAnd you should avoid check the language repeatedly if this instance hasn't language properties. Such as in the new implementation, you should separate the value from null and Const#UNKNOWN.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389222727", "createdAt": "2020-03-07T03:15:38Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "diffHunk": "@@ -119,4 +125,24 @@ public int getServiceInstanceId(int serviceId, int addressId) {\n         }\n         return serviceInstanceId;\n     }\n+\n+    public String getServiceInstanceLanguage(int serviceInstanceId) {\n+        String language = languageCache.getIfPresent(serviceInstanceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b22575fc7667271a1568f456ed7a27b855c6db1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMzU5Ng==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389223596", "createdAt": "2020-03-07T03:29:52Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "diffHunk": "@@ -119,4 +125,24 @@ public int getServiceInstanceId(int serviceId, int addressId) {\n         }\n         return serviceInstanceId;\n     }\n+\n+    public String getServiceInstanceLanguage(int serviceInstanceId) {\n+        String language = languageCache.getIfPresent(serviceInstanceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMjcyNw=="}, "originalCommit": {"oid": "9b22575fc7667271a1568f456ed7a27b855c6db1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTcxMjM2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjozMTo1OVrOFzM5Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjo0NDoyMFrOFzM7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMjk1MQ==", "bodyText": "I didn't notice this should be lower case. How about to use toLowerCase in the switch?", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389232951", "createdAt": "2020-03-07T06:31:59Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java", "diffHunk": "@@ -33,6 +33,10 @@ public Language value(String language) {\n                 return Language.PYTHON;\n             case \"ruby\":\n                 return Language.RUBY;\n+            case \"go\":\n+                return Language.GO;\n+            case \"Lua\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62c71dac38aa70e10770fc6d09e7c108998f9037"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzQ4Ng==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389233486", "createdAt": "2020-03-07T06:44:20Z", "author": {"login": "arugal"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java", "diffHunk": "@@ -33,6 +33,10 @@ public Language value(String language) {\n                 return Language.PYTHON;\n             case \"ruby\":\n                 return Language.RUBY;\n+            case \"go\":\n+                return Language.GO;\n+            case \"Lua\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMjk1MQ=="}, "originalCommit": {"oid": "62c71dac38aa70e10770fc6d09e7c108998f9037"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4390, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}