{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODcwODg5", "number": 5413, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOToyNDowOVrOEeDM_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNDo1NTo1MVrOEeE6Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTQ1MjE0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOToyNDowOVrOHJhVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjoxNzowNlrOHJiZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA==", "bodyText": "What is this? The job parameter?", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479745384", "createdAt": "2020-08-30T09:24:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MTgxNA==", "bodyText": "https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/JobDetail.java#L75\nhttps://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/JobDataMap.java#L36", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479761814", "createdAt": "2020-08-30T12:07:18Z", "author": {"login": "hailin0"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA=="}, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MjIzOQ==", "bodyText": "Could call JobDataMap#toString directly? Typically, all maps should have supported this way, as a string-string map.", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479762239", "createdAt": "2020-08-30T12:11:56Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA=="}, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2Mjc0Mg==", "bodyText": "yes, may have the same job name and job class but parameter not equal", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479762742", "createdAt": "2020-08-30T12:17:06Z", "author": {"login": "hailin0"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTM4NA=="}, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTQ1MjQzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOToyNDozNVrOHJhVkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjowNDowOFrOHJiUUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTQyNQ==", "bodyText": "What is jobGroup? Could you provide a document link?", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479745425", "createdAt": "2020-08-30T09:24:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MTQ4OA==", "bodyText": "https://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/Scheduler.java#L69\nhttps://github.com/quartz-scheduler/quartz/blob/master/quartz-core/src/main/java/org/quartz/JobKey.java#L23", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479761488", "createdAt": "2020-08-30T12:04:08Z", "author": {"login": "hailin0"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NTQyNQ=="}, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTU5NzIwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMjoyMjowNVrOHJia_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxMzoxMDo1NVrOHJiuZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MzE5OQ==", "bodyText": "I mean here, you build a new map, which is expensive. If originalJobDataMap could toString directly, we should do that.", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479763199", "createdAt": "2020-08-30T12:22:05Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);\n+    }\n+\n+    private static Map<String, String> getJobDataMap(JobDetail jobDetail) {\n+        JobDataMap originalJobDataMap = jobDetail.getJobDataMap();\n+        if (originalJobDataMap != null) {\n+            Map<String, String> jobDataMap = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2ODE2NQ==", "bodyText": "ok.", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479768165", "createdAt": "2020-08-30T13:10:55Z", "author": {"login": "hailin0"}, "path": "apm-sniffer/optional-plugins/quartz-scheduler-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/quartz/JobRunShellMethodInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.quartz;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.AbstractTag;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Intercept method of {@link org.quartz.core.JobRunShell#run()}.\n+ * record the quartz job local span.\n+ */\n+public class JobRunShellMethodInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final AbstractTag JOB_GROUP = Tags.ofKey(\"jobGroup\");\n+    private static final AbstractTag JOB_DATA_MAP = Tags.ofKey(\"jobDataMap\");\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        JobDetail jobDetail = (JobDetail) objInst.getSkyWalkingDynamicField();\n+\n+        String jobName = jobDetail.getKey().getName();\n+        String jobGroup = jobDetail.getKey().getGroup();\n+        String operationName = ComponentsDefine.QUARTZ_SCHEDULER.getName() + \"/\" + jobName;\n+\n+        AbstractSpan span = ContextManager.createLocalSpan(operationName);\n+        span.setComponent(ComponentsDefine.QUARTZ_SCHEDULER);\n+        Tags.LOGIC_ENDPOINT.set(span, Tags.VAL_LOCAL_SPAN_AS_LOGIC_ENDPOINT);\n+        span.tag(JOB_GROUP, jobGroup == null ? \"\" : jobGroup);\n+        span.tag(JOB_DATA_MAP, getJobDataMap(jobDetail).toString());\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ContextManager.activeSpan().errorOccurred().log(t);\n+    }\n+\n+    private static Map<String, String> getJobDataMap(JobDetail jobDetail) {\n+        JobDataMap originalJobDataMap = jobDetail.getJobDataMap();\n+        if (originalJobDataMap != null) {\n+            Map<String, String> jobDataMap = new HashMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2MzE5OQ=="}, "originalCommit": {"oid": "1b6c5b11b5af0fd0cd920ae754ffe2b722794ef5"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTczMTU0OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/service-agent/java-agent/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNDo1NTo1MlrOHJjcWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNDo1NTo1MlrOHJjcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc3OTkyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Plugin of quartz-scheduler-2.x in optional plugin folder. The reason of being optional plugin is, many task scheduling system are based on quartz-scheduler, this will caused duplicate tracing.\n          \n          \n            \n            * Plugin of quartz-scheduler-2.x in the optional plugin folder. The reason for being an optional plugin is, many task scheduling systems are based on quartz-scheduler, this will cause duplicate tracing and link different sub-tasks as they share the same quartz level trigger, such as ElasticJob.", "url": "https://github.com/apache/skywalking/pull/5413#discussion_r479779929", "createdAt": "2020-08-30T14:55:52Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -170,6 +170,7 @@ Now, we have the following known optional plugins.\n * Plugin of Spring Cloud Gateway 2.1.x in optional plugin folder. Please only active this plugin when you install agent in Spring Gateway. spring-cloud-gateway-2.x-plugin and spring-webflux-5.x-plugin are both required.\n * Plugin of Spring Transaction in optional plugin folder. The reason of being optional plugin is, many local span are generated, which also spend more CPU, memory and network.\n * [Plugin of Kotlin coroutine](agent-optional-plugins/Kotlin-Coroutine-plugin.md) provides the tracing across coroutines automatically. As it will add local spans to all across routines scenarios, Please assess the performance impact.\n+* Plugin of quartz-scheduler-2.x in optional plugin folder. The reason of being optional plugin is, many task scheduling system are based on quartz-scheduler, this will caused duplicate tracing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5048e111352782dd3d743619d25cac32cd19f9a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4999, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}