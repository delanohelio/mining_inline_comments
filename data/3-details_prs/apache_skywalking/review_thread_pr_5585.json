{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Nzg0MzA2", "number": 5585, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjozNTozM1rOEohxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjozNjo0N1rOEohzlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTMxODYzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjozNTozM1rOHZq7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMzo1MDoyOVrOHa5l_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTgwNQ==", "bodyText": "Do you need these if you already have calendar.setTimeInMillis(0);?", "url": "https://github.com/apache/skywalking/pull/5585#discussion_r496679805", "createdAt": "2020-09-29T12:35:33Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java", "diffHunk": "@@ -104,6 +104,10 @@ public static boolean isDayBucket(long timeBucket) {\n     public static long getTimestamp(long timeBucket, DownSampling downsampling) {\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTimeInMillis(0);\n+        calendar.set(Calendar.MILLISECOND, 0);\n+        calendar.set(Calendar.SECOND, 0);\n+        calendar.set(Calendar.MINUTE, 0);\n+        calendar.set(Calendar.HOUR_OF_DAY, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e501f202e6f19ef16fc10dd9310e81b1244ff00a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2ODYzNg==", "bodyText": "Yes, they are required. The time equals zone offset  when calendar.setTimeInMillis(0); was presented. And then, I found some time zone is not a times as hour. But they all is a times as minute. (L107/L108 is optional.)", "url": "https://github.com/apache/skywalking/pull/5585#discussion_r497968636", "createdAt": "2020-10-01T03:50:29Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java", "diffHunk": "@@ -104,6 +104,10 @@ public static boolean isDayBucket(long timeBucket) {\n     public static long getTimestamp(long timeBucket, DownSampling downsampling) {\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTimeInMillis(0);\n+        calendar.set(Calendar.MILLISECOND, 0);\n+        calendar.set(Calendar.SECOND, 0);\n+        calendar.set(Calendar.MINUTE, 0);\n+        calendar.set(Calendar.HOUR_OF_DAY, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTgwNQ=="}, "originalCommit": {"oid": "e501f202e6f19ef16fc10dd9310e81b1244ff00a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTMyMzcyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjozNjo0N1rOHZq-gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjozNjo0N1rOHZq-gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4MDU3OQ==", "bodyText": "Suggest to add comment about the deliberate \"fall through\" of the switch statement (as well as the ordering), in case future developers consider it as a bug, which is common", "url": "https://github.com/apache/skywalking/pull/5585#discussion_r496680579", "createdAt": "2020-09-29T12:36:47Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java", "diffHunk": "@@ -18,63 +18,54 @@\n \n package org.apache.skywalking.oap.server.core.analysis;\n \n-import java.util.concurrent.TimeUnit;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n-import static java.util.concurrent.TimeUnit.DAYS;\n-import static java.util.concurrent.TimeUnit.HOURS;\n-import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static java.util.concurrent.TimeUnit.MINUTES;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n \n @RunWith(Parameterized.class)\n public class TimeBucketTest {\n     private static final long NOW = System.currentTimeMillis();\n \n     @Parameterized.Parameters\n-    public static Object[][] parameters() {\n-        return new Object[][] {\n-            {\n+    public static Object[] parameters() {\n+        return new Object[]{\n                 DownSampling.Second,\n-                SECONDS,\n-                MILLISECONDS.toSeconds(NOW)\n-            },\n-            {\n                 DownSampling.Minute,\n-                MINUTES,\n-                MILLISECONDS.toMinutes(NOW)\n-            },\n-            {\n                 DownSampling.Hour,\n-                HOURS,\n-                MILLISECONDS.toHours(NOW)\n-            },\n-            {\n-                DownSampling.Day,\n-                DAYS,\n-                MILLISECONDS.toDays(NOW)\n-            }\n+                DownSampling.Day\n         };\n     }\n \n     private DownSampling downSampling;\n-    private TimeUnit unit;\n-    private long time;\n \n-    public TimeBucketTest(DownSampling downSampling, TimeUnit unit, long time) {\n+    public TimeBucketTest(DownSampling downSampling) {\n         this.downSampling = downSampling;\n-        this.unit = unit;\n-        this.time = time;\n     }\n \n     @Test\n     public void testConversion() {\n-        long timestamp = TimeBucket\n-            .getTimestamp(TimeBucket.getTimeBucket(NOW, downSampling));\n-        Assert.assertEquals(timestamp, unit.toMillis(time));\n-    }\n+        long timestamp = TimeBucket.getTimestamp(TimeBucket.getTimeBucket(NOW, downSampling));\n \n+        Calendar instance = Calendar.getInstance(TimeZone.getDefault());\n+        instance.setTimeInMillis(NOW);\n+        switch (downSampling) {\n+            case Day: {\n+                instance.set(Calendar.HOUR_OF_DAY, 0);\n+            }\n+            case Hour: {\n+                instance.set(Calendar.MINUTE, 0);\n+            }\n+            case Minute: {\n+                instance.set(Calendar.SECOND, 0);\n+            }\n+            case Second: {\n+                instance.set(Calendar.MILLISECOND, 0);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e501f202e6f19ef16fc10dd9310e81b1244ff00a"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4850, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}