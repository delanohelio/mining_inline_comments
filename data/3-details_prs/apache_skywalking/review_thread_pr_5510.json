{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTE3NDc0", "number": 5510, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNjo0OFrOEkcL6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDowNDowOVrOEkztEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjQ1OTk1OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/spring-kafka-2.3.x-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNjo0OFrOHTYsUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0NDoyMVrOHTl8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTU1Mg==", "bodyText": "Once you changed this, you should change the expected data yaml to map this.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490089552", "createdAt": "2020-09-17T09:06:48Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/spring-kafka-2.3.x-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java", "diffHunk": "@@ -82,6 +85,21 @@ private void setUpProvider() {\n         }\n     }\n \n+    private void setUpAnotherProvider() {\n+        Map<String, Object> props = new HashMap<>();\n+        // use list type here\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, Arrays.asList(bootstrapServers.split(\",\")));\n+        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        kafkaTemplate2 = new KafkaTemplate<String, String>(new DefaultKafkaProducerFactory<>(props));\n+        try {\n+            kafkaTemplate2.send(topicName, \"key\", \"ping\").get();\n+            kafkaTemplate2.flush();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83a656874ca292a535f88f1d5383448dac9b1a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwNjY0OQ==", "bodyText": "I have added more test cases for this scenario.  Pls have a check since I am not familiar with this part.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490306649", "createdAt": "2020-09-17T14:44:21Z", "author": {"login": "lujiajing1126"}, "path": "test/plugin/scenarios/spring-kafka-2.3.x-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java", "diffHunk": "@@ -82,6 +85,21 @@ private void setUpProvider() {\n         }\n     }\n \n+    private void setUpAnotherProvider() {\n+        Map<String, Object> props = new HashMap<>();\n+        // use list type here\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, Arrays.asList(bootstrapServers.split(\",\")));\n+        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        kafkaTemplate2 = new KafkaTemplate<String, String>(new DefaultKafkaProducerFactory<>(props));\n+        try {\n+            kafkaTemplate2.send(topicName, \"key\", \"ping\").get();\n+            kafkaTemplate2.flush();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTU1Mg=="}, "originalCommit": {"oid": "a83a656874ca292a535f88f1d5383448dac9b1a9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDIyNzQzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzoyMjoyNVrOHT8l7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1OTozMVrOHT9QMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw==", "bodyText": "Why add this comment? This interceptor is used for 2.1-, isn't it?", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490677743", "createdAt": "2020-09-18T03:22:25Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTQ3Mg==", "bodyText": "Why add this comment? This interceptor is used for 2.1-, isn't it?\n\nNo. The Map argument is used from Kafka 2.1+", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490685472", "createdAt": "2020-09-18T03:46:48Z", "author": {"login": "lujiajing1126"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTg0Ng==", "bodyText": "But this interceptor still supports String as a parameter, I still can see the String casting.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490685846", "createdAt": "2020-09-18T03:48:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NTk5MQ==", "bodyText": "You didn't add any new instrumentation definition. So, this must be compatible with older releases.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490685991", "createdAt": "2020-09-18T03:49:11Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NjMzNA==", "bodyText": "But this interceptor still supports String as a parameter, I still can see the String casting.\n\nExactly. Regarding bootstrap.servers, the type of the value in the map can be String or List. Both types are supported by kafka client lib.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490686334", "createdAt": "2020-09-18T03:50:28Z", "author": {"login": "lujiajing1126"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4Njk5OQ==", "bodyText": "I am not talking about the codes. You added comment says this is for 2.1+, which is not accurate. It supports 2.1 also.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490686999", "createdAt": "2020-09-18T03:53:24Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzYyOQ==", "bodyText": "I am not talking about the codes. You added comment says this is for 2.1+, which is not accurate. It supports 2.1 also.\n\nSo it should be \">=2.1.0\", I guess?", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490687629", "createdAt": "2020-09-18T03:55:36Z", "author": {"login": "lujiajing1126"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4ODU2Mg==", "bodyText": "Fixed", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490688562", "createdAt": "2020-09-18T03:59:31Z", "author": {"login": "lujiajing1126"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients 2.1+\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3Nzc0Mw=="}, "originalCommit": {"oid": "7b100db02fa25d12eb1f131b015ac981ebbf88b2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDMxMzEzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDowNDowOVrOHT9UVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDoxMDo0MlrOHT9acQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4OTYyMA==", "bodyText": "Still confused what your new comments. Isn't 2.0 even 1.x client libraries using this interceptor?", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490689620", "createdAt": "2020-09-18T04:04:09Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients >=2.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5c9555f9e8f5898cf2f8cebac8d1ba9ce2556a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MTE4NQ==", "bodyText": "Still confused what your new comments. Isn't 2.0 even 1.x client libraries using this interceptor?\n\nI see. You are right. It can be used even below 2.0, if users intend to use Map type constructors.\nI have removed this comment.", "url": "https://github.com/apache/skywalking/pull/5510#discussion_r490691185", "createdAt": "2020-09-18T04:10:42Z", "author": {"login": "lujiajing1126"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/ProducerConstructorMapInterceptor.java", "diffHunk": "@@ -22,16 +22,27 @@\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n import org.apache.skywalking.apm.util.StringUtil;\n \n+import java.util.List;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n+/**\n+ * Target at kafka-clients >=2.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4OTYyMA=="}, "originalCommit": {"oid": "ca5c9555f9e8f5898cf2f8cebac8d1ba9ce2556a"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4809, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}