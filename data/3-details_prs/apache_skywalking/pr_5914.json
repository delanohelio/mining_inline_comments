{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDgwMjgx", "number": 5914, "title": "Support collecting logs of log4j, log4j2, and logback in the tracing context", "bodyText": "Add an agent plugin to support \n\n Add a test case for the new plugin, refer to the doc\n Add a component id in the component-libraries.yml NO NEED\n Add a logo in the UI repo NO NEED\n\nRelated Issues\n\n#4545\n#5863", "createdAt": "2020-11-27T08:55:50Z", "url": "https://github.com/apache/skywalking/pull/5914", "merged": true, "mergeCommit": {"oid": "09961519733380fb3d0ea7fd2ddf78bde4a673f3"}, "closed": true, "closedAt": "2020-12-10T05:53:31Z", "author": {"login": "vcjmhg"}, "timelineItems": {"totalCount": 117, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkhNpegFqTU0ODM1NzQ0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdks1psAFqTU0ODg2NzQ4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzU3NDQ5", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548357449", "createdAt": "2020-12-09T16:20:16Z", "commit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMDoxN1rOICdQwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMDoxN1rOICdQwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0NzQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **package attribute**: Specify the package name of the log that needs log conversion.  **The default value is `*` , and it will match all packages.**\n          \n          \n            \n            **package attribute**: Specify the package name of the log that needs log conversion. **The default value is `*`, and it will match all packages.**", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r539447490", "createdAt": "2020-12-09T16:20:17Z", "author": {"login": "BFergerson"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please pay attention that  the original `log4j.xml`(or other log framework config files) has high priority than the `logconfig.properties`.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config/logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the default configurations are as following,**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. SkyWalking opened the adaptor(bridge) between tracing kernel and log frameworks, including `log4j`, `log4j2`, `logback`.\n+2. Only collect logs at the `error` level, others would be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. Wouldn't filter the logs by the package name.\n+\n+# Property description\n+\n+## packages\n+\n+**package attribute**: Specify the package name of the log that needs log conversion.  **The default value is `*` , and it will match all packages.**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzU4MTMy", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548358132", "createdAt": "2020-12-09T16:20:57Z", "commit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMDo1N1rOICdS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyMDo1N1rOICdS8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0ODA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When matching multiple packages, the names of different packages should be separated by the comma.\n          \n          \n            \n            When matching multiple packages, the names of different packages should be separated by a comma.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r539448049", "createdAt": "2020-12-09T16:20:57Z", "author": {"login": "BFergerson"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please pay attention that  the original `log4j.xml`(or other log framework config files) has high priority than the `logconfig.properties`.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config/logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the default configurations are as following,**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. SkyWalking opened the adaptor(bridge) between tracing kernel and log frameworks, including `log4j`, `log4j2`, `logback`.\n+2. Only collect logs at the `error` level, others would be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. Wouldn't filter the logs by the package name.\n+\n+# Property description\n+\n+## packages\n+\n+**package attribute**: Specify the package name of the log that needs log conversion.  **The default value is `*` , and it will match all packages.**\n+\n+packages value:\n+\n+* the name of package, eg: `org.apache.skywalking`\n+* `*`:match all \n+\n+**Notice:**\n+\n+When matching multiple packages, the names of different packages should be separated by the comma.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0825c27b5b80b1e5ce255a162e47374de3079e51", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/0825c27b5b80b1e5ce255a162e47374de3079e51", "committedDate": "2020-12-09T16:49:05Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: Brandon Fergerson <bfergerson@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76a5232b315b7db34a08e19d82038ea924c87768", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/76a5232b315b7db34a08e19d82038ea924c87768", "committedDate": "2020-12-09T16:49:43Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: Brandon Fergerson <bfergerson@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f35bd7ce77252e834d1d7bbb5281a186806e93", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/86f35bd7ce77252e834d1d7bbb5281a186806e93", "committedDate": "2020-12-09T16:49:53Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: Brandon Fergerson <bfergerson@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31600589f287b4653bb2552c307b2438d4f8f7f2", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/31600589f287b4653bb2552c307b2438d4f8f7f2", "committedDate": "2020-12-09T16:50:01Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: Brandon Fergerson <bfergerson@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a502a68cb2731c453c92d98a53694d13bcf3077", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/0a502a68cb2731c453c92d98a53694d13bcf3077", "committedDate": "2020-12-09T17:06:19Z", "message": "only add interceptors to necessary points based on config level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f921410d6ba018b1cb9cb35874a169df66157c7", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/9f921410d6ba018b1cb9cb35874a169df66157c7", "committedDate": "2020-12-09T17:19:43Z", "message": "don't need to check level. only acceptable have interceptors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDIxNzk4", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548421798", "createdAt": "2020-12-09T17:26:17Z", "commit": {"oid": "31600589f287b4653bb2552c307b2438d4f8f7f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyNjoxN1rOICggeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyNjoxN1rOICggeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMDY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Because `logback` not support `fatal`, it wouldn't work, and you need to look for error message in the log if you set **logback.level=fatal**.\n          \n          \n            \n            Because `logback` does not support the `fatal` log level, the highest level you may set it to is **logback.level=error**.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r539500664", "createdAt": "2020-12-09T17:26:17Z", "author": {"login": "BFergerson"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please note that the original `log4j.xml`(or other log framework config files) has a higher priority than the `logconfig.properties`.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config/logger-plugin/logconfig.properties`. Of course, **If the file does not exist, the default configurations are as following:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. SkyWalking opened the adaptor(bridge) between tracing kernel and log frameworks, including `log4j`, `log4j2`, `logback`.\n+2. Only collect logs at the `error` level, others would be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. Wouldn't filter the logs by the package name.\n+\n+# Property description\n+\n+## packages\n+\n+**package attribute**: Specify the package name of the log that needs log conversion. **The default value is `*`, and it will match all packages.**\n+\n+packages value:\n+\n+* the name of package, eg: `org.apache.skywalking`\n+* `*`:match all \n+\n+**Notice:**\n+\n+When matching multiple packages, the names of different packages should be separated by a comma.\n+\n+## level\n+\n+**level attribute** : The level of the log for conversion. **By default it is `error` level**.\n+\n+The hierarchy order of log levels from low to high is as follows:\n+\n+`trace` < `debug` < `info` <`warn`< `error` < `fatal`\n+\n+**Notice:**\n+\n+Because `logback` not support `fatal`, it wouldn't work, and you need to look for error message in the log if you set **logback.level=fatal**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31600589f287b4653bb2552c307b2438d4f8f7f2"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42862034936fb149d89e070124eddf1bb267e7d9", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/42862034936fb149d89e070124eddf1bb267e7d9", "committedDate": "2020-12-09T23:52:57Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: Brandon Fergerson <bfergerson@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04eab4958423cfd33e80ae1a94f52716729cb580", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/04eab4958423cfd33e80ae1a94f52716729cb580", "committedDate": "2020-12-10T00:52:40Z", "message": "Merge pull request #11 from BFergerson/bf-master\n\nOnly add interceptors to necessary points based on config level"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzQ2MTQ4", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548746148", "createdAt": "2020-12-10T01:20:27Z", "commit": {"oid": "04eab4958423cfd33e80ae1a94f52716729cb580"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzQ4NTMy", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548748532", "createdAt": "2020-12-10T01:26:55Z", "commit": {"oid": "04eab4958423cfd33e80ae1a94f52716729cb580"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5cb91dd2e0e82534c59525f3637743cd8c4a224", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/f5cb91dd2e0e82534c59525f3637743cd8c4a224", "committedDate": "2020-12-10T03:01:17Z", "message": "fix UT for ContextConfig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "a3506e66149eb4115ea434872a5146f898b1fa67", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/a3506e66149eb4115ea434872a5146f898b1fa67", "committedDate": "2020-12-10T04:08:27Z", "message": "Fix the problem of CI failure:ignore the log level of fatal from logback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3506e66149eb4115ea434872a5146f898b1fa67", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/a3506e66149eb4115ea434872a5146f898b1fa67", "committedDate": "2020-12-10T04:08:27Z", "message": "Fix the problem of CI failure:ignore the log level of fatal from logback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODY3NDg3", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548867487", "createdAt": "2020-12-10T05:52:56Z", "commit": {"oid": "a3506e66149eb4115ea434872a5146f898b1fa67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dec4643b90ef55f9ba37d60048a6c80bd5afa02", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/0dec4643b90ef55f9ba37d60048a6c80bd5afa02", "committedDate": "2020-10-03T06:21:04Z", "message": "create project for logger-plugin(#4545)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f69fc08c3716e09d7238923da398bb58a2785363", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/f69fc08c3716e09d7238923da398bb58a2785363", "committedDate": "2020-10-04T10:29:49Z", "message": "create plugin project for logger-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32eb8b79c7caa45899fd446bd131b05a07c38347", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/32eb8b79c7caa45899fd446bd131b05a07c38347", "committedDate": "2020-10-05T02:51:20Z", "message": "Merge branch 'master' of https://github.com/apache/skywalking into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce8f8758dc9983a3b4022fb7783015af838f4ff0", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ce8f8758dc9983a3b4022fb7783015af838f4ff0", "committedDate": "2020-11-18T02:41:37Z", "message": "some test works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b606cea1cee98756cc4cd083f12789a04c9bc97a", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/b606cea1cee98756cc4cd083f12789a04c9bc97a", "committedDate": "2020-11-27T08:36:34Z", "message": "#5863 complete logger plugin scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fa47a9e4a929e217463b7692dd4216c82a53043", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/5fa47a9e4a929e217463b7692dd4216c82a53043", "committedDate": "2020-11-27T08:54:40Z", "message": "Merge branch 'master' of https://github.com/apache/skywalking into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d37c1dab3143c246894dae4638f970999fdca9", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/f7d37c1dab3143c246894dae4638f970999fdca9", "committedDate": "2020-11-27T23:52:56Z", "message": "normalized logconfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bb28c983b6a6c964ca8255326fdcaf598d1810", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/c5bb28c983b6a6c964ca8255326fdcaf598d1810", "committedDate": "2020-11-28T00:40:40Z", "message": "impl for log4j/log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2030e8cb7731c1fa67702e20b89e040b017083a7", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/2030e8cb7731c1fa67702e20b89e040b017083a7", "committedDate": "2020-11-28T00:55:10Z", "message": "Merge branch 'f-log' into bf-master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3d0460bb3afbe9bdce6fb2c18d9e719f3af6778", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/d3d0460bb3afbe9bdce6fb2c18d9e719f3af6778", "committedDate": "2020-11-28T02:26:46Z", "message": "Merge pull request #7 from BFergerson/master\n\nImpl log4j/log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjc0MTQz", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540274143", "createdAt": "2020-11-28T03:19:35Z", "commit": {"oid": "d3d0460bb3afbe9bdce6fb2c18d9e719f3af6778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzoxOTozNVrOH7MMig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzoxOTozNVrOH7MMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyNzg1MA==", "bodyText": "CatchAndPrintStackTrace:  Logging or rethrowing exceptions should usually be preferred to catching and calling printStackTrace", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r531827850", "createdAt": "2020-11-28T03:19:35Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public LoggerConfig getLogbackConfig() {\n+        return logbackConfig;\n+    }\n+\n+    public LoggerConfig getLog4jConfig() {\n+        return log4jConfig;\n+    }\n+\n+    public LoggerConfig getLog4j2Config() {\n+        return log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has yaml file\n+            File configFile;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logconfig.yaml\");\n+            } catch (AgentPackageNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            // not has config file, make config default\n+            if (!configFile.exists()) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                logbackConfig = new LoggerConfig(\"logback\", packages, LogLevel.ERROR);\n+                log4jConfig = new LoggerConfig(\"log4j\", packages, LogLevel.ERROR);\n+                log4j2Config = new LoggerConfig(\"log4j2\", packages, LogLevel.ERROR);\n+            } else {\n+                // use config file to init ContextConfig\n+                FileInputStream configFileInputStream = null;\n+                try {\n+                    configFileInputStream = new FileInputStream(configFile);\n+                    List<LoggerConfig> configs = parseConfigFile(configFileInputStream);\n+                    // initialization of variables which are described in config file\n+                    for (LoggerConfig loggerConfig : configs) {\n+                        if (\"logback\".equals(loggerConfig.getName())) {\n+                            logbackConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j\".equals(loggerConfig.getName())) {\n+                            log4jConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j2\".equals(loggerConfig.getName())) {\n+                            log4j2Config = fillLoggerConfig(loggerConfig);\n+                        } else {\n+                            throw new IllegalArgumentException();\n+                        }\n+                    }\n+                } catch (FileNotFoundException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    //close input stream\n+                    if (configFileInputStream != null) {\n+                        try {\n+                            configFileInputStream.close();\n+                        } catch (IOException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d0460bb3afbe9bdce6fb2c18d9e719f3af6778"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMjc0MTY3", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540274167", "createdAt": "2020-11-28T03:19:36Z", "commit": {"oid": "d3d0460bb3afbe9bdce6fb2c18d9e719f3af6778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzoxOTozNlrOH7MMjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzoxOTozNlrOH7MMjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyNzg1Mg==", "bodyText": "CatchAndPrintStackTrace:  Logging or rethrowing exceptions should usually be preferred to catching and calling printStackTrace", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r531827852", "createdAt": "2020-11-28T03:19:36Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public LoggerConfig getLogbackConfig() {\n+        return logbackConfig;\n+    }\n+\n+    public LoggerConfig getLog4jConfig() {\n+        return log4jConfig;\n+    }\n+\n+    public LoggerConfig getLog4j2Config() {\n+        return log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has yaml file\n+            File configFile;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logconfig.yaml\");\n+            } catch (AgentPackageNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            // not has config file, make config default\n+            if (!configFile.exists()) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                logbackConfig = new LoggerConfig(\"logback\", packages, LogLevel.ERROR);\n+                log4jConfig = new LoggerConfig(\"log4j\", packages, LogLevel.ERROR);\n+                log4j2Config = new LoggerConfig(\"log4j2\", packages, LogLevel.ERROR);\n+            } else {\n+                // use config file to init ContextConfig\n+                FileInputStream configFileInputStream = null;\n+                try {\n+                    configFileInputStream = new FileInputStream(configFile);\n+                    List<LoggerConfig> configs = parseConfigFile(configFileInputStream);\n+                    // initialization of variables which are described in config file\n+                    for (LoggerConfig loggerConfig : configs) {\n+                        if (\"logback\".equals(loggerConfig.getName())) {\n+                            logbackConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j\".equals(loggerConfig.getName())) {\n+                            log4jConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j2\".equals(loggerConfig.getName())) {\n+                            log4j2Config = fillLoggerConfig(loggerConfig);\n+                        } else {\n+                            throw new IllegalArgumentException();\n+                        }\n+                    }\n+                } catch (FileNotFoundException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d0460bb3afbe9bdce6fb2c18d9e719f3af6778"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae15edb91aadea41ddfe4a5b483bca0af5c0f8f", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/9ae15edb91aadea41ddfe4a5b483bca0af5c0f8f", "committedDate": "2020-11-28T07:46:51Z", "message": "translated from log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45339bc1ea4edb7cfdbe54839f142ff2523731d6", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/45339bc1ea4edb7cfdbe54839f142ff2523731d6", "committedDate": "2020-11-28T07:54:02Z", "message": "impl logger scenarios"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c56a540c244e6397937920dc1494c3d9988f0fba", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/c56a540c244e6397937920dc1494c3d9988f0fba", "committedDate": "2020-11-28T08:00:57Z", "message": "don't work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/1e00ea59342a78b4e187e84afc3c37d468399924", "committedDate": "2020-11-28T13:09:29Z", "message": "Merge pull request #8 from BFergerson/master\n\nImpl logger test scenarios"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzg1MDIw", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540385020", "createdAt": "2020-11-28T16:16:34Z", "commit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjoxNjozNFrOH7aKfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNjozMDoxNlrOH7aQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjcwMQ==", "bodyText": "The indentations of this file is weird.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532056701", "createdAt": "2020-11-28T16:16:34Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1Njc4MQ==", "bodyText": "all scopes of these should be provided", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532056781", "createdAt": "2020-11-28T16:17:23Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<parent>\n+\t\t<groupId>org.apache.skywalking</groupId>\n+\t\t<artifactId>apm-sdk-plugin</artifactId>\n+\t\t<version>8.3.0-SNAPSHOT</version>\n+\t</parent>\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<artifactId>apm-logger-plugin</artifactId>\n+\t<packaging>jar</packaging>\n+\n+\t<properties>\n+\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+\t\t<java.version>1.8</java.version>\n+\t\t<logback.classic.version>1.3.0-alpha5</logback.classic.version>\n+\t\t<junite.version>4.13</junite.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>log4j</groupId>\n+\t\t\t<artifactId>log4j</artifactId>\n+\t\t\t<version>1.2.17</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.logging.log4j</groupId>\n+\t\t\t<artifactId>log4j-core</artifactId>\n+\t\t\t<version>2.8.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>ch.qos.logback</groupId>\n+\t\t\t<artifactId>logback-classic</artifactId>\n+\t\t\t<version>${logback.classic.version}</version>\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NjgxNg==", "bodyText": "why we need this, it should be included in the parent module somewhere?", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532056816", "createdAt": "2020-11-28T16:17:51Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<parent>\n+\t\t<groupId>org.apache.skywalking</groupId>\n+\t\t<artifactId>apm-sdk-plugin</artifactId>\n+\t\t<version>8.3.0-SNAPSHOT</version>\n+\t</parent>\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<artifactId>apm-logger-plugin</artifactId>\n+\t<packaging>jar</packaging>\n+\n+\t<properties>\n+\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+\t\t<java.version>1.8</java.version>\n+\t\t<logback.classic.version>1.3.0-alpha5</logback.classic.version>\n+\t\t<junite.version>4.13</junite.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>log4j</groupId>\n+\t\t\t<artifactId>log4j</artifactId>\n+\t\t\t<version>1.2.17</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.logging.log4j</groupId>\n+\t\t\t<artifactId>log4j-core</artifactId>\n+\t\t\t<version>2.8.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>ch.qos.logback</groupId>\n+\t\t\t<artifactId>logback-classic</artifactId>\n+\t\t\t<version>${logback.classic.version}</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit</groupId>\n+\t\t\t<artifactId>junit</artifactId>\n+\t\t\t<version>${junite.version}</version>\n+\t\t</dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzA4MQ==", "bodyText": "license header", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532057081", "createdAt": "2020-11-28T16:20:16Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/config/logconfig.yaml", "diffHunk": "@@ -0,0 +1,12 @@\n+- name: \"log4j\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzIzMw==", "bodyText": "Put this file into a sub-directory (e.g. /config/logger-plugin/logconfig.yaml)?", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532057233", "createdAt": "2020-11-28T16:21:44Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/config/logconfig.yaml", "diffHunk": "@@ -0,0 +1,12 @@\n+- name: \"log4j\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzA4MQ=="}, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzUzMw==", "bodyText": "do we really want to introduce YAMLs into the agent plugin? It seems this kind of file content can be represented in a simple format so that we don't need to shade a new dependency\nlog4j.packages=foo.bar,foo.baz  # csv\nlog4j.level=error\nlog4j2.packages=*\nlog4j2.level=error", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532057533", "createdAt": "2020-11-28T16:24:32Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/config/logconfig.yaml", "diffHunk": "@@ -0,0 +1,12 @@\n+- name: \"log4j\"\n+  packages:\n+    - \"*\"\n+  level: \"error\"\n+- name: \"log4j2\"\n+  packages:\n+    - \"*\"\n+  level: \"error\"\n+- name: \"logback\"\n+  packages:\n+    - \"*\"\n+  level: \"error\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzYzNw==", "bodyText": "Remove or uncomment", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532057637", "createdAt": "2020-11-28T16:25:30Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/test/java/org/apache/skywalking/apm/plugin/logger/logback/TestContextConfig.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger.logback;\n+\n+import org.junit.Test;\n+\n+public class TestContextConfig {\n+    @Test\n+    public void testGetInstance() {\n+//        ContextConfig config = ContextConfig.getInstance();\n+//        LoggerConfig logbackConfig = config.getLogbackConfig();\n+//        LoggerConfig log4j2Config = config.getLog4j2Config();\n+//\n+//        //test logback\n+//        assertEquals(logbackConfig.getName(), \"logback\");\n+//        assertEquals(logbackConfig.getExpression(), \"Regular expression\");\n+//        assertEquals(logbackConfig.getLevel(), Level.ERROR);\n+//        assertEquals(logbackConfig.getPackages().get(0).toString(), \"*\");\n+//        assertEquals(logbackConfig.getPattern(), \"%msg%n\");\n+\n+//        //test log4j\n+//        assertEquals(log4j2Config.getName(), \"log4j2\");\n+//        assertEquals(log4j2Config.getExpression(), \"Regular expression\");\n+//        assertEquals(log4j2Config.getLevel(), Level.TRACE);\n+//        assertEquals(log4j2Config.getPattern(), \"%date %level [%thread] %logger{10} [%file:%line] %msg%n\");\n+//        assertEquals(log4j2Config.getPackages().get(0), \"package1\");\n+//        assertEquals(log4j2Config.getPackages().get(1), \"package2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzgwOQ==", "bodyText": "use Lombok annotations to remove boilerplate codes", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532057809", "createdAt": "2020-11-28T16:27:01Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public LoggerConfig getLogbackConfig() {\n+        return logbackConfig;\n+    }\n+\n+    public LoggerConfig getLog4jConfig() {\n+        return log4jConfig;\n+    }\n+\n+    public LoggerConfig getLog4j2Config() {\n+        return log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has yaml file\n+            File configFile;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logconfig.yaml\");\n+            } catch (AgentPackageNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            // not has config file, make config default\n+            if (!configFile.exists()) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                logbackConfig = new LoggerConfig(\"logback\", packages, LogLevel.ERROR);\n+                log4jConfig = new LoggerConfig(\"log4j\", packages, LogLevel.ERROR);\n+                log4j2Config = new LoggerConfig(\"log4j2\", packages, LogLevel.ERROR);\n+            } else {\n+                // use config file to init ContextConfig\n+                FileInputStream configFileInputStream = null;\n+                try {\n+                    configFileInputStream = new FileInputStream(configFile);\n+                    List<LoggerConfig> configs = parseConfigFile(configFileInputStream);\n+                    // initialization of variables which are described in config file\n+                    for (LoggerConfig loggerConfig : configs) {\n+                        if (\"logback\".equals(loggerConfig.getName())) {\n+                            logbackConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j\".equals(loggerConfig.getName())) {\n+                            log4jConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j2\".equals(loggerConfig.getName())) {\n+                            log4j2Config = fillLoggerConfig(loggerConfig);\n+                        } else {\n+                            throw new IllegalArgumentException();\n+                        }\n+                    }\n+                } catch (FileNotFoundException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    //close input stream\n+                    if (configFileInputStream != null) {\n+                        try {\n+                            configFileInputStream.close();\n+                        } catch (IOException e) {\n+                            e.printStackTrace();\n+                        }\n+                    }\n+                }\n+                //creat ContextConfig object\n+            }\n+            return new ContextConfig(logbackConfig, log4jConfig, log4j2Config);\n+        }\n+\n+        /**\n+         * @param fileInputStream the input stream of config file\n+         * @return the list of configuration file analysis result objects\n+         */\n+        private static List<LoggerConfig> parseConfigFile(FileInputStream fileInputStream) {\n+            Yaml yaml = new Yaml();\n+            List<LoggerConfig> configs = new ArrayList<>();\n+            for (Object o : (List) yaml.loadAll(fileInputStream).iterator().next()) {\n+                if (o instanceof Map) {\n+                    Map configMap = (Map) o;\n+                    LoggerConfig loggerConfig = new LoggerConfig();\n+                    loggerConfig.setName((String) configMap.get(\"name\"));\n+\n+                    if (configMap.get(\"level\") != null) {\n+                        loggerConfig.setLevel(LogLevel.valueOf(configMap.get(\"level\").toString().toUpperCase()));\n+                    }\n+                    if (configMap.get(\"packages\") instanceof List) {\n+                        loggerConfig.setPackages((List<String>) configMap.get(\"packages\"));\n+                    }\n+                    configs.add(loggerConfig);\n+                } else {\n+                    return null;\n+                }\n+            }\n+            return configs;\n+        }\n+\n+        /**\n+         * @param src instance which need to fill\n+         * @return object that has been filled with default values\n+         */\n+        private static LoggerConfig fillLoggerConfig(LoggerConfig src) {\n+            if (src == null) {\n+                return null;\n+            }\n+            if (src.getLevel() == null) {\n+                src.setLevel(LogLevel.ERROR);\n+            }\n+            if (src.getPackages() == null) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                src.setPackages(packages);\n+            }\n+            return src;\n+        }\n+    }\n+\n+    static class LoggerConfig implements Cloneable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1ODEyNQ==", "bodyText": "use try-with-resouces?", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532058125", "createdAt": "2020-11-28T16:30:16Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public LoggerConfig getLogbackConfig() {\n+        return logbackConfig;\n+    }\n+\n+    public LoggerConfig getLog4jConfig() {\n+        return log4jConfig;\n+    }\n+\n+    public LoggerConfig getLog4j2Config() {\n+        return log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has yaml file\n+            File configFile;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logconfig.yaml\");\n+            } catch (AgentPackageNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            // not has config file, make config default\n+            if (!configFile.exists()) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                logbackConfig = new LoggerConfig(\"logback\", packages, LogLevel.ERROR);\n+                log4jConfig = new LoggerConfig(\"log4j\", packages, LogLevel.ERROR);\n+                log4j2Config = new LoggerConfig(\"log4j2\", packages, LogLevel.ERROR);\n+            } else {\n+                // use config file to init ContextConfig\n+                FileInputStream configFileInputStream = null;\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDQ0NjMz", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540444633", "createdAt": "2020-11-29T03:39:54Z", "commit": {"oid": "1e00ea59342a78b4e187e84afc3c37d468399924"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "272500af2a4959d33bef7f556174c494bf22efe7", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/272500af2a4959d33bef7f556174c494bf22efe7", "committedDate": "2020-11-29T13:03:39Z", "message": "fix some question of file format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "216d3b109b2844b158c612b2f75eafb5cd050497", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/216d3b109b2844b158c612b2f75eafb5cd050497", "committedDate": "2020-11-29T15:08:40Z", "message": "Refactor ContextConfig:\n1. use loggerConfig.properties as a configure file\n2. use try-with-resources\n3. use lombok"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/dc22822b6ebca7f1db48b8beacbc8552d169ed81", "committedDate": "2020-11-29T15:17:41Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDk0MDc3", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540494077", "createdAt": "2020-11-29T16:14:11Z", "commit": {"oid": "216d3b109b2844b158c612b2f75eafb5cd050497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNjoxNDoxMVrOH7kzgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNjoxNDoxMVrOH7kzgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzMTA0Mg==", "bodyText": "NULL_DEREFERENCE:  object configFile last assigned on line 65 could be null and is dereferenced at line 72.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532231042", "createdAt": "2020-11-29T16:14:11Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import lombok.Setter;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+@Getter\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has yaml file\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            File configFile = null;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logger-plugin/logconfig.properties\");\n+            } catch (AgentPackageNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+            // not has config file, make config default\n+            if (!configFile.exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216d3b109b2844b158c612b2f75eafb5cd050497"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cadbc3aa669f19d1ce795870c572f95e0375c9e", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/6cadbc3aa669f19d1ce795870c572f95e0375c9e", "committedDate": "2020-11-30T01:59:48Z", "message": "Refactor ContextConfig:log exception instead of calling printStackTrace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTY4MjIy", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540568222", "createdAt": "2020-11-30T02:47:15Z", "commit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo0NzoxNVrOH7qP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo0NzoxNVrOH7qP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMDIwOQ==", "bodyText": "Doesn't need to be clonable (nothing clones it).", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532320209", "createdAt": "2020-11-30T02:47:15Z", "author": {"login": "BFergerson"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import lombok.Setter;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+@Getter\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has yaml file\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            File configFile = null;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logger-plugin/logconfig.properties\");\n+            } catch (AgentPackageNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+            // not has config file, make config default\n+            if (!configFile.exists()) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                logbackConfig = new LoggerConfig(\"logback\", packages, LogLevel.ERROR);\n+                log4jConfig = new LoggerConfig(\"log4j\", packages, LogLevel.ERROR);\n+                log4j2Config = new LoggerConfig(\"log4j2\", packages, LogLevel.ERROR);\n+            } else {\n+                // use config file to init ContextConfig\n+                try (FileInputStream configFileInputStream = new FileInputStream(configFile)) {\n+                    List<LoggerConfig> configs = parseConfigFile(configFileInputStream);\n+                    // initialization of variables which are described in config file\n+                    for (LoggerConfig loggerConfig : configs) {\n+                        if (\"logback\".equals(loggerConfig.getName())) {\n+                            logbackConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j\".equals(loggerConfig.getName())) {\n+                            log4jConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j2\".equals(loggerConfig.getName())) {\n+                            log4j2Config = fillLoggerConfig(loggerConfig);\n+                        } else {\n+                            throw new IllegalArgumentException();\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+                //creat ContextConfig object\n+            }\n+            return new ContextConfig(logbackConfig, log4jConfig, log4j2Config);\n+        }\n+\n+        /**\n+         * @param fileInputStream the input stream of config file\n+         * @return the list of configuration file analysis result objects\n+         */\n+        private static List<LoggerConfig> parseConfigFile(FileInputStream fileInputStream) throws IOException {\n+            Properties p = new Properties();\n+            p.load(fileInputStream);\n+            List<LoggerConfig> configs = new ArrayList<>();\n+            LoggerConfig logback, log4j, log4j2;\n+            logback = fillPackageAndLevel(p.getProperty(\"logback.packages\"), p.getProperty(\"logback.level\"));\n+            log4j = fillPackageAndLevel(p.getProperty(\"log4j.packages\"), p.getProperty(\"log4j.level\"));\n+            log4j2 = fillPackageAndLevel(p.getProperty(\"log4j2.packages\"), p.getProperty(\"log4j2.level\"));\n+            if (logback != null) {\n+                logback.setName(\"logback\");\n+                configs.add(logback);\n+            }\n+            if (log4j != null) {\n+                log4j.setName(\"log4j\");\n+                configs.add(log4j);\n+            }\n+            if (log4j2 != null) {\n+                log4j2.setName(\"log4j2\");\n+                configs.add(log4j2);\n+            }\n+            return configs;\n+        }\n+\n+        private static LoggerConfig fillPackageAndLevel(String packages, String level) {\n+            LoggerConfig loggerConfig = null;\n+            if (packages != null || level != null) {\n+                loggerConfig = new LoggerConfig();\n+                if (packages != null) {\n+                    loggerConfig.setPackages(splitPackages(packages));\n+                }\n+                if (level != null) {\n+                    loggerConfig.setLevel(LogLevel.valueOf(level.toUpperCase()));\n+                }\n+            }\n+            return loggerConfig;\n+        }\n+\n+        private static List<String> splitPackages(String packages) {\n+            return Arrays.asList(packages.split(\",\"));\n+        }\n+\n+        /**\n+         * @param src instance which need to fill\n+         * @return object that has been filled with default values\n+         */\n+        private static LoggerConfig fillLoggerConfig(LoggerConfig src) {\n+            if (src == null) {\n+                return null;\n+            }\n+            if (src.getLevel() == null) {\n+                src.setLevel(LogLevel.ERROR);\n+            }\n+            if (src.getPackages() == null) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                src.setPackages(packages);\n+            }\n+            return src;\n+        }\n+    }\n+\n+    @Getter\n+    @Setter\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    static class LoggerConfig implements Cloneable {\n+        private String name;\n+        private List<String> packages;\n+        private LogLevel level;\n+\n+        /**\n+         * Encapsulate the obtained log information into a map\n+         *\n+         * @param loggerName the name of log system,eg:logback\n+         * @param level      which level of log need to recorder\n+         * @param args       the params of log\n+         * @return a message map\n+         */\n+        public Map<String, String> toMessageMap(String loggerName, String level, Object... args) {\n+            Map<String, String> messageMap = new HashMap<>();\n+            messageMap.put(\"log.kind\", loggerName);\n+            messageMap.put(\"event\", level);\n+            int paramStart = 2;\n+            // like `warn(String format, Object arg)`\n+            if (args[0] instanceof String) {\n+                paramStart = 1;\n+                messageMap.put(\"message\", args[0].toString());\n+            } else {\n+                messageMap.put(\"message\", args[1].toString());\n+            }\n+            //build log\n+            for (int i = paramStart; i < args.length; i++) {\n+                String key = \"param.\" + (i - paramStart + 1);\n+                messageMap.put(key, args[i].toString());\n+            }\n+            return messageMap;\n+        }\n+\n+        @Override\n+        protected Object clone() throws CloneNotSupportedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTY4NDI5", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540568429", "createdAt": "2020-11-30T02:48:09Z", "commit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo0ODowOVrOH7qQhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo0ODowOVrOH7qQhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMDM5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            log4j.packages=org.apache.skywalking,test\n          \n          \n            \n            log4j.packages=*", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532320391", "createdAt": "2020-11-30T02:48:09Z", "author": {"login": "BFergerson"}, "path": "apm-sniffer/config/logger-plugin/logconfig.properties", "diffHunk": "@@ -0,0 +1,23 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+#\n+log4j.packages=org.apache.skywalking,test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTY4NzQ4", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540568748", "createdAt": "2020-11-30T02:49:28Z", "commit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo0OToyOFrOH7qRjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo0OToyOFrOH7qRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMDY1Mg==", "bodyText": "I wasn't able to get these versions to test correctly. I think it has to do with the dependencies Spring Boot pulls in though and not that the plugin doesn't work for them.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532320652", "createdAt": "2020-11-30T02:49:28Z", "author": {"login": "BFergerson"}, "path": "test/plugin/scenarios/logger-log4j2-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,31 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.14.0\n+2.13.0\n+2.12.0\n+2.11.0\n+2.10.0\n+2.9.0\n+#2.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc22822b6ebca7f1db48b8beacbc8552d169ed81"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29e03333d548ae7ebcdb0ae6873e84ffa33af0e5", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/29e03333d548ae7ebcdb0ae6873e84ffa33af0e5", "committedDate": "2020-11-30T03:16:23Z", "message": "test for logger-plugin(4545)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTc3OTE3", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540577917", "createdAt": "2020-11-30T03:26:20Z", "commit": {"oid": "29e03333d548ae7ebcdb0ae6873e84ffa33af0e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzoyNjoyMFrOH7qxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzoyNjoyMFrOH7qxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyODg4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <version>8.3.0-SNAPSHOT</version>\n          \n          \n            \n                    <version>8.4.0-SNAPSHOT</version>", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532328880", "createdAt": "2020-11-30T03:26:20Z", "author": {"login": "BFergerson"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.apache.skywalking</groupId>\n+        <artifactId>apm-sdk-plugin</artifactId>\n+        <version>8.3.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e03333d548ae7ebcdb0ae6873e84ffa33af0e5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24545d92faa3c2718eede4087d5c545fc23ad000", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/24545d92faa3c2718eede4087d5c545fc23ad000", "committedDate": "2020-11-30T03:26:28Z", "message": "Update apm-sniffer/apm-sdk-plugin/logger-plugin/pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTc5Njc3", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540579677", "createdAt": "2020-11-30T03:33:41Z", "commit": {"oid": "24545d92faa3c2718eede4087d5c545fc23ad000"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzozMzo0MlrOH7q3-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzozMzo0MlrOH7q3-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMDQ5MA==", "bodyText": "From the performance perspective, this is not a good practice. You have to check the method name repeatedly on the runtime. The better way to check this on the bootstrap stage, intercepting the necessary methods.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532330490", "createdAt": "2020-11-30T03:33:42Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/define/Log4j2LoggerInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+public class Log4j2LoggerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+    private static final String ENHANCE_CLASS = \"org.apache.logging.log4j.spi.AbstractLogger\";\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.logger.Log4j2LoggerInterceptor\";\n+    private static final String[] INTERCEPT_METHODS = {\"trace\", \"debug\", \"info\", \"error\", \"warn\", \"fatal\"};\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(INTERCEPT_METHODS[0])\n+                                .or(named(INTERCEPT_METHODS[1]))\n+                                .or(named(INTERCEPT_METHODS[2]))\n+                                .or(named(INTERCEPT_METHODS[3]))\n+                                .or(named(INTERCEPT_METHODS[4]))\n+                                .or(named(INTERCEPT_METHODS[5]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24545d92faa3c2718eede4087d5c545fc23ad000"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTgwMjUx", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-540580251", "createdAt": "2020-11-30T03:36:12Z", "commit": {"oid": "24545d92faa3c2718eede4087d5c545fc23ad000"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzozNjoxMlrOH7q6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzozNjoxMlrOH7q6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTExMA==", "bodyText": "In the real world coding, there is a log level config in the app code level, such as in log4j.xml. What do you expect if it mismatched w/ plugin's config?\nIn the current implementation, you are overriding it. Is this a good way? @vcjmhg @BFergerson", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r532331110", "createdAt": "2020-11-30T03:36:12Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/Log4j2LoggerInterceptor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+public class Log4j2LoggerInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final ContextConfig.LoggerConfig CONFIG = ContextConfig.getInstance().getLog4j2Config();\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        String loggerName = objInst.getSkyWalkingDynamicField().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24545d92faa3c2718eede4087d5c545fc23ad000"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1baa4fba4ec6666fbcb3847dc645ab71fa43fd", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/8b1baa4fba4ec6666fbcb3847dc645ab71fa43fd", "committedDate": "2020-11-30T05:31:49Z", "message": "update documents for Logger-plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fffaf3e65ad8bacf298d36ccd088b8132640a3ae", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/fffaf3e65ad8bacf298d36ccd088b8132640a3ae", "committedDate": "2020-11-30T08:24:55Z", "message": "determine which insertion points to set according to the method category in the configuration file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0aa895bc6959db8cfc1960475563d8774b22d60", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/c0aa895bc6959db8cfc1960475563d8774b22d60", "committedDate": "2020-11-30T09:35:52Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64086dd8143909324167143f22d08ab9b6b421a9", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/64086dd8143909324167143f22d08ab9b6b421a9", "committedDate": "2020-11-30T23:19:23Z", "message": "simplify, fix spelling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca09b5d2328455db791bd56fc17bfa49539e089", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/2ca09b5d2328455db791bd56fc17bfa49539e089", "committedDate": "2020-12-01T00:02:31Z", "message": "simplify, fix spelling, impl log level checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f220d1232c985387d2aeb437e9f139996dbeba", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/29f220d1232c985387d2aeb437e9f139996dbeba", "committedDate": "2020-12-01T00:09:09Z", "message": "Merge pull request #1 from vcjmhg/f-log\n\nmerge up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0630f53941f7181eca4338a2156717717b2a02a8", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/0630f53941f7181eca4338a2156717717b2a02a8", "committedDate": "2020-12-01T00:09:18Z", "message": "Merge branch 'master' of https://github.com/BFergerson/skywalking into bf-master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61d563d4ff3f1bebf86b7940d5a0f6697bf656c", "author": {"user": {"login": "BFergerson", "name": "Brandon Fergerson"}}, "url": "https://github.com/apache/skywalking/commit/b61d563d4ff3f1bebf86b7940d5a0f6697bf656c", "committedDate": "2020-12-01T00:45:38Z", "message": "don't need"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "546ebaca43a1f7ef6086f7a5cce507e0504f0240", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/546ebaca43a1f7ef6086f7a5cce507e0504f0240", "committedDate": "2020-12-01T02:26:12Z", "message": "Merge pull request #9 from BFergerson/master\n\nSome changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1afbda41fc180226ec2f96ab7875dff1c369159b", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/1afbda41fc180226ec2f96ab7875dff1c369159b", "committedDate": "2020-12-01T02:26:47Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85669f1095532a741d2ebabc12610cace0a6e774", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/85669f1095532a741d2ebabc12610cace0a6e774", "committedDate": "2020-12-01T05:05:16Z", "message": "remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f85c4352b62963d9e2d15197a4172ed351639cde", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/f85c4352b62963d9e2d15197a4172ed351639cde", "committedDate": "2020-12-02T01:46:01Z", "message": "remove logger-plugin project into optional-plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04c476570525b7dd4e1e12f76273c857fa273a68", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/04c476570525b7dd4e1e12f76273c857fa273a68", "committedDate": "2020-12-02T01:48:12Z", "message": "change the running mode of logger-plugin testcase(contains logback-scenario,log4j-scenario,log-scenario)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff2a5d7a00d9c2f318c4f54709eb8c26106a19b", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/5ff2a5d7a00d9c2f318c4f54709eb8c26106a19b", "committedDate": "2020-12-02T02:34:18Z", "message": "move logger-plugin project into optional-plugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3083d936423c29f0760da11bbbfe417114c5a1b", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/c3083d936423c29f0760da11bbbfe417114c5a1b", "committedDate": "2020-12-02T02:34:18Z", "message": "change the running mode of logger-plugin testcase(contains logback-scenario,log4j-scenario,log-scenario)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6b4707ebf0d2f03b4d6dad7958946393d15c6e5", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/c6b4707ebf0d2f03b4d6dad7958946393d15c6e5", "committedDate": "2020-12-02T02:36:46Z", "message": "Merge remote-tracking branch 'origin/f-log' into f-log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTAwNDY4", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-542500468", "createdAt": "2020-12-02T05:01:51Z", "commit": {"oid": "c6b4707ebf0d2f03b4d6dad7958946393d15c6e5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTowMTo1MVrOH9KjSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNTowMjowMVrOH9Kjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg5ODA1OA==", "bodyText": "unused", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r533898058", "createdAt": "2020-12-02T05:01:51Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/logger-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.apache.skywalking</groupId>\n+        <artifactId>optional-plugins</artifactId>\n+        <version>8.4.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>apm-logger-plugin</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <java.version>1.8</java.version>\n+        <logback.classic.version>1.3.0-alpha5</logback.classic.version>\n+        <junite.version>4.13</junite.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b4707ebf0d2f03b4d6dad7958946393d15c6e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg5ODEyNw==", "bodyText": "scope provided", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r533898127", "createdAt": "2020-12-02T05:02:01Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/optional-plugins/logger-plugin/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one or more\n+  ~ contributor license agreements.  See the NOTICE file distributed with\n+  ~ this work for additional information regarding copyright ownership.\n+  ~ The ASF licenses this file to You under the Apache License, Version 2.0\n+  ~ (the \"License\"); you may not use this file except in compliance with\n+  ~ the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  ~\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.apache.skywalking</groupId>\n+        <artifactId>optional-plugins</artifactId>\n+        <version>8.4.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>apm-logger-plugin</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <java.version>1.8</java.version>\n+        <logback.classic.version>1.3.0-alpha5</logback.classic.version>\n+        <junite.version>4.13</junite.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>log4j</groupId>\n+            <artifactId>log4j</artifactId>\n+            <version>1.2.17</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-core</artifactId>\n+            <version>2.8.1</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b4707ebf0d2f03b4d6dad7958946393d15c6e5"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "397389601b6dcbb58a678512ea40a8478c90e600", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/397389601b6dcbb58a678512ea40a8478c90e600", "committedDate": "2020-12-02T05:48:15Z", "message": "remove unused dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e2c747b6fb6868d52cf07f36009d0250b0d147", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/21e2c747b6fb6868d52cf07f36009d0250b0d147", "committedDate": "2020-12-04T03:55:57Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ba3a93727caa8d8277ed4ae5d2156cd3fc4966", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/94ba3a93727caa8d8277ed4ae5d2156cd3fc4966", "committedDate": "2020-12-05T06:17:20Z", "message": "add support for logger framework(logback,log4j,log4j2)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/5ab7fb8406ac588c6d9e9cf3214276ff28ee027d", "committedDate": "2020-12-05T07:27:30Z", "message": "change Plugin-list.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTAyMTQ5", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545502149", "createdAt": "2020-12-05T08:29:31Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODoyOTozMlrOH_s1Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODoyOTozMlrOH_s1Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU1NjgxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [Plugin of logger(logback, log4j, log4j2)](agent-optional-plugins/Logger-plugin.md) in the optional plugin folder. For the performance perspective, please only activate it when you need add log(from logback,log4j or log4j2) to span log event.\n          \n          \n            \n            * [Plugin of logger(logback, log4j, log4j2)](agent-optional-plugins/Logger-plugin.md) in the optional plugin folder. For the performance perspective, please only activate it when you need to add logs(from logback,log4j or log4j2) to the span log event. **Collecting too many logs would impact the performance of the agent and your service seriously. Recommend to collect necessary logs only.**", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536556810", "createdAt": "2020-12-05T08:29:32Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -175,6 +175,7 @@ Now, we have the following known optional plugins.\n * [Plugin of Kotlin coroutine](agent-optional-plugins/Kotlin-Coroutine-plugin.md) provides the tracing across coroutines automatically. As it will add local spans to all across routines scenarios, Please assess the performance impact.\n * Plugin of quartz-scheduler-2.x in the optional plugin folder. The reason for being an optional plugin is, many task scheduling systems are based on quartz-scheduler, this will cause duplicate tracing and link different sub-tasks as they share the same quartz level trigger, such as ElasticJob.\n * Plugin of spring-webflux-5.x in the optional plugin folder. Please only activate this plugin when you use webflux alone as a web container. If you are using SpringMVC 5 or Spring Gateway, you don't need this plugin.\n+* [Plugin of logger(logback, log4j, log4j2)](agent-optional-plugins/Logger-plugin.md) in the optional plugin folder. For the performance perspective, please only activate it when you need add log(from logback,log4j or log4j2) to span log event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTAzNjUz", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545503653", "createdAt": "2020-12-05T08:30:37Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMDozN1rOH_s4KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMDozN1rOH_s4KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU1NzYwOQ==", "bodyText": "According to this, we should not have the default logconfig.properties in the distribution.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536557609", "createdAt": "2020-12-05T08:30:37Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTA1MDkx", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545505091", "createdAt": "2020-12-05T08:31:42Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMTo0MlrOH_s7Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMTo0MlrOH_s7Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU1ODM1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.\n          \n          \n            \n            1. SkyWalking opened the adaptor(bridge) between tracing kernel and log frameworks, including `log4j`, `log4j2`, `logback`.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536558354", "createdAt": "2020-12-05T08:31:42Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTA2MDg5", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545506089", "createdAt": "2020-12-05T08:32:24Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMjoyNFrOH_s9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMjoyNFrOH_s9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU1ODg1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Only the log information of the `error` level will be processed, and the log information lower than the `error` level will be ignored, including `trace`, `debug`, `info`, `warn`.\n          \n          \n            \n            2. Only collect logs at the `error` level, others would be ignored, including `trace`, `debug`, `info`, `warn`.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536558852", "createdAt": "2020-12-05T08:32:24Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.\n+2. Only the log information of the `error` level will be processed, and the log information lower than the `error` level will be ignored, including `trace`, `debug`, `info`, `warn`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTA3MTE1", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545507115", "createdAt": "2020-12-05T08:33:09Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMzowOVrOH_s_RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMzowOVrOH_s_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU1OTQyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. It will match all packages.\n          \n          \n            \n            3. Wouldn't filter the logs by the package name.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536559428", "createdAt": "2020-12-05T08:33:09Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.\n+2. Only the log information of the `error` level will be processed, and the log information lower than the `error` level will be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. It will match all packages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTA3NDgy", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545507482", "createdAt": "2020-12-05T08:33:25Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMzoyNVrOH_tABQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozMzoyNVrOH_tABQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU1OTYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Field description\n          \n          \n            \n            # Property description", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536559621", "createdAt": "2020-12-05T08:33:25Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.\n+2. Only the log information of the `error` level will be processed, and the log information lower than the `error` level will be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. It will match all packages.\n+\n+# Field description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTA4ODU2", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545508856", "createdAt": "2020-12-05T08:34:28Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozNDoyOVrOH_tCqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozNDoyOVrOH_tCqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU2MDI5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When matching multiple packages, the names of different packages should be separated by commas.\n          \n          \n            \n            When matching multiple packages, the names of different packages should be separated by the comma.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536560298", "createdAt": "2020-12-05T08:34:29Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.\n+2. Only the log information of the `error` level will be processed, and the log information lower than the `error` level will be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. It will match all packages.\n+\n+# Field description\n+\n+## packages\n+\n+**package attribute**: Specify the package name of the log that needs log conversion.  **The default value is `*` , and it will match all packages.**\n+\n+packages value:\n+\n+* the name of package, eg: `org.apache.skywalking`\n+* `*`:match all \n+\n+**Notice:**\n+\n+When matching multiple packages, the names of different packages should be separated by commas.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTEyMDc2", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545512076", "createdAt": "2020-12-05T08:36:45Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozNjo0NVrOH_tJKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozNjo0NVrOH_tJKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU2MTk2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The specific sequence of log levels from low to high is as follows:\n          \n          \n            \n            The hierarchy order of log levels from low to high is as follows:", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536561962", "createdAt": "2020-12-05T08:36:45Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. It will process information from all logging systems, including `log4j`, `log4j2`, `logback`.\n+2. Only the log information of the `error` level will be processed, and the log information lower than the `error` level will be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. It will match all packages.\n+\n+# Field description\n+\n+## packages\n+\n+**package attribute**: Specify the package name of the log that needs log conversion.  **The default value is `*` , and it will match all packages.**\n+\n+packages value:\n+\n+* the name of package, eg: `org.apache.skywalking`\n+* `*`:match all \n+\n+**Notice:**\n+\n+When matching multiple packages, the names of different packages should be separated by commas.\n+\n+## level\n+\n+**level attribute** : The level of the log for conversion. **By default it is `error` level**.\n+\n+The specific sequence of log levels from low to high is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTEzNTcz", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545513573", "createdAt": "2020-12-05T08:37:50Z", "commit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozNzo1MFrOH_tMSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODozNzo1MFrOH_tMSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU2Mjc2MA==", "bodyText": "I think we miss a part about how to disable one log framework, such as opening the bridge for log4j only.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536562760", "createdAt": "2020-12-05T08:37:50Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,49 @@\n+# Overview", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ab7fb8406ac588c6d9e9cf3214276ff28ee027d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d9136657851a422b739980f5cf2fb9ae4851ad", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/68d9136657851a422b739980f5cf2fb9ae4851ad", "committedDate": "2020-12-05T08:40:47Z", "message": "Update docs/en/setup/service-agent/java-agent/README.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e1567bbde9b629c297ff656935509733fa19f2", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/28e1567bbde9b629c297ff656935509733fa19f2", "committedDate": "2020-12-05T08:41:40Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3494d57c3e5b8bf09e772829dec7737ee16329a", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/a3494d57c3e5b8bf09e772829dec7737ee16329a", "committedDate": "2020-12-05T08:42:01Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719f3e0a6e3373e22dbc4dbde63c857af2a26664", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/719f3e0a6e3373e22dbc4dbde63c857af2a26664", "committedDate": "2020-12-05T08:44:15Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778bfa9206dfaaac0c3037ab162abd694a694f60", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/778bfa9206dfaaac0c3037ab162abd694a694f60", "committedDate": "2020-12-05T08:44:44Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "466788ab1678a634d9dc8a9c0279e54646437f94", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/466788ab1678a634d9dc8a9c0279e54646437f94", "committedDate": "2020-12-05T08:45:21Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3f9a05dce363aace5389ef3d4af7fc7871ba0fc", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/f3f9a05dce363aace5389ef3d4af7fc7871ba0fc", "committedDate": "2020-12-05T08:45:46Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a934095f22c3f4b262e687b7e62ee8202ebad91c", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/a934095f22c3f4b262e687b7e62ee8202ebad91c", "committedDate": "2020-12-05T08:47:28Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845d332025028c13107884d1634d31053608f971", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/845d332025028c13107884d1634d31053608f971", "committedDate": "2020-12-05T09:26:33Z", "message": "add use cases for Logger-plugin.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e5310ca7134cf316aa1d76334f98d80a5234b76", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/1e5310ca7134cf316aa1d76334f98d80a5234b76", "committedDate": "2020-12-05T10:12:07Z", "message": "remove default configuration file(logconfig.properties)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTgwNTQz", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545580543", "createdAt": "2020-12-05T11:34:23Z", "commit": {"oid": "1e5310ca7134cf316aa1d76334f98d80a5234b76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMTozNDoyM1rOH_1kUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMTozNDoyM1rOH_1kUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY5OTk4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**\n          \n          \n            \n            By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the default configurations are as following,**", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536699985", "createdAt": "2020-12-05T11:34:23Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the configuration will still be configured with the following default values:**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5310ca7134cf316aa1d76334f98d80a5234b76"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e3cb8b06e5174ecfddad8f080efad9a8b9d8809", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/8e3cb8b06e5174ecfddad8f080efad9a8b9d8809", "committedDate": "2020-12-05T11:37:30Z", "message": "Update docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTgwOTAz", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545580903", "createdAt": "2020-12-05T11:40:19Z", "commit": {"oid": "1e5310ca7134cf316aa1d76334f98d80a5234b76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMTo0MDoxOVrOH_1vPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMTo0MDoxOVrOH_1vPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjcwMjc4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [Plugin of logger(logback, log4j, log4j2)](agent-optional-plugins/Logger-plugin.md) in the optional plugin folder. For the performance perspective, please only activate it when you need to add logs(from logback,log4j or log4j2) to the span log event.\n          \n          \n            \n            * [Plugin of logger(logback, log4j, log4j2)](agent-optional-plugins/Logger-plugin.md) in the optional plugin folder. For the performance perspective, please only activate it when you need to add logs(from logback,log4j, or log4j2) to the span log event. **Notice, collecting logs in the tracing would impact the performance and memory seriously. Only collect necessary logs.**", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536702781", "createdAt": "2020-12-05T11:40:19Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/README.md", "diffHunk": "@@ -175,6 +175,7 @@ Now, we have the following known optional plugins.\n * [Plugin of Kotlin coroutine](agent-optional-plugins/Kotlin-Coroutine-plugin.md) provides the tracing across coroutines automatically. As it will add local spans to all across routines scenarios, Please assess the performance impact.\n * Plugin of quartz-scheduler-2.x in the optional plugin folder. The reason for being an optional plugin is, many task scheduling systems are based on quartz-scheduler, this will cause duplicate tracing and link different sub-tasks as they share the same quartz level trigger, such as ElasticJob.\n * Plugin of spring-webflux-5.x in the optional plugin folder. Please only activate this plugin when you use webflux alone as a web container. If you are using SpringMVC 5 or Spring Gateway, you don't need this plugin.\n+* [Plugin of logger(logback, log4j, log4j2)](agent-optional-plugins/Logger-plugin.md) in the optional plugin folder. For the performance perspective, please only activate it when you need to add logs(from logback,log4j or log4j2) to the span log event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5310ca7134cf316aa1d76334f98d80a5234b76"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8a32091f94b60f9c3962ab7d56437c14199f35", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/0a8a32091f94b60f9c3962ab7d56437c14199f35", "committedDate": "2020-12-05T11:40:25Z", "message": "Update docs/en/setup/service-agent/java-agent/README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ce0c53dede019f7ad1fe06c15fad6f875cfdc837", "committedDate": "2020-12-05T12:38:23Z", "message": "update Supported-list.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTg1NDM5", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545585439", "createdAt": "2020-12-05T12:57:07Z", "commit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMjo1NzowOFrOH_4Gtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMjo1NzowOFrOH_4Gtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc0MTU1OA==", "bodyText": "What would be the exception? Could you point me out? There is string-switch in your codes only", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536741558", "createdAt": "2020-12-05T12:57:08Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config//logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the default configurations are as following,**\n+\n+```properties\n+log4j.packages=*\n+log4j.level=error\n+log4j2.packages=*\n+log4j2.level=error\n+logback.packages=*\n+logback.level=error\n+```\n+\n+The meaning of the above configuration is as follows:\n+\n+1. SkyWalking opened the adaptor(bridge) between tracing kernel and log frameworks, including `log4j`, `log4j2`, `logback`.\n+2. Only collect logs at the `error` level, others would be ignored, including `trace`, `debug`, `info`, `warn`.\n+3. Wouldn't filter the logs by the package name.\n+\n+# Property description\n+\n+## packages\n+\n+**package attribute**: Specify the package name of the log that needs log conversion.  **The default value is `*` , and it will match all packages.**\n+\n+packages value:\n+\n+* the name of package, eg: `org.apache.skywalking`\n+* `*`:match all \n+\n+**Notice:**\n+\n+When matching multiple packages, the names of different packages should be separated by the comma.\n+\n+## level\n+\n+**level attribute** : The level of the log for conversion. **By default it is `error` level**.\n+\n+The hierarchy order of log levels from low to high is as follows:\n+\n+`trace` < `debug` < `info` <`warn`< `error` < `fatal`\n+\n+**Notice:**\n+\n+Because `logback` not support `fatal`, it will be an exception if you set **logback.level=fatal**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTg1NTM5", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545585539", "createdAt": "2020-12-05T12:58:41Z", "commit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMjo1ODo0MVrOH_4K3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMjo1ODo0MVrOH_4K3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc0MjYyMw==", "bodyText": "This switch could be easily replaced by a more explicit instrumentation definition, with a flag(enum maybe) as the interceptor constructuor, isn't it?\nString match is another performance impact.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536742623", "createdAt": "2020-12-05T12:58:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/LogbackLoggerInterceptor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import ch.qos.logback.classic.Logger;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+\n+public class LogbackLoggerInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    private static final ContextConfig.LoggerConfig CONFIG = ContextConfig.getInstance().getLogbackConfig();\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        Logger logger = (Logger) ((Object) objInst);\n+        switch (method.getName()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTkwMjA2", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545590206", "createdAt": "2020-12-05T14:12:45Z", "commit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxMjo0NVrOH_6lOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxMjo0NVrOH_6lOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MjEzOQ==", "bodyText": "Why the initial exception should be collected by tracing core?", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r536782139", "createdAt": "2020-12-05T14:12:45Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/optional-plugins/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import lombok.Setter;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+@Getter\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has config file\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            File configFile = null;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logger-plugin/logconfig.properties\");\n+            } catch (AgentPackageNotFoundException e) {\n+                if (ContextManager.isActive()) {\n+                    ContextManager.activeSpan().log(e);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0c53dede019f7ad1fe06c15fad6f875cfdc837"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221f7f7594df6b6dfd837c9c3f28c56d4d6e6f50", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/221f7f7594df6b6dfd837c9c3f28c56d4d6e6f50", "committedDate": "2020-12-06T05:11:22Z", "message": "update CHANGES.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4badf618352ac39ce0e08b5d1541a854a0d5f2a4", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/4badf618352ac39ce0e08b5d1541a854a0d5f2a4", "committedDate": "2020-12-06T06:31:44Z", "message": "log exception when logger-plugin initialized failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7d73d081c9ab05b32c36e4fdaaa6919fdaff642", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/a7d73d081c9ab05b32c36e4fdaaa6919fdaff642", "committedDate": "2020-12-06T08:53:45Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ed1e01f3d565338d2268cc4fa30c952efd7810", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/89ed1e01f3d565338d2268cc4fa30c952efd7810", "committedDate": "2020-12-07T02:42:28Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef5859cfab92c8defb6e23f11ece498e46a75758", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ef5859cfab92c8defb6e23f11ece498e46a75758", "committedDate": "2020-12-07T05:30:06Z", "message": "add UT for ContextConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b713ff066330f4879a05497c79f9d3133e30c525", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/b713ff066330f4879a05497c79f9d3133e30c525", "committedDate": "2020-12-07T05:43:52Z", "message": "modify document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1bd6d966b56ece485f4a19c43515bab2f8c8a37", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/e1bd6d966b56ece485f4a19c43515bab2f8c8a37", "committedDate": "2020-12-07T05:53:08Z", "message": "Merge branch 'f-log' of https://github.com/vcjmhg/skywalking into f-log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODY2MDgy", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-545866082", "createdAt": "2020-12-07T06:44:39Z", "commit": {"oid": "e1bd6d966b56ece485f4a19c43515bab2f8c8a37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0NDozOVrOIAYILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0NDozOVrOIAYILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NjIyMg==", "bodyText": "NULL_DEREFERENCE:  object logbackConfig last assigned on line 69 could be null and is dereferenced at line 104.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r537266222", "createdAt": "2020-12-07T06:44:39Z", "author": {"login": "sonatype-lift"}, "path": "apm-sniffer/optional-plugins/logger-plugin/src/main/java/org/apache/skywalking/apm/plugin/logger/ContextConfig.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.logger;\n+\n+import lombok.Setter;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackageNotFoundException;\n+import org.apache.skywalking.apm.agent.core.boot.AgentPackagePath;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * contains all config of the logger plugin.\n+ */\n+@Getter\n+public class ContextConfig {\n+\n+    private final LoggerConfig logbackConfig;\n+    private final LoggerConfig log4jConfig;\n+    private final LoggerConfig log4j2Config;\n+\n+    private ContextConfig(LoggerConfig logbackConfig, LoggerConfig log4jConfig, LoggerConfig log4j2Config) {\n+        this.logbackConfig = logbackConfig;\n+        this.log4jConfig = log4jConfig;\n+        this.log4j2Config = log4j2Config;\n+    }\n+\n+    public static ContextConfig getInstance() {\n+        return HolderContextConfig.INSTANCE;\n+    }\n+\n+    //use singleton\n+    private static class HolderContextConfig {\n+        private final static ContextConfig INSTANCE = initContextConfig();\n+\n+        private static ContextConfig initContextConfig() {\n+            // judge whether has config file\n+            final ILog logger = LogManager.getLogger(HolderContextConfig.class);\n+            LoggerConfig logbackConfig = null, log4jConfig = null, log4j2Config = null;\n+            File configFile = null;\n+            try {\n+                configFile = new File(AgentPackagePath.getPath(), \"/config/logger-plugin/logconfig.properties\");\n+            } catch (AgentPackageNotFoundException e) {\n+                logger.error(\"Agent package not found.\", e);\n+            }\n+            // not has config file, make config default\n+            if (configFile == null || !configFile.exists()) {\n+                List<String> packages = new ArrayList<>();\n+                packages.add(\"*\");\n+                logbackConfig = new LoggerConfig(\"logback\", packages, LogLevel.ERROR);\n+                log4jConfig = new LoggerConfig(\"log4j\", packages, LogLevel.ERROR);\n+                log4j2Config = new LoggerConfig(\"log4j2\", packages, LogLevel.ERROR);\n+            } else {\n+                // use config file to init ContextConfig\n+                try (FileInputStream configFileInputStream = new FileInputStream(configFile)) {\n+                    List<LoggerConfig> configs = parseConfigFile(configFileInputStream);\n+                    // initialization of variables which are described in config file\n+                    for (LoggerConfig loggerConfig : configs) {\n+                        if (\"logback\".equals(loggerConfig.getName())) {\n+                            logbackConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j\".equals(loggerConfig.getName())) {\n+                            log4jConfig = fillLoggerConfig(loggerConfig);\n+                        } else if (\"log4j2\".equals(loggerConfig.getName())) {\n+                            log4j2Config = fillLoggerConfig(loggerConfig);\n+                        } else {\n+                            logger.error(\"logconfig.properties was not configured properly.Please check again.\");\n+                            return null;\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.error(\"Logger plugin initialized failure.Please check again.\", e);\n+                }\n+            }\n+            if (logbackConfig.level == LogLevel.FATAL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bd6d966b56ece485f4a19c43515bab2f8c8a37"}, "originalPosition": 104}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cc0d11071fdb173ff8f04ffa217e1af1ce5237ea", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/cc0d11071fdb173ff8f04ffa217e1af1ce5237ea", "committedDate": "2020-12-07T14:28:57Z", "message": "improve performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0d11071fdb173ff8f04ffa217e1af1ce5237ea", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/cc0d11071fdb173ff8f04ffa217e1af1ce5237ea", "committedDate": "2020-12-07T14:28:57Z", "message": "improve performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea4dca00e194c85e8dfff904e458e1b9f53b3b7a", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/ea4dca00e194c85e8dfff904e458e1b9f53b3b7a", "committedDate": "2020-12-08T01:51:56Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f5edfdba0f51c1cd5ab2f30c0f3d0be2d07f49e", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/6f5edfdba0f51c1cd5ab2f30c0f3d0be2d07f49e", "committedDate": "2020-12-08T02:06:07Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64928667f3c0713d17fead8cb103284dba902b09", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/64928667f3c0713d17fead8cb103284dba902b09", "committedDate": "2020-12-09T02:26:28Z", "message": "Merge branch 'master' into f-log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb27b2cf3963818c74ebc0a8682bd9aef023193", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/3bb27b2cf3963818c74ebc0a8682bd9aef023193", "committedDate": "2020-12-09T12:18:08Z", "message": "Improve performance:different methods have different Interceptor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd6c67fb2d6e93e19c28e5dbff7eb73d92d51fc", "author": {"user": {"login": "vcjmhg", "name": null}}, "url": "https://github.com/apache/skywalking/commit/0fd6c67fb2d6e93e19c28e5dbff7eb73d92d51fc", "committedDate": "2020-12-09T12:18:23Z", "message": "Merge branch 'master' of https://github.com/apache/skywalking into f-log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTgzNzAw", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548183700", "createdAt": "2020-12-09T13:31:46Z", "commit": {"oid": "0fd6c67fb2d6e93e19c28e5dbff7eb73d92d51fc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTg1MjU0", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548185254", "createdAt": "2020-12-09T13:33:36Z", "commit": {"oid": "0fd6c67fb2d6e93e19c28e5dbff7eb73d92d51fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzozMzozN1rOICUzrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzozMzozN1rOICUzrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwODk3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Provide `logger-plugin` for log4j, log4j2, logback.\n          \n          \n            \n            * Support collecting logs of log4j, log4j2, and logback in the tracing context with a new `logger-plugin`.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r539308975", "createdAt": "2020-12-09T13:33:37Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -11,6 +11,7 @@ Release Notes.\n #### Java Agent\n * The operation name of quartz-scheduler plugin, has been changed as the `quartz-scheduler/${className}` format.\n * Fix jdk-http and okhttp-3.x plugin did not overwrite the old trace header.\n+* Provide `logger-plugin` for log4j, log4j2, logback.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd6c67fb2d6e93e19c28e5dbff7eb73d92d51fc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98", "author": {"user": {"login": "wu-sheng", "name": "\u5434\u665f Wu Sheng"}}, "url": "https://github.com/apache/skywalking/commit/80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98", "committedDate": "2020-12-09T13:33:46Z", "message": "Update CHANGES.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTg1NTQy", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548185542", "createdAt": "2020-12-09T13:33:58Z", "commit": {"oid": "0fd6c67fb2d6e93e19c28e5dbff7eb73d92d51fc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzU1Mzc0", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548355374", "createdAt": "2020-12-09T16:18:23Z", "commit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxODoyM1rOICdKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxODoyM1rOICdKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0NTg5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please pay attention that  the original `log4j.xml`(or other log framework config files) has high priority than the `logconfig.properties`.\n          \n          \n            \n            `logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please note that the original `log4j.xml`(or other log framework config files) has a higher priority than the `logconfig.properties`.", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r539445891", "createdAt": "2020-12-09T16:18:23Z", "author": {"login": "BFergerson"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please pay attention that  the original `log4j.xml`(or other log framework config files) has high priority than the `logconfig.properties`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MzU2MTI0", "url": "https://github.com/apache/skywalking/pull/5914#pullrequestreview-548356124", "createdAt": "2020-12-09T16:19:03Z", "commit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxOTowM1rOICdMtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoxOTowM1rOICdMtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0NjQ1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, the configuration file is in `apache-skywalking-apm-bin/agent/config/logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the default configurations are as following,**\n          \n          \n            \n            By default, the configuration file is in `apache-skywalking-apm-bin/agent/config/logger-plugin/logconfig.properties`. Of course, **If the file does not exist, the default configurations are as following:**", "url": "https://github.com/apache/skywalking/pull/5914#discussion_r539446452", "createdAt": "2020-12-09T16:19:03Z", "author": {"login": "BFergerson"}, "path": "docs/en/setup/service-agent/java-agent/agent-optional-plugins/Logger-plugin.md", "diffHunk": "@@ -0,0 +1,78 @@\n+# Overview\n+\n+`logger-plugin` can store the logs generated by the program during the call, such as the content of the error log, into the span log.  Through the configuration file, you can control the log source (log4j2, logback, log4j), package name, and level. Please pay attention that  the original `log4j.xml`(or other log framework config files) has high priority than the `logconfig.properties`.\n+\n+# Configuration file\n+\n+By default, the configuration file is in `apache-skywalking-apm-bin/agent/config/logger-plugin/logconfig.properties`.Of course, **If the file does not exist, the default configurations are as following,**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fd50d379ca4a79c9bcb800b8cc57d4a0e3ea98"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1399, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}