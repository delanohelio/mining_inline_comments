{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODcwMTIx", "number": 4712, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODozMzoyMlrOD2Ewpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODozMzozNVrOD2EwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDI3Njg2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODozMzoyMlrOGLye7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMzoxODo1MlrOGL1Wcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA==", "bodyText": "When ret == null?", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415014638", "createdAt": "2020-04-25T08:33:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzQzNQ==", "bodyText": "According to InstMethodsInter, if the intercepted method(here is KafkaConsumer.pollOnce()) throws exception, the ret will be null.", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415027435", "createdAt": "2020-04-25T09:51:31Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyNzUxNw==", "bodyText": "Object ret = null;\n        try {\n            if (!result.isContinue()) {\n                ret = result._ret();\n            } else {\n                ret = zuper.call();\n            }\n        } catch (Throwable t) {\n            try {\n                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);\n            } catch (Throwable t2) {\n                logger.error(t2, \"class[{}] handle method[{}] exception failure\", obj.getClass(), method.getName());\n            }\n            throw t;\n        } finally {\n            try {\n                ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);\n            } catch (Throwable t) {\n                logger.error(t, \"class[{}] after method[{}] intercept failure\", obj.getClass(), method.getName());\n            }\n        }", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415027517", "createdAt": "2020-04-25T09:52:01Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0OTYzNA==", "bodyText": "Look good to me, could you add comments about this at if (ret == null) { and   if (ContextManager.isActive()) places?", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415049634", "createdAt": "2020-04-25T12:07:58Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjQxOQ==", "bodyText": "Updated.", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415056419", "createdAt": "2020-04-25T12:48:40Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjY5Nw==", "bodyText": "Look like finagle doesn't have the log? I assume they are the same cases?", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415056697", "createdAt": "2020-04-25T12:50:36Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA2MTYxOQ==", "bodyText": "Comments were Added to finagle too!", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415061619", "createdAt": "2020-04-25T13:18:52Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -51,6 +51,9 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDYzOA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDI3NzA1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwODozMzozNVrOGLyfBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwOTo1ODowNVrOGLzVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDY2MA==", "bodyText": "Why we have inactive cases?", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415014660", "createdAt": "2020-04-25T08:33:35Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -88,6 +91,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n     @Override\n     public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Throwable t) {\n-        ContextManager.activeSpan().errorOccurred().log(t);\n+        if (ContextManager.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAyODUwMA==", "bodyText": "KafkaConsumerInterceptor create entry span in afterMethod, but handleMethodException is called before afterMethod, and before the creation of entry span, we can not ensure there is an active span.", "url": "https://github.com/apache/skywalking/pull/4712#discussion_r415028500", "createdAt": "2020-04-25T09:58:05Z", "author": {"login": "huangyoje"}, "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/KafkaConsumerInterceptor.java", "diffHunk": "@@ -88,6 +91,8 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA\n     @Override\n     public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n         Class<?>[] argumentsTypes, Throwable t) {\n-        ContextManager.activeSpan().errorOccurred().log(t);\n+        if (ContextManager.isActive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNDY2MA=="}, "originalCommit": {"oid": "51f283f9a5e79861bc73091365562f3ea22cd1c5"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 271, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}