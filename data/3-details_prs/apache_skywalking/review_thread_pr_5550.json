{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTI5ODcz", "number": 5550, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNjoxNFrOEnyVpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzowMzo0NVrOE0zAfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0NjYzOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNjoxNFrOHYjbOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNjoxNFrOHYjbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODI4Mg==", "bodyText": "This is not the right way to close Statement.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508282", "createdAt": "2020-09-27T00:06:14Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+public class SQLExecutor implements AutoCloseable {\n+    public static BasicDataSource ds;\n+    private static Connection connection;\n+\n+    public SQLExecutor() throws SQLException {\n+        try {\n+            Properties properties = new Properties();\n+            properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+            properties.setProperty(\"url\", MysqlConfig.getUrl());\n+            properties.setProperty(\"username\", MysqlConfig.getUserName());\n+            properties.setProperty(\"password\", MysqlConfig.getPassword());\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            //\n+        }\n+        connection = ds.getConnection();\n+    }\n+\n+    public void createTable(String sql) throws SQLException {\n+        Statement statement = connection.createStatement();\n+        statement.execute(sql);\n+        statement.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0Njc5OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNjozMVrOHYjbSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNjozMVrOHYjbSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODI5OQ==", "bodyText": "Why init the static field in the constructor?", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508299", "createdAt": "2020-09-27T00:06:31Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+public class SQLExecutor implements AutoCloseable {\n+    public static BasicDataSource ds;\n+    private static Connection connection;\n+\n+    public SQLExecutor() throws SQLException {\n+        try {\n+            Properties properties = new Properties();\n+            properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+            properties.setProperty(\"url\", MysqlConfig.getUrl());\n+            properties.setProperty(\"username\", MysqlConfig.getUserName());\n+            properties.setProperty(\"password\", MysqlConfig.getPassword());\n+            ds = BasicDataSourceFactory.createDataSource(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0NzYzOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNzo1NVrOHYjbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowNzo1NVrOHYjbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODM5Ng==", "bodyText": "Don't use the closing pool. The pool should have the same life cycle as the application.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508396", "createdAt": "2020-09-27T00:07:55Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/SQLExecutor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+public class SQLExecutor implements AutoCloseable {\n+    public static BasicDataSource ds;\n+    private static Connection connection;\n+\n+    public SQLExecutor() throws SQLException {\n+        try {\n+            Properties properties = new Properties();\n+            properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+            properties.setProperty(\"url\", MysqlConfig.getUrl());\n+            properties.setProperty(\"username\", MysqlConfig.getUserName());\n+            properties.setProperty(\"password\", MysqlConfig.getPassword());\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            //\n+        }\n+        connection = ds.getConnection();\n+    }\n+\n+    public void createTable(String sql) throws SQLException {\n+        Statement statement = connection.createStatement();\n+        statement.execute(sql);\n+        statement.close();\n+        connection.close();\n+        connection = null;\n+    }\n+\n+    public void dropTable(String sql) throws SQLException {\n+        connection = ds.getConnection();\n+        executeStatement(sql);\n+    }\n+\n+    public void executeStatement(String sql) throws SQLException {\n+        Statement statement = connection.createStatement();\n+        statement.execute(sql);\n+        statement.close();\n+    }\n+    \n+    public void closeConnection() throws SQLException {\n+        if (connection != null) {\n+            connection.close();\n+        }\n+    }\n+\n+    public void closePool() throws SQLException {\n+        if (ds != null) {\n+            ds.close();\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        closeConnection();\n+        closePool();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0NzgxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowODozN1rOHYjbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozNjoyN1rOHnTKEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ==", "bodyText": "Connection pool is not a DB layer.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508421", "createdAt": "2020-09-27T00:08:37Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4ODY2MQ==", "bodyText": "Dear Mr Wu @wu-sheng, Is connection pool a cache layer? I didn't find any other suitable layer to describe it.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r509388661", "createdAt": "2020-10-21T15:31:44Z", "author": {"login": "Jargon96"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDMwMA==", "bodyText": "Dear Mr Wu @wu-sheng  ,sorry to bother you, but could you give me some help?", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510834300", "createdAt": "2020-10-23T12:01:47Z", "author": {"login": "Jargon96"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0NzY2OQ==", "bodyText": "Dear Mr Wu @wu-sheng ,sorry to bother you, but could you give me some help?\n\nHe is on vocation recently.\nFrom the functionality of connection pool, I think it's ok to consider it as cache layer.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510847669", "createdAt": "2020-10-23T12:27:02Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg1NDk4MA==", "bodyText": "Dear Mr Wu @wu-sheng ,sorry to bother you, but could you give me some help?\n\nHe is on vocation recently.\nFrom the functionality of connection pool, I think it's ok to consider it as cache layer.\n\nI got it\uff01thanks for your reply\uff01", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510854980", "createdAt": "2020-10-23T12:40:12Z", "author": {"login": "Jargon96"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4MTYwMg==", "bodyText": "We don't.require layer for all plugins. For the connection pool, layer is not required.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510881602", "createdAt": "2020-10-23T13:25:28Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MDM4Nw==", "bodyText": "We don't.require layer for all plugins. For the connection pool, layer is not required.\n\nThank you sir, and wish you a happy vacation!", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r510970387", "createdAt": "2020-10-23T15:36:27Z", "author": {"login": "Jargon96"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQyMQ=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0Nzk2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowODo1MlrOHYjb1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowODo1MlrOHYjb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQzOQ==", "bodyText": "Why need this?", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508439", "createdAt": "2020-09-27T00:08:52Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0ODIwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowOTowNlrOHYjb7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowOTowNlrOHYjb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODQ2Mw==", "bodyText": "Why need this?", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508463", "createdAt": "2020-09-27T00:09:06Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        AbstractSpan span = ContextManager.createLocalSpan(\"DBCP/Connection/\" + method.getName());\n+        span.setComponent(ComponentsDefine.DBCP);\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        if (ContextManager.isActive()) {\n+            ContextManager.stopSpan();\n+        }\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        if (ContextManager.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0ODYxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingGetConnectInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowOTo0N1rOHYjcGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowOTo0N1rOHYjcGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODUwNw==", "bodyText": "Take the reference from the review on PoolingCloseConnectInterceptor.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508507", "createdAt": "2020-09-27T00:09:47Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingGetConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingGetConnectInterceptor implements InstanceMethodsAroundInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0ODg0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowOTo1N1rOHYjcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDowOTo1N1rOHYjcMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODUzMQ==", "bodyText": "Comments are required.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508531", "createdAt": "2020-09-27T00:09:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/PoolingCloseConnectInterceptor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2;\n+\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+\n+public class PoolingCloseConnectInterceptor implements InstanceMethodsAroundInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU0OTQ4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/BasicDataSourceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxMTowMlrOHYjcfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxMTo0MVrOHYjcxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODYwNg==", "bodyText": "Please extends ClassInstanceMethodsEnhancePluginDefine.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508606", "createdAt": "2020-09-27T00:11:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/BasicDataSourceInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class BasicDataSourceInstrumentation extends ClassEnhancePluginDefine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODY3Ng==", "bodyText": "Comments required.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508676", "createdAt": "2020-09-27T00:11:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/BasicDataSourceInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class BasicDataSourceInstrumentation extends ClassEnhancePluginDefine {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODYwNg=="}, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU1MDA0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/DelegatingConnectionInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxMTozMlrOHYjcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxMTozMlrOHYjcvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODY3MA==", "bodyText": "Please extends ClassInstanceMethodsEnhancePluginDefine.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508670", "createdAt": "2020-09-27T00:11:32Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/dbcp-2.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/dbcp/v2/define/DelegatingConnectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.skywalking.apm.plugin.dbcp.v2.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class DelegatingConnectionInstrumentation extends ClassEnhancePluginDefine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU1MDgwOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/controller/CaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxMzoxMlrOHYjdFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxMzoxMlrOHYjdFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODc1Nw==", "bodyText": "Create and drop are not typical SQLs in the execution stage, insert/update/delete are.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508757", "createdAt": "2020-09-27T00:13:12Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.controller;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.skywalking.apm.testcase.dbcp.SQLExecutor;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/case\")\n+public class CaseController {\n+\n+    private static final Logger logger = LogManager.getLogger(CaseController.class);\n+\n+    private static final String SUCCESS = \"Success\";\n+\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+    \n+    @RequestMapping(\"/dbcp-2.x-scenario\")\n+    @ResponseBody\n+    public String testcase() throws Exception {\n+        try (SQLExecutor sqlExecute = new SQLExecutor()) {\n+            sqlExecute.createTable(CREATE_TABLE_SQL);\n+            sqlExecute.dropTable(DROP_TABLE_SQL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU1MTMwOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/controller/CaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxNDoxMFrOHYjdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDoxNDoxMFrOHYjdTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUwODgxMw==", "bodyText": "You are using SQLExecutor like a connection, but in the codes, it actually is controlling the whole datasource. This is not right. The real services don't use it in this way.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r495508813", "createdAt": "2020-09-27T00:14:10Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.controller;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.skywalking.apm.testcase.dbcp.SQLExecutor;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/case\")\n+public class CaseController {\n+\n+    private static final Logger logger = LogManager.getLogger(CaseController.class);\n+\n+    private static final String SUCCESS = \"Success\";\n+\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+    \n+    @RequestMapping(\"/dbcp-2.x-scenario\")\n+    @ResponseBody\n+    public String testcase() throws Exception {\n+        try (SQLExecutor sqlExecute = new SQLExecutor()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "870d616d81ae68640d68d055080737b283a40a45"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTgxOTI4OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjowNTowMFrOHr0U7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjoxNzoxMlrOHsePBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwODE0MQ==", "bodyText": "we don't need to validate this segment.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r515708141", "createdAt": "2020-11-02T02:05:00Z", "author": {"login": "dmsolr"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,255 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: /dbcp-2.x-scenario/case/healthCheck\n+      operationId: eq 0\n+      parentSpanId: -1\n+      spanId: 0\n+      spanLayer: Http\n+      componentId: 1\n+      isError: false\n+      spanType: Entry\n+      peer: ''\n+      skipAnalysis: false\n+      tags:\n+        - {key: url, value: 'http://localhost:8080/dbcp-2.x-scenario/case/healthCheck'}\n+        - {key: http.method, value: HEAD}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685bf3e968a3d1327d0b67a001c4b533586886ac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NDc1Ng==", "bodyText": "we don't need to validate this segment.\n\n@dmsolr Thank you sir, I have deleted this segment.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516394756", "createdAt": "2020-11-03T02:17:12Z", "author": {"login": "Jargon96"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,255 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: /dbcp-2.x-scenario/case/healthCheck\n+      operationId: eq 0\n+      parentSpanId: -1\n+      spanId: 0\n+      spanLayer: Http\n+      componentId: 1\n+      isError: false\n+      spanType: Entry\n+      peer: ''\n+      skipAnalysis: false\n+      tags:\n+        - {key: url, value: 'http://localhost:8080/dbcp-2.x-scenario/case/healthCheck'}\n+        - {key: http.method, value: HEAD}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwODE0MQ=="}, "originalCommit": {"oid": "685bf3e968a3d1327d0b67a001c4b533586886ac"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjY5NzkwOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/support-version.list", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo0Nzo0MFrOHshz5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo1MDo1MlrOHsyXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzM0OA==", "bodyText": "Do DBCP have 2.0-2.4?", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516453348", "createdAt": "2020-11-03T06:47:40Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.7.0\n+2.6.0\n+2.5.0\n+2.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NzM3MQ==", "bodyText": "Do DBCP have 2.0-2.4?\n\n@wu-sheng Thanks for your review~ Yes, sir.  It also has these versions\n2.0 - 2.4: 2.3.0/2.2.0/2.1.1/2.1/2.0.1/2.0\nI've tested these versions locally. Do I need to add it to the list\uff1f", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516647371", "createdAt": "2020-11-03T12:59:07Z", "author": {"login": "Jargon96"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.7.0\n+2.6.0\n+2.5.0\n+2.4.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzM0OA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2NzQzMA==", "bodyText": "We should add the latest of each version, 2.3.0, 2.2.0, 2.1.1, 2.0.1", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516667430", "createdAt": "2020-11-03T13:32:22Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.7.0\n+2.6.0\n+2.5.0\n+2.4.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzM0OA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyNDY0Nw==", "bodyText": "We should add the latest of each version, 2.3.0, 2.2.0, 2.1.1, 2.0.1\n\nOk sir, I have updated the list.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516724647", "createdAt": "2020-11-03T14:50:52Z", "author": {"login": "Jargon96"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/support-version.list", "diffHunk": "@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+2.7.0\n+2.6.0\n+2.5.0\n+2.4.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1MzM0OA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjc3MjgwOnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoyMzoyMlrOHsid3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo1MzoxOVrOHsyfGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA==", "bodyText": "@Jargon96 @dmsolr @ascrutae Does DBCP pool have a name? I hope this could be DBCP/{pool-name}/.... Then some of the operations like get and close should be the logic span later to show the connection pool performance.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516464094", "createdAt": "2020-11-03T07:23:22Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NzU4MQ==", "bodyText": "@Jargon96 @dmsolr @ascrutae Does DBCP pool have a name? I hope this could be DBCP/{pool-name}/.... Then some of the operations like get and close should be the logic span later to show the connection pool performance.\n\n@wu-sheng Could I use this ?  DBCP/Apache-Commons-DBCP/...", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516647581", "createdAt": "2020-11-03T12:59:25Z", "author": {"login": "Jargon96"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2NzU0NA==", "bodyText": "See my comment below.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516667544", "createdAt": "2020-11-03T13:32:37Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5ODEyOQ==", "bodyText": "@wu-sheng  said whether the pool has something like a name or others to identify it.\nAs far as I see, it does not have.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516698129", "createdAt": "2020-11-03T14:17:18Z", "author": {"login": "dmsolr"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxMTc3MA==", "bodyText": "I have checked the API and found that DBCP doesn't have attribute name to set pool name.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516711770", "createdAt": "2020-11-03T14:34:53Z", "author": {"login": "ascrutae"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxODU4OA==", "bodyText": "@dmsolr @ascrutae Thank you for checking. I didn\u2019t find it either.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516718588", "createdAt": "2020-11-03T14:42:56Z", "author": {"login": "Jargon96"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyNjU1NQ==", "bodyText": "OK, then let's keep the name as what it is today.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516726555", "createdAt": "2020-11-03T14:53:19Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/config/expectedData.yaml", "diffHunk": "@@ -0,0 +1,240 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+segmentItems:\n+- serviceName: dbcp-2.x-scenario\n+  segmentSize: nq 0\n+  segments:\n+  - segmentId: not null\n+    spans:\n+    - operationName: Mysql/JDBI/Connection/close\n+      operationId: eq 0\n+      parentSpanId: 1\n+      spanId: 2\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - {key: db.statement, value: ''}\n+    - operationName: DBCP/Connection/getConnection\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 1\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 102\n+      isError: false\n+      spanType: Local\n+      peer: ''\n+      skipAnalysis: false\n+    - operationName: Mysql/JDBI/Statement/execute\n+      operationId: 0\n+      parentSpanId: 0\n+      spanId: 3\n+      startTime: gt 0\n+      endTime: gt 0\n+      componentId: 33\n+      isError: false\n+      spanType: Exit\n+      peer: mysql-server:3306\n+      skipAnalysis: false\n+      tags:\n+        - {key: db.type, value: sql}\n+        - {key: db.instance, value: test}\n+        - key: db.statement\n+          value: \"CREATE TABLE test_DBCP(\\nid VARCHAR(1) PRIMARY KEY, \\nvalue VARCHAR(1)\\\n+          \\ NOT NULL)\"\n+    - operationName: DBCP/Connection/close", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2NDA5NA=="}, "originalCommit": {"oid": "a4daf0298c1d8d9c812efe315d37e064eb375d60"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzk3MTE3OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/service/CaseService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzowMzo0NVrOHst0Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzowNzo1NFrOHst9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MDA1OQ==", "bodyText": "I mean, does the connection pool has an attribute called name or something?", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516650059", "createdAt": "2020-11-03T13:03:45Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/service/CaseService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.service;\n+\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+import org.apache.skywalking.apm.testcase.dbcp.MysqlConfig;\n+import org.springframework.stereotype.Service;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+@Service\n+public class CaseService {\n+\n+    public static DataSource ds;\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String INSERT_DATA_SQL = \"INSERT INTO test_DBCP(id, value) VALUES(1,1)\";\n+    private static final String QUERY_DATA_SQL = \"SELECT id, value FROM test_DBCP WHERE id=1\";\n+    private static final String DELETE_DATA_SQL = \"DELETE FROM test_DBCP WHERE id=1\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+\n+    static {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+        properties.setProperty(\"url\", MysqlConfig.getUrl());\n+        properties.setProperty(\"username\", MysqlConfig.getUserName());\n+        properties.setProperty(\"password\", MysqlConfig.getPassword());\n+        try {\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "accd7d04917c5ca4511a0267e666a2fd95ebcd79"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MjQ5MA==", "bodyText": "If not, then there is nothing to be changed.", "url": "https://github.com/apache/skywalking/pull/5550#discussion_r516652490", "createdAt": "2020-11-03T13:07:54Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/dbcp-2.x-scenario/src/main/java/org/apache/skywalking/apm/testcase/dbcp/service/CaseService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.testcase.dbcp.service;\n+\n+import org.apache.commons.dbcp2.BasicDataSourceFactory;\n+import org.apache.skywalking.apm.testcase.dbcp.MysqlConfig;\n+import org.springframework.stereotype.Service;\n+\n+import javax.sql.DataSource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+@Service\n+public class CaseService {\n+\n+    public static DataSource ds;\n+    private static final String CREATE_TABLE_SQL = \"CREATE TABLE test_DBCP(\\n\" + \"id VARCHAR(1) PRIMARY KEY, \\n\" + \"value VARCHAR(1) NOT NULL)\";\n+    private static final String INSERT_DATA_SQL = \"INSERT INTO test_DBCP(id, value) VALUES(1,1)\";\n+    private static final String QUERY_DATA_SQL = \"SELECT id, value FROM test_DBCP WHERE id=1\";\n+    private static final String DELETE_DATA_SQL = \"DELETE FROM test_DBCP WHERE id=1\";\n+    private static final String DROP_TABLE_SQL = \"DROP table test_DBCP\";\n+\n+    static {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"driverClassName\", \"com.mysql.jdbc.Driver\");\n+        properties.setProperty(\"url\", MysqlConfig.getUrl());\n+        properties.setProperty(\"username\", MysqlConfig.getUserName());\n+        properties.setProperty(\"password\", MysqlConfig.getPassword());\n+        try {\n+            ds = BasicDataSourceFactory.createDataSource(properties);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MDA1OQ=="}, "originalCommit": {"oid": "accd7d04917c5ca4511a0267e666a2fd95ebcd79"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4837, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}