{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODc3MTI2", "number": 5989, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjoxMjo1M1rOFDcilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxNDoyMFrOFHt8qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTU3NjU1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjoxMjo1M1rOIDGRrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDoxNzo0N1rOIE_OOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExOTQ3MQ==", "bodyText": "The variable is visible in the if statement block. So we don't need to move it out of the if statement block.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r540119471", "createdAt": "2020-12-10T12:12:53Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -57,10 +64,11 @@ public void initial(AbstractContext context) {\n     @Override\n     public TField readFieldBegin() throws TException {\n         final TField field = super.readFieldBegin();\n+        Map<String, String> header = new HashMap<>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTA0OQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r542101049", "createdAt": "2020-12-14T04:17:47Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -57,10 +64,11 @@ public void initial(AbstractContext context) {\n     @Override\n     public TField readFieldBegin() throws TException {\n         final TField field = super.readFieldBegin();\n+        Map<String, String> header = new HashMap<>(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExOTQ3MQ=="}, "originalCommit": null, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTU4MjIwOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjoxNDoyNFrOIDGU8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNToxNjoxN1rOIFANjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDMwNg==", "bodyText": "Would you try to do it without ThreadLocal?", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r540120306", "createdAt": "2020-12-10T12:14:24Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +90,20 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP && !HAVE_CREATED.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDg1OQ==", "bodyText": "I don't recommend to use ThreadLocal here.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r540120859", "createdAt": "2020-12-10T12:15:12Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +90,20 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP && !HAVE_CREATED.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDMwNg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyOTExMw==", "bodyText": "@ZS-Oliver Could you explain why do you need this? Are there many wrapper instances or something?", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r540129113", "createdAt": "2020-12-10T12:27:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +90,20 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP && !HAVE_CREATED.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDMwNg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUzMDkxNQ==", "bodyText": "sorry\uff0cI took leave on Friday and didn't go to work\uff0cI will update on Monday.  happy weekend !", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r541530915", "createdAt": "2020-12-12T08:21:06Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +90,20 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP && !HAVE_CREATED.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDMwNg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEwMTA0Mg==", "bodyText": "I saw ServerInProtocolWrapper was initialized in TServerInterceptor.onConstruct.\nThe method onConstruct was called when an intercept construction method is called.\nI use ThreadLocal to do the isolation, because I think this behavior will only be invoked once during the enhancement.\nAre there any better way to implement this ?", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r542101042", "createdAt": "2020-12-14T04:17:44Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +90,20 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP && !HAVE_CREATED.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDMwNg=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExNzI2MA==", "bodyText": "LGTM, Thanks @ZS-Oliver", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r542117260", "createdAt": "2020-12-14T05:16:17Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +90,20 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP && !HAVE_CREATED.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEyMDMwNg=="}, "originalCommit": null, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODAxMTgxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDozNDo1MFrOIFTYOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzo1OTo1NlrOIJPVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMTI5MQ==", "bodyText": "TracingContext has native running context for this case, could you consider to use that? It could be auto cleared when the tracing context finished.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r542431291", "createdAt": "2020-12-14T14:34:50Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n     private static final StringTag TAG_ARGS = new StringTag(\"args\");\n     private AbstractContext context;\n+    private static ThreadLocal<Boolean> HAVE_CREATED = ThreadLocal.withInitial(() -> Boolean.FALSE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NzEyNg==", "bodyText": "It seems like the life cycle of a TraceContext is exactly one trace. Thinking of such a circumstance that we have A, B, C three services and they are inter-communicated through RPC like A->B->C, with both A and C mounted the Agent while B not. Then, in the above situation, C will start a new trace since the trace from A is stopped at B. Hence, C could not obsever A with the use of TraceContext.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r543167126", "createdAt": "2020-12-15T09:07:47Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n     private static final StringTag TAG_ARGS = new StringTag(\"args\");\n     private AbstractContext context;\n+    private static ThreadLocal<Boolean> HAVE_CREATED = ThreadLocal.withInitial(() -> Boolean.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMTI5MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2MTkzOQ==", "bodyText": "How is your description relating to what I asked? I am talking about don't your own threadlocal, use the one core provided. Do you misunderstand somehow?", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r545861939", "createdAt": "2020-12-18T14:23:56Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n     private static final StringTag TAG_ARGS = new StringTag(\"args\");\n     private AbstractContext context;\n+    private static ThreadLocal<Boolean> HAVE_CREATED = ThreadLocal.withInitial(() -> Boolean.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMTI5MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1MTc0Nw==", "bodyText": "SkyWalking provides a safe RuntimeContext which is alive during a tracing. So we prefer to use this rather than directly ThreadLocal.\nMore details see ContextManager#getRuntimeContext(), please.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r545951747", "createdAt": "2020-12-18T16:38:55Z", "author": {"login": "dmsolr"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n     private static final StringTag TAG_ARGS = new StringTag(\"args\");\n     private AbstractContext context;\n+    private static ThreadLocal<Boolean> HAVE_CREATED = ThreadLocal.withInitial(() -> Boolean.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMTI5MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU1OTM2Nw==", "bodyText": "Sorry,  I misunderstand in some aspect.\nThanks for your advice.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546559367", "createdAt": "2020-12-21T07:59:56Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private static final ILog LOGGER = LogManager.getLogger(ServerInProtocolWrapper.class);\n     private static final StringTag TAG_ARGS = new StringTag(\"args\");\n     private AbstractContext context;\n+    private static ThreadLocal<Boolean> HAVE_CREATED = ThreadLocal.withInitial(() -> Boolean.FALSE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMTI5MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODAyMTgyOnYy", "diffSide": "RIGHT", "path": "CHANGES.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDozNjo1NlrOIFTeSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowNzo1NFrOIGAS0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMjg0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix thrift plugin trace link broken when intermediate service does not mount agent, and collect wrong args when method without parameters.\n          \n          \n            \n            * Fix thrift plugin trace link broken when intermediate service does not mount agent\n          \n          \n            \n            * Fix thrift plugin collects wrong args when the method without parameter.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r542432841", "createdAt": "2020-12-14T14:36:56Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -12,6 +12,7 @@ Release Notes.\n * The operation name of quartz-scheduler plugin, has been changed as the `quartz-scheduler/${className}` format.\n * Fix jdk-http and okhttp-3.x plugin did not overwrite the old trace header.\n * Support collecting logs of log4j, log4j2, and logback in the tracing context with a new `logger-plugin`.\n+* Fix thrift plugin trace link broken when intermediate service does not mount agent, and collect wrong args when method without parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMzIwMg==", "bodyText": "2lines of changelog seem more clear. Agree?", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r542433202", "createdAt": "2020-12-14T14:37:25Z", "author": {"login": "wu-sheng"}, "path": "CHANGES.md", "diffHunk": "@@ -12,6 +12,7 @@ Release Notes.\n * The operation name of quartz-scheduler plugin, has been changed as the `quartz-scheduler/${className}` format.\n * Fix jdk-http and okhttp-3.x plugin did not overwrite the old trace header.\n * Support collecting logs of log4j, log4j2, and logback in the tracing context with a new `logger-plugin`.\n+* Fix thrift plugin trace link broken when intermediate service does not mount agent, and collect wrong args when method without parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMjg0MQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NzE4Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r543167187", "createdAt": "2020-12-15T09:07:54Z", "author": {"login": "ZS-Oliver"}, "path": "CHANGES.md", "diffHunk": "@@ -12,6 +12,7 @@ Release Notes.\n * The operation name of quartz-scheduler plugin, has been changed as the `quartz-scheduler/${className}` format.\n * Fix jdk-http and okhttp-3.x plugin did not overwrite the old trace header.\n * Support collecting logs of log4j, log4j2, and logback in the tracing context with a new `logger-plugin`.\n+* Fix thrift plugin trace link broken when intermediate service does not mount agent, and collect wrong args when method without parameters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzMjg0MQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjIxMTY5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODoyMDoyMlrOIJP1NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODo0MzoxOVrOIJQbJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzQ3Ng==", "bodyText": "I think there is an NPE risk.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean haveCreatedSpan =\n          \n          \n            \n                                (boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);\n          \n          \n            \n                        Boolean haveCreatedSpan =\n          \n          \n            \n                                ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);\n          \n      \n    \n    \n  \n\nAnd you should check haveCreatedSpan != null && !haveCreatedSpan, agree?", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546567476", "createdAt": "2020-12-21T08:20:22Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +84,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            boolean haveCreatedSpan =\n+                    (boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2ODgwNA==", "bodyText": "If this context doesn't exist, then it could not change to boolean.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546568804", "createdAt": "2020-12-21T08:23:40Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +84,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            boolean haveCreatedSpan =\n+                    (boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzQ3Ng=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3NDgzMA==", "bodyText": "I think I forgot to initialize, Otherwise haveCreatedSpan cannot be false.\nI think Object cannot auto cast to Boolean.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546574830", "createdAt": "2020-12-21T08:37:40Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +84,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            boolean haveCreatedSpan =\n+                    (boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzQ3Ng=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3NTgwMw==", "bodyText": "I don't say any object. I was saying null casting to Boolean rather than boolean.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546575803", "createdAt": "2020-12-21T08:39:54Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +84,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            boolean haveCreatedSpan =\n+                    (boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzQ3Ng=="}, "originalCommit": null, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3NzE4OQ==", "bodyText": "\ud83d\udc4d , done", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546577189", "createdAt": "2020-12-21T08:43:19Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +84,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            boolean haveCreatedSpan =\n+                    (boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzQ3Ng=="}, "originalCommit": null, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjM3MTYxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOToxNDoyMFrOIJRS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMjoxNTo1N1rOIJWVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MTQ3Ng==", "bodyText": "This is still an NPE risk. Take a look at my previous comment. If you are using Boolean, you need to haveCreatedSpan != null && first.\nIf you are not familiar with auto-unboxing in Java, take a look at this, https://stackoverflow.com/questions/55100449/unexpected-nullpointerexception-while-autoboxing-unboxing-java-long-type-as-re", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546591476", "createdAt": "2020-12-21T09:14:20Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +85,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            Boolean haveCreatedSpan =\n+                    (Boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);\n+            if (!haveCreatedSpan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyMTg3OQ==", "bodyText": "I think I've initialize \"haveCreatedSpan\" in initial(), so it would't be NPE.\nBut It is necessary to add a precaution. Good advice.", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546621879", "createdAt": "2020-12-21T10:17:01Z", "author": {"login": "ZS-Oliver"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +85,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            Boolean haveCreatedSpan =\n+                    (Boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);\n+            if (!haveCreatedSpan) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MTQ3Ng=="}, "originalCommit": null, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3MzkzNA==", "bodyText": "Yes, just be preciseness. :)", "url": "https://github.com/apache/skywalking/pull/5989#discussion_r546673934", "createdAt": "2020-12-21T12:15:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/thrift-plugin/src/main/java/org/apache/skywalking/apm/plugin/thrift/wrapper/ServerInProtocolWrapper.java", "diffHunk": "@@ -81,6 +85,24 @@ public TField readFieldBegin() throws TException {\n             }\n             return readFieldBegin();\n         }\n+        if (field.type == TType.STOP) {\n+            Boolean haveCreatedSpan =\n+                    (Boolean) ContextManager.getRuntimeContext().get(HAVE_CREATED_SPAN);\n+            if (!haveCreatedSpan) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MTQ3Ng=="}, "originalCommit": null, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}