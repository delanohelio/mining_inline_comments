{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzEwOTAz", "number": 5784, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNzo1M1rOE0z0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo0Mzo1MlrOE0z-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODEwMzM5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNzo1M1rOHsvFWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNzo1M1rOHsvFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3MDgwOQ==", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method ZookeeperCoordinator.queryRemoteNodes() indirectly writes to field this.healthChecker outside of synchronization.\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/skywalking/pull/5784#discussion_r516670809", "createdAt": "2020-11-03T13:37:53Z", "author": {"login": "sonatype-lift"}, "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "diffHunk": "@@ -73,28 +85,49 @@ public synchronized void registerRemote(RemoteInstance remoteInstance) throws Se\n             serviceDiscovery.registerService(thisInstance);\n \n             this.selfAddress = remoteInstance.getAddress();\n-        } catch (Exception e) {\n+            this.healthChecker.health();\n+        } catch (Throwable e) {\n+            this.healthChecker.unHealth(e);\n             throw new ServiceRegisterException(e.getMessage());\n         }\n     }\n \n     @Override\n     public List<RemoteInstance> queryRemoteNodes() {\n-        List<RemoteInstance> remoteInstanceDetails = new ArrayList<>(20);\n-        List<ServiceInstance<RemoteInstance>> serviceInstances = serviceCache.getInstances();\n-        serviceInstances.forEach(serviceInstance -> {\n-            RemoteInstance instance = serviceInstance.getPayload();\n-            if (instance.getAddress().equals(selfAddress)) {\n-                instance.getAddress().setSelf(true);\n+        List<RemoteInstance> remoteInstances = new ArrayList<>(20);\n+        try {\n+            initHealthChecker();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749093ea52f387ffc9955afb258742b849cce0c7"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODEwMzQ3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNzo1NFrOHsvFZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNzo1NFrOHsvFZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3MDgyMA==", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method ZookeeperCoordinator.setHealthChecker(...) writes to field this.healthChecker outside of synchronization.\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "url": "https://github.com/apache/skywalking/pull/5784#discussion_r516670820", "createdAt": "2020-11-03T13:37:54Z", "author": {"login": "sonatype-lift"}, "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "diffHunk": "@@ -22,29 +22,40 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n+\n+import lombok.Setter;\n import org.apache.curator.x.discovery.ServiceCache;\n import org.apache.curator.x.discovery.ServiceDiscovery;\n import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.skywalking.oap.server.core.cluster.ClusterHealthStatus;\n import org.apache.skywalking.oap.server.core.cluster.ClusterNodesQuery;\n import org.apache.skywalking.oap.server.core.cluster.ClusterRegister;\n+import org.apache.skywalking.oap.server.core.cluster.OAPNodeChecker;\n import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;\n+import org.apache.skywalking.oap.server.core.cluster.ServiceQueryException;\n import org.apache.skywalking.oap.server.core.cluster.ServiceRegisterException;\n import org.apache.skywalking.oap.server.core.remote.client.Address;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.HealthCheckMetrics;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n \n public class ZookeeperCoordinator implements ClusterRegister, ClusterNodesQuery {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ZookeeperCoordinator.class);\n \n     private static final String REMOTE_NAME_PATH = \"remote\";\n \n     private final ClusterModuleZookeeperConfig config;\n     private final ServiceDiscovery<RemoteInstance> serviceDiscovery;\n     private final ServiceCache<RemoteInstance> serviceCache;\n     private volatile Address selfAddress;\n+    @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "749093ea52f387ffc9955afb258742b849cce0c7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODEyNjc4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo0MzoyM1rOHsvTaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo0MzoyM1rOHsvTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3NDQxMQ==", "bodyText": "Move final to following other final fields in the top of the list.", "url": "https://github.com/apache/skywalking/pull/5784#discussion_r516674411", "createdAt": "2020-11-03T13:43:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "diffHunk": "@@ -22,29 +22,40 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n+\n+import lombok.Setter;\n import org.apache.curator.x.discovery.ServiceCache;\n import org.apache.curator.x.discovery.ServiceDiscovery;\n import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.skywalking.oap.server.core.cluster.ClusterHealthStatus;\n import org.apache.skywalking.oap.server.core.cluster.ClusterNodesQuery;\n import org.apache.skywalking.oap.server.core.cluster.ClusterRegister;\n+import org.apache.skywalking.oap.server.core.cluster.OAPNodeChecker;\n import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;\n+import org.apache.skywalking.oap.server.core.cluster.ServiceQueryException;\n import org.apache.skywalking.oap.server.core.cluster.ServiceRegisterException;\n import org.apache.skywalking.oap.server.core.remote.client.Address;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.HealthCheckMetrics;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n \n public class ZookeeperCoordinator implements ClusterRegister, ClusterNodesQuery {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ZookeeperCoordinator.class);\n \n     private static final String REMOTE_NAME_PATH = \"remote\";\n \n     private final ClusterModuleZookeeperConfig config;\n     private final ServiceDiscovery<RemoteInstance> serviceDiscovery;\n     private final ServiceCache<RemoteInstance> serviceCache;\n     private volatile Address selfAddress;\n+    @Setter\n+    private HealthCheckMetrics healthChecker;\n+    private final ModuleDefineHolder manager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d725b2d8b2f182c43c801423b5dc34737313ddca"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODEyOTA2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo0Mzo1MlrOHsvUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo0Mzo1MlrOHsvUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3NDc1Nw==", "bodyText": "You don't need the setter I think. Please don't open unnecessary access.", "url": "https://github.com/apache/skywalking/pull/5784#discussion_r516674757", "createdAt": "2020-11-03T13:43:52Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ZookeeperCoordinator.java", "diffHunk": "@@ -22,29 +22,40 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n+\n+import lombok.Setter;\n import org.apache.curator.x.discovery.ServiceCache;\n import org.apache.curator.x.discovery.ServiceDiscovery;\n import org.apache.curator.x.discovery.ServiceInstance;\n+import org.apache.skywalking.oap.server.core.cluster.ClusterHealthStatus;\n import org.apache.skywalking.oap.server.core.cluster.ClusterNodesQuery;\n import org.apache.skywalking.oap.server.core.cluster.ClusterRegister;\n+import org.apache.skywalking.oap.server.core.cluster.OAPNodeChecker;\n import org.apache.skywalking.oap.server.core.cluster.RemoteInstance;\n+import org.apache.skywalking.oap.server.core.cluster.ServiceQueryException;\n import org.apache.skywalking.oap.server.core.cluster.ServiceRegisterException;\n import org.apache.skywalking.oap.server.core.remote.client.Address;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefineHolder;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.HealthCheckMetrics;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n \n public class ZookeeperCoordinator implements ClusterRegister, ClusterNodesQuery {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ZookeeperCoordinator.class);\n \n     private static final String REMOTE_NAME_PATH = \"remote\";\n \n     private final ClusterModuleZookeeperConfig config;\n     private final ServiceDiscovery<RemoteInstance> serviceDiscovery;\n     private final ServiceCache<RemoteInstance> serviceCache;\n     private volatile Address selfAddress;\n+    @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d725b2d8b2f182c43c801423b5dc34737313ddca"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}