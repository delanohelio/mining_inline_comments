{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjE2MDk4", "number": 4172, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNDoyMzowNFrODVzY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzo0NDo1OVrODWdY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTg4NjM2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNDoyMzowNFrOFaOEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTozMDoyNlrOFaOQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzNzgyMg==", "bodyText": "Hi, I suggest will ProfileTaskExecutionService disabled by default, enabled by the user through the displayed configuration.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363037822", "createdAt": "2020-01-04T14:23:04Z", "author": {"login": "arugal"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7125b57c5beb52e363a9f7eaa97b8850e647812"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzODA2NQ==", "bodyText": "Sorry, I'm not sure what you mean? Why need to disable it? I need to use it to process the profile task. Do you mean to make a switch, user decides sniffer can enable profile?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363038065", "createdAt": "2020-01-04T14:28:13Z", "author": {"login": "mrproliu"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzNzgyMg=="}, "originalCommit": {"oid": "e7125b57c5beb52e363a9f7eaa97b8850e647812"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzODEzMA==", "bodyText": "Do you mean to make a switch, user decides sniffer can enable profile?\n\nYes.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363038130", "createdAt": "2020-01-04T14:29:57Z", "author": {"login": "arugal"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzNzgyMg=="}, "originalCommit": {"oid": "e7125b57c5beb52e363a9f7eaa97b8850e647812"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTEzMQ==", "bodyText": "@arugal Why make it disabled in default? Could you explain a little?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363039131", "createdAt": "2020-01-04T14:51:21Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzNzgyMg=="}, "originalCommit": {"oid": "e7125b57c5beb52e363a9f7eaa97b8850e647812"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTgyNg==", "bodyText": "please check. I have added a new agent switch config agent.active_profile.\nIt will be working on the query profile tasks. If disable the query, the sniffer will not have any profile task need to be executed.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363039826", "createdAt": "2020-01-04T15:07:39Z", "author": {"login": "mrproliu"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzNzgyMg=="}, "originalCommit": {"oid": "e7125b57c5beb52e363a9f7eaa97b8850e647812"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MDgxMA==", "bodyText": "Agent config? So if the user wants to enable profiling, he must restart the agent? Unacceptable to me", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363040810", "createdAt": "2020-01-04T15:30:26Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzNzgyMg=="}, "originalCommit": {"oid": "e7125b57c5beb52e363a9f7eaa97b8850e647812"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTkwMjM1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTowOTozMlrOFaOMmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwODoyNDowOVrOFaQdrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw==", "bodyText": "As a key feature of 7.0.0, this flag should be true as default. @arugal Could you share your concern?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363039897", "createdAt": "2020-01-04T15:09:32Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MTA1Nw==", "bodyText": "As a key feature of 7.0.0, this flag should be true as default. @arugal Could you share your concern?\n\n\nI think thread monitoring is an auxiliary feature\nThread snapshot collection has a great impact on application performance\n\nSo I think it should be enabled by the user display", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363041057", "createdAt": "2020-01-04T15:36:21Z", "author": {"login": "arugal"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw=="}, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MTg1NQ==", "bodyText": "That is why we set the acceptable task with the following limitations\n\nOnly one endpoint at a certain time.\n15 mins as max duration of the task\ndumpPeriod >= 10ms\nminDurationThreshold for collecting thread dump in meaningful case.\nmaxSamplingCount should less than 10. FYI @mrproliu I think maxSamplingCount is missing from existing codes, backend and protocol. right? Please fix this.\n\nWe should not set that in the false, because once the undetected performance issue happens, you have no change to reboot agent already.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363041855", "createdAt": "2020-01-04T15:54:26Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw=="}, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MTk0Mw==", "bodyText": "You could recheck these in the design doc, except the (5), we miss that in the doc too.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363041943", "createdAt": "2020-01-04T15:56:18Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw=="}, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MjA1OQ==", "bodyText": "You could recheck these in the design doc, except the (5), we miss that in the doc too.\n\nI'll reread the design document", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363042059", "createdAt": "2020-01-04T15:58:33Z", "author": {"login": "arugal"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw=="}, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTUwMg==", "bodyText": "@mrproliu Set up a config class for profile first.\npublic static class Profile {\n           public static boolean ACTIVE = true;\n}", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363071502", "createdAt": "2020-01-05T06:01:23Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw=="}, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NzAzNg==", "bodyText": "please check. maxSamplingCount have added into design document and codes.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363077036", "createdAt": "2020-01-05T08:24:09Z", "author": {"login": "mrproliu"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -118,6 +118,11 @@\n          * Limit the length of the operationName to prevent errors when inserting elasticsearch\n          **/\n         public static int OPERATION_NAME_THRESHOLD = 500;\n+\n+        /**\n+         * If true, skywalking agent will enable profile when user create a new profile task\n+         */\n+        public static boolean ACTIVE_PROFILE = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAzOTg5Nw=="}, "originalCommit": {"oid": "60a8ecc9ae562097337403ab5f7482cf69667a3a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTkwMzQ0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNToxMjo1MVrOFaONKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNToxMjo1MVrOFaONKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MDA0MA==", "bodyText": "< should be enough.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363040040", "createdAt": "2020-01-04T15:12:51Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));\n+\n+    // last command create time, use to next query task list\n+    private volatile long lastCommandCreateTime = -1;\n+\n+    /**\n+     * get profile task from OAP\n+     * @param task\n+     */\n+    public void addProfileTask(ProfileTask task) {\n+        // update last command create time\n+        if (task.getStartTime() > lastCommandCreateTime) {\n+            lastCommandCreateTime = task.getStartTime();\n+        }\n+\n+        long timeFromStartMills = task.getStartTime() - System.currentTimeMillis();\n+        if (timeFromStartMills <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f067eb9ac75d127237f3985f32e07c16f3586bfe"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTkxMDY1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskQueryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTozNDoyOFrOFaOQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTozNDoyOFrOFaOQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MDk3NA==", "bodyText": "Use @DefaultImplementor in all agent services.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363040974", "createdAt": "2020-01-04T15:34:28Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskQueryService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import io.grpc.Channel;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+import org.apache.skywalking.apm.agent.core.commands.CommandService;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.conf.RemoteDownstreamConfig;\n+import org.apache.skywalking.apm.agent.core.dictionary.DictionaryUtil;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelListener;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelManager;\n+import org.apache.skywalking.apm.agent.core.remote.GRPCChannelStatus;\n+import org.apache.skywalking.apm.network.common.Commands;\n+import org.apache.skywalking.apm.network.language.profile.ProfileTaskCommandQuery;\n+import org.apache.skywalking.apm.network.language.profile.ProfileTaskGrpc;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Collector.GRPC_UPSTREAM_TIMEOUT;\n+\n+/**\n+ * sniffer will check has new profile task list every {@link Config.Collector#GET_PROFILE_TASK_INTERVAL} second.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskQueryService implements BootService, Runnable, GRPCChannelListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f067eb9ac75d127237f3985f32e07c16f3586bfe"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTkxMTM2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTozNjoyN1rOFaORKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTozNjoyN1rOFaORKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MTA2Ng==", "bodyText": "Tasklist in the queue list should be cached and do time window validation again. Even we did in the UI, but there could be bug or storage changed through DB directly. It is better to recheck here.\nSame rule as backend did. There should be only one task in a certain time.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363041066", "createdAt": "2020-01-04T15:36:27Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));\n+\n+    // last command create time, use to next query task list\n+    private volatile long lastCommandCreateTime = -1;\n+\n+    /**\n+     * get profile task from OAP\n+     * @param task\n+     */\n+    public void addProfileTask(ProfileTask task) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f067eb9ac75d127237f3985f32e07c16f3586bfe"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTkxNTM0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTo0ODoyNlrOFaOTOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNTo0ODoyNlrOFaOTOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0MTU5NQ==", "bodyText": "Make it \u201cfinal\u201d and remove \u201cvolatile\u201d", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363041595", "createdAt": "2020-01-04T15:48:26Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static volatile ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f067eb9ac75d127237f3985f32e07c16f3586bfe"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjE0NzEyOnYy", "diffSide": "RIGHT", "path": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/constants/ProfileConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwNjowNDoxMFrOFaQIaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQwODoyMjoyN1rOFaQdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTU5Mg==", "bodyText": "All these should be used in ProfileTaskCommandExecutor#execute. Once check fails, warning logs should output and the task wouldn't add into the scheduler.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363071592", "createdAt": "2020-01-05T06:04:10Z", "author": {"login": "wu-sheng"}, "path": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/constants/ProfileConstants.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.network.constants;\n+\n+/**\n+ * profile task limit constants\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4c18fac7c7c954210c02f32dd2b0f52d79957d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3Njk1Mw==", "bodyText": "Add the check info ProfileTaskExecutionService#addProfileTask, there saved task list and do the recheck.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363076953", "createdAt": "2020-01-05T08:22:27Z", "author": {"login": "mrproliu"}, "path": "apm-protocol/apm-network/src/main/java/org/apache/skywalking/apm/network/constants/ProfileConstants.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.skywalking.apm.network.constants;\n+\n+/**\n+ * profile task limit constants\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileConstants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MTU5Mg=="}, "originalCommit": {"oid": "6b4c18fac7c7c954210c02f32dd2b0f52d79957d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc0Nzg0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozOTozN1rOFa7O_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MDo0NVrOFa7Q-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3Nzc4OA==", "bodyText": "You are creating a big thread pool here, could you share why? Is 15 really necessary?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363777788", "createdAt": "2020-01-07T14:39:37Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.constants.ProfileConstants;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+@DefaultImplementor\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static final ILog logger = LogManager.getLogger(ProfileTaskExecutionService.class);\n+\n+    private final static ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODI5Ng==", "bodyText": "All tasks should be no conflicts, then it should be a single thread task scheduler.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363778296", "createdAt": "2020-01-07T14:40:45Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.constants.ProfileConstants;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+@DefaultImplementor\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static final ILog logger = LogManager.getLogger(ProfileTaskExecutionService.class);\n+\n+    private final static ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3Nzc4OA=="}, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc1MzM5OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MTozMVrOFa7Sdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MTozMVrOFa7Sdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODY3OQ==", "bodyText": "Same question for this scheduler. The task should only start after the prev one finished, right? If so, why two schedulers?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363778679", "createdAt": "2020-01-07T14:41:31Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.constants.ProfileConstants;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+@DefaultImplementor\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static final ILog logger = LogManager.getLogger(ProfileTaskExecutionService.class);\n+\n+    private final static ScheduledExecutorService PROFILE_TASK_READY_SCHEDULE = Executors.newScheduledThreadPool(15, new DefaultNamedThreadFactory(\"PROFILE-TASK-READY-SCHEDULE\"));\n+    private final static ScheduledExecutorService PROFILE_TASK_FINISH_SCHEDULE = Executors.newScheduledThreadPool(2, new DefaultNamedThreadFactory(\"PROFILE-TASK-FINISH-SHCEDULE\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc1NjYzOnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-receivers.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MjozNFrOFa7UZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MjozNFrOFa7UZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3OTE3Mw==", "bodyText": "This receiver has no document description, please add it.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363779173", "createdAt": "2020-01-07T14:42:34Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-receivers.md", "diffHunk": "@@ -42,6 +42,8 @@ receiver_zipkin:\n     host: 0.0.0.0\n     port: 9411\n     contextPath: /\n+receiver-profile:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc2MTExOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/CacheUpdateTimer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0Mzo1MVrOFa7XCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0Mzo1MVrOFa7XCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3OTg0OQ==", "bodyText": "Why say NoneStream? There is no stream related thing here.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363779849", "createdAt": "2020-01-07T14:43:51Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/CacheUpdateTimer.java", "diffHunk": "@@ -115,4 +121,25 @@ private void updateNetAddressInventory(ModuleDefineHolder moduleDefineHolder) {\n             }\n         });\n     }\n+\n+    /**\n+     * update all profile task list for each service\n+     * @param moduleDefineHolder\n+     */\n+    private void updateProfileTaskNoneStream(ModuleDefineHolder moduleDefineHolder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc3MzAxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0NzoyMVrOFa7eVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0NzoyMVrOFa7eVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MTcxNw==", "bodyText": "Why related to NoneStream?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363781717", "createdAt": "2020-01-07T14:47:21Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/CoreModuleConfig.java", "diffHunk": "@@ -67,6 +67,11 @@\n     private long maxSizeOfEndpointInventory = 1_000_000L;\n     private long maxSizeOfNetworkInventory = 1_000_000L;\n \n+    /**\n+     * Following are cache setting for none stream(s)\n+     */\n+    private long maxSizeOfProfileTaskNoneStream = 10_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc3Nzc5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODo0M1rOFa7hNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODo0M1rOFa7hNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MjQ1NQ==", "bodyText": "If this is only used internally, it should not be a public method.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363782455", "createdAt": "2020-01-07T14:48:43Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.cache;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import org.apache.skywalking.oap.server.core.CoreModuleConfig;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;\n+import org.apache.skywalking.oap.server.core.storage.StorageModule;\n+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * cache need to execute profile task\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskCache implements Service {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProfileTaskCache.class);\n+\n+    private final Cache<Integer, List<ProfileTask>> profileTaskCache;\n+\n+    private final ModuleManager moduleManager;\n+    private IProfileTaskQueryDAO profileTaskQueryDAO;\n+\n+    public ProfileTaskCache(ModuleManager moduleManager, CoreModuleConfig moduleConfig) {\n+        this.moduleManager = moduleManager;\n+\n+        long initialSize = moduleConfig.getMaxSizeOfProfileTaskNoneStream() / 10L;\n+        int initialCapacitySize = (int)(initialSize > Integer.MAX_VALUE ? Integer.MAX_VALUE : initialSize);\n+\n+        profileTaskCache = CacheBuilder.newBuilder().initialCapacity(initialCapacitySize).maximumSize(moduleConfig.getMaxSizeOfProfileTaskNoneStream())\n+                // remove old profile task data\n+                .expireAfterWrite(Duration.ofMinutes(1)).build();\n+    }\n+\n+    public IProfileTaskQueryDAO getProfileTaskQueryDAO() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Njc4MjEwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MDowNVrOFa7kCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MDozMFrOFa7k3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MzE3Nw==", "bodyText": "Your cache already has auto-refresh mechanism, there is no need to read again.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363783177", "createdAt": "2020-01-07T14:50:05Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.cache;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import org.apache.skywalking.oap.server.core.CoreModuleConfig;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;\n+import org.apache.skywalking.oap.server.core.storage.StorageModule;\n+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * cache need to execute profile task\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskCache implements Service {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProfileTaskCache.class);\n+\n+    private final Cache<Integer, List<ProfileTask>> profileTaskCache;\n+\n+    private final ModuleManager moduleManager;\n+    private IProfileTaskQueryDAO profileTaskQueryDAO;\n+\n+    public ProfileTaskCache(ModuleManager moduleManager, CoreModuleConfig moduleConfig) {\n+        this.moduleManager = moduleManager;\n+\n+        long initialSize = moduleConfig.getMaxSizeOfProfileTaskNoneStream() / 10L;\n+        int initialCapacitySize = (int)(initialSize > Integer.MAX_VALUE ? Integer.MAX_VALUE : initialSize);\n+\n+        profileTaskCache = CacheBuilder.newBuilder().initialCapacity(initialCapacitySize).maximumSize(moduleConfig.getMaxSizeOfProfileTaskNoneStream())\n+                // remove old profile task data\n+                .expireAfterWrite(Duration.ofMinutes(1)).build();\n+    }\n+\n+    public IProfileTaskQueryDAO getProfileTaskQueryDAO() {\n+        if (Objects.isNull(profileTaskQueryDAO)) {\n+            profileTaskQueryDAO = moduleManager.find(StorageModule.NAME).provider().getService(IProfileTaskQueryDAO.class);\n+        }\n+        return profileTaskQueryDAO;\n+    }\n+\n+    /**\n+     * query executable profile task\n+     * @param serviceId\n+     * @return\n+     */\n+    public List<ProfileTask> getProfileTaskList(int serviceId) {\n+        List<ProfileTask> profileTaskList = profileTaskCache.getIfPresent(serviceId);\n+\n+        if (Objects.isNull(profileTaskList)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MzM4OQ==", "bodyText": "If this section is not required, #getProfileTaskQueryDAO method is not required too.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r363783389", "createdAt": "2020-01-07T14:50:30Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ProfileTaskCache.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.cache;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import org.apache.skywalking.oap.server.core.CoreModuleConfig;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.query.entity.ProfileTask;\n+import org.apache.skywalking.oap.server.core.storage.StorageModule;\n+import org.apache.skywalking.oap.server.core.storage.profile.IProfileTaskQueryDAO;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * cache need to execute profile task\n+ *\n+ * @author MrPro\n+ */\n+public class ProfileTaskCache implements Service {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProfileTaskCache.class);\n+\n+    private final Cache<Integer, List<ProfileTask>> profileTaskCache;\n+\n+    private final ModuleManager moduleManager;\n+    private IProfileTaskQueryDAO profileTaskQueryDAO;\n+\n+    public ProfileTaskCache(ModuleManager moduleManager, CoreModuleConfig moduleConfig) {\n+        this.moduleManager = moduleManager;\n+\n+        long initialSize = moduleConfig.getMaxSizeOfProfileTaskNoneStream() / 10L;\n+        int initialCapacitySize = (int)(initialSize > Integer.MAX_VALUE ? Integer.MAX_VALUE : initialSize);\n+\n+        profileTaskCache = CacheBuilder.newBuilder().initialCapacity(initialCapacitySize).maximumSize(moduleConfig.getMaxSizeOfProfileTaskNoneStream())\n+                // remove old profile task data\n+                .expireAfterWrite(Duration.ofMinutes(1)).build();\n+    }\n+\n+    public IProfileTaskQueryDAO getProfileTaskQueryDAO() {\n+        if (Objects.isNull(profileTaskQueryDAO)) {\n+            profileTaskQueryDAO = moduleManager.find(StorageModule.NAME).provider().getService(IProfileTaskQueryDAO.class);\n+        }\n+        return profileTaskQueryDAO;\n+    }\n+\n+    /**\n+     * query executable profile task\n+     * @param serviceId\n+     * @return\n+     */\n+    public List<ProfileTask> getProfileTaskList(int serviceId) {\n+        List<ProfileTask> profileTaskList = profileTaskCache.getIfPresent(serviceId);\n+\n+        if (Objects.isNull(profileTaskList)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MzE3Nw=="}, "originalCommit": {"oid": "052e0b69084796f0d7b5d3f70b25322ef52af87c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODc1Njk0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzozOTozOVrOFbOpmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwODowODo0MFrOFbPKyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5NTg5Ng==", "bodyText": "I think we don't need this part. All tasks should be in the PROFILE_TASK_SCHEDULE. Could you share why we need this?", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r364095896", "createdAt": "2020-01-08T07:39:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.constants.ProfileConstants;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+@DefaultImplementor\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static final ILog logger = LogManager.getLogger(ProfileTaskExecutionService.class);\n+\n+    // add a schedule while waiting for the task to start or finish\n+    private final static ScheduledExecutorService PROFILE_TASK_SCHEDULE = Executors.newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory(\"PROFILE-TASK-SCHEDULE\"));\n+\n+    // last command create time, use to next query task list\n+    private volatile long lastCommandCreateTime = -1;\n+\n+    // current processing profile task context\n+    private final AtomicReference<ProfileTaskExecutionContext> taskExecutionContext = new AtomicReference<>();\n+\n+    // profile task list, include running and waiting running tasks\n+    private final List<ProfileTask> profileTaskList = Collections.synchronizedList(new LinkedList<>());\n+\n+    /**\n+     * get profile task from OAP\n+     * @param task\n+     */\n+    public void addProfileTask(ProfileTask task) {\n+        // update last command create time\n+        if (task.getCreateTime() > lastCommandCreateTime) {\n+            lastCommandCreateTime = task.getCreateTime();\n+        }\n+\n+        // check profile task limit\n+        final String dataError = checkProfileTaskSuccess(task);\n+        if (dataError != null) {\n+            logger.warn(\"check command error, cannot process this profile task. reason: {}\", dataError);\n+            return;\n+        }\n+\n+        // add task to list\n+        profileTaskList.add(task);\n+\n+        // check task start now or make a schedule\n+        long timeFromStartMills = task.getStartTime() - System.currentTimeMillis();\n+        if (timeFromStartMills < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457f5ccbc6aaeedcf557ecf9fe6c02b61cebb55d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDEwNDM5NA==", "bodyText": "If sniffer restart, It will also get the task from OAP, maybe some task before the current time. I used to think that the schedule could not pass in negative numbers, and I found that there would be no errors. resolved.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r364104394", "createdAt": "2020-01-08T08:08:40Z", "author": {"login": "mrproliu"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.constants.ProfileConstants;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+@DefaultImplementor\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static final ILog logger = LogManager.getLogger(ProfileTaskExecutionService.class);\n+\n+    // add a schedule while waiting for the task to start or finish\n+    private final static ScheduledExecutorService PROFILE_TASK_SCHEDULE = Executors.newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory(\"PROFILE-TASK-SCHEDULE\"));\n+\n+    // last command create time, use to next query task list\n+    private volatile long lastCommandCreateTime = -1;\n+\n+    // current processing profile task context\n+    private final AtomicReference<ProfileTaskExecutionContext> taskExecutionContext = new AtomicReference<>();\n+\n+    // profile task list, include running and waiting running tasks\n+    private final List<ProfileTask> profileTaskList = Collections.synchronizedList(new LinkedList<>());\n+\n+    /**\n+     * get profile task from OAP\n+     * @param task\n+     */\n+    public void addProfileTask(ProfileTask task) {\n+        // update last command create time\n+        if (task.getCreateTime() > lastCommandCreateTime) {\n+            lastCommandCreateTime = task.getCreateTime();\n+        }\n+\n+        // check profile task limit\n+        final String dataError = checkProfileTaskSuccess(task);\n+        if (dataError != null) {\n+            logger.warn(\"check command error, cannot process this profile task. reason: {}\", dataError);\n+            return;\n+        }\n+\n+        // add task to list\n+        profileTaskList.add(task);\n+\n+        // check task start now or make a schedule\n+        long timeFromStartMills = task.getStartTime() - System.currentTimeMillis();\n+        if (timeFromStartMills < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5NTg5Ng=="}, "originalCommit": {"oid": "457f5ccbc6aaeedcf557ecf9fe6c02b61cebb55d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0ODc2NzkzOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzo0NDo1OVrOFbOv5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwNzo0NDo1OVrOFbOv5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA5NzUwOA==", "bodyText": "This comment is not right. Should re-word to\n\nActive the selected profile task to execution task, and start a removal task for it.", "url": "https://github.com/apache/skywalking/pull/4172#discussion_r364097508", "createdAt": "2020-01-08T07:44:59Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/profile/ProfileTaskExecutionService.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.profile;\n+\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultNamedThreadFactory;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.network.constants.ProfileConstants;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.*;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Profile task executor, use {@link #addProfileTask(ProfileTask)} to add a new profile task.\n+ *\n+ * @author MrPro\n+ */\n+@DefaultImplementor\n+public class ProfileTaskExecutionService implements BootService {\n+\n+    private static final ILog logger = LogManager.getLogger(ProfileTaskExecutionService.class);\n+\n+    // add a schedule while waiting for the task to start or finish\n+    private final static ScheduledExecutorService PROFILE_TASK_SCHEDULE = Executors.newSingleThreadScheduledExecutor(new DefaultNamedThreadFactory(\"PROFILE-TASK-SCHEDULE\"));\n+\n+    // last command create time, use to next query task list\n+    private volatile long lastCommandCreateTime = -1;\n+\n+    // current processing profile task context\n+    private final AtomicReference<ProfileTaskExecutionContext> taskExecutionContext = new AtomicReference<>();\n+\n+    // profile task list, include running and waiting running tasks\n+    private final List<ProfileTask> profileTaskList = Collections.synchronizedList(new LinkedList<>());\n+\n+    /**\n+     * get profile task from OAP\n+     * @param task\n+     */\n+    public void addProfileTask(ProfileTask task) {\n+        // update last command create time\n+        if (task.getCreateTime() > lastCommandCreateTime) {\n+            lastCommandCreateTime = task.getCreateTime();\n+        }\n+\n+        // check profile task limit\n+        final String dataError = checkProfileTaskSuccess(task);\n+        if (dataError != null) {\n+            logger.warn(\"check command error, cannot process this profile task. reason: {}\", dataError);\n+            return;\n+        }\n+\n+        // add task to list\n+        profileTaskList.add(task);\n+\n+        // check task start now or make a schedule\n+        long timeFromStartMills = task.getStartTime() - System.currentTimeMillis();\n+        if (timeFromStartMills < 0) {\n+            // task already can start\n+            processProfileTask(task);\n+        } else {\n+            // need to be a schedule to start task\n+            PROFILE_TASK_SCHEDULE.schedule(new Runnable() {\n+                @Override\n+                public void run() {\n+                    processProfileTask(task);\n+                }\n+            }, timeFromStartMills, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    /**\n+     * real process a new profile task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457f5ccbc6aaeedcf557ecf9fe6c02b61cebb55d"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4488, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}