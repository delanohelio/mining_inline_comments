{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDg4Mjgw", "number": 5202, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1NTozM1rOETSxag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoyMjoxM1rOEWCOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY1OTYyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1NTozM1rOG48dUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowNjoyOFrOG83vmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mzk4NQ==", "bodyText": "Others are HashMap, this is LinkedHashMap. Why?", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462363985", "createdAt": "2020-07-29T14:55:33Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -138,42 +139,12 @@ public MetricsValues readMetricsValues(final MetricsCondition condition,\n         });\n \n         SearchResponse response = getClient().ids(condition.getName(), ids.toArray(new String[0]));\n-        Map<String, Map<String, Object>> idMap = toMap(response);\n-\n-        Map<String, MetricsValues> labeledValues = new HashMap<>(labels.size());\n-        labels.forEach(label -> {\n-            MetricsValues labelValue = new MetricsValues();\n-            labelValue.setLabel(label);\n-\n-            labeledValues.put(label, labelValue);\n-        });\n-\n-        final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-        for (String id : ids) {\n-            if (idMap.containsKey(id)) {\n-                Map<String, Object> source = idMap.get(id);\n-                DataTable multipleValues = new DataTable((String) source.getOrDefault(valueColumnName, \"\"));\n-\n-                labels.forEach(label -> {\n-                    final IntValues values = labeledValues.get(label).getValues();\n-                    Long data = multipleValues.get(label);\n-                    if (data == null) {\n-                        data = (long) defaultValue;\n-                    }\n-                    KVInt kv = new KVInt();\n-                    kv.setId(id);\n-                    kv.setValue(data);\n-                    values.addKVInt(kv);\n-                });\n-            }\n-\n+        Map<String, DataTable> idMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzUxOQ==", "bodyText": "by mistake.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466067519", "createdAt": "2020-08-05T23:56:03Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -138,42 +139,12 @@ public MetricsValues readMetricsValues(final MetricsCondition condition,\n         });\n \n         SearchResponse response = getClient().ids(condition.getName(), ids.toArray(new String[0]));\n-        Map<String, Map<String, Object>> idMap = toMap(response);\n-\n-        Map<String, MetricsValues> labeledValues = new HashMap<>(labels.size());\n-        labels.forEach(label -> {\n-            MetricsValues labelValue = new MetricsValues();\n-            labelValue.setLabel(label);\n-\n-            labeledValues.put(label, labelValue);\n-        });\n-\n-        final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-        for (String id : ids) {\n-            if (idMap.containsKey(id)) {\n-                Map<String, Object> source = idMap.get(id);\n-                DataTable multipleValues = new DataTable((String) source.getOrDefault(valueColumnName, \"\"));\n-\n-                labels.forEach(label -> {\n-                    final IntValues values = labeledValues.get(label).getValues();\n-                    Long data = multipleValues.get(label);\n-                    if (data == null) {\n-                        data = (long) defaultValue;\n-                    }\n-                    KVInt kv = new KVInt();\n-                    kv.setId(id);\n-                    kv.setValue(data);\n-                    values.addKVInt(kv);\n-                });\n-            }\n-\n+        Map<String, DataTable> idMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mzk4NQ=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MTA1MQ==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466481051", "createdAt": "2020-08-06T15:06:28Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -138,42 +139,12 @@ public MetricsValues readMetricsValues(final MetricsCondition condition,\n         });\n \n         SearchResponse response = getClient().ids(condition.getName(), ids.toArray(new String[0]));\n-        Map<String, Map<String, Object>> idMap = toMap(response);\n-\n-        Map<String, MetricsValues> labeledValues = new HashMap<>(labels.size());\n-        labels.forEach(label -> {\n-            MetricsValues labelValue = new MetricsValues();\n-            labelValue.setLabel(label);\n-\n-            labeledValues.put(label, labelValue);\n-        });\n-\n-        final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-        for (String id : ids) {\n-            if (idMap.containsKey(id)) {\n-                Map<String, Object> source = idMap.get(id);\n-                DataTable multipleValues = new DataTable((String) source.getOrDefault(valueColumnName, \"\"));\n-\n-                labels.forEach(label -> {\n-                    final IntValues values = labeledValues.get(label).getValues();\n-                    Long data = multipleValues.get(label);\n-                    if (data == null) {\n-                        data = (long) defaultValue;\n-                    }\n-                    KVInt kv = new KVInt();\n-                    kv.setId(id);\n-                    kv.setValue(data);\n-                    values.addKVInt(kv);\n-                });\n-            }\n-\n+        Map<String, DataTable> idMap = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mzk4NQ=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY4MTQ4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMDowNVrOG48q6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowNzoxMFrOG83xdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA==", "bodyText": "I feel like you should just copy the old codes rather than re-implement.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462367464", "createdAt": "2020-07-29T15:00:05Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2ODg0Mw==", "bodyText": "Once you have the allLabels, copying is a safer way. This re-implementation is hard to be reviewed.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462368843", "createdAt": "2020-07-29T15:01:56Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTUxOA==", "bodyText": "Could you revert them? Is there any block there?", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462369518", "createdAt": "2020-07-29T15:02:51Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjYzOQ==", "bodyText": "I used to follow copy and past strategy but found it would bring more mess more than what I expect. Unlike Es, H2 and Influxdb don't fetch all data before composing the final result object. That causes I have to tweak the current algorithm unavoidably. Future more, there are too many iterations that bring some performance concerns, I want to optimize it in the new implement.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466066639", "createdAt": "2020-08-05T23:53:09Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2Njg1Nw==", "bodyText": "I agree with that lamda is too hard to review. I'd like to improve it with other code styles.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466066857", "createdAt": "2020-08-05T23:53:54Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzMyMw==", "bodyText": "And I also add a unit test case to help define the behavior of this function. Please review it to check if it cover the main scope.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466067323", "createdAt": "2020-08-05T23:55:26Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MTUyNw==", "bodyText": "Updated, open a new thread for review if necessary.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466481527", "createdAt": "2020-08-06T15:07:10Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY4MjI0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTowMDoxNVrOG48rYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowNjoxOFrOG83vIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzU4Ng==", "bodyText": "Why orElse(0L)?", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462367586", "createdAt": "2020-07-29T15:00:15Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            return allLabels.stream()\n+                .flatMap(label -> ids.stream()\n+                    .map(id -> Tuple.of(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse(0L))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzQ0MA==", "bodyText": "I should be defaultValue.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466067440", "createdAt": "2020-08-05T23:55:45Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            return allLabels.stream()\n+                .flatMap(label -> ids.stream()\n+                    .map(id -> Tuple.of(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse(0L))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzU4Ng=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MDkzMA==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466480930", "createdAt": "2020-08-06T15:06:18Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            return allLabels.stream()\n+                .flatMap(label -> ids.stream()\n+                    .map(id -> Tuple.of(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse(0L))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzU4Ng=="}, "originalCommit": {"oid": "e35868394e1d2caee27051e1a629115f6c808734"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTM5NzM2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoxODowNFrOG9IUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMToxMTo1NFrOG9zKUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjYyMA==", "bodyText": "According this the documents, this #newTreeSet is deprecated\n   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as\n   * deprecated. Instead, use the {@code TreeSet} constructor directly, taking advantage of the new\n   * <a href=\"http://goo.gl/iz2Wi\">\"diamond\" syntax</a>.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466752620", "createdAt": "2020-08-07T00:18:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44116af3d8fb39928a5066289c021e963654fed"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1NDU0Ng==", "bodyText": "done", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r467454546", "createdAt": "2020-08-08T11:11:54Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjYyMA=="}, "originalCommit": {"oid": "d44116af3d8fb39928a5066289c021e963654fed"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQwMjAwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoyMDo0MFrOG9IXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMToxMjoxNlrOG9zKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzI4Nw==", "bodyText": "I think this nested expression should be better formated manually than IDE.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                new LabeledValue(label, id, Optional.ofNullable(\n          \n          \n            \n                                    idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n          \n          \n            \n                                new LabeledValue(\n          \n          \n            \n                                    label, \n          \n          \n            \n                                    id, \n          \n          \n            \n                                    Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue)))\n          \n          \n            \n                                )", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466753287", "createdAt": "2020-08-07T00:20:40Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44116af3d8fb39928a5066289c021e963654fed"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1NDU3NQ==", "bodyText": "done.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r467454575", "createdAt": "2020-08-08T11:12:16Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzI4Nw=="}, "originalCommit": {"oid": "d44116af3d8fb39928a5066289c021e963654fed"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTQwNTQxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDoyMjoxM1rOG9IYyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxMToxMjo0MVrOG9zKkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzczOA==", "bodyText": "You are using each.label.equals, then !Strings.isNullOrEmpty(current.getLabel()) isn't required, right?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n          \n          \n            \n                            if (each.label.equals(current.getLabel())) {\n          \n      \n    \n    \n  \n\nOr you need to check each.label != null, from my understanding.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466753738", "createdAt": "2020-08-07T00:22:13Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n+                .collect(toList());\n+            MetricsValues current = new MetricsValues();\n+            List<MetricsValues> result = new ArrayList<>();\n+            for (LabeledValue each : labeledValues) {\n+                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d44116af3d8fb39928a5066289c021e963654fed"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1NDYxMQ==", "bodyText": "Objects.equals is a better choice.", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r467454611", "createdAt": "2020-08-08T11:12:41Z", "author": {"login": "hanahmily"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n+                .collect(toList());\n+            MetricsValues current = new MetricsValues();\n+            List<MetricsValues> result = new ArrayList<>();\n+            for (LabeledValue each : labeledValues) {\n+                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzczOA=="}, "originalCommit": {"oid": "d44116af3d8fb39928a5066289c021e963654fed"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 119, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}