{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NzkxMjc5", "number": 6066, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzozMjo1MVrOFJHjgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoyNToxOFrOFJ8E7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTA1MjgzOnYy", "diffSide": "LEFT", "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/dao/MetricsEs7DAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzozMjo1MVrOILZiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwNzozMjo1MVrOILZiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgyMzYwNQ==", "bodyText": "Are you sure about this? ES7 client needs recompiling.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548823605", "createdAt": "2020-12-25T07:32:51Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/dao/MetricsEs7DAO.java", "diffHunk": "@@ -20,30 +20,12 @@\n \n import org.apache.skywalking.oap.server.core.analysis.metrics.Metrics;\n import org.apache.skywalking.oap.server.core.storage.StorageBuilder;\n-import org.apache.skywalking.oap.server.core.storage.model.Model;\n import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n import org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.MetricsEsDAO;\n-import org.elasticsearch.action.search.SearchResponse;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n \n public class MetricsEs7DAO extends MetricsEsDAO {\n \n     MetricsEs7DAO(final ElasticSearchClient client, final StorageBuilder<Metrics> storageBuilder) {\n         super(client, storageBuilder);\n     }\n-\n-    @Override\n-    public List<Metrics> multiGet(Model model, List<String> ids) throws IOException {\n-        SearchResponse response = getClient().ids(model.getName(), ids.toArray(new String[0]));\n-\n-        List<Metrics> result = new ArrayList<>(response.getHits().getHits().length);\n-        for (int i = 0; i < response.getHits().getHits().length; i++) {\n-            Metrics source = storageBuilder.map2Data(response.getHits().getAt(i).getSourceAsMap());\n-            result.add(source);\n-        }\n-        return result;\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39f8d7d4a4274426725e0bead0617c75f607365d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTk1MzIxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMTo0MDoxN1rOILgDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwOToyMDo1OVrOILiDIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDQ3Nw==", "bodyText": "Don't format the unchanged codes", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548930477", "createdAt": "2020-12-26T01:40:17Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -91,11 +92,12 @@\n         this.dataCarrier.consume(ConsumerPoolFactory.INSTANCE.get(name), new PersistentConsumer());\n \n         MetricsCreator metricsCreator = moduleDefineHolder.find(TelemetryModule.NAME)\n-                .provider()\n-                .getService(MetricsCreator.class);\n+                                                          .provider()\n+                                                          .getService(MetricsCreator.class);\n         aggregationCounter = metricsCreator.createCounter(\n-                \"metrics_aggregation\", \"The number of rows in aggregation\",\n-                new MetricsTag.Keys(\"metricName\", \"level\", \"dimensionality\"), new MetricsTag.Values(model.getName(), \"2\", model.getDownsampling().getName())\n+            \"metrics_aggregation\", \"The number of rows in aggregation\",\n+            new MetricsTag.Keys(\"metricName\", \"level\", \"dimensionality\"),\n+            new MetricsTag.Values(model.getName(), \"2\", model.getDownsampling().getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MzEwNw==", "bodyText": "This is still changed.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548963107", "createdAt": "2020-12-26T09:20:59Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -91,11 +92,12 @@\n         this.dataCarrier.consume(ConsumerPoolFactory.INSTANCE.get(name), new PersistentConsumer());\n \n         MetricsCreator metricsCreator = moduleDefineHolder.find(TelemetryModule.NAME)\n-                .provider()\n-                .getService(MetricsCreator.class);\n+                                                          .provider()\n+                                                          .getService(MetricsCreator.class);\n         aggregationCounter = metricsCreator.createCounter(\n-                \"metrics_aggregation\", \"The number of rows in aggregation\",\n-                new MetricsTag.Keys(\"metricName\", \"level\", \"dimensionality\"), new MetricsTag.Values(model.getName(), \"2\", model.getDownsampling().getName())\n+            \"metrics_aggregation\", \"The number of rows in aggregation\",\n+            new MetricsTag.Keys(\"metricName\", \"level\", \"dimensionality\"),\n+            new MetricsTag.Values(model.getName(), \"2\", model.getDownsampling().getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDQ3Nw=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTk1Mzg4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMTo0MTo1OFrOILgD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwOTowOTozNlrOILh_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDU1NQ==", "bodyText": "final Stream<Metrics> metricsStream = metrics.stream().filter(m -> !context.containsKey(m));\nI think this stream is better choice for metricsDAO#multiGet, WDYT?", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548930555", "createdAt": "2020-12-26T01:41:58Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -209,15 +211,11 @@ private void loadFromStorage(List<Metrics> metrics) throws IOException {\n             context.clear();\n         }\n \n-        List<String> notInCacheIds = new ArrayList<>();\n-        for (Metrics metric : metrics) {\n-            if (!context.containsKey(metric)) {\n-                notInCacheIds.add(metric.id());\n-            }\n-        }\n-\n-        if (notInCacheIds.size() > 0) {\n-            List<Metrics> metricsList = metricsDAO.multiGet(model, notInCacheIds);\n+        List<Metrics> notInCacheMetrics = metrics.stream()\n+                                                 .filter(m -> !context.containsKey(m))\n+                                                 .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDU3NQ==", "bodyText": "This could avoid duplicated for loop before and inside metricsDAO#multiGet", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548930575", "createdAt": "2020-12-26T01:42:24Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -209,15 +211,11 @@ private void loadFromStorage(List<Metrics> metrics) throws IOException {\n             context.clear();\n         }\n \n-        List<String> notInCacheIds = new ArrayList<>();\n-        for (Metrics metric : metrics) {\n-            if (!context.containsKey(metric)) {\n-                notInCacheIds.add(metric.id());\n-            }\n-        }\n-\n-        if (notInCacheIds.size() > 0) {\n-            List<Metrics> metricsList = metricsDAO.multiGet(model, notInCacheIds);\n+        List<Metrics> notInCacheMetrics = metrics.stream()\n+                                                 .filter(m -> !context.containsKey(m))\n+                                                 .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDU1NQ=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MjI3Ng==", "bodyText": "Passing the stream as an argument is very dangerous. Because stream can be consumed only one time.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548962276", "createdAt": "2020-12-26T09:09:36Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -209,15 +211,11 @@ private void loadFromStorage(List<Metrics> metrics) throws IOException {\n             context.clear();\n         }\n \n-        List<String> notInCacheIds = new ArrayList<>();\n-        for (Metrics metric : metrics) {\n-            if (!context.containsKey(metric)) {\n-                notInCacheIds.add(metric.id());\n-            }\n-        }\n-\n-        if (notInCacheIds.size() > 0) {\n-            List<Metrics> metricsList = metricsDAO.multiGet(model, notInCacheIds);\n+        List<Metrics> notInCacheMetrics = metrics.stream()\n+                                                 .filter(m -> !context.containsKey(m))\n+                                                 .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMDU1NQ=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTk5NjYyOnYy", "diffSide": "RIGHT", "path": "test/e2e/e2e-test/docker/storage/docker-compose.influxdb.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMjo1MjowMlrOILgVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMjo1MjowMlrOILgVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNTExMA==", "bodyText": "This should not be committed, the directory name (/var/run/influxdb2) is OS-dependent.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548935110", "createdAt": "2020-12-26T02:52:02Z", "author": {"login": "kezhenxu94"}, "path": "test/e2e/e2e-test/docker/storage/docker-compose.influxdb.yml", "diffHunk": "@@ -22,6 +22,8 @@ services:\n       - 8086\n     networks:\n       - e2e\n+    volumes:\n+      - /var/run/influxdb2:/var/lib/influxdb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTk5ODM1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMjo1NDozM1rOILgWfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMzo1NDoyN1rOILgmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNTI5NQ==", "bodyText": "You added a Traffic interface, I thinks this part should be refactored by leveraging that interface?", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548935295", "createdAt": "2020-12-26T02:54:33Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "diffHunk": "@@ -54,7 +56,10 @@ public static void addModel(Model model) {\n             storageAndColumnMap.put(columnName.getStorageName(), columnName.getName());\n         });\n \n+        final boolean isTrafficTable;\n         if (model.getName().endsWith(\"_traffic\")) {\n+            isTrafficTable = true;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNjUzNA==", "bodyText": "For now, there is no chance to declare this. Model is not related to this. From the design perspective, there is no concept called metadata anymore.\nRight now, there are several places in influxdb storage option having this kind of name based mechanism, sadly.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548936534", "createdAt": "2020-12-26T03:13:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "diffHunk": "@@ -54,7 +56,10 @@ public static void addModel(Model model) {\n             storageAndColumnMap.put(columnName.getStorageName(), columnName.getName());\n         });\n \n+        final boolean isTrafficTable;\n         if (model.getName().endsWith(\"_traffic\")) {\n+            isTrafficTable = true;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNTI5NQ=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzOTI5OQ==", "bodyText": "You added a Traffic interface, I thinks this part should be refactored by leveraging that interface?\n\nFor now, there is no chance to declare this. Model is not related to this. From the design perspective, there is no concept called metadata anymore.\nRight now, there are several places in influxdb storage option having this kind of name based mechanism, sadly.\n\n\n\n  \n    \n      skywalking/oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/MetricsDAO.java\n    \n    \n        Lines 66 to 68\n      in\n      2d646ee\n    \n    \n    \n    \n\n        \n          \n           if (metaInfo.isTrafficTable()) { \n        \n\n        \n          \n               queryStr = metrics.stream() \n        \n\n        \n          \n                                 .map(m -> (Traffic) m) \n        \n    \n  \n\n\nIf so, this part looks very strange, it casts the metrics as Traffic with a condition isTrafficTable(), seems to be fragile and error prone because isTrafficTable() has no guarantee that the metrics can be casted as Traffic.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548939299", "createdAt": "2020-12-26T03:54:27Z", "author": {"login": "kezhenxu94"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "diffHunk": "@@ -54,7 +56,10 @@ public static void addModel(Model model) {\n             storageAndColumnMap.put(columnName.getStorageName(), columnName.getName());\n         });\n \n+        final boolean isTrafficTable;\n         if (model.getName().endsWith(\"_traffic\")) {\n+            isTrafficTable = true;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNTI5NQ=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjAxOTQyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Traffic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMzoyODowOFrOILgfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMzoyODowOFrOILgfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNzU1NA==", "bodyText": "We have StorageData#id already.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548937554", "createdAt": "2020-12-26T03:28:08Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Traffic.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+public interface Traffic {\n+\n+    String id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjAyMDQ5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Traffic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwMzoyOTozOVrOILgfxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwOToyNzoxMFrOILiFJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNzY2OA==", "bodyText": "Model has the getName. I can't see the point of Traffic interface.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548937668", "createdAt": "2020-12-26T03:29:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Traffic.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+public interface Traffic {\n+\n+    String id();\n+\n+    String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk1MDU4MQ==", "bodyText": "In Model, getName represents the model name, not a field of model.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548950581", "createdAt": "2020-12-26T06:35:20Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Traffic.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+public interface Traffic {\n+\n+    String id();\n+\n+    String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNzY2OA=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MzYyMw==", "bodyText": "See my latest comment, still have concern about this.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548963623", "createdAt": "2020-12-26T09:27:10Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Traffic.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis;\n+\n+public interface Traffic {\n+\n+    String id();\n+\n+    String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNzY2OA=="}, "originalCommit": {"oid": "2d646ee98142584d6dcc50f8e3bd146b7f4be6ff"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjI1NjI2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwOToyMzowMlrOILiDnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwOToyMzowMlrOILiDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MzIyOA==", "bodyText": "I have a feeling, stream#count === a whole loop. Could you confirm?", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548963228", "createdAt": "2020-12-26T09:23:02Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -209,18 +211,9 @@ private void loadFromStorage(List<Metrics> metrics) throws IOException {\n             context.clear();\n         }\n \n-        List<String> notInCacheIds = new ArrayList<>();\n-        for (Metrics metric : metrics) {\n-            if (!context.containsKey(metric)) {\n-                notInCacheIds.add(metric.id());\n-            }\n-        }\n-\n-        if (notInCacheIds.size() > 0) {\n-            List<Metrics> metricsList = metricsDAO.multiGet(model, notInCacheIds);\n-            for (Metrics metric : metricsList) {\n-                context.put(metric, metric);\n-            }\n+        Stream<Metrics> stream = metrics.stream().filter(m -> !context.containsKey(m));\n+        if (stream.count() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c6145f06d3e7a791bc339195052ae022f5033e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjI1ODgyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpoint/EndpointTraffic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQwOToyNjoxMFrOILiEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwMzo0NToxMlrOILwyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MzUxMA==", "bodyText": "If you says this implementing Traffic#name, the name is exactly the id(as nodeType related to name logically). What is the point of doing this?", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548963510", "createdAt": "2020-12-26T09:26:10Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpoint/EndpointTraffic.java", "diffHunk": "@@ -39,7 +40,7 @@\n     builder = EndpointTraffic.Builder.class, processor = MetricsStreamProcessor.class)\n @MetricsExtension(supportDownSampling = false, supportUpdate = false)\n @EqualsAndHashCode\n-public class EndpointTraffic extends Metrics {\n+public class EndpointTraffic extends Metrics implements Traffic {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28c6145f06d3e7a791bc339195052ae022f5033e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIwNDUzOQ==", "bodyText": "After discussion, let's use @Metadata to separate this from real metrics.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r549204539", "createdAt": "2020-12-28T03:45:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/endpoint/EndpointTraffic.java", "diffHunk": "@@ -39,7 +40,7 @@\n     builder = EndpointTraffic.Builder.class, processor = MetricsStreamProcessor.class)\n @MetricsExtension(supportDownSampling = false, supportUpdate = false)\n @EqualsAndHashCode\n-public class EndpointTraffic extends Metrics {\n+public class EndpointTraffic extends Metrics implements Traffic {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2MzUxMA=="}, "originalCommit": {"oid": "28c6145f06d3e7a791bc339195052ae022f5033e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjM3NzQ1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMjoxMDoyN1rOILi4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMjoxMDoyN1rOILi4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk3NjY1Ng==", "bodyText": "Look like the codes back to double loops?", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r548976656", "createdAt": "2020-12-26T12:10:27Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsPersistentWorker.java", "diffHunk": "@@ -209,18 +211,11 @@ private void loadFromStorage(List<Metrics> metrics) throws IOException {\n             context.clear();\n         }\n \n-        List<String> notInCacheIds = new ArrayList<>();\n-        for (Metrics metric : metrics) {\n-            if (!context.containsKey(metric)) {\n-                notInCacheIds.add(metric.id());\n-            }\n-        }\n-\n-        if (notInCacheIds.size() > 0) {\n-            List<Metrics> metricsList = metricsDAO.multiGet(model, notInCacheIds);\n-            for (Metrics metric : metricsList) {\n-                context.put(metric, metric);\n-            }\n+        List<Metrics> noInCacheMetrics = metrics.stream()\n+                                                .filter(m -> !context.containsKey(m))\n+                                                .collect(Collectors.toList());\n+        if (!noInCacheMetrics.isEmpty()) {\n+            metricsDAO.multiGet(model, noInCacheMetrics).forEach(m -> context.put(m, m));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ce9dda96d4472575946479bdb92fb91780c9fe"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTM2NDE3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/MetricsDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzozNjo0OFrOIL5s2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMzozNjo0OFrOIL5s2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1MDYxOA==", "bodyText": "Don't like this, but seems don't have much better idea. Adding an interface seems not vey helpful. cc @kezhenxu94", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r549350618", "createdAt": "2020-12-28T13:36:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/MetricsDAO.java", "diffHunk": "@@ -57,11 +62,47 @@ public MetricsDAO(InfluxClient client, StorageBuilder<Metrics> storageBuilder) {\n     }\n \n     @Override\n-    public List<Metrics> multiGet(Model model, List<String> ids) throws IOException {\n-        final WhereQueryImpl<SelectQueryImpl> query = select()\n-            .raw(ALL_FIELDS)\n-            .from(client.getDatabase(), model.getName())\n-            .where(contains(\"id\", Joiner.on(\"|\").join(ids)));\n+    public List<Metrics> multiGet(Model model, List<Metrics> metrics) throws IOException {\n+        final TableMetaInfo metaInfo = TableMetaInfo.get(model.getName());\n+        final String queryStr;\n+        if (model.getName().endsWith(\"_traffic\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e1a78293a3a49b73cc8220c66a9eac7ef77943"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTY1ODA0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjoyNToxOFrOIMeMoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTo0Njo0MFrOIMm42A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODU3Ng==", "bodyText": "InstanceTraffic#Name is a big data set, are you sure you need this as a tag?", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r549948576", "createdAt": "2020-12-30T06:25:18Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "diffHunk": "@@ -54,15 +54,25 @@ public static void addModel(Model model) {\n             storageAndColumnMap.put(columnName.getStorageName(), columnName.getName());\n         });\n \n+        storageAndTagMap.put(InstanceTraffic.NAME, InfluxConstants.TagName.NAME);\n         if (model.getName().endsWith(\"_traffic\")) {\n-            // instance_traffic service_id, endpoint_traffic service_id\n-            if (InstanceTraffic.INDEX_NAME.equals(model.getName())\n-                || EndpointTraffic.INDEX_NAME.equals(model.getName())) {\n-                storageAndTagMap.put(EndpointTraffic.SERVICE_ID, InfluxConstants.TagName.SERVICE_ID);\n-            } else {\n+            switch (model.getName()) {\n+                // instance_traffic name, service_id\n+                case InstanceTraffic.INDEX_NAME: {\n+                    storageAndTagMap.put(InstanceTraffic.NAME, InfluxConstants.TagName.NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03d225910f5826cda110b73e592ecbfb6275608"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA5MDk2OA==", "bodyText": "MetadataQuery#getServiceInstances dependent on NAME to avoid duplication records.", "url": "https://github.com/apache/skywalking/pull/6066#discussion_r550090968", "createdAt": "2020-12-30T09:46:40Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/TableMetaInfo.java", "diffHunk": "@@ -54,15 +54,25 @@ public static void addModel(Model model) {\n             storageAndColumnMap.put(columnName.getStorageName(), columnName.getName());\n         });\n \n+        storageAndTagMap.put(InstanceTraffic.NAME, InfluxConstants.TagName.NAME);\n         if (model.getName().endsWith(\"_traffic\")) {\n-            // instance_traffic service_id, endpoint_traffic service_id\n-            if (InstanceTraffic.INDEX_NAME.equals(model.getName())\n-                || EndpointTraffic.INDEX_NAME.equals(model.getName())) {\n-                storageAndTagMap.put(EndpointTraffic.SERVICE_ID, InfluxConstants.TagName.SERVICE_ID);\n-            } else {\n+            switch (model.getName()) {\n+                // instance_traffic name, service_id\n+                case InstanceTraffic.INDEX_NAME: {\n+                    storageAndTagMap.put(InstanceTraffic.NAME, InfluxConstants.TagName.NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODU3Ng=="}, "originalCommit": {"oid": "a03d225910f5826cda110b73e592ecbfb6275608"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4694, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}