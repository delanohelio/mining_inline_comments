{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMTQ5Mjk5", "number": 5132, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjo1NDo0NlrOEUP8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMjozMTo1NlrOEYc80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjY4MTc3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjo1NDo0NlrOG6a9JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjo1NDo0NlrOG6a9JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMjIyOA==", "bodyText": "traceQueryIndices -> recordQueryIndices", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r463912228", "createdAt": "2020-08-01T02:54:46Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -55,6 +56,21 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return split index name based on time bucket.\n+     */\n+    public static String[] traceQueryIndices(String indexName, long startSecondTB, long endSecondTB) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d95270f8a14ac429adfc28ed3bc74970a8e4da"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjY4Njg4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzowMDo0M1rOG6a_gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzowMDo0M1rOG6a_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMjgzNQ==", "bodyText": "Still, the issue is, currently, we don't ask for time range because of trace id query.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r463912835", "createdAt": "2020-08-01T03:00:43Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -115,7 +116,8 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n \n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        String[] indices = TimeSeriesUtils.traceQueryIndices(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d95270f8a14ac429adfc28ed3bc74970a8e4da"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjYwNjk3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozNTo1MFrOG-Hn8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozOTozMlrOG-Hu3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4OTgwOQ==", "bodyText": "So, does this means, once the time buckets don't exist, still use the alias name, right?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467789809", "createdAt": "2020-08-10T09:35:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MTU4MQ==", "bodyText": "yes,the is plan B", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467791581", "createdAt": "2020-08-10T09:39:32Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4OTgwOQ=="}, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjYxMzc4OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozNzo1M1rOG-Hr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTozOTowMVrOG-Ht5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MDgxNA==", "bodyText": "Is rangeTimeName actually timeBucketColName?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467790814", "createdAt": "2020-08-10T09:37:53Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {\n+\n+    public static SearchResponse search(ElasticSearchClient client,\n+                                        String rangeTimeName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MTMzNQ==", "bodyText": "yes", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467791335", "createdAt": "2020-08-10T09:39:01Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {\n+\n+    public static SearchResponse search(ElasticSearchClient client,\n+                                        String rangeTimeName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5MDgxNA=="}, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjYyNjY1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTo0MTo0OFrOG-HzdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoxMjozM1rOG-ItTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5Mjc1Nw==", "bodyText": "Based on the implementation, is this method should be more specific about it is for searchOnSuperDataSet? In the L40, you call #querySuperDatasetIndices directly.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467792757", "createdAt": "2020-08-10T09:41:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {\n+\n+    public static SearchResponse search(ElasticSearchClient client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNzU2Ng==", "bodyText": "in my first option, the range query client is working on metrics or record data\nbut when i submit superdataset day step pr, i thought the query cient would not works well in mertics or normal record data.\nso i renamed the client as superdataset range query client\nthe client is designed to extract range query condition from sourcebuilder rather than input again.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467807566", "createdAt": "2020-08-10T10:12:33Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {\n+\n+    public static SearchResponse search(ElasticSearchClient client,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5Mjc1Nw=="}, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjY0NTkwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTo0ODowNFrOG-H_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTo0ODowNFrOG-H_DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5NTcyNQ==", "bodyText": "Don't add a client with static methods, that break the code style.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467795725", "createdAt": "2020-08-10T09:48:04Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjY1MjQ5OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOTo1MDowNVrOG-IDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDowNzo0MVrOG-Ikhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5NjczOA==", "bodyText": "There is recursion, why?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467796738", "createdAt": "2020-08-10T09:50:05Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {\n+\n+    public static SearchResponse search(ElasticSearchClient client,\n+                                        String rangeTimeName,\n+                                        String indexName,\n+                                        SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        Optional<RangeQueryBuilder> timeRangeQueryBuilder = findTimeRangeQueryBuilder(searchSourceBuilder, rangeTimeName);\n+        String[] indexNames = timeRangeQueryBuilder.map(item -> querySuperDatasetIndices(indexName, (Long) item.from(), (Long) item.to()))\n+                                                   .orElseGet(() -> new String[] {indexName});\n+        return client.search(indexNames, searchSourceBuilder);\n+    }\n+\n+    /**\n+     * query rangeQueryBuilder on different query ways\n+     *\n+     * @param searchSourceBuilder es query params\n+     * @param rangeTimeName       the range time name define in es query params\n+     * @return the time range query builder\n+     */\n+    private static Optional<RangeQueryBuilder> findTimeRangeQueryBuilder(final SearchSourceBuilder searchSourceBuilder,\n+                                                                         final String rangeTimeName) {\n+        QueryBuilder query = searchSourceBuilder.query();\n+        if (query instanceof RangeQueryBuilder) {\n+            RangeQueryBuilder rangeQueryBuilder = (RangeQueryBuilder) query;\n+            return rangeQueryBuilder.fieldName().equals(rangeTimeName) ? Optional.of(rangeQueryBuilder) : Optional.empty();\n+        } else if (query instanceof BoolQueryBuilder) {\n+            return findTimeRangeQueryBuilder(rangeTimeName, ((BoolQueryBuilder) query).must(), ((BoolQueryBuilder) query).filter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwNTMxOA==", "bodyText": "it is just a overload method", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r467805318", "createdAt": "2020-08-10T10:07:41Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/SuperDatasetRangeElasticSearchClient.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.skywalking.oap.server.library.client.elasticsearch.ElasticSearchClient;\n+import org.elasticsearch.action.search.SearchResponse;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.RangeQueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+\n+import static org.apache.skywalking.oap.server.storage.plugin.elasticsearch.base.TimeSeriesUtils.querySuperDatasetIndices;\n+\n+public class SuperDatasetRangeElasticSearchClient {\n+\n+    public static SearchResponse search(ElasticSearchClient client,\n+                                        String rangeTimeName,\n+                                        String indexName,\n+                                        SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        Optional<RangeQueryBuilder> timeRangeQueryBuilder = findTimeRangeQueryBuilder(searchSourceBuilder, rangeTimeName);\n+        String[] indexNames = timeRangeQueryBuilder.map(item -> querySuperDatasetIndices(indexName, (Long) item.from(), (Long) item.to()))\n+                                                   .orElseGet(() -> new String[] {indexName});\n+        return client.search(indexNames, searchSourceBuilder);\n+    }\n+\n+    /**\n+     * query rangeQueryBuilder on different query ways\n+     *\n+     * @param searchSourceBuilder es query params\n+     * @param rangeTimeName       the range time name define in es query params\n+     * @return the time range query builder\n+     */\n+    private static Optional<RangeQueryBuilder> findTimeRangeQueryBuilder(final SearchSourceBuilder searchSourceBuilder,\n+                                                                         final String rangeTimeName) {\n+        QueryBuilder query = searchSourceBuilder.query();\n+        if (query instanceof RangeQueryBuilder) {\n+            RangeQueryBuilder rangeQueryBuilder = (RangeQueryBuilder) query;\n+            return rangeQueryBuilder.fieldName().equals(rangeTimeName) ? Optional.of(rangeQueryBuilder) : Optional.empty();\n+        } else if (query instanceof BoolQueryBuilder) {\n+            return findTimeRangeQueryBuilder(rangeTimeName, ((BoolQueryBuilder) query).must(), ((BoolQueryBuilder) query).filter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5NjczOA=="}, "originalCommit": {"oid": "cf26352290e314e33505e688403a901b9a18a494"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzA2NzAxOnYy", "diffSide": "RIGHT", "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxOTozN1rOG-xhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMjo1MFrOG-5TWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NjMxNQ==", "bodyText": "I think we don't need this method in public, right?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468476315", "createdAt": "2020-08-11T10:19:37Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);\n+    }\n+\n+    public SearchResponse search(String[] indexNames, SearchSourceBuilder searchSourceBuilder) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwMzczOA==", "bodyText": "yes", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468603738", "createdAt": "2020-08-11T14:02:50Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);\n+    }\n+\n+    public SearchResponse search(String[] indexNames, SearchSourceBuilder searchSourceBuilder) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NjMxNQ=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzA3NTY3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoyMjoxMlrOG-xm6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTozNDozNVrOG-9l0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NzY3NQ==", "bodyText": "Could you explain a little more about why we need this?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468477675", "createdAt": "2020-08-11T10:22:12Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);\n+    }\n+\n+    public SearchResponse search(String[] indexNames, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        indexNames = Arrays.stream(indexNames).map(this::formatIndexName).toArray(String[]::new);\n+        return doSearch(searchSourceBuilder, indexNames);\n+    }\n+\n+    private SearchResponse doSearch(SearchSourceBuilder searchSourceBuilder,\n+                                    String... indexNames) throws IOException {\n+        SearchRequest searchRequest = new SearchRequest(indexNames);\n+        searchRequest.indicesOptions(IndicesOptions.fromOptions(true, true, true, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwMzY1OQ==", "bodyText": "for example:\nif user select a time range : 2020.08.01==>2020.08.31\nour index only has xxx-segment-2020.08.10\nif pass so many unavailable index to before search,we will got a exception notice  xxx index is not exist\nso the param is to ignore unexist index", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468603659", "createdAt": "2020-08-11T14:02:44Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);\n+    }\n+\n+    public SearchResponse search(String[] indexNames, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        indexNames = Arrays.stream(indexNames).map(this::formatIndexName).toArray(String[]::new);\n+        return doSearch(searchSourceBuilder, indexNames);\n+    }\n+\n+    private SearchResponse doSearch(SearchSourceBuilder searchSourceBuilder,\n+                                    String... indexNames) throws IOException {\n+        SearchRequest searchRequest = new SearchRequest(indexNames);\n+        searchRequest.indicesOptions(IndicesOptions.fromOptions(true, true, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NzY3NQ=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxMTYwNg==", "bodyText": "Are other values default?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468611606", "createdAt": "2020-08-11T14:13:18Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);\n+    }\n+\n+    public SearchResponse search(String[] indexNames, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        indexNames = Arrays.stream(indexNames).map(this::formatIndexName).toArray(String[]::new);\n+        return doSearch(searchSourceBuilder, indexNames);\n+    }\n+\n+    private SearchResponse doSearch(SearchSourceBuilder searchSourceBuilder,\n+                                    String... indexNames) throws IOException {\n+        SearchRequest searchRequest = new SearchRequest(indexNames);\n+        searchRequest.indicesOptions(IndicesOptions.fromOptions(true, true, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NzY3NQ=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY3NDAwMg==", "bodyText": "i read the source code, in my opion, this config nedd to be manually set", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468674002", "createdAt": "2020-08-11T15:34:35Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);\n+    }\n+\n+    public SearchResponse search(String[] indexNames, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        indexNames = Arrays.stream(indexNames).map(this::formatIndexName).toArray(String[]::new);\n+        return doSearch(searchSourceBuilder, indexNames);\n+    }\n+\n+    private SearchResponse doSearch(SearchSourceBuilder searchSourceBuilder,\n+                                    String... indexNames) throws IOException {\n+        SearchRequest searchRequest = new SearchRequest(indexNames);\n+        searchRequest.indicesOptions(IndicesOptions.fromOptions(true, true, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NzY3NQ=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzQ1MDM3OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoxNjowMVrOG-1HLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowMzowN1rOG-5UIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNTA4NQ==", "bodyText": "I think this should be renamed to superDatasetIndexName, right?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468535085", "createdAt": "2020-08-11T12:16:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwMzkzOA==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468603938", "createdAt": "2020-08-11T14:03:07Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzNTA4NQ=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU5MDU1OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1NDo0OFrOG-2cYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTozMDo0MFrOG-9bzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Njg5Nw==", "bodyText": "I think basically, we don't need this method. Read Joda lib, such as  LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES)", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468556897", "createdAt": "2020-08-11T12:54:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);\n+        return IntStream.rangeClosed(0, steps)\n+                        .mapToObj(step -> indexName + Const.LINE + startDateTime.plusDays(Math.toIntExact(SUPER_DATASET_DAY_STEP * step)).toString(TIME_BUCKET_FORMATTER))\n+                        .toArray(String[]::new);\n+    }\n+\n+    private static long convert2DayTimeBucket(long timeBucket) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNDI5NQ==", "bodyText": "thx for your notice", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468604295", "createdAt": "2020-08-11T14:03:37Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);\n+        return IntStream.rangeClosed(0, steps)\n+                        .mapToObj(step -> indexName + Const.LINE + startDateTime.plusDays(Math.toIntExact(SUPER_DATASET_DAY_STEP * step)).toString(TIME_BUCKET_FORMATTER))\n+                        .toArray(String[]::new);\n+    }\n+\n+    private static long convert2DayTimeBucket(long timeBucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Njg5Nw=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMTczMw==", "bodyText": "the method is to convert input time bucket to yyyyMMdd.\nfor example the input long maybe following:\n\nyyyyMMdd\nyyyyMMddHH\n2.yyyyMMddHHmm\n3.yyyyMMddHHmmss", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468621733", "createdAt": "2020-08-11T14:23:38Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);\n+        return IntStream.rangeClosed(0, steps)\n+                        .mapToObj(step -> indexName + Const.LINE + startDateTime.plusDays(Math.toIntExact(SUPER_DATASET_DAY_STEP * step)).toString(TIME_BUCKET_FORMATTER))\n+                        .toArray(String[]::new);\n+    }\n+\n+    private static long convert2DayTimeBucket(long timeBucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Njg5Nw=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNzA2NA==", "bodyText": "Really? From my check, all these are running for TimeRangeIndexNameMaker and Trace query, the input parameter is always startSecondTB? Why it could be different formats?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468627064", "createdAt": "2020-08-11T14:30:53Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);\n+        return IntStream.rangeClosed(0, steps)\n+                        .mapToObj(step -> indexName + Const.LINE + startDateTime.plusDays(Math.toIntExact(SUPER_DATASET_DAY_STEP * step)).toString(TIME_BUCKET_FORMATTER))\n+                        .toArray(String[]::new);\n+    }\n+\n+    private static long convert2DayTimeBucket(long timeBucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Njg5Nw=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY3MTQzNg==", "bodyText": "sorry.i am wrong.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468671436", "createdAt": "2020-08-11T15:30:40Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);\n+        return IntStream.rangeClosed(0, steps)\n+                        .mapToObj(step -> indexName + Const.LINE + startDateTime.plusDays(Math.toIntExact(SUPER_DATASET_DAY_STEP * step)).toString(TIME_BUCKET_FORMATTER))\n+                        .toArray(String[]::new);\n+    }\n+\n+    private static long convert2DayTimeBucket(long timeBucket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Njg5Nw=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU5NjY2OnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1NjoyM1rOG-2gJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo1OTozOFrOG-2n-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Nzg2Mg==", "bodyText": "Max with 0? Do you avoid negative value? What happens when the steps == 0?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468557862", "createdAt": "2020-08-11T12:56:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1OTA1NQ==", "bodyText": "I think this method should simply follow this logic,\n\nList all days between startTime and endTime.\nUse compressTimeBucket to get all indexes(could have duplicated records)\nDistinct the list.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468559055", "createdAt": "2020-08-11T12:58:26Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Nzg2Mg=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1OTg2NQ==", "bodyText": "The above processes may need a little refactor about the compressTimeBucket method, I should be able to accept DateTime as one parameter too.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r468559865", "createdAt": "2020-08-11T12:59:38Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/base/TimeSeriesUtils.java", "diffHunk": "@@ -60,6 +61,31 @@ public static String latestWriteIndexName(Model model) {\n         }\n     }\n \n+    /**\n+     * @return Concrete index name for super dataset index\n+     */\n+    public static String[] querySuperDatasetIndices(String indexName, long startTimeBucket, long endTimeBucket) {\n+        if (startTimeBucket == 0 || endTimeBucket == 0) {\n+            return new String[] {indexName};\n+        }\n+        long startDay = compressTimeBucket(convert2DayTimeBucket(startTimeBucket), SUPER_DATASET_DAY_STEP);\n+        long endDay = compressTimeBucket(convert2DayTimeBucket(endTimeBucket), SUPER_DATASET_DAY_STEP);\n+        DateTime startDateTime = TIME_BUCKET_FORMATTER.parseDateTime(startDay + \"\");\n+        DateTime endDateTime = TIME_BUCKET_FORMATTER.parseDateTime(endDay + \"\");\n+\n+        int steps = Math.max((Days.daysBetween(startDateTime, endDateTime).getDays()) / SUPER_DATASET_DAY_STEP, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Nzg2Mg=="}, "originalCommit": {"oid": "2d7ff376c8f9a8febac52a473e4e511abe8d3565"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDk4NDM0OnYy", "diffSide": "RIGHT", "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODoxNTowNlrOG_WqqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo1NDoyM1rOG_YIEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NDg0MQ==", "bodyText": "Why need and call search again? And in both methods, you are only doing the formatIndexName. I think the namespace would be added twice.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r469084841", "createdAt": "2020-08-12T08:15:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "252ff71ebad1e90d297521641bd070f134135c21"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NTYyOQ==", "bodyText": "What happens if the indexNames#size == 0?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r469085629", "createdAt": "2020-08-12T08:16:33Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NDg0MQ=="}, "originalCommit": {"oid": "252ff71ebad1e90d297521641bd070f134135c21"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4Nzg4Mw==", "bodyText": "get real index name by String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\ndo search search(indexNames, searchSourceBuilder) input is real indexNames.\n\nin TimeSeriesUtils, the default name is alias name ,so the input would not be empty", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r469087883", "createdAt": "2020-08-12T08:20:29Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NDg0MQ=="}, "originalCommit": {"oid": "252ff71ebad1e90d297521641bd070f134135c21"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDUxNw==", "bodyText": "You are calling another search, not doSearch. That is what I am asking. Please recheck the codes.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r469104517", "createdAt": "2020-08-12T08:47:33Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NDg0MQ=="}, "originalCommit": {"oid": "252ff71ebad1e90d297521641bd070f134135c21"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNjExNg==", "bodyText": "sorry", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r469106116", "createdAt": "2020-08-12T08:50:10Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NDg0MQ=="}, "originalCommit": {"oid": "252ff71ebad1e90d297521641bd070f134135c21"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODc1NQ==", "bodyText": "Do we still need another search(array)?", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r469108755", "createdAt": "2020-08-12T08:54:23Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -331,9 +333,25 @@ public boolean deleteTemplate(String indexName) throws IOException {\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return search(indexNames, searchSourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4NDg0MQ=="}, "originalCommit": {"oid": "252ff71ebad1e90d297521641bd070f134135c21"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTkwNzQzOnYy", "diffSide": "RIGHT", "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0Nzo0OFrOHAq65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0Nzo0OFrOHAq65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NTI1Mg==", "bodyText": "You refactor this method, but forgot the indexName = formatIndexName(indexName);, which is used to exist.\nI think that is the reason, your PR is not working.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470465252", "createdAt": "2020-08-14T07:47:48Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-library/library-client/src/main/java/org/apache/skywalking/oap/server/library/client/elasticsearch/ElasticSearchClient.java", "diffHunk": "@@ -325,15 +327,24 @@ public boolean createTemplate(String indexName, Map<String, Object> settings,\n \n     public boolean deleteTemplate(String indexName) throws IOException {\n         indexName = formatIndexName(indexName);\n-\n-        Response response = client.getLowLevelClient()\n-                                  .performRequest(HttpDelete.METHOD_NAME, \"/_template/\" + indexName);\n+        Response response = client.getLowLevelClient().performRequest(HttpDelete.METHOD_NAME, \"/_template/\" + indexName);\n         return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n     }\n \n+    public SearchResponse search(IndexNameMaker indexNameMaker, SearchSourceBuilder searchSourceBuilder) throws IOException {\n+        String[] indexNames = Arrays.stream(indexNameMaker.make()).map(this::formatIndexName).toArray(String[]::new);\n+        return doSearch(searchSourceBuilder, indexNames);\n+    }\n+\n     public SearchResponse search(String indexName, SearchSourceBuilder searchSourceBuilder) throws IOException {\n         indexName = formatIndexName(indexName);\n-        SearchRequest searchRequest = new SearchRequest(indexName);\n+        return doSearch(searchSourceBuilder, indexName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28cfea8e5b176ac521a9bf47c39985992004c462"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDc1NjAyOnYy", "diffSide": "RIGHT", "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMjozMTo1NlrOHAy2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTowNjo1MFrOHA4Miw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ==", "bodyText": "I think ES7 and ES6 should use different ESClient implementation because of SearchResponse or more things , due to different package name or something like that. Please recheck.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470595221", "createdAt": "2020-08-14T12:31:56Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NjMxNA==", "bodyText": "You could find this in the e2e logs. And es7 e2e is going to fail because of the error.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470596314", "createdAt": "2020-08-14T12:34:27Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwMjYxMQ==", "bodyText": "Notice in the current codes, ElasticSearch7Client and ElasticSearchClient have their own #search methods, your new #doSearch method has not been included in the ES 7 client.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470602611", "createdAt": "2020-08-14T12:48:06Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTA4Mg==", "bodyText": "today i test the codes in our test env  and find the bug,already fix it ,and pass the tests", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470615082", "createdAt": "2020-08-14T13:12:56Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTQ2NQ==", "bodyText": "waiting to  pass all ci proesses", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470615465", "createdAt": "2020-08-14T13:13:36Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1NDEwNg==", "bodyText": "This is a very tricky bug due to Elastic changed the package name, but with the same class name.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470654106", "createdAt": "2020-08-14T14:22:01Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4MTkxMg==", "bodyText": "yes,the error is no such method exception when testiing,i realize may be jars conflict.but took so many time to  find it", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470681912", "createdAt": "2020-08-14T15:05:20Z", "author": {"login": "EvanLjp"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY4Mjc2Mw==", "bodyText": "Finally, we get this method working, and it should be helpful to many users.", "url": "https://github.com/apache/skywalking/pull/5132#discussion_r470682763", "createdAt": "2020-08-14T15:06:50Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-storage-plugin/storage-elasticsearch7-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch7/query/TraceQueryEs7DAO.java", "diffHunk": "@@ -124,8 +125,7 @@ public TraceBrief queryBasicTraces(long startSecondTB,\n         }\n         sourceBuilder.size(limit);\n         sourceBuilder.from(from);\n-\n-        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n+        SearchResponse response = getClient().search(new TimeRangeIndexNameMaker(SegmentRecord.INDEX_NAME, startSecondTB, endSecondTB), sourceBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTIyMQ=="}, "originalCommit": {"oid": "f48bcfa85521310d2979cd2cd5d302136e9d1830"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 97, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}