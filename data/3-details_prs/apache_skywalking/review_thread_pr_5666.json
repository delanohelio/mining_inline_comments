{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMTc1OTg3", "number": 5666, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1MDowOFrOEtzyIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNDowNToxNVrOE0DJ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDY5Nzk0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1MDowOFrOHh0Jtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1MDowOFrOHh0Jtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxOTUxMQ==", "bodyText": "You should not transport the timestamp if it is a 0, otherwise, 0 would provide a super huge false latency for this RPC.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505219511", "createdAt": "2020-10-15T06:50:08Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -33,13 +36,20 @@\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        return skipAnalysis ? \"1\" : \"0\" + \"-\" + sendingTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDcwNzY3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1MTozOVrOHh0Qtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1MTozOVrOHh0Qtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyMTMwMw==", "bodyText": "This is optional, you should add if (extensionParts.length > 1) {, then get (1) and parsing. Also, you need if not empty and try/catch to avoid the empty string as it is optional, and illegal character.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505221303", "createdAt": "2020-10-15T06:51:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -54,6 +64,7 @@ void deserialize(String value) {\n         // only try to read it when it exist.\n         if (extensionParts.length > 0) {\n             this.skipAnalysis = Objects.equals(extensionParts[0], \"1\");\n+            this.sendingTimestamp = Long.parseLong(extensionParts[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDcxNzQ3OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/kafka-scenario/config/expectedData.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1Mjo1OVrOHh0XoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowODozNVrOHh1fvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyMzA3Mg==", "bodyText": "Why only Kafka test case updated? I am assuming this should relate to all MQ plugins.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505223072", "createdAt": "2020-10-15T06:52:59Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/kafka-scenario/config/expectedData.yaml", "diffHunk": "@@ -156,6 +157,7 @@ segmentItems:\n         tags:\n           - {key: mq.broker, value: 'kafka-server:9092'}\n           - {key: mq.topic, value: test.}\n+          - {key: transmission.latency, value: not null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MTUzMg==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505241532", "createdAt": "2020-10-15T07:08:35Z", "author": {"login": "EvanLjp"}, "path": "test/plugin/scenarios/kafka-scenario/config/expectedData.yaml", "diffHunk": "@@ -156,6 +157,7 @@ segmentItems:\n         tags:\n           - {key: mq.broker, value: 'kafka-server:9092'}\n           - {key: mq.topic, value: test.}\n+          - {key: transmission.latency, value: not null}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyMzA3Mg=="}, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDczMDY1OnYy", "diffSide": "RIGHT", "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1NDo1NlrOHh0hPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1NDo1NlrOHh0hPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyNTUzMw==", "bodyText": "Rename this to parseRPC, as it does more than it used to be.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505225533", "createdAt": "2020-10-15T06:54:56Z", "author": {"login": "wu-sheng"}, "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "diffHunk": "@@ -234,6 +234,12 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDczNzk3OnYy", "diffSide": "RIGHT", "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1NTo1OFrOHh0mXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowNjozNlrOHh1Wqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyNjg0Nw==", "bodyText": "We have a for span in the L240-L248 already, please don't do duplicated iteration.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505226847", "createdAt": "2020-10-15T06:55:58Z", "author": {"login": "wu-sheng"}, "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "diffHunk": "@@ -234,6 +234,12 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {\n         long latency = span.getEndTime() - span.getStartTime();\n+        for (final KeyStringValuePair keyStringValuePair : span.getTagsList()) {\n+            if (keyStringValuePair.getKey().equals(SpanTags.TRANSMISSION_LATENCY)) {\n+                latency += Integer.parseInt(keyStringValuePair.getValue());\n+                break;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzOTIxMA==", "bodyText": "Why rewrite the latency of this? We never said the latency of span/segment/service including the network when we talked about the server-side latency.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505239210", "createdAt": "2020-10-15T07:06:36Z", "author": {"login": "wu-sheng"}, "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "diffHunk": "@@ -234,6 +234,12 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {\n         long latency = span.getEndTime() - span.getStartTime();\n+        for (final KeyStringValuePair keyStringValuePair : span.getTagsList()) {\n+            if (keyStringValuePair.getKey().equals(SpanTags.TRANSMISSION_LATENCY)) {\n+                latency += Integer.parseInt(keyStringValuePair.getValue());\n+                break;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyNjg0Nw=="}, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDc2MTAyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1OToxMVrOHh02qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1OToxMVrOHh02qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzMTAxOA==", "bodyText": "Should not bespan.getStartTime() - sendingTimestamp. At here, for you, the latency is current time - sending timestamp", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505231018", "createdAt": "2020-10-15T06:59:11Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -78,19 +89,25 @@ void handle(AbstractSpan span) {\n         if (this.skipAnalysis) {\n             span.skipAnalysis();\n         }\n+        if (this.sendingTimestamp != 0) {\n+            Tags.TRANSMISSION_LATENCY.set(span, String.valueOf(span.getStartTime() - sendingTimestamp));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDc4MDQ4OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowMTo1N1rOHh1EqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowMTo1N1rOHh1EqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNDYwMA==", "bodyText": "This should be removed.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505234600", "createdAt": "2020-10-15T07:01:57Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java", "diffHunk": "@@ -124,4 +124,10 @@\n      * Should skip analysis in the backend.\n      */\n     void skipAnalysis();\n+\n+    /**\n+     * Get the start time stamp of this span.\n+     */\n+    long getStartTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDc5NzM1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowNToxM1rOHh1P5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNDowNToyNlrOHrnqDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNzQ3OQ==", "bodyText": "long -> Long, as it could be NULL if don't exist in the in-wire context.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505237479", "createdAt": "2020-10-15T07:05:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+/**\n+ * Inject or read the extension protocol fields,such as {@link ExtensionContext#sendingTimestamp}.\n+ */\n+public class ExtensionInjector {\n+\n+    private final ExtensionContext extensionContext;\n+\n+    ExtensionInjector(final ExtensionContext extensionContext) {\n+        this.extensionContext = extensionContext;\n+    }\n+\n+    public void injectSendingTimestamp() {\n+        extensionContext.setSendingTimestamp(System.currentTimeMillis());\n+    }\n+\n+    public long readSendingTimestamp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwMDU1Ng==", "bodyText": "This comment is not addressed yet, I mark it as unresolved. @EvanLjp please only mark the conversation as \"resolved\" after you have actually resolved it or have reasons not to resolve, I don't see either.\nBecause sendingTimestamp is Long, returning it from public long readSendingTimestamp() will lead to an auto-unboxing and NullPointerException", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r515500556", "createdAt": "2020-10-31T14:05:26Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+/**\n+ * Inject or read the extension protocol fields,such as {@link ExtensionContext#sendingTimestamp}.\n+ */\n+public class ExtensionInjector {\n+\n+    private final ExtensionContext extensionContext;\n+\n+    ExtensionInjector(final ExtensionContext extensionContext) {\n+        this.extensionContext = extensionContext;\n+    }\n+\n+    public void injectSendingTimestamp() {\n+        extensionContext.setSendingTimestamp(System.currentTimeMillis());\n+    }\n+\n+    public long readSendingTimestamp() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNzQ3OQ=="}, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTE2MjU3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo1OToyOVrOHh5INg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzo1OToyOVrOHh5INg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwMTA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return skipAnalysis ? \"1\" : \"0\" + \"-\" + sendingTimestamp;\n          \n          \n            \n                    return (skipAnalysis ? \"1\" : \"0\") + \"-\" + sendingTimestamp;", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505301046", "createdAt": "2020-10-15T07:59:29Z", "author": {"login": "mrproliu"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -33,13 +36,20 @@\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        return skipAnalysis ? \"1\" : \"0\" + \"-\" + sendingTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjE0MzAxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0NzowMVrOHi-qJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0NzowMVrOHi-qJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0MDIyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The latency of transmission. If there were more than one downstream endpoints, multiple tags will be recorded,\n          \n          \n            \n                 * The latency of transmission. When there are more than one downstream parent/segment-ref(s), multiple tags will be recorded,", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506440228", "createdAt": "2020-10-16T13:47:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java", "diffHunk": "@@ -77,7 +77,11 @@ private Tags() {\n      */\n     public static final StringTag MQ_TOPIC = new StringTag(9, \"mq.topic\");\n \n-    public static final StringTag TRANSMISSION_LATENCY = new StringTag(15, \"transmission.latency\");\n+    /**\n+     * The latency of transmission. If there were more than one downstream endpoints, multiple tags will be recorded,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b9a31c9047b5b41a6df8e0aca50388d078b68"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjE0NTM2OnYy", "diffSide": "RIGHT", "path": "test/plugin/scenarios/pulsar-scenario/config/expectedData.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0NzoyNVrOHi-r0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo0NzoyNVrOHi-r0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0MDY1OA==", "bodyText": "Is this format correct?", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506440658", "createdAt": "2020-10-16T13:47:25Z", "author": {"login": "wu-sheng"}, "path": "test/plugin/scenarios/pulsar-scenario/config/expectedData.yaml", "diffHunk": "@@ -83,9 +83,9 @@ segmentItems:\n       spanType: Entry\n       peer: ''\n       tags:\n-      - {key: mq.broker, value: not null}\n+        - {key: transmission.latency, value: not null}\n+        - {key: mq.broker, value: not null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b9a31c9047b5b41a6df8e0aca50388d078b68"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTQzOTE2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNjo0NDoyNVrOHjecmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwODozNTo0MFrOHjjgHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA==", "bodyText": "Maybe we should always serialize this part even if sendingTimestamp != 0? The extension fields are order-sensitive, we always need a real value or placeholder, otherwise, if the downstream agent plugin don't have this field but have their own extended fields(now for now, though), it will be trouble, WDYT? @wu-sheng", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506961048", "createdAt": "2020-10-17T16:44:25Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,30 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        String res = skipAnalysis ? \"1\" : \"0\";\n+        if (sendingTimestamp != 0) {\n+            res += \"-\" + sendingTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bd336dd06777085de5f0268894db35a4b2a6d9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NDgxMg==", "bodyText": "Yes, my previous comment is about don't serialize the 0, but - should be included.\nIt seems to be misunderstood.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506964812", "createdAt": "2020-10-17T17:25:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,30 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        String res = skipAnalysis ? \"1\" : \"0\";\n+        if (sendingTimestamp != 0) {\n+            res += \"-\" + sendingTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA=="}, "originalCommit": {"oid": "13bd336dd06777085de5f0268894db35a4b2a6d9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0MDgzMA==", "bodyText": "I have similar concerns about this, so the zero is a placeholder before. WDYT? @wu-sheng", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507040830", "createdAt": "2020-10-18T08:25:53Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,30 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        String res = skipAnalysis ? \"1\" : \"0\";\n+        if (sendingTimestamp != 0) {\n+            res += \"-\" + sendingTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA=="}, "originalCommit": {"oid": "13bd336dd06777085de5f0268894db35a4b2a6d9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0Mzg2OA==", "bodyText": "I don't like 0, as 0 is a real value, you are going to represent no value. So you could use 0- as timestamp doesn't exist.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507043868", "createdAt": "2020-10-18T08:35:40Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,30 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        String res = skipAnalysis ? \"1\" : \"0\";\n+        if (sendingTimestamp != 0) {\n+            res += \"-\" + sendingTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA=="}, "originalCommit": {"oid": "13bd336dd06777085de5f0268894db35a4b2a6d9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NjEyMzM3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwODozODoxM1rOHjji4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNDozMzo0MVrOHjrN9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ==", "bodyText": "Again, don't use 2.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507044579", "createdAt": "2020-10-18T08:38:13Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NTQzMg==", "bodyText": "ok", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507045432", "createdAt": "2020-10-18T08:40:27Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, "originalCommit": {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA3NjQyOQ==", "bodyText": "Because all parameters are passing rather than optional fields, the length of extensionParts is fixed.\nnow, the passing data maybe \"0-\" or \"0-1602743904804\", length of extensionParts must be 2.\nin the feature, if add another field, the propagate data may be \"0--\" or \"0-xxx-xxx\". And the length of extensionParts must be 3.\nI think logic greater than 0 is redundant", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507076429", "createdAt": "2020-10-18T10:12:52Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, "originalCommit": {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzEzNjg1MA==", "bodyText": "Don't require must, that is the key. If the new agent propagates 0-xxx-xxx, I hope the older agent still works, that is why I wrote this part as >0, and ask you to do >1.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507136850", "createdAt": "2020-10-18T12:54:46Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, "originalCommit": {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDAxNg==", "bodyText": "I finally understand the key: the compatibility.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507170016", "createdAt": "2020-10-18T14:31:24Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, "originalCommit": {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDI5NA==", "bodyText": "Yes, this kind of PR shows me the case is, the extension header may be used more in the future.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507170294", "createdAt": "2020-10-18T14:33:41Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, "originalCommit": {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Nzk0OTE3OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMTo1MjoyNVrOHj1j4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMjoyMTowNFrOHj3F4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzOTc0NA==", "bodyText": "Please inject  (whitespace), rather than this strange replaceAll.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507339744", "createdAt": "2020-10-19T01:52:25Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -49,11 +64,23 @@ void deserialize(String value) {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.replaceAll(\"-\", \"- \").split(\"-\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269302d35510cb9933217310ba21c9e105940755"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM1NjYyOA==", "bodyText": "I may have misunderstood what you meant, thinking you meant to pass as few characters as possible. fix it later.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507356628", "createdAt": "2020-10-19T02:11:39Z", "author": {"login": "EvanLjp"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -49,11 +64,23 @@ void deserialize(String value) {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.replaceAll(\"-\", \"- \").split(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzOTc0NA=="}, "originalCommit": {"oid": "269302d35510cb9933217310ba21c9e105940755"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM2NDgzNQ==", "bodyText": "The size is not a concern, as we have injected a much bigger sw8 header.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507364835", "createdAt": "2020-10-19T02:21:04Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -49,11 +64,23 @@ void deserialize(String value) {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.replaceAll(\"-\", \"- \").split(\"-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzOTc0NA=="}, "originalCommit": {"oid": "269302d35510cb9933217310ba21c9e105940755"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Nzk1MjIxOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMTo1Mjo1OFrOHj1l-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMTo1Mjo1OFrOHj1l-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM0MDI4MA==", "bodyText": "Please use Long to separate real 0 and NULL.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507340280", "createdAt": "2020-10-19T01:52:58Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,28 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "269302d35510cb9933217310ba21c9e105940755"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODIyNDYyOnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMjo1OTowMlrOHj4kQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMjo1OTowMlrOHj4kQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4ODk5Mw==", "bodyText": "I think you misunderstand me, I mean no value should be represented by  , the separator should always be -.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507388993", "createdAt": "2020-10-19T02:59:02Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -49,11 +73,23 @@ void deserialize(String value) {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.split(SEPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bcba15df8e91f7a8d8b4041f41de1886ad148d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU5MjQ2OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0MjoxOFrOHqycpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0MjoxOFrOHqycpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyODc3Mw==", "bodyText": "I think this equal is incorrect, as it is an object for now.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r514628773", "createdAt": "2020-10-29T23:42:18Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -100,11 +142,11 @@ public boolean equals(Object o) {\n         if (o == null || getClass() != o.getClass())\n             return false;\n         ExtensionContext that = (ExtensionContext) o;\n-        return skipAnalysis == that.skipAnalysis;\n+        return skipAnalysis == that.skipAnalysis && sendingTimestamp == that.sendingTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6967485ead0d1379446e85f625c1dfb1a0542db5"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDYwNjc4OnYy", "diffSide": "RIGHT", "path": "docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v3.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0OToyNlrOHqyk4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0OToyNlrOHqyk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMDg4MQ==", "bodyText": "The timestamp of sending at the client side. This is used in async RPC such as MQ. Once it is set, the consumer side would calculate the latency between sending and receiving, and tag it in the span by using key transmission.latency  automatically.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r514630881", "createdAt": "2020-10-29T23:49:26Z", "author": {"login": "wu-sheng"}, "path": "docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v3.md", "diffHunk": "@@ -43,5 +43,7 @@ The current value includes fields.\n 1. Tracing Mode. empty, 0 or 1. empty or 0 is default. 1 represents all spans generated in this context should skip analysis,\n `spanObject#skipAnalysis=true`. This context should be propagated to upstream in the default, unless it is changed in the \n tracing process.\n+2. The Exit span sending timestamp.  Space is the default. If the downstream timestamp was not space, the latency cost between downstream and upstream services\n+   should be tagged in the entry spans of the upstream services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6967485ead0d1379446e85f625c1dfb1a0542db5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDExNzc0OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMzo0NzoyNlrOHrnjuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMzo0NzoyNlrOHrnjuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5ODkzNg==", "bodyText": "sendingTimestamp may be null?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return skipAnalysis == that.skipAnalysis && sendingTimestamp.equals(that.sendingTimestamp);\n          \n          \n            \n                    return skipAnalysis == that.skipAnalysis && Objects.equals(sendingTimestamp, that.sendingTimestamp);", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r515498936", "createdAt": "2020-10-31T13:47:26Z", "author": {"login": "kezhenxu94"}, "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -100,11 +143,11 @@ public boolean equals(Object o) {\n         if (o == null || getClass() != o.getClass())\n             return false;\n         ExtensionContext that = (ExtensionContext) o;\n-        return skipAnalysis == that.skipAnalysis;\n+        return skipAnalysis == that.skipAnalysis && sendingTimestamp.equals(that.sendingTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8f7d5ae5b48449f17c3182512270b20a3256d0"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDEzMDg4OnYy", "diffSide": "RIGHT", "path": "docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v3.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNDowNToxNVrOHrnp-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxNDowNToxNVrOHrnp-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwMDUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. The timestamp of sending at the client side. This is used in async RPC such as MQ. Once it is set, the consumer side would calculate the latency between sending and receiving, and tag it in the span by using key transmission.latency automatically.\n          \n          \n            \n            2. The timestamp of sending at the client-side. This is used in async RPC such as MQ. Once it is set, the consumer side would calculate the latency between sending and receiving, and tag the latency in the span by using key `transmission.latency` automatically.", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r515500536", "createdAt": "2020-10-31T14:05:15Z", "author": {"login": "wu-sheng"}, "path": "docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v3.md", "diffHunk": "@@ -43,5 +43,6 @@ The current value includes fields.\n 1. Tracing Mode. empty, 0 or 1. empty or 0 is default. 1 represents all spans generated in this context should skip analysis,\n `spanObject#skipAnalysis=true`. This context should be propagated to upstream in the default, unless it is changed in the \n tracing process.\n+2. The timestamp of sending at the client side. This is used in async RPC such as MQ. Once it is set, the consumer side would calculate the latency between sending and receiving, and tag it in the span by using key transmission.latency automatically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b26de21f57dc57e4569573c87b4eb27a0b6b7374"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4905, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}