{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjM5ODA4", "number": 4857, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDo1MjoxNFrOECgeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDo1MjoxNFrOECgeYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDY0Njc1OnYy", "diffSide": "RIGHT", "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDo1MjoxNFrOGfAXDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMDowNTozOVrOGgIeXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg==", "bodyText": "So, this could be NPE, right? In some old versions.", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435164942", "createdAt": "2020-06-04T10:52:14Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MzI0Ng==", "bodyText": "this is super.get() method\npublic T get() {\n        if (HystrixRequestContext.getContextForCurrentThread() == null) {\n            throw new IllegalStateException(HystrixRequestContext.class.getSimpleName() + \".initializeContext() must be called at the beginning of each request before RequestVariable functionality can be used.\");\n        } else {\n            ConcurrentHashMap<HystrixRequestVariableDefault<?>, HystrixRequestVariableDefault.LazyInitializer<?>> variableMap = HystrixRequestContext.getContextForCurrentThread().state;\n            HystrixRequestVariableDefault.LazyInitializer<?> v = (HystrixRequestVariableDefault.LazyInitializer)variableMap.get(this);\n            if (v != null) {\n                return v.get();\n            } else {\n                HystrixRequestVariableDefault.LazyInitializer<T> l = new HystrixRequestVariableDefault.LazyInitializer(this);\n                HystrixRequestVariableDefault.LazyInitializer<?> existing = (HystrixRequestVariableDefault.LazyInitializer)variableMap.putIfAbsent(this, l);\n                return existing == null ? l.get() : existing.get();\n            }\n        }\n    }\n\nsuper.get() will trigger IllegalStateException, in some old versions", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435193246", "createdAt": "2020-06-04T11:48:36Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxMTc5Mg==", "bodyText": "Then next question is, why this method is being called? Is it called by SkyWalking plugin codes?", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435211792", "createdAt": "2020-06-04T12:24:10Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyNzM3Mw==", "bodyText": "it is called by hystrix AbstractCommand constructor.", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435227373", "createdAt": "2020-06-04T12:50:32Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyOTUyNg==", "bodyText": "My question is, the old version caller, AbstractCommand, should not call this, right? Otherwise, it triggers Illegal issue itself. Could you be more clear what context is missing", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435229526", "createdAt": "2020-06-04T12:54:01Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2ODIyNw==", "bodyText": "concurrencyStrategy is HystrixConcurrencyStrategyDefault instance in no skywalking agent, but skywalking plugin wrapped it to HystrixConcurrencyStrategy instance. not HystrixConcurrencyStrategyDefault. thus skip \"concurrencyStrategy instanceof HystrixConcurrencyStrategyDefault\" condition. i don't know where context be initialize, but when \"concurrencyStrategy instanceof HystrixConcurrencyStrategyDefault\" condition, it checkd  this \"HystrixRequestContext.isCurrentThreadInitialized()\".", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435268227", "createdAt": "2020-06-04T13:46:13Z", "author": {"login": "zifeihan"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NzQ5OA==", "bodyText": "Then, why don't we change the SkyWalking wrapper logic? It seems more reasonable, right?", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r435277498", "createdAt": "2020-06-04T13:56:19Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NjQ2MQ==", "bodyText": "With offline communication, right now, this seems the easiest solution w/o harm. I will keep this for now. Thanks.", "url": "https://github.com/apache/skywalking/pull/4857#discussion_r436346461", "createdAt": "2020-06-07T10:05:39Z", "author": {"login": "wu-sheng"}, "path": "apm-sniffer/apm-sdk-plugin/hystrix-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hystrix/v1/SWHystrixLifecycleForwardingRequestVariable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hystrix.v1;\n+\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariable;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;\n+import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle;\n+import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy;\n+\n+/**\n+ * Implementation of {@link HystrixRequestVariable} which forwards to the wrapped\n+ * {@link HystrixRequestVariableLifecycle}.\n+ * <p>\n+ * This implementation also returns null when {@link #get()} is called while the {@link HystrixRequestContext} has not\n+ * been initialized rather than throwing an exception, allowing for use in a {@link HystrixConcurrencyStrategy} which\n+ * does not depend on an a HystrixRequestContext\n+ */\n+public class SWHystrixLifecycleForwardingRequestVariable<T> extends HystrixRequestVariableDefault<T> {\n+    private final HystrixRequestVariableLifecycle<T> lifecycle;\n+\n+    /**\n+     * Creates a HystrixRequestVariable which will return data as provided by the {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param lifecycle lifecycle used to provide values. Must have the same type parameter as the constructed instance.\n+     */\n+    public SWHystrixLifecycleForwardingRequestVariable(HystrixRequestVariableLifecycle<T> lifecycle) {\n+        this.lifecycle = lifecycle;\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @return T with initial value or null if none.\n+     */\n+    @Override\n+    public T initialValue() {\n+        return lifecycle.initialValue();\n+    }\n+\n+    /**\n+     * Delegates to the wrapped {@link HystrixRequestVariableLifecycle}\n+     *\n+     * @param value of request variable to allow cleanup activity.\n+     *              <p>\n+     *              If nothing needs to be cleaned up then nothing needs to be done in this method.\n+     */\n+    @Override\n+    public void shutdown(T value) {\n+        lifecycle.shutdown(value);\n+    }\n+\n+    /**\n+     * Return null if the {@link HystrixRequestContext} has not been initialized for the current thread.\n+     * <p>\n+     * If {@link HystrixRequestContext} has been initialized then call method in superclass:\n+     * {@link HystrixRequestVariableDefault#get()}\n+     */\n+    @Override\n+    public T get() {\n+        if (!HystrixRequestContext.isCurrentThreadInitialized()) {\n+            return null;\n+        }\n+        return super.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2NDk0Mg=="}, "originalCommit": {"oid": "54e10de277755e0f85a5c81df75d06b639cb6eb3"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 187, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}