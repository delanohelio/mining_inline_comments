{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjY4ODEx", "number": 4694, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTowMTo1M1rOD1OcGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo1MDowNVrOD1k3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTM3NjkwOnYy", "diffSide": "RIGHT", "path": "oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/fetcher/prometheus/provider/PrometheusFetcherProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTowMTo1NFrOGKjhOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyMTozOVrOGKkOLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcyMDg5MQ==", "bodyText": "Is FetchProvider a demonstration?\nThe Metrics are reported by Prometheus client or SkyWalking Agent.", "url": "https://github.com/apache/skywalking/pull/4694#discussion_r413720891", "createdAt": "2020-04-23T11:01:54Z", "author": {"login": "dmsolr"}, "path": "oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/fetcher/prometheus/provider/PrometheusFetcherProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.fetcher.prometheus.provider;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;\n+import org.apache.skywalking.oap.server.core.analysis.meter.ScopeType;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.AcceptableValue;\n+import org.apache.skywalking.oap.server.fetcher.prometheus.module.PrometheusFetcherModule;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;\n+\n+public class PrometheusFetcherProvider extends ModuleProvider {\n+    private final PrometheusFetcherConfig config;\n+\n+    public PrometheusFetcherProvider() {\n+        config = new PrometheusFetcherConfig();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"default\";\n+    }\n+\n+    @Override\n+    public Class<? extends ModuleDefine> module() {\n+        return PrometheusFetcherModule.class;\n+    }\n+\n+    @Override\n+    public ModuleConfig createConfigBeanIfAbsent() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n+        final MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n+        meterSystem.create(\"test_long_metrics\", \"avg\", ScopeType.SERVICE, Long.class);\n+    }\n+\n+    @Override\n+    public void start() throws ServiceNotProvidedException, ModuleStartException {\n+\n+    }\n+\n+    @Override\n+    public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\n+        final MeterSystem service = getManager().find(CoreModule.NAME).provider().getService(MeterSystem.class);\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {\n+            @Override\n+            public void run() {\n+                final AcceptableValue<Long> value = service.buildMetrics(\"test_long_metrics\", Long.class);\n+                value.accept(MeterEntity.newService(\"abc\"), 5L);\n+                value.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n+                service.doStreamingCalculation(value);\n+            }\n+        }, 2, 2, TimeUnit.SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274cdcb854a476d9d07d96d4f47da340cdab3b5c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMjM5OQ==", "bodyText": "For demo, yes. Prometheus doesn't have client, OAP fetchs data from target instrumented applications.", "url": "https://github.com/apache/skywalking/pull/4694#discussion_r413732399", "createdAt": "2020-04-23T11:21:39Z", "author": {"login": "wu-sheng"}, "path": "oap-server/server-fetcher-plugin/prometheus-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/fetcher/prometheus/provider/PrometheusFetcherProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.fetcher.prometheus.provider;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;\n+import org.apache.skywalking.oap.server.core.analysis.meter.ScopeType;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.AcceptableValue;\n+import org.apache.skywalking.oap.server.fetcher.prometheus.module.PrometheusFetcherModule;\n+import org.apache.skywalking.oap.server.library.module.ModuleConfig;\n+import org.apache.skywalking.oap.server.library.module.ModuleDefine;\n+import org.apache.skywalking.oap.server.library.module.ModuleProvider;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.ServiceNotProvidedException;\n+\n+public class PrometheusFetcherProvider extends ModuleProvider {\n+    private final PrometheusFetcherConfig config;\n+\n+    public PrometheusFetcherProvider() {\n+        config = new PrometheusFetcherConfig();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"default\";\n+    }\n+\n+    @Override\n+    public Class<? extends ModuleDefine> module() {\n+        return PrometheusFetcherModule.class;\n+    }\n+\n+    @Override\n+    public ModuleConfig createConfigBeanIfAbsent() {\n+        return config;\n+    }\n+\n+    @Override\n+    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n+        final MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n+        meterSystem.create(\"test_long_metrics\", \"avg\", ScopeType.SERVICE, Long.class);\n+    }\n+\n+    @Override\n+    public void start() throws ServiceNotProvidedException, ModuleStartException {\n+\n+    }\n+\n+    @Override\n+    public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\n+        final MeterSystem service = getManager().find(CoreModule.NAME).provider().getService(MeterSystem.class);\n+        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {\n+            @Override\n+            public void run() {\n+                final AcceptableValue<Long> value = service.buildMetrics(\"test_long_metrics\", Long.class);\n+                value.accept(MeterEntity.newService(\"abc\"), 5L);\n+                value.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n+                service.doStreamingCalculation(value);\n+            }\n+        }, 2, 2, TimeUnit.SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcyMDg5MQ=="}, "originalCommit": {"oid": "274cdcb854a476d9d07d96d4f47da340cdab3b5c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTA1MDM2OnYy", "diffSide": "RIGHT", "path": "docs/en/setup/backend/backend-fetcher.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo1MDowNVrOGLFJCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo1MTo0NVrOGLFLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3MTc1NQ==", "bodyText": "BTW, I'm a little confused about the \"selector\", which scenariodos do we need to provide our own Prometheus fetcher provider? \ud83e\udd14\ufe0f", "url": "https://github.com/apache/skywalking/pull/4694#discussion_r414271755", "createdAt": "2020-04-24T03:50:05Z", "author": {"login": "JaredTan95"}, "path": "docs/en/setup/backend/backend-fetcher.md", "diffHunk": "@@ -0,0 +1,13 @@\n+# Open Fetcher\n+Fetcher is a concept in SkyWalking backend. It uses pulling mode rather than [receiver](backend-receivers.md), which\n+read the data from the target systems. This mode is typically in some metrics SDKs, such as Prometheus.\n+\n+## Prometheus Fetcher\n+```yaml\n+prometheus-fetcher:\n+  selector: ${SW_PROMETHEUS_FETCHER:default}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba582bc749bb9df59e2beb132794721e649a7dc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3MjMwNg==", "bodyText": "What do you mean? I think in any case, we need our own fecthcer, otherwise, who will fetch the data?", "url": "https://github.com/apache/skywalking/pull/4694#discussion_r414272306", "createdAt": "2020-04-24T03:51:45Z", "author": {"login": "wu-sheng"}, "path": "docs/en/setup/backend/backend-fetcher.md", "diffHunk": "@@ -0,0 +1,13 @@\n+# Open Fetcher\n+Fetcher is a concept in SkyWalking backend. It uses pulling mode rather than [receiver](backend-receivers.md), which\n+read the data from the target systems. This mode is typically in some metrics SDKs, such as Prometheus.\n+\n+## Prometheus Fetcher\n+```yaml\n+prometheus-fetcher:\n+  selector: ${SW_PROMETHEUS_FETCHER:default}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3MTc1NQ=="}, "originalCommit": {"oid": "2ba582bc749bb9df59e2beb132794721e649a7dc"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 265, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}