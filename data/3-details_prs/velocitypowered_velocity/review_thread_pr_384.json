{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2Mzg3NTUy", "number": 384, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoxNzoxMFrOE14mLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzozMToyNVrOE14z-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTM3MjYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoxNzoxMFrOHuaWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoxNzoxMFrOHuaWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyODM2Mg==", "bodyText": "Why only as a lambda?", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518428362", "createdAt": "2020-11-05T23:17:10Z", "author": {"login": "kashike"}, "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.velocitypowered.api.event;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface AsyncTask {\n+\n+  /**\n+   * Runs the task.\n+   *\n+   * @deprecated Should only be implemented as a lambda and called internally.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTM5Njc1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoyNjo1NVrOHuak3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzoyODowNlrOHwcfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng==", "bodyText": "AsyncSubscriber or something, maybe?", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518431966", "createdAt": "2020-11-05T23:26:55Z", "author": {"login": "kashike"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NDAyNg==", "bodyText": "In the code prototype he showed off on Discord, @Async is meant to be combined with @Subscribe.", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518454026", "createdAt": "2020-11-06T00:34:06Z", "author": {"login": "astei"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwOTU5OA==", "bodyText": "Sure, but Async is a bit vague here, especially when working with certain other libraries that have classes named the same.", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518509598", "createdAt": "2020-11-06T03:57:21Z", "author": {"login": "kashike"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3MjkzNQ==", "bodyText": "I don't think @Async will be a big problem, you're more likely to confuse the guava Subscribe with the velocity one with the current libraries, I don't see another Async class or annotation", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518772935", "createdAt": "2020-11-06T14:07:10Z", "author": {"login": "Cybermaxke"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1NDQ4OA==", "bodyText": "Perhaps then Velocity's annotation should just get a new async boolean property?", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r519154488", "createdAt": "2020-11-07T08:51:28Z", "author": {"login": "Proximyst"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzNzMyNg==", "bodyText": "Personally I prefer @Async, but an async property is also an option. @astei what do you prefer?", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r520537326", "createdAt": "2020-11-10T12:50:50Z", "author": {"login": "Cybermaxke"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU1NTg1Ng==", "bodyText": "async property gets my vote.", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r520555856", "createdAt": "2020-11-10T13:20:45Z", "author": {"login": "kashike"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MDU1MQ==", "bodyText": "async property", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r520560551", "createdAt": "2020-11-10T13:28:06Z", "author": {"login": "MrIvanPlays"}, "path": "api/src/main/java/com/velocitypowered/api/event/Async.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.velocitypowered.api.event;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks an event handler method as async. By default are events handled on the\n+ * network task executor, using this annotations performs them on an asynchronous\n+ * task executor.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+public @interface Async {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMTk2Ng=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTQwNzk1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzozMToyNVrOHuarVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMDozMjo1MFrOHub5og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMzYyMw==", "bodyText": "I'm not a huge fan of the name AsyncTask. I don't have another good name for this - perhaps EventTask or even EventContinuation would be better (and then rename AsyncTask.WithContinuation to EventContinuation.Deferred).", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518433623", "createdAt": "2020-11-05T23:31:25Z", "author": {"login": "astei"}, "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.velocitypowered.api.event;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface AsyncTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjU0NQ==", "bodyText": "I'm also not a big fan of the current naming, but I haven't found a good name to actually represent what is does. DeferredEventTask (DeferredTask) could be another option?", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518436545", "createdAt": "2020-11-05T23:40:06Z", "author": {"login": "Cybermaxke"}, "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.velocitypowered.api.event;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface AsyncTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMzYyMw=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MzY2Ng==", "bodyText": "It needs to include the word Event as otherwise it could be confused with the scheduler. I think DeferredEventTask is fine.", "url": "https://github.com/VelocityPowered/Velocity/pull/384#discussion_r518453666", "createdAt": "2020-11-06T00:32:50Z", "author": {"login": "astei"}, "path": "api/src/main/java/com/velocitypowered/api/event/AsyncTask.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.velocitypowered.api.event;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface AsyncTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMzYyMw=="}, "originalCommit": {"oid": "dafc5d2127686b1b1540362fe260b70391101930"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2724, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}