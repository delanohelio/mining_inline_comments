{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTkwNjc5", "number": 272, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoyMTo1NFrODeI96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoyNToxM1rODeJA-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTMwNzkyOnYy", "diffSide": "RIGHT", "path": "proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/PluginLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoyMTo1NFrOFnJMnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoyMTo1NFrOFnJMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4OTQ2OQ==", "bodyText": "Can we be more specific here? This bit of JavaDoc adds no information.", "url": "https://github.com/VelocityPowered/Velocity/pull/272#discussion_r376589469", "createdAt": "2020-02-07T20:21:54Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/PluginLoader.java", "diffHunk": "@@ -11,5 +13,30 @@\n \n   PluginDescription loadPlugin(Path source) throws Exception;\n \n-  PluginContainer createPlugin(PluginDescription plugin) throws Exception;\n+  /**\n+   * Creates a {@link Module} for the provided {@link PluginContainer}\n+   * and verifies that the container's {@link PluginDescription} is correct.\n+   *\n+   * <p>Does not create an instance of the plugin.</p>\n+   *\n+   * @param container the plugin container\n+   * @return the module containing bindings specific to this plugin\n+   * @throws Exception If anything went wrong", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637f6229dbed0332d8bfe49afa48c4a8d856c95"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTMxNTc4OnYy", "diffSide": "RIGHT", "path": "proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDoyNToxM1rOFnJRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDozNDoxMFrOFnJfFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5MDcyNg==", "bodyText": "If you try to inject a PluginContainer for some other plugin but that plugin doesn't exist, Guice will refuse to initialize the object for the plugin. Given that Velocity also supports optional dependencies, this isn't some strange thing that will never happen - it is a possibility.", "url": "https://github.com/VelocityPowered/Velocity/pull/272#discussion_r376590726", "createdAt": "2020-02-07T20:25:13Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java", "diffHunk": "@@ -92,19 +100,44 @@ public void loadPlugins(Path directory) throws IOException {\n         }\n       }\n \n-      // Actually create the plugin\n-      PluginContainer pluginObject;\n+      try {\n+        VelocityPluginContainer container = new VelocityPluginContainer(plugin);\n+        pluginContainers.put(container, loader.createModule(container));\n+      } catch (Exception e) {\n+        logger.error(\"Can't create module for plugin {}\", plugin.getId(), e);\n+      }\n+    }\n+\n+    // Make a global Guice module that with common bindings for every plugin\n+    AbstractModule commonModule = new AbstractModule() {\n+      @Override\n+      protected void configure() {\n+        bind(ProxyServer.class).toInstance(server);\n+        bind(PluginManager.class).toInstance(server.getPluginManager());\n+        bind(EventManager.class).toInstance(server.getEventManager());\n+        bind(CommandManager.class).toInstance(server.getCommandManager());\n+        for (PluginContainer container : pluginContainers.keySet()) {\n+          bind(PluginContainer.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637f6229dbed0332d8bfe49afa48c4a8d856c95"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5NDE5OA==", "bodyText": "Guice supports optional dependencies with\n@Inject(optional = true)", "url": "https://github.com/VelocityPowered/Velocity/pull/272#discussion_r376594198", "createdAt": "2020-02-07T20:34:10Z", "author": {"login": "alexstaeding"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java", "diffHunk": "@@ -92,19 +100,44 @@ public void loadPlugins(Path directory) throws IOException {\n         }\n       }\n \n-      // Actually create the plugin\n-      PluginContainer pluginObject;\n+      try {\n+        VelocityPluginContainer container = new VelocityPluginContainer(plugin);\n+        pluginContainers.put(container, loader.createModule(container));\n+      } catch (Exception e) {\n+        logger.error(\"Can't create module for plugin {}\", plugin.getId(), e);\n+      }\n+    }\n+\n+    // Make a global Guice module that with common bindings for every plugin\n+    AbstractModule commonModule = new AbstractModule() {\n+      @Override\n+      protected void configure() {\n+        bind(ProxyServer.class).toInstance(server);\n+        bind(PluginManager.class).toInstance(server.getPluginManager());\n+        bind(EventManager.class).toInstance(server.getEventManager());\n+        bind(CommandManager.class).toInstance(server.getCommandManager());\n+        for (PluginContainer container : pluginContainers.keySet()) {\n+          bind(PluginContainer.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5MDcyNg=="}, "originalCommit": {"oid": "0637f6229dbed0332d8bfe49afa48c4a8d856c95"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2731, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}