{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjg3NjI2", "number": 350, "title": "Respect nodes' requirements", "bodyText": "Only send the nodes to the player for which he meets the requirement.", "createdAt": "2020-08-05T10:16:23Z", "url": "https://github.com/VelocityPowered/Velocity/pull/350", "merged": true, "mergeCommit": {"oid": "bb4bff7d34c7597102038c0e786b838236a34ec8"}, "closed": true, "closedAt": "2020-08-05T15:33:03Z", "author": {"login": "MrIvanPlays"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc74bnuAH2gAyNDYzMjg3NjI2OmRmY2UyZWEyZDM5ZDllYjYzNTBkYjg3MDVjMDdjNzA1YjIyZDRhNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc79BAFgFqTQ2MTc4MTYzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52", "author": {"user": {"login": "MrIvanPlays", "name": "Ivan Pekov"}}, "url": "https://github.com/VelocityPowered/Velocity/commit/dfce2ea2d39d9eb6350db8705c07c705b22d4a52", "committedDate": "2020-08-05T10:12:28Z", "message": "Respect nodes' requirements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTM3NDI0", "url": "https://github.com/VelocityPowered/Velocity/pull/350#pullrequestreview-461537424", "createdAt": "2020-08-05T10:31:47Z", "commit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDozMTo0OFrOG8Dyzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0Mzo1MFrOG8EKFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw==", "bodyText": "This only works for BrigadierCommands, I couldn't think of a way to implement it for simple and raw commands that expect a Context object (creating the context manually is hacky at best)", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465629903", "createdAt": "2020-08-05T10:31:48Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzMjc5MA==", "bodyText": "Sorry if I'm missing something, but why do we need to treat redirects as a special case? See BrigadierUtils for a deep clone method example.", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465632790", "createdAt": "2020-08-05T10:37:28Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ==", "bodyText": "To avoid unnecessarily processing the backend server commands (which don't have a requires  predicate), I would move this filtering to https://github.com/MrIvanPlays/Velocity/blob/dfce2ea2d39d9eb6350db8705c07c705b22d4a52/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java#L175 (just above this, where the proxy commands are injected). This also avoids the cloning if the announceProxyCommands config is set to false", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465635861", "createdAt": "2020-08-05T10:43:50Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6828420517326518663d963504f363e39a69b280", "author": {"user": {"login": "MrIvanPlays", "name": "Ivan Pekov"}}, "url": "https://github.com/VelocityPowered/Velocity/commit/6828420517326518663d963504f363e39a69b280", "committedDate": "2020-08-05T11:13:51Z", "message": "Move filtering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb03ba21c73b04695e492c92f896fd0846e2e37f", "author": {"user": {"login": "MrIvanPlays", "name": "Ivan Pekov"}}, "url": "https://github.com/VelocityPowered/Velocity/commit/fb03ba21c73b04695e492c92f896fd0846e2e37f", "committedDate": "2020-08-05T12:04:42Z", "message": "Remove map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96199e09eb964bcd8f112b2180c076b25084095", "author": {"user": {"login": "MrIvanPlays", "name": "Ivan Pekov"}}, "url": "https://github.com/VelocityPowered/Velocity/commit/e96199e09eb964bcd8f112b2180c076b25084095", "committedDate": "2020-08-05T12:15:23Z", "message": "Always set the node"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzgxNjM0", "url": "https://github.com/VelocityPowered/Velocity/pull/350#pullrequestreview-461781634", "createdAt": "2020-08-05T15:32:55Z", "commit": {"oid": "e96199e09eb964bcd8f112b2180c076b25084095"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 735, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}