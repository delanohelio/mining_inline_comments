{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTM0ODMy", "number": 329, "title": "Add async suggestions", "bodyText": "Fairly simple.\nTo use them, the developer should still implement sync ones for plugins which depends on others' suggestions. Whether this includes data fetched from e.g. a database is up to them.", "createdAt": "2020-07-14T21:58:55Z", "url": "https://github.com/VelocityPowered/Velocity/pull/329", "merged": true, "mergeCommit": {"oid": "725fc2e16c1a201e74f34e344ac60917c8131340"}, "closed": true, "closedAt": "2020-07-14T22:32:12Z", "author": {"login": "Proximyst"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc09nUbAFqTQ0ODUwNDU5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1HHcWAFqTQ0ODc3NjQ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTA0NTk5", "url": "https://github.com/VelocityPowered/Velocity/pull/329#pullrequestreview-448504599", "createdAt": "2020-07-14T22:16:39Z", "commit": {"oid": "ea6a5e61a927896eed4b81eb08a1658bb7fdbd6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjoxNjo0MFrOGxnS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjoxNjo0NlrOGxnTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NzIzMw==", "bodyText": "Should run this completion stage on the event loop", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454677233", "createdAt": "2020-07-14T22:16:40Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java", "diffHunk": "@@ -449,18 +451,20 @@ public void handleTabCompleteResponse(TabCompleteResponse response) {\n \n   private void finishCommandTabComplete(TabCompleteRequest request, TabCompleteResponse response) {\n     String command = request.getCommand().substring(1);\n-    try {\n-      List<String> offers = server.getCommandManager().offerSuggestions(player, command);\n-      for (String offer : offers) {\n-        response.getOffers().add(new Offer(offer, null));\n-      }\n-      response.getOffers().sort(null);\n-      player.getConnection().write(response);\n-    } catch (Exception e) {\n-      logger.error(\"Unable to provide tab list completions for {} for command '{}'\",\n-          player.getUsername(),\n-          command, e);\n-    }\n+    server.getCommandManager().offerSuggestions(player, command)\n+        .thenAccept(offers -> {\n+          try {\n+            for (String offer : offers) {\n+              response.getOffers().add(new Offer(offer, null));\n+            }\n+            response.getOffers().sort(null);\n+            player.getConnection().write(response);\n+          } catch (Exception e) {\n+            logger.error(\"Unable to provide tab list completions for {} for command '{}'\",\n+                player.getUsername(),\n+                command, e);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6a5e61a927896eed4b81eb08a1658bb7fdbd6b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NzI5OQ==", "bodyText": "Should run this completion stage on the event loop", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454677299", "createdAt": "2020-07-14T22:16:46Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java", "diffHunk": "@@ -397,26 +397,28 @@ private boolean handleCommandTabComplete(TabCompleteRequest packet) {\n       return false;\n     }\n \n-    List<String> suggestions = server.getCommandManager().offerSuggestions(player, command);\n-    if (suggestions.isEmpty()) {\n-      return false;\n-    }\n+    server.getCommandManager().offerSuggestions(player, command)\n+        .thenAccept(suggestions -> {\n+          if (suggestions.isEmpty()) {\n+            return;\n+          }\n \n-    List<Offer> offers = new ArrayList<>();\n-    for (String suggestion : suggestions) {\n-      offers.add(new Offer(suggestion));\n-    }\n+          List<Offer> offers = new ArrayList<>();\n+          for (String suggestion : suggestions) {\n+            offers.add(new Offer(suggestion));\n+          }\n \n-    int startPos = packet.getCommand().lastIndexOf(' ') + 1;\n-    if (startPos > 0) {\n-      TabCompleteResponse resp = new TabCompleteResponse();\n-      resp.setTransactionId(packet.getTransactionId());\n-      resp.setStart(startPos);\n-      resp.setLength(packet.getCommand().length() - startPos);\n-      resp.getOffers().addAll(offers);\n-      player.getConnection().write(resp);\n-    }\n-    return true;\n+          int startPos = packet.getCommand().lastIndexOf(' ') + 1;\n+          if (startPos > 0) {\n+            TabCompleteResponse resp = new TabCompleteResponse();\n+            resp.setTransactionId(packet.getTransactionId());\n+            resp.setStart(startPos);\n+            resp.setLength(packet.getCommand().length() - startPos);\n+            resp.getOffers().addAll(offers);\n+            player.getConnection().write(resp);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6a5e61a927896eed4b81eb08a1658bb7fdbd6b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8c851d12206a80e51ef58ff0001d0919f89e57", "author": {"user": {"login": "Proximyst", "name": "Mariell Hoversholm"}}, "url": "https://github.com/VelocityPowered/Velocity/commit/9c8c851d12206a80e51ef58ff0001d0919f89e57", "committedDate": "2020-07-14T22:28:22Z", "message": "Add async command suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NTExMDQ5", "url": "https://github.com/VelocityPowered/Velocity/pull/329#pullrequestreview-448511049", "createdAt": "2020-07-14T22:32:07Z", "commit": {"oid": "9c8c851d12206a80e51ef58ff0001d0919f89e57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Nzc2NDcy", "url": "https://github.com/VelocityPowered/Velocity/pull/329#pullrequestreview-448776472", "createdAt": "2020-07-15T09:19:08Z", "commit": {"oid": "9c8c851d12206a80e51ef58ff0001d0919f89e57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxOTowOFrOGx1pAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxOTowOFrOGx1pAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMjI1OQ==", "bodyText": "I would deprecate this method/rename the other one to avoid confusing API clients. How do they know which of the 3 methods should they use?\nEdit: thinking more about it, the CompletableFuture-returning sync method smells like implementation detail. I would keep the current suggest method and add the async variant. If not, I would expect the CompletableFuture suggest method to return both the sync and async suggestions.", "url": "https://github.com/VelocityPowered/Velocity/pull/329#discussion_r454912259", "createdAt": "2020-07-15T09:19:08Z", "author": {"login": "hugmanrique"}, "path": "api/src/main/java/com/velocitypowered/api/command/RawCommand.java", "diffHunk": "@@ -29,15 +30,21 @@ default void execute(CommandSource source, String @NonNull [] args) {\n    * @param currentLine the current, partial command line for this command\n    * @return tab complete suggestions\n    */\n-  default List<String> suggest(CommandSource source, String currentLine) {\n-    return ImmutableList.of();\n+  default CompletableFuture<List<String>> suggest(CommandSource source, String currentLine) {\n+    return CompletableFuture.completedFuture(ImmutableList.of());\n   }\n \n   @Override\n-  default List<String> suggest(CommandSource source, String @NonNull [] currentArgs) {\n+  default CompletableFuture<List<String>> suggestAsync(CommandSource source,\n+      String @NonNull [] currentArgs) {\n     return suggest(source, String.join(\" \", currentArgs));\n   }\n \n+  @Override\n+  default List<String> suggest(CommandSource source, String @NonNull [] currentArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c8c851d12206a80e51ef58ff0001d0919f89e57"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 714, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}