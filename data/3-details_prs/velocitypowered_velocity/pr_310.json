{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTU5NzIx", "number": 310, "title": "[Future] 1.16 Update", "bodyText": "I hope this can be at least of some use.\nSuggestions and changes are welcome.\nSince this is the first time I'm contributing to Velocity please point out loose ends I have left, thanks.", "createdAt": "2020-05-22T22:23:34Z", "url": "https://github.com/VelocityPowered/Velocity/pull/310", "merged": true, "mergeCommit": {"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1"}, "closed": true, "closedAt": "2020-06-23T11:55:13Z", "author": {"login": "Xernium"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj53dmAH2gAyNDIyMTU5NzIxOmQzN2I2YTM2MWNiMDVmNjlkYjI2MDhjMjljNDYwOGRjNjg4MWVkYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsg_HVgH2gAyNDIyMTU5NzIxOjgzYmE3ZDYwNTFhZDhlZmNiYzNjZTU2ZWJjMGZjMmNhZWMyZWZkZmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/d37b6a361cb05f69db2608c29c4608dc6881edc7", "committedDate": "2020-05-22T22:18:36Z", "message": "Snapshot 20w21a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjEzMDA2", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-417213006", "createdAt": "2020-05-22T22:31:17Z", "commit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjozMToxN1rOGZlVmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjozNTozMFrOGZlYqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTMyMg==", "bodyText": "Add @Nullable", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479322", "createdAt": "2020-05-22T22:31:17Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -10,20 +10,25 @@\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private UUID sender;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTM4MQ==", "bodyText": "Use EMPTY_SENDER constant here", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479381", "createdAt": "2020-05-22T22:31:39Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -69,6 +86,9 @@ public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQwNA==", "bodyText": "if (", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479404", "createdAt": "2020-05-22T22:31:45Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -69,6 +86,9 @@ public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQ5MQ==", "bodyText": "// 1.16+", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479491", "createdAt": "2020-05-22T22:32:15Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -19,6 +20,11 @@\n   private int viewDistance; //1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n+  private boolean shouldKeepPlayerData;\n+  private boolean isDebug;\n+  private boolean isFlat;\n+  private String dimensionRegistryName;\n+  private CompoundTag dimensionRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTY5Ng==", "bodyText": "Move this to else if instead of nesting into else block", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479696", "createdAt": "2020-05-22T22:33:16Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -110,10 +156,15 @@ public String toString() {\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n     this.gamemode = buf.readUnsignedByte();\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-      this.dimension = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n+      this.dimensionRegistryName = ProtocolUtils.readString(buf);\n     } else {\n-      this.dimension = buf.readByte();\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTc2Mg==", "bodyText": "Move this to else if instead of nesting into else block", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479762", "createdAt": "2020-05-22T22:33:35Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -122,24 +173,37 @@ public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.maxPlayers = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n+      this.levelType = ProtocolUtils.readString(buf, 16);\n+    } else {\n+      this.levelType = \"default\"; // I didn't have the courage to rework this yet.\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_14) >= 0) {\n       this.viewDistance = ProtocolUtils.readVarInt(buf);\n     }\n     this.reducedDebugInfo = buf.readBoolean();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.showRespawnScreen = buf.readBoolean();\n     }\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      isDebug = buf.readBoolean();\n+      isFlat = buf.readBoolean();\n+    }\n   }\n \n   @Override\n   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-      buf.writeInt(dimension);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n+      ProtocolUtils.writeString(buf, dimensionRegistryName);\n     } else {\n-      buf.writeByte(dimension);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTg2NA==", "bodyText": "// added in 1.16", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429479864", "createdAt": "2020-05-22T22:34:06Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java", "diffHunk": "@@ -134,5 +134,6 @@ public static void serialize(ByteBuf buf, ArgumentType<?> type) {\n     dummy(\"minecraft:int_range\", DUMMY);\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n+    dummy(\"minecraft:uuid\", DUMMY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDAwMA==", "bodyText": "Drop this else block, move contents out from it", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429480000", "createdAt": "2020-05-22T22:34:57Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDA1NA==", "bodyText": "Could use try-resources here", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429480054", "createdAt": "2020-05-22T22:35:16Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {\n+      buf.readerIndex(indexBefore);\n+      try {\n+        DataInput input = new ByteBufInputStream(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDEwNw==", "bodyText": "See comments for readCompoundTag", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429480107", "createdAt": "2020-05-22T22:35:30Z", "author": {"login": "mikroskeem"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {\n+      buf.readerIndex(indexBefore);\n+      try {\n+        DataInput input = new ByteBufInputStream(buf);\n+        byte type = input.readByte();\n+        if (type != 10) {\n+          return null;\n+        }\n+        input.readUTF();\n+        CompoundTag ret = new CompoundTag();\n+        ret.read(input, 0);\n+        return ret;\n+      } catch (IOException e) {\n+        return null;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca73bae675d396cb584fc48e2c0548cc6595e58", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/fca73bae675d396cb584fc48e2c0548cc6595e58", "committedDate": "2020-05-23T09:46:27Z", "message": "Some minor touch-ups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197bc4f288f4b01f3348e98d84e5facb0f224518", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/197bc4f288f4b01f3348e98d84e5facb0f224518", "committedDate": "2020-05-23T09:49:27Z", "message": "Make checkstyle happy again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/38487c5bba0d2376312f663c47bbea906c32779e", "committedDate": "2020-05-23T11:03:33Z", "message": "Server-change mechanics update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjcwMzIz", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-417270323", "createdAt": "2020-05-23T11:04:46Z", "commit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMTowNDo0N1rOGZo0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMTowNDo0N1rOGZo0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzNjM1Nw==", "bodyText": "Note to self: Update the comments here", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429536357", "createdAt": "2020-05-23T11:04:47Z", "author": {"login": "Xernium"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java", "diffHunk": "@@ -334,12 +334,15 @@ public void handleBackendJoinGame(JoinGame joinGame, VelocityServerConnection de\n       // to perform entity ID rewrites, eliminating potential issues from rewriting packets and\n       // improving compatibility with mods.\n       player.getMinecraftConnection().delayedWrite(joinGame);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Mjc2MDEx", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-417276011", "createdAt": "2020-05-23T12:41:48Z", "commit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjo0MTo0OVrOGZpNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjo1MTozNVrOGZpQfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Mjg0Mg==", "bodyText": "Imo a mark + reset is cleaner than storing the offset. https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429542842", "createdAt": "2020-05-23T12:41:49Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzA1Ng==", "bodyText": "Replace constant by TagType.COMPOUND.id() (https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78 )", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429543056", "createdAt": "2020-05-23T12:44:37Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzI0MQ==", "bodyText": "See above", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429543241", "createdAt": "2020-05-23T12:47:09Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n+      }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);\n+      output.writeByte(10); // Type 10 - CompoundTag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzU0OQ==", "bodyText": "Minor nit: inconsistent use of this. Either use it for setting all fields, or use it for none.", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429543549", "createdAt": "2020-05-23T12:51:35Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java", "diffHunk": "@@ -74,33 +114,57 @@ public String toString() {\n         + \", difficulty=\" + difficulty\n         + \", gamemode=\" + gamemode\n         + \", levelType='\" + levelType + '\\''\n+        + \", shouldKeepPlayerData=\" + shouldKeepPlayerData\n+        + \", isDebug=\" + isDebug\n+        + \", isFlat='\" + isFlat\n+        + \", dimensionRegistryName='\" + dimensionRegistryName + '\\''\n         + '}';\n   }\n \n   @Override\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n-    this.dimension = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.dimensionRegistryName = ProtocolUtils.readString(buf); // Not sure what the cap on that is\n+    } else {\n+      this.dimension = buf.readInt();\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       this.difficulty = buf.readUnsignedByte();\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.gamemode = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      isDebug = buf.readBoolean();\n+      isFlat = buf.readBoolean();\n+      shouldKeepPlayerData = buf.readBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38487c5bba0d2376312f663c47bbea906c32779e"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/18e595397660ea6651bb4c86e1bb3a6addf1dd24", "committedDate": "2020-06-04T13:36:58Z", "message": "Save progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "committedDate": "2020-06-04T17:13:10Z", "message": "Checkstyle-auto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "009f207883738e3ee1b1fb51adf614fec89b8a4c", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/009f207883738e3ee1b1fb51adf614fec89b8a4c", "committedDate": "2020-06-04T19:21:54Z", "message": "More progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "368d50b4555a87f0fb5ca734947f098e86ccac96", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/368d50b4555a87f0fb5ca734947f098e86ccac96", "committedDate": "2020-06-05T13:22:55Z", "message": "Rework Dimension Registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa4a8de2fd474325927be5e221534a4f98a7a046", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/aa4a8de2fd474325927be5e221534a4f98a7a046", "committedDate": "2020-06-05T13:45:11Z", "message": "Stylize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "committedDate": "2020-06-05T13:58:34Z", "message": "Old sins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0377a6829f7b280aa35bb78219cfb86b0321ab64", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/0377a6829f7b280aa35bb78219cfb86b0321ab64", "committedDate": "2020-06-05T14:00:51Z", "message": "Move to Registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/a2134297350b943c70daeb3572e5ff56043ea80c", "committedDate": "2020-06-05T14:02:05Z", "message": "Merge from indev: 1.16-pre2\n\nFrom indev: 1.16-pre2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjczOTMz", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-425673933", "createdAt": "2020-06-05T23:08:51Z", "commit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzowODo1MVrOGf_n3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzoxNjoyN1rOGf_uBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTQzOQ==", "bodyText": "@MonotonicNonNull may be a better choice here.", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436201439", "createdAt": "2020-06-05T23:08:51Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java", "diffHunk": "@@ -53,6 +53,7 @@\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n+  private @Nullable DimensionRegistry activeDimensionRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYzOA==", "bodyText": "Do not use javax.annotation.*. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436201638", "createdAt": "2020-06-05T23:09:52Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTkwNw==", "bodyText": "This class is called DimensionRegistry and yet we have a field called dimensionRegistry. This is confusing. Can we give this a better name?", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436201907", "createdAt": "2020-06-05T23:11:12Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjExNg==", "bodyText": "This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava Maps.uniqueIndex).", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436202116", "createdAt": "2020-06-05T23:12:22Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n+    return dimensionRegistry;\n+  }\n+\n+  public @Nonnull String[] getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data\n+   */\n+  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n+    if (dimensionIdentifier == null) {\n+      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n+    }\n+    for (DimensionData iter : dimensionRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjg5OA==", "bodyText": "Do not use exceptions as a control-flow mechanism", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436202898", "createdAt": "2020-06-05T23:15:58Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n+    return dimensionRegistry;\n+  }\n+\n+  public @Nonnull String[] getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data\n+   */\n+  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n+    if (dimensionIdentifier == null) {\n+      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n+    }\n+    for (DimensionData iter : dimensionRegistry) {\n+      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n+        return iter;\n+      }\n+    }\n+    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n+            + \" doesn't exist in this Registry!\");\n+  }\n+\n+  /**\n+   * Checks a {@link DimensionInfo} against this registry.\n+   * @param toValidate the {@link DimensionInfo} to validate\n+   * @return true: the dimension information is valid for this registry\n+   */\n+  public boolean isValidFor(@Nonnull DimensionInfo toValidate) {\n+    if (toValidate == null) {\n+      throw new IllegalArgumentException(\"Dimension info cannot be null\");\n+    }\n+    try {\n+      getDimensionData(toValidate.getRegistryIdentifier());\n+      for (int i = 0; i < levelNames.length; i++) {\n+        if (levelNames[i].equals(toValidate.getRegistryIdentifier())) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    } catch (NoSuchElementException thrown) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzAxMg==", "bodyText": "Can we make this class immutable if possible?", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436203012", "createdAt": "2020-06-05T23:16:27Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f868cea5830fac6fec03fa360fd6650d65de0e20", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/f868cea5830fac6fec03fa360fd6650d65de0e20", "committedDate": "2020-06-06T22:14:23Z", "message": "Move to proper API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/ef5b9cf183da0eda038374f01dc342bbea5d2d40", "committedDate": "2020-06-06T22:22:11Z", "message": "Sync to IDE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed5e7718c918bbdded6c9654dc656110966244b", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/3ed5e7718c918bbdded6c9654dc656110966244b", "committedDate": "2020-06-06T22:33:06Z", "message": "Fix logic error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/c004e5769d50092a9d4c549bc9a1857f37f9bc86", "committedDate": "2020-06-06T22:36:47Z", "message": "Merge Cleanup from indev\n\nCleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzczMzc1", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-425773375", "createdAt": "2020-06-06T22:38:55Z", "commit": {"oid": "c004e5769d50092a9d4c549bc9a1857f37f9bc86"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjozODo1NlrOGgGA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjozOTo0MVrOGgGBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE0NQ==", "bodyText": "Can be replaced with registeredDimensions.get(dimensionIdentifier)", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436306145", "createdAt": "2020-06-06T22:38:56Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+\n+public final class DimensionRegistry {\n+\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n+   */\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n+    this.levelNames = levelNames;\n+  }\n+\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n+  }\n+\n+  public Set<String> getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data or null if not registered\n+   */\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c004e5769d50092a9d4c549bc9a1857f37f9bc86"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE3OA==", "bodyText": "It's not a good practice to pass Optional as a parameter. Mark these as @Nullable and handle the null situation gracefully.", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436306178", "createdAt": "2020-06-06T22:39:41Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import com.google.common.base.Optional;\n+import com.google.common.base.Preconditions;\n+import net.kyori.nbt.CompoundTag;\n+\n+public final class DimensionData {\n+  private final String registryIdentifier;\n+  private final boolean isNatural;\n+  private final float ambientLight;\n+  private final boolean isShrunk;\n+  private final boolean isUltrawarm;\n+  private final boolean hasCeiling;\n+  private final boolean hasSkylight;\n+  private final Optional<Long> fixedTime;\n+  private final Optional<Boolean> hasEnderdragonFight;\n+\n+  /**\n+   * Initializes a new {@link DimensionData} instance.\n+   * @param registryIdentifier the identifier for the dimension from the registry.\n+   * @param isNatural indicates if the dimension use natural world generation (e.g. overworld)\n+   * @param ambientLight the light level the client sees without external lighting\n+   * @param isShrunk indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)\n+   * @param isUltrawarm internal dimension warmth flag\n+   * @param hasCeiling indicates if the dimension has a ceiling layer\n+   * @param hasSkylight indicates if the dimension should display the sun\n+   * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n+   * @param hasEnderdragonFight optional. Internal flag used in the end dimension\n+   */\n+  public DimensionData(String registryIdentifier, boolean isNatural,\n+                       float ambientLight, boolean isShrunk, boolean isUltrawarm,\n+                       boolean hasCeiling, boolean hasSkylight,\n+                       Optional<Long> fixedTime, Optional<Boolean> hasEnderdragonFight) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c004e5769d50092a9d4c549bc9a1857f37f9bc86"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "committedDate": "2020-06-06T22:51:21Z", "message": "Resolve review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "committedDate": "2020-06-06T22:52:55Z", "message": "Merge from indev/future/1.16\n\nResolve review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Nzc1NDIz", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-425775423", "createdAt": "2020-06-06T23:26:19Z", "commit": {"oid": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzoyNjoxOVrOGgGJwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzoyNjo1MFrOGgGJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwODQxOA==", "bodyText": "Try using https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62 instead", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436308418", "createdAt": "2020-06-06T23:26:19Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +163,110 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwODQyNw==", "bodyText": "Could https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165 work here instead?", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436308427", "createdAt": "2020-06-06T23:26:50Z", "author": {"login": "astei"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +163,110 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != TagType.COMPOUND.id()) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n+      }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/101a6a58dd7a1c2af13edd897eade28ac92599ba", "committedDate": "2020-06-10T19:00:18Z", "message": "Changes 1.16-pre3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d159408ba5af80892fedb0b717e0cc37fa88f3a", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/8d159408ba5af80892fedb0b717e0cc37fa88f3a", "committedDate": "2020-06-10T19:01:16Z", "message": "Merge Changes 1.16-pre3\n\nChanges 1.16-pre3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/78b442a852a14633ea16fa09f3f27b28fd44ea3f", "committedDate": "2020-06-11T21:39:16Z", "message": "Changes 1.16-pre4 and Logic fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba7bf254e6b0075c9936ac568b99125eba5b7ac2", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/ba7bf254e6b0075c9936ac568b99125eba5b7ac2", "committedDate": "2020-06-11T21:30:17Z", "message": "Merge from Xernium/indev/future/1.16\n\nChanges 1.16-pre3 and Logic fixes"}, "afterCommit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/78b442a852a14633ea16fa09f3f27b28fd44ea3f", "committedDate": "2020-06-11T21:39:16Z", "message": "Changes 1.16-pre4 and Logic fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzU0Mjkz", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-429354293", "createdAt": "2020-06-11T23:12:21Z", "commit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoxMjoyMlrOGixvXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoxMjoyMlrOGixvXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTcxMA==", "bodyText": "I should probably add a dummy constructor here that has message and type", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439119710", "createdAt": "2020-06-11T23:12:22Z", "author": {"login": "Xernium"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -10,20 +10,25 @@\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type) {\n+  public Chat(String message, byte type, UUID sender) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzU0ODI3", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-429354827", "createdAt": "2020-06-11T23:13:33Z", "commit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoxMzozM1rOGixw1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoxMzozM1rOGixw1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDA4Ng==", "bodyText": "I need to revamp this too.", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439120086", "createdAt": "2020-06-11T23:13:33Z", "author": {"login": "Xernium"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -122,21 +153,36 @@ public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.maxPlayers = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n+      this.levelType = ProtocolUtils.readString(buf, 16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzU1MjYx", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-429355261", "createdAt": "2020-06-11T23:14:37Z", "commit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoxNDozOFrOGixx7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoxNDozOFrOGixx7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDM2Ng==", "bodyText": "Should I also make a dummy constructor here @astei ?", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439120366", "createdAt": "2020-06-11T23:14:38Z", "author": {"login": "Xernium"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java", "diffHunk": "@@ -13,17 +14,21 @@\n   private short difficulty;\n   private short gamemode;\n   private String levelType = \"\";\n+  private boolean shouldKeepPlayerData; // 1.16+\n+  private DimensionInfo dimensionInfo;\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n-      String levelType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzcwMjcy", "url": "https://github.com/VelocityPowered/Velocity/pull/310#pullrequestreview-429370272", "createdAt": "2020-06-11T23:56:16Z", "commit": {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6577b08bdd6c6286681b3c784bf8664681b4697a", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/6577b08bdd6c6286681b3c784bf8664681b4697a", "committedDate": "2020-06-13T09:26:51Z", "message": "Changes 1.16-pre5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "committedDate": "2020-06-16T15:56:56Z", "message": "Changes 1.16-pre6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee64b97b8ee1b217686687f3c4c6326cf0ff9c14", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/ee64b97b8ee1b217686687f3c4c6326cf0ff9c14", "committedDate": "2020-06-16T16:39:51Z", "message": "Changes 1.16-pre7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ba7d6051ad8efcbc3ce56ebc0fc2caec2efdff", "author": {"user": null}, "url": "https://github.com/VelocityPowered/Velocity/commit/83ba7d6051ad8efcbc3ce56ebc0fc2caec2efdff", "committedDate": "2020-06-18T16:24:39Z", "message": "Changes 1.16-rc1"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 702, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}