{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjg3NjI2", "number": 350, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDozMTo0OFrOEVWttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0Mzo1MFrOEVW8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODI3NzAwOnYy", "diffSide": "RIGHT", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDozMTo0OFrOG8Dyzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMToxODozOVrOG8FUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw==", "bodyText": "This only works for BrigadierCommands, I couldn't think of a way to implement it for simple and raw commands that expect a Context object (creating the context manually is hacky at best)", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465629903", "createdAt": "2020-08-05T10:31:48Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzMjc5MA==", "bodyText": "Sorry if I'm missing something, but why do we need to treat redirects as a special case? See BrigadierUtils for a deep clone method example.", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465632790", "createdAt": "2020-08-05T10:37:28Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNzgzMQ==", "bodyText": "I can also implement it on the simple/raw commands, it is just command completion, but this method is only for BrigadierCommands", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465637831", "createdAt": "2020-08-05T10:48:01Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MTI5MQ==", "bodyText": "why do we need to treat redirects as a special case\n\nWe need to filter the redirects too", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465641291", "createdAt": "2020-08-05T10:55:08Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0Mjg1OA==", "bodyText": "The problem is simple and raw commands don't use the requires predicate since it doesn't pass the used command and thus the context object cannot be created.", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465642858", "createdAt": "2020-08-05T10:58:22Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0NDYyMQ==", "bodyText": "since it doesn't pass the used command\n\nwdym", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465644621", "createdAt": "2020-08-05T11:01:53Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0NTY4MA==", "bodyText": "See \n  \n    \n      Velocity/proxy/src/main/java/com/velocitypowered/proxy/command/CommandNodeFactory.java\n    \n    \n         Line 36\n      in\n      76173e4\n    \n    \n    \n    \n\n        \n          \n           BrigadierUtils.buildRawArgumentsLiteral(alias, \n        \n    \n  \n\n and \n  \n    \n      Velocity/proxy/src/main/java/com/velocitypowered/proxy/command/CommandNodeFactory.java\n    \n    \n         Line 73\n      in\n      76173e4\n    \n    \n    \n    \n\n        \n          \n           return BrigadierUtils.buildRawArgumentsLiteral(alias,", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465645680", "createdAt": "2020-08-05T11:04:06Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1NDk4Mw==", "bodyText": "Can't we make the command to forward only on failure? So that we can utilise .requires for better experience?\n(asking u before touching anything of that code, I'm scared \ud83d\udc40)", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465654983", "createdAt": "2020-08-05T11:18:39Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(\n+                  (RootCommandNode<CommandSource>) filterNode(rootNode, new IdentityHashMap<>()));\n+              playerConnection.write(commands);\n+            },\n+            playerConnection.eventLoop());\n     return true;\n   }\n \n+  /**\n+   * Creates a deep copy of the provided command node, but removes any node that are not accessible\n+   * by the player (respecting the requirement of the node).\n+   *\n+   * @param source source node\n+   * @param nodeMapping mapped nodes\n+   * @return filtered node\n+   */\n+  private CommandNode<CommandSource> filterNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYyOTkwMw=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODMxNDg0OnYy", "diffSide": "RIGHT", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMDo0Mzo1MFrOG8EKFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTowMjozNVrOG8Etjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ==", "bodyText": "To avoid unnecessarily processing the backend server commands (which don't have a requires  predicate), I would move this filtering to https://github.com/MrIvanPlays/Velocity/blob/dfce2ea2d39d9eb6350db8705c07c705b22d4a52/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java#L175 (just above this, where the proxy commands are injected). This also avoids the cloning if the announceProxyCommands config is set to false", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465635861", "createdAt": "2020-08-05T10:43:50Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzOTUxNg==", "bodyText": "If I move it there, the nodes that the event adds wouldn't be captured and the method wouldn't work as intended.\nAdditionally, we can remove this event and enforce BrigadierCommand if someone wants to modify the root node.", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465639516", "createdAt": "2020-08-05T10:51:16Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MDQ5NA==", "bodyText": "Imo, nodes added via PlayerAvailableCommandsEvent should always be sent, even if the source doesn't pass the predicate.", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465640494", "createdAt": "2020-08-05T10:53:25Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MTk3OA==", "bodyText": "Imo, nodes added via PlayerAvailableCommandsEvent should always be sent, even if the source doesn't pass the predicate.\n\nhow come", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465641978", "createdAt": "2020-08-05T10:56:29Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0MzgxMA==", "bodyText": "If a plugin forcefully adds a command node to the tree, it should be sent to the client regardless of the requires return. The plugin can register a command to use this mechanic. The event is mostly intended to remove or edit nodes.", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465643810", "createdAt": "2020-08-05T11:00:14Z", "author": {"login": "hugmanrique"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0NDk0Mw==", "bodyText": "If a plugin forcefully adds a command node to the tree, it should be sent to the client regardless of the requires return. The plugin can register a command to use this mechanic. The event is mostly intended to remove or edit nodes.\n\nSure, I will move the filtering then", "url": "https://github.com/VelocityPowered/Velocity/pull/350#discussion_r465644943", "createdAt": "2020-08-05T11:02:35Z", "author": {"login": "MrIvanPlays"}, "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/BackendPlaySessionHandler.java", "diffHunk": "@@ -173,12 +179,72 @@ public boolean handle(AvailableCommands commands) {\n       }\n     }\n \n-    server.getEventManager().fire(\n-        new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n-        .thenAcceptAsync(event -> playerConnection.write(commands), playerConnection.eventLoop());\n+    server\n+        .getEventManager()\n+        .fire(new PlayerAvailableCommandsEvent(serverConn.getPlayer(), rootNode))\n+        .thenAcceptAsync(\n+            event -> {\n+              commands.setRootNode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYzNTg2MQ=="}, "originalCommit": {"oid": "dfce2ea2d39d9eb6350db8705c07c705b22d4a52"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2776, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}