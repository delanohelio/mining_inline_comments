{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MjAwMjA0", "number": 1322, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0Njo1OFrODybKyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNDowMlrODymQ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjAwNTIxOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0Njo1OFrOGGdXdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0Njo1OFrOGGdXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTc4Mg==", "bodyText": "I would just add a second test to check that toString on non-providers is not broken.", "url": "https://github.com/palantir/gradle-baseline/pull/1322#discussion_r409425782", "createdAt": "2020-04-16T09:46:58Z", "author": {"login": "CRogers"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.errorprone.CompilationTestHelper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class GradleProviderToStringTest {\n+\n+    private CompilationTestHelper compilationHelper;\n+\n+    @BeforeEach\n+    public void before() {\n+        compilationHelper = CompilationTestHelper.newInstance(GradleProviderToString.class, getClass());\n+    }\n+\n+    @Test\n+    public void failsUsedInStringConcatenation() {\n+        compilationHelper\n+                .addSourceLines(\n+                        \"Foo.java\",\n+                        \"import org.gradle.api.Project;\",\n+                        \"import org.gradle.api.Plugin;\",\n+                        \"import org.gradle.api.provider.Provider;\",\n+                        \"class Foo implements Plugin<Project> {\",\n+                        \"  public final void apply(Project project) {\",\n+                        \"    Provider<String> provider = project.provider(() -> \\\"hello\\\");\",\n+                        \"    // BUG: Diagnostic contains: Calling toString on a Provider\",\n+                        \"    String value = \\\"My bad provider value: \\\" + provider;\",\n+                        \"  }\",\n+                        \"}\")\n+                .doTest();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05294b065d1932bcdc845a141cac5c396a1a5542"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzgxNjYwOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxMjoxNFrOGGvLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxMjoxNFrOGGvLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNzU4MQ==", "bodyText": "oh this is just too easy :D", "url": "https://github.com/palantir/gradle-baseline/pull/1322#discussion_r409717581", "createdAt": "2020-04-16T17:12:14Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.AbstractToString;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.Fix;\n+import com.google.errorprone.predicates.TypePredicate;\n+import com.google.errorprone.predicates.TypePredicates;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.Tree;\n+import java.util.Optional;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"GradleProviderToString\",\n+        summary = \"Calling toString on a Provider does not render the contained value\",\n+        severity = BugPattern.SeverityLevel.ERROR)\n+public final class GradleProviderToString extends AbstractToString {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05294b065d1932bcdc845a141cac5c396a1a5542"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzgyMzE2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNDowMlrOGGvPeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxNDowMlrOGGvPeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxODY1MA==", "bodyText": "if it's right enough of the time, we could do it for convenience. We don't need to automatically apply it.", "url": "https://github.com/palantir/gradle-baseline/pull/1322#discussion_r409718650", "createdAt": "2020-04-16T17:14:02Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.AbstractToString;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.Fix;\n+import com.google.errorprone.predicates.TypePredicate;\n+import com.google.errorprone.predicates.TypePredicates;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.Tree;\n+import java.util.Optional;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"GradleProviderToString\",\n+        summary = \"Calling toString on a Provider does not render the contained value\",\n+        severity = BugPattern.SeverityLevel.ERROR)\n+public final class GradleProviderToString extends AbstractToString {\n+\n+    private static final TypePredicate IS_PROVIDER = TypePredicates.isDescendantOf(\"org.gradle.api.provider.Provider\");\n+\n+    @Override\n+    protected TypePredicate typePredicate() {\n+        return IS_PROVIDER;\n+    }\n+\n+    @Override\n+    protected Optional<Fix> implicitToStringFix(ExpressionTree tree, VisitorState state) {\n+        // We could automatically call Provider#get, but is that always right?\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05294b065d1932bcdc845a141cac5c396a1a5542"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2218, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}