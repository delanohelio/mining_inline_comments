{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Mjk4NDI5", "number": 1370, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1MDo1OVrOEBCKIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NjozNVrOEBCPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTE5Mzk1OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/CatchSpecificityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1MDo1OVrOGcrrXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoyODoxMlrOGeoQ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyODkyNw==", "bodyText": "this looked like a bug to me - in this test we know we throw T which in this scope is guaranteed to be RuntimeException (while unbounded T is Exceptio)", "url": "https://github.com/palantir/gradle-baseline/pull/1370#discussion_r432728927", "createdAt": "2020-05-29T20:50:59Z", "author": {"login": "robert3005"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/CatchSpecificityTest.java", "diffHunk": "@@ -560,7 +560,7 @@ void typeParameterExceptionToRuntimeException() {\n                         \"  <T extends RuntimeException> void f(ThrowingRunnable<T> in) {\",\n                         \"    try {\",\n                         \"        in.run();\",\n-                        \"    } catch (Exception e) {\",\n+                        \"    } catch (RuntimeException e) {\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a1c04634d3d9bb008715842665cf7ca7904f65"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMDgzNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/gradle-baseline/pull/1370#discussion_r432730837", "createdAt": "2020-05-29T20:55:45Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/CatchSpecificityTest.java", "diffHunk": "@@ -560,7 +560,7 @@ void typeParameterExceptionToRuntimeException() {\n                         \"  <T extends RuntimeException> void f(ThrowingRunnable<T> in) {\",\n                         \"    try {\",\n                         \"        in.run();\",\n-                        \"    } catch (Exception e) {\",\n+                        \"    } catch (RuntimeException e) {\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyODkyNw=="}, "originalCommit": {"oid": "31a1c04634d3d9bb008715842665cf7ca7904f65"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MDE3Mw==", "bodyText": "So it turns out this is a bit more subtle -- using a java9+ compiler to target java8 this works as expected, however the java 8 compiler cannot compile this output!\nNot recommending that we revert since everything will be 11+ soon, and it's rare enough that I'd rather suppress.", "url": "https://github.com/palantir/gradle-baseline/pull/1370#discussion_r434770173", "createdAt": "2020-06-03T18:28:12Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/CatchSpecificityTest.java", "diffHunk": "@@ -560,7 +560,7 @@ void typeParameterExceptionToRuntimeException() {\n                         \"  <T extends RuntimeException> void f(ThrowingRunnable<T> in) {\",\n                         \"    try {\",\n                         \"        in.run();\",\n-                        \"    } catch (Exception e) {\",\n+                        \"    } catch (RuntimeException e) {\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyODkyNw=="}, "originalCommit": {"oid": "31a1c04634d3d9bb008715842665cf7ca7904f65"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTIwODA0OnYy", "diffSide": "LEFT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NjozNVrOGcr0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NjozNVrOGcr0Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMTE4Mw==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/palantir/gradle-baseline/pull/1370#discussion_r432731183", "createdAt": "2020-05-29T20:56:35Z", "author": {"login": "carterkozak"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java", "diffHunk": "@@ -224,18 +221,6 @@ private static void configureErrorProneOptions(\n             errorProneOptions.check(\"UnnecessaryLambda\", CheckSeverity.OFF);\n         }\n \n-        if (jdkVersion.compareTo(JavaVersion.toVersion(\"12.0.1\")) >= 0) {\n-            // As of version 2.3.4, Errorprone isn't officially compatible with Java12, but in practise everything\n-            // works apart from this one check: https://github.com/google/error-prone/issues/1106\n-            errorProneOptions.check(\"Finally\", CheckSeverity.OFF);\n-        }\n-\n-        if (jdkVersion.compareTo(JavaVersion.toVersion(\"13.0.0\")) >= 0) {\n-            // Errorprone 2.3.4 isn't officially compatible with Java13 either\n-            // https://github.com/google/error-prone/issues/1106\n-            errorProneOptions.check(\"TypeParameterUnusedInFormals\", CheckSeverity.OFF);\n-        }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1213cd6247f135a200d8a5bfffea4c0899388d1"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}