{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjczMDY1", "number": 1504, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0ODoyOFrOEsGxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozNjoxMlrOEsHyyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjgzODM3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0ODoyOFrOHfPe3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0ODoyOFrOHfPe3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMTU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `ImmutablesBuildeMissingInitialization`: Prevent building Immutables.org builders when not all fields have been populated.\n          \n          \n            \n            - `ImmutablesBuilderMissingInitialization`: Prevent building Immutables.org builders when not all fields have been populated.", "url": "https://github.com/palantir/gradle-baseline/pull/1504#discussion_r502521567", "createdAt": "2020-10-09T15:48:28Z", "author": {"login": "carterkozak"}, "path": "README.md", "diffHunk": "@@ -193,6 +193,7 @@ Safe Logging can be found at [github.com/palantir/safe-logging](https://github.c\n - `PreferStaticLoggers`: Prefer static loggers over instance loggers.\n - `LogsafeArgName`: Prevent certain named arguments as being logged as safe. Specify unsafe argument names using `LogsafeArgName:UnsafeArgNames` errorProne flag.\n - `ImplicitPublicBuilderConstructor`: Prevent builders from unintentionally leaking public constructors.\n+- `ImmutablesBuildeMissingInitialization`: Prevent building Immutables.org builders when not all fields have been populated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "354254907e8a1e6c44083d59a5e71708e777e579"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzAwNDg5OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImmutablesBuilderMissingInitialization.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozNjoxMlrOHfRFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjo0NDowOFrOHfRWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzg5Mg==", "bodyText": "this is kinda amazing that it works! given that it relies on internal implementation details of immutables, I wonder if we coudl get this error-prone rule upstreamed into https://github.com/immutables/immutables so that if they ever decide to change the internal representation then CI will catch their change??", "url": "https://github.com/palantir/gradle-baseline/pull/1504#discussion_r502547892", "createdAt": "2020-10-09T16:36:12Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImmutablesBuilderMissingInitialization.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.base.CaseFormat;\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.LinkType;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.Matchers;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ReturnTree;\n+import com.sun.tools.javac.code.Symbol;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.code.Type;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.immutables.value.Generated;\n+\n+/**\n+ * Checks that all required fields in an immutables.org generated builder have been populated.\n+ *\n+ * To make it decidable, it is limited to builders that are constructed by calling {@code new ImmutableType.Builder()},\n+ * {@code new Type.Builder()} (where Type.Builder extends ImmutableType.Builder), or a method that only calls one of\n+ * those constructors and returns the result, and are never stored into a variable. Builders that do not meet these\n+ * conditions are assumed to populate all fields, and are ignored.\n+ *\n+ * Mandatory fields are determined by inspecting the generated builder source to find the initBits that are updated by\n+ * each method, to find any that do not get set. If Immutables changes the way that they check for required fields, this\n+ * check will stop working (but the check will probably pass).\n+ */\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"ImmutablesBuilderMissingInitialization\",\n+        linkType = LinkType.CUSTOM,\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"All required fields of an Immutables builder must be initialized\")\n+public final class ImmutablesBuilderMissingInitialization extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final String FIELD_INIT_BITS_PREFIX = \"INIT_BIT_\";\n+\n+    /**\n+     * Prefixes on the interface getter methods that may be stripped by immutables.\n+     *\n+     * The default immutables style just uses get*, but some places use is* too and we can't load the style to check\n+     * what to remove. It doesn't matter if we remove too much, because we only do a suffix match on the methods.\n+     *\n+     * This should only help when the unprefixed field name is an identifier, because in other cases immutables already\n+     * uses the unprefixed name.\n+     */\n+    private static final ImmutableSet<String> GET_PREFIXES = ImmutableSet.of(\"GET_\", \"IS_\");\n+\n+    private static final Matcher<ExpressionTree> builderMethodMatcher = Matchers.instanceMethod()\n+            .onClass(ImmutablesBuilderMissingInitialization::extendsImmutablesGeneratedClass)\n+            .named(\"build\")\n+            .withParameters();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        // Check that the method is a builder's build() method\n+        if (!builderMethodMatcher.matches(tree, state)) {\n+            return Description.NO_MATCH;\n+        }\n+        ClassSymbol builderClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        ClassSymbol immutableClass = ASTHelpers.enclosingClass(builderClass);\n+        if (immutableClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        Optional<ClassSymbol> interfaceClass = Streams.concat(\n+                        immutableClass.getInterfaces().stream(), Stream.of(immutableClass.getSuperclass()))\n+                .map(type -> type.tsym)\n+                .map(filterByType(ClassSymbol.class))\n+                .flatMap(Streams::stream)\n+                .filter(classSymbol ->\n+                        ASTHelpers.hasAnnotation(classSymbol, \"org.immutables.value.Value.Immutable\", state))\n+                .findAny();\n+        if (!interfaceClass.isPresent()) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        // Mandatory fields have a private static final constant in the generated builder named INIT_BIT_varname, where\n+        // varname is the UPPER_UNDERSCORE version of the variable name. Find these fields to get the mandatory fields.\n+        // nb. this isn't part of any immutables API, so could break.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbdf5e31a651c8a14ee13f1cce6c23d29ccb15f3"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MjEwNg==", "bodyText": "One concern I would have with upstreaming this is that it's not totally compliant with custom @Value.Style annotations, and can never be because the annotation (eg @ImmutablesStyle internally) is often brought in as a compileOnly dependency, so if it's consumed from a different compilation unit (eg using immutable classes that were generated in the main sourceset from test code) it will not be possible to recover the original style. That only affects an edge case where the get style has been customized and the field with that part removed is an identifier (eg getPublic), so maybe it's not a big deal (I solved it here by hard coding the style to get* and is*and bailing if there are fields that can't be initialized after transforming like that). There are other ways that the style could in theory be changed (eg changing the name of the from method) that I don't think we would be able to handle.\nInstead, if it were upstreamed then I'd prefer to go with an annotations-based approach, as mentioned above.", "url": "https://github.com/palantir/gradle-baseline/pull/1504#discussion_r502552106", "createdAt": "2020-10-09T16:44:08Z", "author": {"login": "jackwickham"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImmutablesBuilderMissingInitialization.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.base.CaseFormat;\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.LinkType;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.Matchers;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ReturnTree;\n+import com.sun.tools.javac.code.Symbol;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.code.Type;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.immutables.value.Generated;\n+\n+/**\n+ * Checks that all required fields in an immutables.org generated builder have been populated.\n+ *\n+ * To make it decidable, it is limited to builders that are constructed by calling {@code new ImmutableType.Builder()},\n+ * {@code new Type.Builder()} (where Type.Builder extends ImmutableType.Builder), or a method that only calls one of\n+ * those constructors and returns the result, and are never stored into a variable. Builders that do not meet these\n+ * conditions are assumed to populate all fields, and are ignored.\n+ *\n+ * Mandatory fields are determined by inspecting the generated builder source to find the initBits that are updated by\n+ * each method, to find any that do not get set. If Immutables changes the way that they check for required fields, this\n+ * check will stop working (but the check will probably pass).\n+ */\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"ImmutablesBuilderMissingInitialization\",\n+        linkType = LinkType.CUSTOM,\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"All required fields of an Immutables builder must be initialized\")\n+public final class ImmutablesBuilderMissingInitialization extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final String FIELD_INIT_BITS_PREFIX = \"INIT_BIT_\";\n+\n+    /**\n+     * Prefixes on the interface getter methods that may be stripped by immutables.\n+     *\n+     * The default immutables style just uses get*, but some places use is* too and we can't load the style to check\n+     * what to remove. It doesn't matter if we remove too much, because we only do a suffix match on the methods.\n+     *\n+     * This should only help when the unprefixed field name is an identifier, because in other cases immutables already\n+     * uses the unprefixed name.\n+     */\n+    private static final ImmutableSet<String> GET_PREFIXES = ImmutableSet.of(\"GET_\", \"IS_\");\n+\n+    private static final Matcher<ExpressionTree> builderMethodMatcher = Matchers.instanceMethod()\n+            .onClass(ImmutablesBuilderMissingInitialization::extendsImmutablesGeneratedClass)\n+            .named(\"build\")\n+            .withParameters();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        // Check that the method is a builder's build() method\n+        if (!builderMethodMatcher.matches(tree, state)) {\n+            return Description.NO_MATCH;\n+        }\n+        ClassSymbol builderClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        ClassSymbol immutableClass = ASTHelpers.enclosingClass(builderClass);\n+        if (immutableClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        Optional<ClassSymbol> interfaceClass = Streams.concat(\n+                        immutableClass.getInterfaces().stream(), Stream.of(immutableClass.getSuperclass()))\n+                .map(type -> type.tsym)\n+                .map(filterByType(ClassSymbol.class))\n+                .flatMap(Streams::stream)\n+                .filter(classSymbol ->\n+                        ASTHelpers.hasAnnotation(classSymbol, \"org.immutables.value.Value.Immutable\", state))\n+                .findAny();\n+        if (!interfaceClass.isPresent()) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        // Mandatory fields have a private static final constant in the generated builder named INIT_BIT_varname, where\n+        // varname is the UPPER_UNDERSCORE version of the variable name. Find these fields to get the mandatory fields.\n+        // nb. this isn't part of any immutables API, so could break.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzg5Mg=="}, "originalCommit": {"oid": "cbdf5e31a651c8a14ee13f1cce6c23d29ccb15f3"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}