{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjQ0NTY1", "number": 1359, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo1MDowM1rOEAppqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo1MDowM1rOEAppqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTE3ODY1OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LambdaMethodReference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo1MDowNFrOGcELPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo1MDowNFrOGcELPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4MTcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return false;\n          \n          \n            \n                    return !root.getParameters().isEmpty();", "url": "https://github.com/palantir/gradle-baseline/pull/1359#discussion_r432081727", "createdAt": "2020-05-28T19:50:04Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LambdaMethodReference.java", "diffHunk": "@@ -93,23 +95,29 @@ private Description checkMethodInvocation(\n             return Description.NO_MATCH;\n         }\n         Symbol.MethodSymbol methodSymbol = ASTHelpers.getSymbol(methodInvocation);\n-        if (methodSymbol == null) {\n-            // Should only ever occur if there are errors in the AST, allow the compiler to fail later\n-            return Description.NO_MATCH;\n-        }\n-        if (!methodSymbol.isStatic()) {\n-            // Only support static invocations for the time being to avoid erroneously\n-            // rewriting '() -> foo()' to 'ClassName::foo' instead of 'this::foo'\n-            // or suggesting '() -> foo.doWork().bar()' should be rewritten to 'foo.doWork()::bar',\n-            // which executes 'doWork' eagerly, even when the supplier is not used.\n+        if (methodSymbol == null || shouldIgnore(methodSymbol, root, methodInvocation)) {\n             return Description.NO_MATCH;\n         }\n+\n         return buildDescription(root)\n                 .setMessage(MESSAGE)\n                 .addFix(buildFix(methodSymbol, root, state))\n                 .build();\n     }\n \n+    private static boolean shouldIgnore(\n+            Symbol.MethodSymbol methodSymbol, LambdaExpressionTree root, MethodInvocationTree methodInvocation) {\n+        if (!methodSymbol.isStatic()) {\n+            if (root.getParameters().size() == 1) {\n+                Symbol paramSymbol = ASTHelpers.getSymbol(Iterables.getOnlyElement(root.getParameters()));\n+                Symbol receiverSymbol = ASTHelpers.getSymbol(ASTHelpers.getReceiver(methodInvocation));\n+                return !paramSymbol.equals(receiverSymbol);\n+            }\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a899d46f7b7838bb7d8761e4fd8bd452b5904e9"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2228, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}