{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDQ5Nzg0", "number": 1186, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxODoxNVrODaP-Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxODoxNVrODaP-Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODUxMjgyOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/UnnecessaryLambdaArgumentParentheses.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxODoxNVrOFhGQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODowNTozOFrOFhHo6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0OTg5Ng==", "bodyText": "I think we should go with error since checkstyle previous enforced this", "url": "https://github.com/palantir/gradle-baseline/pull/1186#discussion_r370249896", "createdAt": "2020-01-23T17:18:15Z", "author": {"login": "ferozco"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/UnnecessaryLambdaArgumentParentheses.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ErrorProneToken;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.tools.javac.parser.Tokens;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+\n+/**\n+ * UnnecessaryLambdaArgumentParentheses provides similar functionality to the upstream UnnecessaryParentheses, but\n+ * specifically for single-parameter lambda arguments which are not covered by the existing check. Perhaps this can be\n+ * contributed upstream. There's an argument against combining the two because parentheses around lambda arguments\n+ * cannot be parsed directly from the AST where other parenthesis checked by UnnecessaryParentheses can.\n+ */\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"UnnecessaryLambdaArgumentParentheses\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a6e85ab17611b6febcf0f0a113eb31e42a4e59"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NTM1Ng==", "bodyText": "Most projects fail on WARNING -- iirc we tried using ERROR for the BracesRequired check but ran into issues (possibly with generated code).\nSince excavator will auto-fix anything in projects that don't fail on warnings, I don't think there's much risk.", "url": "https://github.com/palantir/gradle-baseline/pull/1186#discussion_r370255356", "createdAt": "2020-01-23T17:29:09Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/UnnecessaryLambdaArgumentParentheses.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ErrorProneToken;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.tools.javac.parser.Tokens;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+\n+/**\n+ * UnnecessaryLambdaArgumentParentheses provides similar functionality to the upstream UnnecessaryParentheses, but\n+ * specifically for single-parameter lambda arguments which are not covered by the existing check. Perhaps this can be\n+ * contributed upstream. There's an argument against combining the two because parentheses around lambda arguments\n+ * cannot be parsed directly from the AST where other parenthesis checked by UnnecessaryParentheses can.\n+ */\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"UnnecessaryLambdaArgumentParentheses\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0OTg5Ng=="}, "originalCommit": {"oid": "f9a6e85ab17611b6febcf0f0a113eb31e42a4e59"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MjQ5MA==", "bodyText": "ok sure!", "url": "https://github.com/palantir/gradle-baseline/pull/1186#discussion_r370272490", "createdAt": "2020-01-23T18:05:38Z", "author": {"login": "ferozco"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/UnnecessaryLambdaArgumentParentheses.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ErrorProneToken;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.tools.javac.parser.Tokens;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+\n+/**\n+ * UnnecessaryLambdaArgumentParentheses provides similar functionality to the upstream UnnecessaryParentheses, but\n+ * specifically for single-parameter lambda arguments which are not covered by the existing check. Perhaps this can be\n+ * contributed upstream. There's an argument against combining the two because parentheses around lambda arguments\n+ * cannot be parsed directly from the AST where other parenthesis checked by UnnecessaryParentheses can.\n+ */\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"UnnecessaryLambdaArgumentParentheses\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0OTg5Ng=="}, "originalCommit": {"oid": "f9a6e85ab17611b6febcf0f0a113eb31e42a4e59"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2123, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}