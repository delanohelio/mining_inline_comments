{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDYwNzg4", "number": 1355, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxMTo1NFrOEAPTWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxMzowMFrOEAPV7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njg2MTcwOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxMTo1NFrOGbZZaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxMTo1NFrOGbZZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MDg0MA==", "bodyText": "might be nice to log the symbol and the method if we're gonna throw? :)", "url": "https://github.com/palantir/gradle-baseline/pull/1355#discussion_r431380840", "createdAt": "2020-05-27T19:11:54Z", "author": {"login": "dansanduleac"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java", "diffHunk": "@@ -472,11 +479,34 @@ public Boolean visitEnhancedForLoop(EnhancedForLoopTree tree, Void unused) {\n         return ImmutableList.of(fix.build());\n     }\n \n+    private static ImmutableList<SuggestedFix> buildUnusedLambdaParameterFix(\n+            Symbol.VarSymbol _symbol, Collection<UnusedSpec> values, VisitorState state) {\n+        SuggestedFix.Builder fix = SuggestedFix.builder();\n+\n+        for (UnusedSpec unusedSpec : values) {\n+            Tree leaf = unusedSpec.variableTree().getLeaf();\n+            if (!(leaf instanceof VariableTree)) {\n+                continue;\n+            }\n+\n+            VariableTree tree = (VariableTree) leaf;\n+            if (state.getEndPosition(tree.getType()) == -1) {\n+                fix.replace(tree, \"_\" + tree.getName());\n+            } else {\n+                int startPos = state.getEndPosition(tree.getType()) + 1;\n+                int endPos = state.getEndPosition(tree);\n+                fix.replace(startPos, endPos, \"_\" + tree.getName());\n+            }\n+        }\n+\n+        return ImmutableList.of(fix.build());\n+    }\n+\n     private static ImmutableList<SuggestedFix> buildUnusedParameterFixes(\n-            Symbol varSymbol, List<TreePath> usagePaths, VisitorState state) {\n-        Symbol.MethodSymbol methodSymbol = (Symbol.MethodSymbol) varSymbol.owner;\n+            Symbol varSymbol, Symbol.MethodSymbol methodSymbol, List<TreePath> usagePaths, VisitorState state) {\n         boolean isPrivateMethod = methodSymbol.getModifiers().contains(Modifier.PRIVATE);\n         int index = methodSymbol.params.indexOf(varSymbol);\n+        Preconditions.checkState(index != -1, \"symbol must be a parameter to the owning method\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d984e4d28a62829d112b2c5ae47132ac34512dd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njg2ODMwOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/StrictUnusedVariableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxMzowMFrOGbZc9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxMzowMFrOGbZc9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MTc0OQ==", "bodyText": "I'd maybe use one of them to check that it only renames the other one", "url": "https://github.com/palantir/gradle-baseline/pull/1355#discussion_r431381749", "createdAt": "2020-05-27T19:13:00Z", "author": {"login": "dansanduleac"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/StrictUnusedVariableTest.java", "diffHunk": "@@ -133,6 +151,30 @@ public void renames_unused_param() {\n                 .doTest(TestMode.TEXT_MATCH);\n     }\n \n+    @Test\n+    void renames_unused_lambda_params() {\n+        refactoringTestHelper\n+                .addInputLines(\n+                        \"Test.java\",\n+                        \"import java.util.function.BiFunction;\",\n+                        \"class Test {\",\n+                        \"  private static BiFunction<String, String, Integer> doStuff() {\",\n+                        \"    BiFunction<String, String, Integer> first = (String value1, String value2) -> 1;\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d984e4d28a62829d112b2c5ae47132ac34512dd"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2225, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}