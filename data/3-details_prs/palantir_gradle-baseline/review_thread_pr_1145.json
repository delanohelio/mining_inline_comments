{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDUzMzgx", "number": 1145, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1Mzo0MlrODWTqYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzozODozNFrODWUa5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzE3NDA5OnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1Mzo0MlrOFa_Z6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1Mzo0MlrOFa_Z6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0NjEyMA==", "bodyText": "just string is fine", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363846120", "createdAt": "2020-01-07T16:53:42Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -17,27 +17,37 @@\n package com.palantir.baseline.plugins;\n \n import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.ClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n+        TaskProvider<ClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniquenessLock\", ClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n+        // TODO(dfox): is this 'rule' redundant now? maybe replace it with a kinda strict mode?\n+        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n         project.getTasks().addRule(rule);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n+            lockTask.configure(t -> t.configurations.add(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));\n+\n             String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n             rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            project.getTasks().getByName(\"check\").dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzE3NzkxOnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1NDo1OFrOFa_cQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1NDo1OFrOFa_cQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0NjcyMQ==", "bodyText": "let's get rid of the rule", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363846721", "createdAt": "2020-01-07T16:54:58Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -17,27 +17,37 @@\n package com.palantir.baseline.plugins;\n \n import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.ClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n+        TaskProvider<ClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniquenessLock\", ClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n+        // TODO(dfox): is this 'rule' redundant now? maybe replace it with a kinda strict mode?\n+        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzE5MTUwOnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/ClassUniquenessLockTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1OToxMFrOFa_khQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1OToxMFrOFa_khQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0ODgzNw==", "bodyText": "I think we may want to provide a different message if new duplicates appear vs when problems are fixed, or mention here that it's dangerous to have duplicate classes on the classpath and explain why it's worth spending time to fix.\nOtherwise I think folks will see \"run X to update locks\" and they'll ./X.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363848837", "createdAt": "2020-01-07T16:59:10Z", "author": {"login": "carterkozak"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/ClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+@SuppressWarnings(\"VisibilityModifier\")\n+public class ClassUniquenessLockTask extends DefaultTask {\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes\n+    private final File lockFile;\n+    public final SetProperty<String> configurations;\n+\n+    public ClassUniquenessLockTask() {\n+        this.configurations = getProject().getObjects().setProperty(String.class);\n+        this.lockFile = getProject().file(\"baseline-class-uniqueness.lock\");\n+        onlyIf(new Spec<Task>() {\n+            @Override\n+            public boolean isSatisfiedBy(Task task) {\n+                return !configurations.get().isEmpty();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * This method exists purely for up-to-dateness purposes - we want to re-run if the contents of a configuration\n+     * changes.\n+     */\n+    @Input\n+    public final Map<String, ImmutableList<String>> getContentsOfAllConfigurations() {\n+        return configurations.get().stream().collect(Collectors.toMap(Function.identity(), name -> {\n+            Configuration configuration = getProject().getConfigurations().getByName(name);\n+            return configuration.getIncoming().getResolutionResult().getAllComponents().stream()\n+                    .map(resolvedComponentResult -> resolvedComponentResult.getModuleVersion().toString())\n+                    .collect(ImmutableList.toImmutableList()); // Gradle requires this to be Serializable\n+        }));\n+    }\n+\n+    @OutputFile\n+    public final File getLockFile() {\n+        return lockFile;\n+    }\n+\n+    @TaskAction\n+    public final void doIt() {\n+        Map<String, Optional<String>> resultsByConfiguration = configurations.get().stream()\n+                .collect(Collectors.toMap(Function.identity(), configurationName -> {\n+                    ClassUniquenessAnalyzer analyzer = new ClassUniquenessAnalyzer(getProject().getLogger());\n+                    Configuration configuration = getProject().getConfigurations().getByName(configurationName);\n+                    analyzer.analyzeConfiguration(configuration);\n+                    Collection<Set<ModuleVersionIdentifier>> problemJars = analyzer.getDifferingProblemJars();\n+\n+                    if (problemJars.isEmpty()) {\n+                        return Optional.empty();\n+                    }\n+\n+                    StringBuilder stringBuilder = new StringBuilder();\n+                    // TODO(dfox): ensure we iterate through problemJars in a stable order\n+                    for (Set<ModuleVersionIdentifier> clashingJars : problemJars) {\n+                        stringBuilder\n+                                .append(clashingJars.stream()\n+                                        .map(mvi -> mvi.getGroup() + \":\" + mvi.getName())\n+                                        .sorted()\n+                                        .collect(Collectors.joining(\", \", \"[\", \"]\")))\n+                                .append('\\n');\n+\n+                        analyzer.getDifferingSharedClassesInProblemJars(clashingJars).stream()\n+                                .sorted()\n+                                .forEach(className -> {\n+                                    stringBuilder.append(\"  - \");\n+                                    stringBuilder.append(className);\n+                                    stringBuilder.append('\\n');\n+                                });\n+                    }\n+                    return Optional.of(stringBuilder.toString());\n+                }));\n+\n+        boolean conflictsFound = resultsByConfiguration.values().stream().anyMatch(Optional::isPresent);\n+        if (!conflictsFound) {\n+            // this is desirable because if means if people apply the plugin to lots of projects which are already\n+            // compliant, they don't get loads of noisy lockfiles created.\n+            ensureLockfileDoesNotExist();\n+        } else {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            stringBuilder.append(\"# Run ./gradlew checkClassUniquenessLock --write-locks to update this file\\n\\n\");\n+            // TODO(dfox): make configuration order stable!\n+            resultsByConfiguration.forEach((configuration, contents) -> {\n+                if (contents.isPresent()) {\n+                    stringBuilder.append(\"## \").append(configuration).append(\"\\n\");\n+                    stringBuilder.append(contents.get());\n+                }\n+            });\n+            ensureLockfileContains(stringBuilder.toString());\n+        }\n+    }\n+\n+    private void ensureLockfileContains(String expected) {\n+        if (getProject().getGradle().getStartParameter().isWriteDependencyLocks()) {\n+            GFileUtils.writeFile(expected, lockFile);\n+            getLogger().lifecycle(\"Updated {}\", getProject().getRootDir().toPath().relativize(lockFile.toPath()));\n+        } else {\n+            String onDisk = GFileUtils.readFile(lockFile);\n+            if (!onDisk.equals(expected)) {\n+                throw new GradleException(lockFile\n+                        + \" is out of date, please run `./gradlew \"\n+                        + \"checkClassUniquenessLock --write-locks` to update this file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzI4MjI5OnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzozMTo1N1rOFbAdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzo0MzowNVrOFbAvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2MzMzMg==", "bodyText": "We're losing the ability to easily verify the class uniqueness on different configurations. This could be valuable when running tests since you could inadvertently test with different classes than what exists at runtime.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363863332", "createdAt": "2020-01-07T17:31:57Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a5deebb91d6233f660befad337cd3c671e60da"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2Nzk1OA==", "bodyText": "I actually preserved this functionality because I remember @raiju specifically added it, you just have to add the configurations you want as per:\ncheckClassUniqueness {\n  configurations.add project.configurations.myConf\n}\nThen they'll be analyzed and will appear in the lockfile", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363867958", "createdAt": "2020-01-07T17:43:05Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2MzMzMg=="}, "originalCommit": {"oid": "72a5deebb91d6233f660befad337cd3c671e60da"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzI5NTIzOnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzozNzoyNFrOFbAlqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODozODoxMVrOFbCILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NTUxMg==", "bodyText": "you might want to copy https://github.com/palantir/metric-schema/blob/develop/gradle-metric-schema/src/main/java/com/palantir/metric/schema/gradle/MetricSchemaMarkdownPlugin.java#L46 so that ./gradlew --write-locks also updates the lockfile", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363865512", "createdAt": "2020-01-07T17:37:24Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2ODUzOQ==", "bodyText": "I was a bit torn about this, because all our other --write-locks operations are pretty fast, but this one involves actually unpacking every single jar in your classpath. On the one hand a single entrypoint is quite nice, but also I think we really want people to acknowledge these and make a conscious decision to fix or not fix.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363868539", "createdAt": "2020-01-07T17:44:30Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NTUxMg=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4MzQ1Mg==", "bodyText": "ya fair enough, my concern is that not having it linked to --write-locks will block excavators since the lockfile will not automatically be updated", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363883452", "createdAt": "2020-01-07T18:20:48Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NTUxMg=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MDczNA==", "bodyText": "Ok I've just copied and pasted that in so that ./gradlew --write-locks will run it.  Will make our excavators simpler, but it might make local dev a bit slower", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363890734", "createdAt": "2020-01-07T18:38:11Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NTUxMg=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzI5ODI4OnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzozODozNFrOFbAnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo0NjozMlrOFbCV3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ==", "bodyText": "shouldn't the contents only change if a dependency on the configuration changes?", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363866019", "createdAt": "2020-01-07T17:38:34Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2ODc3Mw==", "bodyText": "Configurations are not Serializable, so I can't just mark a list of them as an @Input.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363868773", "createdAt": "2020-01-07T17:45:05Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4Mjc4MQ==", "bodyText": "you can take the configuration as an input by annotating it with @classpath", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363882781", "createdAt": "2020-01-07T18:19:05Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4NTYzNA==", "bodyText": "I think that @classpath annotation would work if I had just a single configuration, but in order to preserve the ability to analyze multiple configurations, I don't have just one single configuration here but a bunch of them?", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363885634", "createdAt": "2020-01-07T18:25:50Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MjAyNw==", "bodyText": "Instead of storing a set of configurations could you create a single configuration which extends from all of the provided configurations", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363892027", "createdAt": "2020-01-07T18:41:19Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MjkxOQ==", "bodyText": "I dunno, it seems that has a slight risk of false positives... e.g. if we're analyzing two configurations foo and bar and we move a jar from foo -> bar.  In the big clobbered configuration there would be no change, but actually I would expect the lockfile to change.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363892919", "createdAt": "2020-01-07T18:43:35Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5NDIzOA==", "bodyText": "ok no big deal", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363894238", "createdAt": "2020-01-07T18:46:32Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ=="}, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2093, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}