{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjg0NDAw", "number": 1465, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0Nzo1NFrOEUrf6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0Nzo1NFrOEUrf6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE5NjU3OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0Nzo1NFrOG7A61A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1NDoyMVrOG7BIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDIyOA==", "bodyText": "nit: we might as well combine these two conditional expressions.", "url": "https://github.com/palantir/gradle-baseline/pull/1465#discussion_r464534228", "createdAt": "2020-08-03T16:47:54Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "diffHunk": "@@ -73,15 +73,17 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         List<? extends ExpressionTree> args = tree.getArguments();\n         ExpressionTree argNameExpression = args.get(0);\n         if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)) {\n-            String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n-            if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n-                SuggestedFix.Builder builder = SuggestedFix.builder();\n-                String unsafeArg = SuggestedFixes.qualifyType(state, builder, \"com.palantir.logsafe.UnsafeArg\");\n-                return buildDescription(tree)\n-                        .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n-                        .addFix(builder.replace(tree.getMethodSelect(), unsafeArg + \".of\")\n-                                .build())\n-                        .build();\n+            if (argNameExpression instanceof JCTree.JCLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bfb2815b3c1de891b032bd504e7735b154f1db"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNjc1NA==", "bodyText": "We can just get rid of the compile time constant matcher, right? All literals are compile time constants.", "url": "https://github.com/palantir/gradle-baseline/pull/1465#discussion_r464536754", "createdAt": "2020-08-03T16:52:30Z", "author": {"login": "pkoenig10"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "diffHunk": "@@ -73,15 +73,17 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         List<? extends ExpressionTree> args = tree.getArguments();\n         ExpressionTree argNameExpression = args.get(0);\n         if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)) {\n-            String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n-            if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n-                SuggestedFix.Builder builder = SuggestedFix.builder();\n-                String unsafeArg = SuggestedFixes.qualifyType(state, builder, \"com.palantir.logsafe.UnsafeArg\");\n-                return buildDescription(tree)\n-                        .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n-                        .addFix(builder.replace(tree.getMethodSelect(), unsafeArg + \".of\")\n-                                .build())\n-                        .build();\n+            if (argNameExpression instanceof JCTree.JCLiteral) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDIyOA=="}, "originalCommit": {"oid": "82bfb2815b3c1de891b032bd504e7735b154f1db"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNzYzNw==", "bodyText": "Yep, you're right", "url": "https://github.com/palantir/gradle-baseline/pull/1465#discussion_r464537637", "createdAt": "2020-08-03T16:54:21Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "diffHunk": "@@ -73,15 +73,17 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         List<? extends ExpressionTree> args = tree.getArguments();\n         ExpressionTree argNameExpression = args.get(0);\n         if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)) {\n-            String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n-            if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n-                SuggestedFix.Builder builder = SuggestedFix.builder();\n-                String unsafeArg = SuggestedFixes.qualifyType(state, builder, \"com.palantir.logsafe.UnsafeArg\");\n-                return buildDescription(tree)\n-                        .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n-                        .addFix(builder.replace(tree.getMethodSelect(), unsafeArg + \".of\")\n-                                .build())\n-                        .build();\n+            if (argNameExpression instanceof JCTree.JCLiteral) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDIyOA=="}, "originalCommit": {"oid": "82bfb2815b3c1de891b032bd504e7735b154f1db"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2204, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}