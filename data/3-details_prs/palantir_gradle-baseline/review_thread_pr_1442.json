{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjg0NjI5", "number": 1442, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0ODo0NlrOEKRW7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0ODo0NlrOEKRW7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA1NjEyOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/FallThroughTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0ODo0NlrOGrN5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0ODo0NlrOGrN5zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTc0MQ==", "bodyText": "I had to use Diagnostic matches and expectErrorMessage because otherwise the diagnostic message matches the magic comment that will suppress the check.\nhttps://github.com/google/error-prone/blob/v2.4.0/core/src/main/java/com/google/errorprone/bugpatterns/FallThrough.java#L45-L46", "url": "https://github.com/palantir/gradle-baseline/pull/1442#discussion_r447969741", "createdAt": "2020-06-30T20:48:46Z", "author": {"login": "pkoenig10"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/FallThroughTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.errorprone.CompilationTestHelper;\n+import com.google.errorprone.bugpatterns.FallThrough;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledForJreRange;\n+import org.junit.jupiter.api.condition.JRE;\n+\n+public class FallThroughTest {\n+\n+    @Test\n+    @DisabledForJreRange(max = JRE.JAVA_13)\n+    public void testSwitchExpression() {\n+        CompilationTestHelper compilationHelper = CompilationTestHelper.newInstance(FallThrough.class, getClass())\n+                .setArgs(ImmutableList.of(\"--enable-preview\", \"--release\", \"14\"));\n+\n+        compilationHelper\n+                .addSourceLines(\n+                        \"Test.java\",\n+                        \"class Test {\",\n+                        \"  static void foo(int value) {\",\n+                        \"    switch (value) {\",\n+                        \"      case 42 -> {}\",\n+                        \"      // BUG: Diagnostic matches: X\",\n+                        \"      default -> {}\",\n+                        \"    };\",\n+                        \"  }\",\n+                        \"}\")\n+                .expectErrorMessage(\"X\", input -> input.contains(\"Execution may fall through from the previous case\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c3351af9ff97341b2d89e40867a6acf9a56a75"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2196, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}