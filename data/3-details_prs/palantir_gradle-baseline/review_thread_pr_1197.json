{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzQwMTgz", "number": 1197, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxNjo0OFrODcUSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoyNDo1N1rODcUbKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDE5MTg2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxNjo0OFrOFkTsDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxNjo0OFrOFkTsDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNTYyOA==", "bodyText": "nit: we should try to avoid array allocations since this will be invoked for every class/interface/enum/etc. A large internal project will benefit from avoiding this.\nPerhaps something along these lines?\ncheckType(tree.getExtendsClause());\ncheckTypes(tree.getImplementsClause());", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373615628", "createdAt": "2020-01-31T18:16:48Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ParameterizedTypeTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"RawTypes\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        // Support SuppressWarnings(\"rawtypes\"), which is already in use\n+        altNames = {\"rawtypes\"},\n+        summary =\n+                \"Avoid raw types; add appropriate type parameters if possible.\\n\"\n+                        + \"This can be suppressed with @SuppressWarnings(\\\"rawtypes\\\") where necessary, such as when \"\n+                        + \"interacting with older library code.\")\n+public final class RawTypes extends BugChecker\n+        implements BugChecker.VariableTreeMatcher,\n+                BugChecker.NewClassTreeMatcher,\n+                BugChecker.ClassTreeMatcher,\n+                BugChecker.MethodTreeMatcher {\n+    @Override\n+    public Description matchVariable(VariableTree tree, VisitorState state) {\n+        return testType(tree.getType());\n+    }\n+\n+    @Override\n+    public Description matchNewClass(NewClassTree tree, VisitorState state) {\n+        return testType(tree.getIdentifier());\n+    }\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        List<Tree> types = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b0353bfae48cb47258fa57a34d043700f42573"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDE5NTI2OnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxNzo1OVrOFkTuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDoyOTo0N1rOFkbR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjE4MA==", "bodyText": "This isn't necessary because the RawTypes check does not provide a suggested fix, this list enumerates the checks that we automatically fix by default.\nI wonder how many projects this will impact, we could implement a automated fix to apply ? as a replacement. I'm sure there are edge cases that it won't fix, but it should make most cases slightly better. The counterargument is that most of these should be replaced with more precise type parameters that humans are better equipped to write.", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373616180", "createdAt": "2020-01-31T18:17:59Z", "author": {"login": "carterkozak"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java", "diffHunk": "@@ -38,6 +38,7 @@\n             \"PreferListsPartition\",\n             \"PreferSafeLoggableExceptions\",\n             \"PreferSafeLoggingPreconditions\",\n+            \"RawTypes\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b0353bfae48cb47258fa57a34d043700f42573"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyNDQ0OQ==", "bodyText": "Removed from this list.\nI'd rather leave existing cases marked as warnings for human review than have them replaced by ? or Object.", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373724449", "createdAt": "2020-01-31T23:08:13Z", "author": {"login": "AlexLandau"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java", "diffHunk": "@@ -38,6 +38,7 @@\n             \"PreferListsPartition\",\n             \"PreferSafeLoggableExceptions\",\n             \"PreferSafeLoggingPreconditions\",\n+            \"RawTypes\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjE4MA=="}, "originalCommit": {"oid": "f1b0353bfae48cb47258fa57a34d043700f42573"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MDAwNw==", "bodyText": "Sounds good", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373740007", "createdAt": "2020-02-01T00:29:47Z", "author": {"login": "carterkozak"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java", "diffHunk": "@@ -38,6 +38,7 @@\n             \"PreferListsPartition\",\n             \"PreferSafeLoggableExceptions\",\n             \"PreferSafeLoggingPreconditions\",\n+            \"RawTypes\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjE4MA=="}, "originalCommit": {"oid": "f1b0353bfae48cb47258fa57a34d043700f42573"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDIwOTQ4OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoyMzoyMlrOFkT3Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoyMzoyMlrOFkT3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxODQ5NA==", "bodyText": "Should this cover TypeCastTreeMatcher as well, to protect against:\nMap<String, String> value = new HashMap<>();\nObject object = (Map) value;", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373618494", "createdAt": "2020-01-31T18:23:22Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ParameterizedTypeTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"RawTypes\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        // Support SuppressWarnings(\"rawtypes\"), which is already in use\n+        altNames = {\"rawtypes\"},\n+        summary =\n+                \"Avoid raw types; add appropriate type parameters if possible.\\n\"\n+                        + \"This can be suppressed with @SuppressWarnings(\\\"rawtypes\\\") where necessary, such as when \"\n+                        + \"interacting with older library code.\")\n+public final class RawTypes extends BugChecker\n+        implements BugChecker.VariableTreeMatcher,\n+                BugChecker.NewClassTreeMatcher,\n+                BugChecker.ClassTreeMatcher,\n+                BugChecker.MethodTreeMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b0353bfae48cb47258fa57a34d043700f42573"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDIxMzUyOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoyNDo1N1rOFkT50A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoyNDo1N1rOFkT50A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxOTE1Mg==", "bodyText": "types can render in odd ways, especially when they include other generic type information. prettyType should make it a bit cleaner:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        + realType\n          \n          \n            \n                                        + MoreSuggestedFixes.prettyType(null, null, realType)", "url": "https://github.com/palantir/gradle-baseline/pull/1197#discussion_r373619152", "createdAt": "2020-01-31T18:24:57Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/RawTypes.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ParameterizedTypeTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.code.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"RawTypes\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        // Support SuppressWarnings(\"rawtypes\"), which is already in use\n+        altNames = {\"rawtypes\"},\n+        summary =\n+                \"Avoid raw types; add appropriate type parameters if possible.\\n\"\n+                        + \"This can be suppressed with @SuppressWarnings(\\\"rawtypes\\\") where necessary, such as when \"\n+                        + \"interacting with older library code.\")\n+public final class RawTypes extends BugChecker\n+        implements BugChecker.VariableTreeMatcher,\n+                BugChecker.NewClassTreeMatcher,\n+                BugChecker.ClassTreeMatcher,\n+                BugChecker.MethodTreeMatcher {\n+    @Override\n+    public Description matchVariable(VariableTree tree, VisitorState state) {\n+        return testType(tree.getType());\n+    }\n+\n+    @Override\n+    public Description matchNewClass(NewClassTree tree, VisitorState state) {\n+        return testType(tree.getIdentifier());\n+    }\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        List<Tree> types = new ArrayList<>();\n+        types.add(tree.getExtendsClause());\n+        types.addAll(tree.getImplementsClause());\n+        return testTypes(types);\n+    }\n+\n+    @Override\n+    public Description matchMethod(MethodTree tree, VisitorState state) {\n+        return testType(tree.getReturnType());\n+    }\n+\n+    private Description testTypes(Iterable<? extends Tree> types) {\n+        for (Tree type : types) {\n+            Description description = testType(type);\n+            if (description != Description.NO_MATCH) {\n+                return description;\n+            }\n+        }\n+        return Description.NO_MATCH;\n+    }\n+\n+    private Description testType(Tree type) {\n+        if (type == null) {\n+            return Description.NO_MATCH;\n+        }\n+        Type realType = ASTHelpers.getType(type);\n+        if (realType != null && realType.isRaw()) {\n+            return buildDescription(type)\n+                    .setMessage(\"Avoid raw types; add appropriate type parameters if possible. \"\n+                            + \"The type was: \"\n+                            + realType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b0353bfae48cb47258fa57a34d043700f42573"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2066, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}