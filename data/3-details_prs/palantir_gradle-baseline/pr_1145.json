{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDUzMzgx", "number": 1145, "title": "New baseline-class-uniqueness.lock file allows incremental adoption", "bodyText": "Before this PR\nIt's pretty hard to roll out the baseline-class-uniqueness plugin because it currently is quite an \"all or nothing\" thing - either you're 100% compliant or else it fails. We haven't really invested in this up until now, because not that much seems to go wrong.\nHOWEVER - a recent c-j-r dependency upgrade brought in new 'jakarta' jars, which are renamed versions of javax ones (e.g. javax.ws.rs:javax.ws.rs-api:2.1 and jakarta.ws.rs:jakarta.ws.rs-api:2.1.6 are pretty much the same thing).  People are now starting to get confusing runtime errors from these.  Internally, I've got a plugin to automatically fix the problem (gradle-jakarta-renames), but in order to roll that out, I want to ensure people can code-review the changes that it causes.\nAfter this PR\n==COMMIT_MSG==\nUsers can now apply plugin: 'com.palantir.baseline-class-uniqueness' even if they are not yet fully compliant, as the plugin will now just record conflicts in a lock-file. This makes it easier to incrementally improve projects, rather than asking people to fix things in a big-bang way.\n==COMMIT_MSG==\n@raiju for SA who cared about this stuff before\nbefore merging\n\n tests\n decide if we want to delete the old stuff too?\n\nPossible downsides?\n\nThere is lots of room to make the class uniqueness analyzing more efficient (it's currently pretty naiive)... If 100 projects all run baseline-class-uniqueness and depend on one jar, I think that jar will get unpacked and analyzed 100 times.\nmore lock files might confuse people", "createdAt": "2020-01-07T15:54:18Z", "url": "https://github.com/palantir/gradle-baseline/pull/1145", "merged": true, "mergeCommit": {"oid": "866aff69f536028a7ac9ceba7e1de7b538baf037"}, "closed": true, "closedAt": "2020-01-07T18:53:27Z", "author": {"login": "iamdanfox"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4Az5_gH2gAyMzYwMDUzMzgxOjkzMzFhNzEyODk3NDkyZWY0NjI2ODQwY2NkNmY5MTQzMTM4NDE2MWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4Ef0oAH2gAyMzYwMDUzMzgxOjhhMTdhZWNjOWRjOTVhNDg0YjIxMTRhY2YzM2Q2NTA5OWExOGFmMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9331a712897492ef4626840ccd6f91431384161c", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/9331a712897492ef4626840ccd6f91431384161c", "committedDate": "2020-01-07T13:31:23Z", "message": "mvp BaselineClassUniquenessLockPlugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e2eb08a8db3aef3aceb4e825659e22ce668ad6", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/a1e2eb08a8db3aef3aceb4e825659e22ce668ad6", "committedDate": "2020-01-07T13:49:50Z", "message": "Nicer lockfile format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3ea88856d64a3ee6fe210cc7bf24f06e608a74e", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/b3ea88856d64a3ee6fe210cc7bf24f06e608a74e", "committedDate": "2020-01-07T13:52:33Z", "message": "More concise if there's only one configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df143b8137c248a1a1b7479006c00f46872ce419", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/df143b8137c248a1a1b7479006c00f46872ce419", "committedDate": "2020-01-07T14:04:58Z", "message": "Nicer lockfile if everything passes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e97c041751a65166d5369c1f4c3c3c84adc26c", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/c0e97c041751a65166d5369c1f4c3c3c84adc26c", "committedDate": "2020-01-07T14:25:03Z", "message": "Get rid of version numbers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c866962618ff4a7ce0a4a51261c75a6612e3c5be", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/c866962618ff4a7ce0a4a51261c75a6612e3c5be", "committedDate": "2020-01-07T15:01:04Z", "message": "File doesn't exist if there are no problems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5c0689e0284444a86847dc58ffbd00dcd5fe609", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/b5c0689e0284444a86847dc58ffbd00dcd5fe609", "committedDate": "2020-01-07T15:17:45Z", "message": "Factor out ClassUniquenessLockTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efac5145ecfce51b25605082b4b525ec4be1d02a", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/efac5145ecfce51b25605082b4b525ec4be1d02a", "committedDate": "2020-01-07T15:24:21Z", "message": "Merge into the original plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f8419bab4dd9bf91f487577c9f3f4b0e99867d3", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/7f8419bab4dd9bf91f487577c9f3f4b0e99867d3", "committedDate": "2020-01-07T15:34:23Z", "message": "Why not make it a cacheable task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e478bc36556c980c48e7a003cd0065a113cb4a9b", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/e478bc36556c980c48e7a003cd0065a113cb4a9b", "committedDate": "2020-01-07T15:34:58Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d09ffd4b6057cbb1cd38fba3fada2d3e6577ec0", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/0d09ffd4b6057cbb1cd38fba3fada2d3e6577ec0", "committedDate": "2020-01-07T16:03:34Z", "message": "Appease validatePlugins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234d8a35441f6bc38f07d0526a72727b59efaa8c", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/234d8a35441f6bc38f07d0526a72727b59efaa8c", "committedDate": "2020-01-07T16:13:25Z", "message": "Mention task name in the README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/623a7555290d05e764fd5282369c78f96bebfd7a", "committedDate": "2020-01-07T16:13:25Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzY3ODY1", "url": "https://github.com/palantir/gradle-baseline/pull/1145#pullrequestreview-339367865", "createdAt": "2020-01-07T16:53:42Z", "commit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1Mzo0MlrOFa_Z6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1Mzo0MlrOFa_Z6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0NjEyMA==", "bodyText": "just string is fine", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363846120", "createdAt": "2020-01-07T16:53:42Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -17,27 +17,37 @@\n package com.palantir.baseline.plugins;\n \n import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.ClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n+        TaskProvider<ClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniquenessLock\", ClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n+        // TODO(dfox): is this 'rule' redundant now? maybe replace it with a kinda strict mode?\n+        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n         project.getTasks().addRule(rule);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n+            lockTask.configure(t -> t.configurations.add(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME));\n+\n             String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n             rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            project.getTasks().getByName(\"check\").dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzY4Njcw", "url": "https://github.com/palantir/gradle-baseline/pull/1145#pullrequestreview-339368670", "createdAt": "2020-01-07T16:54:57Z", "commit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1NDo1OFrOFa_cQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1NDo1OFrOFa_cQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0NjcyMQ==", "bodyText": "let's get rid of the rule", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363846721", "createdAt": "2020-01-07T16:54:58Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -17,27 +17,37 @@\n package com.palantir.baseline.plugins;\n \n import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.ClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n+        TaskProvider<ClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniquenessLock\", ClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n+        // TODO(dfox): is this 'rule' redundant now? maybe replace it with a kinda strict mode?\n+        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzcxNDQx", "url": "https://github.com/palantir/gradle-baseline/pull/1145#pullrequestreview-339371441", "createdAt": "2020-01-07T16:59:10Z", "commit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1OToxMFrOFa_khQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjo1OToxMFrOFa_khQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0ODgzNw==", "bodyText": "I think we may want to provide a different message if new duplicates appear vs when problems are fixed, or mention here that it's dangerous to have duplicate classes on the classpath and explain why it's worth spending time to fix.\nOtherwise I think folks will see \"run X to update locks\" and they'll ./X.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363848837", "createdAt": "2020-01-07T16:59:10Z", "author": {"login": "carterkozak"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/ClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+@SuppressWarnings(\"VisibilityModifier\")\n+public class ClassUniquenessLockTask extends DefaultTask {\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes\n+    private final File lockFile;\n+    public final SetProperty<String> configurations;\n+\n+    public ClassUniquenessLockTask() {\n+        this.configurations = getProject().getObjects().setProperty(String.class);\n+        this.lockFile = getProject().file(\"baseline-class-uniqueness.lock\");\n+        onlyIf(new Spec<Task>() {\n+            @Override\n+            public boolean isSatisfiedBy(Task task) {\n+                return !configurations.get().isEmpty();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * This method exists purely for up-to-dateness purposes - we want to re-run if the contents of a configuration\n+     * changes.\n+     */\n+    @Input\n+    public final Map<String, ImmutableList<String>> getContentsOfAllConfigurations() {\n+        return configurations.get().stream().collect(Collectors.toMap(Function.identity(), name -> {\n+            Configuration configuration = getProject().getConfigurations().getByName(name);\n+            return configuration.getIncoming().getResolutionResult().getAllComponents().stream()\n+                    .map(resolvedComponentResult -> resolvedComponentResult.getModuleVersion().toString())\n+                    .collect(ImmutableList.toImmutableList()); // Gradle requires this to be Serializable\n+        }));\n+    }\n+\n+    @OutputFile\n+    public final File getLockFile() {\n+        return lockFile;\n+    }\n+\n+    @TaskAction\n+    public final void doIt() {\n+        Map<String, Optional<String>> resultsByConfiguration = configurations.get().stream()\n+                .collect(Collectors.toMap(Function.identity(), configurationName -> {\n+                    ClassUniquenessAnalyzer analyzer = new ClassUniquenessAnalyzer(getProject().getLogger());\n+                    Configuration configuration = getProject().getConfigurations().getByName(configurationName);\n+                    analyzer.analyzeConfiguration(configuration);\n+                    Collection<Set<ModuleVersionIdentifier>> problemJars = analyzer.getDifferingProblemJars();\n+\n+                    if (problemJars.isEmpty()) {\n+                        return Optional.empty();\n+                    }\n+\n+                    StringBuilder stringBuilder = new StringBuilder();\n+                    // TODO(dfox): ensure we iterate through problemJars in a stable order\n+                    for (Set<ModuleVersionIdentifier> clashingJars : problemJars) {\n+                        stringBuilder\n+                                .append(clashingJars.stream()\n+                                        .map(mvi -> mvi.getGroup() + \":\" + mvi.getName())\n+                                        .sorted()\n+                                        .collect(Collectors.joining(\", \", \"[\", \"]\")))\n+                                .append('\\n');\n+\n+                        analyzer.getDifferingSharedClassesInProblemJars(clashingJars).stream()\n+                                .sorted()\n+                                .forEach(className -> {\n+                                    stringBuilder.append(\"  - \");\n+                                    stringBuilder.append(className);\n+                                    stringBuilder.append('\\n');\n+                                });\n+                    }\n+                    return Optional.of(stringBuilder.toString());\n+                }));\n+\n+        boolean conflictsFound = resultsByConfiguration.values().stream().anyMatch(Optional::isPresent);\n+        if (!conflictsFound) {\n+            // this is desirable because if means if people apply the plugin to lots of projects which are already\n+            // compliant, they don't get loads of noisy lockfiles created.\n+            ensureLockfileDoesNotExist();\n+        } else {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            stringBuilder.append(\"# Run ./gradlew checkClassUniquenessLock --write-locks to update this file\\n\\n\");\n+            // TODO(dfox): make configuration order stable!\n+            resultsByConfiguration.forEach((configuration, contents) -> {\n+                if (contents.isPresent()) {\n+                    stringBuilder.append(\"## \").append(configuration).append(\"\\n\");\n+                    stringBuilder.append(contents.get());\n+                }\n+            });\n+            ensureLockfileContains(stringBuilder.toString());\n+        }\n+    }\n+\n+    private void ensureLockfileContains(String expected) {\n+        if (getProject().getGradle().getStartParameter().isWriteDependencyLocks()) {\n+            GFileUtils.writeFile(expected, lockFile);\n+            getLogger().lifecycle(\"Updated {}\", getProject().getRootDir().toPath().relativize(lockFile.toPath()));\n+        } else {\n+            String onDisk = GFileUtils.readFile(lockFile);\n+            if (!onDisk.equals(expected)) {\n+                throw new GradleException(lockFile\n+                        + \" is out of date, please run `./gradlew \"\n+                        + \"checkClassUniquenessLock --write-locks` to update this file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623a7555290d05e764fd5282369c78f96bebfd7a"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "468acacb9de0932d6bdd81d4e0b31e0a1a3c74b7", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/468acacb9de0932d6bdd81d4e0b31e0a1a3c74b7", "committedDate": "2020-01-07T17:16:29Z", "message": "Delete rule entirely"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691150e756888d81e4ddd1afcac324e493e37994", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/691150e756888d81e4ddd1afcac324e493e37994", "committedDate": "2020-01-07T17:16:29Z", "message": "Rename to simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a5deebb91d6233f660befad337cd3c671e60da", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/72a5deebb91d6233f660befad337cd3c671e60da", "committedDate": "2020-01-07T17:20:03Z", "message": "Might as well just store configurations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc64ddbadb59d4c63a3934359fd89239dc3838fd", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/cc64ddbadb59d4c63a3934359fd89239dc3838fd", "committedDate": "2020-01-07T17:29:51Z", "message": "Check in an example of the lockfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/f34a748050010b3e29ddf2590ba527da51c69b99", "committedDate": "2020-01-07T17:34:10Z", "message": "Include 'Danger!' in the lockfile"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd1da4bb01b9ec0e49bf86f741a2feac421ff521", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/bd1da4bb01b9ec0e49bf86f741a2feac421ff521", "committedDate": "2020-01-07T17:33:14Z", "message": "Include 'Danger!' in the lockfile"}, "afterCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/f34a748050010b3e29ddf2590ba527da51c69b99", "committedDate": "2020-01-07T17:34:10Z", "message": "Include 'Danger!' in the lockfile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzkwNzYw", "url": "https://github.com/palantir/gradle-baseline/pull/1145#pullrequestreview-339390760", "createdAt": "2020-01-07T17:31:57Z", "commit": {"oid": "72a5deebb91d6233f660befad337cd3c671e60da"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzozMTo1N1rOFbAdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNzozODozNFrOFbAnow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2MzMzMg==", "bodyText": "We're losing the ability to easily verify the class uniqueness on different configurations. This could be valuable when running tests since you could inadvertently test with different classes than what exists at runtime.", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363863332", "createdAt": "2020-01-07T17:31:57Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a5deebb91d6233f660befad337cd3c671e60da"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NTUxMg==", "bodyText": "you might want to copy https://github.com/palantir/metric-schema/blob/develop/gradle-metric-schema/src/main/java/com/palantir/metric/schema/gradle/MetricSchemaMarkdownPlugin.java#L46 so that ./gradlew --write-locks also updates the lockfile", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363865512", "createdAt": "2020-01-07T17:37:24Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineClassUniquenessPlugin.java", "diffHunk": "@@ -16,28 +16,30 @@\n \n package com.palantir.baseline.plugins;\n \n-import com.palantir.baseline.plugins.rules.BaselineClassUniquenessRule;\n+import com.palantir.baseline.tasks.CheckClassUniquenessLockTask;\n import org.gradle.api.Project;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.language.base.plugins.LifecycleBasePlugin;\n \n /**\n- * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule\n- * but goes one step further and actually hashes any identically named classfiles to figure out if they're\n- * <i>completely</i> identical (and therefore safely interchangeable).\n+ * This plugin is similar to https://github.com/nebula-plugins/gradle-lint-plugin/wiki/Duplicate-Classes-Rule but goes\n+ * one step further and actually hashes any identically named classfiles to figure out if they're <i>completely</i>\n+ * identical (and therefore safely interchangeable).\n  *\n- * The task only fails if it finds classes which have the same name but different implementations.\n+ * <p>The task only fails if it finds classes which have the same name but different implementations.\n  */\n public class BaselineClassUniquenessPlugin extends AbstractBaselinePlugin {\n     @Override\n     public final void apply(Project project) {\n-        BaselineClassUniquenessRule rule = new BaselineClassUniquenessRule(project);\n-\n-        project.getTasks().addRule(rule);\n+        TaskProvider<CheckClassUniquenessLockTask> lockTask =\n+                project.getTasks().register(\"checkClassUniqueness\", CheckClassUniquenessLockTask.class);\n+        project.getPlugins().apply(LifecycleBasePlugin.class);\n+        project.getTasks().getByName(LifecycleBasePlugin.CHECK_TASK_NAME).dependsOn(lockTask);\n \n         project.getPlugins().withId(\"java\", plugin -> {\n-            String checkRuntimeClasspathTask = \"checkRuntimeClasspathClassUniqueness\";\n-            rule.apply(checkRuntimeClasspathTask);\n-            project.getTasks().getByName(\"check\")\n-                    .dependsOn(project.getTasks().getByName(checkRuntimeClasspathTask));\n+            lockTask.configure(t -> t.configurations.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg2NjAxOQ==", "bodyText": "shouldn't the contents only change if a dependency on the configuration changes?", "url": "https://github.com/palantir/gradle-baseline/pull/1145#discussion_r363866019", "createdAt": "2020-01-07T17:38:34Z", "author": {"login": "ferozco"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.tasks;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.Task;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.artifacts.ModuleVersionIdentifier;\n+import org.gradle.api.provider.SetProperty;\n+import org.gradle.api.specs.Spec;\n+import org.gradle.api.tasks.CacheableTask;\n+import org.gradle.api.tasks.Input;\n+import org.gradle.api.tasks.OutputFile;\n+import org.gradle.api.tasks.TaskAction;\n+import org.gradle.util.GFileUtils;\n+\n+@CacheableTask\n+public class CheckClassUniquenessLockTask extends DefaultTask {\n+\n+    private static final String HEADER = \"# Danger! Multiple jars contain identically named classes. This may \"\n+            + \"cause different behaviour depending on classpath ordering.\\n\"\n+            + \"# Run ./gradlew checkClassUniqueness --write-locks to update this file\\n\\n\";\n+\n+    // not marking this as an Input, because we want to re-run if the *contents* of a configuration changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34a748050010b3e29ddf2590ba527da51c69b99"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a17aecc9dc95a484b2114acf33d65099a18af32", "author": {"user": {"login": "iamdanfox", "name": null}}, "url": "https://github.com/palantir/gradle-baseline/commit/8a17aecc9dc95a484b2114acf33d65099a18af32", "committedDate": "2020-01-07T17:49:04Z", "message": "Don't always recreate"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2179, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}