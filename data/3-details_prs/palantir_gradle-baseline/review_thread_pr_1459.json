{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODk0NjEz", "number": 1459, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozNzo1MFrOETAJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozOTo1OVrOETAL3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzYwODMzOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozNzo1MFrOG4f0qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozNzo1MFrOG4f0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NDgyNQ==", "bodyText": "SuggestedFixes.qualifyType on \"com.palantir.logsafe.UnsafeArg\" will add the import automagically, or fully qualify the type if there happens to be a foo.bar.UnsafeArg already imported. We can append \".of\" to the result.", "url": "https://github.com/palantir/gradle-baseline/pull/1459#discussion_r461894825", "createdAt": "2020-07-28T21:37:50Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.ErrorProneFlags;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.Matchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"LogsafeArgName\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"Prevent certain argument names from being logged as safe.\")\n+public final class LogsafeArgName extends BugChecker implements MethodInvocationTreeMatcher {\n+    static final String UNSAFE_ARG_NAMES_FLAG = \"LogsafeArgName:UnsafeArgNames\";\n+\n+    private static final Matcher<ExpressionTree> SAFE_ARG_OF =\n+            Matchers.staticMethod().onClass(\"com.palantir.logsafe.SafeArg\").named(\"of\");\n+    private final Matcher<ExpressionTree> compileTimeConstExpressionMatcher =\n+            new CompileTimeConstantExpressionMatcher();\n+\n+    private final Set<String> unsafeParamNames;\n+\n+    // Must have default constructor for service loading to work correctly\n+    public LogsafeArgName() {\n+        this.unsafeParamNames = ImmutableSet.of();\n+    }\n+\n+    public LogsafeArgName(ErrorProneFlags flags) {\n+        this.unsafeParamNames =\n+                flags.getList(UNSAFE_ARG_NAMES_FLAG).map(ImmutableSet::copyOf).orElseGet(ImmutableSet::of);\n+    }\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        if (unsafeParamNames.isEmpty() || !SAFE_ARG_OF.matches(tree, state)) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        List<? extends ExpressionTree> args = tree.getArguments();\n+        ExpressionTree argNameExpression = args.get(0);\n+        if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)) {\n+            String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n+            if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n+                return buildDescription(tree)\n+                        .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n+                        .addFix(SuggestedFix.builder()\n+                                .replace(tree.getMethodSelect(), \"UnsafeArg.of\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebad5c86d5a9474a0f81b2d95bc4149d7db8162e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzYxNDM4OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/LogsafeArgNameTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozOTo1OVrOG4f4YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozOTo1OVrOG4f4YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NTc3Nw==", "bodyText": "Slight preference to use factory methods for these, that way we can fluently build the test from the factory.\nI recall some of the preconditions tests attempting multiple asserts on a shared helper and getting unexpected results because these guys are stateful!", "url": "https://github.com/palantir/gradle-baseline/pull/1459#discussion_r461895777", "createdAt": "2020-07-28T21:39:59Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/LogsafeArgNameTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.errorprone.CompilationTestHelper;\n+import com.google.errorprone.ErrorProneFlags;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public final class LogsafeArgNameTest {\n+    private CompilationTestHelper compilationHelper;\n+    private RefactoringValidator refactoringHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebad5c86d5a9474a0f81b2d95bc4149d7db8162e"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2201, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}