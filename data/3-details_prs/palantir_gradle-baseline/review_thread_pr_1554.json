{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MjI4Mzg1", "number": 1554, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo0ODoxMFrOE7QggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowMjowM1rOE7Qy8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTcxOTA1OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo0ODoxMFrOH2zNgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1MDozOFrOH2zTLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNDE5NQ==", "bodyText": "Thoughts on renaming this to something like IncubatingMethod? We haven't been great about naming, but most error-prone checks are named to describe the bad thing they detect.", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527224195", "createdAt": "2020-11-19T21:48:10Z", "author": {"login": "carterkozak"}, "path": "README.md", "diffHunk": "@@ -198,6 +198,7 @@ Safe Logging can be found at [github.com/palantir/safe-logging](https://github.c\n - `UnnecessarilyQualified`: Types should not be qualified if they are also imported.\n - `DeprecatedGuavaObjects`: `com.google.common.base.Objects` has been obviated by `java.util.Objects`.\n - `JavaTimeSystemDefaultTimeZone`: Avoid using the system default time zone.\n+- `PreventUsingIncubatingMethods`: Prevents calling Conjure incubating APIs unless you explicitly opt-out of the check on a per-use or per-project basis.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNTY0Ng==", "bodyText": "That's fine. I don't think we have code using the suppression yet, so no breakages.", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527225646", "createdAt": "2020-11-19T21:50:38Z", "author": {"login": "blacksmithgu"}, "path": "README.md", "diffHunk": "@@ -198,6 +198,7 @@ Safe Logging can be found at [github.com/palantir/safe-logging](https://github.c\n - `UnnecessarilyQualified`: Types should not be qualified if they are also imported.\n - `DeprecatedGuavaObjects`: `com.google.common.base.Objects` has been obviated by `java.util.Objects`.\n - `JavaTimeSystemDefaultTimeZone`: Avoid using the system default time zone.\n+- `PreventUsingIncubatingMethods`: Prevents calling Conjure incubating APIs unless you explicitly opt-out of the check on a per-use or per-project basis.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNDE5NQ=="}, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTcyNTUwOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo0OTo1M1rOH2zRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1Mzo0MFrOH2zZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNTE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")\n          \n          \n            \n                            + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\").\")\n          \n      \n    \n    \n  \n\nLet's leave the global piece implied, we don't want to give folks too many ideas!", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527225187", "createdAt": "2020-11-19T21:49:53Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.MemberReferenceTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"PreventUsingIncubatingMethods\",\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"You should avoid using incubating methods where possible, since they have very weak stability\"\n+                + \" guarantees. You can explicitly disable this check on a case-by-case basis using\"\n+                + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNzIyMg==", "bodyText": "Alright.", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527227222", "createdAt": "2020-11-19T21:53:40Z", "author": {"login": "blacksmithgu"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.MemberReferenceTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"PreventUsingIncubatingMethods\",\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"You should avoid using incubating methods where possible, since they have very weak stability\"\n+                + \" guarantees. You can explicitly disable this check on a case-by-case basis using\"\n+                + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNTE4Nw=="}, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTcyODY4OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1MDozOVrOH2zTOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1NjoyMVrOH2ze3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNTY1OA==", "bodyText": "No need to set a message, the summary from the annotation above is sufficient\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return buildDescription(tree)\n          \n          \n            \n                    return describeMatch(tree);", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527225658", "createdAt": "2020-11-19T21:50:39Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.MemberReferenceTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"PreventUsingIncubatingMethods\",\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"You should avoid using incubating methods where possible, since they have very weak stability\"\n+                + \" guarantees. You can explicitly disable this check on a case-by-case basis using\"\n+                + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")\n+public final class PreventUsingIncubatingMethods extends BugChecker\n+        implements BugChecker.MethodInvocationTreeMatcher, BugChecker.MemberReferenceTreeMatcher {\n+\n+    /** The full path for the Incubating annotation. */\n+    private static final String INCUBATING = \"com.palantir.conjure.java.lib.internal.Incubating\";\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    @Override\n+    public Description matchMemberReference(MemberReferenceTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    private Description checkTree(Tree tree, Symbol.MethodSymbol method, VisitorState state) {\n+        if (!ASTHelpers.hasAnnotation(method, INCUBATING, state)) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        return buildDescription(tree)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyODYzNg==", "bodyText": "Ack, didn't know that method existed.", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527228636", "createdAt": "2020-11-19T21:56:21Z", "author": {"login": "blacksmithgu"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.MemberReferenceTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"PreventUsingIncubatingMethods\",\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"You should avoid using incubating methods where possible, since they have very weak stability\"\n+                + \" guarantees. You can explicitly disable this check on a case-by-case basis using\"\n+                + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")\n+public final class PreventUsingIncubatingMethods extends BugChecker\n+        implements BugChecker.MethodInvocationTreeMatcher, BugChecker.MemberReferenceTreeMatcher {\n+\n+    /** The full path for the Incubating annotation. */\n+    private static final String INCUBATING = \"com.palantir.conjure.java.lib.internal.Incubating\";\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    @Override\n+    public Description matchMemberReference(MemberReferenceTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    private Description checkTree(Tree tree, Symbol.MethodSymbol method, VisitorState state) {\n+        if (!ASTHelpers.hasAnnotation(method, INCUBATING, state)) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        return buildDescription(tree)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyNTY1OA=="}, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTc1NjA2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1ODo1NVrOH2zj8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjozMjozN1rOH20snQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyOTkzNw==", "bodyText": "this check can be extracted to a static reusable matcher:\nMatchers.hasAnnotation(\"com.palantir.conjure.java.lib.internal.Incubating\");\nWe should probably not fail builds when folks test their endpoints, so we can avoid reporting a match if TestCheckUtils.isTestCode(state) is true (note that this method is relatively expensive, so we should only check it after we've found an incubating match).", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527229937", "createdAt": "2020-11-19T21:58:55Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.MemberReferenceTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"PreventUsingIncubatingMethods\",\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"You should avoid using incubating methods where possible, since they have very weak stability\"\n+                + \" guarantees. You can explicitly disable this check on a case-by-case basis using\"\n+                + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")\n+public final class PreventUsingIncubatingMethods extends BugChecker\n+        implements BugChecker.MethodInvocationTreeMatcher, BugChecker.MemberReferenceTreeMatcher {\n+\n+    /** The full path for the Incubating annotation. */\n+    private static final String INCUBATING = \"com.palantir.conjure.java.lib.internal.Incubating\";\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    @Override\n+    public Description matchMemberReference(MemberReferenceTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    private Description checkTree(Tree tree, Symbol.MethodSymbol method, VisitorState state) {\n+        if (!ASTHelpers.hasAnnotation(method, INCUBATING, state)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODU0MQ==", "bodyText": "That is a good idea.", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527248541", "createdAt": "2020-11-19T22:32:37Z", "author": {"login": "blacksmithgu"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/PreventUsingIncubatingMethods.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.MemberReferenceTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.tools.javac.code.Symbol;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"PreventUsingIncubatingMethods\",\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"You should avoid using incubating methods where possible, since they have very weak stability\"\n+                + \" guarantees. You can explicitly disable this check on a case-by-case basis using\"\n+                + \" @SuppressWarnings(\\\"PreventUsingIncubatingMethods\\\"), or disable it globally for new projects.\")\n+public final class PreventUsingIncubatingMethods extends BugChecker\n+        implements BugChecker.MethodInvocationTreeMatcher, BugChecker.MemberReferenceTreeMatcher {\n+\n+    /** The full path for the Incubating annotation. */\n+    private static final String INCUBATING = \"com.palantir.conjure.java.lib.internal.Incubating\";\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    @Override\n+    public Description matchMemberReference(MemberReferenceTree tree, VisitorState state) {\n+        return checkTree(tree, ASTHelpers.getSymbol(tree), state);\n+    }\n+\n+    private Description checkTree(Tree tree, Symbol.MethodSymbol method, VisitorState state) {\n+        if (!ASTHelpers.hasAnnotation(method, INCUBATING, state)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyOTkzNw=="}, "originalCommit": {"oid": "a373c08f957be0e49000340ade89ae2ba8135301"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTc2NjI2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/IncubatingMethodTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowMjowM1rOH2zqTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjozNDozM1rOH20wBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMTU2Ng==", "bodyText": "Might be simpler to add a testCompile dependency on conjure-lib so we don't have to define this in tests, and we know we're using the right fqcn", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527231566", "createdAt": "2020-11-19T22:02:03Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/IncubatingMethodTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.errorprone.CompilationTestHelper;\n+import org.junit.Test;\n+\n+public class IncubatingMethodTest {\n+\n+    // We define our own simple conjure incubating annotation at the right path:\n+    private static final String[] ANNOTATION_DEFINITION =\n+            new String[] {\"package com.palantir.conjure.java.lib.internal;\", \"public @interface Incubating {}\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c83843841a6c5726b9becd1a7e3be76ca952fc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0OTQxNA==", "bodyText": "Sure, that makes sense. Had to remember how to use version.props correctly...", "url": "https://github.com/palantir/gradle-baseline/pull/1554#discussion_r527249414", "createdAt": "2020-11-19T22:34:33Z", "author": {"login": "blacksmithgu"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/IncubatingMethodTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.errorprone.CompilationTestHelper;\n+import org.junit.Test;\n+\n+public class IncubatingMethodTest {\n+\n+    // We define our own simple conjure incubating annotation at the right path:\n+    private static final String[] ANNOTATION_DEFINITION =\n+            new String[] {\"package com.palantir.conjure.java.lib.internal;\", \"public @interface Incubating {}\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMTU2Ng=="}, "originalCommit": {"oid": "96c83843841a6c5726b9becd1a7e3be76ca952fc"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2146, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}