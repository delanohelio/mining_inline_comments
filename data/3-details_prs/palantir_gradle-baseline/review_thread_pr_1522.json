{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzgzMjgz", "number": 1522, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowNjozMFrOEw3Peg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowODoxMlrOEw3R7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjcyMTg2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/ObjectsHashCodeUnnecessaryVarargsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowNjozMFrOHmrnvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowNjozMFrOHmrnvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMjYyMg==", "bodyText": "these are both a bit sketchy cases where compiler should have issued lint message warning: non-varargs call of varargs method with inexact argument type for last parameter;", "url": "https://github.com/palantir/gradle-baseline/pull/1522#discussion_r510322622", "createdAt": "2020-10-22T17:06:30Z", "author": {"login": "schlosna"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/ObjectsHashCodeUnnecessaryVarargsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class ObjectsHashCodeUnnecessaryVarargsTest {\n+\n+    @Test\n+    public void test() {\n+        fix().addInputLines(\n+                        \"Test.java\",\n+                        \"import java.util.Objects;\",\n+                        \"public class Test {\",\n+                        \"  void f(Object a, Object[] b, String[] c) {\",\n+                        \"    Objects.hash(a);\",\n+                        \"    Objects.hash(a, a);\",\n+                        \"    Objects.hash(b);\",\n+                        \"    Objects.hash(c);\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e264a56d73b2ff77f3f2fc64eed9682be710686d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjcyODEyOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/ObjectsHashCodeUnnecessaryVarargsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowODoxMlrOHmrruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyMDoyNFrOHmuUVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMzY0Mw==", "bodyText": "Should Object[] be treated differently than other object type array such as String[] in this case? I'm a little worried this might be papering over some other potential issues where something should be using Arrays.hashCode directly on an array.", "url": "https://github.com/palantir/gradle-baseline/pull/1522#discussion_r510323643", "createdAt": "2020-10-22T17:08:12Z", "author": {"login": "schlosna"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/ObjectsHashCodeUnnecessaryVarargsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class ObjectsHashCodeUnnecessaryVarargsTest {\n+\n+    @Test\n+    public void test() {\n+        fix().addInputLines(\n+                        \"Test.java\",\n+                        \"import java.util.Objects;\",\n+                        \"public class Test {\",\n+                        \"  void f(Object a, Object[] b, String[] c) {\",\n+                        \"    Objects.hash(a);\",\n+                        \"    Objects.hash(a, a);\",\n+                        \"    Objects.hash(b);\",\n+                        \"    Objects.hash(c);\",\n+                        \"  }\",\n+                        \"}\")\n+                .addOutputLines(\n+                        \"Test.java\",\n+                        \"import java.util.Objects;\",\n+                        \"public class Test {\",\n+                        \"  void f(Object a, Object[] b, String[] c) {\",\n+                        \"    Objects.hashCode(a);\",\n+                        \"    Objects.hash(a, a);\",\n+                        \"    Objects.hash(b);\",\n+                        \"    Objects.hashCode(c);\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e264a56d73b2ff77f3f2fc64eed9682be710686d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2NjgwNg==", "bodyText": "Good call, I've updated the check to avoid arrays entirely.", "url": "https://github.com/palantir/gradle-baseline/pull/1522#discussion_r510366806", "createdAt": "2020-10-22T18:20:24Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/ObjectsHashCodeUnnecessaryVarargsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class ObjectsHashCodeUnnecessaryVarargsTest {\n+\n+    @Test\n+    public void test() {\n+        fix().addInputLines(\n+                        \"Test.java\",\n+                        \"import java.util.Objects;\",\n+                        \"public class Test {\",\n+                        \"  void f(Object a, Object[] b, String[] c) {\",\n+                        \"    Objects.hash(a);\",\n+                        \"    Objects.hash(a, a);\",\n+                        \"    Objects.hash(b);\",\n+                        \"    Objects.hash(c);\",\n+                        \"  }\",\n+                        \"}\")\n+                .addOutputLines(\n+                        \"Test.java\",\n+                        \"import java.util.Objects;\",\n+                        \"public class Test {\",\n+                        \"  void f(Object a, Object[] b, String[] c) {\",\n+                        \"    Objects.hashCode(a);\",\n+                        \"    Objects.hash(a, a);\",\n+                        \"    Objects.hash(b);\",\n+                        \"    Objects.hashCode(c);\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMzY0Mw=="}, "originalCommit": {"oid": "e264a56d73b2ff77f3f2fc64eed9682be710686d"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2129, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}