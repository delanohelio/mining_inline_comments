{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTU2MzEw", "number": 1217, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNTozMToxMlrODduYOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0NjoyM1rODeeutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDk1MTYwOnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNTozMToxM1rOFmfXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNTo0ODoyOVrOFmgEuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNDA2MQ==", "bodyText": "can we use a LazyInitializedFormatterStep containing a memozied suppleire instead pls?", "url": "https://github.com/palantir/gradle-baseline/pull/1217#discussion_r375904061", "createdAt": "2020-02-06T15:31:13Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineFormat.java", "diffHunk": "@@ -41,6 +55,104 @@\n     public void apply(Project project) {\n         this.project = project;\n \n+        project.getPluginManager().apply(\"com.diffplug.gradle.spotless\");\n+\n+        SpotlessExtension spotlessExtension = project.getExtensions().getByType(SpotlessExtension.class);\n+        // Keep spotless from eagerly configuring all other tasks.  We do the same thing as the enforceCheck\n+        // property below by making the check task depend on spotlessCheck.\n+        // See  https://github.com/diffplug/spotless/issues/444\n+        spotlessExtension.setEnforceCheck(false);\n+\n+        // Allow disabling copyright for tests\n+        if (!\"false\".equals(project.findProperty(\"com.palantir.baseline-format.copyright\"))) {\n+            configureCopyrightStep(project, spotlessExtension);\n+        }\n+\n+        // necessary because SpotlessPlugin creates tasks in an afterEvaluate block\n+        TaskProvider<Task> formatTask = project.getTasks().register(\"format\", task -> {\n+            task.setGroup(\"Formatting\");\n+        });\n+        project.afterEvaluate(p -> {\n+            formatTask.configure(t -> {\n+                t.dependsOn(\"spotlessApply\");\n+            });\n+\n+            // re-enable spotless checking, but lazily so it doesn't eagerly configure everything else\n+            project.getTasks().named(JavaBasePlugin.CHECK_TASK_NAME).configure(t -> {\n+                t.dependsOn(project.getTasks().named(\"spotlessCheck\"));\n+            });\n+\n+            // The copyright step configures itself lazily to allow for baselineUpdateConfig to potentially create the\n+            // right files. Therefore, also make sure that these will run in the right order.\n+            project.getPluginManager().withPlugin(\"com.palantir.baseline-config\", baselineConfig -> {\n+                project.getTasks()\n+                        .matching(t -> t.getName().startsWith(\"spotless\"))\n+                        .configureEach(t -> t.mustRunAfter(\"baselineUpdateConfig\"));\n+            });\n+        });\n+\n+        project.getPluginManager().withPlugin(\"java\", plugin -> {\n+            configureSpotlessJava(project, spotlessExtension);\n+        });\n+    }\n+\n+    /**\n+     * Necessary in order to not fail right away if the copyright folder doesn't exist yet, because it would be created\n+     * by {@code baselineUpdateConfig}.\n+     */\n+    private FormatterStep createLazyLicenseHeaderStep(Project project) {\n+        // Spotless will consider the license header to be the file prefix up to the first line starting with delimiter\n+        String delimiter = \"(?! \\\\*|/\\\\*| \\\\*/)\";\n+\n+        // Compute the copyright lazily\n+        Supplier<FormatterStep> realStep = Suppliers.memoize(() -> {\n+            String header = computeCopyrightHeader(project);\n+            return LicenseHeaderStep.createFromHeader(header, delimiter);\n+        });\n+\n+        return (FormatterStep) Proxy.newProxyInstance(\n+                Thread.currentThread().getContextClassLoader(),\n+                new Class[] {FormatterStep.class},\n+                (_proxy, method, args) -> method.invoke(realStep.get(), args));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddbbb10b04885d275b0c17f54298ca595dbb0c0"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxNTcwNA==", "bodyText": "yep, and turns out doing so now showcased that this thing was trivially serializable which is not quite what you want.", "url": "https://github.com/palantir/gradle-baseline/pull/1217#discussion_r375915704", "createdAt": "2020-02-06T15:48:29Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineFormat.java", "diffHunk": "@@ -41,6 +55,104 @@\n     public void apply(Project project) {\n         this.project = project;\n \n+        project.getPluginManager().apply(\"com.diffplug.gradle.spotless\");\n+\n+        SpotlessExtension spotlessExtension = project.getExtensions().getByType(SpotlessExtension.class);\n+        // Keep spotless from eagerly configuring all other tasks.  We do the same thing as the enforceCheck\n+        // property below by making the check task depend on spotlessCheck.\n+        // See  https://github.com/diffplug/spotless/issues/444\n+        spotlessExtension.setEnforceCheck(false);\n+\n+        // Allow disabling copyright for tests\n+        if (!\"false\".equals(project.findProperty(\"com.palantir.baseline-format.copyright\"))) {\n+            configureCopyrightStep(project, spotlessExtension);\n+        }\n+\n+        // necessary because SpotlessPlugin creates tasks in an afterEvaluate block\n+        TaskProvider<Task> formatTask = project.getTasks().register(\"format\", task -> {\n+            task.setGroup(\"Formatting\");\n+        });\n+        project.afterEvaluate(p -> {\n+            formatTask.configure(t -> {\n+                t.dependsOn(\"spotlessApply\");\n+            });\n+\n+            // re-enable spotless checking, but lazily so it doesn't eagerly configure everything else\n+            project.getTasks().named(JavaBasePlugin.CHECK_TASK_NAME).configure(t -> {\n+                t.dependsOn(project.getTasks().named(\"spotlessCheck\"));\n+            });\n+\n+            // The copyright step configures itself lazily to allow for baselineUpdateConfig to potentially create the\n+            // right files. Therefore, also make sure that these will run in the right order.\n+            project.getPluginManager().withPlugin(\"com.palantir.baseline-config\", baselineConfig -> {\n+                project.getTasks()\n+                        .matching(t -> t.getName().startsWith(\"spotless\"))\n+                        .configureEach(t -> t.mustRunAfter(\"baselineUpdateConfig\"));\n+            });\n+        });\n+\n+        project.getPluginManager().withPlugin(\"java\", plugin -> {\n+            configureSpotlessJava(project, spotlessExtension);\n+        });\n+    }\n+\n+    /**\n+     * Necessary in order to not fail right away if the copyright folder doesn't exist yet, because it would be created\n+     * by {@code baselineUpdateConfig}.\n+     */\n+    private FormatterStep createLazyLicenseHeaderStep(Project project) {\n+        // Spotless will consider the license header to be the file prefix up to the first line starting with delimiter\n+        String delimiter = \"(?! \\\\*|/\\\\*| \\\\*/)\";\n+\n+        // Compute the copyright lazily\n+        Supplier<FormatterStep> realStep = Suppliers.memoize(() -> {\n+            String header = computeCopyrightHeader(project);\n+            return LicenseHeaderStep.createFromHeader(header, delimiter);\n+        });\n+\n+        return (FormatterStep) Proxy.newProxyInstance(\n+                Thread.currentThread().getContextClassLoader(),\n+                new Class[] {FormatterStep.class},\n+                (_proxy, method, args) -> method.invoke(realStep.get(), args));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNDA2MQ=="}, "originalCommit": {"oid": "8ddbbb10b04885d275b0c17f54298ca595dbb0c0"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDk1OTQ3OnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/test/groovy/com/palantir/baseline/BaselineFormatCopyrightIntegrationTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNTozMzowN1rOFmfb8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNTozMzowN1rOFmfb8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNTI2Ng==", "bodyText": "can we use MyCompany instead of Palantir to emphasise this is not prod usage", "url": "https://github.com/palantir/gradle-baseline/pull/1217#discussion_r375905266", "createdAt": "2020-02-06T15:33:07Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/test/groovy/com/palantir/baseline/BaselineFormatCopyrightIntegrationTest.groovy", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline\n+\n+import java.time.LocalDate\n+import org.apache.commons.io.FileUtils\n+import org.gradle.testkit.runner.TaskOutcome\n+import spock.lang.Unroll\n+\n+@Unroll\n+class BaselineFormatCopyrightIntegrationTest extends AbstractPluginTest {\n+\n+    def setup() {\n+        FileUtils.copyDirectory(\n+                new File(\"../gradle-baseline-java-config/resources\"),\n+                new File(projectDir, \".baseline\"))\n+\n+        // Testing that an empty line is also OK, these can cause gotchas\n+        file(\".baseline/copyright/000test\") << '''\n+            (c) Copyright $YEAR Palantir\n+            \n+            EXTRA\n+        '''.stripIndent()\n+    }\n+\n+    /** The copyright that we expect will be generated when there isn't an existing one */\n+    static generatedCopyright = \"\"\"\\\n+        /*\n+         * (c) Copyright ${LocalDate.now().year} Palantir\n+         *\n+         * EXTRA\n+         */\n+    \"\"\".stripIndent()\n+\n+    static goodCopyright = \"\"\"\\\n+        /*\n+         * (c) Copyright 2019 Palantir", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ddbbb10b04885d275b0c17f54298ca595dbb0c0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjg3MzQ5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0NjoyM1rOFnouCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0ODoxOVrOFnoyrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTkzMA==", "bodyText": "./gradlew format feels a bit odd here. I think I'd almost recommend spotlessApply here", "url": "https://github.com/palantir/gradle-baseline/pull/1217#discussion_r377105930", "createdAt": "2020-02-10T14:46:23Z", "author": {"login": "iamdanfox"}, "path": "README.md", "diffHunk": "@@ -224,9 +224,11 @@ as that file will be overridden on updates.\n \n ### Copyright Checks\n \n-By default Baseline enforces Palantir copyright at the beginning of files. To change this, edit the template copyright\n-in `.baseline/copyright/*.txt` and the RegexpHeader checkstyle configuration in `.baseline/checkstyle/checkstyle.xml`\n+Baseline enforces Palantir copyright at the beginning of files when applying `com.palantir.baseline-format`. To change this, edit the template copyright\n+in `.baseline/copyright/*.txt`.\n+Note that only the first file (sorted lexicographically) is chosen as the copyright for the entire project.\n \n+To automatically update all files with mismatching/missing copyrights, run `./gradlew format`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb50d4bd326806b5699484f0aeceaf2443980d7f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNjczMw==", "bodyText": "Isn't it the same thing though?", "url": "https://github.com/palantir/gradle-baseline/pull/1217#discussion_r377106733", "createdAt": "2020-02-10T14:47:39Z", "author": {"login": "dansanduleac"}, "path": "README.md", "diffHunk": "@@ -224,9 +224,11 @@ as that file will be overridden on updates.\n \n ### Copyright Checks\n \n-By default Baseline enforces Palantir copyright at the beginning of files. To change this, edit the template copyright\n-in `.baseline/copyright/*.txt` and the RegexpHeader checkstyle configuration in `.baseline/checkstyle/checkstyle.xml`\n+Baseline enforces Palantir copyright at the beginning of files when applying `com.palantir.baseline-format`. To change this, edit the template copyright\n+in `.baseline/copyright/*.txt`.\n+Note that only the first file (sorted lexicographically) is chosen as the copyright for the entire project.\n \n+To automatically update all files with mismatching/missing copyrights, run `./gradlew format`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTkzMA=="}, "originalCommit": {"oid": "fb50d4bd326806b5699484f0aeceaf2443980d7f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNzExOQ==", "bodyText": "Recommending another command that format intentionally aliases feels like it might confuse people.", "url": "https://github.com/palantir/gradle-baseline/pull/1217#discussion_r377107119", "createdAt": "2020-02-10T14:48:19Z", "author": {"login": "dansanduleac"}, "path": "README.md", "diffHunk": "@@ -224,9 +224,11 @@ as that file will be overridden on updates.\n \n ### Copyright Checks\n \n-By default Baseline enforces Palantir copyright at the beginning of files. To change this, edit the template copyright\n-in `.baseline/copyright/*.txt` and the RegexpHeader checkstyle configuration in `.baseline/checkstyle/checkstyle.xml`\n+Baseline enforces Palantir copyright at the beginning of files when applying `com.palantir.baseline-format`. To change this, edit the template copyright\n+in `.baseline/copyright/*.txt`.\n+Note that only the first file (sorted lexicographically) is chosen as the copyright for the entire project.\n \n+To automatically update all files with mismatching/missing copyrights, run `./gradlew format`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwNTkzMA=="}, "originalCommit": {"oid": "fb50d4bd326806b5699484f0aeceaf2443980d7f"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2077, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}