{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzk0NDg5", "number": 1412, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxMDozNlrOEFIb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxMDozOFrOEFIb9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE2NTUzOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxMDozNlrOGjLlDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxMDozNlrOGjLlDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MzA1Mg==", "bodyText": "slick", "url": "https://github.com/palantir/gradle-baseline/pull/1412#discussion_r439543052", "createdAt": "2020-06-12T17:10:36Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java", "diffHunk": "@@ -768,6 +768,14 @@ public Void visitLambdaExpression(LambdaExpressionTree node, Void unused) {\n \n         @Override\n         public Void visitMethod(MethodTree tree, Void unused) {\n+            // From the perspective of an errorprone rule there are two standalone trees for a single `record`\n+            // definition; A MethodTree which looks like a void function and a ClassTree which has the record fields.\n+            //\n+            // Its unclear why both trees are emitted, but we can identify and ignore a record's MethodTree by checking\n+            // if it does not have any associated source.\n+            if (state.getEndPosition(tree) < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e8958c3f466f227a52d200ac5333f970d20292"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODE2NTY2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/StrictUnusedVariableTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxMDozOFrOGjLlHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoxMDozOFrOGjLlHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0MzA2OQ==", "bodyText": "What a nifty annotation!", "url": "https://github.com/palantir/gradle-baseline/pull/1412#discussion_r439543069", "createdAt": "2020-06-12T17:10:38Z", "author": {"login": "ferozco"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/StrictUnusedVariableTest.java", "diffHunk": "@@ -295,6 +298,22 @@ public void fixes_previously_suppressed_variables() {\n                 .doTest(TestMode.TEXT_MATCH);\n     }\n \n+    @Test\n+    @DisabledForJreRange(max = JRE.JAVA_13)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be7f74c93b5f5bdd4d5787f5f08b2245b00b8d9b"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2185, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}