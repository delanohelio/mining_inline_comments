{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjczMDY1", "number": 1504, "title": "Errorprone rule to check that all fields in immutables builders have been initialized", "bodyText": "Before this PR\nThe only way to get compile time safety that all fields in a builder have been initialized is to enable staged builders. This has a runtime cost (it results in significantly more generated classes), and the refactoring cost is high (staged builders constrain the order in which fields can be initialized). Without it, it's easy to accidentally miss a field on a builder, resulting in a ci-time or runtime exception.\nAfter this PR\n==COMMIT_MSG==\nAdd an Errorprone rule to check that all fields in Immutables builders have been initialized\n==COMMIT_MSG==\nChecking that all of the fields have been initialized is undecidable in general, so this implementation is limited to the common case where: the builder is constructed in place using new ImmutableType.Builder() or new Type.Builder() (where Type.Builder extends ImmutableType.Builder), or using a method that does nothing other than construct and return the builder; and the builder is never stored to a variable, so the builder only lives within a single statement.\nThis means that these snippets will be checked:\nnew Type.Builder().name(\"name\").build();\nType.builder().name(\"name\").build();\n\n// Type.java\nBuilder builder() { return new Builder(); }\nType.builder().name(\"name\").build();\n\n//Type.java\nImmutableType.Builder builder() { return ImmutableType.builder(); }\nbut these will not (they are ignored and no diagnostics are emitted):\n// Builder cannot be stored into an intermediate variable\nType.Builder builder = new Type.Builder();\nbuilder.name(\"name\").build();\nbuilder().build();\n\n// If the builder comes from a method, that method can't do anything other than construct and return it\nBuilder builder() { return new Builder().name(\"name\"); }\nPossible downsides?\nI have tested this on a handful of services, but it's certainly possible that there is an edge case that I've missed which would cause false positives in other places.\nDuring testing, I found a couple of true positive matches in dead code. If that is the case in other places, upgrading to this version will require manual action in a non-negligible number of services, but I think that is acceptable because it is removing incorrect code.\nI also found some unit tests that are expecting an exception when missing required fields - these tests would need to suppress this warning.\nThe implementation that I decided to go for relies on Immutables generating and using a bitmap and constants named INIT_BIT_(VARNAME) to track whether certain fields have been initialized - this has not been changed since 2015, but it is not part of the public API so there is no guarantee that it won't change in future. I think any changes that they could make that affect compatibility would only cause the check to false-negative rather than to false positive, and any breakage should be caught by the unit tests here.", "createdAt": "2020-10-09T15:39:56Z", "url": "https://github.com/palantir/gradle-baseline/pull/1504", "merged": true, "mergeCommit": {"oid": "ff89a43f4893ae3c482d681b0a2b7f0d30e686d9"}, "closed": true, "closedAt": "2020-10-12T17:23:08Z", "author": {"login": "jackwickham"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP6Mp-gH2gAyNTAwNjczMDY1OjNjNTIwZDFkOTgxMmQ5NWEzMTUxMzVlNGU1ZGI2MzAzZGFjMzUzNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR3V_ogFqTUwNjc5NTc4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c520d1d9812d95a315135e4e5db6303dac3536f", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/3c520d1d9812d95a315135e4e5db6303dac3536f", "committedDate": "2020-10-06T15:34:25Z", "message": "Check that all required builder fields have been initialized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c070fc8166a3ae3b848bc4b15cad4097a28ec7c", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/4c070fc8166a3ae3b848bc4b15cad4097a28ec7c", "committedDate": "2020-10-06T15:48:48Z", "message": "Handle constructors and from methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9031d01cbc2e895e8449dc7c79eb6b83623bee29", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/9031d01cbc2e895e8449dc7c79eb6b83623bee29", "committedDate": "2020-10-06T17:43:57Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9792eb6714a8c25b4aecf678960e326c115063c6", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/9792eb6714a8c25b4aecf678960e326c115063c6", "committedDate": "2020-10-06T18:15:09Z", "message": "Reduce method complexity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a26f562325748b50c3c122d01ec0e8def6344386", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/a26f562325748b50c3c122d01ec0e8def6344386", "committedDate": "2020-10-06T18:45:39Z", "message": "Check that method does nothing but construct builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d68c5e1b882b55182ab1462361299709a58401", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/68d68c5e1b882b55182ab1462361299709a58401", "committedDate": "2020-10-07T17:04:59Z", "message": "Clean up code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3da67e651d714069658ed7a68690d137900e376d", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/3da67e651d714069658ed7a68690d137900e376d", "committedDate": "2020-10-08T14:42:22Z", "message": "Switch to using method names to detect initialized fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6da262690b17ae9dc7ffd39a29b66a34b6b7ca", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/ba6da262690b17ae9dc7ffd39a29b66a34b6b7ca", "committedDate": "2020-10-08T14:58:18Z", "message": "Support custom init formats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db947c5c589429b3aaa0c74ba65ac43bfc789eb", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/6db947c5c589429b3aaa0c74ba65ac43bfc789eb", "committedDate": "2020-10-08T15:53:19Z", "message": "Support custom get format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dc6b5662d0584caffa28661d290601e177c27f0", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/8dc6b5662d0584caffa28661d290601e177c27f0", "committedDate": "2020-10-08T16:12:56Z", "message": "Fix stack overflow exception when annotations are included recursively"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25520271f6b0c238ac5ee30aa1d916c1c77af387", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/25520271f6b0c238ac5ee30aa1d916c1c77af387", "committedDate": "2020-10-08T17:09:22Z", "message": "Support style annotations on packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a2c85d8ddaba31d8516d6413a840db26a84c75", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/20a2c85d8ddaba31d8516d6413a840db26a84c75", "committedDate": "2020-10-08T17:41:55Z", "message": "Refactor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eac63baeccc57e5a5175f6dad064d22e06c089fc", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/eac63baeccc57e5a5175f6dad064d22e06c089fc", "committedDate": "2020-10-08T17:53:51Z", "message": "Support immutables based on abstract classes too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ba55cb4f17c951806734c3c7c9b38e00607a6f5", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/2ba55cb4f17c951806734c3c7c9b38e00607a6f5", "committedDate": "2020-10-09T11:14:32Z", "message": "Avoid class not found exception at runtime by not instantiating the immutable annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea74fece470b556786baf3a8278048e4233b1dde", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/ea74fece470b556786baf3a8278048e4233b1dde", "committedDate": "2020-10-09T13:40:23Z", "message": "Don't search for @Value.Style annotations because it will only lead to class not found exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bac610f15b47af8f32252c47735ade4c0db90e0b", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/bac610f15b47af8f32252c47735ade4c0db90e0b", "committedDate": "2020-10-09T15:24:54Z", "message": "Update tests and add to readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354254907e8a1e6c44083d59a5e71708e777e579", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/354254907e8a1e6c44083d59a5e71708e777e579", "committedDate": "2020-10-09T15:24:54Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1Nzk1MTMw", "url": "https://github.com/palantir/gradle-baseline/pull/1504#pullrequestreview-505795130", "createdAt": "2020-10-09T15:48:28Z", "commit": {"oid": "354254907e8a1e6c44083d59a5e71708e777e579"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0ODoyOFrOHfPe3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0ODoyOFrOHfPe3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMTU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `ImmutablesBuildeMissingInitialization`: Prevent building Immutables.org builders when not all fields have been populated.\n          \n          \n            \n            - `ImmutablesBuilderMissingInitialization`: Prevent building Immutables.org builders when not all fields have been populated.", "url": "https://github.com/palantir/gradle-baseline/pull/1504#discussion_r502521567", "createdAt": "2020-10-09T15:48:28Z", "author": {"login": "carterkozak"}, "path": "README.md", "diffHunk": "@@ -193,6 +193,7 @@ Safe Logging can be found at [github.com/palantir/safe-logging](https://github.c\n - `PreferStaticLoggers`: Prefer static loggers over instance loggers.\n - `LogsafeArgName`: Prevent certain named arguments as being logged as safe. Specify unsafe argument names using `LogsafeArgName:UnsafeArgNames` errorProne flag.\n - `ImplicitPublicBuilderConstructor`: Prevent builders from unintentionally leaking public constructors.\n+- `ImmutablesBuildeMissingInitialization`: Prevent building Immutables.org builders when not all fields have been populated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "354254907e8a1e6c44083d59a5e71708e777e579"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdf5e31a651c8a14ee13f1cce6c23d29ccb15f3", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/cbdf5e31a651c8a14ee13f1cce6c23d29ccb15f3", "committedDate": "2020-10-09T15:49:46Z", "message": "Update README.md\n\nCo-authored-by: Carter Kozak <ckozak@ckozak.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODMwMzE2", "url": "https://github.com/palantir/gradle-baseline/pull/1504#pullrequestreview-505830316", "createdAt": "2020-10-09T16:36:12Z", "commit": {"oid": "cbdf5e31a651c8a14ee13f1cce6c23d29ccb15f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozNjoxMlrOHfRFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozNjoxMlrOHfRFtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzg5Mg==", "bodyText": "this is kinda amazing that it works! given that it relies on internal implementation details of immutables, I wonder if we coudl get this error-prone rule upstreamed into https://github.com/immutables/immutables so that if they ever decide to change the internal representation then CI will catch their change??", "url": "https://github.com/palantir/gradle-baseline/pull/1504#discussion_r502547892", "createdAt": "2020-10-09T16:36:12Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImmutablesBuilderMissingInitialization.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.base.CaseFormat;\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.LinkType;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.Matchers;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.NewClassTree;\n+import com.sun.source.tree.ReturnTree;\n+import com.sun.tools.javac.code.Symbol;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.code.Type;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.immutables.value.Generated;\n+\n+/**\n+ * Checks that all required fields in an immutables.org generated builder have been populated.\n+ *\n+ * To make it decidable, it is limited to builders that are constructed by calling {@code new ImmutableType.Builder()},\n+ * {@code new Type.Builder()} (where Type.Builder extends ImmutableType.Builder), or a method that only calls one of\n+ * those constructors and returns the result, and are never stored into a variable. Builders that do not meet these\n+ * conditions are assumed to populate all fields, and are ignored.\n+ *\n+ * Mandatory fields are determined by inspecting the generated builder source to find the initBits that are updated by\n+ * each method, to find any that do not get set. If Immutables changes the way that they check for required fields, this\n+ * check will stop working (but the check will probably pass).\n+ */\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"ImmutablesBuilderMissingInitialization\",\n+        linkType = LinkType.CUSTOM,\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        severity = BugPattern.SeverityLevel.ERROR,\n+        summary = \"All required fields of an Immutables builder must be initialized\")\n+public final class ImmutablesBuilderMissingInitialization extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final String FIELD_INIT_BITS_PREFIX = \"INIT_BIT_\";\n+\n+    /**\n+     * Prefixes on the interface getter methods that may be stripped by immutables.\n+     *\n+     * The default immutables style just uses get*, but some places use is* too and we can't load the style to check\n+     * what to remove. It doesn't matter if we remove too much, because we only do a suffix match on the methods.\n+     *\n+     * This should only help when the unprefixed field name is an identifier, because in other cases immutables already\n+     * uses the unprefixed name.\n+     */\n+    private static final ImmutableSet<String> GET_PREFIXES = ImmutableSet.of(\"GET_\", \"IS_\");\n+\n+    private static final Matcher<ExpressionTree> builderMethodMatcher = Matchers.instanceMethod()\n+            .onClass(ImmutablesBuilderMissingInitialization::extendsImmutablesGeneratedClass)\n+            .named(\"build\")\n+            .withParameters();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        // Check that the method is a builder's build() method\n+        if (!builderMethodMatcher.matches(tree, state)) {\n+            return Description.NO_MATCH;\n+        }\n+        ClassSymbol builderClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        ClassSymbol immutableClass = ASTHelpers.enclosingClass(builderClass);\n+        if (immutableClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        Optional<ClassSymbol> interfaceClass = Streams.concat(\n+                        immutableClass.getInterfaces().stream(), Stream.of(immutableClass.getSuperclass()))\n+                .map(type -> type.tsym)\n+                .map(filterByType(ClassSymbol.class))\n+                .flatMap(Streams::stream)\n+                .filter(classSymbol ->\n+                        ASTHelpers.hasAnnotation(classSymbol, \"org.immutables.value.Value.Immutable\", state))\n+                .findAny();\n+        if (!interfaceClass.isPresent()) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        // Mandatory fields have a private static final constant in the generated builder named INIT_BIT_varname, where\n+        // varname is the UPPER_UNDERSCORE version of the variable name. Find these fields to get the mandatory fields.\n+        // nb. this isn't part of any immutables API, so could break.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbdf5e31a651c8a14ee13f1cce6c23d29ccb15f3"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0412d3a05b8d5bb9af55382cad7ab5704d5b69f", "author": {"user": {"login": "jackwickham", "name": "Jack Wickham"}}, "url": "https://github.com/palantir/gradle-baseline/commit/e0412d3a05b8d5bb9af55382cad7ab5704d5b69f", "committedDate": "2020-10-09T16:48:40Z", "message": "Update javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Nzk1Nzg3", "url": "https://github.com/palantir/gradle-baseline/pull/1504#pullrequestreview-506795787", "createdAt": "2020-10-12T17:22:45Z", "commit": {"oid": "e0412d3a05b8d5bb9af55382cad7ab5704d5b69f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2089, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}