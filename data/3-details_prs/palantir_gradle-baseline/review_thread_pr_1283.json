{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDY5MzI3", "number": 1283, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozNjo1NFrODkxN-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozNjo1NFrODkxN-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODgxNzIwOnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozNjo1NFrOFxRvMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozNjo1NFrOFxRvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTE1NQ==", "bodyText": "why not just put them in a sorted map?", "url": "https://github.com/palantir/gradle-baseline/pull/1283#discussion_r387215155", "createdAt": "2020-03-03T18:36:54Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckClassUniquenessLockTask.java", "diffHunk": "@@ -92,25 +94,18 @@ public final void doIt() {\n                         return Optional.empty();\n                     }\n \n-                    StringBuilder stringBuilder = new StringBuilder();\n-                    // TODO(dfox): ensure we iterate through problemJars in a stable order\n-                    for (Set<ModuleVersionIdentifier> clashingJars : problemJars) {\n-                        stringBuilder\n-                                .append(clashingJars.stream()\n-                                        .map(mvi -> mvi.getGroup() + \":\" + mvi.getName())\n-                                        .sorted()\n-                                        .collect(Collectors.joining(\", \", \"[\", \"]\")))\n-                                .append('\\n');\n-\n-                        analyzer.getDifferingSharedClassesInProblemJars(clashingJars).stream()\n-                                .sorted()\n-                                .forEach(className -> {\n-                                    stringBuilder.append(\"  - \");\n-                                    stringBuilder.append(className);\n-                                    stringBuilder.append('\\n');\n-                                });\n-                    }\n-                    return Optional.of(stringBuilder.toString());\n+                    Map<String, String> clashingHeadersToClasses = problemJars.stream()\n+                            .collect(Collectors.toMap(\n+                                    this::clashingJarHeader, clashingJars -> clashingClasses(analyzer, clashingJars)));\n+\n+                    return Optional.of(clashingHeadersToClasses.entrySet().stream()\n+                            .sorted(Comparator.comparing(Map.Entry::getKey))\n+                            .flatMap(entry -> {\n+                                String clashingJarHeader = entry.getKey();\n+                                String clashingClasses = entry.getValue();\n+                                return Stream.of(clashingJarHeader, clashingClasses);\n+                            })\n+                            .collect(Collectors.joining(\"\\n\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde6e134c05257ba1732f96e5f7c088a4bf9d905"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2088, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}