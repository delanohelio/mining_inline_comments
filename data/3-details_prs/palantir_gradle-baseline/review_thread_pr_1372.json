{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTYwOTY5", "number": 1372, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxMjowOFrOEBe0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxMzozNlrOEBe1ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTg4OTA2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LambdaMethodReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxMjowOFrOGdWtTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxMjowOFrOGdWtTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMzkzNA==", "bodyText": "this is a super cool helper method! didn't know it existed", "url": "https://github.com/palantir/gradle-baseline/pull/1372#discussion_r433433934", "createdAt": "2020-06-01T19:12:08Z", "author": {"login": "ferozco"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LambdaMethodReference.java", "diffHunk": "@@ -184,12 +185,56 @@ private Description convertMethodInvocations(\n             LambdaExpressionTree root,\n             VisitorState state,\n             boolean isLocal) {\n+        if (isAmbiguousMethod(symbol, ASTHelpers.getReceiver(invocation), state)) {\n+            return Optional.empty();\n+        }\n+\n         SuggestedFix.Builder builder = SuggestedFix.builder();\n         return qualifyTarget(symbol, invocation, root, builder, state, isLocal)\n                 .flatMap(LambdaMethodReference::toMethodReference)\n                 .map(qualified -> builder.replace(root, qualified).build());\n     }\n \n+    private static boolean isAmbiguousMethod(\n+            Symbol.MethodSymbol symbol, @Nullable ExpressionTree receiver, VisitorState state) {\n+        if (symbol.isStatic()) {\n+            if (symbol.params().size() != 1) {\n+                return false;\n+            }\n+            Symbol.ClassSymbol classSymbol = ASTHelpers.enclosingClass(symbol);\n+            if (classSymbol == null) {\n+                return false;\n+            }\n+            Set<Symbol.MethodSymbol> matching = ASTHelpers.findMatchingMethods(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7929ba1e1fd9b11f8e02675d7509ad105f8e6eba"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTg5MzE1OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/LambdaMethodReferenceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxMzozNlrOGdWv4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxOTo1M1rOGdW74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNDU5NQ==", "bodyText": "gotta keep those tests fast \ud83d\ude1b", "url": "https://github.com/palantir/gradle-baseline/pull/1372#discussion_r433434595", "createdAt": "2020-06-01T19:13:36Z", "author": {"login": "ferozco"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/LambdaMethodReferenceTest.java", "diffHunk": "@@ -23,23 +23,21 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.function.Supplier;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class LambdaMethodReferenceTest {\n \n-    private CompilationTestHelper compilationHelper;\n-    private RefactoringValidator refactoringValidator;\n+    private CompilationTestHelper compile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7929ba1e1fd9b11f8e02675d7509ad105f8e6eba"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNzY2Nw==", "bodyText": "heh, most of our tests are structured this way so I moved it over. I think I migrated most of them after hitting a few cases where tests flaked after helper/validator instances were reused (due to either parallelism or multiple asserts in a single test). This way they're always clean regardless of other state!", "url": "https://github.com/palantir/gradle-baseline/pull/1372#discussion_r433437667", "createdAt": "2020-06-01T19:19:53Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/LambdaMethodReferenceTest.java", "diffHunk": "@@ -23,23 +23,21 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.function.Supplier;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class LambdaMethodReferenceTest {\n \n-    private CompilationTestHelper compilationHelper;\n-    private RefactoringValidator refactoringValidator;\n+    private CompilationTestHelper compile() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNDU5NQ=="}, "originalCommit": {"oid": "7929ba1e1fd9b11f8e02675d7509ad105f8e6eba"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2238, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}