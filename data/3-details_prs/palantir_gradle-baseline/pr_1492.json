{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODAxNDA5", "number": 1492, "title": "BuilderPrivateConstructor error prone rule", "bodyText": "Easy to accidentally create builders with default public constructors.\n==COMMIT_MSG==\nBuilderPrivateConstructor error prone rule\n==COMMIT_MSG==", "createdAt": "2020-09-14T18:27:05Z", "url": "https://github.com/palantir/gradle-baseline/pull/1492", "merged": true, "mergeCommit": {"oid": "4d1d0c7525288acdce40adf4a9e34f03c3d0b711"}, "closed": true, "closedAt": "2020-09-14T23:25:57Z", "author": {"login": "carterkozak"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI3LNTgH2gAyNDg2ODAxNDA5OmVhNmY1MzhkMzFmOGU4ZWUxZGEwZjQ4OGFkNGFhY2EzMjZmYjA1ODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI7MPgAFqTQ4ODIwNjY1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea6f538d31f8e8ee1da0f488ad4aaca326fb0580", "author": {"user": {"login": "carterkozak", "name": "Carter Kozak"}}, "url": "https://github.com/palantir/gradle-baseline/commit/ea6f538d31f8e8ee1da0f488ad4aaca326fb0580", "committedDate": "2020-09-14T18:05:39Z", "message": "BuilderPrivateConstructor error prone rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd43c190f99c03f4e0ff691d675797e56990e5b", "author": {"user": {"login": "carterkozak", "name": "Carter Kozak"}}, "url": "https://github.com/palantir/gradle-baseline/commit/9bd43c190f99c03f4e0ff691d675797e56990e5b", "committedDate": "2020-09-14T18:24:23Z", "message": "better constructor placement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741", "author": {"user": {"login": "carterkozak", "name": "Carter Kozak"}}, "url": "https://github.com/palantir/gradle-baseline/commit/1278fc616fb56d13dfc3b298b309b14d2d3bc741", "committedDate": "2020-09-14T18:21:01Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTIwOTM1", "url": "https://github.com/palantir/gradle-baseline/pull/1492#pullrequestreview-488120935", "createdAt": "2020-09-14T20:35:09Z", "commit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNTowOVrOHRlnkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNTowOVrOHRlnkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDE3OA==", "bodyText": "possible endsWith? I'm thinking we might want to catch some classes like FooBuilder or SimpleBuilder?", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488204178", "createdAt": "2020-09-14T20:35:09Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;\n+                }\n+            }\n+        }\n+        return buildDescription(tree)\n+                .addFix(SuggestedFix.builder()\n+                        .replace(\n+                                constructorPosition,\n+                                constructorPosition,\n+                                String.format(\"\\nprivate %s() {}\", tree.getSimpleName()))\n+                        .build())\n+                .build();\n+    }\n+\n+    private static boolean isValidBuilderClass(ClassTree tree) {\n+        return tree.getSimpleName().contentEquals(\"Builder\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTIxNjg1", "url": "https://github.com/palantir/gradle-baseline/pull/1492#pullrequestreview-488121685", "createdAt": "2020-09-14T20:36:18Z", "commit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNjoxOVrOHRlpww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNjoxOVrOHRlpww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDczOQ==", "bodyText": "requiring it to not implement any methods is probably going to mean we miss any staged builders right? (these would have one class implementing FooStage, BarStage, BazStage which each declare one method?)", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488204739", "createdAt": "2020-09-14T20:36:19Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;\n+                }\n+            }\n+        }\n+        return buildDescription(tree)\n+                .addFix(SuggestedFix.builder()\n+                        .replace(\n+                                constructorPosition,\n+                                constructorPosition,\n+                                String.format(\"\\nprivate %s() {}\", tree.getSimpleName()))\n+                        .build())\n+                .build();\n+    }\n+\n+    private static boolean isValidBuilderClass(ClassTree tree) {\n+        return tree.getSimpleName().contentEquals(\"Builder\")\n+                && tree.getImplementsClause().isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTIyNzAz", "url": "https://github.com/palantir/gradle-baseline/pull/1492#pullrequestreview-488122703", "createdAt": "2020-09-14T20:37:53Z", "commit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNzo1M1rOHRlsug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozNzo1M1rOHRlsug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTQ5OA==", "bodyText": "might be fine to skip this type return validation? people can always tell us if there are false positives (and suppress as aa workaround :)", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488205498", "createdAt": "2020-09-14T20:37:53Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;\n+                }\n+            }\n+        }\n+        return buildDescription(tree)\n+                .addFix(SuggestedFix.builder()\n+                        .replace(\n+                                constructorPosition,\n+                                constructorPosition,\n+                                String.format(\"\\nprivate %s() {}\", tree.getSimpleName()))\n+                        .build())\n+                .build();\n+    }\n+\n+    private static boolean isValidBuilderClass(ClassTree tree) {\n+        return tree.getSimpleName().contentEquals(\"Builder\")\n+                && tree.getImplementsClause().isEmpty()\n+                && tree.getExtendsClause() == null\n+                && tree.getModifiers().getFlags().contains(Modifier.STATIC);\n+    }\n+\n+    private static boolean hasStaticBuilderFactory(ClassSymbol classSymbol, VisitorState state) {\n+        Set<MethodSymbol> matching = ASTHelpers.findMatchingMethods(\n+                state.getName(\"builder\"),\n+                methodSymbol -> methodSymbol != null\n+                        && methodSymbol.getReturnType().tsym.getSimpleName().contentEquals(\"Builder\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTIzNDUy", "url": "https://github.com/palantir/gradle-baseline/pull/1492#pullrequestreview-488123452", "createdAt": "2020-09-14T20:39:04Z", "commit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozOTowNFrOHRlvAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDozOTowNFrOHRlvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNjA4MQ==", "bodyText": "nice ;)", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488206081", "createdAt": "2020-09-14T20:39:04Z", "author": {"login": "iamdanfox"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTI0OTEw", "url": "https://github.com/palantir/gradle-baseline/pull/1492#pullrequestreview-488124910", "createdAt": "2020-09-14T20:41:24Z", "commit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo0MToyNFrOHRlztw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo0MToyNFrOHRlztw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNzI4Nw==", "bodyText": "not 100% sure about the naming conventions we've stuck to, but somehow I feel like flipping this round and naming this after the 'bad' case feels more appropriate to me, so that people could write @SuppressWarnings(\"badthing\") to acknowledge there's something dodgy and they're ignoring it?\nPerhaps something like ImplicitPublicBuilderConstructor or UnintentionalPublicBuilder or something?", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488207287", "createdAt": "2020-09-14T20:41:24Z", "author": {"login": "iamdanfox"}, "path": "README.md", "diffHunk": "@@ -192,6 +192,7 @@ Safe Logging can be found at [github.com/palantir/safe-logging](https://github.c\n - `TooManyArguments`: Prefer Interface that take few arguments rather than many.\n - `PreferStaticLoggers`: Prefer static loggers over instance loggers.\n - `LogsafeArgName`: Prevent certain named arguments as being logged as safe. Specify unsafe argument names using `LogsafeArgName:UnsafeArgNames` errorProne flag.\n+- `BuilderPrivateConstructor`: Prevent builders with static factory methods from leaking public constructors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "author": {"user": {"login": "carterkozak", "name": "Carter Kozak"}}, "url": "https://github.com/palantir/gradle-baseline/commit/e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "committedDate": "2020-09-14T20:44:34Z", "message": "rename to ImplicitPublicBuilderConstructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e9df67d7d77c9606239e09ea2a79bd3be4a87f3", "author": {"user": {"login": "carterkozak", "name": "Carter Kozak"}}, "url": "https://github.com/palantir/gradle-baseline/commit/2e9df67d7d77c9606239e09ea2a79bd3be4a87f3", "committedDate": "2020-09-14T20:51:02Z", "message": "update name in BaselineErrorProneExtension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjA2NjU0", "url": "https://github.com/palantir/gradle-baseline/pull/1492#pullrequestreview-488206654", "createdAt": "2020-09-14T22:46:24Z", "commit": {"oid": "2e9df67d7d77c9606239e09ea2a79bd3be4a87f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2082, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}