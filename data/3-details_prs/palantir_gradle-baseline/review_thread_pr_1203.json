{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzI4MDc4", "number": 1203, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTozNDoxOFrODcmiHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTozNDoxOFrODcmiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzE4MDQ1OnYy", "diffSide": "RIGHT", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTozNDoxOFrOFkucig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMjozMlrOFmZeaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NDAyNg==", "bodyText": "hmm - is splitting the cast really desirable here?", "url": "https://github.com/palantir/gradle-baseline/pull/1203#discussion_r374054026", "createdAt": "2020-02-03T11:34:18Z", "author": {"login": "iamdanfox"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java", "diffHunk": "@@ -145,15 +145,15 @@ private static void applyToJavaProject(Project project) {\n                 }));\n \n         project.getPluginManager().withPlugin(\"java-gradle-plugin\", appliedPlugin -> {\n-            project.getTasks().withType(JavaCompile.class).configureEach(javaCompile ->\n-                    ((ExtensionAware) javaCompile.getOptions())\n-                            .getExtensions()\n-                            .configure(ErrorProneOptions.class, errorProneOptions -> {\n-                                errorProneOptions.check(\"Slf4jLogsafeArgs\", CheckSeverity.OFF);\n-                                errorProneOptions.check(\"PreferSafeLoggableExceptions\", CheckSeverity.OFF);\n-                                errorProneOptions.check(\"PreferSafeLoggingPreconditions\", CheckSeverity.OFF);\n-                                errorProneOptions.check(\"PreconditionsConstantMessage\", CheckSeverity.OFF);\n-                            }));\n+            project.getTasks().withType(JavaCompile.class).configureEach(javaCompile -> ((ExtensionAware)\n+                            javaCompile.getOptions())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6a956d1fb8e828c0f7cf903cb12b3a55013097"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwNzU5Mw==", "bodyText": "not ideal... i think i know why this is happening, the code that tries to inline a \"reasonable prefix\" when deciding whether to partially inline the lambda body or not, only looks at text up to the next break (which is after the cast), and since that fits, it happily accepts that inlining.\nMaking that logic take into account the whole first expression is an option, but might end up causing some worse formattings too down the line, i.e. if the expression inside the cast were more complicated / spans a few lines, I can see how I'd prefer this to the alternative, which would introduce not one but two indentations for the cast body.\ne.g.\nproject.getTasks().withType(JavaCompile.class).configureEach(javaCompile ->\n        ((ExtensionAware) some\n                        .complicated()\n                        .expression())\n                .getExtensions()\n                ...)", "url": "https://github.com/palantir/gradle-baseline/pull/1203#discussion_r375807593", "createdAt": "2020-02-06T12:32:32Z", "author": {"login": "dansanduleac"}, "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java", "diffHunk": "@@ -145,15 +145,15 @@ private static void applyToJavaProject(Project project) {\n                 }));\n \n         project.getPluginManager().withPlugin(\"java-gradle-plugin\", appliedPlugin -> {\n-            project.getTasks().withType(JavaCompile.class).configureEach(javaCompile ->\n-                    ((ExtensionAware) javaCompile.getOptions())\n-                            .getExtensions()\n-                            .configure(ErrorProneOptions.class, errorProneOptions -> {\n-                                errorProneOptions.check(\"Slf4jLogsafeArgs\", CheckSeverity.OFF);\n-                                errorProneOptions.check(\"PreferSafeLoggableExceptions\", CheckSeverity.OFF);\n-                                errorProneOptions.check(\"PreferSafeLoggingPreconditions\", CheckSeverity.OFF);\n-                                errorProneOptions.check(\"PreconditionsConstantMessage\", CheckSeverity.OFF);\n-                            }));\n+            project.getTasks().withType(JavaCompile.class).configureEach(javaCompile -> ((ExtensionAware)\n+                            javaCompile.getOptions())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NDAyNg=="}, "originalCommit": {"oid": "6b6a956d1fb8e828c0f7cf903cb12b3a55013097"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2069, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}