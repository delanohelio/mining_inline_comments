{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODk4NTEy", "number": 1401, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1NDo1MVrOEEymTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo1ODoxM1rOEFMCVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDU4NzY1OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1NDo1MVrOGiolVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxOToyOVrOGjKCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ==", "bodyText": "I think we should expand this check to include any variable", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438969685", "createdAt": "2020-06-11T17:54:51Z", "author": {"login": "ferozco"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjA1Mg==", "bodyText": "+1 no need for it to be constant, field loads are less expensive than lambda allocations.\nWe would want to accept foo, this.foo, foo.bar but not foo().bar, foo[index], foo[index].bar.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438972052", "createdAt": "2020-06-11T17:57:45Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzI4Nw==", "bodyText": "Was a bit worried about race conditions in case it's a member variable. Thinking of it now again though, I'm realizing that it's probably not an issue. I'll look into it.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438973287", "createdAt": "2020-06-11T18:00:01Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NTU2Ng==", "bodyText": "Out of curiosity, why not foo[index] and foo[index].bar?", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438985566", "createdAt": "2020-06-11T18:22:42Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NTc5OQ==", "bodyText": "I'm not entirely sure they'll always be better, but they probably are. Even if there's llc miss it's probably better than the lambda.\nI tend to prefer flagging and fixing the most unambiguous cases, but I don't have a strong opinion here.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r438995799", "createdAt": "2020-06-11T18:42:24Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNzgxMg==", "bodyText": "Check now covers foo, this.foo, foo.bar but not array accesses or anything that could have side-effects.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439517812", "createdAt": "2020-06-12T16:19:29Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,\n+        summary = \"If lambda passed to Optional#orElseGet returns a compile time constant, use Optional#orElse instead\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2OTY4NQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTAwNTAwOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowNzoxNVrOGisyXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyMzo0NVrOGjKLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODU1OQ==", "bodyText": "If the suggested changes make sense, perhaps we should rename this to OptionalOrElseGetValue", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439038559", "createdAt": "2020-06-11T20:07:15Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzOTc4NA==", "bodyText": "This check should be documented with the others in the readme", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439039784", "createdAt": "2020-06-11T20:08:51Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODU1OQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDA1Mw==", "bodyText": "Added a line in the readme.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439520053", "createdAt": "2020-06-12T16:23:45Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODU1OQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTAwNzA2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowNzo0MFrOGiszxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyMzozMVrOGjKKxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODkxNw==", "bodyText": "Should probably be WARN rather than ERROR.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439038917", "createdAt": "2020-06-11T20:07:40Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxOTk0Mg==", "bodyText": "Changed.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439519942", "createdAt": "2020-06-12T16:23:31Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.ERROR,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzODkxNw=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTAxNjE5OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowOTo0MFrOGis5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyNDoxM1rOGjKMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MDM2OQ==", "bodyText": "After we test the suggested fixes on a large internal project (per-merge) we should add this check to the list that baseline automatically fixes by referencing the name from the list in BaselineErrorProneExtension.java", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439040369", "createdAt": "2020-06-11T20:09:40Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMDM0Mg==", "bodyText": "Sounds good. \ud83d\udc4d", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439520342", "createdAt": "2020-06-12T16:24:13Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetConstant.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetConstant\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0MDM2OQ=="}, "originalCommit": {"oid": "bf1712581e70164f22f650aaa6fdb41a15c3d5fb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODA2NzAwOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozNzoyM1rOGjKlpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozNzoyM1rOGjKlpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNjgyMw==", "bodyText": "pedantic nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `OptionalOrElseGetValue`: Prefer `Optional.orElse(expression)` over `Optional.orElseGet(() -> expression)` for trivial expressions.\n          \n          \n            \n            - `OptionalOrElseGetValue`: Prefer `Optional.orElse(value)` over `Optional.orElseGet(() -> value)` for trivial expressions.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439526823", "createdAt": "2020-06-12T16:37:23Z", "author": {"login": "carterkozak"}, "path": "README.md", "diffHunk": "@@ -159,6 +159,7 @@ Safe Logging can be found at [github.com/palantir/safe-logging](https://github.c\n - `NonComparableStreamSort`: Stream.sorted() should only be called on streams of Comparable types.\n - `DangerousStringInternUsage`: Disallow String.intern() invocations in favor of more predictable, scalable alternatives.\n - `OptionalOrElseThrowThrows`: Optional.orElseThrow argument must return an exception, not throw one.\n+- `OptionalOrElseGetValue`: Prefer `Optional.orElse(expression)` over `Optional.orElseGet(() -> expression)` for trivial expressions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eaa6cef3806bb4393c22dffff574ec1f12b5aa8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODA3MDcyOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozODo1MVrOGjKoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo1MTowM1rOGjRTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzQ5MQ==", "bodyText": "Is the compile time constant check ever necessary? What does it catch that the following checks cannot?", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439527491", "createdAt": "2020-06-12T16:38:51Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;\n+            }\n+\n+            ExpressionTree expressionBody = (ExpressionTree) lambdaExpressionTree.getBody();\n+            if (COMPILE_TIME_CONSTANT.matches(expressionBody, state)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eaa6cef3806bb4393c22dffff574ec1f12b5aa8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNjgzNg==", "bodyText": "It covers expressions that may look more complicated than the other cases, but can be evaluated at compile time. For example PREFIX + \"_someSuffix\" or MIN + SIZE * 1.5.\nAdded a test for such case.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439636836", "createdAt": "2020-06-12T20:51:03Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;\n+            }\n+\n+            ExpressionTree expressionBody = (ExpressionTree) lambdaExpressionTree.getBody();\n+            if (COMPILE_TIME_CONSTANT.matches(expressionBody, state)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzQ5MQ=="}, "originalCommit": {"oid": "1eaa6cef3806bb4393c22dffff574ec1f12b5aa8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODc1NTQwOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo1ODoxM1rOGjRdfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjo1OToxMFrOGjThrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTQyMg==", "bodyText": "Not sure the named block + break buys us anything over return Description.NO_MATCH;, by returning no-match we can shed a layer of indents, and style more uniformly with other checks.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439639422", "createdAt": "2020-06-12T20:58:13Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03c85a0dc5243e62f4888b5fc6a94c41b0e46708"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDgzNw==", "bodyText": "It was part of my battle against cyclomatic complexity. I'll check if I can drop it without tipping over.", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439670837", "createdAt": "2020-06-12T22:47:43Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTQyMg=="}, "originalCommit": {"oid": "03c85a0dc5243e62f4888b5fc6a94c41b0e46708"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MzI2Mg==", "bodyText": "I\u2019d suppress the cyclomatic complexity check here", "url": "https://github.com/palantir/gradle-baseline/pull/1401#discussion_r439673262", "createdAt": "2020-06-12T22:59:10Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/OptionalOrElseGetValue.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.BugPattern.SeverityLevel;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.fixes.SuggestedFixes;\n+import com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.matchers.Matcher;\n+import com.google.errorprone.matchers.method.MethodMatchers;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.IdentifierTree;\n+import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n+import com.sun.source.tree.MemberSelectTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"OptionalOrElseGetValue\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = SeverityLevel.WARNING,\n+        summary = \"If lambda passed to Optional#orElseGet returns a simple expression, use Optional#orElse instead\")\n+public final class OptionalOrElseGetValue extends BugChecker implements MethodInvocationTreeMatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Matcher<ExpressionTree> OR_ELSE_GET_METHOD =\n+            MethodMatchers.instanceMethod().onExactClass(\"java.util.Optional\").named(\"orElseGet\");\n+    private static final Matcher<ExpressionTree> COMPILE_TIME_CONSTANT = new CompileTimeConstantExpressionMatcher();\n+\n+    @Override\n+    public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState state) {\n+        match:\n+        {\n+            if (!OR_ELSE_GET_METHOD.matches(tree, state)) {\n+                break match;\n+            }\n+\n+            ExpressionTree orElseGetArg = tree.getArguments().get(0);\n+\n+            if (orElseGetArg.getKind() != Tree.Kind.LAMBDA_EXPRESSION) {\n+                break match;\n+            }\n+\n+            LambdaExpressionTree lambdaExpressionTree = (LambdaExpressionTree) orElseGetArg;\n+            LambdaExpressionTree.BodyKind bodyKind = lambdaExpressionTree.getBodyKind();\n+\n+            if (bodyKind != LambdaExpressionTree.BodyKind.EXPRESSION) {\n+                break match;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzOTQyMg=="}, "originalCommit": {"oid": "03c85a0dc5243e62f4888b5fc6a94c41b0e46708"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2175, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}