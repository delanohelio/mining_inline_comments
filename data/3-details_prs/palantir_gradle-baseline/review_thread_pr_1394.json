{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNTk4NTEw", "number": 1394, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1OTo0MlrOEEyuUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMDowM1rOEEyuuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYwODE2OnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/Slf4jLogsafeArgs.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1OTo0MlrOGioyug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxOTozODo1OFrOGjPnUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzExNA==", "bodyText": "Any chance we can avoid the stream here? This code is super hot because we log a lot of things, one large internal project in particular benefits from any compile speedup we can provide!", "url": "https://github.com/palantir/gradle-baseline/pull/1394#discussion_r438973114", "createdAt": "2020-06-11T17:59:42Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/Slf4jLogsafeArgs.java", "diffHunk": "@@ -68,24 +73,27 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         }\n \n         List<? extends ExpressionTree> allArgs = tree.getArguments();\n-        int lastIndex = allArgs.size() - 1;\n-        int startArg = MARKER.matches(allArgs.get(0), state) ? 2 : 1;\n-        ExpressionTree lastArg = allArgs.get(lastIndex);\n-        boolean lastArgIsThrowable = THROWABLE.matches(lastArg, state);\n-        int endArg = lastArgIsThrowable ? lastIndex - 1 : lastIndex;\n+        int startArgIndex = MARKER.matches(allArgs.get(0), state) ? 2 : 1;\n+        int lastArgIndex = allArgs.size() - 1;\n+        ExpressionTree lastArg = allArgs.get(lastArgIndex);\n \n-        ImmutableList.Builder<Integer> badArgsBuilder = ImmutableList.builder();\n-        for (int i = startArg; i <= endArg; i++) {\n-            if (!ARG.matches(allArgs.get(i), state)) {\n-                badArgsBuilder.add(i);\n-            }\n+        if (startArgIndex == lastArgIndex && OBJECT_ARRAY.matches(lastArg, state)) {\n+            return Description.NO_MATCH;\n         }\n-        List<Integer> badArgs = badArgsBuilder.build();\n-        if (badArgs.isEmpty() || TestCheckUtils.isTestCode(state)) {\n+\n+        boolean lastArgIsThrowable = THROWABLE.matches(lastArg, state);\n+        int lastNonThrowableArgIndex = lastArgIsThrowable ? lastArgIndex - 1 : lastArgIndex;\n+\n+        List<Integer> badArgIndices = IntStream.rangeClosed(startArgIndex, lastNonThrowableArgIndex)\n+                .filter(i -> !ARG.matches(allArgs.get(i), state))\n+                .boxed()\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9eb188b96d85a54891429c5eb724bb96f3ec8eb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NjI5Nw==", "bodyText": "Oh, I thought I spotted a nice simplification. Not my intention to slow it down. I'll revert to the previous for-each loop.", "url": "https://github.com/palantir/gradle-baseline/pull/1394#discussion_r438986297", "createdAt": "2020-06-11T18:24:03Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/Slf4jLogsafeArgs.java", "diffHunk": "@@ -68,24 +73,27 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         }\n \n         List<? extends ExpressionTree> allArgs = tree.getArguments();\n-        int lastIndex = allArgs.size() - 1;\n-        int startArg = MARKER.matches(allArgs.get(0), state) ? 2 : 1;\n-        ExpressionTree lastArg = allArgs.get(lastIndex);\n-        boolean lastArgIsThrowable = THROWABLE.matches(lastArg, state);\n-        int endArg = lastArgIsThrowable ? lastIndex - 1 : lastIndex;\n+        int startArgIndex = MARKER.matches(allArgs.get(0), state) ? 2 : 1;\n+        int lastArgIndex = allArgs.size() - 1;\n+        ExpressionTree lastArg = allArgs.get(lastArgIndex);\n \n-        ImmutableList.Builder<Integer> badArgsBuilder = ImmutableList.builder();\n-        for (int i = startArg; i <= endArg; i++) {\n-            if (!ARG.matches(allArgs.get(i), state)) {\n-                badArgsBuilder.add(i);\n-            }\n+        if (startArgIndex == lastArgIndex && OBJECT_ARRAY.matches(lastArg, state)) {\n+            return Description.NO_MATCH;\n         }\n-        List<Integer> badArgs = badArgsBuilder.build();\n-        if (badArgs.isEmpty() || TestCheckUtils.isTestCode(state)) {\n+\n+        boolean lastArgIsThrowable = THROWABLE.matches(lastArg, state);\n+        int lastNonThrowableArgIndex = lastArgIsThrowable ? lastArgIndex - 1 : lastArgIndex;\n+\n+        List<Integer> badArgIndices = IntStream.rangeClosed(startArgIndex, lastNonThrowableArgIndex)\n+                .filter(i -> !ARG.matches(allArgs.get(i), state))\n+                .boxed()\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzExNA=="}, "originalCommit": {"oid": "d9eb188b96d85a54891429c5eb724bb96f3ec8eb"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwOTE3MA==", "bodyText": "Reverted but had to factor it out to a method to pass the cyclomatic check.", "url": "https://github.com/palantir/gradle-baseline/pull/1394#discussion_r439609170", "createdAt": "2020-06-12T19:38:58Z", "author": {"login": "aioobe"}, "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/Slf4jLogsafeArgs.java", "diffHunk": "@@ -68,24 +73,27 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         }\n \n         List<? extends ExpressionTree> allArgs = tree.getArguments();\n-        int lastIndex = allArgs.size() - 1;\n-        int startArg = MARKER.matches(allArgs.get(0), state) ? 2 : 1;\n-        ExpressionTree lastArg = allArgs.get(lastIndex);\n-        boolean lastArgIsThrowable = THROWABLE.matches(lastArg, state);\n-        int endArg = lastArgIsThrowable ? lastIndex - 1 : lastIndex;\n+        int startArgIndex = MARKER.matches(allArgs.get(0), state) ? 2 : 1;\n+        int lastArgIndex = allArgs.size() - 1;\n+        ExpressionTree lastArg = allArgs.get(lastArgIndex);\n \n-        ImmutableList.Builder<Integer> badArgsBuilder = ImmutableList.builder();\n-        for (int i = startArg; i <= endArg; i++) {\n-            if (!ARG.matches(allArgs.get(i), state)) {\n-                badArgsBuilder.add(i);\n-            }\n+        if (startArgIndex == lastArgIndex && OBJECT_ARRAY.matches(lastArg, state)) {\n+            return Description.NO_MATCH;\n         }\n-        List<Integer> badArgs = badArgsBuilder.build();\n-        if (badArgs.isEmpty() || TestCheckUtils.isTestCode(state)) {\n+\n+        boolean lastArgIsThrowable = THROWABLE.matches(lastArg, state);\n+        int lastNonThrowableArgIndex = lastArgIsThrowable ? lastArgIndex - 1 : lastArgIndex;\n+\n+        List<Integer> badArgIndices = IntStream.rangeClosed(startArgIndex, lastNonThrowableArgIndex)\n+                .filter(i -> !ARG.matches(allArgs.get(i), state))\n+                .boxed()\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzExNA=="}, "originalCommit": {"oid": "d9eb188b96d85a54891429c5eb724bb96f3ec8eb"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDYwOTIzOnYy", "diffSide": "RIGHT", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/Slf4jLogsafeArgsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMDowM1rOGiozfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMDowM1rOGiozfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzMwOQ==", "bodyText": "nice", "url": "https://github.com/palantir/gradle-baseline/pull/1394#discussion_r438973309", "createdAt": "2020-06-11T18:00:03Z", "author": {"login": "carterkozak"}, "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/Slf4jLogsafeArgsTest.java", "diffHunk": "@@ -47,6 +47,7 @@ private void test(String logArgs, String failingArgs) throws Exception {\n                         \"    public String getName() { return null; }\",\n                         \"    public void add(Marker reference) {}\",\n                         \"    public boolean remove(Marker reference) { return true; }\",\n+                        \"    @SuppressWarnings(\\\"deprecation\\\")\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9eb188b96d85a54891429c5eb724bb96f3ec8eb"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2255, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}