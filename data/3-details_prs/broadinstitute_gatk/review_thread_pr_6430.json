{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzUwMzY0", "number": 6430, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozNzo0N1rODdjfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1OTozNlrOE7Qv9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2Nzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozNzo0N1rOFmOaxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0Mjo0OFrOFmOeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjQzNg==", "bodyText": "Is there any reason why this check is particular to CalculateGenotypePosteriors?  It seems like it could be extracted and used with every List<FeatureInput<VariantContext>> in the GATK.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375626436", "createdAt": "2020-02-06T03:37:47Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java", "diffHunk": "@@ -265,9 +267,22 @@\n \n     @Override\n     public void onTraversalStart() {\n+        //check references\n+        final SAMSequenceDictionary mainDict = getBestAvailableSequenceDictionary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8032449305e250e47ed722ef190c3fc39a01b05"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNzI4OA==", "bodyText": "Also, do we need to be as strict as isSameDictionary()?  Maybe it's enough just to have the same sequence dictionary when subset to the contigs used for traversal.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375627288", "createdAt": "2020-02-06T03:42:48Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriors.java", "diffHunk": "@@ -265,9 +267,22 @@\n \n     @Override\n     public void onTraversalStart() {\n+        //check references\n+        final SAMSequenceDictionary mainDict = getBestAvailableSequenceDictionary();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjQzNg=="}, "originalCommit": {"oid": "e8032449305e250e47ed722ef190c3fc39a01b05"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2OTM5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozOToyMFrOFmObtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozOToyMFrOFmObtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjY3OQ==", "bodyText": "Use CalculateGenotypePosteriors.SUPPORTING_CALLSETS_LONG_NAME", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375626679", "createdAt": "2020-02-06T03:39:20Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "diffHunk": "@@ -184,4 +184,17 @@ public void testBadInputFilesAreRejectedWithReasonableError(String badFile) thro\n \n         runCommandLine(args);\n     }\n+\n+    @Test(expectedExceptions = UserException.BadInput.class)\n+    public void testMismatchedReferences(){\n+        final File out = createTempFile(\"out\", \".vcf.gz\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(out)\n+                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21\n+                .addArgument(\"supporting-callsets\", toolsTestDir + \"/walkers/GnarlyGenotyper/sample1.vcf\");  //contigs chr21 and chr21", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8032449305e250e47ed722ef190c3fc39a01b05"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE3MDA1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0MDowMVrOFmOcGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0MDowMVrOFmOcGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNjc3OA==", "bodyText": "The comment suggests the the file name is only half-true.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375626778", "createdAt": "2020-02-06T03:40:01Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "diffHunk": "@@ -184,4 +184,17 @@ public void testBadInputFilesAreRejectedWithReasonableError(String badFile) thro\n \n         runCommandLine(args);\n     }\n+\n+    @Test(expectedExceptions = UserException.BadInput.class)\n+    public void testMismatchedReferences(){\n+        final File out = createTempFile(\"out\", \".vcf.gz\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(out)\n+                .addVCF(getTestFile(\"testFamilyPriors_chr20.vcf\")) //contig 20 and 21", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8032449305e250e47ed722ef190c3fc39a01b05"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE3MzY3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0Mjo1OFrOFmOePQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzo0Mjo1OFrOFmOePQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNzMyNQ==", "bodyText": "chain this to the constructor: new ArgumentsBuilder().addOutput(out). . .", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r375627325", "createdAt": "2020-02-06T03:42:58Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/CalculateGenotypePosteriorsIntegrationTest.java", "diffHunk": "@@ -184,4 +184,17 @@ public void testBadInputFilesAreRejectedWithReasonableError(String badFile) thro\n \n         runCommandLine(args);\n     }\n+\n+    @Test(expectedExceptions = UserException.BadInput.class)\n+    public void testMismatchedReferences(){\n+        final File out = createTempFile(\"out\", \".vcf.gz\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(out)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8032449305e250e47ed722ef190c3fc39a01b05"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTc1ODYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTo1OTozNlrOH2zlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowOTo1OFrOH8_4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg==", "bodyText": "@cmnbroad the changes I made here are catching a contig length mismatch in these tests.  Given that the subsequent test, where the input VCF has no lengths defined in the dictionary, requires turning off validation, I thought that might be acceptable here, but I wanted to check with you as test author.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r527230336", "createdAt": "2020-11-19T21:59:36Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n                 // can't handle CRAM - see https://github.com/samtools/htsjdk/issues/731\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleBAM.bam\"), null, null, false, false},\n                 // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, false},\n+                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aaee60bcc47f16ab76cfe53dfbb3c594416893d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNDc0MQ==", "bodyText": "@ldgauthier Seems fine. It looks like this same test case is duplicated on the next line though and can be removed while you're in there since its redundant.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r528734741", "createdAt": "2020-11-23T14:19:08Z", "author": {"login": "cmnbroad"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n                 // can't handle CRAM - see https://github.com/samtools/htsjdk/issues/731\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleBAM.bam\"), null, null, false, false},\n                 // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, false},\n+                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg=="}, "originalCommit": {"oid": "4aaee60bcc47f16ab76cfe53dfbb3c594416893d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMzU1Mw==", "bodyText": "@cmnbroad I hate to delete a test.  Should I add one where we overwrite a valid dictionary with a (matching) valid dictionary?  That seems like what that original test was intending to do, although that's not particularly interesting behavior.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r533623553", "createdAt": "2020-12-01T18:17:25Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n                 // can't handle CRAM - see https://github.com/samtools/htsjdk/issues/731\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleBAM.bam\"), null, null, false, false},\n                 // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, false},\n+                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg=="}, "originalCommit": {"oid": "4aaee60bcc47f16ab76cfe53dfbb3c594416893d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMzEzOQ==", "bodyText": "@ldgauthier Sure - it seems easy enough to add that. I was mostly just saying that we don't need to have the exact same test case appear in the list twice, which is what we had before, and still have now.", "url": "https://github.com/broadinstitute/gatk/pull/6430#discussion_r533723139", "createdAt": "2020-12-01T21:09:58Z", "author": {"login": "cmnbroad"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionaryIntegrationTest.java", "diffHunk": "@@ -36,9 +36,9 @@\n                 // can't handle CRAM - see https://github.com/samtools/htsjdk/issues/731\n                 new Object[]{ new File(testDir, \"variantsNoDict.vcf\"), new File(testDir, \"exampleBAM.bam\"), null, null, false, false},\n                 // already has a dictionary - but force a replace\n-                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, false},\n+                new Object[]{ new File(testDir, \"variantsWithDict.vcf\"), new File(testDir, \"exampleFASTA.dict\"), null, null, true, true},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzMDMzNg=="}, "originalCommit": {"oid": "4aaee60bcc47f16ab76cfe53dfbb3c594416893d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1084, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}