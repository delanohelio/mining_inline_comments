{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzE5MzUx", "number": 6694, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxOTozMjowMFrOFTP5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo1NjozOFrOGZyCYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NzI3ODAzOnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxOTozMjowMFrOIanRUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxOTozMjowMFrOIanRUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDc3NzI5OA==", "bodyText": "I would recommend removing the changes to this class since they are holdovers from before the rebase of the dangling head branch.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r564777298", "createdAt": "2021-01-26T19:32:00Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "diffHunk": "@@ -594,25 +594,25 @@ int mergeDanglingHeadLegacy(final DanglingChainMergeHelper danglingHeadMergeResu\n \n         final List<CigarElement> elements = danglingHeadMergeResult.cigar.getCigarElements();\n         final CigarElement firstElement = elements.get(0);\n-        Utils.validateArg(firstElement.getOperator() == CigarOperator.M, \"The first Cigar element must be an M\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfd7a593e7b6d305f663bd3cdf085bdfcd3d19"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDQ1OTU3OnYy", "diffSide": "LEFT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/ReadThreadingGraphUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo0NzoyOFrOIf_2Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo0NzoyOFrOIf_2Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyMjgzMA==", "bodyText": "Thank you for correcting this spelling error... i have no idea how that could have happened in the first place...", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570422830", "createdAt": "2021-02-04T17:47:28Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/ReadThreadingGraphUnitTest.java", "diffHunk": "@@ -293,7 +293,7 @@ public void testDanglingTails(final String refEnd,\n         final GATKRead read = ArtificialReadUtils.createArtificialRead(alt.getBytes(), Utils.dupBytes((byte) 30, alt.length()), alt.length() + \"M\");\n         final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n         rtgraph.addRead(read, header);\n-        rtgraph.setMinMatchingBasesToDangingEndRecovery(numLeadingMatchesAllowed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDQ3NTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo1MDozOVrOIf__nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo1MDozOVrOIf__nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNTI0Nw==", "bodyText": "it looks like there might still be some code leftover in this class as a result of the rebase... Can you try resetting this class and make sure the only change is the misspelled argument that you fixed?", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570425247", "createdAt": "2021-02-04T17:50:39Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "diffHunk": "@@ -594,25 +594,24 @@ int mergeDanglingHeadLegacy(final DanglingChainMergeHelper danglingHeadMergeResu\n \n         final List<CigarElement> elements = danglingHeadMergeResult.cigar.getCigarElements();\n         final CigarElement firstElement = elements.get(0);\n-        Utils.validateArg(firstElement.getOperator() == CigarOperator.M, \"The first Cigar element must be an M\");\n \n         final int indexesToMerge = bestPrefixMatchLegacy(danglingHeadMergeResult.referencePathString, danglingHeadMergeResult.danglingPathString, firstElement.getLength());\n         if (indexesToMerge <= 0) {\n             return 0;\n         }\n \n         // we can't push back the reference path\n-        if (indexesToMerge >= danglingHeadMergeResult.referencePath.size() - 1) {\n+        if ( indexesToMerge >= danglingHeadMergeResult.referencePath.size() - 1 ) {\n             return 0;\n         }\n \n         // but we can manipulate the dangling path if we need to\n-        if (indexesToMerge >= danglingHeadMergeResult.danglingPath.size() &&\n-                !extendDanglingPathAgainstReference(danglingHeadMergeResult, indexesToMerge - danglingHeadMergeResult.danglingPath.size() + 2)) {\n+        if ( indexesToMerge >= danglingHeadMergeResult.danglingPath.size() &&\n+                ! extendDanglingPathAgainstReference(danglingHeadMergeResult, indexesToMerge - danglingHeadMergeResult.danglingPath.size() + 2) ) {\n             return 0;\n         }\n \n-        addEdge(danglingHeadMergeResult.referencePath.get(indexesToMerge + 1), danglingHeadMergeResult.danglingPath.get(indexesToMerge), ((MyEdgeFactory) getEdgeFactory()).createEdge(false, 1));\n+        addEdge(danglingHeadMergeResult.referencePath.get(indexesToMerge), danglingHeadMergeResult.danglingPath.get(indexesToMerge), ((MyEdgeFactory)getEdgeFactory()).createEdge(false, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDQ4MTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo1MjoxMVrOIgADlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yMVQyMDoxODo0NlrOKDEi_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNjI2Mw==", "bodyText": "Can you update this list to be comprehensive to all the changes?\nAlso were you not going to make this argument affect the graph code at all? I thought bacterial mode would want to use the new dangling end pruning code and that doesn't seem to be linked to microbial mode at all.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570426263", "createdAt": "2021-02-04T17:52:11Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "diffHunk": "@@ -43,6 +43,13 @@\n     @Argument(fullName = M2ArgumentCollection.MITOCHONDRIA_MODE_LONG_NAME, optional = true, doc = \"Set filters to mitochondrial defaults\")\n     public boolean mitochondria = false;\n \n+    /**\n+     * Mitochondria mode excludes the filters {@link ClusteredEventsFilter}, {@link MultiallelicFilter},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNjU4NA==", "bodyText": "This also doesn't refrence the median mapping wquality change.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570426584", "createdAt": "2021-02-04T17:52:39Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "diffHunk": "@@ -43,6 +43,13 @@\n     @Argument(fullName = M2ArgumentCollection.MITOCHONDRIA_MODE_LONG_NAME, optional = true, doc = \"Set filters to mitochondrial defaults\")\n     public boolean mitochondria = false;\n \n+    /**\n+     * Mitochondria mode excludes the filters {@link ClusteredEventsFilter}, {@link MultiallelicFilter},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNjI2Mw=="}, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDMwODg2Mg==", "bodyText": "right now that flag is specified in the wdl for microbial mutect. We may decide to add it to the code when using this mode in a later PR", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r674308862", "createdAt": "2021-07-21T20:18:46Z", "author": {"login": "ahaessly"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "diffHunk": "@@ -43,6 +43,13 @@\n     @Argument(fullName = M2ArgumentCollection.MITOCHONDRIA_MODE_LONG_NAME, optional = true, doc = \"Set filters to mitochondrial defaults\")\n     public boolean mitochondria = false;\n \n+    /**\n+     * Mitochondria mode excludes the filters {@link ClusteredEventsFilter}, {@link MultiallelicFilter},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNjI2Mw=="}, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDQ4NDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo1Mjo1NVrOIgAFZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yMVQyMDoxOTo0NVrOKDEmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNjcyNg==", "bodyText": "Why was this commented out?", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570426726", "createdAt": "2021-02-04T17:52:55Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "diffHunk": "@@ -62,12 +69,13 @@\n     private static final int DEFAULT_MAX_ALT_ALLELES = 1;\n     private static final int DEFAULT_MIN_UNIQUE_ALT_READS = 0;\n     private static final int DEFAULT_MIN_MEDIAN_MAPPING_QUALITY = 30;\n+    private static final int DEFAULT_MIN_MEDIAN_MAPPING_QUALITY_FOR_MICROBIAL = 20;\n     private static final int DEFAULT_MIN_MEDIAN_BASE_QUALITY = 20;\n     private static final int DEFAULT_MAX_MEDIAN_FRAGMENT_LENGTH_DIFFERENCE = 10000;\n     private static final int DEFAULT_MIN_MEDIAN_READ_POSITION = 1;\n     private static final double DEFAULT_MAX_N_RATIO = Double.POSITIVE_INFINITY;\n     private static final int DEFAULT_MIN_READS_ON_EACH_STRAND = 0;\n-    private static final double DEFAULT_MAX_NUMT_FRACTION = 0.85;\n+//    private static final double DEFAULT_MAX_NUMT_FRACTION = 0.85;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NDMwOTc4NA==", "bodyText": "This filter is no longer used. Clean up from microbial PR", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r674309784", "createdAt": "2021-07-21T20:19:45Z", "author": {"login": "ahaessly"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "diffHunk": "@@ -62,12 +69,13 @@\n     private static final int DEFAULT_MAX_ALT_ALLELES = 1;\n     private static final int DEFAULT_MIN_UNIQUE_ALT_READS = 0;\n     private static final int DEFAULT_MIN_MEDIAN_MAPPING_QUALITY = 30;\n+    private static final int DEFAULT_MIN_MEDIAN_MAPPING_QUALITY_FOR_MICROBIAL = 20;\n     private static final int DEFAULT_MIN_MEDIAN_BASE_QUALITY = 20;\n     private static final int DEFAULT_MAX_MEDIAN_FRAGMENT_LENGTH_DIFFERENCE = 10000;\n     private static final int DEFAULT_MIN_MEDIAN_READ_POSITION = 1;\n     private static final double DEFAULT_MAX_N_RATIO = Double.POSITIVE_INFINITY;\n     private static final int DEFAULT_MIN_READS_ON_EACH_STRAND = 0;\n-    private static final double DEFAULT_MAX_NUMT_FRACTION = 0.85;\n+//    private static final double DEFAULT_MAX_NUMT_FRACTION = 0.85;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyNjcyNg=="}, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDUwNjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo1NzoyMVrOIgASaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo1NzoyMVrOIgASaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzMDA1Ng==", "bodyText": "A few questions about this tool? Does it do this operation on all contigs in the fasta? The documentation doesn't seem to specify that? Perhaps there should be a mechanism to update that.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570430056", "createdAt": "2021-02-04T17:57:21Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDUyNTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowMToxOFrOIgAd9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowMToxOFrOIgAd9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzMzAxNQ==", "bodyText": "Why are you catching the se IllegalStateExceptions?", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570433015", "createdAt": "2021-02-04T18:01:18Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {\n+        int contigLength = seq.getSequenceLength();\n+        int shiftOffset = shiftOffsetsIt == null ? contigLength/2 : shiftOffsetsIt.next();\n+        if (shiftOffset != 0) {\n+            byte[] bases = refSource.queryAndPrefetch(new SimpleInterval(seq.getSequenceName(), 1, contigLength)).getBases();\n+            byte[] basesAtEnd = Arrays.copyOfRange(bases, shiftOffset, bases.length);\n+            byte[] basesAtStart = Arrays.copyOf(bases, shiftOffset);\n+            int shiftBackOffset = bases.length - shiftOffset;\n+\n+            try {\n+                refWriter.startSequence(seq.getSequenceName(), basesPerLine);\n+                refWriter.appendBases(basesAtEnd).appendBases(basesAtStart);\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftBackOffset, contigLength, shiftOffset, bases.length, 0, shiftBackOffset, chainId++));\n+                chainFileWriter.append(\"\\n\" + shiftBackOffset + \"\\n\\n\");\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftOffset - 1, contigLength, 0, shiftOffset, shiftBackOffset, bases.length, chainId++));\n+                chainFileWriter.append(\"\\n\" + shiftOffset + \"\\n\\n\");\n+                if (intervalFilename != null && shiftOffsetsIt == null) {\n+                    int intervalStart = shiftOffset/2;\n+                    int intervalEnd = intervalStart + contigLength/2 - 1;\n+                    int shiftedIntervalStart = intervalStart;\n+                    int shiftedIntervalEnd = intervalEnd + contigLength % 2;\n+                    intervalRegularWriter.append(seq.getSequenceName() + \":\" + intervalStart + \"-\" + intervalEnd + \"\\n\");\n+                    intervalShiftedWriter.append(seq.getSequenceName() + \":\" + shiftedIntervalStart + \"-\" + shiftedIntervalEnd + \"\\n\");\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Failed to write fasta due to \" + e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    private String createChainString(String name, int score, int length, int start, int end, int shiftBackStart, int shiftBackEnd, int id) {\n+        String[] items = new String[] { \"chain\",\n+                Integer.toString(score),\n+                name,\n+                Integer.toString(length),\n+                \"+\",\n+                Integer.toString(shiftBackStart),\n+                Integer.toString(shiftBackEnd),\n+                name,\n+                Integer.toString(length),\n+                \"+\",\n+                Integer.toString(start),\n+                Integer.toString(end),\n+                Integer.toString(id)\n+        };\n+        return String.join(\"\\t\", items);\n+    }\n+\n+    @Override\n+    public Object onTraversalSuccess(){\n+        // TODO is this right?\n+        return null;\n+    }\n+\n+    @Override\n+    public void closeTool() {\n+        super.closeTool();\n+        try{\n+            if( refWriter != null ) {\n+                refWriter.close();\n+            }\n+        } catch (IllegalStateException e){\n+            //sink this\n+        } catch (IOException e) {\n+            throw new UserException(\"Failed to write fasta due to \" + e.getMessage(), e);\n+        }\n+        try{\n+            if (chainFileWriter != null) {\n+                chainFileWriter.close();\n+            }\n+        } catch (IllegalStateException e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDUzNDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowMzozNlrOIgAjwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowMzozNlrOIgAjwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzNDQ5OA==", "bodyText": "I would get rid of most of these try-catch blocks.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570434498", "createdAt": "2021-02-04T18:03:36Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {\n+        int contigLength = seq.getSequenceLength();\n+        int shiftOffset = shiftOffsetsIt == null ? contigLength/2 : shiftOffsetsIt.next();\n+        if (shiftOffset != 0) {\n+            byte[] bases = refSource.queryAndPrefetch(new SimpleInterval(seq.getSequenceName(), 1, contigLength)).getBases();\n+            byte[] basesAtEnd = Arrays.copyOfRange(bases, shiftOffset, bases.length);\n+            byte[] basesAtStart = Arrays.copyOf(bases, shiftOffset);\n+            int shiftBackOffset = bases.length - shiftOffset;\n+\n+            try {\n+                refWriter.startSequence(seq.getSequenceName(), basesPerLine);\n+                refWriter.appendBases(basesAtEnd).appendBases(basesAtStart);\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftBackOffset, contigLength, shiftOffset, bases.length, 0, shiftBackOffset, chainId++));\n+                chainFileWriter.append(\"\\n\" + shiftBackOffset + \"\\n\\n\");\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftOffset - 1, contigLength, 0, shiftOffset, shiftBackOffset, bases.length, chainId++));\n+                chainFileWriter.append(\"\\n\" + shiftOffset + \"\\n\\n\");\n+                if (intervalFilename != null && shiftOffsetsIt == null) {\n+                    int intervalStart = shiftOffset/2;\n+                    int intervalEnd = intervalStart + contigLength/2 - 1;\n+                    int shiftedIntervalStart = intervalStart;\n+                    int shiftedIntervalEnd = intervalEnd + contigLength % 2;\n+                    intervalRegularWriter.append(seq.getSequenceName() + \":\" + intervalStart + \"-\" + intervalEnd + \"\\n\");\n+                    intervalShiftedWriter.append(seq.getSequenceName() + \":\" + shiftedIntervalStart + \"-\" + shiftedIntervalEnd + \"\\n\");\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Failed to write fasta due to \" + e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    private String createChainString(String name, int score, int length, int start, int end, int shiftBackStart, int shiftBackEnd, int id) {\n+        String[] items = new String[] { \"chain\",\n+                Integer.toString(score),\n+                name,\n+                Integer.toString(length),\n+                \"+\",\n+                Integer.toString(shiftBackStart),\n+                Integer.toString(shiftBackEnd),\n+                name,\n+                Integer.toString(length),\n+                \"+\",\n+                Integer.toString(start),\n+                Integer.toString(end),\n+                Integer.toString(id)\n+        };\n+        return String.join(\"\\t\", items);\n+    }\n+\n+    @Override\n+    public Object onTraversalSuccess(){\n+        // TODO is this right?\n+        return null;\n+    }\n+\n+    @Override\n+    public void closeTool() {\n+        super.closeTool();\n+        try{\n+            if( refWriter != null ) {\n+                refWriter.close();\n+            }\n+        } catch (IllegalStateException e){\n+            //sink this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU1MTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowNzozNVrOIgAuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowNzozNVrOIgAuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzNzE3Ng==", "bodyText": "This method needs some comments.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570437176", "createdAt": "2021-02-04T18:07:35Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU1MjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowNzo0NVrOIgAuqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowNzo0NVrOIgAuqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzNzI4OA==", "bodyText": "final", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570437288", "createdAt": "2021-02-04T18:07:45Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {\n+        int contigLength = seq.getSequenceLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU1ODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowOToxM1rOIgAysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODowOToxM1rOIgAysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzODMyMw==", "bodyText": "I would pull this int a method \"writechainfileline(etc..)\"", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570438323", "createdAt": "2021-02-04T18:09:13Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {\n+        int contigLength = seq.getSequenceLength();\n+        int shiftOffset = shiftOffsetsIt == null ? contigLength/2 : shiftOffsetsIt.next();\n+        if (shiftOffset != 0) {\n+            byte[] bases = refSource.queryAndPrefetch(new SimpleInterval(seq.getSequenceName(), 1, contigLength)).getBases();\n+            byte[] basesAtEnd = Arrays.copyOfRange(bases, shiftOffset, bases.length);\n+            byte[] basesAtStart = Arrays.copyOf(bases, shiftOffset);\n+            int shiftBackOffset = bases.length - shiftOffset;\n+\n+            try {\n+                refWriter.startSequence(seq.getSequenceName(), basesPerLine);\n+                refWriter.appendBases(basesAtEnd).appendBases(basesAtStart);\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftBackOffset, contigLength, shiftOffset, bases.length, 0, shiftBackOffset, chainId++));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU2ODE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxMToyNlrOIgA4Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxMToyNlrOIgA4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzOTc1MQ==", "bodyText": "I would compartmentalize these writers into their own methods to make it a bit clearer and safer.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570439751", "createdAt": "2021-02-04T18:11:26Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {\n+        int contigLength = seq.getSequenceLength();\n+        int shiftOffset = shiftOffsetsIt == null ? contigLength/2 : shiftOffsetsIt.next();\n+        if (shiftOffset != 0) {\n+            byte[] bases = refSource.queryAndPrefetch(new SimpleInterval(seq.getSequenceName(), 1, contigLength)).getBases();\n+            byte[] basesAtEnd = Arrays.copyOfRange(bases, shiftOffset, bases.length);\n+            byte[] basesAtStart = Arrays.copyOf(bases, shiftOffset);\n+            int shiftBackOffset = bases.length - shiftOffset;\n+\n+            try {\n+                refWriter.startSequence(seq.getSequenceName(), basesPerLine);\n+                refWriter.appendBases(basesAtEnd).appendBases(basesAtStart);\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftBackOffset, contigLength, shiftOffset, bases.length, 0, shiftBackOffset, chainId++));\n+                chainFileWriter.append(\"\\n\" + shiftBackOffset + \"\\n\\n\");\n+                chainFileWriter.append(createChainString(seq.getSequenceName(), shiftOffset - 1, contigLength, 0, shiftOffset, shiftBackOffset, bases.length, chainId++));\n+                chainFileWriter.append(\"\\n\" + shiftOffset + \"\\n\\n\");\n+                if (intervalFilename != null && shiftOffsetsIt == null) {\n+                    int intervalStart = shiftOffset/2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU3MTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxMjoxNFrOIgA6ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxMjoxNFrOIgA6ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MDI5Mg==", "bodyText": "all these can be private", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570440292", "createdAt": "2021-02-04T18:12:14Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU3MzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxMjo0M1rOIgA7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxMjo0M1rOIgA7bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MDU1Nw==", "bodyText": "Can you add a CLI example here? That would make it a little easier for users to tell how this tool works.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570440557", "createdAt": "2021-02-04T18:12:43Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU3OTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxNDoyMlrOIgA_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxNDoyMlrOIgA_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MTYyNQ==", "bodyText": "Can you add a integration test for this tool? It seems pretty straightforward but as of right now it seems to pretty simply shift whatever contigs are in the fasta that is provided. It would be nice to have a test on one of the existing small fasta files in the test suite to check that the tool is doing something correctly. At worst you could simply make the liftover files etc for the mitochondria which would be nice to have checked in anyway.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570441625", "createdAt": "2021-02-04T18:14:22Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU4ODEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxNjoyMFrOIgBEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxNTo1OTo0NlrOIid1AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MjkwOQ==", "bodyText": "Can you put a check here that makes sure the list is the same size as the length of the fasta file?", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570442909", "createdAt": "2021-02-04T18:16:20Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjk5Njg0MA==", "bodyText": "isn't that what this check is doing? making sure that we have a shift offset for each contig:\nshiftOffsets.size() == contigs.size()", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r572996840", "createdAt": "2021-02-09T15:43:23Z", "author": {"login": "ahaessly"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MjkwOQ=="}, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzAxMTIwMA==", "bodyText": "You are right. However I still think we should be very careful about the shift offsets input. I think we should put a check here that asserts it is either empty OR it is exactly the lenght of the contigs in the file, otherwise if it is the wrong size we should throw a user exception since clearly there was a mistake.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r573011200", "createdAt": "2021-02-09T15:59:46Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0MjkwOQ=="}, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDU5NzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxODozMlrOIgBKXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoxODozMlrOIgBKXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0NDM4Mg==", "bodyText": "How difficult would it be to add an integration test to M2 that asserts this argument is doing something reasonable?", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570444382", "createdAt": "2021-02-04T18:18:32Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/mutect/filtering/M2FiltersArgumentCollection.java", "diffHunk": "@@ -43,6 +43,13 @@\n     @Argument(fullName = M2ArgumentCollection.MITOCHONDRIA_MODE_LONG_NAME, optional = true, doc = \"Set filters to mitochondrial defaults\")\n     public boolean mitochondria = false;\n \n+    /**\n+     * Mitochondria mode excludes the filters {@link ClusteredEventsFilter}, {@link MultiallelicFilter},\n+     * {@link FilteredHaplotypeFilter}, {@link FragmentLengthFilter}, and {@link GermlineFilter}\n+     */\n+    @Argument(fullName = M2ArgumentCollection.MICROBIAL_MODE_LONG_NAME, optional = true, doc = \"Set filters to microbial defaults\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDYwNTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoyMDoyOFrOIgBPJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoyMDoyOFrOIgBPJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0NTYwNQ==", "bodyText": "Here you need to add some tests that assert the offset is within the range of the actual file? There seems to be no check that the user cant specify a bogus value in the list input.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r570445605", "createdAt": "2021-02-04T18:20:28Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,210 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(\n+        summary = \"Create a new fasta starting at the shift-offset +1 position and a shift_back chain file that can be used with the Liftover tool\",\n+        oneLineSummary = \"Creates a shifted fasta file and shift_back file\",\n+        programGroup = ReferenceProgramGroup.class\n+)\n+public class ShiftFasta extends GATKTool {\n+\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            doc = \"Path to write the output fasta to\")\n+    protected String output;\n+\n+    public static final String SHIFT_BACK_OUTPUT = \"shift-back-output\";\n+    @Argument(fullName = SHIFT_BACK_OUTPUT,\n+            doc = \"Path to write the shift_back file to\")\n+    protected String shiftBackOutput;\n+\n+    public static final String SHIFT_OFFSET_LIST = \"shift-offset-list\";\n+    @Argument(fullName = SHIFT_OFFSET_LIST,\n+            doc=\"Number of bases to skip in the reference before starting the shifted reference. For example, if 300 is specified, the new fasta will start at the 301th base (count starting at 1).\" +\n+    \"If not specified, the contig will be shifted by half the number of bases. To skip the shifting of a contig, specify 0 in the list.\", optional = true)\n+    private List<Integer> shiftOffsets = null;\n+\n+    public static final String INTERAL_FILE_NAME = \"interval-file-name\";\n+    @Argument(fullName = INTERAL_FILE_NAME,\n+            doc=\"Base name for interval files. Intervals will be midway between beginning and computed offset. If not specified or if custom offsets are specified, no interval files will be written.\", optional = true)\n+    private String intervalFilename;\n+\n+    public static final String LINE_WIDTH_LONG_NAME = \"line-width\";\n+    @Argument(fullName= LINE_WIDTH_LONG_NAME, doc=\"Maximum length of sequence to write per line\", optional=true)\n+    public int basesPerLine = FastaReferenceWriter.DEFAULT_BASES_PER_LINE;\n+\n+    ReferenceDataSource refSource;\n+    FastaReferenceWriter refWriter;\n+    FileWriter chainFileWriter;\n+    FileWriter intervalRegularWriter;\n+    FileWriter intervalShiftedWriter;\n+\n+    int chainId = 0;\n+\n+    @Override\n+    public boolean requiresReference() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void onTraversalStart() {\n+        refSource = referenceArguments.getReferencePath() != null ? ReferenceDataSource.of(referenceArguments.getReferencePath()) : null;\n+        final Path path = IOUtils.getPath(output);\n+        chainId = 1;\n+        try {\n+            refWriter = new FastaReferenceWriterBuilder()\n+                    .setFastaFile(path)\n+                    .setBasesPerLine(basesPerLine)\n+                    .build();\n+            chainFileWriter = new FileWriter(shiftBackOutput);\n+            if (intervalFilename != null) {\n+                intervalRegularWriter = new FileWriter(intervalFilename+ \".intervals\");\n+                intervalShiftedWriter = new FileWriter(intervalFilename + \".shifted.intervals\");\n+            }\n+        } catch (IOException e) {\n+            throw new UserException.CouldNotCreateOutputFile(\"Couldn't create \" + output + \", encountered exception: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public void traverse() {\n+        SAMSequenceDictionary refDict = refSource.getSequenceDictionary();\n+        long refLengthLong = refDict.getReferenceLength();\n+        if (refLengthLong > Integer.MAX_VALUE) {\n+            // TODO fix this??\n+            throw new UserException.BadInput(\"Reference length is too long\");\n+        }\n+        List<SAMSequenceRecord> contigs = refSource.getSequenceDictionary().getSequences();\n+        final ListIterator<Integer> shiftOffsetsIt = (shiftOffsets != null && shiftOffsets.size() == contigs.size()) ?\n+                shiftOffsets.listIterator() : null;\n+        refSource.getSequenceDictionary().getSequences().forEach(seq -> shiftContig(seq, shiftOffsetsIt));\n+    }\n+\n+    protected void shiftContig(SAMSequenceRecord seq, ListIterator<Integer> shiftOffsetsIt) {\n+        int contigLength = seq.getSequenceLength();\n+        int shiftOffset = shiftOffsetsIt == null ? contigLength/2 : shiftOffsetsIt.next();\n+        if (shiftOffset != 0) {\n+            byte[] bases = refSource.queryAndPrefetch(new SimpleInterval(seq.getSequenceName(), 1, contigLength)).getBases();\n+            byte[] basesAtEnd = Arrays.copyOfRange(bases, shiftOffset, bases.length);\n+            byte[] basesAtStart = Arrays.copyOf(bases, shiftOffset);\n+            int shiftBackOffset = bases.length - shiftOffset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3737bb3e2c6cd2697fa6cf83402ff612884fc13"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5Njc4NjQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzozNDowMFrOKEbG2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzozNDowMFrOKEbG2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTcyNzA2NA==", "bodyText": "I would scrub out the folder references here and replace them with something like (<CIRCULAR.FASTA> etc...). Its generally confusing to see references like these in the docs especially when the data aren't checked into our repo.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r675727064", "createdAt": "2021-07-23T17:34:00Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ * Example command line:\n+ * ShiftFasta\n+ * -R \"testfiles/shift/ecoli/Escherichia_coli_2017C-4173W12.fa\"   // the reference to shift\n+ * -O \"testfiles/shift/ecoli/shifted.fa\"                          // the shifted fasta\n+ * --shift-back-output \"testfiles/shift/ecoli/shiftback.chain\"    // the shiftback chain file to use when lifting over", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9f90aad04a9366a867dc67fb941e641b648813"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5NjgxNzcwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFastaTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo0MjozNVrOKEbZkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo0MjozNVrOKEbZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTczMTg1Ng==", "bodyText": "Rename to \"ShiftFastaIntegrationTest\" the test suite uses reflection to decide where to run tests so naming them correctly is important.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r675731856", "createdAt": "2021-07-23T17:42:35Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFastaTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.BaseTest;\n+import org.broadinstitute.hellbender.testutils.FastaTestUtils;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+\n+public class ShiftFastaTest extends CommandLineProgramTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9f90aad04a9366a867dc67fb941e641b648813"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5NjgyOTE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFastaTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo0NjowOVrOKEbg7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo0NjowOVrOKEbg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTczMzc0MQ==", "bodyText": "Can you make sure this is properly checked in? It may be an issue with github display but I don't see those files being checked in for this PR so you may have forgotten to add them properly through lfs.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r675733741", "createdAt": "2021-07-23T17:46:09Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFastaTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.BaseTest;\n+import org.broadinstitute.hellbender.testutils.FastaTestUtils;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+\n+public class ShiftFastaTest extends CommandLineProgramTest {\n+\n+    private static final File MITO_REF = new File(toolsTestDir, \"mutect/mito/Homo_sapiens_assembly38.mt_only.fasta\");\n+    private static final File SHIFTED_MITO_REF = new File(largeFileTestDir + \"mitochondria_references/Homo_sapiens_assembly38.chrM.shifted_by_8000_bases.fasta\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9f90aad04a9366a867dc67fb941e641b648813"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5Njg1NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo1NDoxMVrOKEbyTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo1NDoxMVrOKEbyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTczODE4OA==", "bodyText": "This is up to you but you may consider adding the @BetaFeature tag to this tool since its a new tool part of an in-development pipeline.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r675738188", "createdAt": "2021-07-23T17:54:11Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/fasta/ShiftFasta.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.broadinstitute.hellbender.tools.walkers.fasta;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import htsjdk.samtools.reference.FastaReferenceWriter;\n+import htsjdk.samtools.reference.FastaReferenceWriterBuilder;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.engine.ReferenceDataSource;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import picard.cmdline.programgroups.ReferenceProgramGroup;\n+\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Create a fasta with the bases shifted by offset\n+ *\n+ * delta1 = offset - 1\n+ * delta2 = total - delta1\n+ *\n+ * To shift forward:\n+ * if you are given a position in the regular fasta (pos_r) and want the position in the shifted fasta (pos_s):\n+ * if pos_r > delta1 => pos_s = pos_r - delta1  ==   pos_r - offset +1\n+ *   otherwise          pos_s = pos_r + delta2  ==   pos_r + total - offset + 1\n+ *\n+ * To shift back:\n+ * if you are given a position in the shifted fasta (pos_s) and want the position in the regular fasta (pos_r):\n+ * if pos_s > delta2 => pos_r = pos_s - delta2  ==   pos_s - total + offset - 1\n+ *   otherwise          pos_r = pos_s + delta1  ==   pos_s + offset - 1\n+ *\n+ * Example command line:\n+ * ShiftFasta\n+ * -R \"testfiles/shift/ecoli/Escherichia_coli_2017C-4173W12.fa\"   // the reference to shift\n+ * -O \"testfiles/shift/ecoli/shifted.fa\"                          // the shifted fasta\n+ * --shift-back-output \"testfiles/shift/ecoli/shiftback.chain\"    // the shiftback chain file to use when lifting over\n+ * --interval-file-name \"testfiles/shift/ecoli/ecoli\"             // base name for output interval files (one for regular and one for shifted)\n+ * --line-width 100\n+ */\n+@DocumentedFeature\n+@CommandLineProgramProperties(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9f90aad04a9366a867dc67fb941e641b648813"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI5Njg3Mzk1OnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/graphs/AdaptiveChainPruner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo1NjozOFrOKEb71g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yM1QxNzo1NjozOFrOKEb71g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTc0MDYzMA==", "bodyText": "Right I remember this change. When you do the squash + merge of this branch can you make sure its clearly stated in the commit description that this changes the behavior of the adaptive pruner at low/patchy reference coverage sites? This somewhat of a substantial fix to that method and it will be buried by this commit if we aren't careful.", "url": "https://github.com/broadinstitute/gatk/pull/6694#discussion_r675740630", "createdAt": "2021-07-23T17:56:38Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/graphs/AdaptiveChainPruner.java", "diffHunk": "@@ -56,11 +56,11 @@ public AdaptiveChainPruner(final double initialErrorProbability, final double lo\n         final Multimap<V, Path<V,E>> vertexToGoodOutgoingChains = ArrayListMultimap.create();\n \n         for (final Path<V,E> chain : chains) {\n-            if (chainLogOdds.get(chain).getRight() >= logOddsThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9f90aad04a9366a867dc67fb941e641b648813"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1008, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}