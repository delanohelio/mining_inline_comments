{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjUxNjIy", "number": 6681, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyMzo0MlrOETX5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDo1NDo1MlrOEWWeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzUwMDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyMzo0MlrOG5Etkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0NjozNlrOG6YyDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new UserException(MERGE_CONTIGS_INTO_NUM_PARTITIONS+\" requires that entire contigs \" +\n          \n          \n            \n                            throw new UserException(\"--\" + MERGE_CONTIGS_INTO_NUM_PARTITIONS + \" requires that entire contigs \" +", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462499218", "createdAt": "2020-07-29T18:23:42Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -447,6 +462,29 @@ private void assertVariantPathsOrSampleNameFileWasSpecified(){\n         }\n     }\n \n+    private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,\n+                                                   List<SimpleInterval> intervals) {\n+        GenomicsDBVidMapProto.VidMappingPB vidMapPB = importer.getProtobufVidMapping();\n+        if (vidMapPB == null) {\n+            throw new UserException(\"Could not get protobuf vid mappping object from GenomicsDBImporter\");\n+        }\n+        Map<String,GenomicsDBVidMapProto.Chromosome> vidContigs =\n+                vidMapPB.getContigsList().stream().collect(Collectors.toMap(item->item.getName(), item->item));\n+        for (SimpleInterval interval: intervals) {\n+            GenomicsDBVidMapProto.Chromosome vidContig = vidContigs.get(interval.getContig());\n+            long contigLength = vidContig.getLength();\n+            if (interval.getStart() != 1 || interval.getEnd() < contigLength) {\n+                String inputInterval = String.format(\"Contig:%s, Start:%d, End:%d\",\n+                        interval.getContig(), interval.getStart(), interval.getEnd());\n+                String vidInterval = String.format(\"Contig:%s, Start:%d, End:%d\",\n+                        vidContig.getName(), 1, vidContig.getLength());\n+                throw new UserException(MERGE_CONTIGS_INTO_NUM_PARTITIONS+\" requires that entire contigs \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjYyMw==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876623", "createdAt": "2020-07-31T22:46:36Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -447,6 +462,29 @@ private void assertVariantPathsOrSampleNameFileWasSpecified(){\n         }\n     }\n \n+    private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,\n+                                                   List<SimpleInterval> intervals) {\n+        GenomicsDBVidMapProto.VidMappingPB vidMapPB = importer.getProtobufVidMapping();\n+        if (vidMapPB == null) {\n+            throw new UserException(\"Could not get protobuf vid mappping object from GenomicsDBImporter\");\n+        }\n+        Map<String,GenomicsDBVidMapProto.Chromosome> vidContigs =\n+                vidMapPB.getContigsList().stream().collect(Collectors.toMap(item->item.getName(), item->item));\n+        for (SimpleInterval interval: intervals) {\n+            GenomicsDBVidMapProto.Chromosome vidContig = vidContigs.get(interval.getContig());\n+            long contigLength = vidContig.getLength();\n+            if (interval.getStart() != 1 || interval.getEnd() < contigLength) {\n+                String inputInterval = String.format(\"Contig:%s, Start:%d, End:%d\",\n+                        interval.getContig(), interval.getStart(), interval.getEnd());\n+                String vidInterval = String.format(\"Contig:%s, Start:%d, End:%d\",\n+                        vidContig.getName(), 1, vidContig.getLength());\n+                throw new UserException(MERGE_CONTIGS_INTO_NUM_PARTITIONS+\" requires that entire contigs \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTIxOA=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzUwNDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyNDo0NVrOG5EwDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0Njo0NlrOG6YyPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTg1NQ==", "bodyText": "I think this can be static\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,\n          \n          \n            \n                private static void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462499855", "createdAt": "2020-07-29T18:24:45Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -447,6 +462,29 @@ private void assertVariantPathsOrSampleNameFileWasSpecified(){\n         }\n     }\n \n+    private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjY2OA==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876668", "createdAt": "2020-07-31T22:46:46Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -447,6 +462,29 @@ private void assertVariantPathsOrSampleNameFileWasSpecified(){\n         }\n     }\n \n+    private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTg1NQ=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzUxNjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyODoxMFrOG5E3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0Njo1NFrOG6YyYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTc2Mw==", "bodyText": "You can use the Locatable constructor here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n          \n          \n            \n                    intervals.forEach(i -> outputList.add(new Interval(i)));", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462501763", "createdAt": "2020-07-29T18:28:10Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjcwNg==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876706", "createdAt": "2020-07-31T22:46:54Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTc2Mw=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzUxOTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyOTowM1rOG5E5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyOTowM1rOG5E5Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMjIzMQ==", "bodyText": "I know this is just moving but there a few minor things that can be updated here.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462502231", "createdAt": "2020-07-29T18:29:03Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzUyOTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozMTo0MVrOG5E_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0Nzo1NFrOG6YzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMzg3OQ==", "bodyText": "Write takes a path directly now.  I would just inline the path creation as well.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n          \n          \n            \n                    outputList.write(intervalListOutputPath.toFile());\n          \n          \n            \n                    outputList.write(IOUtils.getPath(intervalListOutputPathString));", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462503879", "createdAt": "2020-07-29T18:31:41Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjkzNA==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876934", "createdAt": "2020-07-31T22:47:54Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMzg3OQ=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzU1NTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODozOToxOFrOG5FQfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0ODowM1rOG6YzcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODE1Nw==", "bodyText": "The most nitpicky comment possible: I think it reads better with 'the'\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n          \n          \n            \n                        // if so, we need to wait for vid to be generated before writing out interval list\n          \n          \n            \n                        // intervals may be null if merge-contigs-into-num-partitions was used to create the workspace\n          \n          \n            \n                        // if so, we need to wait for vid to be generated before writing out the interval list", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462508157", "createdAt": "2020-07-29T18:39:18Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());\n+    }\n+\n     /**\n      * Before traversal, fix configuration parameters and initialize\n      * GenomicsDB. Hard-coded to handle only VCF files and headers\n      */\n     @Override\n     public void onTraversalStart() {\n-        if (getIntervalsFromExistingWorkspace) {\n-            final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n-            intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n-            final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n-            outputList.write(intervalListOutputPath.toFile());\n-            return;\n-        }\n         String workspaceDir = BucketUtils.makeFilePathAbsolute(overwriteCreateOrCheckWorkspace());\n         vidMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VIDMAP_FILE_NAME);\n         callsetMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_CALLSETMAP_FILE_NAME);\n         vcfHeaderFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VCFHEADER_FILE_NAME);\n+        if (getIntervalsFromExistingWorkspace) {\n+            // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n+            // if so, we need to wait for vid to be generated before writing out interval list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3Njk3Nw==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876977", "createdAt": "2020-07-31T22:48:03Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());\n+    }\n+\n     /**\n      * Before traversal, fix configuration parameters and initialize\n      * GenomicsDB. Hard-coded to handle only VCF files and headers\n      */\n     @Override\n     public void onTraversalStart() {\n-        if (getIntervalsFromExistingWorkspace) {\n-            final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n-            intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n-            final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n-            outputList.write(intervalListOutputPath.toFile());\n-            return;\n-        }\n         String workspaceDir = BucketUtils.makeFilePathAbsolute(overwriteCreateOrCheckWorkspace());\n         vidMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VIDMAP_FILE_NAME);\n         callsetMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_CALLSETMAP_FILE_NAME);\n         vcfHeaderFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VCFHEADER_FILE_NAME);\n+        if (getIntervalsFromExistingWorkspace) {\n+            // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n+            // if so, we need to wait for vid to be generated before writing out interval list", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODE1Nw=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzU2NjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo0MjowOFrOG5FXNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTowMVrOG6Y0VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTg3Ng==", "bodyText": "It's weird that the workspace is passed into here, but then the createParitionWithBeginAndEnd uses the workspace field to get it.  I would make both static and pass workspace through to createPartitionWithBeginAndEnd, otherwise someone will be very confused when they try pass a different workspace value into this function I think.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462509876", "createdAt": "2020-07-29T18:42:08Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNTQzNg==", "bodyText": "Alternatively remove the workspace parameter from this method so it's consistent.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462515436", "createdAt": "2020-07-29T18:52:16Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTg3Ng=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzIwNA==", "bodyText": "removed workspace", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877204", "createdAt": "2020-07-31T22:49:01Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTg3Ng=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzU4MDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo0NjoyNFrOG5FgVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0ODo0MVrOG6Y0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjIxMg==", "bodyText": "this would probably be clearer with a foreach instead of an indexed loop since the indexes are unimportant", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462512212", "createdAt": "2020-07-29T18:46:24Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMzg2MQ==", "bodyText": "It could also be a single streaming expression like the method below but that's really a stylistic choice and I don't care much either way...", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462513861", "createdAt": "2020-07-29T18:49:29Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjIxMg=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzEzMw==", "bodyText": "changed to foreach", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877133", "createdAt": "2020-07-31T22:48:41Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjIxMg=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzYwODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1NDozNFrOG5FyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTowNlrOG6Y0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjc2Nw==", "bodyText": "While we're here could we move the \"setContig\" call from here, up to where contigPositionBuilder is initialized?  I think it would make it clearer.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462516767", "createdAt": "2020-07-29T18:54:34Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzIxOA==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877218", "createdAt": "2020-07-31T22:49:06Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjc2Nw=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzYxMTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1NToxMFrOG5FzmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo1NDoyOVrOG6Y5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNzE0NQ==", "bodyText": "This method uses the workspace field, lets make them all consistent 1 way or another.  (I always like static methods but most of the existing methods are non-static and use the workspace field directly.)", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462517145", "createdAt": "2020-07-29T18:55:10Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3ODQ5Ng==", "bodyText": "changed the methods to use the class members directly", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463878496", "createdAt": "2020-07-31T22:54:29Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNzE0NQ=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzYyMjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1ODo0NVrOG5F64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OToxNlrOG6Y0nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxOTAxMA==", "bodyText": "Maybe we should pull out a constant BOUNDS_START and BOUNDS_END for these to make it clear the array is always structured the same way?  A pair of some sort might be a clearer api for returning these values.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462519010", "createdAt": "2020-07-29T18:58:45Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzI3OQ==", "bodyText": "added constants", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877279", "createdAt": "2020-07-31T22:49:16Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxOTAxMA=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzYzMDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowMDo1NFrOG5F_8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTo1NlrOG6Y1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMDMwNA==", "bodyText": "Always attach the underlying exception as the cause.  It makes debugging way easier.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462520304", "createdAt": "2020-07-29T19:00:54Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+                // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n+                // so we just check here that contig starts within the given bounds\n+                intervals.addAll(vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n+                        x.getTiledbColumnOffset() <= bounds[1])\n+                        .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n+                        .collect(Collectors.toList()));\n+            }\n+        } catch (final IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzQzNQ==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877435", "createdAt": "2020-07-31T22:49:56Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+                // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n+                // so we just check here that contig starts within the given bounds\n+                intervals.addAll(vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n+                        x.getTiledbColumnOffset() <= bounds[1])\n+                        .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n+                        .collect(Collectors.toList()));\n+            }\n+        } catch (final IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMDMwNA=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzY2MDgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowOToxNlrOG5GSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTozMFrOG6Y00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTA3MQ==", "bodyText": "I always like foreach when index is irrelevant.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462525071", "createdAt": "2020-07-29T19:09:16Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzMzMA==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877330", "createdAt": "2020-07-31T22:49:30Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTA3MQ=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzY5MDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToxNzowM1rOG5GkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo1MToxNFrOG6Y2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyOTY2OA==", "bodyText": "Don't we still want to output the log messages even if we're getting intervals from an existing workspace?  Why does this need to short circuit here?  It seems like we could drop this whole condition because the initializeInputPreloadExecutorService method now guards against null intervals as well.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462529668", "createdAt": "2020-07-29T19:17:03Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());\n+    }\n+\n     /**\n      * Before traversal, fix configuration parameters and initialize\n      * GenomicsDB. Hard-coded to handle only VCF files and headers\n      */\n     @Override\n     public void onTraversalStart() {\n-        if (getIntervalsFromExistingWorkspace) {\n-            final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n-            intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n-            final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n-            outputList.write(intervalListOutputPath.toFile());\n-            return;\n-        }\n         String workspaceDir = BucketUtils.makeFilePathAbsolute(overwriteCreateOrCheckWorkspace());\n         vidMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VIDMAP_FILE_NAME);\n         callsetMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_CALLSETMAP_FILE_NAME);\n         vcfHeaderFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VCFHEADER_FILE_NAME);\n+        if (getIntervalsFromExistingWorkspace) {\n+            // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n+            // if so, we need to wait for vid to be generated before writing out interval list\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3Nzc1OA==", "bodyText": "yup - don't need to short circuit anymore as you say. added a log.info and specific to getIntervalsFromExistingWorkspace (we don't touch the jsons or workspace otherwise in that case)", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877758", "createdAt": "2020-07-31T22:51:14Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());\n+    }\n+\n     /**\n      * Before traversal, fix configuration parameters and initialize\n      * GenomicsDB. Hard-coded to handle only VCF files and headers\n      */\n     @Override\n     public void onTraversalStart() {\n-        if (getIntervalsFromExistingWorkspace) {\n-            final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n-            intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n-            final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n-            outputList.write(intervalListOutputPath.toFile());\n-            return;\n-        }\n         String workspaceDir = BucketUtils.makeFilePathAbsolute(overwriteCreateOrCheckWorkspace());\n         vidMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VIDMAP_FILE_NAME);\n         callsetMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_CALLSETMAP_FILE_NAME);\n         vcfHeaderFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VCFHEADER_FILE_NAME);\n+        if (getIntervalsFromExistingWorkspace) {\n+            // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n+            // if so, we need to wait for vid to be generated before writing out interval list\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyOTY2OA=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzY5OTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToxOTo0MVrOG5GqBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTozOVrOG6Y09Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTA3OQ==", "bodyText": "I would make these less stateful by returning the list of intervals instead of modifying it in place.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462531079", "createdAt": "2020-07-29T19:19:41Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzM2NQ==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877365", "createdAt": "2020-07-31T22:49:39Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTA3OQ=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzcwMDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToyMDowMFrOG5GqvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjo0OTo0N1rOG6Y1DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTI2MQ==", "bodyText": "Similarly, this seems like it could return the value instead of modifying the field.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462531261", "createdAt": "2020-07-29T19:20:00Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+                // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n+                // so we just check here that contig starts within the given bounds\n+                intervals.addAll(vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n+                        x.getTiledbColumnOffset() <= bounds[1])\n+                        .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n+                        .collect(Collectors.toList()));\n+            }\n+        } catch (final IOException e) {\n+            throw new UserException(\"Could not get vid map protobuf from file:\" + vidMapJSONFile + \n+                    \". Is the workspace corrupted?\");\n+        }\n+    }\n+\n     private void generateIntervalListFromWorkspace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzM4OQ==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877389", "createdAt": "2020-07-31T22:49:47Z", "author": {"login": "mlathara"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+                // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n+                // so we just check here that contig starts within the given bounds\n+                intervals.addAll(vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n+                        x.getTiledbColumnOffset() <= bounds[1])\n+                        .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n+                        .collect(Collectors.toList()));\n+            }\n+        } catch (final IOException e) {\n+            throw new UserException(\"Could not get vid map protobuf from file:\" + vidMapJSONFile + \n+                    \". Is the workspace corrupted?\");\n+        }\n+    }\n+\n     private void generateIntervalListFromWorkspace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTI2MQ=="}, "originalCommit": {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODcyMjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDo1NDo1MlrOG9njpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDo1NDo1MlrOG9njpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NDQyMQ==", "bodyText": "I think you can avoid this funky collect -> stream if you use flat map above instead of map.", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r467264421", "createdAt": "2020-08-07T20:54:52Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -751,50 +753,47 @@ private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionAr\n         }).collect(Collectors.toList());\n     }\n \n-    private void generateIntervalListFromVidMap() {\n+    private List<SimpleInterval> generateIntervalListFromVidMap() {\n         try {\n             GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n                 org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n     \n-            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n-            intervals = new ArrayList<>();\n-            for (int i=0; i<partitions.length; i++) {\n-                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            List<String> partitions = Arrays.asList(GenomicsDBUtils.listGenomicsDBArrays(workspace));\n+            return partitions.stream().map(partition -> {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partition);\n                 // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n                 // so we just check here that contig starts within the given bounds\n-                intervals.addAll(vidMapPB.getContigsList().stream()\n-                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n-                        x.getTiledbColumnOffset() <= bounds[1])\n+                return vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[ARRAY_COLUMN_BOUNDS_START] &&  \n+                        x.getTiledbColumnOffset() <= bounds[ARRAY_COLUMN_BOUNDS_END])\n                         .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n-                        .collect(Collectors.toList()));\n-            }\n+                        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899dd40a2c8a622893c14afa1a973a574601330a"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1003, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}