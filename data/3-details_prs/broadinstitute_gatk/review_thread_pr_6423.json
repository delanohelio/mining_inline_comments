{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTkyMTEx", "number": 6423, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MzoxNlrODbWTDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1MDowN1rODbWbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDAzNDY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MzoxNlrOFiyHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MzoxNlrOFiyHzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNzEwMg==", "bodyText": "Wow, that's a dumb one on my part.", "url": "https://github.com/broadinstitute/gatk/pull/6423#discussion_r372017102", "createdAt": "2020-01-28T19:43:16Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "diffHunk": "@@ -108,13 +111,43 @@ public void testNoIntervals() {\n \n     }\n \n-    private static Stream<File> getScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n-        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, \"000\" + n + extension));\n+    @Test\n+    public void testAsInWGSJointCalling() {\n+        //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n+        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");\n+        final int scatterCount = 100;\n+        final File outputDir = createTempDir(\"output\");\n+        final String[] args = {\n+                \"-R\", hg38Reference,\n+                \"-L\", wgsCallingIntervals.getAbsolutePath(),\n+                \"-\" + SplitIntervals.SCATTER_COUNT_SHORT_NAME, Integer.toString(scatterCount),\n+                \"--\" + SplitIntervals.SUBDIVISION_MODE_lONG_NAME, IntervalListScatterMode.BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW.toString(),\n+                \"-imr\", IntervalMergingRule.OVERLAPPING_ONLY.toString(),\n+                \"-O\", outputDir.getAbsolutePath()\n+        };\n+        runCommandLine(args);\n+        verifyScatteredFilesExist(scatterCount, outputDir, SplitIntervals.DEFAULT_EXTENSION);\n+\n+        final File outputDir2 = createTempDir(\"output2\");\n+        final String[] args2 = {\n+                \"-R\", hg38Reference,\n+                \"-L\", wgsCallingIntervals.getAbsolutePath(),\n+                \"-\" + SplitIntervals.SCATTER_COUNT_SHORT_NAME, Integer.toString(scatterCount),\n+                \"--\" + SplitIntervals.SUBDIVISION_MODE_lONG_NAME, IntervalListScatterMode.BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW.toString(),\n+                \"-O\", outputDir2.getAbsolutePath()\n+        };\n+        runCommandLine(args2);\n+        Assert.assertTrue(outputDir2.listFiles().length < scatterCount);\n+    }\n+\n+    //generates the files to look for given a scatter count, directory and extension\n+    private static Stream<File> getExpectedScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n+        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, formatter.format(n) + extension));\n     }\n \n     private static void verifyScatteredFilesExist(final int scatterCount, final File outputDir, String extension) {\n-        getScatteredFiles(scatterCount, outputDir, extension).forEach(f -> Assert.assertTrue(f.exists()));\n-        Assert.assertFalse(new File(outputDir, \"000\" + scatterCount + extension).exists());\n+        getExpectedScatteredFiles(scatterCount, outputDir, extension).forEach(f -> Assert.assertTrue(f.exists()));\n+        Assert.assertFalse(new File(outputDir, formatter.format(scatterCount) + extension).exists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24104fbf126e33cbcc13d21789fe4b6c94d64ed7"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDA1NTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo1MDowN1rOFiyVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTowNzozMlrOFi0gOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMDUzOA==", "bodyText": "publicTestDir instead of hardcoding the path would be better probably", "url": "https://github.com/broadinstitute/gatk/pull/6423#discussion_r372020538", "createdAt": "2020-01-28T19:50:07Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "diffHunk": "@@ -108,13 +111,43 @@ public void testNoIntervals() {\n \n     }\n \n-    private static Stream<File> getScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n-        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, \"000\" + n + extension));\n+    @Test\n+    public void testAsInWGSJointCalling() {\n+        //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n+        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24104fbf126e33cbcc13d21789fe4b6c94d64ed7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA1NjEyMw==", "bodyText": "Good call. I will do that.", "url": "https://github.com/broadinstitute/gatk/pull/6423#discussion_r372056123", "createdAt": "2020-01-28T21:07:32Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/SplitIntervalsIntegrationTest.java", "diffHunk": "@@ -108,13 +111,43 @@ public void testNoIntervals() {\n \n     }\n \n-    private static Stream<File> getScatteredFiles(final int scatterCount, final File outputDir, String extension) {\n-        return IntStream.range(0, scatterCount).mapToObj(n -> new File(outputDir, \"000\" + n + extension));\n+    @Test\n+    public void testAsInWGSJointCalling() {\n+        //these intervals are small and adjacent -- we want to distribute them among multiple interval lists, but the default behavior is to merge\n+        final File wgsCallingIntervals = new File(\"src/test/resources/hg38.handcurated.noCentromeres.noTelomeres.interval_list\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMDUzOA=="}, "originalCommit": {"oid": "24104fbf126e33cbcc13d21789fe4b6c94d64ed7"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1073, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}