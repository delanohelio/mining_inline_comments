{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzU1MDA2", "number": 6718, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozNTo0OVrOEmMZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NDoxMFrOE09Ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDg0NDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozNTo0OVrOHWFMQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDowNToyOVrOHY_V-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxNTc3OQ==", "bodyText": "This else clause specifically covers the file case -- non-local files should be caught by the else if (getScheme() != null && !getScheme().equals(\"file\")) clause above. Can you confirm that this change is correct and won't result in introducing file:// URIs into codepaths that can't handle them?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r492915779", "createdAt": "2020-09-22T17:35:49Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -123,7 +122,7 @@ private String makeIntoAbsolutePath() {\n         } else if (getScheme() != null && !getScheme().equals(\"file\")) { // local files always have a \"file\" scheme\n             return toPath().toAbsolutePath().toUri().toString();\n         } else {\n-            return new File(getURI()).getAbsolutePath();\n+            return getURI().getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2NTY4OA==", "bodyText": "Yes, this is exactly the pattern to ensure that this never returns a string containing a scheme. getPath returns only the path component of the URI, and the GATKPath constructor always \"absolutizes\" a relative file path that has no protocol scheme into an absolute file path URI during construction.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495965688", "createdAt": "2020-09-28T14:05:29Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -123,7 +122,7 @@ private String makeIntoAbsolutePath() {\n         } else if (getScheme() != null && !getScheme().equals(\"file\")) { // local files always have a \"file\" scheme\n             return toPath().toAbsolutePath().toUri().toString();\n         } else {\n-            return new File(getURI()).getAbsolutePath();\n+            return getURI().getPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxNTc3OQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQzNDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureWalker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo1NDowOVrOHYQrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNjoyM1rOHZAQtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMTIxNQ==", "bodyText": "We've gone from converting to absolute path to using the raw input String here -- can't we continue to absolutize the path if necessary?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495201215", "createdAt": "2020-09-25T19:54:09Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureWalker.java", "diffHunk": "@@ -55,16 +55,16 @@ protected final void onStartup() {\n \n     @SuppressWarnings(\"unchecked\")\n     private void initializeDrivingFeatures() {\n-        final File drivingFile = getDrivingFeatureFile();\n-        final FeatureCodec<? extends Feature, ?> codec = FeatureManager.getCodecForFile(drivingFile.toPath());\n+        final GATKPath drivingPath = getDrivingFeaturePath();\n+        final FeatureCodec<? extends Feature, ?> codec = FeatureManager.getCodecForFile(drivingPath.toPath());\n         if (isAcceptableFeatureType(codec.getFeatureType())) {\n-            drivingFeatures = new FeatureDataSource<>(new FeatureInput<>(drivingFile.getAbsolutePath()), FeatureDataSource.DEFAULT_QUERY_LOOKAHEAD_BASES, null, cloudPrefetchBuffer, cloudIndexPrefetchBuffer, referenceArguments.getReferencePath());\n+            drivingFeatures = new FeatureDataSource<>(new FeatureInput<>(drivingPath.getRawInputString()), FeatureDataSource.DEFAULT_QUERY_LOOKAHEAD_BASES, null, cloudPrefetchBuffer, cloudIndexPrefetchBuffer, referenceArguments.getReferencePath());\n \n-            final FeatureInput<F> drivingFeaturesInput = new FeatureInput<>(drivingFile.getAbsolutePath(), \"drivingFeatureFile\");\n+            final FeatureInput<F> drivingFeaturesInput = new FeatureInput<>(drivingPath.getRawInputString(), \"drivingFeatureFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MDcyNg==", "bodyText": "Its admittedly not obvious, but file paths are still absolutized. FeatureInput is-a GATKPath, so it absolutizes relative paths in it's constructor as described above.\nI'm trying to get rid of the intermediate File semantics, but it would probably be a bit less confounding  if I instead added a FeatureInput(GATKPath) constructor and used that here as new FeatureInput<>(drivingPath,...) ? Let me know what you think.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495980726", "createdAt": "2020-09-28T14:26:23Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureWalker.java", "diffHunk": "@@ -55,16 +55,16 @@ protected final void onStartup() {\n \n     @SuppressWarnings(\"unchecked\")\n     private void initializeDrivingFeatures() {\n-        final File drivingFile = getDrivingFeatureFile();\n-        final FeatureCodec<? extends Feature, ?> codec = FeatureManager.getCodecForFile(drivingFile.toPath());\n+        final GATKPath drivingPath = getDrivingFeaturePath();\n+        final FeatureCodec<? extends Feature, ?> codec = FeatureManager.getCodecForFile(drivingPath.toPath());\n         if (isAcceptableFeatureType(codec.getFeatureType())) {\n-            drivingFeatures = new FeatureDataSource<>(new FeatureInput<>(drivingFile.getAbsolutePath()), FeatureDataSource.DEFAULT_QUERY_LOOKAHEAD_BASES, null, cloudPrefetchBuffer, cloudIndexPrefetchBuffer, referenceArguments.getReferencePath());\n+            drivingFeatures = new FeatureDataSource<>(new FeatureInput<>(drivingPath.getRawInputString()), FeatureDataSource.DEFAULT_QUERY_LOOKAHEAD_BASES, null, cloudPrefetchBuffer, cloudIndexPrefetchBuffer, referenceArguments.getReferencePath());\n \n-            final FeatureInput<F> drivingFeaturesInput = new FeatureInput<>(drivingFile.getAbsolutePath(), \"drivingFeatureFile\");\n+            final FeatureInput<F> drivingFeaturesInput = new FeatureInput<>(drivingPath.getRawInputString(), \"drivingFeatureFile\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMTIxNQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ0NzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/MultiVariantWalker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo1OTowOVrOHYQ0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo1Nzo0NFrOHZ8e3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMzQ2Mw==", "bodyText": "Aren't argument tags part of the argument name these days, not the argument value?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495203463", "createdAt": "2020-09-25T19:59:09Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/MultiVariantWalker.java", "diffHunk": "@@ -63,7 +63,8 @@ protected MultiVariantInputArgumentCollection getMultiVariantInputArgumentCollec\n     protected void initializeDrivingVariants() {\n         multiVariantInputArgumentCollection.getDrivingVariantPaths().stream().forEach(\n                 f -> {\n-                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f);\n+                    // use getRawInputString() on the original GATKPath here to ensure that we propagate any argument tags\n+                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f.getRawInputString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzgzMw==", "bodyText": "Oh - good point. I guess that answers the question of whether we need a FeatureInput(GATKPath) constructor.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495983833", "createdAt": "2020-09-28T14:30:31Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/MultiVariantWalker.java", "diffHunk": "@@ -63,7 +63,8 @@ protected MultiVariantInputArgumentCollection getMultiVariantInputArgumentCollec\n     protected void initializeDrivingVariants() {\n         multiVariantInputArgumentCollection.getDrivingVariantPaths().stream().forEach(\n                 f -> {\n-                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f);\n+                    // use getRawInputString() on the original GATKPath here to ensure that we propagate any argument tags\n+                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f.getRawInputString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMzQ2Mw=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzM4OA==", "bodyText": "I added a copy constructor to GATKPath, along with a FeatureInput(GATKPath) constructor, and used that here and below.\nFeatureInput can be dramatically simplified once there are no more call sites that use the constructors that take Strings (ie., it no longer needs to have overloads that take tag maps, or even names, since they can/should be propagated though GATKPath). I started going down that path but it quickly cascaded to lots of changes, so for now I'm doing the minimum and reserving those changes for a separate PR.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496967388", "createdAt": "2020-09-29T18:57:44Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/MultiVariantWalker.java", "diffHunk": "@@ -63,7 +63,8 @@ protected MultiVariantInputArgumentCollection getMultiVariantInputArgumentCollec\n     protected void initializeDrivingVariants() {\n         multiVariantInputArgumentCollection.getDrivingVariantPaths().stream().forEach(\n                 f -> {\n-                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f);\n+                    // use getRawInputString() on the original GATKPath here to ensure that we propagate any argument tags\n+                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f.getRawInputString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMzQ2Mw=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ1MTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/VariantWalker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowMDozMVrOHYQ3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowMDozMVrOHYQ3Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNDEwNw==", "bodyText": "Same question: aren't the argument tags no longer part of the argument values?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495204107", "createdAt": "2020-09-25T20:00:31Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/VariantWalker.java", "diffHunk": "@@ -50,7 +50,8 @@ protected final void onStartup() {\n \n     @Override\n     protected void initializeDrivingVariants() {\n-        drivingVariantsFeatureInput = new FeatureInput<>(drivingVariantFile, \"drivingVariantFile\");\n+        // use getRawInputString() on the original GATKPath here to ensure that we propagate any argument tags\n+        drivingVariantsFeatureInput = new FeatureInput<>(drivingVariantFile.getRawInputString(), \"drivingVariantFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ1NjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/FixCallSetSampleOrdering.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowMjowMlrOHYQ5eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyODoxOFrOHZKoCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNDcyOA==", "bodyText": "Oh dear, I didn't realize this tool was still in the GATK -- it should really be removed....", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495204728", "createdAt": "2020-09-25T20:02:02Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/FixCallSetSampleOrdering.java", "diffHunk": "@@ -45,7 +45,7 @@\n     @Argument(fullName = GenomicsDBImport.SAMPLE_NAME_MAP_LONG_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDUzOA==", "bodyText": "I went to remove it but GenomicsDB depends on code in this tool's class, so instead I made a ticket.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496150538", "createdAt": "2020-09-28T18:28:18Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/FixCallSetSampleOrdering.java", "diffHunk": "@@ -45,7 +45,7 @@\n     @Argument(fullName = GenomicsDBImport.SAMPLE_NAME_MAP_LONG_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNDcyOA=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ2NzUyOnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/GetSampleName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNjoxOVrOHYRATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODo1ODo1OFrOHZLpRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNjQ3OQ==", "bodyText": "If we're no longer calling methods that throw IOException, then I think we need to call checkError() manually on the PrintWriter to check whether an error occurred....", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495206479", "createdAt": "2020-09-25T20:06:19Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/GetSampleName.java", "diffHunk": "@@ -95,12 +93,10 @@ public void onTraversalStart() {\n             throw new UserException.BadInput(\"The given bam input has no sample names.\");\n         }\n \n-        try (final FileWriter fileWriter = new FileWriter(outputSampleNameFile, false)) {\n+        try (final PrintWriter fileWriter = new PrintWriter(outputSampleNameFile.getOutputStream(), false)) {\n             final String rawSample = sampleNames.get(0);\n             final String outputSample = urlEncode ? IOUtils.urlEncode(rawSample) : rawSample;\n             fileWriter.write(outputSample);\n-        } catch (final IOException ioe) {\n-            throw new UserException(\"Could not write file.\", ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1Njc3Ng==", "bodyText": "So after reviewing this, I think you're right in this case that we need to call checkError now, since we went from FileWriter (throws IOException) to PrintWriter(does not).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496156776", "createdAt": "2020-09-28T18:39:49Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/GetSampleName.java", "diffHunk": "@@ -95,12 +93,10 @@ public void onTraversalStart() {\n             throw new UserException.BadInput(\"The given bam input has no sample names.\");\n         }\n \n-        try (final FileWriter fileWriter = new FileWriter(outputSampleNameFile, false)) {\n+        try (final PrintWriter fileWriter = new PrintWriter(outputSampleNameFile.getOutputStream(), false)) {\n             final String rawSample = sampleNames.get(0);\n             final String outputSample = urlEncode ? IOUtils.urlEncode(rawSample) : rawSample;\n             fileWriter.write(outputSample);\n-        } catch (final IOException ioe) {\n-            throw new UserException(\"Could not write file.\", ioe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNjQ3OQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2NzIzNw==", "bodyText": "Actually, even better I think is to restore the catch block and switch to OutputStreamWriter, which propagates IOExceptions.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496167237", "createdAt": "2020-09-28T18:58:58Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/GetSampleName.java", "diffHunk": "@@ -95,12 +93,10 @@ public void onTraversalStart() {\n             throw new UserException.BadInput(\"The given bam input has no sample names.\");\n         }\n \n-        try (final FileWriter fileWriter = new FileWriter(outputSampleNameFile, false)) {\n+        try (final PrintWriter fileWriter = new PrintWriter(outputSampleNameFile.getOutputStream(), false)) {\n             final String rawSample = sampleNames.get(0);\n             final String outputSample = urlEncode ? IOUtils.urlEncode(rawSample) : rawSample;\n             fileWriter.write(outputSample);\n-        } catch (final IOException ioe) {\n-            throw new UserException(\"Could not write file.\", ioe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNjQ3OQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ3MDk1OnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/PrintReadsHeader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNzo0NVrOHYRCdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTowMzozNVrOHZLywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzAzMA==", "bodyText": "Same issue here -- need to check the error state of the PrintWriter. If exceptions are being suppressed internally in the writer then you're supposed to call checkError(), I believe.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495207030", "createdAt": "2020-09-25T20:07:45Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/PrintReadsHeader.java", "diffHunk": "@@ -33,11 +32,9 @@ public boolean requiresReads() {\n     public void traverse() {\n         final SAMFileHeader bamHeader = getHeaderForReads();\n \n-        try ( final PrintWriter outputWriter = new PrintWriter(outputFile) ) {\n+        try ( final PrintWriter outputWriter = new PrintWriter(outputFile.getOutputStream()) ) {\n             final SAMTextHeaderCodec codec = new SAMTextHeaderCodec();\n             codec.encode(outputWriter, bamHeader);\n-        } catch (FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(\"Error writing reads header to \" + outputFile, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1ODAyNQ==", "bodyText": "Right - in this case I think we should always have been calling checkError, independent of the change in this PR, since we were always using PrintWriter (the GATKPath getOutputStream does handle IOException). So I think the right thing to do here is to add the checkError call.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496158025", "createdAt": "2020-09-28T18:42:03Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/PrintReadsHeader.java", "diffHunk": "@@ -33,11 +32,9 @@ public boolean requiresReads() {\n     public void traverse() {\n         final SAMFileHeader bamHeader = getHeaderForReads();\n \n-        try ( final PrintWriter outputWriter = new PrintWriter(outputFile) ) {\n+        try ( final PrintWriter outputWriter = new PrintWriter(outputFile.getOutputStream()) ) {\n             final SAMTextHeaderCodec codec = new SAMTextHeaderCodec();\n             codec.encode(outputWriter, bamHeader);\n-        } catch (FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(\"Error writing reads header to \" + outputFile, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzAzMA=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE2OTY2NA==", "bodyText": "Also switching this to OutputStreamWriter to eliminate the need to call checkError.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496169664", "createdAt": "2020-09-28T19:03:35Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/PrintReadsHeader.java", "diffHunk": "@@ -33,11 +32,9 @@ public boolean requiresReads() {\n     public void traverse() {\n         final SAMFileHeader bamHeader = getHeaderForReads();\n \n-        try ( final PrintWriter outputWriter = new PrintWriter(outputFile) ) {\n+        try ( final PrintWriter outputWriter = new PrintWriter(outputFile.getOutputStream()) ) {\n             final SAMTextHeaderCodec codec = new SAMTextHeaderCodec();\n             codec.encode(outputWriter, bamHeader);\n-        } catch (FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(\"Error writing reads header to \" + outputFile, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzAzMA=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ4MjA5OnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMTo0OFrOHYRJBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzoyNDo0NVrOHZs-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODcwOA==", "bodyText": "If we're no longer calling methods that throw IOException, then how are I/O errors being handled? PrintStream also seems to have a checkError() method...but in general it would be preferable to call methods that throw IOException instead of methods that swallow the exception and set an error flag.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495208708", "createdAt": "2020-09-25T20:11:48Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -216,11 +216,8 @@ private void quantizeQualityScores() {\n     }\n \n     private void generateReport() {\n-        try ( PrintStream recalTableStream = new PrintStream(recalTableFile) ) {\n+        try ( PrintStream recalTableStream = new PrintStream(recalTableFile.getOutputStream()) ) {\n             RecalUtils.outputRecalibrationReport(recalTableStream, recalArgs, quantizationInfo, recalibrationEngine.getFinalRecalibrationTables(), recalibrationEngine.getCovariates());\n         }\n-        catch (final IOException e) {\n-            throw new UserException.CouldNotCreateOutputFile(recalTableFile, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1OTI2Ng==", "bodyText": "Same with this one - it should always have had the checkError call.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496159266", "createdAt": "2020-09-28T18:44:28Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -216,11 +216,8 @@ private void quantizeQualityScores() {\n     }\n \n     private void generateReport() {\n-        try ( PrintStream recalTableStream = new PrintStream(recalTableFile) ) {\n+        try ( PrintStream recalTableStream = new PrintStream(recalTableFile.getOutputStream()) ) {\n             RecalUtils.outputRecalibrationReport(recalTableStream, recalArgs, quantizationInfo, recalibrationEngine.getFinalRecalibrationTables(), recalibrationEngine.getCovariates());\n         }\n-        catch (final IOException e) {\n-            throw new UserException.CouldNotCreateOutputFile(recalTableFile, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODcwOA=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMzMwMA==", "bodyText": "I'm adding a checkError call locally to check the success of the newly added PrintStream(InputStream) constructor. The entire rest of RecalUtils already has this same issue (not callng checkError), so I've added an item to the uri ticket since to keep this PR from expanding too much.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496713300", "createdAt": "2020-09-29T13:24:45Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -216,11 +216,8 @@ private void quantizeQualityScores() {\n     }\n \n     private void generateReport() {\n-        try ( PrintStream recalTableStream = new PrintStream(recalTableFile) ) {\n+        try ( PrintStream recalTableStream = new PrintStream(recalTableFile.getOutputStream()) ) {\n             RecalUtils.outputRecalibrationReport(recalTableStream, recalArgs, quantizationInfo, recalibrationEngine.getFinalRecalibrationTables(), recalibrationEngine.getCovariates());\n         }\n-        catch (final IOException e) {\n-            throw new UserException.CouldNotCreateOutputFile(recalTableFile, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODcwOA=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTQ4Nzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxNDowN1rOHYRMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzozMDoxN1rOHZtPNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTYyNw==", "bodyText": "Here too we need to handle errors during stream creation. If IOException is no longer thrown then I guess we have to call checkError()? (unless you can find a better option -- it would be preferable to be able to catch IOException like before)", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495209627", "createdAt": "2020-09-25T20:14:07Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -165,11 +165,7 @@ public HaplotypeCallerEngine(final HaplotypeCallerArgumentCollection hcArgs, Ass\n         forceCallingAllelesPresent = hcArgs.alleles != null;\n         initialize(createBamOutIndex, createBamOutMD5);\n         if (hcArgs.assemblyStateOutput != null) {\n-            try {\n-                assemblyDebugOutStream = new PrintStream(Files.newOutputStream(IOUtils.getPath(hcArgs.assemblyStateOutput)));\n-            } catch (IOException e) {\n-                throw new UserException.CouldNotCreateOutputFile(hcArgs.assemblyStateOutput, \"Provided argument for assembly debug graph location could not be created\");\n-            }\n+            assemblyDebugOutStream = new PrintStream(hcArgs.assemblyStateOutput.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNzYyMA==", "bodyText": "For this one, I'll change assemblyDebugOutStream to be an OutputStreamWriter, with appropriate catch clauses where its used (note that the OutputStreamWrite(stream) constructor only throws Error).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496717620", "createdAt": "2020-09-29T13:30:17Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -165,11 +165,7 @@ public HaplotypeCallerEngine(final HaplotypeCallerArgumentCollection hcArgs, Ass\n         forceCallingAllelesPresent = hcArgs.alleles != null;\n         initialize(createBamOutIndex, createBamOutMD5);\n         if (hcArgs.assemblyStateOutput != null) {\n-            try {\n-                assemblyDebugOutStream = new PrintStream(Files.newOutputStream(IOUtils.getPath(hcArgs.assemblyStateOutput)));\n-            } catch (IOException e) {\n-                throw new UserException.CouldNotCreateOutputFile(hcArgs.assemblyStateOutput, \"Provided argument for assembly debug graph location could not be created\");\n-            }\n+            assemblyDebugOutStream = new PrintStream(hcArgs.assemblyStateOutput.getOutputStream());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTYyNw=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUwMDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/varianteval/VariantEval.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxODo1NFrOHYRULQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoyMTozNFrOHZvvMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTU2NQ==", "bodyText": "Why isn't outFile itself converted to GATKPath in this tool? (it's still a File)", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495211565", "createdAt": "2020-09-25T20:18:54Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/varianteval/VariantEval.java", "diffHunk": "@@ -755,7 +755,7 @@ else if (ve instanceof MetricsCollection)\n                 metricsCollection.setData(compOverlap.concordantRate, indelSummary.n_SNPs, countVariants.nSNPs, indelSummary.n_indels, multiallelicSummary.nIndels, indelSummary.insertion_to_deletion_ratio, countVariants.insertionDeletionRatio, tiTvVariantEvaluator.tiTvRatio);\n         }\n \n-        try (PrintStream out = IOUtils.makePrintStreamMaybeGzipped(outFile)){\n+        try (PrintStream out = IOUtils.makePrintStreamMaybeGzipped(new GATKPath(outFile.getAbsolutePath()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1ODU3OA==", "bodyText": "Only because changing it causes a cascade of issues. There is another tool that subclasses this one (!) and uses outFile with GATKReport. So I was leaving that change for a separate PR that fixes GATKReport.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496758578", "createdAt": "2020-09-29T14:21:34Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/varianteval/VariantEval.java", "diffHunk": "@@ -755,7 +755,7 @@ else if (ve instanceof MetricsCollection)\n                 metricsCollection.setData(compOverlap.concordantRate, indelSummary.n_SNPs, countVariants.nSNPs, indelSummary.n_indels, multiallelicSummary.nIndels, indelSummary.insertion_to_deletion_ratio, countVariants.insertionDeletionRatio, tiTvVariantEvaluator.tiTvRatio);\n         }\n \n-        try (PrintStream out = IOUtils.makePrintStreamMaybeGzipped(outFile)){\n+        try (PrintStream out = IOUtils.makePrintStreamMaybeGzipped(new GATKPath(outFile.getAbsolutePath()))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTU2NQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUwNjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/CNNScoreVariants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyMTowNFrOHYRX2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxNDo1MVrOHZvZZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjUwNQ==", "bodyText": "This is java.io.File, not java.nio.File", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495212505", "createdAt": "2020-09-25T20:21:04Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/CNNScoreVariants.java", "diffHunk": "@@ -221,7 +219,7 @@\n     private int windowStart = windowSize / 2;\n     private boolean waitforBatchCompletion = false;\n \n-    private File scoreFile;\n+    private File scoreFile; // use java.nio.File here because python code needs to write to this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1Mjk5Ng==", "bodyText": "Oh right - fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496752996", "createdAt": "2020-09-29T14:14:51Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/CNNScoreVariants.java", "diffHunk": "@@ -221,7 +219,7 @@\n     private int windowStart = windowSize / 2;\n     private boolean waitforBatchCompletion = false;\n \n-    private File scoreFile;\n+    private File scoreFile; // use java.nio.File here because python code needs to write to this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjUwNQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUwOTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyMjowMVrOHYRZdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDowNDowOVrOHZu4ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjkxNw==", "bodyText": "No way around this?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495212917", "createdAt": "2020-09-25T20:22:01Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -199,10 +198,10 @@\n     @Argument(fullName= StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             shortName=StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n             doc=\"The output recal file used by ApplyRecalibration\", optional=false)\n-    private String output;\n+    private GATKPath output;\n \n     @Argument(fullName=\"tranches-file\", doc=\"The output tranches file used by ApplyRecalibration\", optional=false)\n-    private String TRANCHES_FILE;\n+    private File TRANCHES_FILE; // not GATKPath since this name must be accessible to R code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0NDYzNA==", "bodyText": "Maybe, but I didn't want to address that in this PR since I think there are other places where we have this same issue. So I'll add fixing the R code as a bullet point in the uri task ticket.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496744634", "createdAt": "2020-09-29T14:04:09Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -199,10 +198,10 @@\n     @Argument(fullName= StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             shortName=StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n             doc=\"The output recal file used by ApplyRecalibration\", optional=false)\n-    private String output;\n+    private GATKPath output;\n \n     @Argument(fullName=\"tranches-file\", doc=\"The output tranches file used by ApplyRecalibration\", optional=false)\n-    private String TRANCHES_FILE;\n+    private File TRANCHES_FILE; // not GATKPath since this name must be accessible to R code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjkxNw=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUxNTE0OnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNDoxN1rOHYRc-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0ODoxM1rOHZuGdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzgxNw==", "bodyText": "Handle errors on the PrintStream (by checkError() if that's the only way...)", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495213817", "createdAt": "2020-09-25T20:24:17Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,8 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n                                 report.print(modelReportStream);\n-                            } catch (FileNotFoundException e) {\n-                                throw new UserException.CouldNotCreateOutputFile(\"File: (\" + outputModel + \")\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMTc2Ng==", "bodyText": "Here I added a checkError call. GATKReport still has(/had) issues, but I added fixing that as an item to the uri ticket, since it will require changes in a bunch of places.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496731766", "createdAt": "2020-09-29T13:48:13Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,8 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n                                 report.print(modelReportStream);\n-                            } catch (FileNotFoundException e) {\n-                                throw new UserException.CouldNotCreateOutputFile(\"File: (\" + outputModel + \")\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzgxNw=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUxNTcyOnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNDozNFrOHYRdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo0OToyNlrOHZuKYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzkxNg==", "bodyText": "Handle errors on the PrintStream", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495213916", "createdAt": "2020-09-25T20:24:34Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -680,10 +680,8 @@ public Object onTraversalSuccess() {\n \n                 if (outputModel != null) {\n                     final GATKReport report = writeModelReport(goodModel, badModel, USE_ANNOTATIONS);\n-                    try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                    try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n                         report.print(modelReportStream);\n-                    } catch (FileNotFoundException e) {\n-                        throw new UserException.CouldNotCreateOutputFile(\"File: (\" + outputModel + \")\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMjc2OA==", "bodyText": "Added a local checkError call, same as above.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496732768", "createdAt": "2020-09-29T13:49:26Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -680,10 +680,8 @@ public Object onTraversalSuccess() {\n \n                 if (outputModel != null) {\n                     final GATKReport report = writeModelReport(goodModel, badModel, USE_ANNOTATIONS);\n-                    try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                    try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n                         report.print(modelReportStream);\n-                    } catch (FileNotFoundException e) {\n-                        throw new UserException.CouldNotCreateOutputFile(\"File: (\" + outputModel + \")\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzkxNg=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTUyMDE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/io/IOUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNjowN1rOHYRgFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMzo1OTozOFrOHZuqsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxNDYxNQ==", "bodyText": "Will this constructor throw IOException if there's an error, or suppress the error?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495214615", "createdAt": "2020-09-25T20:26:07Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/io/IOUtils.java", "diffHunk": "@@ -646,11 +646,11 @@ public static File createFifoFile(final Path fifoFilePath, final boolean overwri\n     /**\n      * Makes a print stream for a file, gzipping on the fly if the file's name ends with '.gz'.\n      */\n-    public static PrintStream makePrintStreamMaybeGzipped(File file) throws IOException {\n-        if (file.getPath().endsWith(\".gz\")) {\n-            return new PrintStream(new GZIPOutputStream(new FileOutputStream(file)));\n+    public static PrintStream makePrintStreamMaybeGzipped(GATKPath filePath) throws IOException {\n+        if (filePath.hasExtension(\".gz\")) {\n+            return new PrintStream(new GZIPOutputStream(filePath.getOutputStream()));\n         } else {\n-            return new PrintStream(file);\n+            return new PrintStream(filePath.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MTA0MQ==", "bodyText": "Suppress. I'm adding a local checkError call to this call site. I've added a separate bullet point to #6610 to replace all usages of PrintStream with OutputStreamWriter, since all of the code that uses this PrintStream isn't detecting errors.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r496741041", "createdAt": "2020-09-29T13:59:38Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/io/IOUtils.java", "diffHunk": "@@ -646,11 +646,11 @@ public static File createFifoFile(final Path fifoFilePath, final boolean overwri\n     /**\n      * Makes a print stream for a file, gzipping on the fly if the file's name ends with '.gz'.\n      */\n-    public static PrintStream makePrintStreamMaybeGzipped(File file) throws IOException {\n-        if (file.getPath().endsWith(\".gz\")) {\n-            return new PrintStream(new GZIPOutputStream(new FileOutputStream(file)));\n+    public static PrintStream makePrintStreamMaybeGzipped(GATKPath filePath) throws IOException {\n+        if (filePath.hasExtension(\".gz\")) {\n+            return new PrintStream(new GZIPOutputStream(filePath.getOutputStream()));\n         } else {\n-            return new PrintStream(file);\n+            return new PrintStream(filePath.getOutputStream());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxNDYxNQ=="}, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUzNDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNjoyNVrOHs9BGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo0MzoyN1rOHv-1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5OTA5OA==", "bodyText": "Comment is inaccurate -- this constructor is public, not package access", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516899098", "createdAt": "2020-11-03T19:16:25Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -71,6 +73,39 @@\n         Utils.nonNull(rawArgumentValue, \"rawArgumentValue\");\n     }\n \n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NDc0Ng==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520074746", "createdAt": "2020-11-09T19:43:27Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -71,6 +73,39 @@\n         Utils.nonNull(rawArgumentValue, \"rawArgumentValue\");\n     }\n \n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5OTA5OA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUzNTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNjo1MlrOHs9CCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTo0MzozM1rOHv-2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5OTMzOA==", "bodyText": "Here too the comment is wrong -- this constructor is public", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516899338", "createdAt": "2020-11-03T19:16:52Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -71,6 +73,39 @@\n         Utils.nonNull(rawArgumentValue, \"rawArgumentValue\");\n     }\n \n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.\n+     */\n+    public FeatureInput(final GATKPath gatkPath) {\n+        super(gatkPath);\n+    }\n+\n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NDc5NQ==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520074795", "createdAt": "2020-11-09T19:43:33Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -71,6 +73,39 @@\n         Utils.nonNull(rawArgumentValue, \"rawArgumentValue\");\n     }\n \n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.\n+     */\n+    public FeatureInput(final GATKPath gatkPath) {\n+        super(gatkPath);\n+    }\n+\n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5OTMzOA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU2Nzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToyNjoyN1rOHs9VmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo0NzoxMVrOHwoRKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNDM0NQ==", "bodyText": "The PrintStream constructor can still end up throwing an exception, which we should handle (especially in an example tool like this). If you look at the implementation of PrintStream, you can see that the constructor ultimately ends up creating an OutputStreamWriter, which can throw...", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516904345", "createdAt": "2020-11-03T19:26:27Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "diffHunk": "@@ -45,12 +42,7 @@ public AssemblyRegionEvaluator assemblyRegionEvaluator() {\n \n     @Override\n     public void onTraversalStart() {\n-        try {\n-            outputStream = outputFile != null ? new PrintStream(outputFile) : System.out;\n-        }\n-        catch ( final FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(outputFile, e);\n-        }\n+        outputStream = outputFile != null ? new PrintStream(outputFile.getOutputStream()) : System.out;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NDg0Nw==", "bodyText": "I added back in a catch block for Exception since there are no checked exceptions thrown (though that won't catch the Error explicitly thrown by OutputStreamWriter).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520094847", "createdAt": "2020-11-09T20:18:57Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "diffHunk": "@@ -45,12 +42,7 @@ public AssemblyRegionEvaluator assemblyRegionEvaluator() {\n \n     @Override\n     public void onTraversalStart() {\n-        try {\n-            outputStream = outputFile != null ? new PrintStream(outputFile) : System.out;\n-        }\n-        catch ( final FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(outputFile, e);\n-        }\n+        outputStream = outputFile != null ? new PrintStream(outputFile.getOutputStream()) : System.out;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNDM0NQ=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMTI4MA==", "bodyText": "Can/should we explicitly catch the Error here (and in other places where OutputStreamWriter is used)?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520731280", "createdAt": "2020-11-10T17:14:25Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "diffHunk": "@@ -45,12 +42,7 @@ public AssemblyRegionEvaluator assemblyRegionEvaluator() {\n \n     @Override\n     public void onTraversalStart() {\n-        try {\n-            outputStream = outputFile != null ? new PrintStream(outputFile) : System.out;\n-        }\n-        catch ( final FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(outputFile, e);\n-        }\n+        outputStream = outputFile != null ? new PrintStream(outputFile.getOutputStream()) : System.out;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNDM0NQ=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MjI1OA==", "bodyText": "I thought catching Error was generally discouraged, so its seems like bad form, especially in sample code. I think if we really want to do it right we should eliminate the use of  PrintStream - those classes seem sketchy around.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520752258", "createdAt": "2020-11-10T17:45:23Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "diffHunk": "@@ -45,12 +42,7 @@ public AssemblyRegionEvaluator assemblyRegionEvaluator() {\n \n     @Override\n     public void onTraversalStart() {\n-        try {\n-            outputStream = outputFile != null ? new PrintStream(outputFile) : System.out;\n-        }\n-        catch ( final FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(outputFile, e);\n-        }\n+        outputStream = outputFile != null ? new PrintStream(outputFile.getOutputStream()) : System.out;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNDM0NQ=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MzQ1MA==", "bodyText": "@cmnbroad I think it's ok to catch Error just to wrap it in a nicer exception type (ie., UserException). I believe what's discouraged is catching Error and then attempting to recover from it.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520753450", "createdAt": "2020-11-10T17:47:11Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "diffHunk": "@@ -45,12 +42,7 @@ public AssemblyRegionEvaluator assemblyRegionEvaluator() {\n \n     @Override\n     public void onTraversalStart() {\n-        try {\n-            outputStream = outputFile != null ? new PrintStream(outputFile) : System.out;\n-        }\n-        catch ( final FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(outputFile, e);\n-        }\n+        outputStream = outputFile != null ? new PrintStream(outputFile.getOutputStream()) : System.out;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNDM0NQ=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU4NTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozMToyNFrOHs9gkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozMToyNFrOHs9gkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNzE1NA==", "bodyText": "The OutputStreamWriter constructor can throw -- we should catch any exceptions thrown by it, and wrap within a UserException as before.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516907154", "createdAt": "2020-11-03T19:31:24Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -165,11 +164,7 @@ public HaplotypeCallerEngine(final HaplotypeCallerArgumentCollection hcArgs, Ass\n         forceCallingAllelesPresent = hcArgs.alleles != null;\n         initialize(createBamOutIndex, createBamOutMD5);\n         if (hcArgs.assemblyStateOutput != null) {\n-            try {\n-                assemblyDebugOutStream = new PrintStream(Files.newOutputStream(IOUtils.getPath(hcArgs.assemblyStateOutput)));\n-            } catch (IOException e) {\n-                throw new UserException.CouldNotCreateOutputFile(hcArgs.assemblyStateOutput, \"Provided argument for assembly debug graph location could not be created\");\n-            }\n+            assemblyDebugOutStream = new OutputStreamWriter(hcArgs.assemblyStateOutput.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU5Njc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNDozN1rOHs9nWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyMzozOVrOHwAOXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODg5MA==", "bodyText": "You've switched from calling println() (which writes a newline to the stream) to calling write() (which I don't believe writes a newline).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516908890", "createdAt": "2020-11-03T19:34:37Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NzM3NA==", "bodyText": "Oh yeah right - fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520097374", "createdAt": "2020-11-09T20:23:39Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODg5MA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU5ODU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNTowNlrOHs9oYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyMzo0OFrOHwAOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTE1NA==", "bodyText": "fix indentation here", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516909154", "createdAt": "2020-11-03T19:35:06Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Error writing to debug output stream\", e);\n             }\n-        }\n+    }\n \n-        // run the local assembler, getting back a collection of information on how we should proceed\n+\n+    // run the local assembler, getting back a collection of information on how we should proceed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NzQzNw==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520097437", "createdAt": "2020-11-09T20:23:48Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Error writing to debug output stream\", e);\n             }\n-        }\n+    }\n \n-        // run the local assembler, getting back a collection of information on how we should proceed\n+\n+    // run the local assembler, getting back a collection of information on how we should proceed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTE1NA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTU5OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNToyMlrOHs9o_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyMzo1OVrOHwAO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTMwOA==", "bodyText": "Here too you've switched from calling println() (which writes a newline to the stream) to calling write() (which I don't believe writes a newline).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516909308", "createdAt": "2020-11-03T19:35:22Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Error writing to debug output stream\", e);\n             }\n-        }\n+    }\n \n-        // run the local assembler, getting back a collection of information on how we should proceed\n+\n+    // run the local assembler, getting back a collection of information on how we should proceed\n         final AssemblyResultSet untrimmedAssemblyResult =  AssemblyBasedCallerUtils.assembleReads(region, givenAlleles, hcArgs, readsHeader, samplesList, logger, referenceReader, assemblyEngine, aligner, !hcArgs.doNotCorrectOverlappingBaseQualities);\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\nThere were \" + untrimmedAssemblyResult.getHaplotypeList().size() + \" haplotypes found. Here they are:\");\n-            for (String haplotype : untrimmedAssemblyResult.getHaplotypeList().stream().map(haplotype -> haplotype.toString()).sorted().collect(Collectors.toList())) {\n-                assemblyDebugOutStream.println(haplotype);\n+            try {\n+                assemblyDebugOutStream.write(\"\\nThere were \" + untrimmedAssemblyResult.getHaplotypeList().size() + \" haplotypes found. Here they are:\");\n+                for (String haplotype : untrimmedAssemblyResult.getHaplotypeList().stream().map(haplotype -> haplotype.toString()).sorted().collect(Collectors.toList())) {\n+                    assemblyDebugOutStream.write(haplotype);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NzUwOQ==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520097509", "createdAt": "2020-11-09T20:23:59Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Error writing to debug output stream\", e);\n             }\n-        }\n+    }\n \n-        // run the local assembler, getting back a collection of information on how we should proceed\n+\n+    // run the local assembler, getting back a collection of information on how we should proceed\n         final AssemblyResultSet untrimmedAssemblyResult =  AssemblyBasedCallerUtils.assembleReads(region, givenAlleles, hcArgs, readsHeader, samplesList, logger, referenceReader, assemblyEngine, aligner, !hcArgs.doNotCorrectOverlappingBaseQualities);\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\nThere were \" + untrimmedAssemblyResult.getHaplotypeList().size() + \" haplotypes found. Here they are:\");\n-            for (String haplotype : untrimmedAssemblyResult.getHaplotypeList().stream().map(haplotype -> haplotype.toString()).sorted().collect(Collectors.toList())) {\n-                assemblyDebugOutStream.println(haplotype);\n+            try {\n+                assemblyDebugOutStream.write(\"\\nThere were \" + untrimmedAssemblyResult.getHaplotypeList().size() + \" haplotypes found. Here they are:\");\n+                for (String haplotype : untrimmedAssemblyResult.getHaplotypeList().stream().map(haplotype -> haplotype.toString()).sorted().collect(Collectors.toList())) {\n+                    assemblyDebugOutStream.write(haplotype);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTMwOA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTYwMTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNTo1OFrOHs9qNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyNDowNlrOHwAPJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTYyMQ==", "bodyText": "closingdebug -> closing debug", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516909621", "createdAt": "2020-11-03T19:35:58Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -714,7 +718,11 @@ public void shutdown() {\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.close();\n+            try {\n+                assemblyDebugOutStream.close();\n+            } catch (IOException e) {\n+                throw new UserException(\"Error closingdebug output stream\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NzU3NQ==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520097575", "createdAt": "2020-11-09T20:24:06Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -714,7 +718,11 @@ public void shutdown() {\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.close();\n+            try {\n+                assemblyDebugOutStream.close();\n+            } catch (IOException e) {\n+                throw new UserException(\"Error closingdebug output stream\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTYyMQ=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTYyMzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0MjoxOVrOHs93uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDo0NToyN1rOHwA7RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzA4MA==", "bodyText": "You need to call checkError() after print(), since print() can also set the error flag.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516913080", "createdAt": "2020-11-03T19:42:19Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,11 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                                if (modelReportStream.checkError()) {\n+                                    throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                                }\n                                 report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzcwNA==", "bodyText": "Also, as noted above the PrintStream constructor internally creates an OutputStreamWriter, which can throw an exception. We should catch that exception and wrap in a UserException", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516913704", "createdAt": "2020-11-03T19:43:31Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,11 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                                if (modelReportStream.checkError()) {\n+                                    throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                                }\n                                 report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzA4MA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwODg2OA==", "bodyText": "Done - moved to a separate private method to consolidate the two call sites with this problem. Its still kind of awkward though - we really need to fix GATKReport (which is already included in the list in #6610).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r520108868", "createdAt": "2020-11-09T20:45:27Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,11 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                                if (modelReportStream.checkError()) {\n+                                    throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                                }\n                                 report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzA4MA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTYzMDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NDoxMFrOHs97eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NDoxMFrOHs97eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNDA0MQ==", "bodyText": "Same problems here -- need to call checkError() after print(), not before, and need to handle the exception that can be thrown by the PrintStream constructor", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516914041", "createdAt": "2020-11-03T19:44:10Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -680,10 +683,11 @@ public Object onTraversalSuccess() {\n \n                 if (outputModel != null) {\n                     final GATKReport report = writeModelReport(goodModel, badModel, USE_ANNOTATIONS);\n-                    try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                    try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                        if (modelReportStream.checkError()) {\n+                            throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                        }\n                         report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1020, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}