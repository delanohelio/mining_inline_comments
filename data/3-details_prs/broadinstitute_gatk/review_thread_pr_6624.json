{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzE1Mzgy", "number": 6624, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDowOVrOErvyWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDowOVrOErvyWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA3MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/denoising/SVDDenoisingUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1MDowOVrOHesByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyMDoyM1rOHetFLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDY4MA==", "bodyText": "I'm a little confused, why is numZerosInSample a double rather than an int?\nIf you need it to be a double so that the fraction is a double, why not cast at the point of computing the fraction?", "url": "https://github.com/broadinstitute/gatk/pull/6624#discussion_r501940680", "createdAt": "2020-10-08T18:50:09Z", "author": {"login": "fleharty"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/denoising/SVDDenoisingUtils.java", "diffHunk": "@@ -230,15 +230,15 @@ private static PreprocessedStandardizedResult preprocessPanel(final RealMatrix r\n             logger.info(String.format(\"A value of 100 was provided for argument %s, so the corresponding filtering step will be skipped...\",\n                     CreateReadCountPanelOfNormals.MAXIMUM_ZEROS_IN_SAMPLE_PERCENTAGE_LONG_NAME));\n         } else {\n-            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals above %.2f percent...\", maximumZerosInSamplePercentage));\n-            final int maxZerosInSample = calculateMaximumZerosCount(countNumberPassingFilter(filterIntervals), maximumZerosInSamplePercentage);\n+            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals greater than or equal to %.2f percent...\", maximumZerosInSamplePercentage));\n+            final int numPassingIntervals = countNumberPassingFilter(filterIntervals);\n             IntStream.range(0, numOriginalSamples)\n                     .filter(sampleIndex -> !filterSamples[sampleIndex])\n                     .forEach(sampleIndex -> {\n-                        final int numZerosInSample = (int) IntStream.range(0, numOriginalIntervals)\n+                        final double numZerosInSample = (double) IntStream.range(0, numOriginalIntervals)\n                                 .filter(intervalIndex -> !filterIntervals[intervalIndex] && readCounts.getEntry(sampleIndex, intervalIndex) == 0.)\n                                 .count();\n-                        if (numZerosInSample > maxZerosInSample) {\n+                        if (numZerosInSample / numPassingIntervals >= maximumZerosInSamplePercentage / 100.) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b9577998b2b99ab107642217f2c4d47c41dec0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1Mzk1Ng==", "bodyText": "In both cases, the cast happens in the next line and the variable is not used elsewhere, so I'm OK keeping it like this. Certainly it's valid to represent an integer with a double, at least here...?", "url": "https://github.com/broadinstitute/gatk/pull/6624#discussion_r501953956", "createdAt": "2020-10-08T19:13:14Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/denoising/SVDDenoisingUtils.java", "diffHunk": "@@ -230,15 +230,15 @@ private static PreprocessedStandardizedResult preprocessPanel(final RealMatrix r\n             logger.info(String.format(\"A value of 100 was provided for argument %s, so the corresponding filtering step will be skipped...\",\n                     CreateReadCountPanelOfNormals.MAXIMUM_ZEROS_IN_SAMPLE_PERCENTAGE_LONG_NAME));\n         } else {\n-            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals above %.2f percent...\", maximumZerosInSamplePercentage));\n-            final int maxZerosInSample = calculateMaximumZerosCount(countNumberPassingFilter(filterIntervals), maximumZerosInSamplePercentage);\n+            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals greater than or equal to %.2f percent...\", maximumZerosInSamplePercentage));\n+            final int numPassingIntervals = countNumberPassingFilter(filterIntervals);\n             IntStream.range(0, numOriginalSamples)\n                     .filter(sampleIndex -> !filterSamples[sampleIndex])\n                     .forEach(sampleIndex -> {\n-                        final int numZerosInSample = (int) IntStream.range(0, numOriginalIntervals)\n+                        final double numZerosInSample = (double) IntStream.range(0, numOriginalIntervals)\n                                 .filter(intervalIndex -> !filterIntervals[intervalIndex] && readCounts.getEntry(sampleIndex, intervalIndex) == 0.)\n                                 .count();\n-                        if (numZerosInSample > maxZerosInSample) {\n+                        if (numZerosInSample / numPassingIntervals >= maximumZerosInSamplePercentage / 100.) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDY4MA=="}, "originalCommit": {"oid": "a8b9577998b2b99ab107642217f2c4d47c41dec0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzkzNQ==", "bodyText": "@samuelklee It's fine the way it is.", "url": "https://github.com/broadinstitute/gatk/pull/6624#discussion_r501957935", "createdAt": "2020-10-08T19:20:23Z", "author": {"login": "fleharty"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/denoising/SVDDenoisingUtils.java", "diffHunk": "@@ -230,15 +230,15 @@ private static PreprocessedStandardizedResult preprocessPanel(final RealMatrix r\n             logger.info(String.format(\"A value of 100 was provided for argument %s, so the corresponding filtering step will be skipped...\",\n                     CreateReadCountPanelOfNormals.MAXIMUM_ZEROS_IN_SAMPLE_PERCENTAGE_LONG_NAME));\n         } else {\n-            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals above %.2f percent...\", maximumZerosInSamplePercentage));\n-            final int maxZerosInSample = calculateMaximumZerosCount(countNumberPassingFilter(filterIntervals), maximumZerosInSamplePercentage);\n+            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals greater than or equal to %.2f percent...\", maximumZerosInSamplePercentage));\n+            final int numPassingIntervals = countNumberPassingFilter(filterIntervals);\n             IntStream.range(0, numOriginalSamples)\n                     .filter(sampleIndex -> !filterSamples[sampleIndex])\n                     .forEach(sampleIndex -> {\n-                        final int numZerosInSample = (int) IntStream.range(0, numOriginalIntervals)\n+                        final double numZerosInSample = (double) IntStream.range(0, numOriginalIntervals)\n                                 .filter(intervalIndex -> !filterIntervals[intervalIndex] && readCounts.getEntry(sampleIndex, intervalIndex) == 0.)\n                                 .count();\n-                        if (numZerosInSample > maxZerosInSample) {\n+                        if (numZerosInSample / numPassingIntervals >= maximumZerosInSamplePercentage / 100.) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDY4MA=="}, "originalCommit": {"oid": "a8b9577998b2b99ab107642217f2c4d47c41dec0"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 922, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}