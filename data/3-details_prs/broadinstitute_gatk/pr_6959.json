{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwOTI1MDg2", "number": 6959, "title": "Sharded VCF output option", "bodyText": "Sharded output is extremely useful for pipelining. This adds the option --max-variants-per-shard to GATKTool to let users easily split out VCFs. The functionality is implemented in the ShardingVCFWriter class, which is a simple wrapper around VariantContextWriter that basically creates a new writer whenever the max shard size is reached.", "createdAt": "2020-11-14T00:49:18Z", "url": "https://github.com/broadinstitute/gatk/pull/6959", "merged": true, "mergeCommit": {"oid": "83b87fdc53e39f1d13dc294cd210165ea187fe9e"}, "closed": true, "closedAt": "2021-06-30T16:44:41Z", "author": {"login": "mwalker174"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcQ_QGgBqjM5OTU4NjkyODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABel3MlxgFqTY5NjM5ODg2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a675d869fa5a0f13c4553441a33bdf4840ee0c6e", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/a675d869fa5a0f13c4553441a33bdf4840ee0c6e", "committedDate": "2020-11-14T00:53:22Z", "message": "Rename removeVcfExtension to removeExtension"}, "afterCommit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/e0c1a8074bdaf303efff53efe28345db6b55a214", "committedDate": "2020-11-14T00:54:22Z", "message": "Add sharding vcf output option to GATKTool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODk2MDM3", "url": "https://github.com/broadinstitute/gatk/pull/6959#pullrequestreview-534896037", "createdAt": "2020-11-19T22:07:44Z", "commit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowNzo0NFrOH2z2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjowNzo0NFrOH2z2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNDYxMQ==", "bodyText": "I know we can't predict how many shards there will be, but it would be nice to zero pad this to four digits so the shards (almost) always sort nicely.", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527234611", "createdAt": "2020-11-19T22:07:44Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.broadinstitute.hellbender.utils.variant.writers;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.FileExtensions;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.broadinstitute.hellbender.utils.variant.GATKVariantContextUtils;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Variant writer tha splits output to multiple VCFs given the maximum records per file. Before using {@link #add},\n+ * the header should be set using either {@link #setHeader} or {@link #writeHeader}, which may only be called once\n+ * and will determine whether headers are written to all shards.\n+ *\n+ * @author Mark Walker &lt;markw@broadinstitute.org&gt;\n+ */\n+public class ShardingVCFWriter implements VariantContextWriter {\n+\n+    public static final String SHARD_INDEX_PREFIX = \".shard_\";\n+    public static final String SHARD_INDEX_SUFFIX = FileExtensions.COMPRESSED_VCF;\n+\n+    private VariantContextWriter writer;\n+    private VCFHeader header;\n+    private final int maxVariantsPerShard;\n+    private final Path basePath;\n+    private final SAMSequenceDictionary dictionary;\n+    private final boolean createMD5;\n+    private final Options[] options;\n+\n+    /** Current shard  */\n+    private int shardIndex;\n+    /** Number of records written to current shard  */\n+    private int shardSize;\n+     /** Whether to write header, or null if header is undefined */\n+    private Boolean enableWriteHeader;\n+\n+    /**\n+     * Create a new sharding VCF writer\n+     *\n+     * @param basePath              base path of the output VCFs. The shard designation and file extension will be added.\n+     * @param maxVariantsPerShard   max number of records per file (last shard may have less)\n+     * @param dictionary            sequence dictionary for this writer\n+     * @param createMD5             enable MD5 file creation\n+     * @param options               vcf writer options\n+     */\n+    public ShardingVCFWriter(final Path basePath,\n+                             final int maxVariantsPerShard,\n+                             final SAMSequenceDictionary dictionary,\n+                             final boolean createMD5,\n+                             final Options... options) {\n+        Utils.nonNull(basePath);\n+        Utils.validateArg(maxVariantsPerShard > 0, \"maxVariantsPerShard must be positive\");\n+        this.basePath = IOUtils.removeExtension(basePath, FileExtensions.VCF_LIST);\n+        this.maxVariantsPerShard = maxVariantsPerShard;\n+        this.dictionary = dictionary;\n+        this.createMD5 = createMD5;\n+        this.options = options;\n+\n+        // Initialize first shard\n+        this.shardIndex = 0;\n+        this.shardSize = 0;\n+        this.writer = createNewWriter();\n+    }\n+\n+    /**\n+     * Initializes a new sharded file.\n+     */\n+    protected void createNextShard() {\n+        writer.close();\n+        shardIndex++;\n+        shardSize = 0;\n+        writer = createNewWriter();\n+        Utils.nonNull(header, \"Attempted to create new shard before header has been set\");\n+        initializeShardHeader();\n+    }\n+\n+    /**\n+     * Initializes shard header depending on which header function (set or write) was used\n+     */\n+    protected void initializeShardHeader() {\n+        if (enableWriteHeader != null) {\n+            if (enableWriteHeader.booleanValue()) {\n+                writer.writeHeader(header);\n+            } else {\n+                writer.setHeader(header);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a writer for a new shard\n+     *\n+     * @return the new writer\n+     */\n+    protected VariantContextWriter createNewWriter() {\n+        final Path outPath = Paths.get(basePath + SHARD_INDEX_PREFIX + shardIndex + SHARD_INDEX_SUFFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODk3NTIx", "url": "https://github.com/broadinstitute/gatk/pull/6959#pullrequestreview-534897521", "createdAt": "2020-11-19T22:10:06Z", "commit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxMDowNlrOH2z61Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxMDowNlrOH2z61Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNTc5Nw==", "bodyText": "Is this going to index as well?", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527235797", "createdAt": "2020-11-19T22:10:06Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/ShardingVCFWriter.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.broadinstitute.hellbender.utils.variant.writers;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.FileExtensions;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.writer.Options;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.broadinstitute.hellbender.utils.variant.GATKVariantContextUtils;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Variant writer tha splits output to multiple VCFs given the maximum records per file. Before using {@link #add},\n+ * the header should be set using either {@link #setHeader} or {@link #writeHeader}, which may only be called once\n+ * and will determine whether headers are written to all shards.\n+ *\n+ * @author Mark Walker &lt;markw@broadinstitute.org&gt;\n+ */\n+public class ShardingVCFWriter implements VariantContextWriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODk4MTM4", "url": "https://github.com/broadinstitute/gatk/pull/6959#pullrequestreview-534898138", "createdAt": "2020-11-19T22:11:04Z", "commit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxMTowNFrOH2z8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxMToyOVrOH2z9kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNjI4OQ==", "bodyText": "11 doesn't jive with the 10 and 2 below", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527236289", "createdAt": "2020-11-19T22:11:04Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java", "diffHunk": "@@ -64,4 +67,25 @@ public void testBrokenReferenceDictionaryErrorMessage() throws IOException {\n \n         runCommandLine(Arrays.asList(args), Mutect2.class.getSimpleName());\n     }\n+\n+    @Test\n+    public void testSharding() {\n+        final String outDir = createTempDir(\"GTShardedOutput\").getAbsolutePath();\n+        final String fileBase = \"test\";\n+        final String out = Paths.get(outDir, fileBase + FileExtensions.COMPRESSED_VCF).toString();\n+        final String[] args = new String[] {\n+                \"-V\",  TEST_DIRECTORY + \"example_variants_withSequenceDict.vcf\",\n+                \"-R\", hg19MiniReference,\n+                \"--\" + StandardArgumentDefinitions.MAX_VARIANTS_PER_SHARD_LONG_NAME, \"10\",\n+                \"-O\", out};\n+        runCommandLine(Arrays.asList(args), SelectVariants.class.getSimpleName());\n+\n+        // 11 total records in the test input should create 2 vcf shards with 10 and 1 records", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNjQ5OQ==", "bodyText": "Having experienced a lot of pain from lack of indexes, let's check for those too.", "url": "https://github.com/broadinstitute/gatk/pull/6959#discussion_r527236499", "createdAt": "2020-11-19T22:11:29Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/GatkToolIntegrationTest.java", "diffHunk": "@@ -64,4 +67,25 @@ public void testBrokenReferenceDictionaryErrorMessage() throws IOException {\n \n         runCommandLine(Arrays.asList(args), Mutect2.class.getSimpleName());\n     }\n+\n+    @Test\n+    public void testSharding() {\n+        final String outDir = createTempDir(\"GTShardedOutput\").getAbsolutePath();\n+        final String fileBase = \"test\";\n+        final String out = Paths.get(outDir, fileBase + FileExtensions.COMPRESSED_VCF).toString();\n+        final String[] args = new String[] {\n+                \"-V\",  TEST_DIRECTORY + \"example_variants_withSequenceDict.vcf\",\n+                \"-R\", hg19MiniReference,\n+                \"--\" + StandardArgumentDefinitions.MAX_VARIANTS_PER_SHARD_LONG_NAME, \"10\",\n+                \"-O\", out};\n+        runCommandLine(Arrays.asList(args), SelectVariants.class.getSimpleName());\n+\n+        // 11 total records in the test input should create 2 vcf shards with 10 and 1 records\n+        final String firstShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"0\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n+        final String secondShard = Paths.get(outDir, fileBase + ShardingVCFWriter.SHARD_INDEX_PREFIX + \"1\" + ShardingVCFWriter.SHARD_INDEX_SUFFIX).toString();\n+        final Pair<VCFHeader, List<VariantContext>> firstResults = VariantContextTestUtils.readEntireVCFIntoMemory(firstShard);\n+        final Pair<VCFHeader, List<VariantContext>> secondResults = VariantContextTestUtils.readEntireVCFIntoMemory(secondShard);\n+        Assert.assertEquals(firstResults.getValue().size(), 10, \"First shard has wrong number of records\");\n+        Assert.assertEquals(secondResults.getValue().size(), 2, \"Second shard has wrong number of records\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c1a8074bdaf303efff53efe28345db6b55a214"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjE1OTk3", "url": "https://github.com/broadinstitute/gatk/pull/6959#pullrequestreview-541215997", "createdAt": "2020-11-30T19:17:10Z", "commit": {"oid": "2b515a45bddfceffb189a96ef207e532e168130c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eed48b421528ff01dbc3cfac23e39518bada888", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/1eed48b421528ff01dbc3cfac23e39518bada888", "committedDate": "2020-12-02T18:56:05Z", "message": "Add sharding vcf output option to GATKTool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa208d3bc630fae78c9ea9654471095648fd2de", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/eaa208d3bc630fae78c9ea9654471095648fd2de", "committedDate": "2020-12-02T18:56:08Z", "message": "Pad filename shard index with zeros"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e4e43e82662fb638f718ff59a857739dcbcd6d", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/06e4e43e82662fb638f718ff59a857739dcbcd6d", "committedDate": "2020-12-02T18:56:08Z", "message": "Fix comment and add index file checks in GatkToolIntegrationTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b515a45bddfceffb189a96ef207e532e168130c", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/2b515a45bddfceffb189a96ef207e532e168130c", "committedDate": "2020-11-20T04:31:12Z", "message": "Fix comment and add index file checks in GatkToolIntegrationTest"}, "afterCommit": {"oid": "06e4e43e82662fb638f718ff59a857739dcbcd6d", "author": {"user": {"login": "mwalker174", "name": "Mark Walker"}}, "url": "https://github.com/broadinstitute/gatk/commit/06e4e43e82662fb638f718ff59a857739dcbcd6d", "committedDate": "2020-12-02T18:56:08Z", "message": "Fix comment and add index file checks in GatkToolIntegrationTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk2Mzk4ODY3", "url": "https://github.com/broadinstitute/gatk/pull/6959#pullrequestreview-696398867", "createdAt": "2021-06-30T16:42:07Z", "commit": {"oid": "06e4e43e82662fb638f718ff59a857739dcbcd6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2543, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}