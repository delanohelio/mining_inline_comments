{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODA4MzI1", "number": 6654, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjo1OToxNVrOEEhlNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoyODoyOFrOEFr3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTc5OTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjo1OToxNVrOGiM3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjo1OToxNVrOGiM3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxNTUwMw==", "bodyText": "Cleaned up code as the names of the GenomicsDB arrays are no longer constant and are based on the interval.", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r438515503", "createdAt": "2020-06-11T02:59:15Z", "author": {"login": "nalinigans"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -621,12 +622,12 @@ public void onTraversalStart() {\n \n         if (doIncrementalImport) {\n             logger.info(\"Callset Map JSON file will be re-written to \" + callsetMapJSONFile);\n-            logger.info(\"Incrementally importing to array - \" + workspaceDir + \"/\" + GenomicsDBConstants.DEFAULT_ARRAY_NAME);\n+            logger.info(\"Incrementally importing to workspace - \" + workspaceDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzk0MTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxOTowN1rOGkBTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDowNzo1MVrOGkGwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzM2Mg==", "bodyText": "Can you just use GenomicsDBArgumentCollection.SHARED_POSIXFS_OPTIMIZATIONS directly in this class instead of duplicating it here?", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440423362", "createdAt": "2020-06-15T20:19:07Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -200,6 +200,8 @@\n     public static final String MAX_NUM_INTERVALS_TO_IMPORT_IN_PARALLEL = \"max-num-intervals-to-import-in-parallel\";\n     public static final int INTERVAL_LIST_SIZE_WARNING_THRESHOLD = 100;\n \n+    public static final String SHARED_POSIXFS_OPTIMIZATIONS = \"genomicsdb-shared-posixfs-optimizations\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxMjY2OA==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440512668", "createdAt": "2020-06-16T00:07:51Z", "author": {"login": "nalinigans"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -200,6 +200,8 @@\n     public static final String MAX_NUM_INTERVALS_TO_IMPORT_IN_PARALLEL = \"max-num-intervals-to-import-in-parallel\";\n     public static final int INTERVAL_LIST_SIZE_WARNING_THRESHOLD = 100;\n \n+    public static final String SHARED_POSIXFS_OPTIMIZATIONS = \"genomicsdb-shared-posixfs-optimizations\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzM2Mg=="}, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzk0MzY1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoxOTo0NlrOGkBU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozNToyNlrOGkDk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzY1OQ==", "bodyText": "@lbergelson Can you comment on this change to the exclusions for the GenomicsDB dependency? Do you foresee any issues as a result of this change?", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440423659", "createdAt": "2020-06-15T20:19:46Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -255,7 +255,8 @@ dependencies {\n     compile 'com.github.broadinstitute:picard:' + picardVersion\n     externalSourceConfiguration 'com.github.broadinstitute:picard:' + picardVersion + ':sources'\n     compile ('org.genomicsdb:genomicsdb:' + genomicsdbVersion)  {\n-        exclude module: 'log4j'\n+        exclude module: 'log4j-api'\n+        exclude module: 'log4j-core'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MzgwNg==", "bodyText": "I don't think this will be a problem but I'm not 100% sure I know why this was necessary.  I assume this was driven by something practical that came up. I assume we're excluding this because it conflicts with our desired log4j version.  Did genomics db bump their version to use the log4j2 api instead of the original log4j?\n@nalinigans Can you comment on this?", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440453806", "createdAt": "2020-06-15T21:20:20Z", "author": {"login": "lbergelson"}, "path": "build.gradle", "diffHunk": "@@ -255,7 +255,8 @@ dependencies {\n     compile 'com.github.broadinstitute:picard:' + picardVersion\n     externalSourceConfiguration 'com.github.broadinstitute:picard:' + picardVersion + ':sources'\n     compile ('org.genomicsdb:genomicsdb:' + genomicsdbVersion)  {\n-        exclude module: 'log4j'\n+        exclude module: 'log4j-api'\n+        exclude module: 'log4j-core'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzY1OQ=="}, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2MDUyNQ==", "bodyText": "@lbergelson, @droazen, yes GenomicsDB bumped up to log4j2 which necessitated the api and core exclusions.", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440460525", "createdAt": "2020-06-15T21:35:26Z", "author": {"login": "nalinigans"}, "path": "build.gradle", "diffHunk": "@@ -255,7 +255,8 @@ dependencies {\n     compile 'com.github.broadinstitute:picard:' + picardVersion\n     externalSourceConfiguration 'com.github.broadinstitute:picard:' + picardVersion + ':sources'\n     compile ('org.genomicsdb:genomicsdb:' + genomicsdbVersion)  {\n-        exclude module: 'log4j'\n+        exclude module: 'log4j-api'\n+        exclude module: 'log4j-core'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzY1OQ=="}, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzk2NzMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImportIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoyNzo0N1rOGkBkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDowODowM1rOGkGw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzYwNw==", "bodyText": "Would be nicer to have a separate test case to test the overwrite workspace option, with a proper TestNG-style  expectedExceptions = GenomicsDBImport.UnableToCreateGenomicsDBWorkspace.class clause instead of this try-catch.", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440427607", "createdAt": "2020-06-15T20:27:47Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImportIntegrationTest.java", "diffHunk": "@@ -1026,6 +1026,50 @@ private void createAndCheckIntervalListFromExistingWorkspace(final String worksp\n         Assert.assertTrue(generatedInterval.sorted().equals(expectedInterval.sorted()));\n     }\n \n+    void basicWriteAndQueryWithOptions(String workspace, Map<String, Object> options) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.add(GenomicsDBImport.WORKSPACE_ARG_LONG_NAME, workspace);\n+        INTERVAL.forEach(args::addInterval);\n+        LOCAL_GVCFS.forEach(vcf -> args.add(\"V\", vcf));\n+        for ( String key : options.keySet()) {\n+            if (key.equals(GenomicsDBImport.SHARED_POSIXFS_OPTIMIZATIONS)) {\n+                Assert.assertTrue(options.get(key) instanceof Boolean);\n+                args.add(GenomicsDBImport.SHARED_POSIXFS_OPTIMIZATIONS, (Boolean)options.get(key));\n+            }\n+            if (key.equals(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME)) {\n+                Assert.assertTrue(options.get(key) instanceof Boolean);\n+                args.add(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME, (Boolean)options.get(key));\n+            }\n+        }\n+        runCommandLine(args);\n+        checkJSONFilesAreWritten(workspace);\n+        checkGenomicsDBAgainstExpected(workspace, INTERVAL, COMBINED, b38_reference_20_21, true, ATTRIBUTES_TO_IGNORE);\n+    }\n+\n+    @Test\n+    public void testWithMiscOptions() throws IOException {\n+        final String workspace = createTempDir(\"genomicsdb-misc-options\").getAbsolutePath() + \"/workspace\";\n+        IOUtils.deleteOnExit(IOUtils.getPath(workspace));\n+        Map<String, Object> options = new HashMap<String, Object>();\n+\n+        // Test with shared posixfs optimizations set\n+        options.put(GenomicsDBImport.SHARED_POSIXFS_OPTIMIZATIONS, true);\n+        basicWriteAndQueryWithOptions(workspace, options);\n+\n+        // Test with shared posixfs optimizations and overwrite workspace set\n+        options.put(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME, true);\n+        basicWriteAndQueryWithOptions(workspace, options);\n+\n+        // Test with overwrite workspace set to false - should throw an exception\n+        options.replace(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME, false);\n+        try {\n+            basicWriteAndQueryWithOptions(workspace, options);\n+            Assert.fail();\n+        } catch (GenomicsDBImport.UnableToCreateGenomicsDBWorkspace e) {\n+            // pass\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxMjcyNQ==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440512725", "createdAt": "2020-06-16T00:08:03Z", "author": {"login": "nalinigans"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImportIntegrationTest.java", "diffHunk": "@@ -1026,6 +1026,50 @@ private void createAndCheckIntervalListFromExistingWorkspace(final String worksp\n         Assert.assertTrue(generatedInterval.sorted().equals(expectedInterval.sorted()));\n     }\n \n+    void basicWriteAndQueryWithOptions(String workspace, Map<String, Object> options) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.add(GenomicsDBImport.WORKSPACE_ARG_LONG_NAME, workspace);\n+        INTERVAL.forEach(args::addInterval);\n+        LOCAL_GVCFS.forEach(vcf -> args.add(\"V\", vcf));\n+        for ( String key : options.keySet()) {\n+            if (key.equals(GenomicsDBImport.SHARED_POSIXFS_OPTIMIZATIONS)) {\n+                Assert.assertTrue(options.get(key) instanceof Boolean);\n+                args.add(GenomicsDBImport.SHARED_POSIXFS_OPTIMIZATIONS, (Boolean)options.get(key));\n+            }\n+            if (key.equals(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME)) {\n+                Assert.assertTrue(options.get(key) instanceof Boolean);\n+                args.add(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME, (Boolean)options.get(key));\n+            }\n+        }\n+        runCommandLine(args);\n+        checkJSONFilesAreWritten(workspace);\n+        checkGenomicsDBAgainstExpected(workspace, INTERVAL, COMBINED, b38_reference_20_21, true, ATTRIBUTES_TO_IGNORE);\n+    }\n+\n+    @Test\n+    public void testWithMiscOptions() throws IOException {\n+        final String workspace = createTempDir(\"genomicsdb-misc-options\").getAbsolutePath() + \"/workspace\";\n+        IOUtils.deleteOnExit(IOUtils.getPath(workspace));\n+        Map<String, Object> options = new HashMap<String, Object>();\n+\n+        // Test with shared posixfs optimizations set\n+        options.put(GenomicsDBImport.SHARED_POSIXFS_OPTIMIZATIONS, true);\n+        basicWriteAndQueryWithOptions(workspace, options);\n+\n+        // Test with shared posixfs optimizations and overwrite workspace set\n+        options.put(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME, true);\n+        basicWriteAndQueryWithOptions(workspace, options);\n+\n+        // Test with overwrite workspace set to false - should throw an exception\n+        options.replace(GenomicsDBImport.OVERWRITE_WORKSPACE_LONG_NAME, false);\n+        try {\n+            basicWriteAndQueryWithOptions(workspace, options);\n+            Assert.fail();\n+        } catch (GenomicsDBImport.UnableToCreateGenomicsDBWorkspace e) {\n+            // pass\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzYwNw=="}, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzk2OTU4OnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDoyODoyOFrOGkBl1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozNzoyN1rOGkDoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzk5MQ==", "bodyText": "Should the constant GenomicsDBConstants.DEFAULT_ARRAY_NAME be itself removed as well?", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440427991", "createdAt": "2020-06-15T20:28:28Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -621,12 +622,12 @@ public void onTraversalStart() {\n \n         if (doIncrementalImport) {\n             logger.info(\"Callset Map JSON file will be re-written to \" + callsetMapJSONFile);\n-            logger.info(\"Incrementally importing to array - \" + workspaceDir + \"/\" + GenomicsDBConstants.DEFAULT_ARRAY_NAME);\n+            logger.info(\"Incrementally importing to workspace - \" + workspaceDir);\n         } else {\n             logger.info(\"Vid Map JSON file will be written to \" + vidMapJSONFile);\n             logger.info(\"Callset Map JSON file will be written to \" + callsetMapJSONFile);\n             logger.info(\"Complete VCF Header will be written to \" + vcfHeaderFile);\n-            logger.info(\"Importing to array - \" + workspaceDir + \"/\" + GenomicsDBConstants.DEFAULT_ARRAY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2MTM3Mg==", "bodyText": "I looked at removing this constant. But, this is needed to support querying older GenomicsDB arrays.", "url": "https://github.com/broadinstitute/gatk/pull/6654#discussion_r440461372", "createdAt": "2020-06-15T21:37:27Z", "author": {"login": "nalinigans"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -621,12 +622,12 @@ public void onTraversalStart() {\n \n         if (doIncrementalImport) {\n             logger.info(\"Callset Map JSON file will be re-written to \" + callsetMapJSONFile);\n-            logger.info(\"Incrementally importing to array - \" + workspaceDir + \"/\" + GenomicsDBConstants.DEFAULT_ARRAY_NAME);\n+            logger.info(\"Incrementally importing to workspace - \" + workspaceDir);\n         } else {\n             logger.info(\"Vid Map JSON file will be written to \" + vidMapJSONFile);\n             logger.info(\"Callset Map JSON file will be written to \" + callsetMapJSONFile);\n             logger.info(\"Complete VCF Header will be written to \" + vcfHeaderFile);\n-            logger.info(\"Importing to array - \" + workspaceDir + \"/\" + GenomicsDBConstants.DEFAULT_ARRAY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNzk5MQ=="}, "originalCommit": {"oid": "7f637eb80b23b95725d972c5c2bde336b76be4f3"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 982, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}