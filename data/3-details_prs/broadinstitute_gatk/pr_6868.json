{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5Mjk0Mzkw", "number": 6868, "title": "Fix HaplotypeCaller crash due to IUPAC base", "bodyText": "htsjdk rejects anything that's not {A,T,C,G,N}.  Run a read transformer in HaplotypeCaller to clean up input reads by\ndefault before assembly.", "createdAt": "2020-10-07T14:29:24Z", "url": "https://github.com/broadinstitute/gatk/pull/6868", "merged": true, "mergeCommit": {"oid": "a53cee8c1b260cde1f93563307bca0d1f0a32887"}, "closed": true, "closedAt": "2020-10-29T15:22:07Z", "author": {"login": "ldgauthier"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQi3USgFqTUwNDg1NjQyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW_MFJgBqjM5MzE4NjQ0OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODU2NDI2", "url": "https://github.com/broadinstitute/gatk/pull/6868#pullrequestreview-504856426", "createdAt": "2020-10-08T14:40:07Z", "commit": {"oid": "fee113007004111134ec68928c61210805ba3b6b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo0MDowN1rOHeh86Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDo1NzowNlrOHeiyAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3NTU5Mw==", "bodyText": "And this is because there is an R in the reference at this site and that gets propagated into the CRAM reads correct?", "url": "https://github.com/broadinstitute/gatk/pull/6868#discussion_r501775593", "createdAt": "2020-10-08T14:40:07Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerIntegrationTest.java", "diffHunk": "@@ -1319,6 +1319,31 @@ public void testAdjacentIndels() {\n                 .allMatch(vc -> vc.isBiallelic() && (vc.getReference().length() == 1 || vc.getAlternateAllele(0).length() == 1)));\n     }\n \n+    /*\n+    Prior to IUPAC ReadTransformer fix, this test yields\n+    java.lang.IllegalArgumentException: Unexpected base in allele bases 'ATTCATTTCACAAGGGTAAAGCTTTCTTTGGATTCAGCAGGTTGGAAAATCTGTTTTTCACCTTTCTGTGAATGGACGTTTGGGAGCTCATTGAGGCCAGTGRCAATAAAGGAGATATCTCAGGGTGAAAAATAAAAGACAGGAATGTGAGAATTGGCTTTGTGATGTGAGCATTCATTTCACAAAGTTAAACCTTTCTTTTCATTCAGCAGTTAGAAATCACTGGTTTTGTAGAATCTG'\n+    where there's an R in that big long string representing the assembled haplotype.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee113007004111134ec68928c61210805ba3b6b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MjkyNw==", "bodyText": "Hmm... I'm tempted to say this should actually be true for the HaplotypeCaller. If the input really has bases that aren't even IUPAC then do we really want to silently allow them?", "url": "https://github.com/broadinstitute/gatk/pull/6868#discussion_r501782927", "createdAt": "2020-10-08T14:49:25Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/transformers/IUPACReadTransformer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.broadinstitute.hellbender.transformers;\n+\n+import org.broadinstitute.hellbender.utils.BaseUtils;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+\n+public class IUPACReadTransformer implements ReadTransformer {\n+    private static final long serialVersionUID = 1L;\n+    private boolean strictMode;\n+\n+    public IUPACReadTransformer() {\n+        this.strictMode = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee113007004111134ec68928c61210805ba3b6b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MzQ0OA==", "bodyText": "I would add a javadoc here that explains that this transformation is done in-place without copying.", "url": "https://github.com/broadinstitute/gatk/pull/6868#discussion_r501783448", "createdAt": "2020-10-08T14:50:00Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/transformers/IUPACReadTransformer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.broadinstitute.hellbender.transformers;\n+\n+import org.broadinstitute.hellbender.utils.BaseUtils;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+\n+public class IUPACReadTransformer implements ReadTransformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee113007004111134ec68928c61210805ba3b6b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4ODAyNQ==", "bodyText": "Furthermore I would probably also provide an explanation for why this is necessary with cram reads.", "url": "https://github.com/broadinstitute/gatk/pull/6868#discussion_r501788025", "createdAt": "2020-10-08T14:55:43Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/transformers/IUPACReadTransformer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.broadinstitute.hellbender.transformers;\n+\n+import org.broadinstitute.hellbender.utils.BaseUtils;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+\n+public class IUPACReadTransformer implements ReadTransformer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MzQ0OA=="}, "originalCommit": {"oid": "fee113007004111134ec68928c61210805ba3b6b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4OTE4NQ==", "bodyText": "You can take this or leave it. I actually think it might be useful to attach a one-shot-logger to this that warns the user that this has happened for some of their reads and spits out the readname so they can check later. Given how this is set up it might be a bit of a hassle though...", "url": "https://github.com/broadinstitute/gatk/pull/6868#discussion_r501789185", "createdAt": "2020-10-08T14:57:06Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/transformers/IUPACReadTransformer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.broadinstitute.hellbender.transformers;\n+\n+import org.broadinstitute.hellbender.utils.BaseUtils;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+\n+public class IUPACReadTransformer implements ReadTransformer {\n+    private static final long serialVersionUID = 1L;\n+    private boolean strictMode;\n+\n+    public IUPACReadTransformer() {\n+        this.strictMode = false;\n+    }\n+\n+    public IUPACReadTransformer(final boolean strictMode) {\n+        this.strictMode = strictMode;\n+    }\n+\n+    @Override\n+    public GATKRead apply(GATKRead read) {\n+        read.setBases(BaseUtils.convertIUPACtoN(read.getBases(), strictMode, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fee113007004111134ec68928c61210805ba3b6b"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODg4MzUw", "url": "https://github.com/broadinstitute/gatk/pull/6868#pullrequestreview-505888350", "createdAt": "2020-10-09T18:05:13Z", "commit": {"oid": "3d2b799614fa3202f4b33e4bb273ddff0b31d6c8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODowNToxM1rOHfT1dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODowNToxM1rOHfT1dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mjg4Nw==", "bodyText": "This looks like an expensive string to construct. This should be pushed into a supplier (so () <- {STRING_STUFF} and you should add an overload in the one shot logger that takes a supplier and only feeds it to the underlying logger if it hasn't spoken yet:\n    /**\n     * Logs a message which is only to be constructed if the logging level is the {@link Level#WARN WARN} level.\n     *\n     * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the\n     *            message factory.\n     * @since 2.4\n     */\n    void warn(Supplier<?> msgSupplier);", "url": "https://github.com/broadinstitute/gatk/pull/6868#discussion_r502592887", "createdAt": "2020-10-09T18:05:13Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/transformers/IUPACReadTransformer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.broadinstitute.hellbender.transformers;\n+\n+import org.broadinstitute.hellbender.utils.BaseUtils;\n+import org.broadinstitute.hellbender.utils.logging.OneShotLogger;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * A read transformer to convert IUPAC bases (i.e. non-ATCGs) to Ns\n+ * Some references (like human hg38) contain IUPAC bases that can be propagated into the reads when decoding cram\n+ * This transformation is done in-place without copying\n+ */\n+public class IUPACReadTransformer implements ReadTransformer {\n+    private static final long serialVersionUID = 1L;\n+    private boolean strictMode;\n+    private OneShotLogger logger = new OneShotLogger(this.getClass());\n+\n+    public IUPACReadTransformer() {\n+        this.strictMode = false;\n+    }\n+\n+    public IUPACReadTransformer(final boolean strictMode) {\n+        this.strictMode = strictMode;\n+    }\n+\n+    @Override\n+    public GATKRead apply(GATKRead read) {\n+        final byte[] maybeTransformed = BaseUtils.convertIUPACtoN(read.getBases(), strictMode, false);\n+        if (!Arrays.equals(read.getBases(), maybeTransformed)) {\n+            logger.warn(\"At least one read contains IUPAC bases that have been transformed.  Read \" + read.getName() + \" contains: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d2b799614fa3202f4b33e4bb273ddff0b31d6c8"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b1b8c3c1e2981b28c976318fdf44a5c897c46a", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/72b1b8c3c1e2981b28c976318fdf44a5c897c46a", "committedDate": "2020-10-28T15:20:30Z", "message": "Broad production crams can be read back in with IUPAC bases, which\nhtsjdk doesn't condone.  Run a read transformer to clean them up by\ndefault."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9212437f110c68b91a48fced642498b60836a3b8", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/9212437f110c68b91a48fced642498b60836a3b8", "committedDate": "2020-10-09T19:23:17Z", "message": "Show warning in test output"}, "afterCommit": {"oid": "72b1b8c3c1e2981b28c976318fdf44a5c897c46a", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/72b1b8c3c1e2981b28c976318fdf44a5c897c46a", "committedDate": "2020-10-28T15:20:30Z", "message": "Broad production crams can be read back in with IUPAC bases, which\nhtsjdk doesn't condone.  Run a read transformer to clean them up by\ndefault."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2501, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}