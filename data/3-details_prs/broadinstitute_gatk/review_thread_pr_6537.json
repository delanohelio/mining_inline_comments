{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzMzNTIx", "number": 6537, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0MTo0N1rODyMn8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0NDowOFrODyMrUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTYyMjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0MTo0N1rOGGGwvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyMDowNlrOGQH01g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NTQyMQ==", "bodyText": "I'd like for the error to specify somehow is that the problem is the contigs specified for filtering.  Otherwise users will be validating all their input files and scratching their heads.", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r409055421", "createdAt": "2020-04-15T18:41:47Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java", "diffHunk": "@@ -170,6 +173,21 @@ private static GATKRead clearReadAlignment(final GATKRead read, final SAMFileHea\n                 });\n     }\n \n+    /**\n+     * Validate arguments\n+     */\n+    private void validateFilterArguments() {\n+        final SAMSequenceDictionary dictionary = header.getSequenceDictionary();\n+        if (filterArgs.alignedInput) {\n+            final Set<String> contigsToIgnoreSet = new HashSet<>(filterArgs.alignmentContigsToIgnore);\n+            for (final String contig : contigsToIgnoreSet) {\n+                if (dictionary.getSequence(contig) == null) {\n+                    throw new UserException.MissingContigInSequenceDictionary(contig, dictionary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b08a03ffbad5e7aca757c4200cbd87728f8682"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1ODYxNA==", "bodyText": "Done", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r419558614", "createdAt": "2020-05-04T16:20:06Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilter.java", "diffHunk": "@@ -170,6 +173,21 @@ private static GATKRead clearReadAlignment(final GATKRead read, final SAMFileHea\n                 });\n     }\n \n+    /**\n+     * Validate arguments\n+     */\n+    private void validateFilterArguments() {\n+        final SAMSequenceDictionary dictionary = header.getSequenceDictionary();\n+        if (filterArgs.alignedInput) {\n+            final Set<String> contigsToIgnoreSet = new HashSet<>(filterArgs.alignmentContigsToIgnore);\n+            for (final String contig : contigsToIgnoreSet) {\n+                if (dictionary.getSequence(contig) == null) {\n+                    throw new UserException.MissingContigInSequenceDictionary(contig, dictionary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NTQyMQ=="}, "originalCommit": {"oid": "74b08a03ffbad5e7aca757c4200cbd87728f8682"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTYyNjY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilterArgumentCollection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0Mjo1OFrOGGGzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyMDoyN1rOGQH11Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjEyNg==", "bodyText": "Is it really called chrEBV?  Honestly I haven't looked at all 3500 names.", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r409056126", "createdAt": "2020-04-15T18:42:58Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilterArgumentCollection.java", "diffHunk": "@@ -190,6 +193,16 @@\n             optional = true)\n     public int minIdentity = 30;\n \n+    /**\n+     * If using --is-host-aligned, ignores alignments to these contigs (can be specified multiple times). This\n+     * can be useful if the alignment is to a reference containing a microbe, such as chrEBV in hg38.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b08a03ffbad5e7aca757c4200cbd87728f8682"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1ODg2OQ==", "bodyText": "Yep. I recently found out it's also in hg19 but it uses the NCBI accession", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r419558869", "createdAt": "2020-05-04T16:20:27Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/spark/pathseq/PSFilterArgumentCollection.java", "diffHunk": "@@ -190,6 +193,16 @@\n             optional = true)\n     public int minIdentity = 30;\n \n+    /**\n+     * If using --is-host-aligned, ignores alignments to these contigs (can be specified multiple times). This\n+     * can be useful if the alignment is to a reference containing a microbe, such as chrEBV in hg38.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjEyNg=="}, "originalCommit": {"oid": "74b08a03ffbad5e7aca757c4200cbd87728f8682"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTYzMDg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0NDowOFrOGGG2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0NDowOFrOGGG2GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1Njc5Mg==", "bodyText": "I prefer Assert.assertTrue and Assert.assertFalse (below)", "url": "https://github.com/broadinstitute/gatk/pull/6537#discussion_r409056792", "createdAt": "2020-04-15T18:44:08Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pathseq/HostAlignmentReadFilterTest.java", "diffHunk": "@@ -73,13 +75,50 @@ public void testUnmappedRead() {\n         Assert.assertEquals(true, test_i);\n     }\n \n+    @Test\n+    public void testIgnoredContig() {\n+        final Set<String> ignoredContigSet = Sets.newHashSet(IGNORED_CONTIG);\n+        final HostAlignmentReadFilter filter = new HostAlignmentReadFilter(MIN_IDENTITY, ignoredContigSet);\n+        final byte[] bases = new byte[100];\n+        final byte[] qual = new byte[100];\n+        Arrays.fill(bases, (byte) 'A');\n+        Arrays.fill(qual, (byte) 30);\n+\n+        // Mapped fully to ignored contig\n+        final GATKRead readA = ArtificialReadUtils.createArtificialRead(bases, qual, \"100M\");\n+        readA.setAttribute(\"NM\", 0);\n+        readA.setPosition(IGNORED_CONTIG, 1);\n+        final boolean testA = filter.test(readA);\n+        Assert.assertEquals(true, testA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b08a03ffbad5e7aca757c4200cbd87728f8682"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1167, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}