{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTc0NzY5", "number": 6607, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0Njo1MFrOD97Xjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDoxMzozNVrOEXDA8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYyNDE1OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0Njo1MFrOGXt9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxNToyMVrOGZBVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzUxMA==", "bodyText": "Can we keep it named PostprocessGermlineCNVCalls, since it's basically doing same work as before", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r427523510", "createdAt": "2020-05-19T18:46:50Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNjExMQ==", "bodyText": "Yes, WDL tasks are pretty much 1:1 with tools and should just reflect the tool name, if possible.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428816111", "createdAt": "2020-05-21T17:54:14Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzUxMA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4OTM0NQ==", "bodyText": "Done", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428889345", "createdAt": "2020-05-21T20:15:21Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzUxMA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYzOTI1OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1MDo0MVrOGXuHKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxNzoxMlrOGZBYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTkzMA==", "bodyText": "Can we change invariants  in the name here and elsewhere to something more explicit -- like bundled_gcnv_posteriors or bundled_gcnv_outputs", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r427525930", "createdAt": "2020-05-19T18:50:41Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNjU0MQ==", "bodyText": "I agree. I still need to read on to figure out what exactly is being bundled, but the name is not super descriptive...", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428816541", "createdAt": "2020-05-21T17:54:57Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTkzMA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MDIyOQ==", "bodyText": "Changed to bundled_gcnv_outputs", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428890229", "createdAt": "2020-05-21T20:17:12Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTkzMA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjY0MzI2OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1MTo1NlrOGXuJvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxODowN1rOGZBaLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNjU5MQ==", "bodyText": "What's the reason for calling time here?", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r427526591", "createdAt": "2020-05-19T18:51:56Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar\n+        String entity_id\n+        File contig_ploidy_calls_tar\n+        Array[String]? allosomal_contigs\n+        Int ref_copy_number_autosomal_contigs\n+        Int sample_index\n+        File? gatk4_jar_override\n+\n+        # Runtime parameters\n+        String gatk_docker\n+        Int? mem_gb\n+        Int? disk_space_gb\n+        Boolean use_ssd = false\n+        Int? cpu\n+        Int? preemptible_attempts\n     }\n \n     Int machine_mem_mb = select_first([mem_gb, 7]) * 1000\n     Int command_mem_mb = machine_mem_mb - 1000\n \n+    Float invariants_size = size(invariants_tar, \"GiB\")\n+    Float disk_overhead = 20.0\n+    Float tar_disk_factor= 5.0\n+    Int vm_disk_size = ceil(tar_disk_factor * invariants_size + disk_overhead)\n+\n     String genotyped_intervals_vcf_filename = \"genotyped-intervals-~{entity_id}.vcf.gz\"\n     String genotyped_segments_vcf_filename = \"genotyped-segments-~{entity_id}.vcf.gz\"\n     String denoised_copy_ratios_filename = \"denoised_copy_ratios-~{entity_id}.tsv\"\n \n     Array[String] allosomal_contigs_args = if defined(allosomal_contigs) then prefix(\"--allosomal-contig \", select_first([allosomal_contigs])) else []\n \n     command <<<\n-        set -eu\n-        export GATK_LOCAL_JAR=~{default=\"/root/gatk.jar\" gatk4_jar_override}\n+        set -euo pipefail\n \n-        sharded_interval_lists_array=(~{sep=\" \" sharded_interval_lists})\n+        export GATK_LOCAL_JAR=~{default=\"/root/gatk.jar\" gatk4_jar_override}\n \n         # untar calls to CALLS_0, CALLS_1, etc directories and build the command line\n         # also copy over shard config and interval files\n-        gcnv_calls_tar_array=(~{sep=\" \" gcnv_calls_tars})\n-        calling_configs_array=(~{sep=\" \" calling_configs})\n-        denoising_configs_array=(~{sep=\" \" denoising_configs})\n-        gcnvkernel_version_array=(~{sep=\" \" gcnvkernel_version})\n-        sharded_interval_lists_array=(~{sep=\" \" sharded_interval_lists})\n-        calls_args=\"\"\n-        for index in ${!gcnv_calls_tar_array[@]}; do\n-            gcnv_calls_tar=${gcnv_calls_tar_array[$index]}\n-            mkdir -p CALLS_$index/SAMPLE_~{sample_index}\n-            tar xzf $gcnv_calls_tar -C CALLS_$index/SAMPLE_~{sample_index}\n-            cp ${calling_configs_array[$index]} CALLS_$index/\n-            cp ${denoising_configs_array[$index]} CALLS_$index/\n-            cp ${gcnvkernel_version_array[$index]} CALLS_$index/\n-            cp ${sharded_interval_lists_array[$index]} CALLS_$index/\n-            calls_args=\"$calls_args --calls-shard-path CALLS_$index\"\n-        done\n-\n-        # untar models to MODEL_0, MODEL_1, etc directories and build the command line\n-        gcnv_model_tar_array=(~{sep=\" \" gcnv_model_tars})\n-        model_args=\"\"\n-        for index in ${!gcnv_model_tar_array[@]}; do\n-            gcnv_model_tar=${gcnv_model_tar_array[$index]}\n-            mkdir MODEL_$index\n-            tar xzf $gcnv_model_tar -C MODEL_$index\n-            model_args=\"$model_args --model-shard-path MODEL_$index\"\n+        tar xzf ~{invariants_tar}\n+        rm ~{invariants_tar}\n+        number_of_shards=`find . -name 'CALLS_*' | wc -l`\n+\n+        touch calls_and_model_args.txt\n+        for i in $(seq 0 `expr $number_of_shards - 1`); do\n+            echo \"--calls-shard-path CALLS_$i\" >> calls_and_model_args.txt\n+            echo \"--model-shard-path MODEL_$i\" >> calls_and_model_args.txt\n         done\n \n-        mkdir contig-ploidy-calls\n-        tar xzf ~{contig_ploidy_calls_tar} -C contig-ploidy-calls\n+        mkdir -p extracted-contig-ploidy-calls\n+        tar xzf ~{contig_ploidy_calls_tar} -C extracted-contig-ploidy-calls\n+        rm ~{contig_ploidy_calls_tar}\n \n-        gatk --java-options \"-Xmx~{command_mem_mb}m\" PostprocessGermlineCNVCalls \\\n-            $calls_args \\\n-            $model_args \\\n+        time gatk --java-options \"-Xmx~{command_mem_mb}m\" PostprocessGermlineCNVCalls \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MDY3MQ==", "bodyText": "Looks like a relic from when we were optimizing for wgs. Removed time", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428890671", "createdAt": "2020-05-21T20:18:07Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar\n+        String entity_id\n+        File contig_ploidy_calls_tar\n+        Array[String]? allosomal_contigs\n+        Int ref_copy_number_autosomal_contigs\n+        Int sample_index\n+        File? gatk4_jar_override\n+\n+        # Runtime parameters\n+        String gatk_docker\n+        Int? mem_gb\n+        Int? disk_space_gb\n+        Boolean use_ssd = false\n+        Int? cpu\n+        Int? preemptible_attempts\n     }\n \n     Int machine_mem_mb = select_first([mem_gb, 7]) * 1000\n     Int command_mem_mb = machine_mem_mb - 1000\n \n+    Float invariants_size = size(invariants_tar, \"GiB\")\n+    Float disk_overhead = 20.0\n+    Float tar_disk_factor= 5.0\n+    Int vm_disk_size = ceil(tar_disk_factor * invariants_size + disk_overhead)\n+\n     String genotyped_intervals_vcf_filename = \"genotyped-intervals-~{entity_id}.vcf.gz\"\n     String genotyped_segments_vcf_filename = \"genotyped-segments-~{entity_id}.vcf.gz\"\n     String denoised_copy_ratios_filename = \"denoised_copy_ratios-~{entity_id}.tsv\"\n \n     Array[String] allosomal_contigs_args = if defined(allosomal_contigs) then prefix(\"--allosomal-contig \", select_first([allosomal_contigs])) else []\n \n     command <<<\n-        set -eu\n-        export GATK_LOCAL_JAR=~{default=\"/root/gatk.jar\" gatk4_jar_override}\n+        set -euo pipefail\n \n-        sharded_interval_lists_array=(~{sep=\" \" sharded_interval_lists})\n+        export GATK_LOCAL_JAR=~{default=\"/root/gatk.jar\" gatk4_jar_override}\n \n         # untar calls to CALLS_0, CALLS_1, etc directories and build the command line\n         # also copy over shard config and interval files\n-        gcnv_calls_tar_array=(~{sep=\" \" gcnv_calls_tars})\n-        calling_configs_array=(~{sep=\" \" calling_configs})\n-        denoising_configs_array=(~{sep=\" \" denoising_configs})\n-        gcnvkernel_version_array=(~{sep=\" \" gcnvkernel_version})\n-        sharded_interval_lists_array=(~{sep=\" \" sharded_interval_lists})\n-        calls_args=\"\"\n-        for index in ${!gcnv_calls_tar_array[@]}; do\n-            gcnv_calls_tar=${gcnv_calls_tar_array[$index]}\n-            mkdir -p CALLS_$index/SAMPLE_~{sample_index}\n-            tar xzf $gcnv_calls_tar -C CALLS_$index/SAMPLE_~{sample_index}\n-            cp ${calling_configs_array[$index]} CALLS_$index/\n-            cp ${denoising_configs_array[$index]} CALLS_$index/\n-            cp ${gcnvkernel_version_array[$index]} CALLS_$index/\n-            cp ${sharded_interval_lists_array[$index]} CALLS_$index/\n-            calls_args=\"$calls_args --calls-shard-path CALLS_$index\"\n-        done\n-\n-        # untar models to MODEL_0, MODEL_1, etc directories and build the command line\n-        gcnv_model_tar_array=(~{sep=\" \" gcnv_model_tars})\n-        model_args=\"\"\n-        for index in ${!gcnv_model_tar_array[@]}; do\n-            gcnv_model_tar=${gcnv_model_tar_array[$index]}\n-            mkdir MODEL_$index\n-            tar xzf $gcnv_model_tar -C MODEL_$index\n-            model_args=\"$model_args --model-shard-path MODEL_$index\"\n+        tar xzf ~{invariants_tar}\n+        rm ~{invariants_tar}\n+        number_of_shards=`find . -name 'CALLS_*' | wc -l`\n+\n+        touch calls_and_model_args.txt\n+        for i in $(seq 0 `expr $number_of_shards - 1`); do\n+            echo \"--calls-shard-path CALLS_$i\" >> calls_and_model_args.txt\n+            echo \"--model-shard-path MODEL_$i\" >> calls_and_model_args.txt\n         done\n \n-        mkdir contig-ploidy-calls\n-        tar xzf ~{contig_ploidy_calls_tar} -C contig-ploidy-calls\n+        mkdir -p extracted-contig-ploidy-calls\n+        tar xzf ~{contig_ploidy_calls_tar} -C extracted-contig-ploidy-calls\n+        rm ~{contig_ploidy_calls_tar}\n \n-        gatk --java-options \"-Xmx~{command_mem_mb}m\" PostprocessGermlineCNVCalls \\\n-            $calls_args \\\n-            $model_args \\\n+        time gatk --java-options \"-Xmx~{command_mem_mb}m\" PostprocessGermlineCNVCalls \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNjU5MQ=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjk2NDA3OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyNjoyNlrOGXxVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDoxN1rOGd6Ppw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3ODcxOA==", "bodyText": "We seem to be hitting an error in our Travis gCNV WDL tests -\n The number of entries in the copy-number posterior file for shard 0 does not match the number of entries in the shard interval list (posterior list size: 21, interval list size: 20)\nIs it possible that some mismatch between shards is introduced here?", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r427578718", "createdAt": "2020-05-19T20:26:26Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {\n+    input {\n+      Array[File] calls_tars\n+      Array[File] model_tars\n+      Array[File] calling_configs\n+      Array[File] denoising_configs\n+      Array[File] gcnvkernel_version\n+      Array[File] sharded_interval_lists\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+        mkdir -p out\n+\n+        calls_files_tar_list=~{write_lines(calls_tars)}\n+        model_files_tar_list=~{write_lines(model_tars)}\n+\n+        calling_configs_list=~{write_lines(calling_configs)}\n+        denoising_configs_list=~{write_lines(denoising_configs)}\n+        gcnvkernel_version_list=~{write_lines(gcnvkernel_version)}\n+        sharded_interval_lists_list=~{write_lines(sharded_interval_lists)}\n+\n+        cat $calls_files_tar_list | sort -V > calls_files_tar_list.sorted\n+        cat $model_files_tar_list | sort -V > model_files_tar_list.sorted\n+\n+        cat $calling_configs_list | sort -V > calling_configs_list.sorted\n+        cat $denoising_configs_list | sort -V > denoising_configs_list.sorted\n+        cat $gcnvkernel_version_list | sort -V > gcnvkernel_version_list.sorted\n+        cat $sharded_interval_lists_list | sort -V > sharded_interval_lists_list.sorted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNjE2Nw==", "bodyText": "Hm not sure what was happening there, especially since my own tests completed successfully. But my latest changes don't seem to be triggering this error.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r434016167", "createdAt": "2020-06-02T16:34:17Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {\n+    input {\n+      Array[File] calls_tars\n+      Array[File] model_tars\n+      Array[File] calling_configs\n+      Array[File] denoising_configs\n+      Array[File] gcnvkernel_version\n+      Array[File] sharded_interval_lists\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+        mkdir -p out\n+\n+        calls_files_tar_list=~{write_lines(calls_tars)}\n+        model_files_tar_list=~{write_lines(model_tars)}\n+\n+        calling_configs_list=~{write_lines(calling_configs)}\n+        denoising_configs_list=~{write_lines(denoising_configs)}\n+        gcnvkernel_version_list=~{write_lines(gcnvkernel_version)}\n+        sharded_interval_lists_list=~{write_lines(sharded_interval_lists)}\n+\n+        cat $calls_files_tar_list | sort -V > calls_files_tar_list.sorted\n+        cat $model_files_tar_list | sort -V > model_files_tar_list.sorted\n+\n+        cat $calling_configs_list | sort -V > calling_configs_list.sorted\n+        cat $denoising_configs_list | sort -V > denoising_configs_list.sorted\n+        cat $gcnvkernel_version_list | sort -V > gcnvkernel_version_list.sorted\n+        cat $sharded_interval_lists_list | sort -V > sharded_interval_lists_list.sorted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3ODcxOA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjk2NjE0OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoyNzowNlrOGXxWtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNDo1OVrOGd6Rig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3OTA2MQ==", "bodyText": "Same here for invariant name as above", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r427579061", "createdAt": "2020-05-19T20:27:06Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxOTc5Mw==", "bodyText": "Maybe some comments to indicate what this task is doing.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428819793", "createdAt": "2020-05-21T18:00:39Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3OTA2MQ=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzM5Nw==", "bodyText": "Renamed to BundleCallerOutputs", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428897397", "createdAt": "2020-05-21T20:31:16Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3OTA2MQ=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNjY1MA==", "bodyText": "Actually in my latest commit this is now a TransposeCallerOutputs", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r434016650", "createdAt": "2020-06-02T16:34:59Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3OTA2MQ=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDQ2NTMyOnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo1OTo1NVrOGY7A6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozOToxMlrOGd6cYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NTg5Nw==", "bodyText": "I might just put this ternary all on one line (or make the style of optional arrays like allosomal-contigs below consistent).", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428785897", "createdAt": "2020-05-21T16:59:55Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -201,10 +202,27 @@ task CollectCounts {\n       Int? preemptible_attempts\n     }\n \n+    parameter_meta {\n+      bam: {\n+        localization_optional: true\n+      }\n+      bam_idx: {\n+        localization_optional: true\n+      }\n+    }\n+\n     Int machine_mem_mb = select_first([mem_gb, 7]) * 1000\n     Int command_mem_mb = machine_mem_mb - 1000\n \n     Boolean enable_indexing_ = select_first([enable_indexing, false])\n+    Array[String] disabled_read_filters_arr = if(defined(disabled_read_filters))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxOTQyNg==", "bodyText": "Done", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r434019426", "createdAt": "2020-06-02T16:39:12Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -201,10 +202,27 @@ task CollectCounts {\n       Int? preemptible_attempts\n     }\n \n+    parameter_meta {\n+      bam: {\n+        localization_optional: true\n+      }\n+      bam_idx: {\n+        localization_optional: true\n+      }\n+    }\n+\n     Int machine_mem_mb = select_first([mem_gb, 7]) * 1000\n     Int command_mem_mb = machine_mem_mb - 1000\n \n     Boolean enable_indexing_ = select_first([enable_indexing, false])\n+    Array[String] disabled_read_filters_arr = if(defined(disabled_read_filters))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4NTg5Nw=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDY1MjYzOnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo1NTo0MFrOGY86HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo0MTo0MlrOGd6ipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNjkyNA==", "bodyText": "Is this something that should be changed throughout all CNV WDLs?", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428816924", "createdAt": "2020-05-21T17:55:40Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar\n+        String entity_id\n+        File contig_ploidy_calls_tar\n+        Array[String]? allosomal_contigs\n+        Int ref_copy_number_autosomal_contigs\n+        Int sample_index\n+        File? gatk4_jar_override\n+\n+        # Runtime parameters\n+        String gatk_docker\n+        Int? mem_gb\n+        Int? disk_space_gb\n+        Boolean use_ssd = false\n+        Int? cpu\n+        Int? preemptible_attempts\n     }\n \n     Int machine_mem_mb = select_first([mem_gb, 7]) * 1000\n     Int command_mem_mb = machine_mem_mb - 1000\n \n+    Float invariants_size = size(invariants_tar, \"GiB\")\n+    Float disk_overhead = 20.0\n+    Float tar_disk_factor= 5.0\n+    Int vm_disk_size = ceil(tar_disk_factor * invariants_size + disk_overhead)\n+\n     String genotyped_intervals_vcf_filename = \"genotyped-intervals-~{entity_id}.vcf.gz\"\n     String genotyped_segments_vcf_filename = \"genotyped-segments-~{entity_id}.vcf.gz\"\n     String denoised_copy_ratios_filename = \"denoised_copy_ratios-~{entity_id}.tsv\"\n \n     Array[String] allosomal_contigs_args = if defined(allosomal_contigs) then prefix(\"--allosomal-contig \", select_first([allosomal_contigs])) else []\n \n     command <<<\n-        set -eu\n-        export GATK_LOCAL_JAR=~{default=\"/root/gatk.jar\" gatk4_jar_override}\n+        set -euo pipefail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyMTAyOA==", "bodyText": "It is good practice, although -o pipefail will have no effect in this task since piping isn't used anywhere", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r434021028", "createdAt": "2020-06-02T16:41:42Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -413,99 +441,82 @@ task ScatterIntervals {\n     }\n }\n \n-task PostprocessGermlineCNVCalls {\n+task BundledPostprocessGermlineCNVCalls {\n     input {\n-      String entity_id\n-      Array[File] gcnv_calls_tars\n-      Array[File] gcnv_model_tars\n-      Array[File] calling_configs\n-      Array[File] denoising_configs\n-      Array[File] gcnvkernel_version\n-      Array[File] sharded_interval_lists\n-      File contig_ploidy_calls_tar\n-      Array[String]? allosomal_contigs\n-      Int ref_copy_number_autosomal_contigs\n-      Int sample_index\n-      File? gatk4_jar_override\n-\n-      # Runtime parameters\n-      String gatk_docker\n-      Int? mem_gb\n-      Int? disk_space_gb\n-      Boolean use_ssd = false\n-      Int? cpu\n-      Int? preemptible_attempts\n+        File invariants_tar\n+        String entity_id\n+        File contig_ploidy_calls_tar\n+        Array[String]? allosomal_contigs\n+        Int ref_copy_number_autosomal_contigs\n+        Int sample_index\n+        File? gatk4_jar_override\n+\n+        # Runtime parameters\n+        String gatk_docker\n+        Int? mem_gb\n+        Int? disk_space_gb\n+        Boolean use_ssd = false\n+        Int? cpu\n+        Int? preemptible_attempts\n     }\n \n     Int machine_mem_mb = select_first([mem_gb, 7]) * 1000\n     Int command_mem_mb = machine_mem_mb - 1000\n \n+    Float invariants_size = size(invariants_tar, \"GiB\")\n+    Float disk_overhead = 20.0\n+    Float tar_disk_factor= 5.0\n+    Int vm_disk_size = ceil(tar_disk_factor * invariants_size + disk_overhead)\n+\n     String genotyped_intervals_vcf_filename = \"genotyped-intervals-~{entity_id}.vcf.gz\"\n     String genotyped_segments_vcf_filename = \"genotyped-segments-~{entity_id}.vcf.gz\"\n     String denoised_copy_ratios_filename = \"denoised_copy_ratios-~{entity_id}.tsv\"\n \n     Array[String] allosomal_contigs_args = if defined(allosomal_contigs) then prefix(\"--allosomal-contig \", select_first([allosomal_contigs])) else []\n \n     command <<<\n-        set -eu\n-        export GATK_LOCAL_JAR=~{default=\"/root/gatk.jar\" gatk4_jar_override}\n+        set -euo pipefail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxNjkyNA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDY2MDc3OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo1ODowN1rOGY8_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo0NzoyNlrOGd6wQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxODM0OA==", "bodyText": "The task name in the comment section header should match the name of the WDL task.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428818348", "createdAt": "2020-05-21T17:58:07Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl", "diffHunk": "@@ -111,11 +112,19 @@ workflow CNVGermlineCaseWorkflow {\n       Float? gcnv_caller_external_admixing_rate\n       Boolean? gcnv_disable_annealing\n \n+      ######################################################\n+      #### arguments for BundlePostprocessingInvariants ####\n+      ######################################################\n+      Int? mem_gb_for_bundle_postprocessing_invariants\n+      Int? disk_space_gb_for_bundle_postprocessing_invariants\n+\n       ###################################################\n       #### arguments for PostprocessGermlineCNVCalls ####\n       ###################################################\n       Int ref_copy_number_autosomal_contigs\n       Array[String]? allosomal_contigs\n+      Int? disk_space_gb_for_postprocess_germline_cnv_calls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNDUxMg==", "bodyText": "Done", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r434024512", "createdAt": "2020-06-02T16:47:26Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl", "diffHunk": "@@ -111,11 +112,19 @@ workflow CNVGermlineCaseWorkflow {\n       Float? gcnv_caller_external_admixing_rate\n       Boolean? gcnv_disable_annealing\n \n+      ######################################################\n+      #### arguments for BundlePostprocessingInvariants ####\n+      ######################################################\n+      Int? mem_gb_for_bundle_postprocessing_invariants\n+      Int? disk_space_gb_for_bundle_postprocessing_invariants\n+\n       ###################################################\n       #### arguments for PostprocessGermlineCNVCalls ####\n       ###################################################\n       Int ref_copy_number_autosomal_contigs\n       Array[String]? allosomal_contigs\n+      Int? disk_space_gb_for_postprocess_germline_cnv_calls", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgxODM0OA=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDcyOTE5OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoxODo1NVrOGY9rvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxNDo1N1rOGgl4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTYyOQ==", "bodyText": "I think the way this is originally done in the gCNV tasks is more robust to the maximum number of samples.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428829629", "createdAt": "2020-05-21T18:18:55Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {\n+    input {\n+      Array[File] calls_tars\n+      Array[File] model_tars\n+      Array[File] calling_configs\n+      Array[File] denoising_configs\n+      Array[File] gcnvkernel_version\n+      Array[File] sharded_interval_lists\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+        mkdir -p out\n+\n+        calls_files_tar_list=~{write_lines(calls_tars)}\n+        model_files_tar_list=~{write_lines(model_tars)}\n+\n+        calling_configs_list=~{write_lines(calling_configs)}\n+        denoising_configs_list=~{write_lines(denoising_configs)}\n+        gcnvkernel_version_list=~{write_lines(gcnvkernel_version)}\n+        sharded_interval_lists_list=~{write_lines(sharded_interval_lists)}\n+\n+        cat $calls_files_tar_list | sort -V > calls_files_tar_list.sorted\n+        cat $model_files_tar_list | sort -V > model_files_tar_list.sorted\n+\n+        cat $calling_configs_list | sort -V > calling_configs_list.sorted\n+        cat $denoising_configs_list | sort -V > denoising_configs_list.sorted\n+        cat $gcnvkernel_version_list | sort -V > gcnvkernel_version_list.sorted\n+        cat $sharded_interval_lists_list | sort -V > sharded_interval_lists_list.sorted\n+\n+        paste calls_files_tar_list.sorted model_files_tar_list.sorted calling_configs_list.sorted denoising_configs_list.sorted gcnvkernel_version_list.sorted sharded_interval_lists_list.sorted |\\\n+              awk '{print (NR-1)\"\\t\"$0}' > file_sets.sorted\n+        OIFS=$IFS\n+        IFS=$'\\t'\n+        while read index calls_tar model_tar call_config denoise version intervals; do\n+            mkdir -p out/CALLS_$index\n+            mkdir -p out/MODEL_$index\n+            tar xzf $calls_tar -C out/CALLS_$index\n+            tar xzf $model_tar -C out/MODEL_$index\n+            cp $call_config out/CALLS_$index\n+            cp $denoise out/CALLS_$index\n+            cp $version out/CALLS_$index\n+            cp $intervals out/CALLS_$index\n+            rm $calls_tar $model_tar $call_config $denoise $version $intervals\n+\n+        done < file_sets.sorted\n+        IFS=$OIFS\n+\n+        tar c -C out . | gzip -1 > case-gcnv-postprocessing-invariants.tar.gz\n+        rm -Rf out\n+    >>>\n+\n+    runtime {\n+        docker: docker\n+        memory: select_first([mem_gb, 2]) + \" GiB\"\n+        disks: \"local-disk \" + select_first([disk_space_gb, 150]) + if use_ssd then \" SSD\" else \" HDD\"\n+        cpu: select_first([cpu, 1])\n+        preemptible: select_first([preemptible_attempts, 5])\n+    }\n+\n+    output {\n+        File bundle_tar = \"case-gcnv-postprocessing-invariants.tar.gz\"\n+    }\n+}\n+\n+task ScatterPloidyCallsBySample {\n+    input {\n+      File contig_ploidy_calls_tar\n+      Array[String] samples\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    Int num_samples = length(samples)\n+    String out_dir = \"calls_renamed\"\n+\n+    command <<<\n+      set -eu\n+\n+      # Extract ploidy calls\n+      mkdir calls\n+      tar xzf ~{contig_ploidy_calls_tar} -C calls/\n+\n+      # Archive call files by sample, renaming so they will be glob'd in order\n+      sample_ids=(~{sep=\" \" samples})\n+      for (( i=0; i<~{num_samples}; i++ ))\n+      do\n+        sample_id=${sample_ids[$i]}\n+        sample_no=`printf %04d $i`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMTg2Mw==", "bodyText": "Also, why is the renaming added to the ploidy calls here, but removed from the gCNV calls? Are those guaranteed to line up?", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428831863", "createdAt": "2020-05-21T18:23:06Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {\n+    input {\n+      Array[File] calls_tars\n+      Array[File] model_tars\n+      Array[File] calling_configs\n+      Array[File] denoising_configs\n+      Array[File] gcnvkernel_version\n+      Array[File] sharded_interval_lists\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+        mkdir -p out\n+\n+        calls_files_tar_list=~{write_lines(calls_tars)}\n+        model_files_tar_list=~{write_lines(model_tars)}\n+\n+        calling_configs_list=~{write_lines(calling_configs)}\n+        denoising_configs_list=~{write_lines(denoising_configs)}\n+        gcnvkernel_version_list=~{write_lines(gcnvkernel_version)}\n+        sharded_interval_lists_list=~{write_lines(sharded_interval_lists)}\n+\n+        cat $calls_files_tar_list | sort -V > calls_files_tar_list.sorted\n+        cat $model_files_tar_list | sort -V > model_files_tar_list.sorted\n+\n+        cat $calling_configs_list | sort -V > calling_configs_list.sorted\n+        cat $denoising_configs_list | sort -V > denoising_configs_list.sorted\n+        cat $gcnvkernel_version_list | sort -V > gcnvkernel_version_list.sorted\n+        cat $sharded_interval_lists_list | sort -V > sharded_interval_lists_list.sorted\n+\n+        paste calls_files_tar_list.sorted model_files_tar_list.sorted calling_configs_list.sorted denoising_configs_list.sorted gcnvkernel_version_list.sorted sharded_interval_lists_list.sorted |\\\n+              awk '{print (NR-1)\"\\t\"$0}' > file_sets.sorted\n+        OIFS=$IFS\n+        IFS=$'\\t'\n+        while read index calls_tar model_tar call_config denoise version intervals; do\n+            mkdir -p out/CALLS_$index\n+            mkdir -p out/MODEL_$index\n+            tar xzf $calls_tar -C out/CALLS_$index\n+            tar xzf $model_tar -C out/MODEL_$index\n+            cp $call_config out/CALLS_$index\n+            cp $denoise out/CALLS_$index\n+            cp $version out/CALLS_$index\n+            cp $intervals out/CALLS_$index\n+            rm $calls_tar $model_tar $call_config $denoise $version $intervals\n+\n+        done < file_sets.sorted\n+        IFS=$OIFS\n+\n+        tar c -C out . | gzip -1 > case-gcnv-postprocessing-invariants.tar.gz\n+        rm -Rf out\n+    >>>\n+\n+    runtime {\n+        docker: docker\n+        memory: select_first([mem_gb, 2]) + \" GiB\"\n+        disks: \"local-disk \" + select_first([disk_space_gb, 150]) + if use_ssd then \" SSD\" else \" HDD\"\n+        cpu: select_first([cpu, 1])\n+        preemptible: select_first([preemptible_attempts, 5])\n+    }\n+\n+    output {\n+        File bundle_tar = \"case-gcnv-postprocessing-invariants.tar.gz\"\n+    }\n+}\n+\n+task ScatterPloidyCallsBySample {\n+    input {\n+      File contig_ploidy_calls_tar\n+      Array[String] samples\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    Int num_samples = length(samples)\n+    String out_dir = \"calls_renamed\"\n+\n+    command <<<\n+      set -eu\n+\n+      # Extract ploidy calls\n+      mkdir calls\n+      tar xzf ~{contig_ploidy_calls_tar} -C calls/\n+\n+      # Archive call files by sample, renaming so they will be glob'd in order\n+      sample_ids=(~{sep=\" \" samples})\n+      for (( i=0; i<~{num_samples}; i++ ))\n+      do\n+        sample_id=${sample_ids[$i]}\n+        sample_no=`printf %04d $i`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTYyOQ=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyODI4NA==", "bodyText": "Added dynamic scaling of the sample index padding. I don't think we need sample ids in the call tars since these are only consumed internally. The sample order will be the same between the input bam array and SAMPLE_ subdirectories that gCNV creates, so they will line up.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r436828284", "createdAt": "2020-06-08T16:14:57Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +616,122 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task BundlePostprocessingInvariants {\n+    input {\n+      Array[File] calls_tars\n+      Array[File] model_tars\n+      Array[File] calling_configs\n+      Array[File] denoising_configs\n+      Array[File] gcnvkernel_version\n+      Array[File] sharded_interval_lists\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+        mkdir -p out\n+\n+        calls_files_tar_list=~{write_lines(calls_tars)}\n+        model_files_tar_list=~{write_lines(model_tars)}\n+\n+        calling_configs_list=~{write_lines(calling_configs)}\n+        denoising_configs_list=~{write_lines(denoising_configs)}\n+        gcnvkernel_version_list=~{write_lines(gcnvkernel_version)}\n+        sharded_interval_lists_list=~{write_lines(sharded_interval_lists)}\n+\n+        cat $calls_files_tar_list | sort -V > calls_files_tar_list.sorted\n+        cat $model_files_tar_list | sort -V > model_files_tar_list.sorted\n+\n+        cat $calling_configs_list | sort -V > calling_configs_list.sorted\n+        cat $denoising_configs_list | sort -V > denoising_configs_list.sorted\n+        cat $gcnvkernel_version_list | sort -V > gcnvkernel_version_list.sorted\n+        cat $sharded_interval_lists_list | sort -V > sharded_interval_lists_list.sorted\n+\n+        paste calls_files_tar_list.sorted model_files_tar_list.sorted calling_configs_list.sorted denoising_configs_list.sorted gcnvkernel_version_list.sorted sharded_interval_lists_list.sorted |\\\n+              awk '{print (NR-1)\"\\t\"$0}' > file_sets.sorted\n+        OIFS=$IFS\n+        IFS=$'\\t'\n+        while read index calls_tar model_tar call_config denoise version intervals; do\n+            mkdir -p out/CALLS_$index\n+            mkdir -p out/MODEL_$index\n+            tar xzf $calls_tar -C out/CALLS_$index\n+            tar xzf $model_tar -C out/MODEL_$index\n+            cp $call_config out/CALLS_$index\n+            cp $denoise out/CALLS_$index\n+            cp $version out/CALLS_$index\n+            cp $intervals out/CALLS_$index\n+            rm $calls_tar $model_tar $call_config $denoise $version $intervals\n+\n+        done < file_sets.sorted\n+        IFS=$OIFS\n+\n+        tar c -C out . | gzip -1 > case-gcnv-postprocessing-invariants.tar.gz\n+        rm -Rf out\n+    >>>\n+\n+    runtime {\n+        docker: docker\n+        memory: select_first([mem_gb, 2]) + \" GiB\"\n+        disks: \"local-disk \" + select_first([disk_space_gb, 150]) + if use_ssd then \" SSD\" else \" HDD\"\n+        cpu: select_first([cpu, 1])\n+        preemptible: select_first([preemptible_attempts, 5])\n+    }\n+\n+    output {\n+        File bundle_tar = \"case-gcnv-postprocessing-invariants.tar.gz\"\n+    }\n+}\n+\n+task ScatterPloidyCallsBySample {\n+    input {\n+      File contig_ploidy_calls_tar\n+      Array[String] samples\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    Int num_samples = length(samples)\n+    String out_dir = \"calls_renamed\"\n+\n+    command <<<\n+      set -eu\n+\n+      # Extract ploidy calls\n+      mkdir calls\n+      tar xzf ~{contig_ploidy_calls_tar} -C calls/\n+\n+      # Archive call files by sample, renaming so they will be glob'd in order\n+      sample_ids=(~{sep=\" \" samples})\n+      for (( i=0; i<~{num_samples}; i++ ))\n+      do\n+        sample_id=${sample_ids[$i]}\n+        sample_no=`printf %04d $i`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTYyOQ=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDc1OTU0OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/germline/cnv_germline_case_scattered_workflow.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyODowMFrOGY9_EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxNzo1OFrOGgmAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNDU3Nw==", "bodyText": "Does it make sense to flatten some of these quantities?", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r428834577", "createdAt": "2020-05-21T18:28:00Z", "author": {"login": "samuelklee"}, "path": "scripts/cnv_wdl/germline/cnv_germline_case_scattered_workflow.wdl", "diffHunk": "@@ -196,16 +198,16 @@ workflow CNVGermlineCaseScatteredWorkflow {\n \n     output {\n         Array[File] preprocessed_intervals = CNVGermlineCaseWorkflow.preprocessed_intervals\n-        Array[Array[File]] read_counts_entity_id = CNVGermlineCaseWorkflow.read_counts_entity_id\n-        Array[Array[File]] read_counts = CNVGermlineCaseWorkflow.read_counts\n-        Array[File] contig_ploidy_calls_tars = CNVGermlineCaseWorkflow.contig_ploidy_calls_tar\n-        Array[Array[Array[File]]] gcnv_calls_tars = CNVGermlineCaseWorkflow.gcnv_calls_tars\n-        Array[Array[File]] gcnv_tracking_tars = CNVGermlineCaseWorkflow.gcnv_tracking_tars\n-        Array[Array[File]] genotyped_intervals_vcf = CNVGermlineCaseWorkflow.genotyped_intervals_vcf\n-        Array[Array[File]] genotyped_segments_vcf = CNVGermlineCaseWorkflow.genotyped_segments_vcf\n-        Array[Array[File]] qc_status_files = CNVGermlineCaseWorkflow.qc_status_files\n-        Array[Array[String]] qc_status_strings = CNVGermlineCaseWorkflow.qc_status_strings\n-        Array[Array[File]] denoised_copy_ratios = CNVGermlineCaseWorkflow.denoised_copy_ratios\n+        Array[File] read_counts_entity_id = flatten(CNVGermlineCaseWorkflow.read_counts_entity_id)\n+        Array[File] read_counts = flatten(CNVGermlineCaseWorkflow.read_counts)\n+        Array[File] sample_contig_ploidy_calls_tars = flatten(CNVGermlineCaseWorkflow.sample_contig_ploidy_calls_tars)\n+        Array[File] gcnv_calls_tars = flatten(CNVGermlineCaseWorkflow.gcnv_calls_tars)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMDI1MQ==", "bodyText": "You're right I shouldn't flatten sample_contig_ploidy_calls_tars and gcnv_calls_tars, but the rest are sample-wise and will correspond to the size/order of the input bams", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r436830251", "createdAt": "2020-06-08T16:17:58Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/germline/cnv_germline_case_scattered_workflow.wdl", "diffHunk": "@@ -196,16 +198,16 @@ workflow CNVGermlineCaseScatteredWorkflow {\n \n     output {\n         Array[File] preprocessed_intervals = CNVGermlineCaseWorkflow.preprocessed_intervals\n-        Array[Array[File]] read_counts_entity_id = CNVGermlineCaseWorkflow.read_counts_entity_id\n-        Array[Array[File]] read_counts = CNVGermlineCaseWorkflow.read_counts\n-        Array[File] contig_ploidy_calls_tars = CNVGermlineCaseWorkflow.contig_ploidy_calls_tar\n-        Array[Array[Array[File]]] gcnv_calls_tars = CNVGermlineCaseWorkflow.gcnv_calls_tars\n-        Array[Array[File]] gcnv_tracking_tars = CNVGermlineCaseWorkflow.gcnv_tracking_tars\n-        Array[Array[File]] genotyped_intervals_vcf = CNVGermlineCaseWorkflow.genotyped_intervals_vcf\n-        Array[Array[File]] genotyped_segments_vcf = CNVGermlineCaseWorkflow.genotyped_segments_vcf\n-        Array[Array[File]] qc_status_files = CNVGermlineCaseWorkflow.qc_status_files\n-        Array[Array[String]] qc_status_strings = CNVGermlineCaseWorkflow.qc_status_strings\n-        Array[Array[File]] denoised_copy_ratios = CNVGermlineCaseWorkflow.denoised_copy_ratios\n+        Array[File] read_counts_entity_id = flatten(CNVGermlineCaseWorkflow.read_counts_entity_id)\n+        Array[File] read_counts = flatten(CNVGermlineCaseWorkflow.read_counts)\n+        Array[File] sample_contig_ploidy_calls_tars = flatten(CNVGermlineCaseWorkflow.sample_contig_ploidy_calls_tars)\n+        Array[File] gcnv_calls_tars = flatten(CNVGermlineCaseWorkflow.gcnv_calls_tars)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNDU3Nw=="}, "originalCommit": {"oid": "f146f664851417ad76d584d40e8995676fcd8447"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTA2MTcxOnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoxMzowOFrOGpqRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxMDo1M1rOG4_yQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                runtime {\n          \n          \n            \n                    docker: docker\n          \n          \n            \n                    memory: select_first([mem_gb, 2]) + \" GiB\"\n          \n          \n            \n                    disks: \"local-disk \" + select_first([disk_space_gb, 150]) + if use_ssd then \" SSD\" else \" HDD\"\n          \n          \n            \n                Int disk_baseline_gb_ = 10\n          \n          \n            \n                Float compression_factor = 10.0\n          \n          \n            \n                Int disk_needed_gb = disk_baseline_gb + ceil(compression_factor * size(gcnv_calls_tars, \"GiB\"))\n          \n          \n            \n                \n          \n          \n            \n                runtime {\n          \n          \n            \n                    docker: docker\n          \n          \n            \n                    memory: select_first([mem_gb, 2]) + \" GiB\"\n          \n          \n            \n                    disks: \"local-disk \" + select_first([disk_space_gb, disk_needed_gb]) + if use_ssd then \" SSD\" else \" HDD\"\n          \n      \n    \n    \n  \n\nI don't see memory being a problem here, but these kinds of tasks have been running of out disk on larger panels. This should be conservative enough without being super wasteful.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r446337461", "createdAt": "2020-06-26T18:13:08Z", "author": {"login": "TedBrookings"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +612,100 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task TransposeCallerOutputs {\n+    input {\n+      Array[File] gcnv_calls_tars\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+\n+        gcnv_calls_tar_array=(~{sep=\" \" gcnv_calls_tars})\n+        for index in ${!gcnv_calls_tar_array[@]}; do\n+            mkdir CALLS_$index\n+            tar xzf ${gcnv_calls_tar_array[$index]} -C CALLS_$index\n+        done\n+\n+        CURRENT_SAMPLE=0\n+        NUM_SAMPLES=$(ls -d CALLS_0/SAMPLE_* | wc -l)\n+        NUM_DIGITS=${#NUM_SAMPLES}\n+        while [ $CURRENT_SAMPLE -lt $NUM_SAMPLES ]; do\n+            CURRENT_SAMPLE_WITH_LEADING_ZEROS=$(printf \"%0${NUM_DIGITS}d\" $CURRENT_SAMPLE)\n+            tar c CALLS_*/SAMPLE_$CURRENT_SAMPLE | gzip -1 > gcnv-calls-sample-$CURRENT_SAMPLE_WITH_LEADING_ZEROS.tar.gz\n+            let CURRENT_SAMPLE=CURRENT_SAMPLE+1\n+        done\n+\n+        rm -r CALLS_*/SAMPLE_*\n+        tar c CALLS_* | gzip -1 > gcnv-shard-configs.tar.gz\n+    >>>\n+\n+    runtime {\n+        docker: docker\n+        memory: select_first([mem_gb, 2]) + \" GiB\"\n+        disks: \"local-disk \" + select_first([disk_space_gb, 150]) + if use_ssd then \" SSD\" else \" HDD\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13317db8dce5d7fa1265fb37b222bc63dc3bc7fd"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxODQ5OA==", "bodyText": "Thanks. This would have been good but it turns out we aren't using this task. It might be useful to have automatic scaling for the rest of the gCNV tasks but I'll leave this for later work.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r462418498", "createdAt": "2020-07-29T16:10:53Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +612,100 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task TransposeCallerOutputs {\n+    input {\n+      Array[File] gcnv_calls_tars\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    command <<<\n+        set -euo pipefail\n+\n+        gcnv_calls_tar_array=(~{sep=\" \" gcnv_calls_tars})\n+        for index in ${!gcnv_calls_tar_array[@]}; do\n+            mkdir CALLS_$index\n+            tar xzf ${gcnv_calls_tar_array[$index]} -C CALLS_$index\n+        done\n+\n+        CURRENT_SAMPLE=0\n+        NUM_SAMPLES=$(ls -d CALLS_0/SAMPLE_* | wc -l)\n+        NUM_DIGITS=${#NUM_SAMPLES}\n+        while [ $CURRENT_SAMPLE -lt $NUM_SAMPLES ]; do\n+            CURRENT_SAMPLE_WITH_LEADING_ZEROS=$(printf \"%0${NUM_DIGITS}d\" $CURRENT_SAMPLE)\n+            tar c CALLS_*/SAMPLE_$CURRENT_SAMPLE | gzip -1 > gcnv-calls-sample-$CURRENT_SAMPLE_WITH_LEADING_ZEROS.tar.gz\n+            let CURRENT_SAMPLE=CURRENT_SAMPLE+1\n+        done\n+\n+        rm -r CALLS_*/SAMPLE_*\n+        tar c CALLS_* | gzip -1 > gcnv-shard-configs.tar.gz\n+    >>>\n+\n+    runtime {\n+        docker: docker\n+        memory: select_first([mem_gb, 2]) + \" GiB\"\n+        disks: \"local-disk \" + select_first([disk_space_gb, 150]) + if use_ssd then \" SSD\" else \" HDD\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzQ2MQ=="}, "originalCommit": {"oid": "13317db8dce5d7fa1265fb37b222bc63dc3bc7fd"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjAwMzQyOnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDowMjowMFrOG-nklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyMzoxN1rOG-_kjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMzIzOQ==", "bodyText": "Space here for consistency", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r468313239", "createdAt": "2020-08-11T04:02:00Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +627,51 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task ScatterPloidyCallsBySample {\n+    input {\n+      File contig_ploidy_calls_tar\n+      Array[String] samples\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    Int num_samples = length(samples)\n+    String out_dir = \"calls_renamed\"\n+\n+    command <<<\n+      set -eu\n+\n+      # Extract ploidy calls\n+      mkdir calls\n+      tar xzf ~{contig_ploidy_calls_tar} -C calls/\n+\n+      # Archive call files by sample, renaming so they will be glob'd in order\n+      sample_ids=(~{sep=\" \" samples})\n+      num_samples=~{num_samples}\n+      num_digits=${#num_samples}\n+      for (( i=0; i<~{num_samples}; i++ ))\n+      do\n+        sample_id=${sample_ids[$i]}\n+        padded_sample_index=$(printf \"%0${num_digits}d\" $i)\n+        tar -czf sample_${padded_sample_index}.${sample_id}.contig_ploidy_calls.tar.gz -C calls/SAMPLE_${i} .\n+      done\n+    >>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24b40bb2ea03ab0ba0a07e2615948c13e66991b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwNjQ0Nw==", "bodyText": "Done", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r468706447", "createdAt": "2020-08-11T16:23:17Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/cnv_common_tasks.wdl", "diffHunk": "@@ -605,3 +627,51 @@ task CollectModelQualityMetrics {\n         String qc_status_string = read_string(\"qcStatus.txt\")\n     }\n }\n+\n+task ScatterPloidyCallsBySample {\n+    input {\n+      File contig_ploidy_calls_tar\n+      Array[String] samples\n+\n+      # Runtime parameters\n+      String docker\n+      Int? mem_gb\n+      Int? disk_space_gb\n+      Boolean use_ssd = false\n+      Int? cpu\n+      Int? preemptible_attempts\n+    }\n+\n+    Int num_samples = length(samples)\n+    String out_dir = \"calls_renamed\"\n+\n+    command <<<\n+      set -eu\n+\n+      # Extract ploidy calls\n+      mkdir calls\n+      tar xzf ~{contig_ploidy_calls_tar} -C calls/\n+\n+      # Archive call files by sample, renaming so they will be glob'd in order\n+      sample_ids=(~{sep=\" \" samples})\n+      num_samples=~{num_samples}\n+      num_digits=${#num_samples}\n+      for (( i=0; i<~{num_samples}; i++ ))\n+      do\n+        sample_id=${sample_ids[$i]}\n+        padded_sample_index=$(printf \"%0${num_digits}d\" $i)\n+        tar -czf sample_${padded_sample_index}.${sample_id}.contig_ploidy_calls.tar.gz -C calls/SAMPLE_${i} .\n+      done\n+    >>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMzIzOQ=="}, "originalCommit": {"oid": "d24b40bb2ea03ab0ba0a07e2615948c13e66991b"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjAyMDk3OnYy", "diffSide": "RIGHT", "path": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNDoxMzozNVrOG-nu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyMjoyN1rOG-_iig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxNTg3OA==", "bodyText": "Can you explain this change? Also, why is it not in cohort mode as well?", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r468315878", "createdAt": "2020-08-11T04:13:35Z", "author": {"login": "asmirnov239"}, "path": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl", "diffHunk": "@@ -314,7 +326,7 @@ task DetermineGermlineContigPloidyCaseMode {\n             --mapping-error-rate ~{default=\"0.01\" mapping_error_rate} \\\n             --sample-psi-scale ~{default=\"0.0001\" sample_psi_scale}\n \n-        tar czf case-contig-ploidy-calls.tar.gz -C ~{output_dir_}/case-calls .\n+        tar c -C ~{output_dir_}/case-calls . | gzip -1 > case-contig-ploidy-calls.tar.gz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d24b40bb2ea03ab0ba0a07e2615948c13e66991b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwNTkzMA==", "bodyText": "Faster compression with gzip -1 I believe. This is okay in case mode since the calls tars aren't usually kept in storage except as intermediates, so the tradeoff with larger file size doesn't outweigh the cost of compressing/decompressing on VMs.", "url": "https://github.com/broadinstitute/gatk/pull/6607#discussion_r468705930", "createdAt": "2020-08-11T16:22:27Z", "author": {"login": "mwalker174"}, "path": "scripts/cnv_wdl/germline/cnv_germline_case_workflow.wdl", "diffHunk": "@@ -314,7 +326,7 @@ task DetermineGermlineContigPloidyCaseMode {\n             --mapping-error-rate ~{default=\"0.01\" mapping_error_rate} \\\n             --sample-psi-scale ~{default=\"0.0001\" sample_psi_scale}\n \n-        tar czf case-contig-ploidy-calls.tar.gz -C ~{output_dir_}/case-calls .\n+        tar c -C ~{output_dir_}/case-calls . | gzip -1 > case-contig-ploidy-calls.tar.gz", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxNTg3OA=="}, "originalCommit": {"oid": "d24b40bb2ea03ab0ba0a07e2615948c13e66991b"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 901, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}