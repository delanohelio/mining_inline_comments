{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDQwMTQ5", "number": 6696, "title": "Fix a bug where we lose an insertion immediately following a deletion\u2026", "bodyText": "Suppose we have a deletion immediately followed by an insertion (as happens after realignment when we have an insetion + MNP as shown in the igv screeshot below). At the locus immediately preceding the insertion (i.e. the end position of the deletion and the start position of the insertion), we lose this insertion, because of the following current code behavior:\na) EventMap.getOverlappingEvents() at this locus returns both the insertion and the deletion.\nb) In AssemblyBasedCallerUtils.CreateAlleleMapper(), we assign the haplotype containing both events to the spanning deletion, then break to exit the for loop that traverses overlapping events. As a result the insertion allele is assigned to no haplotypes and gets dropped.\nThe solution is to modify EventMap.getOverlappingEvents() so that in the above scenario, we only return the insertion event. We don't lose the deletion because it's found by getOverlappingReads upstream (even when the deletion has length 1). Returning the deletion here is only good for the purpose of obtaining a spanning deletion (*) allele, but if there's also an insertion there the insertion should take priority.\n(Top panel: input bam. Bottom panel: HC bamout.)", "createdAt": "2020-07-08T19:28:44Z", "url": "https://github.com/broadinstitute/gatk/pull/6696", "merged": true, "mergeCommit": {"oid": "d1d979fc535ac7b5075deb888c34e3a6512160b6"}, "closed": true, "closedAt": "2020-08-25T19:34:28Z", "author": {"login": "takutosato"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy_VgGAH2gAyNDQ2NDQwMTQ5OjI3NmY4MjFiOTU4YjgzN2Y0M2UwYzVlMWI5OWU5OWZmNTViNDIwNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCLHp4AH2gAyNDQ2NDQwMTQ5OjdjZmUyMmRlNjBhYjExYWNjZDg1Y2Y4NWExMzkzNzRkOWQ0M2RlZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "276f821b958b837f43e0c5e1b99e99ff55b4205a", "author": {"user": {"login": "takutosato", "name": "Takuto Sato"}}, "url": "https://github.com/broadinstitute/gatk/commit/276f821b958b837f43e0c5e1b99e99ff55b4205a", "committedDate": "2020-07-08T19:09:48Z", "message": "Fix a bug where we lose an insertion immediately following a deletion on the same haplotype."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTAwMjA0", "url": "https://github.com/broadinstitute/gatk/pull/6696#pullrequestreview-446100204", "createdAt": "2020-07-10T03:31:17Z", "commit": {"oid": "276f821b958b837f43e0c5e1b99e99ff55b4205a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMToxN1rOGvovBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMToxN1rOGvovBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMzY1Mw==", "bodyText": "Define eventsExpected = expectedAlt != null || expectedRef != null, then have\nif (eventsExpected) {\n   Assert. . . \n}", "url": "https://github.com/broadinstitute/gatk/pull/6696#discussion_r452603653", "createdAt": "2020-07-10T03:31:17Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/haplotype/EventMapUnitTest.java", "diffHunk": "@@ -64,6 +66,81 @@ public void testMNPs(final String refBases, final String haplotypeBases, final S\n         }\n     }\n \n+    @DataProvider(name = \"overlappingEvents\")\n+    public Object[][] makeOverlappingEventsTestCases(){\n+        /**\n+         * loc   1234567890123\n+         * ref:  AAAAAAAAAACGG--TCA\n+         * hap1:        AAA---TTTCA (CGG deletion followed by a TT insertion)\n+         * hap2:        AAA-----TCA (CGG deletion only)\n+         * hap3:        AAACGA--TCA (G->A SNP at pos 13)\n+         * hap4:        AAACGGTTTCA (TT insertion only)\n+         *                 ^ ^      (query locs)\n+         *\n+         */\n+        List<Object[]> tests = new ArrayList<>();\n+        final Allele deletionRefAllele = Allele.create(\"ACGG\", true);\n+        final Allele deletionAltAllele = Allele.create(\"A\", false);\n+        final Allele insertionRefAllele = Allele.create(\"G\", true);\n+        final Allele insertionAltAllele = Allele.create(\"GTT\", false);\n+        final Allele snpRefAllele = Allele.create(\"G\", true);\n+        final Allele snpAltAllele = Allele.create(\"A\", false);\n+\n+        // hap1\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 10, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 11, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 12, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 13, insertionRefAllele, insertionAltAllele});\n+\n+        // hap2\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 10, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 11, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 12, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 13, deletionRefAllele, deletionAltAllele});\n+\n+        // hap3\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 10, null, null});\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 11, null, null});\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 12, null, null});\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 13, snpRefAllele, snpAltAllele});\n+\n+        // hap4\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 10, null, null});\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 11, null, null});\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 12, null, null});\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 13, insertionRefAllele, insertionAltAllele});\n+\n+        return tests.toArray(new Object[][]{});\n+    }\n+\n+    @Test(dataProvider = \"overlappingEvents\")\n+    public void testGetOverlappingEvents(final String haplotypeBases, final String cigar, final int queryLoc,\n+                                         final Allele expectedRef, final Allele expectedAlt){\n+        // Parameters that are shared across test cases\n+        final String refBases = StringUtils.repeat('A', 10) + \"CGGTCA\";\n+        final int hapStartWrtRef = 7; // zero-based index into the ref array where the 0th base of the hap lines up\n+        final GenomeLoc refLoc = new UnvalidatingGenomeLoc(CHR, 0, 1, refBases.length());\n+\n+        final Haplotype hap = new Haplotype(haplotypeBases.getBytes(), false, hapStartWrtRef, TextCigarCodec.decode(cigar));\n+        final EventMap eventMap = new EventMap(hap, refBases.getBytes(), refLoc, NAME, 1);\n+\n+        // final List<VariantContext> overlappingEvents = eventMap.getOverlappingEvents(queryLoc);\n+        final List<VariantContext> overlappingEvents = eventMap.getOverlappingEventsLegacy(queryLoc);\n+\n+        final boolean noEventsExpected = expectedAlt == null && expectedRef == null;\n+        Assert.assertEquals(overlappingEvents.size(), noEventsExpected ? 0 : 1);\n+\n+        if (noEventsExpected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276f821b958b837f43e0c5e1b99e99ff55b4205a"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTAwNzM3", "url": "https://github.com/broadinstitute/gatk/pull/6696#pullrequestreview-446100737", "createdAt": "2020-07-10T03:33:38Z", "commit": {"oid": "276f821b958b837f43e0c5e1b99e99ff55b4205a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81d1281e79eaee6fe618a435e56721f3a6a617b4", "author": {"user": {"login": "takutosato", "name": "Takuto Sato"}}, "url": "https://github.com/broadinstitute/gatk/commit/81d1281e79eaee6fe618a435e56721f3a6a617b4", "committedDate": "2020-07-10T20:38:17Z", "message": "review edit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766d01db9109d8e32357b2a076c39185fdd25143", "author": {"user": {"login": "takutosato", "name": "Takuto Sato"}}, "url": "https://github.com/broadinstitute/gatk/commit/766d01db9109d8e32357b2a076c39185fdd25143", "committedDate": "2020-07-10T20:39:20Z", "message": "remove ws"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b05792c9ee7b3a8a95b21299de762aaede7447e1", "author": {"user": {"login": "takutosato", "name": "Takuto Sato"}}, "url": "https://github.com/broadinstitute/gatk/commit/b05792c9ee7b3a8a95b21299de762aaede7447e1", "committedDate": "2020-08-24T23:14:55Z", "message": "replaced an integration test with a unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cfe22de60ab11accd85cf85a139374d9d43ded0", "author": {"user": {"login": "takutosato", "name": "Takuto Sato"}}, "url": "https://github.com/broadinstitute/gatk/commit/7cfe22de60ab11accd85cf85a139374d9d43ded0", "committedDate": "2020-08-24T23:22:24Z", "message": "use ploidy instead of originalGT.size to avoid NPE"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2669, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}