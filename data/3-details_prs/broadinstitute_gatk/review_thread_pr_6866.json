{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODU4MTAx", "number": 6866, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxMTowNFrOErMvXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToxMDozOVrOFNX3gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzMyOTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxMTowNVrOHd1WwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxMTowNVrOHd1WwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NDkyOA==", "bodyText": "This return code and exception are specific to the gCNV python code, but changes to this class affect all GATK script code (even R). It would be better to add a new entry point to this class, and to PythonScriptExecutor, that returns the ProcessOutput object. Then the tool can call that, and interpret and handle the python return code locally.\nThe  ProcessOutput object is already created in executeCuratedArgs, its just not currently exposed. Just factor out the executeCuratedArgs code into a new private method that returns the ProcessOutput, and call the new method from both the existing executeCuratedArgs method and from the new entry point. Then add a new method in PythonScriptExecutor that calls the new 'ScriptExecutormethod returns theProcessOutput`.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r501044928", "createdAt": "2020-10-07T14:11:05Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "diffHunk": "@@ -121,6 +121,9 @@ protected boolean executeCuratedArgs(final String[] commandLineArguments) {\n                     // process received SIGKILL, which might indicate OOM\n                     message.append(\"\\nThe exit code indicates that the process was terminated. This may mean the process requires additional memory.\\n\");\n                 }\n+                if (exitValue == 239) {\n+                    throw new RestartScriptExecutorException(\"Script returned an error code indicating that it needs to be restarted with new random seed. \\n\");\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d2c840b8a1aecb04ca0d9ef892df2a76e6f08b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQyNTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/RestartScriptExecutorException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDozMDoyN1rOHd2TIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDozMDoyN1rOHd2TIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MDM4NA==", "bodyText": "I think this exception is unnecessary - see my comments on ScriptExecutor.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r501060384", "createdAt": "2020-10-07T14:30:27Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/RestartScriptExecutorException.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.broadinstitute.hellbender.utils.runtime;\n+\n+/**\n+ * Python script execution exception that indicates that python script needs to be restarted.\n+ */\n+public class RestartScriptExecutorException extends ScriptExecutorException {\n+\n+    private static final long serialVersionUID = 0L;\n+\n+    public RestartScriptExecutorException(String msg) {\n+        super(msg);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1d2c840b8a1aecb04ca0d9ef892df2a76e6f08b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTM5ODcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxMTo0N1rOHsVyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxMTo0N1rOHsVyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1NjM1Mw==", "bodyText": "These are constants so they should be in all caps, and static.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516256353", "createdAt": "2020-11-02T21:11:47Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -289,6 +291,9 @@\n     private SimpleIntervalCollection specifiedIntervals;\n     private File specifiedIntervalsFile;\n \n+    private final int randomGCNVSeed = 1984; // Starting gCNV random seed\n+    private final int gcnvRestartExitCode = 239; // Default exit code output by gCNV python indicating divergence error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQwNjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxNDozOFrOHsV3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1ODozOVrOIA-paQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1NzYzNg==", "bodyText": "Although true, it might be more reassuring to say something more specific like \"Inference failed to converge and will be restarted once with a different random seed\".", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516257636", "createdAt": "2020-11-02T21:14:38Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -305,10 +310,30 @@ protected Object doWork() {\n         //count files for these intervals to temporary files\n         final List<File> intervalSubsetReadCountFiles = writeIntervalSubsetReadCountFiles();\n \n+        final String script = (runMode == RunMode.COHORT) ? COHORT_DENOISING_CALLING_PYTHON_SCRIPT : CASE_SAMPLE_CALLING_PYTHON_SCRIPT;\n+\n         //call python inference code\n-        final boolean pythonReturnCode = executeGermlineCNVCallerPythonScript(intervalSubsetReadCountFiles);\n+        final PythonScriptExecutor executor = new PythonScriptExecutor(true);\n+        ProcessOutput pythonProcessOutput = executor.executeScriptAndGetOutput(\n+                new Resource(script, GermlineCNVCaller.class),\n+                null,\n+                composePythonArguments(intervalSubsetReadCountFiles, randomGCNVSeed));\n+        if (pythonProcessOutput.getExitValue() != 0) {\n+            // We restart once if the inference diverged\n+            if (pythonProcessOutput.getExitValue() == gcnvRestartExitCode) {\n+                final Random generator = new Random(randomGCNVSeed);\n+                final int nextGCNVSeed = generator.nextInt();\n+                logger.info(\"The inference ran into a NaN error and will be restarted one more time.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NzMyMQ==", "bodyText": "Yes that's better I agree. Done", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r537897321", "createdAt": "2020-12-07T22:58:39Z", "author": {"login": "asmirnov239"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -305,10 +310,30 @@ protected Object doWork() {\n         //count files for these intervals to temporary files\n         final List<File> intervalSubsetReadCountFiles = writeIntervalSubsetReadCountFiles();\n \n+        final String script = (runMode == RunMode.COHORT) ? COHORT_DENOISING_CALLING_PYTHON_SCRIPT : CASE_SAMPLE_CALLING_PYTHON_SCRIPT;\n+\n         //call python inference code\n-        final boolean pythonReturnCode = executeGermlineCNVCallerPythonScript(intervalSubsetReadCountFiles);\n+        final PythonScriptExecutor executor = new PythonScriptExecutor(true);\n+        ProcessOutput pythonProcessOutput = executor.executeScriptAndGetOutput(\n+                new Resource(script, GermlineCNVCaller.class),\n+                null,\n+                composePythonArguments(intervalSubsetReadCountFiles, randomGCNVSeed));\n+        if (pythonProcessOutput.getExitValue() != 0) {\n+            // We restart once if the inference diverged\n+            if (pythonProcessOutput.getExitValue() == gcnvRestartExitCode) {\n+                final Random generator = new Random(randomGCNVSeed);\n+                final int nextGCNVSeed = generator.nextInt();\n+                logger.info(\"The inference ran into a NaN error and will be restarted one more time.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1NzYzNg=="}, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQ4NjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTozOTo1OVrOHsWndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTozOTo1OVrOHsWndA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2OTk0MA==", "bodyText": "codescriptArgs -> code or script", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516269940", "createdAt": "2020-11-02T21:39:59Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -105,12 +104,31 @@ public boolean executeModule(final String moduleName, final List<String> pythonP\n         return executeArgs(args);\n     }\n \n+    /**\n+     * Execute a python script from a Resource file and get process output.\n+     *\n+     * @param scriptResource {@link Resource} for the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python codescriptArgs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQ4OTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0MDo0M1rOHsWoxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMzoxMFrOIA-xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MDI3OQ==", "bodyText": "this is duplicated so not sure if it was intentional ? codescriptArgs -> code ?", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516270279", "createdAt": "2020-11-02T21:40:43Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -105,12 +104,31 @@ public boolean executeModule(final String moduleName, final List<String> pythonP\n         return executeArgs(args);\n     }\n \n+    /**\n+     * Execute a python script from a Resource file and get process output.\n+     *\n+     * @param scriptResource {@link Resource} for the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python codescriptArgs\n+     * @return process output\n+     */\n+    public ProcessOutput executeScriptAndGetOutput(final Resource scriptResource, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+        Utils.nonNull(scriptResource, \"script resource cannot be null\");\n+        // this File is automatically scheduled for deletion on exit\n+        final File tempResourceFile = IOUtils.writeTempResource(scriptResource);\n+        try {\n+            return executeScriptAndGetOutput(tempResourceFile.getAbsolutePath(), pythonProcessArgs, scriptArgs);\n+        } finally {\n+            FileUtils.deleteQuietly(tempResourceFile);\n+        }\n+    }\n+\n     /**\n      * Execute a python script from a Resource file.\n      *\n      * @param scriptResource {@link Resource} for the script to execute\n      * @param pythonProcessArgs args to be passed to the python process\n-     * @param scriptArgs args to be passed to the python code\n+     * @param scriptArgs args to be passed to the python codescriptArgs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTQ2Ng==", "bodyText": "Oops, this was an accident", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r537899466", "createdAt": "2020-12-07T23:03:10Z", "author": {"login": "asmirnov239"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -105,12 +104,31 @@ public boolean executeModule(final String moduleName, final List<String> pythonP\n         return executeArgs(args);\n     }\n \n+    /**\n+     * Execute a python script from a Resource file and get process output.\n+     *\n+     * @param scriptResource {@link Resource} for the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python codescriptArgs\n+     * @return process output\n+     */\n+    public ProcessOutput executeScriptAndGetOutput(final Resource scriptResource, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+        Utils.nonNull(scriptResource, \"script resource cannot be null\");\n+        // this File is automatically scheduled for deletion on exit\n+        final File tempResourceFile = IOUtils.writeTempResource(scriptResource);\n+        try {\n+            return executeScriptAndGetOutput(tempResourceFile.getAbsolutePath(), pythonProcessArgs, scriptArgs);\n+        } finally {\n+            FileUtils.deleteQuietly(tempResourceFile);\n+        }\n+    }\n+\n     /**\n      * Execute a python script from a Resource file.\n      *\n      * @param scriptResource {@link Resource} for the script to execute\n      * @param pythonProcessArgs args to be passed to the python process\n-     * @param scriptArgs args to be passed to the python code\n+     * @param scriptArgs args to be passed to the python codescriptArgs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MDI3OQ=="}, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQ5NTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0Mjo0NFrOHsWsdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0Mjo0NFrOHsWsdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MTIyMg==", "bodyText": "compile -> builds", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516271222", "createdAt": "2020-11-02T21:42:44Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -125,14 +143,9 @@ public boolean executeScript(final Resource scriptResource, final List<String> p\n     }\n \n     /**\n-     * Execute a python script.\n-     *\n-     * @param scriptName full path name of the script to execute\n-     * @param pythonProcessArgs args to be passed to the python process\n-     * @param scriptArgs args to be passed to the python code\n-     * @return true if the command succeeds\n+     * Auxiliary method that validates and compile python command line argument list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTUwMDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0NDoyMFrOHsWvjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0NDoyMFrOHsWvjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjAxNA==", "bodyText": "compileCuratedCommandArgs -> composeCuratedCommandArgs. Also canbe moved to the end after the public methods.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516272014", "createdAt": "2020-11-02T21:44:20Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -148,22 +161,66 @@ public boolean executeScript(final String scriptName, final List<String> pythonP\n         if (scriptArgs != null) {\n             args.addAll(scriptArgs);\n         }\n-        return executeArgs(args);\n+        return args;\n     }\n \n     /**\n-     * Executes the Python executor using the values in {@code rawArgs}\n+     * Execute a python script.\n      *\n-     * @param rawArgs raw command line arguments to be passed to the Python process\n-     * @return true if the command succeeds, otherwise false\n+     * @param scriptName full path name of the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python code\n+     * @return true if the command succeeds\n      */\n-    public boolean executeArgs(final List<String> rawArgs) {\n+    public ProcessOutput executeScriptAndGetOutput(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+        final List<String> args = validateAndBuildCommand(scriptName, pythonProcessArgs, scriptArgs);\n+        return executeArgsAndGetOutput(args);\n+    }\n+\n+    /**\n+     * Execute a python script.\n+     *\n+     * @param scriptName full path name of the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python code\n+     * @return true if the command succeeds\n+     */\n+    public boolean executeScript(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+        final List<String> args = validateAndBuildCommand(scriptName, pythonProcessArgs, scriptArgs);\n+        return executeArgs(args);\n+    }\n+\n+    /**\n+     * Auxiliary method to initialize and populate curatedCommandLineArgs\n+     */\n+    private void compileCuratedCommandArgs(final List<String> rawArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTU0OTY5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjowMDoxNFrOHsXNaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzozMTowNFrOIA_uCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3OTY1OQ==", "bodyText": "Can this (239) value be replaced with a single constant with an all caps name that matches the one in the Java code, with a comment saying they must be kept in sync.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516279659", "createdAt": "2020-11-02T22:00:14Z", "author": {"login": "cmnbroad"}, "path": "src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py", "diffHunk": "@@ -213,9 +214,14 @@ def update_args_dict_from_saved_model(input_model_path: str,\n         logger.info(\"A saved optimizer state was provided to use as starting point...\")\n         task.fancy_opt.load(args.input_opt_path)\n \n-    # go!\n-    task.engage()\n-    task.disengage()\n+    try:\n+        # go!\n+        task.engage()\n+        task.disengage()\n+    except gcnvkernel.ConvergenceError as err:\n+        logger.info(err.message)\n+        sys.exit(239) # Pass an exit code to Java side indicating restart is needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDg4OQ==", "bodyText": "Definitely. I added it to gcnvkernel.io_const and kept it lower case to stick with the convention there", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r537914889", "createdAt": "2020-12-07T23:31:04Z", "author": {"login": "asmirnov239"}, "path": "src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py", "diffHunk": "@@ -213,9 +214,14 @@ def update_args_dict_from_saved_model(input_model_path: str,\n         logger.info(\"A saved optimizer state was provided to use as starting point...\")\n         task.fancy_opt.load(args.input_opt_path)\n \n-    # go!\n-    task.engage()\n-    task.disengage()\n+    try:\n+        # go!\n+        task.engage()\n+        task.disengage()\n+    except gcnvkernel.ConvergenceError as err:\n+        logger.info(err.message)\n+        sys.exit(239) # Pass an exit code to Java side indicating restart is needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3OTY1OQ=="}, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTU4ODk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoxMzozMlrOHsXlCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0Njo1NVrOIBAIYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4NTcwNQ==", "bodyText": "Do you want to update the tool doc and mention the retry process, in case the user sees the log messages ?", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516285705", "createdAt": "2020-11-02T22:13:32Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -289,6 +291,9 @@\n     private SimpleIntervalCollection specifiedIntervals;\n     private File specifiedIntervalsFile;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMTYzNA==", "bodyText": "Done!", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r537921634", "createdAt": "2020-12-07T23:46:55Z", "author": {"login": "asmirnov239"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -289,6 +291,9 @@\n     private SimpleIntervalCollection specifiedIntervals;\n     private File specifiedIntervalsFile;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4NTcwNQ=="}, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTYwODEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoxOToyNlrOHsXwCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTowOTo0N1rOHtcbzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4ODUyMg==", "bodyText": "Now that you have getScriptException, you might as well use it here too, and display the exitcode/reason for the second failure, and also detect exit code 239 as well with a message saying that inference failed twice.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516288522", "createdAt": "2020-11-02T22:19:26Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -305,10 +310,30 @@ protected Object doWork() {\n         //count files for these intervals to temporary files\n         final List<File> intervalSubsetReadCountFiles = writeIntervalSubsetReadCountFiles();\n \n+        final String script = (runMode == RunMode.COHORT) ? COHORT_DENOISING_CALLING_PYTHON_SCRIPT : CASE_SAMPLE_CALLING_PYTHON_SCRIPT;\n+\n         //call python inference code\n-        final boolean pythonReturnCode = executeGermlineCNVCallerPythonScript(intervalSubsetReadCountFiles);\n+        final PythonScriptExecutor executor = new PythonScriptExecutor(true);\n+        ProcessOutput pythonProcessOutput = executor.executeScriptAndGetOutput(\n+                new Resource(script, GermlineCNVCaller.class),\n+                null,\n+                composePythonArguments(intervalSubsetReadCountFiles, randomGCNVSeed));\n+        if (pythonProcessOutput.getExitValue() != 0) {\n+            // We restart once if the inference diverged\n+            if (pythonProcessOutput.getExitValue() == gcnvRestartExitCode) {\n+                final Random generator = new Random(randomGCNVSeed);\n+                final int nextGCNVSeed = generator.nextInt();\n+                logger.info(\"The inference ran into a NaN error and will be restarted one more time.\");\n+                pythonProcessOutput = executor.executeScriptAndGetOutput(\n+                        new Resource(script, GermlineCNVCaller.class),\n+                        null,\n+                        composePythonArguments(intervalSubsetReadCountFiles, nextGCNVSeed));\n+            } else {\n+                throw executor.getScriptException(executor.getExceptionMessageFromScriptError(pythonProcessOutput));\n+            }\n+        }\n \n-        if (!pythonReturnCode) {\n+        if (pythonProcessOutput.getExitValue() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQxMzgzNw==", "bodyText": "Also, can this message offer any recommended fallback/alternative for the user when the 239 failure happens twice ?", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r517413837", "createdAt": "2020-11-04T15:09:47Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/GermlineCNVCaller.java", "diffHunk": "@@ -305,10 +310,30 @@ protected Object doWork() {\n         //count files for these intervals to temporary files\n         final List<File> intervalSubsetReadCountFiles = writeIntervalSubsetReadCountFiles();\n \n+        final String script = (runMode == RunMode.COHORT) ? COHORT_DENOISING_CALLING_PYTHON_SCRIPT : CASE_SAMPLE_CALLING_PYTHON_SCRIPT;\n+\n         //call python inference code\n-        final boolean pythonReturnCode = executeGermlineCNVCallerPythonScript(intervalSubsetReadCountFiles);\n+        final PythonScriptExecutor executor = new PythonScriptExecutor(true);\n+        ProcessOutput pythonProcessOutput = executor.executeScriptAndGetOutput(\n+                new Resource(script, GermlineCNVCaller.class),\n+                null,\n+                composePythonArguments(intervalSubsetReadCountFiles, randomGCNVSeed));\n+        if (pythonProcessOutput.getExitValue() != 0) {\n+            // We restart once if the inference diverged\n+            if (pythonProcessOutput.getExitValue() == gcnvRestartExitCode) {\n+                final Random generator = new Random(randomGCNVSeed);\n+                final int nextGCNVSeed = generator.nextInt();\n+                logger.info(\"The inference ran into a NaN error and will be restarted one more time.\");\n+                pythonProcessOutput = executor.executeScriptAndGetOutput(\n+                        new Resource(script, GermlineCNVCaller.class),\n+                        null,\n+                        composePythonArguments(intervalSubsetReadCountFiles, nextGCNVSeed));\n+            } else {\n+                throw executor.getScriptException(executor.getExceptionMessageFromScriptError(pythonProcessOutput));\n+            }\n+        }\n \n-        if (!pythonReturnCode) {\n+        if (pythonProcessOutput.getExitValue() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4ODUyMg=="}, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTYxNjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoyMTo0MlrOHsX1DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDoyNjoxNVrOIB8gdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4OTgwNQ==", "bodyText": "The part of this method that displays ProcessOutput state can be factored out into a method on ProcessOutput - maybe called something like getStatusSummary since it doesn't really require any error precondition. That method can include the 137 check/message, and should have a parameter that says whether to include stdout/stderr (which might be a lot of text for an exception). Then this method can call that.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516289805", "createdAt": "2020-11-02T22:21:42Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "diffHunk": "@@ -72,62 +74,52 @@ protected void executableMissing() {\n     public abstract ScriptExecutorException getScriptException(final String message);\n \n     /**\n-     * Execute the script represented by the arguments in {@code commandLineArguments}.\n+     * Inspect process output exit code and construct a corresponding exception message.\n      *\n-     * @param commandLineArguments\n-     * @return true if the command executed successfully, otherwise false\n+     * @param po script process output\n+     * @return script exception message\n      */\n-    protected boolean executeCuratedArgs(final String[] commandLineArguments) {\n-        if (!externalExecutableExists()) {\n-            if (!ignoreExceptions) {\n-                executableMissing();\n-            } else {\n-                logger.warn(\"Skipping: \" + getApproximateCommandLine());\n-                return false;\n-            }\n+    public String getExceptionMessageFromScriptError(final ProcessOutput po) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMDgzOA==", "bodyText": "I like that. Done!", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r538910838", "createdAt": "2020-12-09T00:26:15Z", "author": {"login": "asmirnov239"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "diffHunk": "@@ -72,62 +74,52 @@ protected void executableMissing() {\n     public abstract ScriptExecutorException getScriptException(final String message);\n \n     /**\n-     * Execute the script represented by the arguments in {@code commandLineArguments}.\n+     * Inspect process output exit code and construct a corresponding exception message.\n      *\n-     * @param commandLineArguments\n-     * @return true if the command executed successfully, otherwise false\n+     * @param po script process output\n+     * @return script exception message\n      */\n-    protected boolean executeCuratedArgs(final String[] commandLineArguments) {\n-        if (!externalExecutableExists()) {\n-            if (!ignoreExceptions) {\n-                executableMissing();\n-            } else {\n-                logger.warn(\"Skipping: \" + getApproximateCommandLine());\n-                return false;\n-            }\n+    public String getExceptionMessageFromScriptError(final ProcessOutput po) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4OTgwNQ=="}, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTYyMDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoyMjoyN1rOHsX4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoyMjoyN1rOHsX4DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI5MDU3Mg==", "bodyText": "References to commandLineArgs in this class need to be protected with null guards since they're not final and may not have been set.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r516290572", "createdAt": "2020-11-02T22:22:27Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/runtime/ScriptExecutor.java", "diffHunk": "@@ -72,62 +74,52 @@ protected void executableMissing() {\n     public abstract ScriptExecutorException getScriptException(final String message);\n \n     /**\n-     * Execute the script represented by the arguments in {@code commandLineArguments}.\n+     * Inspect process output exit code and construct a corresponding exception message.\n      *\n-     * @param commandLineArguments\n-     * @return true if the command executed successfully, otherwise false\n+     * @param po script process output\n+     * @return script exception message\n      */\n-    protected boolean executeCuratedArgs(final String[] commandLineArguments) {\n-        if (!externalExecutableExists()) {\n-            if (!ignoreExceptions) {\n-                executableMissing();\n-            } else {\n-                logger.warn(\"Skipping: \" + getApproximateCommandLine());\n-                return false;\n-            }\n+    public String getExceptionMessageFromScriptError(final ProcessOutput po) {\n+        Utils.nonNull(po, \"process output cannot be null\");\n+        final int exitValue = po.getExitValue();\n+        final StringBuilder message = new StringBuilder();\n+\n+        message.append(\n+                String.format(\"\\n%s exited with %d\\nCommand Line: %s\",\n+                        externalScriptExecutableName,\n+                        exitValue,\n+                        String.join(\" \", commandLineArgs)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjk0MTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToxOToyMlrOHtc2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToxOToyMlrOHtc2mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyMDY5OA==", "bodyText": "private methods can be moved to the end of the file after the public methods", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r517420698", "createdAt": "2020-11-04T15:19:22Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -125,14 +143,9 @@ public boolean executeScript(final Resource scriptResource, final List<String> p\n     }\n \n     /**\n-     * Execute a python script.\n-     *\n-     * @param scriptName full path name of the script to execute\n-     * @param pythonProcessArgs args to be passed to the python process\n-     * @param scriptArgs args to be passed to the python code\n-     * @return true if the command succeeds\n+     * Auxiliary method that validates and compile python command line argument list\n      */\n-    public boolean executeScript(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+    private List<String> validateAndBuildCommand(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjk0Nzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToyMDozN1rOHtc6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNToyMDozN1rOHtc6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyMTYyNQ==", "bodyText": "this javadoc needs to be updated (return value)", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r517421625", "createdAt": "2020-11-04T15:20:37Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -148,22 +161,66 @@ public boolean executeScript(final String scriptName, final List<String> pythonP\n         if (scriptArgs != null) {\n             args.addAll(scriptArgs);\n         }\n-        return executeArgs(args);\n+        return args;\n     }\n \n     /**\n-     * Executes the Python executor using the values in {@code rawArgs}\n+     * Execute a python script.\n      *\n-     * @param rawArgs raw command line arguments to be passed to the Python process\n-     * @return true if the command succeeds, otherwise false\n+     * @param scriptName full path name of the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python code\n+     * @return true if the command succeeds\n      */\n-    public boolean executeArgs(final List<String> rawArgs) {\n+    public ProcessOutput executeScriptAndGetOutput(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+        final List<String> args = validateAndBuildCommand(scriptName, pythonProcessArgs, scriptArgs);\n+        return executeArgsAndGetOutput(args);\n+    }\n+\n+    /**\n+     * Execute a python script.\n+     *\n+     * @param scriptName full path name of the script to execute\n+     * @param pythonProcessArgs args to be passed to the python process\n+     * @param scriptArgs args to be passed to the python code\n+     * @return true if the command succeeds\n+     */\n+    public boolean executeScript(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {\n+        final List<String> args = validateAndBuildCommand(scriptName, pythonProcessArgs, scriptArgs);\n+        return executeArgs(args);\n+    }\n+\n+    /**\n+     * Auxiliary method to initialize and populate curatedCommandLineArgs\n+     */\n+    private void compileCuratedCommandArgs(final List<String> rawArgs) {\n         Utils.nonNull(rawArgs, \"Raw args cannot be null\");\n \n         // executor name first, followed by rawArgs\n         curatedCommandLineArgs.clear();\n         curatedCommandLineArgs.add(externalScriptExecutableName);\n         curatedCommandLineArgs.addAll(rawArgs);\n+    }\n+\n+    /**\n+     * Executes the Python executor using the values in {@code rawArgs}\n+     *\n+     * @param rawArgs raw command line arguments to be passed to the Python process\n+     * @return true if the command succeeds, otherwise false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aeb7b0c023398e07e37b202db1ed2c5c7f1dfdb"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTY2ODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToxMDozOVrOIRjamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOToxMDozOVrOIRjamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI3Njk1Mw==", "bodyText": "This method can be static.", "url": "https://github.com/broadinstitute/gatk/pull/6866#discussion_r555276953", "createdAt": "2021-01-11T19:10:39Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/python/PythonScriptExecutor.java", "diffHunk": "@@ -205,4 +228,38 @@ public static void checkPythonEnvironmentForPackage(final String packageName) {\n             throw new RuntimeException(errorMessage, e);\n         }\n     }\n+\n+    /**\n+     * Auxiliary method that validates and builds python command line argument list\n+     */\n+    private List<String> validateAndBuildCommand(final String scriptName, final List<String> pythonProcessArgs, final List<String> scriptArgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f99af80bd0217eb8f8d006b6218140d5b92fe7e5"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 809, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}