{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDQ1MDg0", "number": 6464, "title": "remove duplicate copy of prefetching code", "bodyText": "Removing our copy of the prefetching code and using the copy bundled with the nio library instead.  Adding two new methods to BucketUtils to make it less verbose to create them and to re-wrap an IOException into the expected GATKException.", "createdAt": "2020-02-21T19:49:56Z", "url": "https://github.com/broadinstitute/gatk/pull/6464", "merged": true, "mergeCommit": {"oid": "b540e6f453831cb00a42ec4954c15e1de4090fbb"}, "closed": true, "closedAt": "2020-03-02T21:43:10Z", "author": {"login": "lbergelson"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJRAh_AFqTM2NjgzMzUyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJz0POgBqjMwODk1NTU2NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODMzNTI0", "url": "https://github.com/broadinstitute/gatk/pull/6464#pullrequestreview-366833524", "createdAt": "2020-03-01T03:57:29Z", "commit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1NzoyOVrOFwMH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1OTo0M1rOFwMIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw==", "bodyText": "Where does the name is come from?  What about sbc, channel, or rawChannel?", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074603", "createdAt": "2020-03-01T03:57:29Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the\n+     * original channel.\n+     * @param cloudPrefetchBuffer the prefetcher buffer size in MB\n+     */\n+    public static Function<SeekableByteChannel, SeekableByteChannel> getPrefetchingWrapper(final int cloudPrefetchBuffer) {\n+        return cloudPrefetchBuffer > 0 ? is -> addPrefetcher(cloudPrefetchBuffer, is) : Utils.identityFunction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYyMQ==", "bodyText": "\"it's\" with apostrophe", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074621", "createdAt": "2020-03-01T03:57:59Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY1Mw==", "bodyText": "final arguments", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074653", "createdAt": "2020-03-01T03:58:42Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY3Mg==", "bodyText": "I think you can splurge and make this BUFFER_SIZE_MB", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074672", "createdAt": "2020-03-01T03:59:14Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -35,7 +35,7 @@\n     private final boolean removeHeader = true;\n \n     class ReadsIterator implements CloseableIterator<SAMRecord> {\n-        private final static int BUFSIZE = 200 * 1024 * 1024;\n+        private final static int BUFSIZE_MB = 200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY4MA==", "bodyText": "It can't hurt to make this channel.", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074680", "createdAt": "2020-03-01T03:59:43Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -47,8 +47,7 @@ public ReadsIterator() throws IOException {\n             SeekableStream indexInMemory = new ByteArraySeekableStream(indexData);\n             // set high-level retries to deal with servers that might be temporarily overloaded\n             // while we're reading a very long file from them.\n-            SeekableByteChannelPrefetcher chan = new SeekableByteChannelPrefetcher(\n-                Files.newByteChannel(fpath), BUFSIZE);\n+            SeekableByteChannel chan = BucketUtils.addPrefetcher( BUFSIZE_MB, Files.newByteChannel(fpath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba1102928bc10a0ff65f10d54a8688fdf81a66a", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/4ba1102928bc10a0ff65f10d54a8688fdf81a66a", "committedDate": "2020-03-02T19:10:30Z", "message": "removing our copy of the prefetcher and using the version in the NIO library directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ca063a36ce58408825e93fa6cae6eb9769a8a4", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/c5ca063a36ce58408825e93fa6cae6eb9769a8a4", "committedDate": "2020-03-02T19:10:30Z", "message": "Adding new methods to BucketUtils to make getting a prefetcher less verbose."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "committedDate": "2020-03-02T19:10:30Z", "message": "respond to comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/f30f5b42bb908a24fbd54374de10e99340ce6ac2", "committedDate": "2020-02-21T19:48:05Z", "message": "Adding new methods to BucketUtils to make getting a prefetcher less verbose."}, "afterCommit": {"oid": "ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/ee9f0b4e40f5a5aaec30d1e7dcd3c5e70d6c0346", "committedDate": "2020-03-02T19:10:30Z", "message": "respond to comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2770, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}