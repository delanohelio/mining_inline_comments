{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NDUwMjM5", "number": 6937, "title": "Add physical phasing information to spanning deletion alleles", "bodyText": "Addresses #5651\nAdds physical phasing information to most pairs of deletions and sites that contain spanned SNPs and are genotyped with * alleles.\nUnder the model assumed by this code, the phaseGT in the code and PGT format field on each genotype can be interpreted as being an indicator of which of the two phased haplotypes in the sample contains the site-specific alternate allele at the site (ie. excluding * which represents variation that beings upstream of the current variant. NB that this results in cases where PGT is not the same as the phased GT field. For example, in the case of a spanned SNP site with REF allele A and alt alleles C and *, GT may be set to 1|2 to represent the spanned SNP, while PGT would be set to 1|0 to represent the fact that it is the first haplotype in the pair of phased haplotypes that contains the site-specific alt allele (in this case C). If reviewers agree with this interpretation, I think we should create a new ticket to clarify documentation around the PGT and PID tags to reflect it.\nAfter discussions with @ldgauthier I believe that there may be downstream issues in preserving phasing after passing gVCFs through CombineGVCFs, GenomicsDBImport, and/or GenotypeGVCFs, especially if the gVCFs are emitted without GT fields. In that case, GenotypeGVCFs should probably have logic to reconstruct the phased genotype for each sample based on the PGT and PID tags when possible. I will create a new ticket describing the issue.\nThere still may be cases where HaplotypeCaller does not emit phasing information for spanning deletions due to the presence of extra haplotypes that contradict diploid phasing, as in #6845. A fix to that issue would likely reduce the number of those cases.\nThe integration test result file src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/withOxoGReadCounts.vcf does not have any changes that have to do with this PR -- it was automatically updated by GenotypeGVCFsIntegrationTest, which included some new jitter in QUAL scores as described in #6859, but never got checked in with that PR. I figure that it's best to update it now so that the results reflect the current expected behavior of the tool.", "createdAt": "2020-11-04T15:12:38Z", "url": "https://github.com/broadinstitute/gatk/pull/6937", "merged": true, "mergeCommit": {"oid": "44a560e913a245cc444dfff21efc68e4bcb47715"}, "closed": true, "closedAt": "2020-12-11T17:35:51Z", "author": {"login": "cwhelan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbQBy9AFqTUyNzQwNjgyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlKs3EgFqTU1MDI2MDI0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDA2ODIz", "url": "https://github.com/broadinstitute/gatk/pull/6937#pullrequestreview-527406823", "createdAt": "2020-11-10T16:53:06Z", "commit": {"oid": "6d161736d534a3b468e5054a5415c6784d632578"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1MzowNlrOHwl_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToxMTozN1rOHwvxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNjA2NA==", "bodyText": "I'm mildly surprised that htsjdk will generate .|., but I don't object.  On the whole the PGT makes this extended combined GVCF format so much easier for me to parse visually.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r520716064", "createdAt": "2020-11-10T16:53:06Z", "author": {"login": "ldgauthier"}, "path": "src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/newMQcalc.combined.g.vcf", "diffHunk": "@@ -7792,23 +7792,23 @@\n 20\t10068151\t.\tA\t<NON_REF>\t.\t.\tEND=10068154\tGT:DP:GQ:MIN_DP:PL\t./.:29:63:28:0,63,945\t./.:31:57:30:0,57,855\n 20\t10068155\t.\tA\t<NON_REF>\t.\t.\t.\tGT:DP:GQ:MIN_DP:PL\t./.:29:63:28:0,63,945\t./.:30:47:30:0,47,863\n 20\t10068156\t.\tA\t<NON_REF>\t.\t.\tEND=10068157\tGT:DP:GQ:MIN_DP:PL\t./.:27:57:27:0,57,855\t./.:34:51:33:0,51,765\n-20\t10068158\t.\tGTGTATATATATA\tG,<NON_REF>\t.\t.\tBaseQRankSum=-8.420e-01;DP=59;ExcessHet=3.01;MQRankSum=0.328;RAW_MQandDP=89764,28;ReadPosRankSum=0.524\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:3,4,0:7:57:.:105,0,57,114,69,183:0,3,2,2\t./.:.:31:54:31:0,54,810,54,810,810\n-20\t10068159\t.\tT\t*,<NON_REF>\t.\t.\tDP=60\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:3,4,0:7:57:.:105,0,57,114,69,183:0,3,2,2\t./.:.:33:45:32:0,45,675,45,675,675\n-20\t10068160\t.\tGTATATATATATGTA\tG,*,<NON_REF>\t.\t.\tDP=64;ExcessHet=3.01;RAW_MQandDP=101405,32\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,2,4,0:6:53:.:706,158,131,98,0,53,489,171,104,458:0,0,2,4\t./.:.:33:45:32:0,45,675,45,675,675,45,675,675,675\n-20\t10068161\t.\tT\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:32:6:31:0,6,90,6,90,90\n-20\t10068162\t.\tA\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:32:6:31:0,6,90,6,90,90\n-20\t10068163\t.\tT\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:32:6:31:0,6,90,6,90,90\n-20\t10068164\t.\tA\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:32:6:31:0,6,90,6,90,90\n-20\t10068165\t.\tT\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:32:6:31:0,6,90,6,90,90\n-20\t10068166\t.\tATATATG\tA,*,<NON_REF>\t.\t.\tBaseQRankSum=-9.800e-01;ClippingRankSum=0.00;DP=57;ExcessHet=3.01;MQRankSum=0.00;RAW_MQandDP=88000,25;ReadPosRankSum=-6.600e-01\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,0,4,0:6:53:.:.:706,489,458,98,104,53,489,458,104,458:.:0,0,2,4\t./.:2,9,0,0:11:22:0|1:10068166_ATATATG_A:218,0,22,224,49,273,224,49,273,273:10068166:2,0,3,6\n-20\t10068167\t.\tT\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,4,0:6:53:.:.:706,98,53,489,104,458:.:0,0,2,4\t./.:2,9,0:11:22:0|1:10068166_ATATATG_A:218,0,22,224,49,273:10068166:2,0,3,6\n-20\t10068168\t.\tATATG\tA,*,<NON_REF>\t.\t.\tBaseQRankSum=0.447;ClippingRankSum=0.00;DP=57;ExcessHet=3.01;MQRankSum=0.00;RAW_MQandDP=88000,25;ReadPosRankSum=0.660\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,0,4,0:6:53:.:.:706,489,458,98,104,53,489,458,104,458:.:0,0,2,4\t./.:9,2,0,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273,49,224,273,273:10068166:3,6,2,0\n-20\t10068169\t.\tT\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,4,0:6:53:.:.:706,98,53,489,104,458:.:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n-20\t10068170\t.\tA\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,4,0:6:53:.:.:706,98,53,489,104,458:.:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n-20\t10068171\t.\tT\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,4,0:6:53:.:.:706,98,53,489,104,458:.:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n-20\t10068172\t.\tG\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t./.:0,4,0:6:53:.:.:706,98,53,489,104,458:.:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n-20\t10068173\t.\tT\t*,<NON_REF>\t.\t.\tDP=61\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:29:0:29:0,0,115,0,115,115\n-20\t10068174\t.\tA\t*,<NON_REF>\t.\t.\tDP=61\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:0,4,0:6:53:.:706,98,53,489,104,458:0,0,2,4\t./.:.:29:39:29:0,39,585,39,585,585\n+20\t10068158\t.\tGTGTATATATATA\tG,<NON_REF>\t.\t.\tBaseQRankSum=-8.420e-01;DP=59;ExcessHet=3.01;MQRankSum=0.328;RAW_MQandDP=89764,28;ReadPosRankSum=0.524\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:3,4,0:7:57:.:0|1:10068158_GTGTATATATATA_G:105,0,57,114,69,183:10068158:0,3,2,2\t./.:.:31:54:31:.:.:0,54,810,54,810,810\n+20\t10068159\t.\tT\t*,<NON_REF>\t.\t.\tDP=60\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:3,4,0:7:57:.:0|1:10068158_GTGTATATATATA_G:105,0,57,114,69,183:10068158:0,3,2,2\t./.:.:33:45:32:.:.:0,45,675,45,675,675\n+20\t10068160\t.\tGTATATATATATGTA\tG,*,<NON_REF>\t.\t.\tDP=64;ExcessHet=3.01;RAW_MQandDP=101405,32\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,2,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,158,131,98,0,53,489,171,104,458:10068158:0,0,2,4\t./.:.:33:45:32:.:.:0,45,675,45,675,675,45,675,675,675\n+20\t10068161\t.\tT\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:32:6:31:.:.:0,6,90,6,90,90\n+20\t10068162\t.\tA\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:32:6:31:.:.:0,6,90,6,90,90\n+20\t10068163\t.\tT\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:32:6:31:.:.:0,6,90,6,90,90\n+20\t10068164\t.\tA\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:32:6:31:.:.:0,6,90,6,90,90\n+20\t10068165\t.\tT\t*,<NON_REF>\t.\t.\tDP=63\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:32:6:31:.:.:0,6,90,6,90,90\n+20\t10068166\t.\tATATATG\tA,*,<NON_REF>\t.\t.\tBaseQRankSum=-9.800e-01;ClippingRankSum=0.00;DP=57;ExcessHet=3.01;MQRankSum=0.00;RAW_MQandDP=88000,25;ReadPosRankSum=-6.600e-01\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,489,458,98,104,53,489,458,104,458:10068158:0,0,2,4\t./.:2,9,0,0:11:22:0|1:10068166_ATATATG_A:218,0,22,224,49,273,224,49,273,273:10068166:2,0,3,6\n+20\t10068167\t.\tT\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:2,9,0:11:22:0|1:10068166_ATATATG_A:218,0,22,224,49,273:10068166:2,0,3,6\n+20\t10068168\t.\tATATG\tA,*,<NON_REF>\t.\t.\tBaseQRankSum=0.447;ClippingRankSum=0.00;DP=57;ExcessHet=3.01;MQRankSum=0.00;RAW_MQandDP=88000,25;ReadPosRankSum=0.660\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,489,458,98,104,53,489,458,104,458:10068158:0,0,2,4\t./.:9,2,0,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273,49,224,273,273:10068166:3,6,2,0\n+20\t10068169\t.\tT\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n+20\t10068170\t.\tA\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n+20\t10068171\t.\tT\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n+20\t10068172\t.\tG\t*,<NON_REF>\t.\t.\tDP=57\tGT:AD:DP:GQ:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:9,2,0:11:22:1|0:10068166_ATATATG_A:22,0,218,49,224,273:10068166:3,6,2,0\n+20\t10068173\t.\tT\t*,<NON_REF>\t.\t.\tDP=61\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:29:0:29:.:.:0,0,115,0,115,115\n+20\t10068174\t.\tA\t*,<NON_REF>\t.\t.\tDP=61\tGT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB\t.|.:0,4,0:6:53:.:1|0:10068158_GTGTATATATATA_G:706,98,53,489,104,458:10068158:0,0,2,4\t./.:.:29:39:29:.:.:0,39,585,39,585,585", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d161736d534a3b468e5054a5415c6784d632578"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MDAyOQ==", "bodyText": "I know this wasn't you, but can we clarify with \"return -1\" or something?  I expected a literal Exception.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r520870029", "createdAt": "2020-11-10T20:59:06Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtilsUnitTest.java", "diffHunk": "@@ -720,27 +720,60 @@ public void testGetEventMapper(final VariantContext mergedVc,\n \n         // test no phased variants, empty map\n         final Map<VariantContext, Pair<Integer, String>> nonePhased1 = new HashMap<>();\n-        tests.add(new Object[]{calls, nonePhased1, 0, 0, 0});\n+        tests.add(new Object[]{calls, nonePhased1, 0, 0, 0, calls});\n \n         // test no phased variants, full map, exception expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d161736d534a3b468e5054a5415c6784d632578"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3NjI5Mw==", "bodyText": "If the ref for the deletion is AA and the remaining haplotype is AAAA, then isn't the deletion not left aligned?  I don't know if that matters at this point in the code, but I don't want to complicate things.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r520876293", "createdAt": "2020-11-10T21:11:37Z", "author": {"login": "ldgauthier"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtilsUnitTest.java", "diffHunk": "@@ -895,6 +934,33 @@ public void testConstructPhaseGroups(final List<VariantContext> calls,\n         haplotypeMap.put(vc4, haplotypes4complete);\n         tests.add(new Object[]{calls, new HashMap<>(haplotypeMap), 0, 0, 0, 0, 0});\n \n+        final Allele refForDel = Allele.create(\"AA\", true);\n+        final Allele altDel = Allele.create(\"A\", false);\n+\n+        final VariantContext delVC = new VariantContextBuilder().chr(\"20\").start(3).stop(4).alleles(Arrays.asList(refForDel, altDel)).make();\n+        final VariantContext spannedSnpVC = new VariantContextBuilder().chr(\"20\").start(4).stop(4).alleles(Arrays.asList(ref, Allele.SPAN_DEL, altT)).make();\n+\n+        final Haplotype spandelHap = new Haplotype(\"AAAA\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d161736d534a3b468e5054a5415c6784d632578"}, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d161736d534a3b468e5054a5415c6784d632578", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/6d161736d534a3b468e5054a5415c6784d632578", "committedDate": "2020-11-04T14:47:19Z", "message": "add a few more comments"}, "afterCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/150e9e3af2747153cb78e85872e18d59dbb5b692", "committedDate": "2020-11-18T14:23:49Z", "message": "update exception-expecting test in testConstructPhaseGroups for clarity; change test data in testConstructPhaseSetMapping to avoid left-align confusion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzQ2ODMy", "url": "https://github.com/broadinstitute/gatk/pull/6937#pullrequestreview-533746832", "createdAt": "2020-11-18T18:17:21Z", "commit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoxNzoyMVrOH177DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODozNjo1MVrOH18q9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMxODM0OA==", "bodyText": "What about mixed hets with no ref allele or span del?  Is there any reason it can't be simply 0: first allele in the VariantContext's allele list, 1: second allele in same list?", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526318348", "createdAt": "2020-11-18T18:17:21Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -65,6 +65,8 @@\n     // get realigned incorrectly.  See https://github.com/broadinstitute/gatk/issues/5060\n     public static final int MINIMUM_READ_LENGTH_AFTER_TRIMMING = 10;\n \n+    // this notation can be interpreted as a representation of the alleles present on the two phased haplotypes at the site:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMDgxMw==", "bodyText": "If we're going to continue to handle only the case of a single alt allele, then we should modify the code a few lines up to test not just if ( ! isBiallelic(call) ) but rather test for biallelic sites where one allele is ref.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526320813", "createdAt": "2020-11-18T18:21:12Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -639,9 +641,8 @@ public static void annotateReadLikelihoodsWithSupportedAlleles(final VariantCont\n             }\n \n             // keep track of the haplotypes that contain this particular alternate allele\n-            final Allele alt = call.getAlternateAllele(0);\n-            final Predicate<VariantContext> hasThisAlt = vc -> (vc.getStart() == call.getStart() && vc.getAlternateAlleles().contains(alt)) ||\n-                    (Allele.SPAN_DEL.equals(alt) && vc.getStart() < call.getStart() && vc.getEnd() >= call.getStart());\n+            final Allele alt = getSiteSpecificAlternateAllele(call);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMjA1OQ==", "bodyText": "return vc.isBiallelic() || vc.getAlternateAlleles().stream().filter(isSiteSpecificAltAllele).count() == 1", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526322059", "createdAt": "2020-11-18T18:23:14Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -801,10 +811,23 @@ else if ( ! phaseSetMapping.containsKey(comp) ){\n      * Is this variant bi-allelic?  This implementation is very much specific to this class so shouldn't be pulled out into a generalized place.\n      *\n      * @param vc the variant context\n-     * @return true if this variant context is bi-allelic, ignoring the NON-REF symbolic allele, false otherwise\n+     * @return true if this variant context is bi-allelic, ignoring the NON-REF symbolic allele and '*' symbolic allele, false otherwise\n      */\n     private static boolean isBiallelic(final VariantContext vc) {\n-        return vc.isBiallelic() || (vc.getNAlleles() == 3 && vc.getAlternateAlleles().contains(Allele.NON_REF_ALLELE));\n+        if (vc.isBiallelic()) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNDA1OA==", "bodyText": "return !(a.isReference() || a.isNonRefAllele() || Allele.SPAN_DEL.equals(a))", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526324058", "createdAt": "2020-11-18T18:26:26Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -801,10 +811,23 @@ else if ( ! phaseSetMapping.containsKey(comp) ){\n      * Is this variant bi-allelic?  This implementation is very much specific to this class so shouldn't be pulled out into a generalized place.\n      *\n      * @param vc the variant context\n-     * @return true if this variant context is bi-allelic, ignoring the NON-REF symbolic allele, false otherwise\n+     * @return true if this variant context is bi-allelic, ignoring the NON-REF symbolic allele and '*' symbolic allele, false otherwise\n      */\n     private static boolean isBiallelic(final VariantContext vc) {\n-        return vc.isBiallelic() || (vc.getNAlleles() == 3 && vc.getAlternateAlleles().contains(Allele.NON_REF_ALLELE));\n+        if (vc.isBiallelic()) return true;\n+        final long siteSpecificAltAlleles = vc.getAlternateAlleles().stream().filter(a -> isSiteSpecificAltAllele(a)).count();\n+        return siteSpecificAltAlleles == 1L;\n+    }\n+\n+    /**\n+     * A site-specific alternate allele is one that represents concrete (i.e. not NONREF) variation that begins at the\n+     * site (i.e. not '*', which represents a concrete alternate allele that begins upstream of the current site).\n+     */\n+    private static boolean isSiteSpecificAltAllele(final Allele a) {\n+        if(a.isReference()) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNDYyMQ==", "bodyText": "Let's capitalize these constants: PHASE_01.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526324621", "createdAt": "2020-11-18T18:27:16Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -65,6 +65,8 @@\n     // get realigned incorrectly.  See https://github.com/broadinstitute/gatk/issues/5060\n     public static final int MINIMUM_READ_LENGTH_AFTER_TRIMMING = 10;\n \n+    // this notation can be interpreted as a representation of the alleles present on the two phased haplotypes at the site:\n+    // \"0\": REF or '*'; \"1\": site-specific alt allele", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTg2NA==", "bodyText": "This is truly petty but I would prefer checking g.isHet() first, since the phase genotype string is only relevant if it's a het.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526325864", "createdAt": "2020-11-18T18:29:15Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -829,9 +852,18 @@ private static VariantContext phaseVC(final VariantContext vc, final String ID,\n         final List<Genotype> phasedGenotypes = new ArrayList<>();\n         for ( final Genotype g : vc.getGenotypes() ) {\n             final List<Allele> alleles = g.getAlleles();\n-            if (phaseGT.equals(phase10) && g.isHet()) Collections.reverse(alleles); // swap the alleles if heterozygous\n+            final List<Allele> newAlleles = new ArrayList<>(alleles);\n+            if (phaseGT.equals(phase10) && g.isHet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzMDI1OQ==", "bodyText": "I think this series of nested conditionals could be simplified as:\nfinal int phasedFirstAlleleIndex = phaseGT.equals(phase10) ? 0 : 1;\nif (g.isHet() && ! isSiteSpecificAltAllele(newAlleles.get(phasedFirstAlleleIndex))) {\n    Collections.reverse(newAlleles);\n}\n\nI would also consider making the phase GTs into an enum instead of hardcoded strings, and giving it a method to extract which index, 0 or 1, is first.", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526330259", "createdAt": "2020-11-18T18:36:14Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtils.java", "diffHunk": "@@ -829,9 +852,18 @@ private static VariantContext phaseVC(final VariantContext vc, final String ID,\n         final List<Genotype> phasedGenotypes = new ArrayList<>();\n         for ( final Genotype g : vc.getGenotypes() ) {\n             final List<Allele> alleles = g.getAlleles();\n-            if (phaseGT.equals(phase10) && g.isHet()) Collections.reverse(alleles); // swap the alleles if heterozygous\n+            final List<Allele> newAlleles = new ArrayList<>(alleles);\n+            if (phaseGT.equals(phase10) && g.isHet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzMDQ5Ng==", "bodyText": "Camel case these", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526330496", "createdAt": "2020-11-18T18:36:38Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtilsUnitTest.java", "diffHunk": "@@ -720,27 +720,62 @@ public void testGetEventMapper(final VariantContext mergedVc,\n \n         // test no phased variants, empty map\n         final Map<VariantContext, Pair<Integer, String>> nonePhased1 = new HashMap<>();\n-        tests.add(new Object[]{calls, nonePhased1, 0, 0, 0});\n+        tests.add(new Object[]{calls, nonePhased1, 0, 0, 0, calls, null});\n \n         // test no phased variants, full map, exception expected\n+        final IllegalStateException tooSmallPhaseGroupException = new IllegalStateException(\"Somehow we have a group of phased variants that has fewer than 2 members\");\n+\n         final Map<VariantContext, Pair<Integer, String>> nonePhased2 = new HashMap<>();\n-        nonePhased2.put(vc1, Pair.of(0, \"0/1\"));\n-        nonePhased2.put(vc2, Pair.of(1, \"0/1\"));\n-        nonePhased2.put(vc3, Pair.of(2, \"0/1\"));\n-        tests.add(new Object[]{calls, nonePhased2, 3, -1, -1});\n+        nonePhased2.put(vc1, Pair.of(0, \"0|1\"));\n+        nonePhased2.put(vc2, Pair.of(1, \"0|1\"));\n+        nonePhased2.put(vc3, Pair.of(2, \"0|1\"));\n+        tests.add(new Object[]{calls, nonePhased2, 3, -1, -1, calls, tooSmallPhaseGroupException});\n \n         // test 2 phased variants\n+        final Genotype g1P = new GenotypeBuilder().alleles(Arrays.asList(ref, altC)).phased(true).make();\n+        final VariantContext vc1P = new VariantContextBuilder().chr(\"20\").start(1).stop(1).alleles(Arrays.asList(ref, altC)).genotypes(g1P).make();\n+        final Genotype g2P = new GenotypeBuilder().alleles(Arrays.asList(altC, ref)).phased(true).make();\n+        final VariantContext vc2P = new VariantContextBuilder().chr(\"20\").start(2).stop(2).alleles(Arrays.asList(ref, altC)).genotypes(g2P).make();\n+        final List<VariantContext> phasedCalls = Arrays.asList(vc1P, vc2P, vc3);\n+\n         final Map<VariantContext, Pair<Integer, String>> twoPhased = new HashMap<>();\n-        twoPhased.put(vc1, Pair.of(0, \"0/1\"));\n-        twoPhased.put(vc2, Pair.of(0, \"0/1\"));\n-        tests.add(new Object[]{calls, twoPhased, 1, 1, 2});\n+        twoPhased.put(vc1, Pair.of(0, \"0|1\"));\n+        twoPhased.put(vc2, Pair.of(0, \"1|0\"));\n+        tests.add(new Object[]{calls, twoPhased, 1, 1, 2, phasedCalls, null});\n \n         // test all phased variants\n+        final Genotype g3P = new GenotypeBuilder().alleles(Arrays.asList(ref, altC)).phased(true).make();\n+        final VariantContext vc3P = new VariantContextBuilder().chr(\"20\").start(3).stop(3).alleles(Arrays.asList(ref, altC)).genotypes(g3P).make();\n+        final List<VariantContext> phasedCalls2 = Arrays.asList(vc1P, vc2P, vc3P);\n+\n         final Map<VariantContext, Pair<Integer, String>> allPhased = new HashMap<>();\n-        allPhased.put(vc1, Pair.of(0, \"0/1\"));\n-        allPhased.put(vc2, Pair.of(0, \"0/1\"));\n-        allPhased.put(vc3, Pair.of(0, \"0/1\"));\n-        tests.add(new Object[]{calls, allPhased, 1, 1, 3});\n+        allPhased.put(vc1, Pair.of(0, \"0|1\"));\n+        allPhased.put(vc2, Pair.of(0, \"1|0\"));\n+        allPhased.put(vc3, Pair.of(0, \"0|1\"));\n+        tests.add(new Object[]{calls, allPhased, 1, 1, 3, phasedCalls2, null});\n+\n+        // test a spanning deletion case: unphased snp, deletion, spanned snp\n+        final Allele delref = Allele.create(\"AA\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzMDYxMw==", "bodyText": "camel case", "url": "https://github.com/broadinstitute/gatk/pull/6937#discussion_r526330613", "createdAt": "2020-11-18T18:36:51Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/AssemblyBasedCallerUtilsUnitTest.java", "diffHunk": "@@ -720,27 +720,62 @@ public void testGetEventMapper(final VariantContext mergedVc,\n \n         // test no phased variants, empty map\n         final Map<VariantContext, Pair<Integer, String>> nonePhased1 = new HashMap<>();\n-        tests.add(new Object[]{calls, nonePhased1, 0, 0, 0});\n+        tests.add(new Object[]{calls, nonePhased1, 0, 0, 0, calls, null});\n \n         // test no phased variants, full map, exception expected\n+        final IllegalStateException tooSmallPhaseGroupException = new IllegalStateException(\"Somehow we have a group of phased variants that has fewer than 2 members\");\n+\n         final Map<VariantContext, Pair<Integer, String>> nonePhased2 = new HashMap<>();\n-        nonePhased2.put(vc1, Pair.of(0, \"0/1\"));\n-        nonePhased2.put(vc2, Pair.of(1, \"0/1\"));\n-        nonePhased2.put(vc3, Pair.of(2, \"0/1\"));\n-        tests.add(new Object[]{calls, nonePhased2, 3, -1, -1});\n+        nonePhased2.put(vc1, Pair.of(0, \"0|1\"));\n+        nonePhased2.put(vc2, Pair.of(1, \"0|1\"));\n+        nonePhased2.put(vc3, Pair.of(2, \"0|1\"));\n+        tests.add(new Object[]{calls, nonePhased2, 3, -1, -1, calls, tooSmallPhaseGroupException});\n \n         // test 2 phased variants\n+        final Genotype g1P = new GenotypeBuilder().alleles(Arrays.asList(ref, altC)).phased(true).make();\n+        final VariantContext vc1P = new VariantContextBuilder().chr(\"20\").start(1).stop(1).alleles(Arrays.asList(ref, altC)).genotypes(g1P).make();\n+        final Genotype g2P = new GenotypeBuilder().alleles(Arrays.asList(altC, ref)).phased(true).make();\n+        final VariantContext vc2P = new VariantContextBuilder().chr(\"20\").start(2).stop(2).alleles(Arrays.asList(ref, altC)).genotypes(g2P).make();\n+        final List<VariantContext> phasedCalls = Arrays.asList(vc1P, vc2P, vc3);\n+\n         final Map<VariantContext, Pair<Integer, String>> twoPhased = new HashMap<>();\n-        twoPhased.put(vc1, Pair.of(0, \"0/1\"));\n-        twoPhased.put(vc2, Pair.of(0, \"0/1\"));\n-        tests.add(new Object[]{calls, twoPhased, 1, 1, 2});\n+        twoPhased.put(vc1, Pair.of(0, \"0|1\"));\n+        twoPhased.put(vc2, Pair.of(0, \"1|0\"));\n+        tests.add(new Object[]{calls, twoPhased, 1, 1, 2, phasedCalls, null});\n \n         // test all phased variants\n+        final Genotype g3P = new GenotypeBuilder().alleles(Arrays.asList(ref, altC)).phased(true).make();\n+        final VariantContext vc3P = new VariantContextBuilder().chr(\"20\").start(3).stop(3).alleles(Arrays.asList(ref, altC)).genotypes(g3P).make();\n+        final List<VariantContext> phasedCalls2 = Arrays.asList(vc1P, vc2P, vc3P);\n+\n         final Map<VariantContext, Pair<Integer, String>> allPhased = new HashMap<>();\n-        allPhased.put(vc1, Pair.of(0, \"0/1\"));\n-        allPhased.put(vc2, Pair.of(0, \"0/1\"));\n-        allPhased.put(vc3, Pair.of(0, \"0/1\"));\n-        tests.add(new Object[]{calls, allPhased, 1, 1, 3});\n+        allPhased.put(vc1, Pair.of(0, \"0|1\"));\n+        allPhased.put(vc2, Pair.of(0, \"1|0\"));\n+        allPhased.put(vc3, Pair.of(0, \"0|1\"));\n+        tests.add(new Object[]{calls, allPhased, 1, 1, 3, phasedCalls2, null});\n+\n+        // test a spanning deletion case: unphased snp, deletion, spanned snp\n+        final Allele delref = Allele.create(\"AA\", true);\n+        final Allele delalt = Allele.create(\"A\", false);\n+\n+\n+        final Genotype g4 = new GenotypeBuilder().alleles(Arrays.asList(delref, delalt)).make();\n+        final VariantContext vc4 = new VariantContextBuilder().chr(\"20\").start(3).stop(4).alleles(Arrays.asList(delref, delalt)).genotypes(g4).make();\n+        final Genotype g5 = new GenotypeBuilder().alleles(Arrays.asList(Allele.SPAN_DEL, altC)).make();\n+        final VariantContext vc5 = new VariantContextBuilder().chr(\"20\").start(4).stop(4).alleles(Arrays.asList(ref, Allele.SPAN_DEL, altC)).genotypes(g5).make();\n+\n+        final Genotype g4P = new GenotypeBuilder().alleles(Arrays.asList(delref, delalt)).phased(true).make();\n+        final VariantContext vc4P = new VariantContextBuilder().chr(\"20\").start(3).stop(4).alleles(Arrays.asList(delref, delalt)).genotypes(g4P).make();\n+        final Genotype g5P = new GenotypeBuilder().alleles(Arrays.asList(altC, Allele.SPAN_DEL)).phased(true).make();\n+        final VariantContext vc5P = new VariantContextBuilder().chr(\"20\").start(4).stop(4).alleles(Arrays.asList(ref, Allele.SPAN_DEL, altC)).genotypes(g5P).make();\n+\n+        final List<VariantContext> spandelCalls = Arrays.asList(vc1, vc4, vc5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150e9e3af2747153cb78e85872e18d59dbb5b692"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0449f0f20e2bd3a6af37023a12b5c7e45d6aa92", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/c0449f0f20e2bd3a6af37023a12b5c7e45d6aa92", "committedDate": "2020-11-25T16:46:41Z", "message": "update haplotypecaller phasing to support genotypes with the * allele"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14ca2e2707d4dbbdbc66ac255d79c98cebf774a", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/c14ca2e2707d4dbbdbc66ac255d79c98cebf774a", "committedDate": "2020-11-25T16:46:41Z", "message": "Update expected results for HaplotypeCallerIntegrationTest and CombineGVCFsIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d112ae3fac295500709fea8c96de5369a3bc36", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/98d112ae3fac295500709fea8c96de5369a3bc36", "committedDate": "2020-11-25T16:46:41Z", "message": "update integration test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4e3684b67fe02868759249b17ea77a32c2572f", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/da4e3684b67fe02868759249b17ea77a32c2572f", "committedDate": "2020-11-25T16:46:42Z", "message": "add a few more comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7259b5d50cf811f1376570c948bf8acdd5d74343", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/7259b5d50cf811f1376570c948bf8acdd5d74343", "committedDate": "2020-11-25T16:46:42Z", "message": "update exception-expecting test in testConstructPhaseGroups for clarity; change test data in testConstructPhaseSetMapping to avoid left-align confusion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d43a0142748f37b5204acb05191a574f94c58101", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/d43a0142748f37b5204acb05191a574f94c58101", "committedDate": "2020-11-25T16:49:52Z", "message": "updates based on PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89d8dd08ba96bbd91b752470109b7beb64b3bc2d", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/89d8dd08ba96bbd91b752470109b7beb64b3bc2d", "committedDate": "2020-11-25T16:07:23Z", "message": "updates based on PR comments"}, "afterCommit": {"oid": "d43a0142748f37b5204acb05191a574f94c58101", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/d43a0142748f37b5204acb05191a574f94c58101", "committedDate": "2020-11-25T16:49:52Z", "message": "updates based on PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjQyMTU2", "url": "https://github.com/broadinstitute/gatk/pull/6937#pullrequestreview-541242156", "createdAt": "2020-11-30T19:49:16Z", "commit": {"oid": "d43a0142748f37b5204acb05191a574f94c58101"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjYwMjQ0", "url": "https://github.com/broadinstitute/gatk/pull/6937#pullrequestreview-550260244", "createdAt": "2020-12-11T16:40:29Z", "commit": {"oid": "d43a0142748f37b5204acb05191a574f94c58101"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2532, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}