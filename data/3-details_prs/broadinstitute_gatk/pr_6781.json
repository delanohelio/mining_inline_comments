{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTAyNTQ0", "number": 6781, "title": "Improving exception messages in AssemblyRegion", "bodyText": "Replacing some cases of NPE with IllegalArgumentException with a clear message.\n\nThis should help clarify the issue we talked about at the meeting today if it comes up again.  I can't remember what the ticket was to link to though.", "createdAt": "2020-08-31T19:45:15Z", "url": "https://github.com/broadinstitute/gatk/pull/6781", "merged": true, "mergeCommit": {"oid": "3031738dc675272e04e95886ecdec508e0d90734"}, "closed": true, "closedAt": "2020-09-03T16:49:19Z", "author": {"login": "lbergelson"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEpkzFAFqTQ3OTg3MDYwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFTeYLAFqTQ4MjAyNTcwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5ODcwNjA2", "url": "https://github.com/broadinstitute/gatk/pull/6781#pullrequestreview-479870606", "createdAt": "2020-09-01T15:36:53Z", "commit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozNjo1M1rOHK8YVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1OTowNVrOHK9Vew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw==", "bodyText": "Move to SequenceDictionaryUtils (or, better, use one of the existing methods there like SequenceDictionaryUtils.getContigNamesList())", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481237077", "createdAt": "2020-09-01T15:36:53Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n-                Math.min(referenceReader.getSequenceDictionary().getSequence(genomeLoc.getContig()).getSequenceLength(), genomeLoc.getEnd() + padding) ).getBases();\n+                Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n+    }\n+\n+    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzM4Ng==", "bodyText": "Mimatched -> Mismatched", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481237386", "createdAt": "2020-09-01T15:37:20Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ==", "bodyText": "getSubsequenceAt() will already throw a UserException.MissingContigInSequenceDictionary exception internally if the contig is missing -- is there some way we could rely on that existing check? Ideally we should avoid adding lots of additional sequence dictionary lookups to frequently-called methods if we can possibly help it...", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481246435", "createdAt": "2020-09-01T15:50:42Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODMxNg==", "bodyText": "I did not know about expectedExceptionsMessageRegExp ! And now that I do, I have mixed feelings about it...throwing a more specific exception type is better than checking the exception message text itself.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481248316", "createdAt": "2020-09-01T15:53:33Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MjczMQ==", "bodyText": "Won't this change the sequence dictionary in the shared header instance used by all the tests in this class? Can you write this test in a way that doesn't modify shared data?", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481252731", "createdAt": "2020-09-01T15:59:05Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+        final String contigNotInReference = \"chrNotInReference\";\n+        sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f08c1d7b960ea2fe20e425d4b02f4a20b3b6ed9", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/8f08c1d7b960ea2fe20e425d4b02f4a20b3b6ed9", "committedDate": "2020-09-01T19:47:24Z", "message": "Improving exception messages in AssemblyRegion\n\n* Replacing some cases of NPE with IllegalArgumentException with a clear message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/20328e75cf0301e667eaae18ee9f5535b3cf32e7", "committedDate": "2020-09-01T19:48:43Z", "message": "responding to comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/4b0c1ac35a659de5965696ea61f58165afeef1fe", "committedDate": "2020-08-31T19:43:25Z", "message": "Improving exception messages in AssemblyRegion\n\n* Replacing some cases of NPE with IllegalArgumentException with a clear message."}, "afterCommit": {"oid": "20328e75cf0301e667eaae18ee9f5535b3cf32e7", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/20328e75cf0301e667eaae18ee9f5535b3cf32e7", "committedDate": "2020-09-01T19:48:43Z", "message": "responding to comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDI1NzAw", "url": "https://github.com/broadinstitute/gatk/pull/6781#pullrequestreview-482025700", "createdAt": "2020-09-03T16:48:14Z", "commit": {"oid": "20328e75cf0301e667eaae18ee9f5535b3cf32e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2707, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}