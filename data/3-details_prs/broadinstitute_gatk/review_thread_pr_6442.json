{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDE5ODky", "number": 6442, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowOToyMFrODeGwVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMTowNlrODeGyLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk0NTUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_QualByDepthUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowOToyMFrOFnFm6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowOToyMFrOFnFm6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMDY2NQ==", "bodyText": "assertEquals() would be more appropriate here", "url": "https://github.com/broadinstitute/gatk/pull/6442#discussion_r376530665", "createdAt": "2020-02-07T18:09:20Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_QualByDepthUnitTest.java", "diffHunk": "@@ -27,4 +34,16 @@ protected String getKey() {\n         return GATKVCFConstants.AS_QUAL_KEY;\n     }\n \n+    @Test\n+    public void testParseQualList() {\n+        final String goodQualList = \"|234|0\"; //combined VCs from GenomicsDB have zero value for NON-REF\n+        final String trickyQualList = \"|234|\"; //older single-sample GVCFs don't have a value for NON-REF -- GenomicsDB assigns an empty value, which is fair\n+        final VariantContext withNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, goodQualList).make();\n+        final VariantContext withNoNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, trickyQualList).make();\n+        Assert.assertTrue(AS_QualByDepth.parseQualList(withNonRefValue).size() == withNonRefValue.getAlternateAlleles().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b3e45e0bd543f8408165f59df59a11b16ade31"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk1MDIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_QualByDepthUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMTowNlrOFnFp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMTowNlrOFnFp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMTQ0MA==", "bodyText": "Can you also add an assertion that the actual QD value assigned to NON_REF was 0 in the withNoNonRefValue case?", "url": "https://github.com/broadinstitute/gatk/pull/6442#discussion_r376531440", "createdAt": "2020-02-07T18:11:06Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_QualByDepthUnitTest.java", "diffHunk": "@@ -27,4 +34,16 @@ protected String getKey() {\n         return GATKVCFConstants.AS_QUAL_KEY;\n     }\n \n+    @Test\n+    public void testParseQualList() {\n+        final String goodQualList = \"|234|0\"; //combined VCs from GenomicsDB have zero value for NON-REF\n+        final String trickyQualList = \"|234|\"; //older single-sample GVCFs don't have a value for NON-REF -- GenomicsDB assigns an empty value, which is fair\n+        final VariantContext withNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, goodQualList).make();\n+        final VariantContext withNoNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, trickyQualList).make();\n+        Assert.assertTrue(AS_QualByDepth.parseQualList(withNonRefValue).size() == withNonRefValue.getAlternateAlleles().size());\n+        Assert.assertTrue(AS_QualByDepth.parseQualList(withNoNonRefValue).size() == withNonRefValue.getAlternateAlleles().size());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b3e45e0bd543f8408165f59df59a11b16ade31"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1090, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}