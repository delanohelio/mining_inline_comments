{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzIzNDI0", "number": 7002, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzozMjo0NVrOFNypig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzozMjo0NVrOFNypig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDA1NjQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pipelines/MarkDuplicatesSparkIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzozMjo0NVrOISMjuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODowMDo1M1rOISNquw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MTAzMw==", "bodyText": "Is this really testing with an actual null pointer in the READ_NAME_REGEX field, or just the literal String \"null\"?\nCan you add in a unit test showing that OpticalDuplicateFinder can be constructed from a null READ_NAME_REGEX, and that methods like addLocationInformation() can still function?", "url": "https://github.com/broadinstitute/gatk/pull/7002#discussion_r555951033", "createdAt": "2021-01-12T17:32:45Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pipelines/MarkDuplicatesSparkIntegrationTest.java", "diffHunk": "@@ -495,6 +496,33 @@ public void testAssertCorrectSortOrderMultipleBamsOverriding() {\n         runCommandLine(args);\n     }\n \n+    @Test\n+    public void testNullOpticalDuplicates() {\n+        final File output = createTempFile(\"supplementaryReadUnmappedMate\", \"bam\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(output);\n+        args.addInput(new File(TEST_DATA_DIR,\"optical_dupes.bam\"));\n+        args.addFlag(MarkDuplicatesSpark.ALLOW_MULTIPLE_SORT_ORDERS_IN_INPUT_ARG);\n+        args.add(OpticalDuplicatesArgumentCollection.READ_NAME_REGEX_LONG_NAME, \"null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f03e9298504f26cf2e545858b37c75e1ccd4133"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2MzY0MQ==", "bodyText": "Yes it is an actual null reference that gets passed. I believe the argument parser interprets \"null\" as null which is expected behavior in the picard MarkDuplicates documentation for disabling the OpticalDuplicates finder. In GATK4 we ported the same method but we accidentally encased it in a ternary that nulled out the Finder object (which should not have happened) and caused the exception.", "url": "https://github.com/broadinstitute/gatk/pull/7002#discussion_r555963641", "createdAt": "2021-01-12T17:52:06Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pipelines/MarkDuplicatesSparkIntegrationTest.java", "diffHunk": "@@ -495,6 +496,33 @@ public void testAssertCorrectSortOrderMultipleBamsOverriding() {\n         runCommandLine(args);\n     }\n \n+    @Test\n+    public void testNullOpticalDuplicates() {\n+        final File output = createTempFile(\"supplementaryReadUnmappedMate\", \"bam\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(output);\n+        args.addInput(new File(TEST_DATA_DIR,\"optical_dupes.bam\"));\n+        args.addFlag(MarkDuplicatesSpark.ALLOW_MULTIPLE_SORT_ORDERS_IN_INPUT_ARG);\n+        args.add(OpticalDuplicatesArgumentCollection.READ_NAME_REGEX_LONG_NAME, \"null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MTAzMw=="}, "originalCommit": {"oid": "4f03e9298504f26cf2e545858b37c75e1ccd4133"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2NTcyMQ==", "bodyText": "This test does actually assert that the optical dupes finder works as intended when \"null\" is provided. It is intended to count NOTHING as an optical duplicate and this test asserts that reads that normally would count as optical duplicates are treated as such. I'm somewhat hesitant to add that test since the OpticalDuplicatesFinder object is a picard class that we call into in GATK.", "url": "https://github.com/broadinstitute/gatk/pull/7002#discussion_r555965721", "createdAt": "2021-01-12T17:55:23Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pipelines/MarkDuplicatesSparkIntegrationTest.java", "diffHunk": "@@ -495,6 +496,33 @@ public void testAssertCorrectSortOrderMultipleBamsOverriding() {\n         runCommandLine(args);\n     }\n \n+    @Test\n+    public void testNullOpticalDuplicates() {\n+        final File output = createTempFile(\"supplementaryReadUnmappedMate\", \"bam\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(output);\n+        args.addInput(new File(TEST_DATA_DIR,\"optical_dupes.bam\"));\n+        args.addFlag(MarkDuplicatesSpark.ALLOW_MULTIPLE_SORT_ORDERS_IN_INPUT_ARG);\n+        args.add(OpticalDuplicatesArgumentCollection.READ_NAME_REGEX_LONG_NAME, \"null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MTAzMw=="}, "originalCommit": {"oid": "4f03e9298504f26cf2e545858b37c75e1ccd4133"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk2OTIxMQ==", "bodyText": "In picard OpticalDuplicatesFinder there is the following exit case for a null regex that is the intended target here:\nif (this.readNameRegex == null || length < 2 || length > maxDuplicateSetSize) {\n            return opticalDuplicateFlags;\n        }", "url": "https://github.com/broadinstitute/gatk/pull/7002#discussion_r555969211", "createdAt": "2021-01-12T18:00:53Z", "author": {"login": "jamesemery"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/spark/pipelines/MarkDuplicatesSparkIntegrationTest.java", "diffHunk": "@@ -495,6 +496,33 @@ public void testAssertCorrectSortOrderMultipleBamsOverriding() {\n         runCommandLine(args);\n     }\n \n+    @Test\n+    public void testNullOpticalDuplicates() {\n+        final File output = createTempFile(\"supplementaryReadUnmappedMate\", \"bam\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.addOutput(output);\n+        args.addInput(new File(TEST_DATA_DIR,\"optical_dupes.bam\"));\n+        args.addFlag(MarkDuplicatesSpark.ALLOW_MULTIPLE_SORT_ORDERS_IN_INPUT_ARG);\n+        args.add(OpticalDuplicatesArgumentCollection.READ_NAME_REGEX_LONG_NAME, \"null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MTAzMw=="}, "originalCommit": {"oid": "4f03e9298504f26cf2e545858b37c75e1ccd4133"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 771, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}