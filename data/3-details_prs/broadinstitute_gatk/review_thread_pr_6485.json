{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDY5MzU2", "number": 6485, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDo1NjozNFrODl8JtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyNzo0NVrODmXqIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTA5NDI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDo1NjozNFrOFzHN2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToxNTo1NVrOFzHszg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzOTkyOA==", "bodyText": "Does soft start mean the first base including soft-clipped bases? Or excluding?", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r389139928", "createdAt": "2020-03-06T20:56:34Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of\n+     * the element containing that base.  If the reference coordinate occurs within a deletion, the first index after the deletion is returned.\n+     * Note that this treats soft-clipped bases as if they align with the reference, which is useful for hard-clipping reads with soft clips.\n+     *\n+     * @param alignmentStart        The soft start of the read on the reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0Nzg1NA==", "bodyText": "I see, including", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r389147854", "createdAt": "2020-03-06T21:15:55Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of\n+     * the element containing that base.  If the reference coordinate occurs within a deletion, the first index after the deletion is returned.\n+     * Note that this treats soft-clipped bases as if they align with the reference, which is useful for hard-clipping reads with soft clips.\n+     *\n+     * @param alignmentStart        The soft start of the read on the reference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzOTkyOA=="}, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTExODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTowNjoyMFrOFzHdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTowMToyNVrOF0Blnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0Mzg2Ng==", "bodyText": "Could you rename CLIPPING_GOAL_NOT_REACHED? I have a personal grudge against this particular variable. It used to scare me away from looking into it, and it feels out of place given that the clipping code and this method are now de-coupled. Maybe READ_INDEX_NOT_FOUND", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r389143866", "createdAt": "2020-03-06T21:06:20Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of\n+     * the element containing that base.  If the reference coordinate occurs within a deletion, the first index after the deletion is returned.\n+     * Note that this treats soft-clipped bases as if they align with the reference, which is useful for hard-clipping reads with soft clips.\n+     *\n+     * @param alignmentStart        The soft start of the read on the reference\n+     * @param cigar                 The read's cigar\n+     * @param refCoord              The target reference coordinate\n+     * @return                      If the reference coordinate occurs before the read start or after the read end {@code CLIPPING_GOAL_NOT_REACHED};\n+     *                              if the reference coordinate falls within an alignment block of the read's cigar, the corresponding read coordinate;\n+     *                              if the reference coordinate falls within a deletion, the first read coordinate after the deletion.  Note: if the last cigar element is\n+     *                              a deletion (which isn't meaningful), it returns {@code CLIPPING_GOAL_NOT_REACHED}.\n+     */\n+    public static Pair<Integer, CigarOperator> getReadCoordinateForReferenceCoordinate(final int alignmentStart, final Cigar cigar, final int refCoord) {\n+        if (refCoord < alignmentStart) {\n+            return new MutablePair<>(CLIPPING_GOAL_NOT_REACHED, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NjI4Nw==", "bodyText": "Agreed.  done", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r390096287", "createdAt": "2020-03-10T05:01:25Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of\n+     * the element containing that base.  If the reference coordinate occurs within a deletion, the first index after the deletion is returned.\n+     * Note that this treats soft-clipped bases as if they align with the reference, which is useful for hard-clipping reads with soft clips.\n+     *\n+     * @param alignmentStart        The soft start of the read on the reference\n+     * @param cigar                 The read's cigar\n+     * @param refCoord              The target reference coordinate\n+     * @return                      If the reference coordinate occurs before the read start or after the read end {@code CLIPPING_GOAL_NOT_REACHED};\n+     *                              if the reference coordinate falls within an alignment block of the read's cigar, the corresponding read coordinate;\n+     *                              if the reference coordinate falls within a deletion, the first read coordinate after the deletion.  Note: if the last cigar element is\n+     *                              a deletion (which isn't meaningful), it returns {@code CLIPPING_GOAL_NOT_REACHED}.\n+     */\n+    public static Pair<Integer, CigarOperator> getReadCoordinateForReferenceCoordinate(final int alignmentStart, final Cigar cigar, final int refCoord) {\n+        if (refCoord < alignmentStart) {\n+            return new MutablePair<>(CLIPPING_GOAL_NOT_REACHED, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0Mzg2Ng=="}, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTEzOTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToxNDoxM1rOFzHpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDo1MTozM1rOF0Bd7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NzA2OQ==", "bodyText": "Maybe it wouldn't hurt to say \"Find the zero-based index within a read's bases corresponding to a given 1-based position in the reference.'", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r389147069", "createdAt": "2020-03-06T21:14:13Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NDMxNg==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r390094316", "createdAt": "2020-03-10T04:51:33Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0NzA2OQ=="}, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE3NzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMToyODo0OVrOFzIBQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDo1MzowNFrOF0BfDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MzA4OQ==", "bodyText": "getReadIndexForReferenceCoordinate might be a better name for this function, to contrast the 0-based index of a read and the 1-based coordinate of the reference.\nBut maybe it doesn't bother others and it would be kind of a messy change so I leave it totally up to you.", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r389153089", "createdAt": "2020-03-06T21:28:49Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of\n+     * the element containing that base.  If the reference coordinate occurs within a deletion, the first index after the deletion is returned.\n+     * Note that this treats soft-clipped bases as if they align with the reference, which is useful for hard-clipping reads with soft clips.\n+     *\n+     * @param alignmentStart        The soft start of the read on the reference\n+     * @param cigar                 The read's cigar\n+     * @param refCoord              The target reference coordinate\n+     * @return                      If the reference coordinate occurs before the read start or after the read end {@code CLIPPING_GOAL_NOT_REACHED};\n+     *                              if the reference coordinate falls within an alignment block of the read's cigar, the corresponding read coordinate;\n+     *                              if the reference coordinate falls within a deletion, the first read coordinate after the deletion.  Note: if the last cigar element is\n+     *                              a deletion (which isn't meaningful), it returns {@code CLIPPING_GOAL_NOT_REACHED}.\n+     */\n+    public static Pair<Integer, CigarOperator> getReadCoordinateForReferenceCoordinate(final int alignmentStart, final Cigar cigar, final int refCoord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NDYwNg==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r390094606", "createdAt": "2020-03-10T04:53:04Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ReadUtils.java", "diffHunk": "@@ -666,205 +666,72 @@ public static int getSoftEnd(final GATKRead read) {\n         return softEnd;\n     }\n \n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinateUpToEndOfRead(read, refCoord, tail, false);\n-    }\n-\n-    public static int getReadCoordinateForReferenceCoordinateUpToEndOfRead(final GATKRead read, final int refCoord, final ClippingTail tail, final boolean allowGoalNotReached) {\n-        final int leftmostSafeVariantPosition = Math.max(read.getSoftStart(), refCoord);\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), leftmostSafeVariantPosition, tail, allowGoalNotReached);\n-    }\n-\n     /**\n-     * Pre-processes the results of {@link #getReadCoordinateForReferenceCoordinate(int, Cigar, int, boolean)} to take care of\n-     * two corner cases:\n-     *\n-     * 1. If clipping the right tail (end of the read) getReadCoordinateForReferenceCoordinate and fall inside\n-     * a deletion return the base after the deletion. If clipping the left tail (beginning of the read) it\n-     * doesn't matter because it already returns the previous base by default.\n-     *\n-     * 2. If clipping the left tail (beginning of the read) getReadCoordinateForReferenceCoordinate and the\n-     * read starts with an insertion, and you're requesting the first read based coordinate, it will skip\n-     * the leading insertion (because it has the same reference coordinate as the following base).\n-     *\n-     * @return the read coordinate corresponding to the requested reference coordinate for clipping.\n-     */\n-    public static int getReadCoordinateForReferenceCoordinate(final GATKRead read, final int refCoord, final ClippingTail tail) {\n-        return getReadCoordinateForReferenceCoordinate(read.getSoftStart(), read.getCigar(), refCoord, tail, false);\n+     * Find the index within a read's bases corresponding to a given position in the reference, along with the cigar operator of\n+     * the element containing that base.  If the reference coordinate occurs within a deletion, the first index after the deletion is returned.\n+     * Note that this treats soft-clipped bases as if they align with the reference, which is useful for hard-clipping reads with soft clips.\n+     *\n+     * @param alignmentStart        The soft start of the read on the reference\n+     * @param cigar                 The read's cigar\n+     * @param refCoord              The target reference coordinate\n+     * @return                      If the reference coordinate occurs before the read start or after the read end {@code CLIPPING_GOAL_NOT_REACHED};\n+     *                              if the reference coordinate falls within an alignment block of the read's cigar, the corresponding read coordinate;\n+     *                              if the reference coordinate falls within a deletion, the first read coordinate after the deletion.  Note: if the last cigar element is\n+     *                              a deletion (which isn't meaningful), it returns {@code CLIPPING_GOAL_NOT_REACHED}.\n+     */\n+    public static Pair<Integer, CigarOperator> getReadCoordinateForReferenceCoordinate(final int alignmentStart, final Cigar cigar, final int refCoord) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1MzA4OQ=="}, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTYwMDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/haplotype/Haplotype.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjoyNzo0NVrOFzv6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDo1ODoxNVrOF0BjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNjc0Mg==", "bodyText": "Is this checking that there are non-variant bases (i.e. bases that are not in the variant context) on either side of the inserted allele?", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r389806742", "createdAt": "2020-03-09T16:27:45Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/haplotype/Haplotype.java", "diffHunk": "@@ -197,9 +197,17 @@ public void setCigar( final Cigar cigar ) {\n \n     public Haplotype insertAllele( final Allele refAllele, final Allele altAllele, final int refInsertLocation, final int genomicInsertLocation ) {\n         // refInsertLocation is in ref haplotype offset coordinates NOT genomic coordinates\n-        final int haplotypeInsertLocation = ReadUtils.getReadCoordinateForReferenceCoordinate(alignmentStartHapwrtRef, cigar, refInsertLocation, ClippingTail.RIGHT_TAIL, true);\n-        final byte[] myBases = this.getBases();\n-        if( haplotypeInsertLocation == -1 || haplotypeInsertLocation + refAllele.length() >= myBases.length ) { // desired change falls inside deletion so don't bother creating a new haplotype\n+        final Pair<Integer, CigarOperator> haplotypeInsertLocationAndOperator = ReadUtils.getReadCoordinateForReferenceCoordinate(alignmentStartHapwrtRef, cigar, refInsertLocation);\n+\n+        // can't insert outside the haplotype or into a deletion\n+        if( haplotypeInsertLocationAndOperator.getLeft() == ReadUtils.CLIPPING_GOAL_NOT_REACHED || !haplotypeInsertLocationAndOperator.getRight().consumesReadBases() ) {\n+            return null;\n+        }\n+        final int haplotypeInsertLocation = haplotypeInsertLocationAndOperator.getLeft();\n+        final byte[] myBases = getBases();\n+\n+        // can't insert if we don't have any sequence after the inserted alt allele to span the new variant\n+        if (haplotypeInsertLocation + refAllele.length() >= myBases.length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NTY0Mg==", "bodyText": "If the ref allele has n bases, you can think of the alt allele as deleting n - 1 bases (eg ACT -> A) followed, optionally by replacing those n - 1 bases (in the case of a MNP eg ACT -> A -> AGG).  Either way, if the haplotype doesn't contain those n - 1 bases it doesn't make sense to perform this transformation.\nThat is, suppose our haplotype is . . .ATTG.  Then we can insert an ATT -> A deletion by removing the TT, but we can't insert an ATTGC -> A deletion because the C is not there.", "url": "https://github.com/broadinstitute/gatk/pull/6485#discussion_r390095642", "createdAt": "2020-03-10T04:58:15Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/haplotype/Haplotype.java", "diffHunk": "@@ -197,9 +197,17 @@ public void setCigar( final Cigar cigar ) {\n \n     public Haplotype insertAllele( final Allele refAllele, final Allele altAllele, final int refInsertLocation, final int genomicInsertLocation ) {\n         // refInsertLocation is in ref haplotype offset coordinates NOT genomic coordinates\n-        final int haplotypeInsertLocation = ReadUtils.getReadCoordinateForReferenceCoordinate(alignmentStartHapwrtRef, cigar, refInsertLocation, ClippingTail.RIGHT_TAIL, true);\n-        final byte[] myBases = this.getBases();\n-        if( haplotypeInsertLocation == -1 || haplotypeInsertLocation + refAllele.length() >= myBases.length ) { // desired change falls inside deletion so don't bother creating a new haplotype\n+        final Pair<Integer, CigarOperator> haplotypeInsertLocationAndOperator = ReadUtils.getReadCoordinateForReferenceCoordinate(alignmentStartHapwrtRef, cigar, refInsertLocation);\n+\n+        // can't insert outside the haplotype or into a deletion\n+        if( haplotypeInsertLocationAndOperator.getLeft() == ReadUtils.CLIPPING_GOAL_NOT_REACHED || !haplotypeInsertLocationAndOperator.getRight().consumesReadBases() ) {\n+            return null;\n+        }\n+        final int haplotypeInsertLocation = haplotypeInsertLocationAndOperator.getLeft();\n+        final byte[] myBases = getBases();\n+\n+        // can't insert if we don't have any sequence after the inserted alt allele to span the new variant\n+        if (haplotypeInsertLocation + refAllele.length() >= myBases.length) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNjc0Mg=="}, "originalCommit": {"oid": "aa2f2bafb641d037263e43e107ee2c3ae866852b"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1127, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}