{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjUzMzAw", "number": 6757, "title": "Enable re-reblocking with no PLs", "bodyText": "For example. some gnomAD 3.1 samples were reblocked in production using the higher resolution schema, but needed to be reblocked again to be consistent with the gnomAD 3.0 schema, but PLs were removed for compression's sake.", "createdAt": "2020-08-18T18:02:05Z", "url": "https://github.com/broadinstitute/gatk/pull/6757", "merged": true, "mergeCommit": {"oid": "ade492a99cebce9d76981b113fcd029289492d09"}, "closed": true, "closedAt": "2020-12-01T16:25:37Z", "author": {"login": "ldgauthier"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW0FZwAFqTUxODI2Mjg5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh7CVUgH2gAyNDY5NjUzMzAwOmU5ZmNiNmNjYWM2NGM2YzZiNWI0NzQ3OGM5NWIyZTBhMWFkMjkzMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjYyODk5", "url": "https://github.com/broadinstitute/gatk/pull/6757#pullrequestreview-518262899", "createdAt": "2020-10-28T01:29:00Z", "commit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyOTowMVrOHpWvfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoyMjo1NlrOHpXnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNjI3MQ==", "bodyText": "END= annotation is not exclusive of hom-ref blocks, right? I guess within the context this method is used it is though. Perhaps can you add a comment indicating so.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513126271", "createdAt": "2020-10-28T01:29:01Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -256,7 +266,7 @@ private VariantContext regenotypeVC(final VariantContext originalVC) {\n     }\n \n     private boolean isHomRefBlock(final VariantContext result) {\n-        return result.getLog10PError() == VariantContext.NO_LOG10_PERROR;\n+        return result.hasAttribute(VCFConstants.END_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyODU1MQ==", "bodyText": "Shouldn't hasGQ be called before any getGQ?  Shouldn't it even fail if not?\nPerhaps you could force rgpThreshold to be 0 or greater in that case the == 0 is unnecessary. Fail if it is no in [0.0 ... MAX_VALUE] (so negatives, NaN and Infinities would fail).\nAlso based on the description of rgpThreshold sounds like these comparisons should < rather than <=. Perhaps the doc of the argument should be changed.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513128551", "createdAt": "2020-10-28T01:37:23Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -272,10 +282,34 @@ private boolean isHomRefCall(final VariantContext result) {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0)) {\n+        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyOTQwOA==", "bodyText": "Perhaps the warning message should say that we are using GQ in leu.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513129408", "createdAt": "2020-10-28T01:40:52Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -272,10 +282,34 @@ private boolean isHomRefCall(final VariantContext result) {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0)) {\n+        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {\n             return null;\n         }\n         else if (genotype.isCalled() && genotype.isHomRef()) {\n+            if (!genotype.hasPL()) {\n+                if (genotype.hasGQ()) {\n+                    logger.warn(\"PL is missing for hom ref genotype at at least one position for sample \" + genotype.getSampleName() + \": \" + result.getContig() + \":\" + result.getStart() +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzMTgyMg==", "bodyText": "Should this be an error instead of a warning?\nActually it really should as below there is code that clearly depends on it being a diploid and even may result in exception if not. Error makes more sense.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513131822", "createdAt": "2020-10-28T01:49:57Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -190,7 +198,9 @@ public void onTraversalStart() {\n         }\n         vcfWriter.writeHeader(new VCFHeader(headerLines, inputHeader.getGenotypeSamples()));\n \n-        logger.info(\"Notice that the -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this is tool assumes a diploid sample\");\n+        if (genotypeArgs.samplePloidy != PLOIDY_TWO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTE3Mg==", "bodyText": "I would compact the two last elses as minGQ = minGQ == -1 ? genotype.getGQ() : Math.min(...);", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513139172", "createdAt": "2020-10-28T02:17:04Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java", "diffHunk": "@@ -124,6 +128,15 @@ public void add(final int pos, final int newEnd, final Genotype genotype) {\n                 }\n             }\n         }\n+        if (minPPs != null) {\n+            minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPPs);\n+        } else if (minPLs != null) {\n+            minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPLs);\n+        } else if (minGQ == -1) {\n+            minGQ = genotype.getGQ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTcxNg==", "bodyText": "This test seems a bit weak.... can you do a more through test e.g. the unaffected blocks should be in the same order and unchanged... etc.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513139716", "createdAt": "2020-10-28T02:19:14Z", "author": {"login": "vruano"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java", "diffHunk": "@@ -185,4 +185,19 @@ public void testMQHeadersAreUpdated() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testReReblocking() {\n+        final File input = new File(getToolTestDataDir() + \"alreadyReblocked.chr22snippet.vcf\");\n+        final File output = createTempFile(\"rereblockedgvcf\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.add(\"V\", input)\n+                .addOutput(output);\n+        runCommandLine(args);\n+\n+        Pair<VCFHeader, List<VariantContext>> inputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(input.getAbsolutePath());\n+        Pair<VCFHeader, List<VariantContext>> outputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getAbsolutePath());\n+\n+        Assert.assertTrue(inputVCs.getRight().size() > outputVCs.getRight().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MDY3Ng==", "bodyText": "Looks a bit weak of a test. Anything else that can be tested", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513140676", "createdAt": "2020-10-28T02:22:56Z", "author": {"login": "vruano"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java", "diffHunk": "@@ -110,6 +110,22 @@ public void testCantAddDifferentNumbersOfPls(){\n         band.add(vc.getStart() + 1, getValidGenotypeBuilder().PL(new int[] {1,2,4,5,6}).make() );\n     }\n \n+    @Test\n+    public void testNoPLs() {\n+        //add VC with no PLs to block with PLs\n+        final VariantContext vc = getVariantContext();\n+        final GVCFBlock band = getHomRefBlock(getVariantContext());\n+        band.add(vc.getStart(), getValidGenotypeBuilder().make() );\n+        band.add(vc.getStart() + 1, getValidGenotypeBuilder().noPL().make());\n+        Assert.assertTrue(band.getSize() == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/613525738733233e46f44532ad3be73ec4ff3560", "committedDate": "2020-08-18T20:48:34Z", "message": "Fix unit tests too"}, "afterCommit": {"oid": "dcd1398afdb703df59efbfc13d5b4096210480fc", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/dcd1398afdb703df59efbfc13d5b4096210480fc", "committedDate": "2020-11-19T16:26:57Z", "message": "Address review comments; more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be3d05e22702dd721f0697e7fe0593e42fe55db", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/5be3d05e22702dd721f0697e7fe0593e42fe55db", "committedDate": "2020-11-30T19:14:38Z", "message": "Enable re-reblocking with no PLs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84303f2f41d500f83a87220653a6588fafc390c9", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/84303f2f41d500f83a87220653a6588fafc390c9", "committedDate": "2020-11-30T19:14:41Z", "message": "Fix unit tests too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91ca7d6bcc9ceba221b27c4ae925405dd636e8f", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/e91ca7d6bcc9ceba221b27c4ae925405dd636e8f", "committedDate": "2020-11-30T19:14:41Z", "message": "Address review comments; more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "committedDate": "2020-11-30T19:14:41Z", "message": "I built test data with bad PLs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cbb12c3644350638d188b86483e0b61e93bdb1c", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/5cbb12c3644350638d188b86483e0b61e93bdb1c", "committedDate": "2020-11-20T15:02:01Z", "message": "I built test data with bad PLs"}, "afterCommit": {"oid": "6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/6d30f93f036b4aaa418dcf54f524a1caf91fbc51", "committedDate": "2020-11-30T19:14:41Z", "message": "I built test data with bad PLs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9fcb6ccac64c6c6b5b47478c95b2e0a1ad29335", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/e9fcb6ccac64c6c6b5b47478c95b2e0a1ad29335", "committedDate": "2020-12-01T14:43:41Z", "message": "Maybe a sleep will fix the sporadic CNV WDL test failures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2697, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}