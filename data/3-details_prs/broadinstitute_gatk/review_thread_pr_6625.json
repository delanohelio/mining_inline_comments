{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzUyOTMz", "number": 6625, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMjowNFrOEBBYMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxNjoxNlrOEIeelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA2NjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMjowNFrOGcqbDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMjo1OTo1NFrOGcwQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwODM2NA==", "bodyText": "Can you fix the inaccurate comment above that if the first key was -1 then there was an N in the context?\nAlso, BaseUtils.simpleBaseToBaseIndex() will return 0 for '*' -- is this something we need to care about here?", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432708364", "createdAt": "2020-05-29T20:02:04Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariate.java", "diffHunk": "@@ -188,7 +188,7 @@ private static IntList contextWith(final byte[] bases, final int contextSize, fi\n             currentKey = 0;\n             currentNPenalty = contextSize - 1;\n             int offset = newBaseOffset;\n-            while (bases[currentNPenalty] != 'N') {\n+            while (BaseUtils.simpleBaseToBaseIndex(bases[currentNPenalty]) != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzk4Ng==", "bodyText": "for some reason we assume that * == A in this context...not sure how that helps....but if someone has a '*' in their non-empty read, God help them....", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432803986", "createdAt": "2020-05-30T02:59:54Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariate.java", "diffHunk": "@@ -188,7 +188,7 @@ private static IntList contextWith(final byte[] bases, final int contextSize, fi\n             currentKey = 0;\n             currentNPenalty = contextSize - 1;\n             int offset = newBaseOffset;\n-            while (bases[currentNPenalty] != 'N') {\n+            while (BaseUtils.simpleBaseToBaseIndex(bases[currentNPenalty]) != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwODM2NA=="}, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA3NTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowNToxOFrOGcqgvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzowMDoyNlrOGcwQvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwOTgyMg==", "bodyText": "I reiterate my fear (expressed in person) that even if we make ContextCovariate able to handle (or at least not crash on) non-ACGT bases, there will be other parts of BQSR that can't handle them. We should wait until this branch has a successful run on the sample(s) that revealed this problem before merging.", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432709822", "createdAt": "2020-05-29T20:05:18Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariate.java", "diffHunk": "@@ -188,7 +188,7 @@ private static IntList contextWith(final byte[] bases, final int contextSize, fi\n             currentKey = 0;\n             currentNPenalty = contextSize - 1;\n             int offset = newBaseOffset;\n-            while (bases[currentNPenalty] != 'N') {\n+            while (BaseUtils.simpleBaseToBaseIndex(bases[currentNPenalty]) != -1) {\n                 final int baseIndex = BaseUtils.simpleBaseToBaseIndex(bases[currentNPenalty]);\n                 currentKey |= (baseIndex << offset);\n                 offset -= 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNDAyOA==", "bodyText": "agreed. the production team has this branch and is running the failed sample against it.", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432804028", "createdAt": "2020-05-30T03:00:26Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariate.java", "diffHunk": "@@ -188,7 +188,7 @@ private static IntList contextWith(final byte[] bases, final int contextSize, fi\n             currentKey = 0;\n             currentNPenalty = contextSize - 1;\n             int offset = newBaseOffset;\n-            while (bases[currentNPenalty] != 'N') {\n+            while (BaseUtils.simpleBaseToBaseIndex(bases[currentNPenalty]) != -1) {\n                 final int baseIndex = BaseUtils.simpleBaseToBaseIndex(bases[currentNPenalty]);\n                 currentKey |= (baseIndex << offset);\n                 offset -= 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwOTgyMg=="}, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA4MjgyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowODoyMlrOGcql1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowODoyMlrOGcql1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMTEyNA==", "bodyText": "All tests that generate random data using the rng returned by Utils.getRandomGenerator() should call Utils.resetRandomGenerator() at the top to make them deterministic/repeatable (I know this is not your problem, but since you're in here...)", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432711124", "createdAt": "2020-05-29T20:08:22Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -34,7 +35,8 @@ public void testSimpleContexts() {\n         final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n \n         for(int i = 0; i < 10; i++) {\n-            final GATKRead read = ArtificialReadUtils.createRandomRead(header, 1000);\n+            final GATKRead read = ArtificialReadUtils.createRandomRead(header, 1000,false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA5MDU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxMToxMlrOGcqqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzowMDo1MlrOGcwQ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMjM2Mw==", "bodyText": "Call Utils.resetRandomGenerator() first", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432712363", "createdAt": "2020-05-29T20:11:12Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNDA3OQ==", "bodyText": "should I do that once, in the setup, or in test?", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432804079", "createdAt": "2020-05-30T03:00:52Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMjM2Mw=="}, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA5NzgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxNDowMFrOGcqvUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzowMToyNVrOGcwREw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMzU1NA==", "bodyText": "Maybe instead of randomizing the strand, the DataProvider should just have an additional loop over {true, false} for the strand to systematically test the possibilities.", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432713554", "createdAt": "2020-05-29T20:14:00Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+        final GATKRead read = ArtificialReadUtils.createRandomRead(header, 10,false);\n+        read.getBasesNoCopy()[i] = base;\n+\n+        read.setIsReverseStrand(rnd.nextBoolean());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNDExNQ==", "bodyText": "hey, I just copied what was done above...but OK.", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432804115", "createdAt": "2020-05-30T03:01:25Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+        final GATKRead read = ArtificialReadUtils.createRandomRead(header, 10,false);\n+        read.getBasesNoCopy()[i] = base;\n+\n+        read.setIsReverseStrand(rnd.nextBoolean());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMzU1NA=="}, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTEwMzM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxNjoxNlrOGcqy7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzoxNjoyMlrOGcwUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNDQ3Nw==", "bodyText": "I think it's worth having a couple of test cases that have more than one \"annoying base.\" Won't the code you patched behave differently in the case of 1 non-ACGT base vs. the case of 2 non-ACGT bases?", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432714477", "createdAt": "2020-05-29T20:16:16Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+        final GATKRead read = ArtificialReadUtils.createRandomRead(header, 10,false);\n+        read.getBasesNoCopy()[i] = base;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNTA1NA==", "bodyText": "ok.", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432805054", "createdAt": "2020-05-30T03:16:22Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+        final GATKRead read = ArtificialReadUtils.createRandomRead(header, 10,false);\n+        read.getBasesNoCopy()[i] = base;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNDQ3Nw=="}, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTEwNjA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxNzoxOVrOGcq0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzoxNjoyOFrOGcwUxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNDkwNw==", "bodyText": "Have you confirmed that this test case fails without your patch?", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432714907", "createdAt": "2020-05-29T20:17:19Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+        final GATKRead read = ArtificialReadUtils.createRandomRead(header, 10,false);\n+        read.getBasesNoCopy()[i] = base;\n+\n+        read.setIsReverseStrand(rnd.nextBoolean());\n+        final GATKRead clippedRead = ReadClipper.clipLowQualEnds(read, RAC.LOW_QUAL_TAIL, ClippingRepresentation.WRITE_NS);\n+        final ReadCovariates readCovariates = new ReadCovariates(read.getLength(), 1, new CovariateKeyCache());\n+        covariate.recordValues(read, header, readCovariates, true);\n+\n+        verifyCovariateArray(readCovariates.getMismatchesKeySet(), RAC.MISMATCHES_CONTEXT_SIZE, clippedRead, covariate, RAC.LOW_QUAL_TAIL);\n+        verifyCovariateArray(readCovariates.getInsertionsKeySet(), RAC.INDELS_CONTEXT_SIZE, clippedRead, covariate, RAC.LOW_QUAL_TAIL);\n+        verifyCovariateArray(readCovariates.getDeletionsKeySet(), RAC.INDELS_CONTEXT_SIZE, clippedRead, covariate, RAC.LOW_QUAL_TAIL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNTA2MA==", "bodyText": "yes.", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r432805060", "createdAt": "2020-05-30T03:16:28Z", "author": {"login": "yfarjoun"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +48,42 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final List<Object[]> tests = new ArrayList<>();\n+        for (final byte base : \"NBACGTUMLA\".getBytes()) {\n+            for (int i = 0; i < 10; i++) {\n+                tests.add(new Object[]{base, i});\n+            }\n+        }\n+        return tests.iterator();\n+    }\n+\n+    @Test(dataProvider = \"AnnoyingReads\")\n+    public void testContextsAnnoyingReads(final byte base, final int i) {\n+        final Random rnd = Utils.getRandomGenerator();\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+        final GATKRead read = ArtificialReadUtils.createRandomRead(header, 10,false);\n+        read.getBasesNoCopy()[i] = base;\n+\n+        read.setIsReverseStrand(rnd.nextBoolean());\n+        final GATKRead clippedRead = ReadClipper.clipLowQualEnds(read, RAC.LOW_QUAL_TAIL, ClippingRepresentation.WRITE_NS);\n+        final ReadCovariates readCovariates = new ReadCovariates(read.getLength(), 1, new CovariateKeyCache());\n+        covariate.recordValues(read, header, readCovariates, true);\n+\n+        verifyCovariateArray(readCovariates.getMismatchesKeySet(), RAC.MISMATCHES_CONTEXT_SIZE, clippedRead, covariate, RAC.LOW_QUAL_TAIL);\n+        verifyCovariateArray(readCovariates.getInsertionsKeySet(), RAC.INDELS_CONTEXT_SIZE, clippedRead, covariate, RAC.LOW_QUAL_TAIL);\n+        verifyCovariateArray(readCovariates.getDeletionsKeySet(), RAC.INDELS_CONTEXT_SIZE, clippedRead, covariate, RAC.LOW_QUAL_TAIL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNDkwNw=="}, "originalCommit": {"oid": "46ef842a65b48742eff3b4e2d00bbfdb0ad119e7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTgwNzYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo1MDozNFrOGlOcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo1MDozNFrOGlOcaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4NzE0NQ==", "bodyText": "I don't think the randomness really adds much value in this DataProvider. Since the individual IUPAC bases are not treated differently by the code, scrambling their relative order doesn't make much difference once you've proved that we can handle each one -- and despite having 100 random cases I think we're actually still missing important test cases that are worth covering.\nRecommend rewriting this DataProvider to eliminate the randomness completely and substituting just the following curated list of test cases instead:\n\nA string of all IUPAC bases (positive strand)\nA string of all IUPAC bases (negative strand)\nA string that starts with an ACGT base, then has a mix of ACGT and IUPAC bases (positive strand)\nA string that starts with an ACGT base, then has a mix of ACGT and IUPAC bases (negative strand)\nA string that starts with an IUPAC base, then has a mix of ACGT and IUPAC bases (positive strand)\nA string that starts with an IUPAC base, then has a mix of ACGT and IUPAC bases (negative strand)\nA string that ends with an ACGT base, and has a mix of ACGT and IUPAC bases (positive strand)\nA string that ends with an ACGT base, and has a mix of ACGT and IUPAC bases (negative strand)\nA string that ends with an IUPAC base, and has a mix of ACGT and IUPAC bases (positive strand)\nA string that ends with an IUPAC base, and has a mix of ACGT and IUPAC bases (negative strand)", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r441687145", "createdAt": "2020-06-17T16:50:34Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,12 +50,54 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final String IUPAC_bases = \"NBTRML\";\n+        final int readLength = 1000;\n+        final double pStop = 0.02;\n+        final int nTests = 100;\n+        final List<Object[]> tests = new ArrayList<>();\n+\n+        final Random randomGenerator = Utils.getRandomGenerator();\n+        for (int i = 0; i < nTests; i++) {\n+            final List<Byte> bases = new ArrayList<>();\n+            final List<Integer> positions = new ArrayList<>();\n+            while (randomGenerator.nextDouble() > pStop) {\n+                bases.add(IUPAC_bases.getBytes()[randomGenerator.nextInt(IUPAC_bases.length())]);\n+                positions.add(randomGenerator.nextInt(readLength));\n+            }\n+            tests.add(new Object[]{bases, positions, randomGenerator.nextBoolean(), readLength});\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80a2d3af837bd2e18d93c94eb1520270d5cd466f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzIzNDEyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxNjoxNlrOGodsYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxNjoxNlrOGodsYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MjcyMQ==", "bodyText": "This string has some ACGT bases in it, despite being described as \"A string of all IUPAC bases\". I think the \"all IUPAC\" case is definitely worth covering here...", "url": "https://github.com/broadinstitute/gatk/pull/6625#discussion_r445082721", "createdAt": "2020-06-24T18:16:16Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/recalibration/covariates/ContextCovariateUnitTest.java", "diffHunk": "@@ -46,52 +51,97 @@ public void testSimpleContexts() {\n         }\n     }\n \n-    public static void verifyCovariateArray(int[][] values, int contextSize, GATKRead read, Covariate contextCovariate, final byte lowQualTail) {\n+    private static void verifyCovariateArray(final int[][] values, final int contextSize, final GATKRead read, final Covariate contextCovariate, final byte lowQualTail) {\n         for (int i = 0; i < values.length; i++) {\n             Assert.assertEquals(contextCovariate.formatKey(values[i][0]), expectedContext(read, i, contextSize, lowQualTail), \"offset \" + i);\n         }\n     }\n \n-    @DataProvider(name=\"strandedBytes\")\n+    @DataProvider\n+    Iterator<Object[]> AnnoyingReads() {\n+        final SAMFileHeader header = ArtificialReadUtils.createArtificialSamHeader();\n+\n+        final String[] bases = new String[] {\n+//           A string of all IUPAC bases\n+                \"NBTRMLNACMGRSVTWYHKDBNABTRMLNBTRML\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23da86f4640de66b4d3627b8c5b30c46d6137eac"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 926, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}