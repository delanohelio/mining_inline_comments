{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNjc1MTUz", "number": 6847, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozODoyM1rOEp6Zsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1Njo0MFrOEp6tcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzgzOTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozODoyM1rOHb34Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxOTozOTo0MFrOHcJthw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4OTE0Nw==", "bodyText": "Since you are reverting this method back to a version that handles nulls, I think you should remove the perAlleleValues.values().removeIf(Objects::isNull); line you added to computeSBAnnotation() above as well, for consistency with the pre-bug behavior.", "url": "https://github.com/broadinstitute/gatk/pull/6847#discussion_r498989147", "createdAt": "2020-10-02T18:38:23Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtils.java", "diffHunk": "@@ -38,21 +38,37 @@\n      * @param perAlleleValues forward and reverse read counts for each allele\n      * @return a String appropriate to use for annotating a GVCF\n      */\n-    protected static String makeRawAnnotationString(final List<Allele> vcAlleles, final Map<Allele, List<Integer>> perAlleleValues) {\n-        final List<String> alleleStrings = vcAlleles.stream()\n-                // does not replace a null value with zero list - only if the key is not in the map\n-                .map(a -> perAlleleValues.getOrDefault(a, ZERO_LIST))\n-                .map(StrandBiasUtils::encode)\n-                .collect(Collectors.toList());\n-        return String.join(AnnotationUtils.ALLELE_SPECIFIC_RAW_DELIM, alleleStrings);\n-\n+    public static String makeRawAnnotationString(final List<Allele> vcAlleles, final Map<Allele, List<Integer>> perAlleleValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32805e15ac05616000e66985e9e70a429eb48abc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MTI4Nw==", "bodyText": "reverted to previous code", "url": "https://github.com/broadinstitute/gatk/pull/6847#discussion_r499281287", "createdAt": "2020-10-04T19:39:40Z", "author": {"login": "ahaessly"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtils.java", "diffHunk": "@@ -38,21 +38,37 @@\n      * @param perAlleleValues forward and reverse read counts for each allele\n      * @return a String appropriate to use for annotating a GVCF\n      */\n-    protected static String makeRawAnnotationString(final List<Allele> vcAlleles, final Map<Allele, List<Integer>> perAlleleValues) {\n-        final List<String> alleleStrings = vcAlleles.stream()\n-                // does not replace a null value with zero list - only if the key is not in the map\n-                .map(a -> perAlleleValues.getOrDefault(a, ZERO_LIST))\n-                .map(StrandBiasUtils::encode)\n-                .collect(Collectors.toList());\n-        return String.join(AnnotationUtils.ALLELE_SPECIFIC_RAW_DELIM, alleleStrings);\n-\n+    public static String makeRawAnnotationString(final List<Allele> vcAlleles, final Map<Allele, List<Integer>> perAlleleValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4OTE0Nw=="}, "originalCommit": {"oid": "32805e15ac05616000e66985e9e70a429eb48abc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzg3MDAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_StrandBiasTestUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo0OTo0OVrOHb4MIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo0OTo0OVrOHb4MIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NDIxMA==", "bodyText": "Give the test a more specific name: testCombineRawDataNullPointerExceptionIssue6766()", "url": "https://github.com/broadinstitute/gatk/pull/6847#discussion_r498994210", "createdAt": "2020-10-02T18:49:49Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_StrandBiasTestUnitTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific;\n+\n+import htsjdk.variant.variantcontext.*;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class AS_StrandBiasTestUnitTest extends GATKBaseTest {\n+\n+    private static final Allele REF = Allele.create(\"T\", true);\n+    private static final Allele ALT = Allele.create(\"A\", false);\n+\n+    /**\n+     * Test for issue #6766\n+     */\n+    @Test\n+    public void testCombineRawData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32805e15ac05616000e66985e9e70a429eb48abc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzg4MDgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_StrandBiasTestUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1MzozNVrOHb4TEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1MzozNVrOHb4TEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NTk4Nw==", "bodyText": "Can you confirm that with the previous version of the StrandBiasUtils methods we do get a NullPointerException here?", "url": "https://github.com/broadinstitute/gatk/pull/6847#discussion_r498995987", "createdAt": "2020-10-02T18:53:35Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_StrandBiasTestUnitTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific;\n+\n+import htsjdk.variant.variantcontext.*;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class AS_StrandBiasTestUnitTest extends GATKBaseTest {\n+\n+    private static final Allele REF = Allele.create(\"T\", true);\n+    private static final Allele ALT = Allele.create(\"A\", false);\n+\n+    /**\n+     * Test for issue #6766\n+     */\n+    @Test\n+    public void testCombineRawData() {\n+        final List<Allele> vcAlleles = Arrays.asList(REF, ALT);\n+        final List<ReducibleAnnotationData<?>> combinedVCdata = new ArrayList<>();\n+        // The commented out code would be a normal way to create the combinedVCdata, but this did not reproduce the null pointer exception\n+        // we are testing for. The following one line did even though that probably would not occur if reading in from a gvcf.\n+//        ReducibleAnnotationData<List<Integer>> data = new ReducibleAnnotationData<>(null);\n+//        data.putAttribute(ALT, Arrays.asList(33640, 10));\n+//        data.putAttribute(REF, Arrays.asList(1,2));\n+//        combinedVCdata.add(data);\n+\n+        // This set SB data for \".\" (i.e. the missing allele)\n+        combinedVCdata.add(new ReducibleAnnotationData<>(\"36000,10\"));  //10 MQ60 reads\n+\n+        AS_StrandBiasTest annotator = new AS_StrandOddsRatio();\n+\n+        try {\n+            final Map<String, Object> combined = annotator.combineRawData(vcAlleles, combinedVCdata);\n+            final String combinedListString = (String) combined.get(annotator.getPrimaryRawKey());\n+            // These are both 0 because we did not set any SB data for either allele\n+            Assert.assertEquals(combinedListString, \"0,0|0,0\");\n+        } catch (NullPointerException npe) {\n+            Assert.fail(\"This code should not be throwing a NullPointerException\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32805e15ac05616000e66985e9e70a429eb48abc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzg4NzI0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtilsUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1NTo0NVrOHb4XAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1NTo0NVrOHb4XAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5Njk5Mw==", "bodyText": "Give this one a more specific name too: testMakeRawAnnotationStringsNullPointerExceptionIssue6766()", "url": "https://github.com/broadinstitute/gatk/pull/6847#discussion_r498996993", "createdAt": "2020-10-02T18:55:45Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtilsUnitTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific;\n+\n+import htsjdk.variant.variantcontext.*;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+\n+public class StrandBiasUtilsUnitTest extends GATKBaseTest {\n+\n+    private final String sample1 = \"NA1\";\n+    private static final String CONTIG = \"1\";\n+\n+    private static final Allele REF = Allele.create(\"T\", true);\n+    private static final Allele ALT = Allele.create(\"A\", false);\n+\n+    private VariantContext makeVC(final long position) {\n+        final GenotypesContext testGC = GenotypesContext.create(2);\n+        // sample1 -> A/T with GQ 30\n+        testGC.add(new GenotypeBuilder(sample1).alleles(Arrays.asList(REF, ALT)).GQ(30).make());\n+\n+        return (new VariantContextBuilder())\n+                .alleles(Arrays.asList(REF, ALT)).chr(CONTIG).start(position).stop(position).genotypes(testGC).make();\n+    }\n+\n+    /**\n+     * Test for issue #6766\n+     */\n+    @Test\n+    public void testMakeRawAnnotationStrings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32805e15ac05616000e66985e9e70a429eb48abc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzg4OTc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtilsUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1Njo0MFrOHb4Yqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1Njo0MFrOHb4Yqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NzQxOQ==", "bodyText": "Same question here: did the NullPointerException get triggered with the previous version of StrandBiasUtils?", "url": "https://github.com/broadinstitute/gatk/pull/6847#discussion_r498997419", "createdAt": "2020-10-02T18:56:40Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/StrandBiasUtilsUnitTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific;\n+\n+import htsjdk.variant.variantcontext.*;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.*;\n+\n+public class StrandBiasUtilsUnitTest extends GATKBaseTest {\n+\n+    private final String sample1 = \"NA1\";\n+    private static final String CONTIG = \"1\";\n+\n+    private static final Allele REF = Allele.create(\"T\", true);\n+    private static final Allele ALT = Allele.create(\"A\", false);\n+\n+    private VariantContext makeVC(final long position) {\n+        final GenotypesContext testGC = GenotypesContext.create(2);\n+        // sample1 -> A/T with GQ 30\n+        testGC.add(new GenotypeBuilder(sample1).alleles(Arrays.asList(REF, ALT)).GQ(30).make());\n+\n+        return (new VariantContextBuilder())\n+                .alleles(Arrays.asList(REF, ALT)).chr(CONTIG).start(position).stop(position).genotypes(testGC).make();\n+    }\n+\n+    /**\n+     * Test for issue #6766\n+     */\n+    @Test\n+    public void testMakeRawAnnotationStrings() {\n+        VariantContext vc = makeVC(1);\n+        Map<Allele, List<Integer>> perAlleleValues = new LinkedHashMap<>();\n+        perAlleleValues.put(REF, Arrays.asList(2, 5));\n+        perAlleleValues.put(ALT, null);\n+        try {\n+            StrandBiasUtils.makeRawAnnotationString(vc.getAlleles(), perAlleleValues);\n+        } catch (NullPointerException npe) {\n+            Assert.fail(\"This code should not be throwing a NullPointerException\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32805e15ac05616000e66985e9e70a429eb48abc"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 798, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}