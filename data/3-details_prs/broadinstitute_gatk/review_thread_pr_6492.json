{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzcxNjg0", "number": 6492, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMzozNVrODnhtxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0NzoyN1rODnn0RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzczNDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMzozNVrOF1k-3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoyODoyMVrOF1oReQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNDc2NA==", "bodyText": "Seems like some duplicated code with isLineCommented but maybe complexity of sharing it makes it not worthwhile to refactor.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391724764", "createdAt": "2020-03-12T16:03:35Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "diffHunk": "@@ -474,26 +474,53 @@ boolean checkHeaderLineStartsWith(final List<String> header, final int lineNum,\n \n     /**\n      * Checks that the given header line number starts with the given text.\n+     * Uses {@link #getAllLineComments()} to check for comments at the line starts.\n      * @param header A {@link List<String>} containing a header to validate.\n      * @param lineNum Line number in the header to check.\n      * @param startingText {@link String} containing text that the line should start with\n      * @param throwIfInvalid If {@code true} will throw a {@link UserException} instead of returning false.\n      * @return {@code true} IFF the header line number {@code lineNum} starts with {@code startingText}; {@code false} otherwise.\n      */\n     boolean checkHeaderLineStartsWith(final List<String> header, final int lineNum, final String startingText, final boolean throwIfInvalid ) {\n-        if ( !header.get(lineNum).startsWith(getLineComment() + startingText) ) {\n+        boolean foundGoodLine = false;\n+        for ( final String commentPrefix : getAllLineComments() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3ODY4MQ==", "bodyText": "Yeah - I was thinking about this as I was implementing it.  I can refactor it.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391778681", "createdAt": "2020-03-12T17:28:21Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "diffHunk": "@@ -474,26 +474,53 @@ boolean checkHeaderLineStartsWith(final List<String> header, final int lineNum,\n \n     /**\n      * Checks that the given header line number starts with the given text.\n+     * Uses {@link #getAllLineComments()} to check for comments at the line starts.\n      * @param header A {@link List<String>} containing a header to validate.\n      * @param lineNum Line number in the header to check.\n      * @param startingText {@link String} containing text that the line should start with\n      * @param throwIfInvalid If {@code true} will throw a {@link UserException} instead of returning false.\n      * @return {@code true} IFF the header line number {@code lineNum} starts with {@code startingText}; {@code false} otherwise.\n      */\n     boolean checkHeaderLineStartsWith(final List<String> header, final int lineNum, final String startingText, final boolean throwIfInvalid ) {\n-        if ( !header.get(lineNum).startsWith(getLineComment() + startingText) ) {\n+        boolean foundGoodLine = false;\n+        for ( final String commentPrefix : getAllLineComments() ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNDc2NA=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzczOTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowNDo0OFrOF1lB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoyODozNlrOF1oSBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTU1Mw==", "bodyText": "COMMENT_PREFIXES and group it with the other statics", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391725553", "createdAt": "2020-03-12T16:04:48Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -29,12 +28,16 @@\n     //==================================================================================================================\n     // Private Static Members:\n \n+    private static String VERSION_FIELD = \"genome-version\";\n+    private static String DEFAULT_VERSION = \"ENSEMBL_DEFAULT_VERSION\";\n+\n     //==================================================================================================================\n     // Private Members:\n \n-    private final List<String> header         = new ArrayList<>();\n-    private       int          currentLineNum = 1;\n-    private       String       version        = \"\";\n+    private final        List<String> header          = new ArrayList<>();\n+    private              int          currentLineNum  = 1;\n+    private              String       version         = null;\n+    private static final Set<String>  commentPrefixes = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(\"#!\", \"##\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3ODgyMw==", "bodyText": "rgr.  Fixed!", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391778823", "createdAt": "2020-03-12T17:28:36Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -29,12 +28,16 @@\n     //==================================================================================================================\n     // Private Static Members:\n \n+    private static String VERSION_FIELD = \"genome-version\";\n+    private static String DEFAULT_VERSION = \"ENSEMBL_DEFAULT_VERSION\";\n+\n     //==================================================================================================================\n     // Private Members:\n \n-    private final List<String> header         = new ArrayList<>();\n-    private       int          currentLineNum = 1;\n-    private       String       version        = \"\";\n+    private final        List<String> header          = new ArrayList<>();\n+    private              int          currentLineNum  = 1;\n+    private              String       version         = null;\n+    private static final Set<String>  commentPrefixes = Collections.unmodifiableSet(new LinkedHashSet<>(Arrays.asList(\"#!\", \"##\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTU1Mw=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc0MjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowNTo0M1rOF1lD_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0MzozMVrOF1uq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNjA3Nw==", "bodyText": "Oh, I didn't realize that.  Does that imply that the ensemble codec should extend GencodecodeGtfCodec instead of being a parallel class to it?  Maybe something to think about in the future.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391726077", "createdAt": "2020-03-12T16:05:43Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -120,7 +121,28 @@ void incrementLineNumber() {\n \n     @Override\n     String getUcscVersionNumber() {\n-        return getVersionFromHeader();\n+        return version;\n+    }\n+\n+    @Override\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Because ENSEMBL GTF files are strictly a superset of GENCODE GTF files, we need to do some extra checks here to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4MDczMw==", "bodyText": "Yeah - I didn't realize it until doing the work for this issue.\nIt's probably worth looking into doing that - it would be nice to have a single point of control for this.  I also need to change the name of some other classes in response to having multiple kinds of GTF files, but I wanted to leave that out of this PR for simplicity.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391780733", "createdAt": "2020-03-12T17:31:39Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -120,7 +121,28 @@ void incrementLineNumber() {\n \n     @Override\n     String getUcscVersionNumber() {\n-        return getVersionFromHeader();\n+        return version;\n+    }\n+\n+    @Override\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Because ENSEMBL GTF files are strictly a superset of GENCODE GTF files, we need to do some extra checks here to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNjA3Nw=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MzUxOQ==", "bodyText": "I agree, that's a different pr.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391883519", "createdAt": "2020-03-12T20:43:31Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -120,7 +121,28 @@ void incrementLineNumber() {\n \n     @Override\n     String getUcscVersionNumber() {\n-        return getVersionFromHeader();\n+        return version;\n+    }\n+\n+    @Override\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Because ENSEMBL GTF files are strictly a superset of GENCODE GTF files, we need to do some extra checks here to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNjA3Nw=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc2NjEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMTo0OVrOF1lTTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozMjoxNVrOF1oa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyOTk5Ng==", "bodyText": "disgusting", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391729996", "createdAt": "2020-03-12T16:11:49Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -162,23 +203,27 @@ static boolean validateEnsemblGtfFeature(final GencodeGtfFeature feature) {\n      */\n     @VisibleForTesting\n     boolean validateHeader(final List<String> header, final boolean throwIfInvalid) {\n-        if ( header.size() != HEADER_NUM_LINES) {\n-            if ( throwIfInvalid ) {\n-                throw new UserException.MalformedFile(\n-                        \"ENSEMBL GTF Header is of unexpected length: \" +\n-                                header.size() + \" != \" + HEADER_NUM_LINES);\n-            }\n-            else {\n-                return false;\n+        // As it turns out, the ENSEMBL GTF header is pretty loosy-goosy.\n+        // No fields are required, and therefore it could actually be empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4MTA3NA==", "bodyText": "Yeah - according to the spec, you can get the version from the file names.\nI plan on implementing this after the NameAwareCodec PR goes in.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391781074", "createdAt": "2020-03-12T17:32:15Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -162,23 +203,27 @@ static boolean validateEnsemblGtfFeature(final GencodeGtfFeature feature) {\n      */\n     @VisibleForTesting\n     boolean validateHeader(final List<String> header, final boolean throwIfInvalid) {\n-        if ( header.size() != HEADER_NUM_LINES) {\n-            if ( throwIfInvalid ) {\n-                throw new UserException.MalformedFile(\n-                        \"ENSEMBL GTF Header is of unexpected length: \" +\n-                                header.size() + \" != \" + HEADER_NUM_LINES);\n-            }\n-            else {\n-                return false;\n+        // As it turns out, the ENSEMBL GTF header is pretty loosy-goosy.\n+        // No fields are required, and therefore it could actually be empty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyOTk5Ng=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc3MTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxMzoxOVrOF1lWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0Mzo1NVrOF1uryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMDg4Ng==", "bodyText": "Are there fields that YOU require even if ENSEMBLE doesn't?  It might be a good idea to warn if things like the version are missing.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391730886", "createdAt": "2020-03-12T16:13:19Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -162,23 +203,27 @@ static boolean validateEnsemblGtfFeature(final GencodeGtfFeature feature) {\n      */\n     @VisibleForTesting\n     boolean validateHeader(final List<String> header, final boolean throwIfInvalid) {\n-        if ( header.size() != HEADER_NUM_LINES) {\n-            if ( throwIfInvalid ) {\n-                throw new UserException.MalformedFile(\n-                        \"ENSEMBL GTF Header is of unexpected length: \" +\n-                                header.size() + \" != \" + HEADER_NUM_LINES);\n-            }\n-            else {\n-                return false;\n+        // As it turns out, the ENSEMBL GTF header is pretty loosy-goosy.\n+        // No fields are required, and therefore it could actually be empty.\n+\n+        // Rather than attempting to validate the file, here we just\n+        // assert that all header lines begin with a comment (they should already).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4MjE3OQ==", "bodyText": "I would love to make it more restrictive, but I don't want to require users to modify the files after downloading them.  If we end up writing a downloader tool that could create these metadata entries.\nI'm not sure adding in warnings will be productive - users should never be creating these files, they should just be downloading them directly from ENSEMBL.  So it's really an ENSEMBL issue.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391782179", "createdAt": "2020-03-12T17:34:06Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -162,23 +203,27 @@ static boolean validateEnsemblGtfFeature(final GencodeGtfFeature feature) {\n      */\n     @VisibleForTesting\n     boolean validateHeader(final List<String> header, final boolean throwIfInvalid) {\n-        if ( header.size() != HEADER_NUM_LINES) {\n-            if ( throwIfInvalid ) {\n-                throw new UserException.MalformedFile(\n-                        \"ENSEMBL GTF Header is of unexpected length: \" +\n-                                header.size() + \" != \" + HEADER_NUM_LINES);\n-            }\n-            else {\n-                return false;\n+        // As it turns out, the ENSEMBL GTF header is pretty loosy-goosy.\n+        // No fields are required, and therefore it could actually be empty.\n+\n+        // Rather than attempting to validate the file, here we just\n+        // assert that all header lines begin with a comment (they should already).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMDg4Ng=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MzcyMw==", "bodyText": "That seems reasonable.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391883723", "createdAt": "2020-03-12T20:43:55Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/EnsemblGtfCodec.java", "diffHunk": "@@ -162,23 +203,27 @@ static boolean validateEnsemblGtfFeature(final GencodeGtfFeature feature) {\n      */\n     @VisibleForTesting\n     boolean validateHeader(final List<String> header, final boolean throwIfInvalid) {\n-        if ( header.size() != HEADER_NUM_LINES) {\n-            if ( throwIfInvalid ) {\n-                throw new UserException.MalformedFile(\n-                        \"ENSEMBL GTF Header is of unexpected length: \" +\n-                                header.size() + \" != \" + HEADER_NUM_LINES);\n-            }\n-            else {\n-                return false;\n+        // As it turns out, the ENSEMBL GTF header is pretty loosy-goosy.\n+        // No fields are required, and therefore it could actually be empty.\n+\n+        // Rather than attempting to validate the file, here we just\n+        // assert that all header lines begin with a comment (they should already).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMDg4Ng=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzc3NTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/GencodeGtfFeature.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoxNDoxM1rOF1lZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzozNToyNFrOF1oiAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTU2NA==", "bodyText": "static", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391731564", "createdAt": "2020-03-12T16:14:13Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/GencodeGtfFeature.java", "diffHunk": "@@ -44,6 +44,15 @@\n \n     private static final Logger logger = LogManager.getLogger(GencodeGtfFeature.class);\n \n+    // ===========================================================================\n+\n+\n+    public static final String ANNOTATION_SOURCE_ENSEMBL = \"ENSEMBL\";\n+    public static final String ANNOTATION_SOURCE_HAVANA = \"HAVANA\";\n+    public static String ANNOTATION_SOURCE_ENA = \"ena\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4Mjg0NQ==", "bodyText": "final?\n:P", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391782845", "createdAt": "2020-03-12T17:35:18Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/GencodeGtfFeature.java", "diffHunk": "@@ -44,6 +44,15 @@\n \n     private static final Logger logger = LogManager.getLogger(GencodeGtfFeature.class);\n \n+    // ===========================================================================\n+\n+\n+    public static final String ANNOTATION_SOURCE_ENSEMBL = \"ENSEMBL\";\n+    public static final String ANNOTATION_SOURCE_HAVANA = \"HAVANA\";\n+    public static String ANNOTATION_SOURCE_ENA = \"ena\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTU2NA=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc4MjkxNQ==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391782915", "createdAt": "2020-03-12T17:35:24Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/GencodeGtfFeature.java", "diffHunk": "@@ -44,6 +44,15 @@\n \n     private static final Logger logger = LogManager.getLogger(GencodeGtfFeature.class);\n \n+    // ===========================================================================\n+\n+\n+    public static final String ANNOTATION_SOURCE_ENSEMBL = \"ENSEMBL\";\n+    public static final String ANNOTATION_SOURCE_HAVANA = \"HAVANA\";\n+    public static String ANNOTATION_SOURCE_ENA = \"ena\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczMTU2NA=="}, "originalCommit": {"oid": "331b0e30b8ea0c93bc1da88acd4f17f51e3b373a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODczNDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDo0NzoyN1rOF1uyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowMDo1M1rOF1vJRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NTMyOQ==", "bodyText": "shouldn't the other other implementation make use of this one now?", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391885329", "createdAt": "2020-03-12T20:47:27Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "diffHunk": "@@ -521,6 +515,25 @@ boolean isLineCommented(final String line) {\n         return isCommented;\n     }\n \n+    /**\n+     * Checks whether the given line is commented out or not and if the content of the line begins with the given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39bdddf1e8e7a0df63af56722250605299a75abe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4OTU0Ng==", "bodyText": "Oops.  Yes it should!", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391889546", "createdAt": "2020-03-12T20:56:57Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "diffHunk": "@@ -521,6 +515,25 @@ boolean isLineCommented(final String line) {\n         return isCommented;\n     }\n \n+    /**\n+     * Checks whether the given line is commented out or not and if the content of the line begins with the given", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NTMyOQ=="}, "originalCommit": {"oid": "39bdddf1e8e7a0df63af56722250605299a75abe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5MTI2OA==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6492#discussion_r391891268", "createdAt": "2020-03-12T21:00:53Z", "author": {"login": "jonn-smith"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/codecs/gtf/AbstractGtfCodec.java", "diffHunk": "@@ -521,6 +515,25 @@ boolean isLineCommented(final String line) {\n         return isCommented;\n     }\n \n+    /**\n+     * Checks whether the given line is commented out or not and if the content of the line begins with the given", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NTMyOQ=="}, "originalCommit": {"oid": "39bdddf1e8e7a0df63af56722250605299a75abe"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1129, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}