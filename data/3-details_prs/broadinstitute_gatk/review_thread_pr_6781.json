{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTAyNTQ0", "number": 6781, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozNjo1M1rOEe9qQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1OTowNVrOEe-Qsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTAyOTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozNjo1M1rOHK8YVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0MTo1MFrOHLFlWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw==", "bodyText": "Move to SequenceDictionaryUtils (or, better, use one of the existing methods there like SequenceDictionaryUtils.getContigNamesList())", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481237077", "createdAt": "2020-09-01T15:36:53Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n-                Math.min(referenceReader.getSequenceDictionary().getSequence(genomeLoc.getContig()).getSequenceLength(), genomeLoc.getEnd() + padding) ).getBases();\n+                Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n+    }\n+\n+    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Nzk2MA==", "bodyText": "Of course that exists already.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481287960", "createdAt": "2020-09-01T16:45:41Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n-                Math.min(referenceReader.getSequenceDictionary().getSequence(genomeLoc.getContig()).getSequenceLength(), genomeLoc.getEnd() + padding) ).getBases();\n+                Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n+    }\n+\n+    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4Nzg2NA==", "bodyText": "It actually exists in at least 2 places.  ReadUtils.prettyPrintSequenceRecords seems to be the version I want.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481387864", "createdAt": "2020-09-01T19:41:50Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,\n                 Math.max(1, genomeLoc.getStart() - padding),\n-                Math.min(referenceReader.getSequenceDictionary().getSequence(genomeLoc.getContig()).getSequenceLength(), genomeLoc.getEnd() + padding) ).getBases();\n+                Math.min(sequence.getSequenceLength(), genomeLoc.getEnd() + padding)).getBases();\n+    }\n+\n+    private static String listContigsAsString(final SAMSequenceDictionary sequenceDictionary) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzA3Nw=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTAzMTY4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozNzoyMFrOHK8Zig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0MToyOVrOHLFkkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzM4Ng==", "bodyText": "Mimatched -> Mismatched", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481237386", "createdAt": "2020-09-01T15:37:20Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4NzY2Ng==", "bodyText": "My keyboard is going to kill me with typos.  It's started to just drop random letters and double others.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481387666", "createdAt": "2020-09-01T19:41:29Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzM4Ng=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTA4ODI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1MDo0MlrOHK884w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyODoyM1rOHLFJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ==", "bodyText": "getSubsequenceAt() will already throw a UserException.MissingContigInSequenceDictionary exception internally if the contig is missing -- is there some way we could rely on that existing check? Ideally we should avoid adding lots of additional sequence dictionary lookups to frequently-called methods if we can possibly help it...", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481246435", "createdAt": "2020-09-01T15:50:42Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjM4OQ==", "bodyText": "It's not clear to me how to avoid it because we need the sequence length from the sequence to make the call to getSubsequenceAt. This pr isn't adding a new lookup, it's just moving it.  We could add a new sequenceDictionary method that automatically clips to the ends to avoid this extra lookup, but that seems like a lot of effort.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481346389", "createdAt": "2020-09-01T18:28:22Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MDc4NA==", "bodyText": "Yes, you're right, it can't be avoided. This is fine then.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481380784", "createdAt": "2020-09-01T19:28:23Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/AssemblyRegion.java", "diffHunk": "@@ -304,9 +307,22 @@ public void addAll(final Collection<GATKRead> readsToAdd){\n         Utils.validateArg( padding >= 0, () -> \"padding must be a positive integer but got \" + padding);\n         Utils.validateArg( genomeLoc.size() > 0, () -> \"GenomeLoc must have size > 0 but got \" + genomeLoc);\n \n-        return referenceReader.getSubsequenceAt( genomeLoc.getContig(),\n+        final String contig = genomeLoc.getContig();\n+        final SAMSequenceRecord sequence = Utils.nonNull(referenceReader.getSequenceDictionary().getSequence(contig),\n+                () -> \"Contig \" + contig + \" not found in reference. \" +\n+                        \"\\nPlease check that you are using a compatible reference for your data.\" +\n+                        \"\\nReference Sequences: \" + listContigsAsString(referenceReader.getSequenceDictionary()));\n+\n+        return referenceReader.getSubsequenceAt(contig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQzNQ=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTEwMDEyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1MzozM1rOHK9EPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0NDo1MFrOHLFrKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODMxNg==", "bodyText": "I did not know about expectedExceptionsMessageRegExp ! And now that I do, I have mixed feelings about it...throwing a more specific exception type is better than checking the exception message text itself.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481248316", "createdAt": "2020-09-01T15:53:33Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4OTM1NA==", "bodyText": "You're right... changing to UserException.MissingContigInSequenceDictionary.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481389354", "createdAt": "2020-09-01T19:44:50Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODMxNg=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTEyODE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTo1OTowNVrOHK9Vew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0NDo0OVrOHLFrIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MjczMQ==", "bodyText": "Won't this change the sequence dictionary in the shared header instance used by all the tests in this class? Can you write this test in a way that doesn't modify shared data?", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481252731", "createdAt": "2020-09-01T15:59:05Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+        final String contigNotInReference = \"chrNotInReference\";\n+        sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4OTM0NA==", "bodyText": "Ugh. Yes it does. Changing.  Good catch.", "url": "https://github.com/broadinstitute/gatk/pull/6781#discussion_r481389344", "createdAt": "2020-09-01T19:44:49Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionUnitTest.java", "diffHunk": "@@ -122,6 +124,19 @@ private void assertGoodReferenceGetter(final byte[] actualBytes, final SimpleInt\n         return tests.subList(2,3).toArray(new Object[][]{});       //HACK!\n     }\n \n+    @Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \"Contig chrNotInReference not found in reference.*\")\n+    //Testing a case where an NPE was thrown when somehow the reference sequence dictionary didn't contain a contig in the\n+    //assembly region.\n+    public void testMimatchedReferenceAndRegion(){\n+        final SAMSequenceDictionary sequenceDictionary = header.getSequenceDictionary();\n+        final String contigNotInReference = \"chrNotInReference\";\n+        sequenceDictionary.addSequence(new SAMSequenceRecord(contigNotInReference, 1000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MjczMQ=="}, "originalCommit": {"oid": "4b0c1ac35a659de5965696ea61f58165afeef1fe"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1044, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}