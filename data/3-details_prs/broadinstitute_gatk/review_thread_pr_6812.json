{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTkyOTY1", "number": 6812, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMToxM1rOEjwSpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowNzoxMVrOEj1m7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTI2ODIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMToxM1rOHSSfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMToxM1rOHSSfiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzOTQwMw==", "bodyText": "Turns out that it's MUCH faster to use the storage API here (like 10-20 times) since you're pulling out the entire table.  You can see what I do for this in the ArrayExtractCohort for probe_info", "url": "https://github.com/broadinstitute/gatk/pull/6812#discussion_r488939403", "createdAt": "2020-09-15T20:01:13Z", "author": {"login": "kcibul"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.broadinstitute.hellbender.tools.variantdb.arrays;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.TableResult;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ShortVariantDiscoveryProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKPath;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.variantdb.IngestConstants;\n+import org.broadinstitute.hellbender.tools.walkers.annotator.ExcessHet;\n+import org.broadinstitute.hellbender.utils.GenotypeCounts;\n+import org.broadinstitute.hellbender.utils.bigquery.BigQueryUtils;\n+import org.broadinstitute.hellbender.utils.tsv.SimpleXSVWriter;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+\n+@CommandLineProgramProperties(\n+        summary = \"(\\\"CalculateMetrics\\\") - Calculates HWE and Call rate per site.\",\n+        oneLineSummary = \"Tool to calculate metrics from big query and upload results\",\n+        programGroup = ShortVariantDiscoveryProgramGroup.class\n+)\n+@DocumentedFeature\n+public class ArrayCalculateMetrics extends GATKTool {\n+    @Argument(\n+            fullName = \"genotype-counts-table\",\n+            doc = \"Fully qualified name of the table where the genotype counts already exists\"\n+    )\n+    private String genotypeCountsTable = null;\n+\n+    @Argument(\n+            fullName = \"output\",\n+            doc = \"TSV file that will be output with metrics per probe_id\"\n+    )\n+    private GATKPath output = null;\n+\n+    private SimpleXSVWriter metricsTsvWriter = null;\n+\n+    public enum HeaderFieldEnum {\n+        probe_id,\n+        hwe_pval,\n+        call_rate,\n+        invariant\n+    }\n+\n+    @Override\n+    protected void onStartup() {\n+        super.onStartup();\n+\n+        try {\n+            metricsTsvWriter = new SimpleXSVWriter(output.toPath(), IngestConstants.SEPARATOR);\n+        } catch (IOException e) {\n+            throw new UserException(\"Can't write to output file\" + e);\n+        }\n+        metricsTsvWriter.setHeaderLine(Arrays.stream(HeaderFieldEnum.values()).map(String::valueOf).collect(Collectors.toList()));\n+    }\n+\n+    @Override\n+    // maybe think about creating a BigQuery Row walker?\n+    public void traverse() {\n+        progressMeter.setRecordsBetweenTimeChecks(1000L);\n+\n+        final String genotypeCountQueryString =\n+                \"SELECT * FROM `\" + genotypeCountsTable + \"`\";\n+\n+        //Execute Query\n+        final TableResult result = BigQueryUtils.executeQuery(genotypeCountQueryString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87231eabde9e128303da0a769b079f37e9cf30"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDEzODczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowNjo1NFrOHSbZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowNjo1NFrOHSbZpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NTM1MQ==", "bodyText": "Do you want to format these to any kind of fixed precision?  I know some of the GATK tools go to 3 decimal places.  Same fo all the doubles", "url": "https://github.com/broadinstitute/gatk/pull/6812#discussion_r489085351", "createdAt": "2020-09-16T00:06:54Z", "author": {"login": "kcibul"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.broadinstitute.hellbender.tools.variantdb.arrays;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.TableResult;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ShortVariantDiscoveryProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKPath;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.variantdb.IngestConstants;\n+import org.broadinstitute.hellbender.tools.walkers.annotator.ExcessHet;\n+import org.broadinstitute.hellbender.utils.GenotypeCounts;\n+import org.broadinstitute.hellbender.utils.bigquery.BigQueryUtils;\n+import org.broadinstitute.hellbender.utils.tsv.SimpleXSVWriter;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+\n+@CommandLineProgramProperties(\n+        summary = \"(\\\"CalculateMetrics\\\") - Calculates HWE and Call rate per site.\",\n+        oneLineSummary = \"Tool to calculate metrics from big query and upload results\",\n+        programGroup = ShortVariantDiscoveryProgramGroup.class\n+)\n+@DocumentedFeature\n+public class ArrayCalculateMetrics extends GATKTool {\n+    @Argument(\n+            fullName = \"genotype-counts-table\",\n+            doc = \"Fully qualified name of the table where the genotype counts already exists\"\n+    )\n+    private String genotypeCountsTable = null;\n+\n+    @Argument(\n+            fullName = \"output\",\n+            doc = \"TSV file that will be output with metrics per probe_id\"\n+    )\n+    private GATKPath output = null;\n+\n+    private SimpleXSVWriter metricsTsvWriter = null;\n+\n+    public enum HeaderFieldEnum {\n+        probe_id,\n+        hwe_pval,\n+        call_rate,\n+        invariant\n+    }\n+\n+    @Override\n+    protected void onStartup() {\n+        super.onStartup();\n+\n+        try {\n+            metricsTsvWriter = new SimpleXSVWriter(output.toPath(), IngestConstants.SEPARATOR);\n+        } catch (IOException e) {\n+            throw new UserException(\"Can't write to output file\" + e);\n+        }\n+        metricsTsvWriter.setHeaderLine(Arrays.stream(HeaderFieldEnum.values()).map(String::valueOf).collect(Collectors.toList()));\n+    }\n+\n+    @Override\n+    // maybe think about creating a BigQuery Row walker?\n+    public void traverse() {\n+        progressMeter.setRecordsBetweenTimeChecks(1000L);\n+\n+        final String genotypeCountQueryString =\n+                \"SELECT * FROM `\" + genotypeCountsTable + \"`\";\n+\n+        //Execute Query\n+        final TableResult result = BigQueryUtils.executeQuery(genotypeCountQueryString);\n+\n+        for (final FieldValueList row : result.iterateAll()) {\n+            List<String> thisRow = new ArrayList<>();\n+            Long probeId = row.get(0).getLongValue();\n+            thisRow.add(String.valueOf(probeId));\n+\n+            GenotypeCounts genotypeCounts = new GenotypeCounts(row.get(1).getDoubleValue(), row.get(2).getDoubleValue(), row.get(3).getDoubleValue());\n+            long noCalls = row.get(4).getLongValue();\n+            Integer sampleCount = (int) genotypeCounts.getRefs() + (int) genotypeCounts.getHets() + (int) genotypeCounts.getHoms() + (int) noCalls;\n+            Double excessHetPval = ExcessHet.calculateEH(genotypeCounts, sampleCount).getRight();\n+            thisRow.add(String.valueOf(excessHetPval));\n+\n+            Double callRate = 1.0 - ((double) noCalls / sampleCount);\n+            thisRow.add(String.valueOf(callRate));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87231eabde9e128303da0a769b079f37e9cf30"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDEzOTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowNzoxMVrOHSbZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowODowNlrOHSbbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NTQzOA==", "bodyText": "Double or double?", "url": "https://github.com/broadinstitute/gatk/pull/6812#discussion_r489085438", "createdAt": "2020-09-16T00:07:11Z", "author": {"login": "kcibul"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.broadinstitute.hellbender.tools.variantdb.arrays;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.TableResult;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ShortVariantDiscoveryProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKPath;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.variantdb.IngestConstants;\n+import org.broadinstitute.hellbender.tools.walkers.annotator.ExcessHet;\n+import org.broadinstitute.hellbender.utils.GenotypeCounts;\n+import org.broadinstitute.hellbender.utils.bigquery.BigQueryUtils;\n+import org.broadinstitute.hellbender.utils.tsv.SimpleXSVWriter;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+\n+@CommandLineProgramProperties(\n+        summary = \"(\\\"CalculateMetrics\\\") - Calculates HWE and Call rate per site.\",\n+        oneLineSummary = \"Tool to calculate metrics from big query and upload results\",\n+        programGroup = ShortVariantDiscoveryProgramGroup.class\n+)\n+@DocumentedFeature\n+public class ArrayCalculateMetrics extends GATKTool {\n+    @Argument(\n+            fullName = \"genotype-counts-table\",\n+            doc = \"Fully qualified name of the table where the genotype counts already exists\"\n+    )\n+    private String genotypeCountsTable = null;\n+\n+    @Argument(\n+            fullName = \"output\",\n+            doc = \"TSV file that will be output with metrics per probe_id\"\n+    )\n+    private GATKPath output = null;\n+\n+    private SimpleXSVWriter metricsTsvWriter = null;\n+\n+    public enum HeaderFieldEnum {\n+        probe_id,\n+        hwe_pval,\n+        call_rate,\n+        invariant\n+    }\n+\n+    @Override\n+    protected void onStartup() {\n+        super.onStartup();\n+\n+        try {\n+            metricsTsvWriter = new SimpleXSVWriter(output.toPath(), IngestConstants.SEPARATOR);\n+        } catch (IOException e) {\n+            throw new UserException(\"Can't write to output file\" + e);\n+        }\n+        metricsTsvWriter.setHeaderLine(Arrays.stream(HeaderFieldEnum.values()).map(String::valueOf).collect(Collectors.toList()));\n+    }\n+\n+    @Override\n+    // maybe think about creating a BigQuery Row walker?\n+    public void traverse() {\n+        progressMeter.setRecordsBetweenTimeChecks(1000L);\n+\n+        final String genotypeCountQueryString =\n+                \"SELECT * FROM `\" + genotypeCountsTable + \"`\";\n+\n+        //Execute Query\n+        final TableResult result = BigQueryUtils.executeQuery(genotypeCountQueryString);\n+\n+        for (final FieldValueList row : result.iterateAll()) {\n+            List<String> thisRow = new ArrayList<>();\n+            Long probeId = row.get(0).getLongValue();\n+            thisRow.add(String.valueOf(probeId));\n+\n+            GenotypeCounts genotypeCounts = new GenotypeCounts(row.get(1).getDoubleValue(), row.get(2).getDoubleValue(), row.get(3).getDoubleValue());\n+            long noCalls = row.get(4).getLongValue();\n+            Integer sampleCount = (int) genotypeCounts.getRefs() + (int) genotypeCounts.getHets() + (int) genotypeCounts.getHoms() + (int) noCalls;\n+            Double excessHetPval = ExcessHet.calculateEH(genotypeCounts, sampleCount).getRight();\n+            thisRow.add(String.valueOf(excessHetPval));\n+\n+            Double callRate = 1.0 - ((double) noCalls / sampleCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87231eabde9e128303da0a769b079f37e9cf30"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NTcwOQ==", "bodyText": "same for other types.   If they can be null, use the object (Double) and be sure to handle the null case when you use them.  if not use the primitive (double) and you don't have to worry!", "url": "https://github.com/broadinstitute/gatk/pull/6812#discussion_r489085709", "createdAt": "2020-09-16T00:08:06Z", "author": {"login": "kcibul"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayCalculateMetrics.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.broadinstitute.hellbender.tools.variantdb.arrays;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.TableResult;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ShortVariantDiscoveryProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKPath;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.variantdb.IngestConstants;\n+import org.broadinstitute.hellbender.tools.walkers.annotator.ExcessHet;\n+import org.broadinstitute.hellbender.utils.GenotypeCounts;\n+import org.broadinstitute.hellbender.utils.bigquery.BigQueryUtils;\n+import org.broadinstitute.hellbender.utils.tsv.SimpleXSVWriter;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+\n+@CommandLineProgramProperties(\n+        summary = \"(\\\"CalculateMetrics\\\") - Calculates HWE and Call rate per site.\",\n+        oneLineSummary = \"Tool to calculate metrics from big query and upload results\",\n+        programGroup = ShortVariantDiscoveryProgramGroup.class\n+)\n+@DocumentedFeature\n+public class ArrayCalculateMetrics extends GATKTool {\n+    @Argument(\n+            fullName = \"genotype-counts-table\",\n+            doc = \"Fully qualified name of the table where the genotype counts already exists\"\n+    )\n+    private String genotypeCountsTable = null;\n+\n+    @Argument(\n+            fullName = \"output\",\n+            doc = \"TSV file that will be output with metrics per probe_id\"\n+    )\n+    private GATKPath output = null;\n+\n+    private SimpleXSVWriter metricsTsvWriter = null;\n+\n+    public enum HeaderFieldEnum {\n+        probe_id,\n+        hwe_pval,\n+        call_rate,\n+        invariant\n+    }\n+\n+    @Override\n+    protected void onStartup() {\n+        super.onStartup();\n+\n+        try {\n+            metricsTsvWriter = new SimpleXSVWriter(output.toPath(), IngestConstants.SEPARATOR);\n+        } catch (IOException e) {\n+            throw new UserException(\"Can't write to output file\" + e);\n+        }\n+        metricsTsvWriter.setHeaderLine(Arrays.stream(HeaderFieldEnum.values()).map(String::valueOf).collect(Collectors.toList()));\n+    }\n+\n+    @Override\n+    // maybe think about creating a BigQuery Row walker?\n+    public void traverse() {\n+        progressMeter.setRecordsBetweenTimeChecks(1000L);\n+\n+        final String genotypeCountQueryString =\n+                \"SELECT * FROM `\" + genotypeCountsTable + \"`\";\n+\n+        //Execute Query\n+        final TableResult result = BigQueryUtils.executeQuery(genotypeCountQueryString);\n+\n+        for (final FieldValueList row : result.iterateAll()) {\n+            List<String> thisRow = new ArrayList<>();\n+            Long probeId = row.get(0).getLongValue();\n+            thisRow.add(String.valueOf(probeId));\n+\n+            GenotypeCounts genotypeCounts = new GenotypeCounts(row.get(1).getDoubleValue(), row.get(2).getDoubleValue(), row.get(3).getDoubleValue());\n+            long noCalls = row.get(4).getLongValue();\n+            Integer sampleCount = (int) genotypeCounts.getRefs() + (int) genotypeCounts.getHets() + (int) genotypeCounts.getHoms() + (int) noCalls;\n+            Double excessHetPval = ExcessHet.calculateEH(genotypeCounts, sampleCount).getRight();\n+            thisRow.add(String.valueOf(excessHetPval));\n+\n+            Double callRate = 1.0 - ((double) noCalls / sampleCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NTQzOA=="}, "originalCommit": {"oid": "9c87231eabde9e128303da0a769b079f37e9cf30"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}