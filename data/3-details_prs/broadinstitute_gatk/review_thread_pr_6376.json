{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTUxODM5", "number": 6376, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNToyNzo1NVrODZGgkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTozMDozN1rODZGh5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjQ3NjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNToyNzo1NVrOFfTzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNToyNzo1NVrOFfTzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NDYyMw==", "bodyText": "Can you avoid the multiplication * 2 at each iteration? Don't know if the VM will optimize this out. I wonder whether you could compare against sortedAlleleCounts.length but need to see the rest of the code to confirm.... too lazy\nIf you change this loop consider to skip the +2 increment on i and simple increase as it is need to access the index and count:\nfor (int i = 0; i < stop; ) {\n    int index = sortedAlleleCounts[i++];\n    int count = sortedAlleleCounts[i++];\n    ....\n}", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368374623", "createdAt": "2020-01-20T05:27:55Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5545dbfb18114eb05cda82beddf295d873b894fd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjQ3OTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTozMDozN1rOFfT1Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxODo0NjoxN1rOFfmzFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw==", "bodyText": "Since counts is guaranteed not to be 0, then the string composition could be  rather:\nsb.append(index);\nfor (int j = 1; j < count; j++) {\n    sb.append('/').append(index);\n}\nreturn sb.toString();", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368375123", "createdAt": "2020-01-20T05:30:37Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n             final int alleleIndex = sortedAlleleCounts[i];\n             final int alleleCount = sortedAlleleCounts[i + 1];\n             for (int j = 0; j < alleleCount; j++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5545dbfb18114eb05cda82beddf295d873b894fd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzE2OA==", "bodyText": "no, you need to add a / after every allele, not only the alleles with counts >1. think about 0/1, whose sortedAlleleCounts array is (0,1,1,1)....", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368613168", "createdAt": "2020-01-20T15:43:47Z", "author": {"login": "yfarjoun"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n             final int alleleIndex = sortedAlleleCounts[i];\n             final int alleleCount = sortedAlleleCounts[i + 1];\n             for (int j = 0; j < alleleCount; j++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw=="}, "originalCommit": {"oid": "5545dbfb18114eb05cda82beddf295d873b894fd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4NTMwMg==", "bodyText": "index is 0 and 1, count is 1 and 1. ... (index=0, count=1) ... then (index=1, count=1). count is always 1 or larger or that is my understanding....\nat least in the example that you are giving count for both alleles (0 and 1) is 1 (the second number of the pair. (0, 1, 1, 1) is decomposed into (0, 1) and (1, 1)", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368685302", "createdAt": "2020-01-20T18:44:28Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n             final int alleleIndex = sortedAlleleCounts[i];\n             final int alleleCount = sortedAlleleCounts[i + 1];\n             for (int j = 0; j < alleleCount; j++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw=="}, "originalCommit": {"oid": "5545dbfb18114eb05cda82beddf295d873b894fd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY4NTg0Nw==", "bodyText": "In any case you could leave the code as it is... just noticed this optimization opportunity near your change so I suggested the edit but it has no concern with fix, so.", "url": "https://github.com/broadinstitute/gatk/pull/6376#discussion_r368685847", "createdAt": "2020-01-20T18:46:17Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypeAlleleCounts.java", "diffHunk": "@@ -371,13 +371,12 @@ public String toUnphasedGenotypeString() {\n             return \"\";\n         }\n         final StringBuilder sb = new StringBuilder(distinctAlleleCount * 3);\n-        for (int i = 0; i < distinctAlleleCount; i += 2) {\n+        for (int i = 0; i < distinctAlleleCount * 2; i += 2) {\n             final int alleleIndex = sortedAlleleCounts[i];\n             final int alleleCount = sortedAlleleCounts[i + 1];\n             for (int j = 0; j < alleleCount; j++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3NTEyMw=="}, "originalCommit": {"oid": "5545dbfb18114eb05cda82beddf295d873b894fd"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1223, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}