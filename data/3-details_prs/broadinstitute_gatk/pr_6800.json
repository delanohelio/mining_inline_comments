{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTE5NjAw", "number": 6800, "title": "Updated WDL generation, upgrade to Barclay 4.0.", "bodyText": "The last commit adds WDL annotations to a number of new tools. Might be best to review that separately (or we can even move it to a separate PR - I just wanted it here to force increased WDL gen test coverage).", "createdAt": "2020-09-08T15:16:41Z", "url": "https://github.com/broadinstitute/gatk/pull/6800", "merged": true, "mergeCommit": {"oid": "21ca91ab57755f462ba6a8f9f965080b4be48a38"}, "closed": true, "closedAt": "2020-09-21T14:10:41Z", "author": {"login": "cmnbroad"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG7UczgFqTQ4NDI4OTYzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLCZEwAH2gAyNDgyMTE5NjAwOmNjMWY2MTgzNTI3ZGI0NmRhMTNiMmZiNjBkMTU2NTMzNDg0NWU0MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0Mjg5NjM0", "url": "https://github.com/broadinstitute/gatk/pull/6800#pullrequestreview-484289634", "createdAt": "2020-09-08T16:05:33Z", "commit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNTozM1rOHOkMRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0NzowNlrOHOnxQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTA3OQ==", "bodyText": "Can you add a new section to the README on WDL generation? For now, just the essential instructions on how to run it, anything users might need to know about the output WDLs, and a section for developers on how to write the annotations (including examples for BAM and FASTA inputs/outputs, and also an example of a directory output).", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485035079", "createdAt": "2020-09-08T16:05:33Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTU0Mw==", "bodyText": "Is this a warning that you can recover from, or should it be a fatal error?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485035543", "createdAt": "2020-09-08T16:06:21Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations\n+    if (System.getenv('CROMWELL_JAR') == null || System.getenv('WOMTOOL_JAR') == null) {\n+        logger.warn(\"Running this task requires the CROMWELL_JAR and WOMTOOL_JAR environment variables to be set\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA==", "bodyText": "Fix indentation here", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485041670", "createdAt": "2020-09-08T16:15:54Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "diffHunk": "@@ -223,12 +223,12 @@ public Object instanceMain(final String[] argv) {\n         return null;\n     }\n \n-    /**\n-     * Parse arguments and initialize any values annotated with {@link Argument}\n-     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-     * @throws CommandLineException if command line validation fails\n-     */\n-    protected final boolean parseArgs(final String[] argv) {\n+        /**\n+         * Parse arguments and initialize any values annotated with {@link Argument}\n+         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+         * @throws CommandLineException if command line validation fails\n+         */\n+        protected boolean parseArgs(final String[] argv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTk0OA==", "bodyText": "Also, I assume you removed final because you actually had to override this method?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485041948", "createdAt": "2020-09-08T16:16:22Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "diffHunk": "@@ -223,12 +223,12 @@ public Object instanceMain(final String[] argv) {\n         return null;\n     }\n \n-    /**\n-     * Parse arguments and initialize any values annotated with {@link Argument}\n-     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-     * @throws CommandLineException if command line validation fails\n-     */\n-    protected final boolean parseArgs(final String[] argv) {\n+        /**\n+         * Parse arguments and initialize any values annotated with {@link Argument}\n+         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+         * @throws CommandLineException if command line validation fails\n+         */\n+        protected boolean parseArgs(final String[] argv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MjYyMQ==", "bodyText": "Will the Picard command-line validation recognize both legacy and POSIX syntax?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485042621", "createdAt": "2020-09-08T16:17:27Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java", "diffHunk": "@@ -17,6 +20,15 @@ public PicardCommandLineProgramExecutor(final picard.cmdline.CommandLineProgram\n         this.picardCommandLineProgram = picardCommandLineProgram;\n     }\n \n+    /**\n+     * Validate command line arguments.\n+     * @return true if program args are valid, otherwise false\n+     * @throws CommandLineException if command line argument validation fails\n+     */\n+    protected boolean validateArgs(final String[] argv) {\n+        return picardCommandLineProgram.getCommandLineParser().parseArguments(System.out, argv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0NDE2MQ==", "bodyText": "The annotations look a lot better than before!", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485044161", "createdAt": "2020-09-08T16:19:59Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java", "diffHunk": "@@ -11,8 +11,8 @@\n public final class OptionalReferenceInputArgumentCollection extends ReferenceInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n \n-    @WorkflowResource(input=true, output=false, companionResources = {\"referenceDictionary\", \"referenceIndex\"})\n     @Argument(fullName = StandardArgumentDefinitions.REFERENCE_LONG_NAME, shortName = StandardArgumentDefinitions.REFERENCE_SHORT_NAME, doc = \"Reference sequence\", optional = true)\n+    @WorkflowInput(requiredCompanions = { StandardArgumentDefinitions.REFERENCE_INDEX_COMPANION, StandardArgumentDefinitions.REFERENCE_DICTIONARY_COMPANION})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MDgzMQ==", "bodyText": "It might be better to have these \"companion\" constants grouped into a separate section in this file, with a comment explaining that these are not argument names, but string constants used in the Workflow annotations.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485050831", "createdAt": "2020-09-08T16:30:55Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java", "diffHunk": "@@ -9,8 +9,12 @@\n     private StandardArgumentDefinitions(){}\n \n     public static final String INPUT_LONG_NAME = \"input\";\n+    public static final String INPUT_INDEX_COMPANION = INPUT_LONG_NAME + \"Index\";\n     public static final String OUTPUT_LONG_NAME = \"output\";\n+    public static final String OUTPUT_INDEX_COMPANION = OUTPUT_LONG_NAME + \"Index\";\n     public static final String REFERENCE_LONG_NAME = \"reference\";\n+    public static final String REFERENCE_INDEX_COMPANION = REFERENCE_LONG_NAME + \"Index\";\n+    public static final String REFERENCE_DICTIONARY_COMPANION = REFERENCE_LONG_NAME + \"Dictionary\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODI1Nw==", "bodyText": "Leave some space between the serialVersionUID and this annotation for readability. Also, you should pick a canonical ordering for @Argument and WorkflowInput and stick to it consistently. Above you had @Argument coming first, but here you have WorkflowInput first.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485068257", "createdAt": "2020-09-08T17:01:05Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java", "diffHunk": "@@ -13,6 +14,7 @@\n  */\n public final class RequiredReadInputArgumentCollection extends ReadInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n+    @WorkflowInput(optionalCompanions = StandardArgumentDefinitions.INPUT_INDEX_COMPANION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjU4OQ==", "bodyText": "What did we end up going with for the default memory usage?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485072589", "createdAt": "2020-09-08T17:08:46Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java", "diffHunk": "@@ -19,10 +21,12 @@\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @ExperimentalFeature\n+@WorkflowProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDgxMA==", "bodyText": "An output directory with multiple files is ok here?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485074810", "createdAt": "2020-09-08T17:12:47Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java", "diffHunk": "@@ -77,6 +80,7 @@\n             fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             doc = \"The directory to output SAM/BAM/CRAM files.\"\n     )\n+    @WorkflowOutput\n     public GATKPath OUTPUT_DIRECTORY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODA0Ng==", "bodyText": "If you had an optional input to a tool, how would you express that in the current framework?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485078046", "createdAt": "2020-09-08T17:18:50Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java", "diffHunk": "@@ -84,6 +89,7 @@\n      * created on the same input data.\n      */\n     @Argument(fullName=StandardArgumentDefinitions.BQSR_TABLE_LONG_NAME, shortName=StandardArgumentDefinitions.BQSR_TABLE_SHORT_NAME, doc=\"Input recalibration table for BQSR\")\n+    @WorkflowInput", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODQ4OA==", "bodyText": "@WorkflowInput works ok with fields of a Collection type? Is this covered by tests?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485078488", "createdAt": "2020-09-08T17:19:37Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -104,6 +108,7 @@\n      * reflected those sites skipped by the -XL argument.\n      */\n     @Argument(fullName = KNOWN_SITES_ARG_FULL_NAME, doc = \"One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.\", optional = false)\n+    @WorkflowInput\n     private List<FeatureInput<Feature>> knownSites;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTI1MA==", "bodyText": "\"Output file\" -> \"Output BAM file\"", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485079250", "createdAt": "2020-09-08T17:20:51Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java", "diffHunk": "@@ -55,9 +52,16 @@\n  * --fraction-to-keep 0.95 \\\n  * -O umiGrouped_0.95.bam\n  **/\n+@CommandLineProgramProperties(\n+        summary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        oneLineSummary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        programGroup = ReadDataManipulationProgramGroup.class\n+)\n @BetaFeature\n+@WorkflowProperties\n public class DownsampleByDuplicateSet extends DuplicateSetWalker {\n-    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"\")\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"Output file\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MjA4MQ==", "bodyText": "final?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485082081", "createdAt": "2020-09-08T17:25:49Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -32,6 +34,8 @@\n     // This must be kept in sync with the value used in build.gradle, where the file is created\n     private final static String dummyWDLTestFileName = \"dummyWDLTestFile\";\n \n+    private static String WDL_TEST_VALUE_PROPERTY = \"testValue\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MzIzMQ==", "bodyText": "Are you guaranteed that there's always at least one element here?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485083231", "createdAt": "2020-09-08T17:27:49Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDQzMA==", "bodyText": "Is this file cleaned up on JVM exit?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485084430", "createdAt": "2020-09-08T17:29:55Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTQxOQ==", "bodyText": "Is it possible to use our createTempFile() method that automatically sets the file to be deleted on exit, and writes to the temp dir instead of the build dir?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485085419", "createdAt": "2020-09-08T17:31:41Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTkzNQ==", "bodyText": "Can you explain more precisely what the problem is here, and how we can avoid triggering it in other tools?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485085935", "createdAt": "2020-09-08T17:32:41Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n+\n+        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n+        // mutex args will have a value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4ODg1NQ==", "bodyText": "How did this test work before with no space between -R and the reference file?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485088855", "createdAt": "2020-09-08T17:38:06Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java", "diffHunk": "@@ -59,7 +59,7 @@ public void testSplitsFixNDN() throws Exception {\n     @Test //regression test for https://github.com/broadinstitute/gatk/pull/1853\n     public void testSplitsOfUnpairedAndUnmappedReads() throws Exception {\n         IntegrationTestSpec spec = new IntegrationTestSpec(\n-                \"-R\" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +\n+                \"-R \" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDY4MA==", "bodyText": "Can you include at least one @WorkflowInput / @WorkflowOutput in this test class that does not have any companion files?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485090680", "createdAt": "2020-09-08T17:41:29Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDk0Nw==", "bodyText": "No test coverage for optionalCompanions?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485090947", "createdAt": "2020-09-08T17:41:54Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInput;\n+\n+    @Argument(fullName = \"requiredScalarFileOutput\",\n+            shortName = \"requiredScalarFileOutput\",\n+            doc = \"requiredScalarFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputDictionary\", \"requiredScalarFileOutputIndex\"})\n+    public File requiredScalarFileOutput;\n+\n+    @Argument(fullName = \"requiredListFileOutput\",\n+            shortName = \"requiredListFileOutput\",\n+            doc = \"requiredListFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputDictionary\", \"requiredListFileOutputIndex\"})\n+    public List<File> requiredListFileOutput;\n+\n+\n+    // optional Files\n+    @Argument(fullName = \"optionalScalarFileInput\",\n+            shortName = \"optionalScalarFileInput\",\n+            doc = \"optionalScalarFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputDictionary\", \"optionalScalarFileInputIndex\"})\n+    public File optionalScalarFileInput;\n+\n+    @Argument(fullName = \"optionalListFileInput\",\n+            shortName = \"optionalListFileInput\",\n+            doc = \"optionalListFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalListFileInputDictionary\", \"optionalListFileInputIndex\"})\n+    public List<File> optionalListFileInput;\n+\n+    @Argument(fullName = \"optionaldScalarFileOutput\",\n+            shortName = \"optionalScalarFileOutput\",\n+            doc = \"optionalScalarFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputDictionary\", \"optionalScalarFileOutputIndex\"})\n+    public File optionalScalarFileOutput;\n+\n+    @Argument(fullName = \"optionaldListFileOutput\",\n+            shortName = \"optionalListFileOutput\",\n+            doc = \"optionalListFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputDictionary\", \"optionalListFileOutputIndex\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MjMwMQ==", "bodyText": "private?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485092301", "createdAt": "2020-09-08T17:44:22Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java", "diffHunk": "@@ -32,21 +38,92 @@\n         );\n     }\n \n+    @Test\n+    public void wdlGenSmokeTest() throws IOException, ParseException {\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentest\");\n+        doWDLGenTest(wdlGenTestPackages, \"src/main/java\", wdlTestTargetDir);\n+\n+        // load and parse every generated JSON file to make sure they're valid JSON\n+        final File[] jsonFiles = wdlTestTargetDir.listFiles((File dir, String name) -> name.endsWith(\".json\"));\n+        for (final File f : jsonFiles) {\n+            assertValidJSONFile(f);\n+        }\n+    }\n+\n+    // This test uses a test tool with all combinations of input/output, list/scalar, across all types, including\n+    // companions, to ensure that the various templates use the template maps correctly.\n+    @Test\n+    public void wdlGenTemplateTest() throws IOException, ParseException {\n+        final File expectedResultsDir = new File(\"src/test/resources/org/broadinstitute/hellbender/utils/wdltest/\");\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentemplatetest\");\n+\n+        doWDLGenTest(\n+                Collections.singletonList(\"org.broadinstitute.hellbender.utils.help\"),\n+                \"src/test/java\",\n+                wdlTestTargetDir);\n+\n+        // index\n+        final String indexHTML = \"index.html\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, indexHTML),\n+                new File(wdlTestTargetDir, indexHTML));\n+\n+        // wdls\n+        final String defaultWDL = \"TestWDLTool.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDL),\n+                new File(wdlTestTargetDir, defaultWDL));\n+\n+        final String allArgsWDL = \"TestWDLToolAllArgs.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDL),\n+                new File(wdlTestTargetDir, allArgsWDL));\n+\n+        final String allArgsTestWDL = \"TestWDLToolAllArgsTest.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDL),\n+                new File(wdlTestTargetDir, allArgsTestWDL));\n+\n+        // jsons\n+        final String defaultWDLInputs = \"TestWDLToolInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDLInputs),\n+                new File(wdlTestTargetDir, defaultWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, defaultWDLInputs));\n+\n+        final String allArgsWDLInputs = \"TestWDLToolAllArgsInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDLInputs),\n+                new File(wdlTestTargetDir, allArgsWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsWDLInputs));\n+\n+        final String allArgsTestWDLInputs = \"TestWDLToolAllArgsTestInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDLInputs),\n+                new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+    }\n+\n+    private void assertValidJSONFile(final File targetFile) throws IOException, ParseException {\n+        try (FileReader fileReader = new FileReader(targetFile)) {\n+            new JSONParser().parse(fileReader);\n+        }\n+    }\n+\n     // suppress deprecation warning on Java 11 since we're using deprecated javadoc APIs\n     @SuppressWarnings({\"deprecation\",\"removal\"})\n-    @Test\n-    public static void wdlGenSmokeTest() {\n-        final File wdlTestTarget = createTempDir(\"wdlgentest\");\n+    public void doWDLGenTest(List<String> testPackages, final String sourcePath, final File wdlTestTargetDir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5Mjk2Nw==", "bodyText": "Expected results files should be clearly labeled as such, either by being put into a directory with \"expected\" in the name, or by having \"expected\" in their file names.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485092967", "createdAt": "2020-09-08T17:45:39Z", "author": {"login": "droazen"}, "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/TestWDLTool.wdl", "diffHunk": "@@ -0,0 +1,284 @@\n+version 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MzY5Nw==", "bodyText": "GATK version 1.1-111?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485093697", "createdAt": "2020-09-08T17:47:06Z", "author": {"login": "droazen"}, "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/index.html", "diffHunk": "@@ -0,0 +1,100 @@\n+<?php\n+\n+    include '../../../../common/include/common.php';\n+    include_once '../../../config.php';\n+    $module = modules::GATK;\n+    $name = docSN::toolDocs;\n+\n+    printHeader($module, $name, topSN::guide);\n+\n+    $selected_major_version = 4;\n+    $dirs = lookupVersionDirs($selected_major_version);\n+?>\n+\n+<link type='text/css' rel='stylesheet' href='gatkDoc.css'>\n+\n+<div class='row'>\n+\n+    <aside class=\"col-md-3\">\n+\n+        <?php echo produceGuideNav($module, $name) . makeTwitterFeed(); ?>\n+\n+    </aside>\n+\n+    <div class='col-md-9'>\n+\n+\n+\n+        <div class=\"row\">\n+            <div class=\"col-md-6\">\n+                <h1 id=\"top\"><i class='<?php print ico::toolDocsIcon; ?>'></i> GATK WDL Index</h1>\n+            </div>\n+            <div class=\"col-md-6\">\n+                <div class=\"btn-group pull-right\" style='margin-top:14px;'>\n+                    <a class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n+                        Version 1.1-111\n+                        <span class=\"caret\"></span>\n+                    </a>\n+                    <ul class=\"dropdown-menu\">\n+                        <?php foreach($dirs as $dir) { ?>\n+                            <li class=\"hide_me_html\"><a tabindex='-1' href='../<?=$dir?>' ><?=$dir?></a></li>\n+                        <?php } ?>\n+                    </ul>\n+                </div>\n+            </div>\n+        </div>\n+\n+        <div class=\"hide_me_html\">\n+            <hr />\n+            <em>Showing docs for version 1.1-111 | The latest version is <?php print $latest_version; ?></em>\n+            <hr />\n+        </div>\n+\n+        <div class=\"accordion\" id=\"index\">\n+                <br />\n+                <br />\n+                <br />\n+        <div class=\"accordion-group\">\n+            <div class=\"accordion-heading\">\n+                <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#index\" href=\"#WDLfeaturegroupname\">\n+                    <h4>WDL feature group name</h4>\n+                </a>\n+            </div>\n+            <div class=\"accordion-body collapse\" id=\"WDLfeaturegroupname\">\n+                <div class=\"accordion-inner\">\n+                    <p class=\"lead\">Tools for internal test purposes</p>\n+                    <table class=\"table table-striped table-bordered table-condensed cozy\">\n+                        <tr>\n+                            <th>Name</th>\n+                            <th>Summary</th>\n+                        </tr>\n+                                <tr>\n+                                    <td><a href=\"TestWDLTool.wdl\">TestWDLTool</a></td>\n+                                        <td>WDL Test Tool to test WDL Generation</td>\n+                                </tr>\n+                    </table>\n+                </div>\n+            </div>\n+        </div>\n+                <br />\n+        </div>\n+\n+        <hr>\n+        <p><a href='#top'><i class='fa fa-chevron-up'></i> Return to top</a></p>\n+        <hr>\n+        <p class=\"see-also\">See also \n+        \t<a href=\"https://software.broadinstitute.org/gatk/documentation/\">General Documentation</a> |\n+        \t<a class=\"hide_me_php\" href=\"index.html\">Tool WDL Index</a> <a class=\"hide_me_html\" href=\"index\">Tool WDL Index</a> |\n+        \t<a href=\"https://gatkforums.broadinstitute.org/gatk/\">Support Forum</a>\n+        </p>\n+\n+        <p class=\"version\">GATK version 1.1-111 built at 2016/11/11 11:11:11.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3608f07faebd66194dbba00021367933dc1770f7", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/3608f07faebd66194dbba00021367933dc1770f7", "committedDate": "2020-09-09T19:22:36Z", "message": "Rename expected test output files."}, "afterCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/4bfbc9f05ad60fde5c036797984f3804dd8c1230", "committedDate": "2020-09-09T21:17:13Z", "message": "Rename expected test output files."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODUwMDg3", "url": "https://github.com/broadinstitute/gatk/pull/6800#pullrequestreview-489850087", "createdAt": "2020-09-16T17:36:58Z", "commit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNjo1OVrOHS7Vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MDoxMVrOHS7cxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwODY1MA==", "bodyText": "Looks like you left the womtool validation step commented out -- was this intentional?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r489608650", "createdAt": "2020-09-16T17:36:59Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -811,26 +819,35 @@ task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n         def wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> !f.getAbsolutePath().endsWith(\".html\") && !f.getAbsolutePath().endsWith(\".json\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final womtoolLocation = System.getenv('WOMTOOL_JAR')\n-            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n-            execWDLValidation(validateWDLCommand)\n-        }\n+        final womtoolLocation = System.getenv('WOMTOOL_JAR')\n+//        wdlFiles.any() { wdlFile ->\n+//            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n+//            execWDLValidation(validateWDLCommand)\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDQzNw==", "bodyText": "getWLDInputJSON -> getWDLInputJSON", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r489610437", "createdAt": "2020-09-16T17:40:11Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -811,26 +819,35 @@ task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n         def wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> !f.getAbsolutePath().endsWith(\".html\") && !f.getAbsolutePath().endsWith(\".json\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final womtoolLocation = System.getenv('WOMTOOL_JAR')\n-            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n-            execWDLValidation(validateWDLCommand)\n-        }\n+        final womtoolLocation = System.getenv('WOMTOOL_JAR')\n+//        wdlFiles.any() { wdlFile ->\n+//            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n+//            execWDLValidation(validateWDLCommand)\n+//        }\n \n         // now execute the *AllArgs test wdls using cromwell\n         wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> f.getAbsolutePath().endsWith(\"AllArgsTest.wdl\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final cromwellLocation = System.getenv('CROMWELL_JAR')\n-            final testInputJSON = getWLDInputJSONTestFileNameFromWDLName(wdlFile)\n-            final runWDLCommand = \"java -jar $cromwellLocation run --inputs $testInputJSON $wdlFile\"\n-            // the test JSON input file is populated by the WDL gen process with this dummy file name\n-            // to satisfy cromwell's attempt to de/localize input files\n-            def buildDir = System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\"\n-            final createDummyTestInputFile = \"touch $buildDir/dummyWDLTestFile\"\n-            execWDLValidation(createDummyTestInputFile)\n-            execWDLValidation(runWDLCommand)\n+\n+        // the test JSON input file is populated by the WDL gen process with the name of this dummy file\n+        // to satisfy cromwell's attempt to de/localize input/output files\n+        def buildDir = System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath()\n+        final dummyWDLTestFileName = \"$buildDir/dummyWDLTestFile\"\n+        final File dummyWDLTestFile = file(dummyWDLTestFileName)\n+        final cromwellLocation = System.getenv('CROMWELL_JAR')\n+        try {\n+            wdlFiles.any() { wdlFile ->\n+                final testInputJSON = getWLDInputJSONTestFileNameFromWDLName(wdlFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/4bfbc9f05ad60fde5c036797984f3804dd8c1230", "committedDate": "2020-09-09T21:17:13Z", "message": "Rename expected test output files."}, "afterCommit": {"oid": "cc1f6183527db46da13b2fb60d1565334845e400", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/cc1f6183527db46da13b2fb60d1565334845e400", "committedDate": "2020-09-21T12:17:36Z", "message": "Final code review comments for build.gradle."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "052483961336c82975ebf7f974c1b948664b48bf", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/052483961336c82975ebf7f974c1b948664b48bf", "committedDate": "2020-09-21T12:17:35Z", "message": "Enable cromwell execution test to run locally."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cf7640426343a27dae1dfd354dfab30a5ee8461", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/7cf7640426343a27dae1dfd354dfab30a5ee8461", "committedDate": "2020-09-21T12:17:35Z", "message": "Enable command line validation mode for PicardCommandLineProgramExecutor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd384747953841e2cf1325b49d1c4800d6ed0c74", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/cd384747953841e2cf1325b49d1c4800d6ed0c74", "committedDate": "2020-09-21T12:17:35Z", "message": "Generate better execution test values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32add548b3f4e491d2b510c806e009321eef2019", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/32add548b3f4e491d2b510c806e009321eef2019", "committedDate": "2020-09-21T12:17:35Z", "message": "TEMP: Force WDL generation for all GATK/Picard tools."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266fae3e2210ce64db02334048027fbb91a0d1d2", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/266fae3e2210ce64db02334048027fbb91a0d1d2", "committedDate": "2020-09-21T12:17:35Z", "message": "Use Barclay support for required runtime properties and companion outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d3def522df26dce4aa17a819b755a7c5d604b0", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/88d3def522df26dce4aa17a819b755a7c5d604b0", "committedDate": "2020-09-21T12:17:35Z", "message": "Use ammended summary for companions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2316736605325fe11a930f92ccb6269d35b6f11d", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/2316736605325fe11a930f92ccb6269d35b6f11d", "committedDate": "2020-09-21T12:17:35Z", "message": "Add a WDL test tool to ensure the GATK templates are correct."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924b733286e741f8e63ae79c7d2b636ae554e95f", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/924b733286e741f8e63ae79c7d2b636ae554e95f", "committedDate": "2020-09-21T12:17:35Z", "message": "Update templates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf8e47e80b5160e44e69488cfebe1f608052006", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/9cf8e47e80b5160e44e69488cfebe1f608052006", "committedDate": "2020-09-21T12:17:36Z", "message": "Properly quote inital values and test values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18b60300a71650d5eb0084add3857ebe28fc56f7", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/18b60300a71650d5eb0084add3857ebe28fc56f7", "committedDate": "2020-09-21T12:17:36Z", "message": "Code update."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71d461a82cab461c7cd3840ae32b74fcdc0c5e57", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/71d461a82cab461c7cd3840ae32b74fcdc0c5e57", "committedDate": "2020-09-21T12:17:36Z", "message": "Move quoting code to Barclay."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4a6e4ca1b5f8f49c80c63f51626cafdc593ce9", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/8f4a6e4ca1b5f8f49c80c63f51626cafdc593ce9", "committedDate": "2020-09-21T12:17:36Z", "message": "Update doc for companions in expected WDL test outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51edd8cd0eca42174e3d06ad16b59b988873408", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/c51edd8cd0eca42174e3d06ad16b59b988873408", "committedDate": "2020-09-21T12:17:36Z", "message": "Use requiredOutputs in default template."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60f84e5a9be43d316da138431229cab759e7fed", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/d60f84e5a9be43d316da138431229cab759e7fed", "committedDate": "2020-09-21T12:17:36Z", "message": "Use requiredCompanions in templates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac32f4583589c5521546c4fb5b10d896ba23c517", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/ac32f4583589c5521546c4fb5b10d896ba23c517", "committedDate": "2020-09-21T12:17:36Z", "message": "Update templates for optional companions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a7dd814efb0f986b1549a2f0c1abf934dbaf5d", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/a1a7dd814efb0f986b1549a2f0c1abf934dbaf5d", "committedDate": "2020-09-21T12:17:36Z", "message": "Generate valid required array test values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d93f15b17b163d0e6052c99378656ccd427bec1", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/6d93f15b17b163d0e6052c99378656ccd427bec1", "committedDate": "2020-09-21T12:17:36Z", "message": "Update expected outputs for Barclay change for null optional array values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "768e13b961c2f581e66e6eb9c36eaacc221bfe92", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/768e13b961c2f581e66e6eb9c36eaacc221bfe92", "committedDate": "2020-09-21T12:17:36Z", "message": "Update templates and expected outputs for Barclay change for optional outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8ebf1c2e486fdd9464a5d14b0d87bdde69fb47", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/0e8ebf1c2e486fdd9464a5d14b0d87bdde69fb47", "committedDate": "2020-09-21T12:17:36Z", "message": "Change RuntimeProperties to WorkflowProperties and CPU defaults to 2."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "724f017c6db1b4ccee561b128a2257eddecd9865", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/724f017c6db1b4ccee561b128a2257eddecd9865", "committedDate": "2020-09-21T12:17:36Z", "message": "Use string constants from Barclay."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315cf6732627df40d6073e18462363a4b9da991a", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/315cf6732627df40d6073e18462363a4b9da991a", "committedDate": "2020-09-21T12:17:36Z", "message": "Fix whitespace in templates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d389a2d50e22405d7aaa4c4faf283dffcde88976", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/d389a2d50e22405d7aaa4c4faf283dffcde88976", "committedDate": "2020-09-21T12:17:36Z", "message": "Add localization optional and normalize positionalArgs name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f5d00b60d45b23405129a2440e8ba482c255368", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/4f5d00b60d45b23405129a2440e8ba482c255368", "committedDate": "2020-09-21T12:17:36Z", "message": "Remove unnecessary expression placeholders to enable optional outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644e236e576a813a23a67cc952493db1f5ed99cd", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/644e236e576a813a23a67cc952493db1f5ed99cd", "committedDate": "2020-09-21T12:17:36Z", "message": "Add param_meta section and update test outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb63a3e2aff2d43ce8c3bc2460d4efc6b646586", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/9eb63a3e2aff2d43ce8c3bc2460d4efc6b646586", "committedDate": "2020-09-21T12:17:36Z", "message": "Remove quotes and newlines in summary string to allow use in param_meta."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56477d6a82fbb57e077fdae05dea7f537c05375b", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/56477d6a82fbb57e077fdae05dea7f537c05375b", "committedDate": "2020-09-21T12:17:36Z", "message": "Use gatk as app name in template updates ported from Barclay."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62bd3eb2bf966d613dd2995d8f1da0bc561d3eb9", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/62bd3eb2bf966d613dd2995d8f1da0bc561d3eb9", "committedDate": "2020-09-21T12:17:36Z", "message": "Update optional args template to include companions as outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a2241e181e079519c7eb50593fda080ecd1445f", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/0a2241e181e079519c7eb50593fda080ecd1445f", "committedDate": "2020-09-21T12:17:36Z", "message": "Update method name to reflect Barclay change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f671b9fd371429abf5b6509ca3b1a95ee3c7d3d", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/2f671b9fd371429abf5b6509ca3b1a95ee3c7d3d", "committedDate": "2020-09-21T12:17:36Z", "message": "Suppress remove warning for Java 11 build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04ca7108a90360f41fc3be8f1f968a3e5365e8b5", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/04ca7108a90360f41fc3be8f1f968a3e5365e8b5", "committedDate": "2020-09-21T12:17:36Z", "message": "Remove extraneous debugging code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29640d218a9f8c18899067f85b9fd1b34832c280", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/29640d218a9f8c18899067f85b9fd1b34832c280", "committedDate": "2020-09-21T12:17:36Z", "message": "Update expected WDL output."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2b477a0e8d8463353b14755784ba94d7ddfe75", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/8d2b477a0e8d8463353b14755784ba94d7ddfe75", "committedDate": "2020-09-21T12:17:36Z", "message": "Upgrade to Barclay 4.0.0 and update test to reflect Barclay's disabling of jopt option clustering."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c6d826d40dbc5514eedf273150b0f4807d495d1", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/5c6d826d40dbc5514eedf273150b0f4807d495d1", "committedDate": "2020-09-21T12:17:36Z", "message": "Revert \"TEMP: Force WDL generation for all GATK/Picard tools.\"\n\nThis reverts commit 97700017604fb74d56833a537d780db37855c3ed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08fbdc2f51e5bfef1f696d20a96ad2a070955683", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/08fbdc2f51e5bfef1f696d20a96ad2a070955683", "committedDate": "2020-09-21T12:17:36Z", "message": "Annotate some tools for WDL gen."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c03060b411e5deccc7a4ef42fc81a7d4fc05fd1", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/0c03060b411e5deccc7a4ef42fc81a7d4fc05fd1", "committedDate": "2020-09-21T12:17:36Z", "message": "Miscelleaneous code review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82f52f7aedb2eb882efca55462cb4335e04f649", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/b82f52f7aedb2eb882efca55462cb4335e04f649", "committedDate": "2020-09-21T12:17:36Z", "message": "Clean up temporary files resulting from WDL validation task."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc350109726c1e9f5d6dcc5c9417f9ec1c11862", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/fcc350109726c1e9f5d6dcc5c9417f9ec1c11862", "committedDate": "2020-09-21T12:17:36Z", "message": "Update README.md."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e470f3a915554813a3da8f857f24b95c49e46c5b", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/e470f3a915554813a3da8f857f24b95c49e46c5b", "committedDate": "2020-09-21T12:17:36Z", "message": "Fix WDL test dummy version number."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eedcf083c119af33cb1c9de792779bdaf298b509", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/eedcf083c119af33cb1c9de792779bdaf298b509", "committedDate": "2020-09-21T12:17:36Z", "message": "Add optional-companion and no-companion WDL test cases , and normalize existing test case naming convention."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab1964beee8b6f7a3ea396b28052b40717ced20b", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/ab1964beee8b6f7a3ea396b28052b40717ced20b", "committedDate": "2020-09-21T12:17:36Z", "message": "Add mixed companion test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "928e37999a4df1722e322f9a4bc4965dce07f899", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/928e37999a4df1722e322f9a4bc4965dce07f899", "committedDate": "2020-09-21T12:17:36Z", "message": "Rename expected test output files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc1f6183527db46da13b2fb60d1565334845e400", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/cc1f6183527db46da13b2fb60d1565334845e400", "committedDate": "2020-09-21T12:17:36Z", "message": "Final code review comments for build.gradle."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2717, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}