{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzQxODY1", "number": 6611, "title": "htsgetReader", "bodyText": "Experimental tool that allows downloading reads and variants files from an htsget server.\n@lbergelson", "createdAt": "2020-05-19T20:15:12Z", "url": "https://github.com/broadinstitute/gatk/pull/6611", "merged": true, "mergeCommit": {"oid": "56a85b32c0d4b63706ab85f7818fed5455e20371"}, "closed": true, "closedAt": "2020-06-05T17:09:06Z", "author": {"login": "andersleung"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckhV5AAFqTQxNTcyODQ5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoVzRsAFqTQyNTQ3NTI4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzI4NDky", "url": "https://github.com/broadinstitute/gatk/pull/6611#pullrequestreview-415728492", "createdAt": "2020-05-20T21:30:26Z", "commit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTozMDoyN1rOGYee0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMDowOTowMFrOGZxBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxODQxNw==", "bodyText": "The enum options should be automatically listed in the help by the engine, no need to include them here unless they are a subset of what's allowed by the enum.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r428318417", "createdAt": "2020-05-20T21:30:27Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NDI5OQ==", "bodyText": "We were transitively importing an older version of this, so we're not actually even adding a new dependency here which is good.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429464299", "createdAt": "2020-05-22T21:44:43Z", "author": {"login": "lbergelson"}, "path": "build.gradle", "diffHunk": "@@ -287,6 +287,7 @@ dependencies {\n     compile 'org.apache.commons:commons-collections4:4.1'\n     compile 'org.apache.commons:commons-vfs2:2.0'\n     compile 'org.apache.commons:commons-configuration2:2.4'\n+    compile 'org.apache.httpcomponents:httpclient:4.5.12'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NDU4Mw==", "bodyText": "Tools should all have a class level javadoc comment describing them in more detail and including a usage example.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429464583", "createdAt": "2020-05-22T21:45:44Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NDk3NQ==", "bodyText": "Nitpick and one that others might disagree with.  I'd probably leave the line breaks off after the ( and before the ) to save some space in this argument list.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429464975", "createdAt": "2020-05-22T21:47:03Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NTQxMQ==", "bodyText": "GATK for historical reasons uses 1-based inclusive intervals.  The tool should adapt the given intervals to match what htsget needs.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429465411", "createdAt": "2020-05-22T21:48:42Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3Mzg4NA==", "bodyText": "Another historical oddity, when specifying multiple options to an argument we typically specify the argument multiple times rather than specifying a list and parsing it out.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429473884", "createdAt": "2020-05-22T22:04:31Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDcyNw==", "bodyText": "We typically call this the \"contig name\" because people confuse reference sequence with the entire reference sequence (i.e. hg19).", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429474727", "createdAt": "2020-05-22T22:08:29Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTA3Nw==", "bodyText": "So this tool is extending GATKTool, but it's not integrating with any of the functionality of GATKTool.  Ideally I think a final version of this tool maybe should be a GATKTool, but that means it has to understand the various arguments like \"-L\" for intervals and the various toggles, as well as things like integrating a progress meter.\nThose are all good goals, but since this isn't doing it yet I think it makes more sense to extend CommandLineProgram for the moment which has less implementation baggage.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429475077", "createdAt": "2020-05-22T22:10:15Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTU2NQ==", "bodyText": "We've mostly stopped adding shortname abbreviations for tool arguments that only are used in 1 tool.  They tend to be difficult to remember and not a huge benefit.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429475565", "createdAt": "2020-05-22T22:12:44Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTg4MQ==", "bodyText": "You have to check for null here since it could have before variables are initialized.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429475881", "createdAt": "2020-05-22T22:14:30Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjE1OQ==", "bodyText": "GATKTool subclasses must call super.onShutDown() as part of their shutdown sequence.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429476159", "createdAt": "2020-05-22T22:15:44Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTg4MQ=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjI5MA==", "bodyText": "You might want to attach the exception to the warning so people know WHAT error occurred.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429476290", "createdAt": "2020-05-22T22:16:21Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NzI3MQ==", "bodyText": "could you import the version of this from com.google.common.util.concurrent.ThreadFactoryBuilder instead of the shaded apache one that it's using now?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429477271", "createdAt": "2020-05-22T22:21:03Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NzY3Ng==", "bodyText": "Could you include the error code in this message?  I'm not clear if it gets propagated to the user.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429477676", "createdAt": "2020-05-22T22:23:01Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NzgxNA==", "bodyText": "Could you explain a bit more about this?  Is this the standard way to retry requests in this library?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429477814", "createdAt": "2020-05-22T22:23:48Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1MzUxMg==", "bodyText": "Some minor skimming of the library doc, isn't the RetryHandler the mechanism to control retry behavior?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429653512", "createdAt": "2020-05-24T16:32:57Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NzgxNA=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDE3MQ==", "bodyText": "Needs a class comment, mention that this  list is defined by the spec.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429654171", "createdAt": "2020-05-24T16:41:20Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetFormat.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+public enum HtsgetFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDMwNw==", "bodyText": "Nitpick: I'd probably add line breaks between things that have annotations on them for clarity.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429654307", "createdAt": "2020-05-24T16:43:05Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetErrorResponse.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+\n+/**\n+ * Class allowing deserialization from json htsget error response\n+ */\n+@JsonRootName(value = \"htsget\")\n+public class HtsgetErrorResponse {\n+    @JsonProperty(\"error\")\n+    public String error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDM1Ng==", "bodyText": "Add a class comment including the fact that these are named in the spec itself.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429654356", "createdAt": "2020-05-24T16:43:42Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetClass.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public enum HtsgetClass {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDUzOQ==", "bodyText": "This is unnecessary because the name is the same as the enum name.  Did you intend to ALL_CAPS the enum name  as recommended but then had weird argument parsing issues with the disparity between the toString and the object name?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429654539", "createdAt": "2020-05-24T16:46:32Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetClass.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public enum HtsgetClass {\n+    @JsonProperty(\"body\")\n+    body(\"body\"),\n+    @JsonProperty(\"header\")\n+    header(\"header\");\n+\n+    private final String name;\n+\n+    private HtsgetClass(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NDk4Ng==", "bodyText": "This method should be part of HtsgetRequest.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429654986", "createdAt": "2020-05-24T16:52:49Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NTE2Nw==", "bodyText": "Since the two request types are so different it might make sense to extract out a request interface or abstract class implement two concrete request classes.  One for header and one for body.   Optional.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429655167", "createdAt": "2020-05-24T16:55:10Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NTg3NA==", "bodyText": "In GATK we always bundle ranges into SimpleInterval or Locatable objects and pass them around together.  You could replace these 3 arguments with an OptionalIntervalArgumentCollection.  (your tool already accepts one of these since it extends GATK tool.  )  Then you can access the intervals using getIntervals (or better, getTraversalParameters).  There's a hitch though, getIntervals requires a SamSequenceDictionary for validation.  This is normally in the bam header, but since we don't have the header it means we'd have to either pass in a header or make an htsget query for it.   Either would work but both are kind of complicated.  Possibly that's a better idea for v2 of this tool.\nAlternatively you could accept a SimpleInterval as a commandline argument directly.\nNote that SimpleInterval (and all of gatk) use 1 -based inclusive intervals.  You should use this convention in most of the code and then convert internally in the classes that build the headers.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429655874", "createdAt": "2020-05-24T17:04:26Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjE5Mg==", "bodyText": "Is it necessary to close the executor service here as well?  You might want to call shutdownNow().", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429656192", "createdAt": "2020-05-24T17:07:53Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTg4MQ=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjUxNA==", "bodyText": "I think the error message is backwards.  Shouldn't it be \"start may not be greater than end\"?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429656514", "createdAt": "2020-05-24T17:12:11Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjY1NQ==", "bodyText": "These errors are prevented if you use SimpleInterval since it does validation to ensure these conditions, although they still might be valuable since you're going to have to do an internal conversion from [1,2] -> [0,2) style coordinates", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429656655", "createdAt": "2020-05-24T17:13:32Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjUxNA=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Njg4OA==", "bodyText": "it's good practice in gatk to make all variables final if they can be", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429656888", "createdAt": "2020-05-24T17:15:57Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjkyNg==", "bodyText": "this method doesn't actually throw IOException since it catches it", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429656926", "createdAt": "2020-05-24T17:16:36Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Njk4Mg==", "bodyText": "Always attach the original exception when re-wrapping and propagating exceptions.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429656982", "createdAt": "2020-05-24T17:17:25Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MjAzOA==", "bodyText": "Does this only apply to BAM fields? Does it do anything for vcf?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429662038", "createdAt": "2020-05-24T18:21:43Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MjkyMw==", "bodyText": "I think this is an ideal opportunity for refactoring.  There is a ton of shared code between getData and getDataParallel.  It seems like it would make sense to push functionality for getting an output stream into the block class itself, then the getData method could call those in series and getDataParallel could call them as asynchronous futures.   It might make sense to have 2 different block implementations, 1 for data blocks and 1 for http url blocks.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429662923", "createdAt": "2020-05-24T18:31:57Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzIwMw==", "bodyText": "GATK provides IOUtils.createTempPath() which schedules the temporary files for deletion on shutdown.  This helps clean up in case of errors.  I would use that here.  I would also give the files some prefix to make it clear what they are if someone is debugging or if cleanup fails.  Something like \"htsget-temp\".", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663203", "createdAt": "2020-05-24T18:35:00Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzMxNw==", "bodyText": "Attach the exception as well.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663317", "createdAt": "2020-05-24T18:36:22Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzMyOQ==", "bodyText": "Same here", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663329", "createdAt": "2020-05-24T18:36:35Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzMzNg==", "bodyText": "and here", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663336", "createdAt": "2020-05-24T18:36:41Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 359}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzQxOA==", "bodyText": "compare with .equals", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663418", "createdAt": "2020-05-24T18:37:35Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzQ2NQ==", "bodyText": "Throw an exception here instead of warning.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663465", "createdAt": "2020-05-24T18:38:13Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 375}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzUyNA==", "bodyText": "This is unnecessary I think.  Program completion means that it matched.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663524", "createdAt": "2020-05-24T18:38:49Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzU4Mw==", "bodyText": "This should definitely be a warning at least, I might consider making this an exception, but you'd want to check it at the start of the run rather than after downloading everything.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663583", "createdAt": "2020-05-24T18:39:46Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzY1MA==", "bodyText": "attach the exception", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663650", "createdAt": "2020-05-24T18:40:27Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2Mzg1Mg==", "bodyText": "It should probably run the validation when you call toUri.  I would consider renaming HtsgetRequest -> HtsgetRequestBuilder since it doesn't seem like the request is ever used except to build the URI, and it would clarify things if that's the expected use pattern.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663852", "createdAt": "2020-05-24T18:42:42Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 398}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2Mzk3MQ==", "bodyText": "I think this could be simplified as block.getHeaders().forEach(get::addHeader)", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429663971", "createdAt": "2020-05-24T18:44:15Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NDAyMg==", "bodyText": "Does the result of this.client.execute(get) need to be closed?  if so it should be wrapped in a try-with-resources block.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429664022", "createdAt": "2020-05-24T18:44:54Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NDc4NA==", "bodyText": "When is .consume necessary?  It's not called every time you use .getEntity().  I'm a bit unclear on the interaction between closing the response, calling getContent, and consume. It seems like mayb we should be throwing in places we thought we consumed the stream but it actually still has some value that consume is dealing with.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429664784", "createdAt": "2020-05-24T18:53:58Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();\n+\n+        HttpGet getReq = new HttpGet(reqURI);\n+        try (CloseableHttpResponse resp = this.client.execute(getReq)) {\n+            // get content of response\n+            HttpEntity entity = resp.getEntity();\n+            Header encodingHeader = entity.getContentEncoding();\n+            Charset encoding = encodingHeader == null\n+                    ? StandardCharsets.UTF_8\n+                    : Charsets.toCharset(encodingHeader.getValue());\n+            String jsonBody = EntityUtils.toString(entity, encoding);\n+            EntityUtils.consume(entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 409}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NDg5NA==", "bodyText": "I'd extract a method getObjectMapper that configures and returns this thing to simplify this method.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429664894", "createdAt": "2020-05-24T18:55:31Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();\n+\n+        HttpGet getReq = new HttpGet(reqURI);\n+        try (CloseableHttpResponse resp = this.client.execute(getReq)) {\n+            // get content of response\n+            HttpEntity entity = resp.getEntity();\n+            Header encodingHeader = entity.getContentEncoding();\n+            Charset encoding = encodingHeader == null\n+                    ? StandardCharsets.UTF_8\n+                    : Charsets.toCharset(encodingHeader.getValue());\n+            String jsonBody = EntityUtils.toString(entity, encoding);\n+            EntityUtils.consume(entity);\n+\n+            ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NDk3OQ==", "bodyText": "is it possible for either of these to be null?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429664979", "createdAt": "2020-05-24T18:56:44Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();\n+\n+        HttpGet getReq = new HttpGet(reqURI);\n+        try (CloseableHttpResponse resp = this.client.execute(getReq)) {\n+            // get content of response\n+            HttpEntity entity = resp.getEntity();\n+            Header encodingHeader = entity.getContentEncoding();\n+            Charset encoding = encodingHeader == null\n+                    ? StandardCharsets.UTF_8\n+                    : Charsets.toCharset(encodingHeader.getValue());\n+            String jsonBody = EntityUtils.toString(entity, encoding);\n+            EntityUtils.consume(entity);\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\n+            mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+\n+            int statusCode = resp.getStatusLine().getStatusCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTAzOA==", "bodyText": "What if status code doesn't fall into either of these cases?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665038", "createdAt": "2020-05-24T18:57:32Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();\n+\n+        HttpGet getReq = new HttpGet(reqURI);\n+        try (CloseableHttpResponse resp = this.client.execute(getReq)) {\n+            // get content of response\n+            HttpEntity entity = resp.getEntity();\n+            Header encodingHeader = entity.getContentEncoding();\n+            Charset encoding = encodingHeader == null\n+                    ? StandardCharsets.UTF_8\n+                    : Charsets.toCharset(encodingHeader.getValue());\n+            String jsonBody = EntityUtils.toString(entity, encoding);\n+            EntityUtils.consume(entity);\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\n+            mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+\n+            int statusCode = resp.getStatusLine().getStatusCode();\n+            if (400 <= statusCode && statusCode < 500) {\n+                    HtsgetErrorResponse err = mapper.readValue(jsonBody, HtsgetErrorResponse.class);\n+                    throw new UserException(\n+                        \"Invalid request, received error code: \" + statusCode\n+                        + \", error type: \" + err.error\n+                        + \", message: \" + err.message);\n+            } else if (statusCode == 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTA4NA==", "bodyText": "This should throw instead of logging and suppressing the exception.  In general if we have an error the prevents successful completion we MUST throw so the user knows that something went wrong.  People only notice log messages when something forces them too (like the program crashing)", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665084", "createdAt": "2020-05-24T18:57:57Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();\n+\n+        HttpGet getReq = new HttpGet(reqURI);\n+        try (CloseableHttpResponse resp = this.client.execute(getReq)) {\n+            // get content of response\n+            HttpEntity entity = resp.getEntity();\n+            Header encodingHeader = entity.getContentEncoding();\n+            Charset encoding = encodingHeader == null\n+                    ? StandardCharsets.UTF_8\n+                    : Charsets.toCharset(encodingHeader.getValue());\n+            String jsonBody = EntityUtils.toString(entity, encoding);\n+            EntityUtils.consume(entity);\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\n+            mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+\n+            int statusCode = resp.getStatusLine().getStatusCode();\n+            if (400 <= statusCode && statusCode < 500) {\n+                    HtsgetErrorResponse err = mapper.readValue(jsonBody, HtsgetErrorResponse.class);\n+                    throw new UserException(\n+                        \"Invalid request, received error code: \" + statusCode\n+                        + \", error type: \" + err.error\n+                        + \", message: \" + err.message);\n+            } else if (statusCode == 200) {\n+                HtsgetResponse response = mapper.readValue(jsonBody, HtsgetResponse.class);\n+                \n+                if (this.readerThreads > 1) {\n+                    this.getDataParallel(response);\n+                } else {\n+                    this.getData(response);\n+                }\n+\n+                logger.info(\"Successfully wrote to: \" + outputFile);\n+\n+                if (checkMd5) {\n+                    this.checkMd5(response);\n+                }\n+            }\n+        } catch (IOException e) {\n+            logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTI0Mw==", "bodyText": "This is an expensive operation, it would be good to compute this on the fly as we download.  That can be a future optimization though.  NioFileCopierWithProgressMeter has an example of computing checksums as a stream is downloaded.  It also has a progress meter for file downloads.   I think it might be tricky to integrate into this though (especially the parallel operations) so don't feel like have to do it right now.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665243", "createdAt": "2020-05-24T19:00:27Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTMwOA==", "bodyText": "make the fields that can be final final", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665308", "createdAt": "2020-05-24T19:01:13Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+/**\n+ * A single htsget request\n+ * \n+ * Does not validate that request is properly formed or can be fulfilled\n+ */\n+public class HtsgetRequest {\n+    private URI endpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTMzNQ==", "bodyText": "I would move the validation into this.  I can't see any reason to allow it to produce invalid requests.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665335", "createdAt": "2020-05-24T19:01:36Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+/**\n+ * A single htsget request\n+ * \n+ * Does not validate that request is properly formed or can be fulfilled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTM4MQ==", "bodyText": "Replace these with a single setInterval that computes the right bounds from the gatk style interval", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665381", "createdAt": "2020-05-24T19:02:13Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+/**\n+ * A single htsget request\n+ * \n+ * Does not validate that request is properly formed or can be fulfilled\n+ */\n+public class HtsgetRequest {\n+    private URI endpoint;\n+    private String id;\n+\n+    // Query parameters\n+    private HtsgetFormat format;\n+    private HtsgetClass dataClass;\n+    private String referenceName;\n+    private Integer start;\n+    private Integer end;\n+    private EnumSet<HtsgetRequestField> fields;\n+    private Set<String> tags;\n+    private Set<String> notags;\n+\n+    public HtsgetRequest(URI endpoint, String id) {\n+        this.endpoint = endpoint;\n+        this.id = id;\n+        this.fields = EnumSet.noneOf(HtsgetRequestField.class);\n+        this.tags = new HashSet<>();\n+        this.notags = new HashSet<>();\n+    }\n+\n+    public URI getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    public String getID() {\n+        return this.id;\n+    }\n+\n+    public HtsgetFormat getFormat() {\n+        return this.format;\n+    }\n+\n+    public HtsgetClass getDataClass() {\n+        return this.dataClass;\n+    }\n+\n+    public String getReferenceName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTUwMg==", "bodyText": "class comment\nexplain that this is only for bam (if that's correct)", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429665502", "createdAt": "2020-05-24T19:03:38Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequestField.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+public enum HtsgetRequestField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjAwNg==", "bodyText": "Some additional thoughts about this.\n\n\nIt would be good if this could produce a complete bam /vcf with a header attached.  Ideally you could provide an interval list, and it would get the header, the data from all of the relevant intervals, and then combine them into a single file.  I think this is a good idea for a v2 of this tool.\n\n\nIs it safe to concatenate the file chunks that htsget returns?  If they are independent bam / cram files it's not generally safe to concatenate them.  Bams have bgzf terminator blocks at their end that have to be stripped.  I'm not certain about how concatenating crams works.  Similarly, compressed vcf chunks need to have terminators stripped.  I don't know if htsget does that for you?\n\n\nI don't see you filtering the returned data to the relevant interval anywhere.  Since htsget may return additional data around your interval you should either be extremely clear in the documentation that you may get more than you asked for OR we have to do the filtering within the tool.  (for v2 we should definitely do the filtering.)\n\n\nWe should be clear about how unmapped reads are handled.  GATK allows specifying UNMAPPED as an interval which is available as part of the traversal parameters from the interval argument collection.  You might want to deal with that or explain the special treatment of null reference vs * reference in the doc.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666006", "createdAt": "2020-05-24T19:10:46Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTA3Nw=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjQwOQ==", "bodyText": "I would start refactoring this and getParalleleData by extracting methods for getting the block results and trying to unify them so they can be reused between the methods.  I think it would probably make sense to have the blocks themselves know how to get their own data so the code in this tool just has to worry about the sequence of things.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666409", "createdAt": "2020-05-24T19:16:17Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjQzMQ==", "bodyText": "attach exception", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666431", "createdAt": "2020-05-24T19:16:40Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjQ3Ng==", "bodyText": "delete the temp file when the copy is finished", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666476", "createdAt": "2020-05-24T19:17:27Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjU1MQ==", "bodyText": "Do redirects get handled transparently?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666551", "createdAt": "2020-05-24T19:18:11Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void traverse() {\n+        // construct request from command line args and convert to URI\n+        HtsgetRequest req = new HtsgetRequest(endpoint, id)\n+            .withFormat(format)\n+            .withDataClass(dataClass)\n+            .withReferenceName(referenceName)\n+            .withStart(start)\n+            .withEnd(end)\n+            .withFields(fields)\n+            .withTags(tags)\n+            .withNotags(notags);\n+        this.validateRequest(req);\n+        URI reqURI = req.toURI();\n+\n+        HttpGet getReq = new HttpGet(reqURI);\n+        try (CloseableHttpResponse resp = this.client.execute(getReq)) {\n+            // get content of response\n+            HttpEntity entity = resp.getEntity();\n+            Header encodingHeader = entity.getContentEncoding();\n+            Charset encoding = encodingHeader == null\n+                    ? StandardCharsets.UTF_8\n+                    : Charsets.toCharset(encodingHeader.getValue());\n+            String jsonBody = EntityUtils.toString(entity, encoding);\n+            EntityUtils.consume(entity);\n+\n+            ObjectMapper mapper = new ObjectMapper();\n+            mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\n+            mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+\n+            int statusCode = resp.getStatusLine().getStatusCode();\n+            if (400 <= statusCode && statusCode < 500) {\n+                    HtsgetErrorResponse err = mapper.readValue(jsonBody, HtsgetErrorResponse.class);\n+                    throw new UserException(\n+                        \"Invalid request, received error code: \" + statusCode\n+                        + \", error type: \" + err.error\n+                        + \", message: \" + err.message);\n+            } else if (statusCode == 200) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTAzOA=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjY5MQ==", "bodyText": "I assume these can't be final due to the way jackson initializes things?  If they're not final they should be private and exposed through getters to prevent accidental alteration.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666691", "createdAt": "2020-05-24T19:20:26Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetErrorResponse.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+\n+/**\n+ * Class allowing deserialization from json htsget error response\n+ */\n+@JsonRootName(value = \"htsget\")\n+public class HtsgetErrorResponse {\n+    @JsonProperty(\"error\")\n+    public String error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2Njg2OQ==", "bodyText": "You should wrap the return value in Collections.unmodifiableMap() to prevent clients from modifying it.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666869", "createdAt": "2020-05-24T19:23:01Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetResponse.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Class allowing deserialization from json htsget response\n+ */\n+@JsonRootName(value = \"htsget\")\n+public class HtsgetResponse {\n+    public static class Block {\n+        @JsonProperty(\"url\")\n+        private URI uri;\n+\n+        @JsonProperty(\"headers\")\n+        @JsonDeserialize(as = HashMap.class, keyAs = String.class, contentAs = String.class)\n+        private Map<String, String> headers;\n+\n+        @JsonProperty(\"class\")\n+        private HtsgetClass dataClass;\n+\n+        public URI getUri() {\n+            return this.uri;\n+        }\n+\n+        public Map<String, String> getHeaders() {\n+            return this.headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NjkwNg==", "bodyText": "wrap this in a Collections.unmodifiableList for safety.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429666906", "createdAt": "2020-05-24T19:23:36Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetResponse.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Class allowing deserialization from json htsget response\n+ */\n+@JsonRootName(value = \"htsget\")\n+public class HtsgetResponse {\n+    public static class Block {\n+        @JsonProperty(\"url\")\n+        private URI uri;\n+\n+        @JsonProperty(\"headers\")\n+        @JsonDeserialize(as = HashMap.class, keyAs = String.class, contentAs = String.class)\n+        private Map<String, String> headers;\n+\n+        @JsonProperty(\"class\")\n+        private HtsgetClass dataClass;\n+\n+        public URI getUri() {\n+            return this.uri;\n+        }\n+\n+        public Map<String, String> getHeaders() {\n+            return this.headers;\n+        }\n+\n+        public HtsgetClass getDataClass() {\n+            return this.dataClass;\n+        }\n+    }\n+\n+    @JsonProperty(\"format\")\n+    private HtsgetFormat format;\n+\n+    @JsonProperty(\"urls\")\n+    @JsonDeserialize(as = ArrayList.class, contentAs = Block.class)\n+    private List<Block> blocks;\n+\n+    @JsonProperty(\"md5\")\n+    private String md5;\n+\n+    public HtsgetFormat getFormat() {\n+        return this.format;\n+    }\n+\n+    public List<Block> getBlocks() {\n+        return this.blocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzQ5MQ==", "bodyText": "I think this class can better be thought of as a builder for requests since it doesn't really have any other functionality.  I might rename to capture that.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429667491", "createdAt": "2020-05-24T19:31:21Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+/**\n+ * A single htsget request\n+ * \n+ * Does not validate that request is properly formed or can be fulfilled\n+ */\n+public class HtsgetRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NzU1OQ==", "bodyText": "typo: missing word, can be used to make something here request", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429667559", "createdAt": "2020-05-24T19:32:05Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+/**\n+ * A single htsget request\n+ * \n+ * Does not validate that request is properly formed or can be fulfilled\n+ */\n+public class HtsgetRequest {\n+    private URI endpoint;\n+    private String id;\n+\n+    // Query parameters\n+    private HtsgetFormat format;\n+    private HtsgetClass dataClass;\n+    private String referenceName;\n+    private Integer start;\n+    private Integer end;\n+    private EnumSet<HtsgetRequestField> fields;\n+    private Set<String> tags;\n+    private Set<String> notags;\n+\n+    public HtsgetRequest(URI endpoint, String id) {\n+        this.endpoint = endpoint;\n+        this.id = id;\n+        this.fields = EnumSet.noneOf(HtsgetRequestField.class);\n+        this.tags = new HashSet<>();\n+        this.notags = new HashSet<>();\n+    }\n+\n+    public URI getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    public String getID() {\n+        return this.id;\n+    }\n+\n+    public HtsgetFormat getFormat() {\n+        return this.format;\n+    }\n+\n+    public HtsgetClass getDataClass() {\n+        return this.dataClass;\n+    }\n+\n+    public String getReferenceName() {\n+        return this.referenceName;\n+    }\n+\n+    public Integer getStart() {\n+        return this.start;\n+    }\n+\n+    public Integer getEnd() {\n+        return this.end;\n+    }\n+\n+    public EnumSet<HtsgetRequestField> getFields() {\n+        return this.fields;\n+    }\n+\n+    public Set<String> getTags() {\n+        return this.tags;\n+    }\n+\n+    public Set<String> getNoTags() {\n+        return this.notags;\n+    }\n+    \n+    public void setFormat(HtsgetFormat format) {\n+        this.format = format;\n+    }\n+\n+    public void setDataClass(HtsgetClass dataClass) {\n+        this.dataClass = dataClass;\n+    }\n+\n+    public void setReferenceName(String referenceName) {\n+        this.referenceName = referenceName;\n+    }\n+\n+    public void setStart(Integer start) {\n+        this.start = start;\n+    }\n+\n+    public void setEnd(Integer end) {\n+        this.end = end;\n+    }\n+\n+    public void addField(HtsgetRequestField field) {\n+        this.fields.add(field);\n+    }\n+\n+    public void addFields(Collection<HtsgetRequestField> fields) {\n+        this.fields.addAll(fields);\n+    }\n+\n+    public void addTag(String tag) {\n+        this.tags.add(tag);\n+    }\n+\n+    public void addTags(Collection<String> tags) {\n+        this.tags.addAll(tags);\n+    }\n+\n+    public void addNotag(String notag) {\n+        this.notags.add(notag);\n+    }\n+\n+    public void addNotags(Collection<String> notags) {\n+        this.notags.addAll(notags);\n+    }\n+\n+    public HtsgetRequest withFormat(HtsgetFormat format) {\n+        this.format = format;\n+        return this;\n+    }\n+\n+    public HtsgetRequest withDataClass(HtsgetClass dataClass) {\n+        this.dataClass = dataClass;\n+        return this;\n+    }\n+\n+    public HtsgetRequest withReferenceName(String referenceName) {\n+        this.referenceName = referenceName;\n+        return this;\n+    }\n+\n+    public HtsgetRequest withStart(Integer start) {\n+        this.start = start;\n+        return this;\n+    }\n+\n+    public HtsgetRequest withEnd(Integer end) {\n+        this.end = end;\n+        return this;\n+    }\n+\n+    public HtsgetRequest withField(HtsgetRequestField field) {\n+        this.fields.add(field);\n+        return this;\n+    }\n+\n+    public HtsgetRequest withFields(Collection<HtsgetRequestField> fields) {\n+        this.fields.addAll(fields);\n+        return this;\n+    }\n+\n+    public HtsgetRequest withTag(String tag) {\n+        this.tags.add(tag);\n+        return this;\n+    }\n+\n+    public HtsgetRequest withTags(Collection<String> tags) {\n+        this.tags.addAll(tags);\n+        return this;\n+    }\n+\n+    public HtsgetRequest withNotag(String notag) {\n+        this.notags.add(notag);\n+        return this;\n+    }\n+\n+    public HtsgetRequest withNotags(Collection<String> notags) {\n+        this.notags.addAll(notags);\n+        return this;\n+    }\n+\n+    /**\n+     * Convert request to a URI which can be used to make request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2ODE1OA==", "bodyText": "Is this @ used to filter header lines from the expected file since the downloaded file doesn't have them?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429668158", "createdAt": "2020-05-24T19:38:22Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2ODIzMQ==", "bodyText": "It's often a good idea to refer to the static argument constants in the tests so the IDE can help when you rename/refactor them.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429668231", "createdAt": "2020-05-24T19:39:36Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2ODI1MQ==", "bodyText": "Won't this filter the entire header as a comment?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429668251", "createdAt": "2020-05-24T19:39:54Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2ODUxOA==", "bodyText": "You  should make this a constant so it's clear that the same bam is being read in every test.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429668518", "createdAt": "2020-05-24T19:42:59Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTExMA==", "bodyText": "Good to see tests for error conditions.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669110", "createdAt": "2020-05-24T19:48:43Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by reference name\n+    @Test\n+    public void testReferenceName() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.refname\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by field\n+    @Test\n+    public void testField() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.field\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"field\", \"QNAME\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by start and end\n+    @Test\n+    public void testStartEnd() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.startend\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .add(\"start\", \"1000\")\n+                .add(\"end\", \"2000\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    @DataProvider(name = \"invalidParams\")\n+    public Object[][] invalidParams(){\n+        return new Object[][]{\n+                {ImmutableMap.of(\"class\", \"header\", \"reference-name\", \"chr1\")},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTIyNQ==", "bodyText": "The expected output file is empty.  You should choose a new range that includes data.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669225", "createdAt": "2020-05-24T19:50:20Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by reference name\n+    @Test\n+    public void testReferenceName() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.refname\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by field\n+    @Test\n+    public void testField() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.field\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"field\", \"QNAME\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by start and end\n+    @Test\n+    public void testStartEnd() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.startend\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTQ1Nw==", "bodyText": "I assume if start/end are specified than reference must also be specified?  Could you add validation for that / a test for it?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669457", "createdAt": "2020-05-24T19:52:49Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by reference name\n+    @Test\n+    public void testReferenceName() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.refname\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by field\n+    @Test\n+    public void testField() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.field\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"field\", \"QNAME\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by start and end\n+    @Test\n+    public void testStartEnd() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.startend\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .add(\"start\", \"1000\")\n+                .add(\"end\", \"2000\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    @DataProvider(name = \"invalidParams\")\n+    public Object[][] invalidParams(){\n+        return new Object[][]{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTQ4MQ==", "bodyText": "Please add a test that subsets by tags.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669481", "createdAt": "2020-05-24T19:53:11Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by reference name\n+    @Test\n+    public void testReferenceName() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.refname\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by field\n+    @Test\n+    public void testField() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.field\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"field\", \"QNAME\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by start and end\n+    @Test\n+    public void testStartEnd() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.startend\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .add(\"start\", \"1000\")\n+                .add(\"end\", \"2000\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTY3Ng==", "bodyText": "It would be good to add tests with an alternate data type like vcf or cram.  What happens if you request a vcf but you specify you want a bam?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669676", "createdAt": "2020-05-24T19:55:32Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTcxNg==", "bodyText": "Could you add the following tests:\n* a test that shows we get an error if you request a contig that doesn't exist in the file.\n* an invalid sample id\n* an invalid endpoint\n* an endpoint that's longer than the actual contig is\n* a start point that starts in the middle of one of the reads, to show if that read is returned or not\n* an end point that ends in the middle of one of the reads, to show if that read is returned or not", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669716", "createdAt": "2020-05-24T19:56:03Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by reference name\n+    @Test\n+    public void testReferenceName() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.refname\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by field\n+    @Test\n+    public void testField() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.field\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"field\", \"QNAME\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by start and end\n+    @Test\n+    public void testStartEnd() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.startend\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .add(\"start\", \"1000\")\n+                .add(\"end\", \"2000\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    @DataProvider(name = \"invalidParams\")\n+    public Object[][] invalidParams(){\n+        return new Object[][]{\n+                {ImmutableMap.of(\"class\", \"header\", \"reference-name\", \"chr1\")},\n+                {ImmutableMap.of(\"class\", \"header\", \"start\", \"1000\")},\n+                {ImmutableMap.of(\"class\", \"header\", \"end\", \"2000\")},\n+                {ImmutableMap.of(\"class\", \"header\", \"field\", \"QNAME\")},\n+                {ImmutableMap.of(\"class\", \"header\", \"tag\", \"NH\")},\n+                {ImmutableMap.of(\"class\", \"header\", \"notag\", \"NH\")},\n+                {ImmutableMap.of(\"start\", \"-1\")},\n+                {ImmutableMap.of(\"end\", \"-1\")},\n+                {ImmutableMap.of(\"start\", \"2000\", \"end\", \"1000\")},\n+                {ImmutableMap.of(\"tag\", \"NH\", \"notag\", \"NH\")},\n+        };\n+    }\n+\n+    // Expect a validation failure for invalid combinations of query parameters\n+    @Test(dataProvider = \"invalidParams\", expectedExceptions = UserException.class)\n+    public void testValidationFailure(Map<String, String> queries) {\n+        ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(\"out\");\n+        queries.forEach((k, v) -> args.add(k, v));\n+\n+        runCommandLine(args);\n+    }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTczMg==", "bodyText": "Some of the validation tests should move here when the validation moves here.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429669732", "createdAt": "2020-05-24T19:56:21Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequestUnitTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class HtsgetRequestUnitTest extends GATKBaseTest {\n+\n+    @Test\n+    public void testOnlyId() throws URISyntaxException {\n+        HtsgetRequest req = new HtsgetRequest(new URI(\"https://example.com\"), \"1\");\n+        Assert.assertEquals(req.toURI().toString(), \"https://example.com/1\");\n+    }\n+\n+    @Test\n+    public void testBasicFields() throws URISyntaxException {\n+        HtsgetRequest req = new HtsgetRequest(new URI(\"https://example.com\"), \"1\")\n+            .withFormat(HtsgetFormat.BAM)\n+            .withDataClass(HtsgetClass.body)\n+            .withReferenceName(\"chr1\")\n+            .withStart(0)\n+            .withEnd(16);\n+        Assert.assertEquals(req.toURI().toString(), \"https://example.com/1?format=BAM&class=body&referenceName=chr1&start=0&end=16\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MDMxMw==", "bodyText": "If you specify a field with a vcf request what happens?  Similarly with tags.  Should we have a warning?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429670313", "createdAt": "2020-05-24T20:03:50Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTY3Ng=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MDYyNw==", "bodyText": "These tests are good but are probably only downloading single chunks.  I think a lot of that is out of our control unless we can control the server or want to download really large files.\nHave you run large tests on full size files including in parallel?  Could you create some tests on large files that exercise downloading multiple blocks, and check them in disabled so people can run them manually if they want?\nIt would also be good to have tests for the response directly that show we are seeing both dataURI and httpUri responses.  Or if we're not, just clarifying which we're getting.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429670627", "createdAt": "2020-05-24T20:08:10Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MDY0OA==", "bodyText": "Is it valid to specify start but not end and viceversa?", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429670648", "createdAt": "2020-05-24T20:08:39Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by class\n+    @Test\n+    public void testHeaderOnly() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.header\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"class\", \"header\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by reference name\n+    @Test\n+    public void testReferenceName() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.refname\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by field\n+    @Test\n+    public void testField() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.field\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"field\", \"QNAME\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    // Test ability to filter by start and end\n+    @Test\n+    public void testStartEnd() throws IOException {\n+        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam.startend\");\n+        final File output = createTempFile(\"output\", \".bam\");\n+\n+        final ArgumentsBuilder args = new ArgumentsBuilder()\n+                .add(\"U\", ENDPOINT)\n+                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n+                .add(\"reference-name\", \"chr1\")\n+                .add(\"start\", \"1000\")\n+                .add(\"end\", \"2000\")\n+                .addOutput(output);\n+\n+        runCommandLine(args);\n+        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    }\n+\n+    @DataProvider(name = \"invalidParams\")\n+    public Object[][] invalidParams(){\n+        return new Object[][]{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTQ1Nw=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MDY2NQ==", "bodyText": "We need a test using the parallel code even if it's just a tiny file like this.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r429670665", "createdAt": "2020-05-24T20:09:00Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n+\n+    private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n+\n+    // Test ability to initiate download with no aditional parameters\n+    @Test\n+    public void testBasicDownload() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODE2NzQ0", "url": "https://github.com/broadinstitute/gatk/pull/6611#pullrequestreview-422816744", "createdAt": "2020-06-02T15:46:11Z", "commit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0NjoxMVrOGd39Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxNDoxOFrOGd5euw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3ODY1MA==", "bodyText": "\ud83d\udc4d  Thanks", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r433978650", "createdAt": "2020-06-02T15:46:11Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -43,385 +38,271 @@\n import org.broadinstitute.barclay.argparser.Argument;\n import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.CommandLineProgram;\n import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n import org.broadinstitute.hellbender.engine.GATKTool;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n-import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestBuilder;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n-import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n import org.broadinstitute.hellbender.utils.Utils;\n \n-import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+/**\n+ * A tool that downloads a file hosted on an htsget server to a local file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4MDI1OA==", "bodyText": "In the future we probably want to change this to an exponential backoff strategy to deal with transient issues / swarms of clients overloading the server.  That shouldn't hold up this pr though.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r433980258", "createdAt": "2020-06-02T15:47:48Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -43,385 +38,271 @@\n import org.broadinstitute.barclay.argparser.Argument;\n import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.CommandLineProgram;\n import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n import org.broadinstitute.hellbender.engine.GATKTool;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n-import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestBuilder;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n-import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n import org.broadinstitute.hellbender.utils.Utils;\n \n-import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+/**\n+ * A tool that downloads a file hosted on an htsget server to a local file\n+ * \n+ * <h3>Usage example</h3>\n+ * <pre>\n+ * gatk HtsgetReader \\\n+ *   --url htsget-server.org \\\n+ *   --id A1.bam \\\n+ *   --reference-name chr1\n+ *   -O output.bam\n+ * </pre>\n+ */\n \n @ExperimentalFeature\n @CommandLineProgramProperties(\n         summary = \"Download a file using htsget\",\n         oneLineSummary = \"Download a file using htsget\",\n         programGroup = ExampleProgramGroup.class\n )\n-public class HtsgetReader extends GATKTool {\n+public class HtsgetReader extends CommandLineProgram {\n \n     public static final String URL_LONG_NAME = \"url\";\n     public static final String ID_LONG_NAME = \"id\";\n     public static final String FORMAT_LONG_NAME = \"format\";\n     public static final String CLASS_LONG_NAME = \"class\";\n-    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n-    public static final String START_LONG_NAME = \"start\";\n-    public static final String END_LONG_NAME = \"end\";\n     public static final String FIELDS_LONG_NAME = \"field\";\n     public static final String TAGS_LONG_NAME = \"tag\";\n     public static final String NOTAGS_LONG_NAME = \"notag\";\n     public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n     public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n-    public static final String URL_SHORT_NAME = \"U\";\n-    public static final String ID_SHORT_NAME = \"ID\";\n-    public static final String FORMAT_SHORT_NAME = \"FO\";\n-    public static final String CLASS_SHORT_NAME = \"C\";\n-    public static final String REFERENCE_SHORT_NAME = \"RN\";\n-    public static final String START_SHORT_NAME = \"S\";\n-    public static final String END_SHORT_NAME = \"E\";\n-    public static final String FIELDS_SHORT_NAME = \"FL\";\n-    public static final String TAGS_SHORT_NAME = \"T\";\n-    public static final String NOTAGS_SHORT_NAME = \"N\";\n-\n-    @Argument(\n-            doc = \"Output file.\",\n-            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n-            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n-    )\n+\n+    @Argument(doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_LONG_NAME)\n     private File outputFile;\n \n-    @Argument(\n-            doc = \"URL of htsget endpoint.\",\n+    @Argument(doc = \"URL of htsget endpoint.\",\n             fullName = URL_LONG_NAME,\n-            shortName = URL_SHORT_NAME\n-    )\n+            shortName = URL_LONG_NAME)\n     private URI endpoint;\n \n-    @Argument(\n-            doc = \"ID of record to request.\",\n+    @Argument(doc = \"ID of record to request.\",\n             fullName = ID_LONG_NAME,\n-            shortName = ID_SHORT_NAME\n-    )\n+            shortName = ID_LONG_NAME)\n     private String id;\n \n-    @Argument(\n-            doc = \"Format to request record data in.\",\n+    @Argument(doc = \"Format to request record data in.\",\n             fullName = FORMAT_LONG_NAME,\n-            shortName = FORMAT_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = FORMAT_LONG_NAME,\n+            optional = true)\n     private HtsgetFormat format;\n \n-    @Argument(\n-            doc = \"Class of data to request. Should be either `header` or `body`\",\n+    @Argument(doc = \"Class of data to request.\",\n             fullName = CLASS_LONG_NAME,\n-            shortName = CLASS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = CLASS_LONG_NAME,\n+            optional = true)\n     private HtsgetClass dataClass;\n \n-    @Argument(\n-            doc = \"Reference sequence name.\",\n-            fullName = REFERENCE_LONG_NAME,\n-            shortName = REFERENCE_SHORT_NAME,\n-            optional = true\n-    )\n-    private String referenceName;\n-\n-    @Argument(\n-            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n-            fullName = START_LONG_NAME,\n-            shortName = START_SHORT_NAME,\n-            optional = true\n-    )\n-    private Integer start;\n-\n-    @Argument(\n-            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n-            fullName = END_LONG_NAME,\n-            shortName = END_SHORT_NAME,\n-            optional = true\n-    )\n-    private Integer end;\n-\n-    @Argument(\n-            doc = \"A list of fields to include, default: all\",\n+    @Argument(doc = \"The interval and reference sequence to request\",\n+            fullName = StandardArgumentDefinitions.INTERVALS_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.INTERVALS_SHORT_NAME,\n+            optional = true)\n+    private SimpleInterval interval;\n+\n+    @Argument(doc = \"A field to include, default: all\",\n             fullName = FIELDS_LONG_NAME,\n-            shortName = FIELDS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = FIELDS_LONG_NAME,\n+            optional = true)\n     private List<HtsgetRequestField> fields;\n \n-    @Argument(\n-            doc = \"A comma separated list of tags to include, default: all.\",\n+    @Argument(doc = \"A tag which should be included.\",\n             fullName = TAGS_LONG_NAME,\n-            shortName = TAGS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = TAGS_LONG_NAME,\n+            optional = true)\n     private List<String> tags;\n \n-    @Argument(\n-            doc = \"A comma separated list of tags to exclude, default: none.\",\n+    @Argument(doc = \"A tag which should be excluded.\",\n             fullName = NOTAGS_LONG_NAME,\n-            shortName = NOTAGS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = NOTAGS_LONG_NAME,\n+            optional = true)\n     private List<String> notags;\n     \n     @Advanced\n-    @Argument(\n-            fullName = NUM_THREADS_LONG_NAME,\n+    @Argument(fullName = NUM_THREADS_LONG_NAME,\n             shortName = NUM_THREADS_LONG_NAME,\n             doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n                     \"higher values may improve performance when network latency is an issue.\",\n             optional = true,\n             minValue = 1)\n     private int readerThreads = 1;\n \n-    @Argument(\n-            fullName = CHECK_MD5_LONG_NAME,\n-            shortName = CHECK_MD5_LONG_NAME,\n-            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n-                \"and validate it against the provided md5 hash, if it exists.\",\n-            optional = true)\n+    @Argument(fullName = CHECK_MD5_LONG_NAME, shortName = CHECK_MD5_LONG_NAME, doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \"\n+            + \"and validate it against the provided md5 hash, if it exists.\", optional = true)\n     private boolean checkMd5 = false;\n \n     private ExecutorService executorService;\n-    \n+\n     private CloseableHttpClient client;\n \n     @Override\n-    public void onTraversalStart() {\n+    public void onStartup() {\n         if (this.readerThreads > 1) {\n+            logger.info(\"Initializing with \" + this.readerThreads + \" threads\");\n             final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n-                    .setNameFormat(\"htsgetReader-thread-%d\")\n-                    .setDaemon(true)\n-                    .build();\n+                .setNameFormat(\"htsgetReader-thread-%d\")\n+                .setDaemon(true).build();\n             this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n         }\n         this.client = HttpClientBuilder.create()\n             .setConnectionManager(new PoolingHttpClientConnectionManager())\n-            // throw IOException on 5xx error codes so request is retried\n-            .addInterceptorLast(new HttpResponseInterceptor() {\n+            .setServiceUnavailableRetryStrategy(new ServiceUnavailableRetryStrategy() {\n                 @Override\n-                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n-                    int statusCode = resp.getStatusLine().getStatusCode();\n-                    if (500 <= statusCode && statusCode < 600) {\n-                        throw new IOException(\"Retry on 5xx error code\");\n+                // retry at most 4 times if a 5xx status code is received\n+                public boolean retryRequest(final HttpResponse resp, final int executionCount, final HttpContext context) {\n+                    if (executionCount > 4) {\n+                        return false;\n                     }\n+                    if (resp.getStatusLine() == null) {\n+                        return true;\n+                    }\n+                    final int statusCode = resp.getStatusLine().getStatusCode();\n+                    return 500 <= statusCode && statusCode < 600;\n+                }\n+\n+                @Override\n+                public long getRetryInterval() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4MzIzOQ==", "bodyText": "I think you forgot to commit this change.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r433983239", "createdAt": "2020-06-02T15:50:47Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -0,0 +1,441 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.apache.commons.io.Charsets;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpResponseInterceptor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.broadinstitute.barclay.argparser.Advanced;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n+import org.broadinstitute.hellbender.engine.GATKTool;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+@ExperimentalFeature\n+@CommandLineProgramProperties(\n+        summary = \"Download a file using htsget\",\n+        oneLineSummary = \"Download a file using htsget\",\n+        programGroup = ExampleProgramGroup.class\n+)\n+public class HtsgetReader extends GATKTool {\n+\n+    public static final String URL_LONG_NAME = \"url\";\n+    public static final String ID_LONG_NAME = \"id\";\n+    public static final String FORMAT_LONG_NAME = \"format\";\n+    public static final String CLASS_LONG_NAME = \"class\";\n+    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n+    public static final String START_LONG_NAME = \"start\";\n+    public static final String END_LONG_NAME = \"end\";\n+    public static final String FIELDS_LONG_NAME = \"field\";\n+    public static final String TAGS_LONG_NAME = \"tag\";\n+    public static final String NOTAGS_LONG_NAME = \"notag\";\n+    public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n+    public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n+    public static final String URL_SHORT_NAME = \"U\";\n+    public static final String ID_SHORT_NAME = \"ID\";\n+    public static final String FORMAT_SHORT_NAME = \"FO\";\n+    public static final String CLASS_SHORT_NAME = \"C\";\n+    public static final String REFERENCE_SHORT_NAME = \"RN\";\n+    public static final String START_SHORT_NAME = \"S\";\n+    public static final String END_SHORT_NAME = \"E\";\n+    public static final String FIELDS_SHORT_NAME = \"FL\";\n+    public static final String TAGS_SHORT_NAME = \"T\";\n+    public static final String NOTAGS_SHORT_NAME = \"N\";\n+\n+    @Argument(\n+            doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n+    )\n+    private File outputFile;\n+\n+    @Argument(\n+            doc = \"URL of htsget endpoint.\",\n+            fullName = URL_LONG_NAME,\n+            shortName = URL_SHORT_NAME\n+    )\n+    private URI endpoint;\n+\n+    @Argument(\n+            doc = \"ID of record to request.\",\n+            fullName = ID_LONG_NAME,\n+            shortName = ID_SHORT_NAME\n+    )\n+    private String id;\n+\n+    @Argument(\n+            doc = \"Format to request record data in.\",\n+            fullName = FORMAT_LONG_NAME,\n+            shortName = FORMAT_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetFormat format;\n+\n+    @Argument(\n+            doc = \"Class of data to request. Should be either `header` or `body`\",\n+            fullName = CLASS_LONG_NAME,\n+            shortName = CLASS_SHORT_NAME,\n+            optional = true\n+    )\n+    private HtsgetClass dataClass;\n+\n+    @Argument(\n+            doc = \"Reference sequence name.\",\n+            fullName = REFERENCE_LONG_NAME,\n+            shortName = REFERENCE_SHORT_NAME,\n+            optional = true\n+    )\n+    private String referenceName;\n+\n+    @Argument(\n+            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n+            fullName = START_LONG_NAME,\n+            shortName = START_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer start;\n+\n+    @Argument(\n+            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n+            fullName = END_LONG_NAME,\n+            shortName = END_SHORT_NAME,\n+            optional = true\n+    )\n+    private Integer end;\n+\n+    @Argument(\n+            doc = \"A list of fields to include, default: all\",\n+            fullName = FIELDS_LONG_NAME,\n+            shortName = FIELDS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<HtsgetRequestField> fields;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to include, default: all.\",\n+            fullName = TAGS_LONG_NAME,\n+            shortName = TAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> tags;\n+\n+    @Argument(\n+            doc = \"A comma separated list of tags to exclude, default: none.\",\n+            fullName = NOTAGS_LONG_NAME,\n+            shortName = NOTAGS_SHORT_NAME,\n+            optional = true\n+    )\n+    private List<String> notags;\n+    \n+    @Advanced\n+    @Argument(\n+            fullName = NUM_THREADS_LONG_NAME,\n+            shortName = NUM_THREADS_LONG_NAME,\n+            doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n+                    \"higher values may improve performance when network latency is an issue.\",\n+            optional = true,\n+            minValue = 1)\n+    private int readerThreads = 1;\n+\n+    @Argument(\n+            fullName = CHECK_MD5_LONG_NAME,\n+            shortName = CHECK_MD5_LONG_NAME,\n+            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n+                \"and validate it against the provided md5 hash, if it exists.\",\n+            optional = true)\n+    private boolean checkMd5 = false;\n+\n+    private ExecutorService executorService;\n+    \n+    private CloseableHttpClient client;\n+\n+    @Override\n+    public void onTraversalStart() {\n+        if (this.readerThreads > 1) {\n+            final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"htsgetReader-thread-%d\")\n+                    .setDaemon(true)\n+                    .build();\n+            this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n+        }\n+        this.client = HttpClientBuilder.create()\n+            .setConnectionManager(new PoolingHttpClientConnectionManager())\n+            // throw IOException on 5xx error codes so request is retried\n+            .addInterceptorLast(new HttpResponseInterceptor() {\n+                @Override\n+                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n+                    int statusCode = resp.getStatusLine().getStatusCode();\n+                    if (500 <= statusCode && statusCode < 600) {\n+                        throw new IOException(\"Retry on 5xx error code\");\n+                    }\n+                }\n+            })\n+            .build();\n+    }\n+\n+    @Override\n+    public void onShutdown() {\n+        try {\n+            this.client.close();\n+        } catch (IOException e) {\n+            logger.warn(\"Exception while closing httpClient\");\n+        }\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec \n+     */\n+    private void validateRequest(HtsgetRequest req) {\n+        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n+            req.getReferenceName() != null ||\n+            req.getStart() != null ||\n+            req.getEnd() != null ||\n+            ! req.getFields().isEmpty() ||\n+            ! req.getTags().isEmpty() ||\n+            ! req.getNoTags().isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+        if (req.getStart() != null && req.getStart() < 0) {\n+            throw new UserException(\"Invalid request: start must be non-negative\");\n+        }\n+        if (req.getEnd() != null && req.getEnd() < 0) {\n+            throw new UserException(\"Invalid request: end must be non-negative\");\n+        }\n+        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n+            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        }\n+        String intersections = req.getTags().stream()\n+            .filter(req.getNoTags()::contains)\n+            .collect(Collectors.joining(\", \"));\n+        if (! intersections.isEmpty()) {\n+            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        }\n+    }\n+\n+    /** \n+     * Downloads data blocks provided by response to outputFile in serial\n+    */\n+    private void getData(HtsgetResponse response) throws IOException {\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Block block : response.getBlocks()) {\n+                InputStream istream;\n+                switch (block.getUri().getScheme()) {\n+                    case \"http\":\n+                    case \"https\":\n+                        HttpGet get = new HttpGet(block.getUri());\n+                        block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        istream = entity.getContent();\n+                        break;\n+                    case \"data\":\n+                        String dataUri = block.getUri().toString();\n+                        if (! dataUri.matches(\"^data:.*;base64,.*\")) {\n+                            throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                        }\n+                        istream = new ByteArrayInputStream(\n+                            Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                        break;\n+                    default:\n+                        throw new UserException(\"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+                }\n+                IOUtils.copy(istream, ostream);\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Downloads data blocks provided by response to outputFile in parallel,\n+     * using the number of threads specified by user\n+     */\n+    private void getDataParallel(HtsgetResponse response) throws IOException {\n+        List<Future<Path>> futures = new ArrayList<>(response.getBlocks().size());\n+        for (Block block : response.getBlocks()) {\n+            switch (block.getUri().getScheme()) {\n+                case \"http\":\n+                case \"https\":\n+                    HttpGet get = new HttpGet(block.getUri());\n+                    block.getHeaders().forEach((header, value) -> get.addHeader(header, value));\n+                    futures.add(this.executorService.submit(() -> {\n+                        HttpEntity entity = this.client.execute(get).getEntity();\n+                        byte[] bytes = IOUtils.toByteArray(entity.getContent());\n+                        EntityUtils.consume(entity);\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                IOUtils.copy(new ByteArrayInputStream(bytes), ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                case \"data\":\n+                    String dataUri = block.getUri().toString();\n+                    if (!dataUri.matches(\"^data:.*;base64,.*\")) {\n+                        throw new UserException(\"data URI must be base64 encoded: \" + dataUri);\n+                    }\n+                    futures.add(this.executorService.submit(() -> {\n+                        Path tempFile = Files.createTempFile(\"\", \"\");\n+                        try (OutputStream ostream = Files.newOutputStream(tempFile)) {\n+                            try {\n+                                InputStream istream = new ByteArrayInputStream(\n+                                    Base64.getDecoder().decode(dataUri.replaceFirst(\"^data:.*;base64,\", \"\")));\n+                                IOUtils.copy(istream, ostream);\n+                            } catch (IOException e) {\n+                                throw new UserException(\"Could not write to temp file: \" + e.getMessage());\n+                            }\n+                        }\n+                        return tempFile;\n+                    }));\n+                    break;\n+                default:\n+                    throw new UserException(\n+                            \"Unrecognized URI scheme in data block: \" + block.getUri().getScheme());\n+            }\n+        }\n+        try (OutputStream ostream = new FileOutputStream(this.outputFile)) {\n+            for (Future<Path> f : futures) {\n+                try (InputStream istream = Files.newInputStream(f.get())) {\n+                    try {\n+                        IOUtils.copy(istream, ostream);\n+                    } catch (IOException e) {\n+                        throw new UserException(\"Error copying block: \" + e.getMessage());\n+                    }\n+                } catch (ExecutionException | InterruptedException e) {\n+                    throw new UserException(\"Error while waiting to download block: \" + e.getMessage());\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UserException(\"Could not create output file: \" + this.outputFile);\n+        }\n+    }\n+\n+    /**\n+     * Checks md5 digest provided in response, if one exists, against calculated md5 hash\n+     * of downloaded file, warning user if they differ\n+     */\n+    private void checkMd5(HtsgetResponse resp) {\n+        String expectedMd5 = resp.getMd5();\n+        if (expectedMd5 == null) {\n+            logger.info(\"No md5 digest provided by response\");\n+        } else {\n+            try {\n+                String actualMd5 = Utils.calculateFileMD5(outputFile);\n+                if (actualMd5 != expectedMd5) {\n+                    logger.warn(\"Expected md5: \" + expectedMd5 + \" did not match actual md5: \" + actualMd5);\n+                } else {\n+                    logger.info(\"Expected and actual md5 match\");\n+                }\n+            } catch (IOException e) {\n+                logger.warn(\"Unable to calculate md5 digest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2MzY1MA=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4NDA2Ng==", "bodyText": "The get data methods are so much clearer now.  Thank you.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r433984066", "createdAt": "2020-06-02T15:51:34Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/HtsgetReader.java", "diffHunk": "@@ -43,385 +38,271 @@\n import org.broadinstitute.barclay.argparser.Argument;\n import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n import org.broadinstitute.barclay.argparser.ExperimentalFeature;\n+import org.broadinstitute.hellbender.cmdline.CommandLineProgram;\n import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n import org.broadinstitute.hellbender.cmdline.programgroups.ExampleProgramGroup;\n import org.broadinstitute.hellbender.engine.GATKTool;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetClass;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetErrorResponse;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetFormat;\n-import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequest;\n+import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestBuilder;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetRequestField;\n import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse;\n-import org.broadinstitute.hellbender.tools.htsgetreader.HtsgetResponse.Block;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n import org.broadinstitute.hellbender.utils.Utils;\n \n-import avro.shaded.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+/**\n+ * A tool that downloads a file hosted on an htsget server to a local file\n+ * \n+ * <h3>Usage example</h3>\n+ * <pre>\n+ * gatk HtsgetReader \\\n+ *   --url htsget-server.org \\\n+ *   --id A1.bam \\\n+ *   --reference-name chr1\n+ *   -O output.bam\n+ * </pre>\n+ */\n \n @ExperimentalFeature\n @CommandLineProgramProperties(\n         summary = \"Download a file using htsget\",\n         oneLineSummary = \"Download a file using htsget\",\n         programGroup = ExampleProgramGroup.class\n )\n-public class HtsgetReader extends GATKTool {\n+public class HtsgetReader extends CommandLineProgram {\n \n     public static final String URL_LONG_NAME = \"url\";\n     public static final String ID_LONG_NAME = \"id\";\n     public static final String FORMAT_LONG_NAME = \"format\";\n     public static final String CLASS_LONG_NAME = \"class\";\n-    public static final String REFERENCE_LONG_NAME = \"reference-name\";\n-    public static final String START_LONG_NAME = \"start\";\n-    public static final String END_LONG_NAME = \"end\";\n     public static final String FIELDS_LONG_NAME = \"field\";\n     public static final String TAGS_LONG_NAME = \"tag\";\n     public static final String NOTAGS_LONG_NAME = \"notag\";\n     public static final String NUM_THREADS_LONG_NAME = \"reader-threads\";\n     public static final String CHECK_MD5_LONG_NAME = \"check-md5\";\n-    public static final String URL_SHORT_NAME = \"U\";\n-    public static final String ID_SHORT_NAME = \"ID\";\n-    public static final String FORMAT_SHORT_NAME = \"FO\";\n-    public static final String CLASS_SHORT_NAME = \"C\";\n-    public static final String REFERENCE_SHORT_NAME = \"RN\";\n-    public static final String START_SHORT_NAME = \"S\";\n-    public static final String END_SHORT_NAME = \"E\";\n-    public static final String FIELDS_SHORT_NAME = \"FL\";\n-    public static final String TAGS_SHORT_NAME = \"T\";\n-    public static final String NOTAGS_SHORT_NAME = \"N\";\n-\n-    @Argument(\n-            doc = \"Output file.\",\n-            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n-            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME\n-    )\n+\n+    @Argument(doc = \"Output file.\",\n+            fullName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n+            shortName = StandardArgumentDefinitions.OUTPUT_LONG_NAME)\n     private File outputFile;\n \n-    @Argument(\n-            doc = \"URL of htsget endpoint.\",\n+    @Argument(doc = \"URL of htsget endpoint.\",\n             fullName = URL_LONG_NAME,\n-            shortName = URL_SHORT_NAME\n-    )\n+            shortName = URL_LONG_NAME)\n     private URI endpoint;\n \n-    @Argument(\n-            doc = \"ID of record to request.\",\n+    @Argument(doc = \"ID of record to request.\",\n             fullName = ID_LONG_NAME,\n-            shortName = ID_SHORT_NAME\n-    )\n+            shortName = ID_LONG_NAME)\n     private String id;\n \n-    @Argument(\n-            doc = \"Format to request record data in.\",\n+    @Argument(doc = \"Format to request record data in.\",\n             fullName = FORMAT_LONG_NAME,\n-            shortName = FORMAT_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = FORMAT_LONG_NAME,\n+            optional = true)\n     private HtsgetFormat format;\n \n-    @Argument(\n-            doc = \"Class of data to request. Should be either `header` or `body`\",\n+    @Argument(doc = \"Class of data to request.\",\n             fullName = CLASS_LONG_NAME,\n-            shortName = CLASS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = CLASS_LONG_NAME,\n+            optional = true)\n     private HtsgetClass dataClass;\n \n-    @Argument(\n-            doc = \"Reference sequence name.\",\n-            fullName = REFERENCE_LONG_NAME,\n-            shortName = REFERENCE_SHORT_NAME,\n-            optional = true\n-    )\n-    private String referenceName;\n-\n-    @Argument(\n-            doc = \"Start position of the range on the reference, 0-based, inclusive\",\n-            fullName = START_LONG_NAME,\n-            shortName = START_SHORT_NAME,\n-            optional = true\n-    )\n-    private Integer start;\n-\n-    @Argument(\n-            doc = \"The end position of the range on the reference, 0-based exclusive.\",\n-            fullName = END_LONG_NAME,\n-            shortName = END_SHORT_NAME,\n-            optional = true\n-    )\n-    private Integer end;\n-\n-    @Argument(\n-            doc = \"A list of fields to include, default: all\",\n+    @Argument(doc = \"The interval and reference sequence to request\",\n+            fullName = StandardArgumentDefinitions.INTERVALS_LONG_NAME,\n+            shortName = StandardArgumentDefinitions.INTERVALS_SHORT_NAME,\n+            optional = true)\n+    private SimpleInterval interval;\n+\n+    @Argument(doc = \"A field to include, default: all\",\n             fullName = FIELDS_LONG_NAME,\n-            shortName = FIELDS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = FIELDS_LONG_NAME,\n+            optional = true)\n     private List<HtsgetRequestField> fields;\n \n-    @Argument(\n-            doc = \"A comma separated list of tags to include, default: all.\",\n+    @Argument(doc = \"A tag which should be included.\",\n             fullName = TAGS_LONG_NAME,\n-            shortName = TAGS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = TAGS_LONG_NAME,\n+            optional = true)\n     private List<String> tags;\n \n-    @Argument(\n-            doc = \"A comma separated list of tags to exclude, default: none.\",\n+    @Argument(doc = \"A tag which should be excluded.\",\n             fullName = NOTAGS_LONG_NAME,\n-            shortName = NOTAGS_SHORT_NAME,\n-            optional = true\n-    )\n+            shortName = NOTAGS_LONG_NAME,\n+            optional = true)\n     private List<String> notags;\n     \n     @Advanced\n-    @Argument(\n-            fullName = NUM_THREADS_LONG_NAME,\n+    @Argument(fullName = NUM_THREADS_LONG_NAME,\n             shortName = NUM_THREADS_LONG_NAME,\n             doc = \"How many simultaneous threads to use when reading data from an htsget response;\" +\n                     \"higher values may improve performance when network latency is an issue.\",\n             optional = true,\n             minValue = 1)\n     private int readerThreads = 1;\n \n-    @Argument(\n-            fullName = CHECK_MD5_LONG_NAME,\n-            shortName = CHECK_MD5_LONG_NAME,\n-            doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \" +\n-                \"and validate it against the provided md5 hash, if it exists.\",\n-            optional = true)\n+    @Argument(fullName = CHECK_MD5_LONG_NAME, shortName = CHECK_MD5_LONG_NAME, doc = \"Boolean determining whether to calculate the md5 digest of the assembled file \"\n+            + \"and validate it against the provided md5 hash, if it exists.\", optional = true)\n     private boolean checkMd5 = false;\n \n     private ExecutorService executorService;\n-    \n+\n     private CloseableHttpClient client;\n \n     @Override\n-    public void onTraversalStart() {\n+    public void onStartup() {\n         if (this.readerThreads > 1) {\n+            logger.info(\"Initializing with \" + this.readerThreads + \" threads\");\n             final ThreadFactory threadFactory = new ThreadFactoryBuilder()\n-                    .setNameFormat(\"htsgetReader-thread-%d\")\n-                    .setDaemon(true)\n-                    .build();\n+                .setNameFormat(\"htsgetReader-thread-%d\")\n+                .setDaemon(true).build();\n             this.executorService = Executors.newFixedThreadPool(readerThreads, threadFactory);\n         }\n         this.client = HttpClientBuilder.create()\n             .setConnectionManager(new PoolingHttpClientConnectionManager())\n-            // throw IOException on 5xx error codes so request is retried\n-            .addInterceptorLast(new HttpResponseInterceptor() {\n+            .setServiceUnavailableRetryStrategy(new ServiceUnavailableRetryStrategy() {\n                 @Override\n-                public void process(HttpResponse resp, HttpContext ctxt) throws HttpException, IOException {\n-                    int statusCode = resp.getStatusLine().getStatusCode();\n-                    if (500 <= statusCode && statusCode < 600) {\n-                        throw new IOException(\"Retry on 5xx error code\");\n+                // retry at most 4 times if a 5xx status code is received\n+                public boolean retryRequest(final HttpResponse resp, final int executionCount, final HttpContext context) {\n+                    if (executionCount > 4) {\n+                        return false;\n                     }\n+                    if (resp.getStatusLine() == null) {\n+                        return true;\n+                    }\n+                    final int statusCode = resp.getStatusLine().getStatusCode();\n+                    return 500 <= statusCode && statusCode < 600;\n+                }\n+\n+                @Override\n+                public long getRetryInterval() {\n+                    return 0;\n                 }\n             })\n-            .build();\n+           .build();\n     }\n \n     @Override\n     public void onShutdown() {\n-        try {\n-            this.client.close();\n-        } catch (IOException e) {\n-            logger.warn(\"Exception while closing httpClient\");\n-        }\n-    }\n-\n-    /**\n-     * Validates that the user query obeys htsget spec \n-     */\n-    private void validateRequest(HtsgetRequest req) {\n-        if (req.getDataClass() != null && req.getDataClass() == HtsgetClass.header && (\n-            req.getReferenceName() != null ||\n-            req.getStart() != null ||\n-            req.getEnd() != null ||\n-            ! req.getFields().isEmpty() ||\n-            ! req.getTags().isEmpty() ||\n-            ! req.getNoTags().isEmpty())) {\n-                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n-        }\n-        if (req.getStart() != null && req.getStart() < 0) {\n-            throw new UserException(\"Invalid request: start must be non-negative\");\n-        }\n-        if (req.getEnd() != null && req.getEnd() < 0) {\n-            throw new UserException(\"Invalid request: end must be non-negative\");\n-        }\n-        if (req.getStart() != null && req.getEnd() != null && req.getStart() > req.getEnd()) {\n-            throw new UserException(\"Invalid request: end may not be greater than start\");\n+        if (this.client != null) {\n+            try {\n+                this.client.close();\n+            } catch (final IOException e) {\n+                logger.warn(\"Exception while closing httpClient\", e);\n+            }\n         }\n-        String intersections = req.getTags().stream()\n-            .filter(req.getNoTags()::contains)\n-            .collect(Collectors.joining(\", \"));\n-        if (! intersections.isEmpty()) {\n-            throw new UserException(\"Invalid request: tags and notags overlap in the following fields: \" + intersections);\n+        if (this.executorService != null) {\n+            this.executorService.shutdownNow();\n         }\n+        super.onShutdown();\n     }\n \n-    /** \n+    /**\n      * Downloads data blocks provided by response to outputFile in serial\n-    */\n-    private void getData(HtsgetResponse response) throws IOException {\n+     */\n+    private void getData(final HtsgetResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5MDUyMw==", "bodyText": "This comment is out of date I think.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r433990523", "createdAt": "2020-06-02T15:57:54Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequestBuilder.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+\n+/**\n+ * A single htsget request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5MzcyMg==", "bodyText": "do you need to include .vcf.gz as an option here?  There are a filename constants defined in  htsjdk.samtools.util.FileExtensions which are nice to reference instead of using raw strings. It make it easily searchable.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r433993722", "createdAt": "2020-06-02T16:01:05Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetRequestBuilder.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.broadinstitute.hellbender.tools.htsgetreader;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.UriBuilder;\n+\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+\n+/**\n+ * A single htsget request\n+ * \n+ * Can only be converted to a URI after validating that request is properly formed\n+ */\n+public class HtsgetRequestBuilder {\n+    final private URI endpoint;\n+    final private String id;\n+\n+    // Query parameters\n+    private HtsgetFormat format;\n+    private HtsgetClass dataClass;\n+    private SimpleInterval interval;\n+    private final EnumSet<HtsgetRequestField> fields;\n+    private final Set<String> tags;\n+    private final Set<String> notags;\n+\n+    public HtsgetRequestBuilder(final URI endpoint, final String id) {\n+        this.endpoint = endpoint;\n+        this.id = id;\n+        this.fields = EnumSet.noneOf(HtsgetRequestField.class);\n+        this.tags = new HashSet<>();\n+        this.notags = new HashSet<>();\n+    }\n+\n+    public URI getEndpoint() {\n+        return this.endpoint;\n+    }\n+\n+    public String getID() {\n+        return this.id;\n+    }\n+\n+    public HtsgetFormat getFormat() {\n+        return this.format;\n+    }\n+\n+    public HtsgetClass getDataClass() {\n+        return this.dataClass;\n+    }\n+\n+    public SimpleInterval getInterval() {\n+        return this.interval;\n+    }\n+\n+    public Set<HtsgetRequestField> getFields() {\n+        return Collections.unmodifiableSet(this.fields);\n+    }\n+\n+    public Set<String> getTags() {\n+        return Collections.unmodifiableSet(this.tags);\n+    }\n+\n+    public Set<String> getNoTags() {\n+        return Collections.unmodifiableSet(this.notags);\n+    }\n+\n+    public void setFormat(final HtsgetFormat format) {\n+        this.format = format;\n+    }\n+\n+    public void setDataClass(final HtsgetClass dataClass) {\n+        this.dataClass = dataClass;\n+    }\n+\n+    public void setInterval(final SimpleInterval interval) {\n+        this.interval = interval;\n+    }\n+\n+    public void addField(final HtsgetRequestField field) {\n+        this.fields.add(field);\n+    }\n+\n+    public void addFields(final Collection<HtsgetRequestField> fields) {\n+        this.fields.addAll(fields);\n+    }\n+\n+    public void addTag(final String tag) {\n+        this.tags.add(tag);\n+    }\n+\n+    public void addTags(final Collection<String> tags) {\n+        this.tags.addAll(tags);\n+    }\n+\n+    public void addNotag(final String notag) {\n+        this.notags.add(notag);\n+    }\n+\n+    public void addNotags(final Collection<String> notags) {\n+        this.notags.addAll(notags);\n+    }\n+\n+    public HtsgetRequestBuilder withFormat(final HtsgetFormat format) {\n+        this.format = format;\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withDataClass(final HtsgetClass dataClass) {\n+        this.dataClass = dataClass;\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withInterval(final SimpleInterval interval) {\n+        this.interval = interval;\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withField(final HtsgetRequestField field) {\n+        this.fields.add(field);\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withFields(final Collection<HtsgetRequestField> fields) {\n+        this.fields.addAll(fields);\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withTag(final String tag) {\n+        this.tags.add(tag);\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withTags(final Collection<String> tags) {\n+        this.tags.addAll(tags);\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withNotag(final String notag) {\n+        this.notags.add(notag);\n+        return this;\n+    }\n+\n+    public HtsgetRequestBuilder withNotags(final Collection<String> notags) {\n+        this.notags.addAll(notags);\n+        return this;\n+    }\n+\n+    /**\n+     * Validates that the user query obeys htsget spec\n+     */\n+    private void validateRequest() {\n+        if (this.dataClass != null && this.dataClass == HtsgetClass.header && (\n+            this.interval != null ||\n+            ! this.fields.isEmpty() ||\n+            ! this.tags.isEmpty() ||\n+            ! this.notags.isEmpty())) {\n+                throw new UserException(\"Invalid request: no query parameters except `format` may be specified when class=header\");\n+        }\n+\n+        if (this.format != null) {\n+            if ((this.id.endsWith(\".bam\") || this.id.endsWith(\".cram\") && (\n+                this.format != HtsgetFormat.BAM && this.format != HtsgetFormat.CRAM))\n+                ||\n+                (this.id.endsWith(\".vcf\") || this.id.endsWith(\".bcf\")) && (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTc5Ng==", "bodyText": "Since this is a pretty substantial block of now duplicated code, let deduplicate it.  I would recommend just moving this getHttpClient method to a new class, maybe HttpUtils, and maybe just making it a singleton since it's threadsafe and we could share it.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r434001796", "createdAt": "2020-06-02T16:11:31Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetResponse.java", "diffHunk": "@@ -26,17 +46,78 @@\n         @JsonProperty(\"class\")\n         private HtsgetClass dataClass;\n \n+        @JsonIgnore\n+        private static CloseableHttpClient client;\n+\n         public URI getUri() {\n             return this.uri;\n         }\n \n         public Map<String, String> getHeaders() {\n-            return this.headers;\n+            return Collections.unmodifiableMap(this.headers);\n         }\n \n         public HtsgetClass getDataClass() {\n             return this.dataClass;\n         }\n+\n+        private static synchronized CloseableHttpClient getHttpClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMzExMw==", "bodyText": "Could you add a comment to this method explaining what happens here?  It's useful to know that it potentially gets saved to a temp file and then you read from the tmp file and that's not obvious unless you read the code.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r434003113", "createdAt": "2020-06-02T16:13:26Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/htsgetreader/HtsgetResponse.java", "diffHunk": "@@ -26,17 +46,78 @@\n         @JsonProperty(\"class\")\n         private HtsgetClass dataClass;\n \n+        @JsonIgnore\n+        private static CloseableHttpClient client;\n+\n         public URI getUri() {\n             return this.uri;\n         }\n \n         public Map<String, String> getHeaders() {\n-            return this.headers;\n+            return Collections.unmodifiableMap(this.headers);\n         }\n \n         public HtsgetClass getDataClass() {\n             return this.dataClass;\n         }\n+\n+        private static synchronized CloseableHttpClient getHttpClient() {\n+            if (Block.client == null) {\n+                Block.client = HttpClientBuilder.create()\n+                    .setConnectionManager(new PoolingHttpClientConnectionManager())\n+                    .setServiceUnavailableRetryStrategy(new ServiceUnavailableRetryStrategy() {\n+                        @Override\n+                        // retry at most 4 times if a 5xx status code is received, or no status line is present\n+                        public boolean retryRequest(final HttpResponse resp, final int executionCount, final HttpContext context) {\n+                            if (executionCount > 4) {\n+                                return false;\n+                            }\n+                            if (resp.getStatusLine() == null) {\n+                                return true;\n+                            }\n+                            final int statusCode = resp.getStatusLine().getStatusCode();\n+                            return 500 <= statusCode && statusCode < 600;\n+                        }\n+\n+                        @Override\n+                        public long getRetryInterval() {\n+                            return 0;\n+                        }\n+                    })\n+                    .build();\n+            }\n+            return Block.client;\n+        }\n+\n+        public InputStream getData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMzI5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r434003295", "createdAt": "2020-06-02T16:13:43Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.broadinstitute.hellbender.tools;\n+\n+import org.broadinstitute.hellbender.CommandLineProgramTest;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.testutils.ArgumentsBuilder;\n+import org.broadinstitute.hellbender.testutils.IntegrationTestSpec;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2OTY3Ng=="}, "originalCommit": {"oid": "46b832a2ce425495f7337c695d1385a027dd47e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMzY0Mw==", "bodyText": "Good idea to make it a dataprovider.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r434003643", "createdAt": "2020-06-02T16:14:18Z", "author": {"login": "lbergelson"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/HtsgetReaderIntegrationTest.java", "diffHunk": "@@ -13,117 +14,103 @@\n \n import com.google.common.collect.ImmutableMap;\n \n+\n public class HtsgetReaderIntegrationTest extends CommandLineProgramTest {\n \n     private static final String ENDPOINT = \"https://htsget.ga4gh.org/reads\";\n-\n-    // Test ability to initiate download with no aditional parameters\n-    @Test\n-    public void testBasicDownload() throws IOException {\n-        final File expected = new File(getToolTestDataDir(), \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\");\n-        final File output = createTempFile(\"output\", \".bam\");\n-\n-        final ArgumentsBuilder args = new ArgumentsBuilder()\n-                .add(\"U\", ENDPOINT)\n-                .add(\"ID\", \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\")\n-                .addOutput(output);\n-\n-        runCommandLine(args);\n-        IntegrationTestSpec.assertEqualTextFiles(output, expected, \"@\");\n+    private static final String FILE_ID = \"A1-B000168-3_57_F-1-1_R2.mus.Aligned.out.sorted.bam\";\n+\n+    @DataProvider(name = \"successfulParameters\")\n+    Object[][] successfulParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da3cb5ee0e544b1859f4e61a0a4407884b01462"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDc3OTcx", "url": "https://github.com/broadinstitute/gatk/pull/6611#pullrequestreview-423077971", "createdAt": "2020-06-02T21:41:47Z", "commit": {"oid": "a833ed2507d3695e384a18442a5584463f977e6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MTo0N1rOGeE9qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MTo0N1rOGeE9qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MTc4Nw==", "bodyText": "This is dangerous.  It's a clever idea, but OutOfMemory error isn't predictable.  It's very possible that you start doing this operation in this thread and somewhere else we get an OutOfMemoryError.  In general it's good advice to never catch Error.  They indicate problems which you are not expected to be able to recover from.", "url": "https://github.com/broadinstitute/gatk/pull/6611#discussion_r434191787", "createdAt": "2020-06-02T21:41:47Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/Utils.java", "diffHunk": "@@ -565,7 +553,32 @@ public static String calculatePathMD5(final Path path) throws IOException{\n         if (!Files.isRegularFile(path)) {\n             throw new IOException(\"File '\" + fname + \"' exists but is not a regular file\");\n         }\n-        return Utils.calcMD5(Files.readAllBytes(path));\n+        try {\n+            return Utils.calcMD5(Files.readAllBytes(path));\n+        } catch (final OutOfMemoryError e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a833ed2507d3695e384a18442a5584463f977e6b"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9898151d10edddd209efc25fa790c62c934f5e91", "author": {"user": {"login": "andersleung", "name": "Anders Leung"}}, "url": "https://github.com/broadinstitute/gatk/commit/9898151d10edddd209efc25fa790c62c934f5e91", "committedDate": "2020-06-05T15:30:25Z", "message": "Add basic HtsgetReader tool to gatk"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "906bacfe390b3ab69a779ba1b513f89039c7ff50", "author": {"user": {"login": "andersleung", "name": "Anders Leung"}}, "url": "https://github.com/broadinstitute/gatk/commit/906bacfe390b3ab69a779ba1b513f89039c7ff50", "committedDate": "2020-06-05T14:40:11Z", "message": "Disable tests relying on reference server for time being"}, "afterCommit": {"oid": "9898151d10edddd209efc25fa790c62c934f5e91", "author": {"user": {"login": "andersleung", "name": "Anders Leung"}}, "url": "https://github.com/broadinstitute/gatk/commit/9898151d10edddd209efc25fa790c62c934f5e91", "committedDate": "2020-06-05T15:30:25Z", "message": "Add basic HtsgetReader tool to gatk"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDc1Mjg2", "url": "https://github.com/broadinstitute/gatk/pull/6611#pullrequestreview-425475286", "createdAt": "2020-06-05T17:07:04Z", "commit": {"oid": "9898151d10edddd209efc25fa790c62c934f5e91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2592, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}