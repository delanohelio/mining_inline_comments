{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTAyNDYz", "number": 6404, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo0Mzo0MFrODZoXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjoyMzo1NFrODZqAmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjAyMzE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo0Mzo0MFrOFgIL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowOTowNFrOFgI3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMjg3Mg==", "bodyText": "I think we need to go the other way don't we?  Increase the start and leave the end alone?", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369232872", "createdAt": "2020-01-21T20:43:40Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,9 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval)\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b4e607be3731ce33680ae009b3c6c6ba95759d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNTYwNg==", "bodyText": "Suppose the last included position is 5.\n\n\nAccount for exclusive --> inclusive stop.\nBWA mem alignment is exclusive, hence its end is 6.  SimpleInterval is inclusive, so its end should be 5, which is BWA's end - 1.\n\n\naccount for 0-based --> 1-based contig\nAdd 1 to everything, so that adding 1 to the end cancels subtracting 1, while the start is incremented by 1.\n\n\n@lbergelson You're right.  Thank you!", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369235606", "createdAt": "2020-01-21T20:49:43Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,9 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval)\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMjg3Mg=="}, "originalCommit": {"oid": "f1b4e607be3731ce33680ae009b3c6c6ba95759d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0Mzk1NA==", "bodyText": "Sounds good to me!", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369243954", "createdAt": "2020-01-21T21:09:04Z", "author": {"login": "takutosato"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,9 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval)\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMjg3Mg=="}, "originalCommit": {"oid": "f1b4e607be3731ce33680ae009b3c6c6ba95759d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjI5Mjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjoyMzo1NFrOFgKz7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjoyNzoxMVrOFgK44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NTg4NA==", "bodyText": "@davidbenjamin Are we sure that the contig is correct?  I think alignment.getRefId() is likely to be 0 indexed, which means that you'll start with contig 0 when you want contig 1.  And obviously it doesn't work for non-numbered contigs.  I think what you need to be doing here is looking it up from bwaMemIndex.getReferenceContigNames().", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369275884", "createdAt": "2020-01-21T22:23:54Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,11 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval) (subtract 1 from the end)\n+    // combined with the conversion from 0-based to 1-based contigs (add 1 to start and end)\n+    // which has the net result of adding 1 to the start and leaving the end alone\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart() + 1, alignment.getRefEnd());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d33c3f8ebb062a52215207a505a042ad5845261"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NzE1Mg==", "bodyText": "Oh.  I see, it's using the same method to generate the overlap detectors, so that's ok.", "url": "https://github.com/broadinstitute/gatk/pull/6404#discussion_r369277152", "createdAt": "2020-01-21T22:27:11Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/realignmentfilter/RealignmentEngine.java", "diffHunk": "@@ -132,8 +132,11 @@ private final static boolean mightSupportInsertion(final CigarElement cigarEleme\n         return new ArrayList<>(commonAlignments);\n     }\n \n+    // note the conversion from exclusive end (BWAMemAlignment) to inclusive end (SimpleInterval) (subtract 1 from the end)\n+    // combined with the conversion from 0-based to 1-based contigs (add 1 to start and end)\n+    // which has the net result of adding 1 to the start and leaving the end alone\n     private static SimpleInterval convertToInterval(final BwaMemAlignment alignment) {\n-        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart(), alignment.getRefEnd());\n+        return new SimpleInterval(Integer.toString(alignment.getRefId()), alignment.getRefStart() + 1, alignment.getRefEnd());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NTg4NA=="}, "originalCommit": {"oid": "5d33c3f8ebb062a52215207a505a042ad5845261"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1060, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}