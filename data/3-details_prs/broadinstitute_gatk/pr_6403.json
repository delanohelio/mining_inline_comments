{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDg4NzMy", "number": 6403, "title": "Simplified cigar and clipping code; added tests and fixed a few bugs", "bodyText": "@lbergelson Would you mind looking at this one?  This branch started when I was working on our assembly and genotyping windows and ran into dead ends because the clipping code was indecipherable. i.e. as Laura put it it's fighting dragons and not fighting windmills.\nThe diff looks intimidating but I took great pains to make the commit history reviewer-friendly.  Every commit is self-contained.  Also, only three commits are particularly demanding: CigarBuilder class, greatly simplified hard and soft clipping methods in ClippingOp, and sped a very wasteful test util for generating many cigar permutations.  Most of the other commits are rubber-stampable.", "createdAt": "2020-01-21T20:11:19Z", "url": "https://github.com/broadinstitute/gatk/pull/6403", "merged": true, "mergeCommit": {"oid": "4b20af2e71449366764c4016def73f54b2aab31b"}, "closed": true, "closedAt": "2020-03-01T03:26:20Z", "author": {"login": "davidbenjamin"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGiL-mgFqTM1MzIyNDQ0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcI2QJNgFqTM2NjY3NjgyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjI0NDQ0", "url": "https://github.com/broadinstitute/gatk/pull/6403#pullrequestreview-353224444", "createdAt": "2020-02-04T19:02:14Z", "commit": {"oid": "6a050f08f44f36866c863f1c1f1417cfd5280815"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOTowMjoxNFrOFlf0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDoxMzo0NlrOFlh94g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2Mjg4Nw==", "bodyText": "This should have some javadoc to explain what the class is for.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374862887", "createdAt": "2020-02-04T19:02:14Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package org.broadinstitute.hellbender.utils.read;\n+\n+import htsjdk.samtools.Cigar;\n+import htsjdk.samtools.CigarElement;\n+import htsjdk.samtools.CigarOperator;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+public class CigarBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a050f08f44f36866c863f1c1f1417cfd5280815"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2NjUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Removes all clipping operators from the cigar.\n          \n          \n            \n                 * Removes all clipping and padding operators from the cigar.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374866514", "createdAt": "2020-02-04T19:09:43Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -128,7 +128,7 @@ public static int countRefBasesIncludingSoftClips(final GATKRead read, final int\n     /**\n      * Removes all clipping operators from the cigar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85d97f12416c4bc729d1a58ab8f0ee571059a5e8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2Njc0MQ==", "bodyText": "You might want to rename the private isClipOperator to isClipOrPaddingOperator as well.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374866741", "createdAt": "2020-02-04T19:10:12Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -128,7 +128,7 @@ public static int countRefBasesIncludingSoftClips(final GATKRead read, final int\n     /**\n      * Removes all clipping operators from the cigar.\n      */\n-    public static Cigar trimReadToUnclippedBases(final Cigar cigar) {\n+    public static Cigar removeClipsAndPadding(final Cigar cigar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85d97f12416c4bc729d1a58ab8f0ee571059a5e8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2NzQyMQ==", "bodyText": "It seemed fine where it was but if you have a strong preference for making it a top level class that's also fine with me.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374867421", "createdAt": "2020-02-04T19:11:35Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/ClippingTail.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.broadinstitute.hellbender.utils.read;\n+\n+/**\n+ * A marker to tell which end of the read has been clipped\n+ */\n+public enum ClippingTail {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77dd43ad8c1d8a21023455e571c037d3e9ba54f9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2ODM5MQ==", "bodyText": "wow, this is horrible, good riddance...  as far as I'm concerned asserts are a terrible anti-pattern", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374868391", "createdAt": "2020-02-04T19:13:26Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/clipping/ClippingOp.java", "diffHunk": "@@ -263,9 +258,7 @@ private Cigar softClip(final Cigar __cigar, final int __startClipEnd, final int\n \n             final Cigar newCigar = new Cigar();\n             newCigar.add(new CigarElement(cigarLength, CigarOperator.SOFT_CLIP));\n-            if (runAsserts) {\n-                assert newCigar.isValid(null, -1) == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "832d356f4c0bc4711e24e8ffce2f1283adf050d0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4Mjg2NA==", "bodyText": "Using read.getCigarElements instead of read.getCigar().getCigarElements() was a deliberate optimization that this seems to be undoing.  getCigar has to do a defensive copy of the Cigar since cigars are mutable, but getCigarElements just returns an immutable list view of the elements which is cheaper.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374882864", "createdAt": "2020-02-04T19:41:58Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/clipping/ReadClipper.java", "diffHunk": "@@ -471,7 +457,7 @@ protected GATKRead clipByReferenceCoordinates(final int refStart, final int refS\n      */\n     public static GATKRead softClipToRegionIncludingClippedBases( final GATKRead read, final int refStart, final int refStop ) {\n         final int start = read.getUnclippedStart();\n-        final int stop = start + CigarUtils.countRefBasesBasedOnUnclippedAlignment(read, 0, read.numCigarElements()) - 1;\n+        final int stop = start + CigarUtils.countRefBasesAndClips(read.getCigar(), 0, read.numCigarElements()) - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d28f9d411b4225bef12bd69ca903613efd7e0bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4NTc5OQ==", "bodyText": "I don't know if this is a performance critical method in mutect/haplotype caller, but if it is a simple for loop from startIndex to endIndex is going to be more performant than a stream over a sublist.\nThe predicate combination is neat, but I'm not sure if it's more readable than just a set of if statements", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374885799", "createdAt": "2020-02-04T19:48:00Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -56,40 +57,25 @@ public static Cigar invertCigar (final Cigar cigar) {\n      * For example original position = 10. cigar: 2M3I2D1M. If you remove the 2M the new starting position is 12.\n      * If you remove the 2M3I it is still 12. If you remove 2M3I2D (not reasonable cigar), you will get position 14.\n      */\n-    public static int countRefBasesBasedOnUnclippedAlignment(final GATKRead read, final int cigarStartIndex, final int cigarEndIndex){\n-        if (read == null){\n-            throw new IllegalArgumentException(\"null read\");\n-        }\n-        final List<CigarElement> elems = read.getCigarElements();\n-        if (cigarStartIndex < 0 || cigarEndIndex > elems.size() || cigarStartIndex > cigarEndIndex){\n-            throw new IllegalArgumentException(\"invalid index:\" + 0 + \" -\" + elems.size());\n-        }\n-        int result = 0;\n-        for(int i = cigarStartIndex; i < cigarEndIndex; i++){\n-            final CigarElement cigarElement = elems.get(i);\n-            final CigarOperator operator = cigarElement.getOperator();\n-            if (operator.consumesReferenceBases() || operator.isClipping()) {\n-                result += cigarElement.getLength();\n-            }\n-        }\n-        return result;\n+    public static int countRefBasesAndClips(final Cigar cigar, final int cigarStartIndex, final int cigarEndIndex){\n+        return countRefBasesAndMaybeAlsoClips(cigar, cigarStartIndex, cigarEndIndex, true, true);\n     }\n \n-    public static int countRefBasesIncludingSoftClips(final GATKRead read, final int cigarStartIndex, final int cigarEndIndex){\n-        Utils.nonNull(read, \"null read\");\n-        final List<CigarElement> elems = read.getCigarElements();\n-        if (cigarStartIndex < 0 || cigarEndIndex > elems.size() || cigarStartIndex > cigarEndIndex){\n-            throw new IllegalArgumentException(\"invalid index:\" + 0 + \" -\" + elems.size());\n-        }\n-        int result = 0;\n-        for(int i = cigarStartIndex; i < cigarEndIndex; i++){\n-            final CigarElement cigarElement = elems.get(i);\n-            final CigarOperator operator = cigarElement.getOperator();\n-            if (operator.consumesReferenceBases() || operator == CigarOperator.S) {\n-                result += cigarElement.getLength();\n-            }\n-        }\n-        return result;\n+    public static int countRefBasesAndSoftClips(final Cigar cigar, final int cigarStartIndex, final int cigarEndIndex){\n+        return countRefBasesAndMaybeAlsoClips(cigar, cigarStartIndex, cigarEndIndex, true, false);\n+    }\n+\n+    private static int countRefBasesAndMaybeAlsoClips(final Cigar cigar, final int cigarStartIndex, final int cigarEndIndex, final boolean includeSoftClips, final boolean includeHardClips) {\n+        final List<CigarElement> elems = Utils.nonNull(cigar).getCigarElements();\n+        Utils.validateArg(cigarStartIndex >= 0 && cigarEndIndex <= elems.size() && cigarStartIndex <= cigarEndIndex, () -> \"invalid index:\" + 0 + \" -\" + elems.size());\n+        final Predicate<CigarOperator> consumesRefBases = CigarOperator::consumesReferenceBases;\n+        final Predicate<CigarOperator> clippingPredicate = op -> (includeSoftClips && op == CigarOperator.SOFT_CLIP) || (includeHardClips && op == CigarOperator.HARD_CLIP);\n+        final Predicate<CigarOperator> countOperator = consumesRefBases.or(clippingPredicate);\n+\n+        return elems.subList(cigarStartIndex, cigarEndIndex).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d28f9d411b4225bef12bd69ca903613efd7e0bc"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4NjE5Nw==", "bodyText": "Oh, heh, I see, you already addressed the same exact problem here.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374886197", "createdAt": "2020-02-04T19:48:46Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -181,16 +181,7 @@ public static boolean isGood(final Cigar c) {\n             return false;\n         }\n         final List<CigarElement> elems = c.getCigarElements();\n-        if (hasConsecutiveIndels(elems)){\n-            return false;\n-        }\n-        if (startsWithDeletionIgnoringClips(elems)){\n-            return false;\n-        }\n-        //revert the list and check deletions at the end\n-        final List<CigarElement> elemsRev = new ArrayList<>(elems);\n-        Collections.reverse(elemsRev);\n-        return !startsWithDeletionIgnoringClips(elemsRev);\n+        return !(hasConsecutiveIndels(elems) || startsOrEndsWithDeletionIgnoringClips(elems));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "747914aed52ee4ca8f2d58f82f0ca589c1976556"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4ODM3Ng==", "bodyText": "doesn't this iterate over the whole cigar string now instead of just the first 2 elements? seems like a possible performance regression", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374888376", "createdAt": "2020-02-04T19:52:57Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -212,17 +203,19 @@ private static boolean hasConsecutiveIndels(final List<CigarElement> elems) {\n     /**\n      * Checks if cigar starts with a deletion (ignoring any clips at the beginning).\n      */\n-    private static boolean startsWithDeletionIgnoringClips(final List<CigarElement> elems) {\n-        final Iterator<CigarElement> iter = elems.iterator();\n-        boolean isClip = true;\n-        CigarOperator op = null;\n-        while(iter.hasNext() && isClip) { //consume clips at the beginning\n-            final CigarElement elem = iter.next();\n-            op = elem.getOperator();\n-            isClip = (op == CigarOperator.HARD_CLIP || op == CigarOperator.SOFT_CLIP);\n+    private static boolean startsOrEndsWithDeletionIgnoringClips(final List<CigarElement> elems) {\n+        CigarOperator lastOp = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "747914aed52ee4ca8f2d58f82f0ca589c1976556"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MDEwOA==", "bodyText": "neat", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374890108", "createdAt": "2020-02-04T19:56:37Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -355,6 +357,29 @@ public static int countUnclippedReadBases(final Cigar cigar) {\n                 .sum();\n     }\n \n+    private static int countClippedBases(final Cigar cigar, final ClippingTail tail, final boolean includeSoftClips, final boolean includeHardClips) {\n+        Utils.nonNull(cigar);\n+\n+        if (cigar.numCigarElements() == 0) {\n+            return 0;\n+        }\n+\n+        Utils.validate(includeHardClips || includeSoftClips, \"no clips chosen\");\n+        final Predicate<CigarOperator> pred = !includeHardClips ? op -> op == CigarOperator.S :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086adb20d0e407615591e57b770ece51c866ef1e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MTM0MQ==", "bodyText": "add a check for null clipping tail as well", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374891341", "createdAt": "2020-02-04T19:59:05Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -355,6 +357,29 @@ public static int countUnclippedReadBases(final Cigar cigar) {\n                 .sum();\n     }\n \n+    private static int countClippedBases(final Cigar cigar, final ClippingTail tail, final boolean includeSoftClips, final boolean includeHardClips) {\n+        Utils.nonNull(cigar);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086adb20d0e407615591e57b770ece51c866ef1e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MTg3MQ==", "bodyText": "lets pull the elements to iterate out into a variable, might make it a little bit cleaner to read", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374891871", "createdAt": "2020-02-04T20:00:15Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -355,6 +357,29 @@ public static int countUnclippedReadBases(final Cigar cigar) {\n                 .sum();\n     }\n \n+    private static int countClippedBases(final Cigar cigar, final ClippingTail tail, final boolean includeSoftClips, final boolean includeHardClips) {\n+        Utils.nonNull(cigar);\n+\n+        if (cigar.numCigarElements() == 0) {\n+            return 0;\n+        }\n+\n+        Utils.validate(includeHardClips || includeSoftClips, \"no clips chosen\");\n+        final Predicate<CigarOperator> pred = !includeHardClips ? op -> op == CigarOperator.S :\n+                (includeSoftClips ? op -> op.isClipping() : op -> op == CigarOperator.H);\n+        int result = 0;\n+        for (final CigarElement elem : tail == ClippingTail.LEFT_TAIL ? cigar : Lists.reverse(cigar.getCigarElements())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086adb20d0e407615591e57b770ece51c866ef1e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MjE5Mg==", "bodyText": "you could replace the op.isClipping() predicate with op -> true, but that's probably more confusing than it's worth", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374892192", "createdAt": "2020-02-04T20:00:56Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -355,6 +357,29 @@ public static int countUnclippedReadBases(final Cigar cigar) {\n                 .sum();\n     }\n \n+    private static int countClippedBases(final Cigar cigar, final ClippingTail tail, final boolean includeSoftClips, final boolean includeHardClips) {\n+        Utils.nonNull(cigar);\n+\n+        if (cigar.numCigarElements() == 0) {\n+            return 0;\n+        }\n+\n+        Utils.validate(includeHardClips || includeSoftClips, \"no clips chosen\");\n+        final Predicate<CigarOperator> pred = !includeHardClips ? op -> op == CigarOperator.S :\n+                (includeSoftClips ? op -> op.isClipping() : op -> op == CigarOperator.H);\n+        int result = 0;\n+        for (final CigarElement elem : tail == ClippingTail.LEFT_TAIL ? cigar : Lists.reverse(cigar.getCigarElements())) {\n+            final CigarOperator operator = elem.getOperator();\n+            if (!operator.isClipping()) {\n+                return result;\n+            } else if (pred.test(operator)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086adb20d0e407615591e57b770ece51c866ef1e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5Mjc5MA==", "bodyText": "How do you know it's a single soft clip?  Couldn't it be any number of any clip?", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374892790", "createdAt": "2020-02-04T20:02:13Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -355,6 +357,29 @@ public static int countUnclippedReadBases(final Cigar cigar) {\n                 .sum();\n     }\n \n+    private static int countClippedBases(final Cigar cigar, final ClippingTail tail, final boolean includeSoftClips, final boolean includeHardClips) {\n+        Utils.nonNull(cigar);\n+\n+        if (cigar.numCigarElements() == 0) {\n+            return 0;\n+        }\n+\n+        Utils.validate(includeHardClips || includeSoftClips, \"no clips chosen\");\n+        final Predicate<CigarOperator> pred = !includeHardClips ? op -> op == CigarOperator.S :\n+                (includeSoftClips ? op -> op.isClipping() : op -> op == CigarOperator.H);\n+        int result = 0;\n+        for (final CigarElement elem : tail == ClippingTail.LEFT_TAIL ? cigar : Lists.reverse(cigar.getCigarElements())) {\n+            final CigarOperator operator = elem.getOperator();\n+            if (!operator.isClipping()) {\n+                return result;\n+            } else if (pred.test(operator)) {\n+                result += elem.getLength();\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Input cigar has a single soft clip region that cannot be assigned to the left or right of the read\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086adb20d0e407615591e57b770ece51c866ef1e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NDE1NA==", "bodyText": "This should note that it will also normalize the cigar in other ways?", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374894154", "createdAt": "2020-02-04T20:05:09Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -430,4 +430,20 @@ public static int countAlignedBases(final Cigar cigar ) {\n                 .mapToInt(CigarElement::getLength)\n                 .sum();\n     }\n+\n+    /**\n+     * replace soft clips (S) with match (M) operators, merging any consecutive M's that result eg 10S10M -> 20M.\n+     */\n+    public static Cigar revertSoftClips(final Cigar originalCigar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184b5a5631e05e05cd7d0065e533897129ed60b6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5ODE0Ng==", "bodyText": "This will explode on a read that is entirely soft clips.  I don't know if that important.", "url": "https://github.com/broadinstitute/gatk/pull/6403#discussion_r374898146", "createdAt": "2020-02-04T20:13:46Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -430,4 +430,20 @@ public static int countAlignedBases(final Cigar cigar ) {\n                 .mapToInt(CigarElement::getLength)\n                 .sum();\n     }\n+\n+    /**\n+     * replace soft clips (S) with match (M) operators, merging any consecutive M's that result eg 10S10M -> 20M.\n+     */\n+    public static Cigar revertSoftClips(final Cigar originalCigar) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NDE1NA=="}, "originalCommit": {"oid": "184b5a5631e05e05cd7d0065e533897129ed60b6"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243526ba1795b74ddedff20306f82051cb16a610", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/243526ba1795b74ddedff20306f82051cb16a610", "committedDate": "2020-02-26T19:09:19Z", "message": "CigarBuilder class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94d43ceba6112c6dc8997342b402dc0c59cebaf1", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/94d43ceba6112c6dc8997342b402dc0c59cebaf1", "committedDate": "2020-02-26T19:09:19Z", "message": "deleted unused calcNumDifferentBases method in AlignmentUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80814eb904e99513de493c56d3081a467275db9f", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/80814eb904e99513de493c56d3081a467275db9f", "committedDate": "2020-02-26T19:12:05Z", "message": "renamed trimReadsToUnclippedBases to removeClipsAndPadding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd109891e8e4f049baf907f316b9459554f6f5f3", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/cd109891e8e4f049baf907f316b9459554f6f5f3", "committedDate": "2020-02-26T19:13:31Z", "message": "moved nested enum ReadUtils.ClippingTail up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7ae7b6818558062b2960831897f4e2a86493d4", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/3a7ae7b6818558062b2960831897f4e2a86493d4", "committedDate": "2020-02-26T19:13:34Z", "message": "got rid of asserts in clipping code.  Later commits will add thorough unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc157860484c3669158275265ddbce16578e894", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/dbc157860484c3669158275265ddbce16578e894", "committedDate": "2020-02-26T19:13:34Z", "message": "deleted unused hardClipByReadCoordinates method in ReadClipper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e51f0c4f602945c0aec0af0711ef4b04175b1466", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/e51f0c4f602945c0aec0af0711ef4b04175b1466", "committedDate": "2020-02-26T19:13:34Z", "message": "deleted unused hardClipLeadingInsertions method in ReadClipper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b86fefc17da64db5a0ad85068c70c61b03d9b4a8", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/b86fefc17da64db5a0ad85068c70c61b03d9b4a8", "committedDate": "2020-02-26T19:13:34Z", "message": "used CigarBuilder to render CigarUtils.combineAdjacentCigarElements unnecessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420779b7ac6e0c1f1b00fb13cf49db4b53f987c8", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/420779b7ac6e0c1f1b00fb13cf49db4b53f987c8", "committedDate": "2020-02-26T19:13:34Z", "message": "simplified CigarUtils methods for counting ref-consuming bases and clips"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "067eac11082522c6f934349572fd50e23c24867d", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/067eac11082522c6f934349572fd50e23c24867d", "committedDate": "2020-02-26T19:15:51Z", "message": "improved CigarUtils method for detecting leading or terminal deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98b87b79e0364a88f6921dacdb73427f2be08fb", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/a98b87b79e0364a88f6921dacdb73427f2be08fb", "committedDate": "2020-02-26T19:15:54Z", "message": "unified four related clip-counting methods in CigarUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285eb7bc64735a885b949fb1ec22c89a8da00e97", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/285eb7bc64735a885b949fb1ec22c89a8da00e97", "committedDate": "2020-02-26T19:15:54Z", "message": "extracted and simplified a revertSoftClips method to CigarUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b70b90cf240d2312d6b4c68cf6b2b0bbb62e59c", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/8b70b90cf240d2312d6b4c68cf6b2b0bbb62e59c", "committedDate": "2020-02-26T19:15:54Z", "message": "greatly simplified hard and soft clipping methods in ClippingOp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c607e3fa0615460db11acaf1a31e527582f0f6c", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/4c607e3fa0615460db11acaf1a31e527582f0f6c", "committedDate": "2020-02-26T19:15:54Z", "message": "inlined hasNonCLippedBases method used only in one test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477ca763f8c1b4bca23193e85a035fc4e16f3cdc", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/477ca763f8c1b4bca23193e85a035fc4e16f3cdc", "committedDate": "2020-02-26T19:15:54Z", "message": "deleted unused containsNOperator method in CigarUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc5d8508ccff6bae39f8cf331601fbc73aae860", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/dfc5d8508ccff6bae39f8cf331601fbc73aae860", "committedDate": "2020-02-26T19:17:43Z", "message": "simplified CigarUtils.reclipCigar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc02e795be0414a0d62cb5107b7d8b39ce1125e0", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/dc02e795be0414a0d62cb5107b7d8b39ce1125e0", "committedDate": "2020-02-26T19:20:07Z", "message": "simplified high-quality soft clip count method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "445e3627b4c8ddbbeb5a5782deec3bc41eef64e5", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/445e3627b4c8ddbbeb5a5782deec3bc41eef64e5", "committedDate": "2020-02-26T19:27:40Z", "message": "revert soft clips before hard clipping low qual ends in HC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c4eda0c4a293b2368665c0c07ee81fd4552f3f", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/42c4eda0c4a293b2368665c0c07ee81fd4552f3f", "committedDate": "2020-02-26T19:27:45Z", "message": "sped a very wasteful test util for generating many cigar permutations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633441b1e4e00a6b53f16832e8b4a2e3f912080a", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/633441b1e4e00a6b53f16832e8b4a2e3f912080a", "committedDate": "2020-02-26T19:27:45Z", "message": "review edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb318b0599a791b8d1100cfc4ea1dde01de482b8", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/eb318b0599a791b8d1100cfc4ea1dde01de482b8", "committedDate": "2020-02-26T19:27:45Z", "message": "review edits for simplified CigarUtils methods for counting ref-consuming bases and clips"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b19b5a1f60d655417dcad4f4693ba6f002f29696", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/b19b5a1f60d655417dcad4f4693ba6f002f29696", "committedDate": "2020-02-26T19:27:45Z", "message": "edits for improved CigarUtils method for detecting leading or terminal deletion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a666d1dc56959728c7f9fad6003870d971d96f21", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/a666d1dc56959728c7f9fad6003870d971d96f21", "committedDate": "2020-02-26T19:04:35Z", "message": "edits for improved CigarUtils method for detecting leading or terminal deletion"}, "afterCommit": {"oid": "b19b5a1f60d655417dcad4f4693ba6f002f29696", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/b19b5a1f60d655417dcad4f4693ba6f002f29696", "committedDate": "2020-02-26T19:27:45Z", "message": "edits for improved CigarUtils method for detecting leading or terminal deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3912bb1c1c45c54a6139a49c20fedc50afdcc633", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/3912bb1c1c45c54a6139a49c20fedc50afdcc633", "committedDate": "2020-02-26T20:18:25Z", "message": "post-rebase cleaning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Njc2ODIw", "url": "https://github.com/broadinstitute/gatk/pull/6403#pullrequestreview-366676820", "createdAt": "2020-02-28T20:49:59Z", "commit": {"oid": "3912bb1c1c45c54a6139a49c20fedc50afdcc633"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2889, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}