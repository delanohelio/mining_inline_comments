{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDQwMTQ5", "number": 6696, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMToxN1rOENIKOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMToxN1rOENIKOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjAwNjM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/haplotype/EventMapUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMToxN1rOGvovBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMzozMToxN1rOGvovBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwMzY1Mw==", "bodyText": "Define eventsExpected = expectedAlt != null || expectedRef != null, then have\nif (eventsExpected) {\n   Assert. . . \n}", "url": "https://github.com/broadinstitute/gatk/pull/6696#discussion_r452603653", "createdAt": "2020-07-10T03:31:17Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/haplotype/EventMapUnitTest.java", "diffHunk": "@@ -64,6 +66,81 @@ public void testMNPs(final String refBases, final String haplotypeBases, final S\n         }\n     }\n \n+    @DataProvider(name = \"overlappingEvents\")\n+    public Object[][] makeOverlappingEventsTestCases(){\n+        /**\n+         * loc   1234567890123\n+         * ref:  AAAAAAAAAACGG--TCA\n+         * hap1:        AAA---TTTCA (CGG deletion followed by a TT insertion)\n+         * hap2:        AAA-----TCA (CGG deletion only)\n+         * hap3:        AAACGA--TCA (G->A SNP at pos 13)\n+         * hap4:        AAACGGTTTCA (TT insertion only)\n+         *                 ^ ^      (query locs)\n+         *\n+         */\n+        List<Object[]> tests = new ArrayList<>();\n+        final Allele deletionRefAllele = Allele.create(\"ACGG\", true);\n+        final Allele deletionAltAllele = Allele.create(\"A\", false);\n+        final Allele insertionRefAllele = Allele.create(\"G\", true);\n+        final Allele insertionAltAllele = Allele.create(\"GTT\", false);\n+        final Allele snpRefAllele = Allele.create(\"G\", true);\n+        final Allele snpAltAllele = Allele.create(\"A\", false);\n+\n+        // hap1\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 10, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 11, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 12, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATTTCA\", \"3M3D2I3M\", 13, insertionRefAllele, insertionAltAllele});\n+\n+        // hap2\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 10, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 11, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 12, deletionRefAllele, deletionAltAllele});\n+        tests.add(new Object[]{\"AAATCA\", \"3M3D3M\", 13, deletionRefAllele, deletionAltAllele});\n+\n+        // hap3\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 10, null, null});\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 11, null, null});\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 12, null, null});\n+        tests.add(new Object[]{\"AAACGATCA\", \"9M\", 13, snpRefAllele, snpAltAllele});\n+\n+        // hap4\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 10, null, null});\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 11, null, null});\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 12, null, null});\n+        tests.add(new Object[]{\"AAACGGTTTCA\", \"6M2I3M\", 13, insertionRefAllele, insertionAltAllele});\n+\n+        return tests.toArray(new Object[][]{});\n+    }\n+\n+    @Test(dataProvider = \"overlappingEvents\")\n+    public void testGetOverlappingEvents(final String haplotypeBases, final String cigar, final int queryLoc,\n+                                         final Allele expectedRef, final Allele expectedAlt){\n+        // Parameters that are shared across test cases\n+        final String refBases = StringUtils.repeat('A', 10) + \"CGGTCA\";\n+        final int hapStartWrtRef = 7; // zero-based index into the ref array where the 0th base of the hap lines up\n+        final GenomeLoc refLoc = new UnvalidatingGenomeLoc(CHR, 0, 1, refBases.length());\n+\n+        final Haplotype hap = new Haplotype(haplotypeBases.getBytes(), false, hapStartWrtRef, TextCigarCodec.decode(cigar));\n+        final EventMap eventMap = new EventMap(hap, refBases.getBytes(), refLoc, NAME, 1);\n+\n+        // final List<VariantContext> overlappingEvents = eventMap.getOverlappingEvents(queryLoc);\n+        final List<VariantContext> overlappingEvents = eventMap.getOverlappingEventsLegacy(queryLoc);\n+\n+        final boolean noEventsExpected = expectedAlt == null && expectedRef == null;\n+        Assert.assertEquals(overlappingEvents.size(), noEventsExpected ? 0 : 1);\n+\n+        if (noEventsExpected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "276f821b958b837f43e0c5e1b99e99ff55b4205a"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1009, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}