{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTEwMDgw", "number": 6352, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo1OTo0MFrODXp4fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMToxMjowOFrODXqFSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTMwMDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo1OTo0MFrOFdEZKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyNzoyMlrOFdkyzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNTAwMA==", "bodyText": "Would it be better to use GATKTool's createVCFWriter()?", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366025000", "createdAt": "2020-01-13T20:59:40Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -372,7 +374,8 @@ public Object onTraversalSuccess() {\n \n     private void generateIntervalsVCFFileFromAllShards() {\n         logger.info(\"Generating intervals VCF file...\");\n-        final VariantContextWriter intervalsVCFWriter = createVCFWriter(outputIntervalsVCFFile);\n+        final VariantContextWriter intervalsVCFWriter = GATKVariantContextUtils.createVCFWriter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3MTQ0OQ==", "bodyText": "The GATKTool method won't accept a sequence dictionary.  It relies on the engine discovering a sequence dictionary from one of the inputs, which doesn't work so well here because the inputs are specified as directories.", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366471449", "createdAt": "2020-01-14T17:25:15Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -372,7 +374,8 @@ public Object onTraversalSuccess() {\n \n     private void generateIntervalsVCFFileFromAllShards() {\n         logger.info(\"Generating intervals VCF file...\");\n-        final VariantContextWriter intervalsVCFWriter = createVCFWriter(outputIntervalsVCFFile);\n+        final VariantContextWriter intervalsVCFWriter = GATKVariantContextUtils.createVCFWriter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNTAwMA=="}, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDM3NQ==", "bodyText": "Isn\u2019t the dictionary hooked up to createVCFWriter now via getBestAvailableSequenceDictionary?", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366550375", "createdAt": "2020-01-14T20:14:17Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -372,7 +374,8 @@ public Object onTraversalSuccess() {\n \n     private void generateIntervalsVCFFileFromAllShards() {\n         logger.info(\"Generating intervals VCF file...\");\n-        final VariantContextWriter intervalsVCFWriter = createVCFWriter(outputIntervalsVCFFile);\n+        final VariantContextWriter intervalsVCFWriter = GATKVariantContextUtils.createVCFWriter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNTAwMA=="}, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NTg1NQ==", "bodyText": "Ah yes, this is a holdover from before I implemented that suggestion Louis had.  Thanks for the extra set of eyes.", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366555855", "createdAt": "2020-01-14T20:27:22Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -372,7 +374,8 @@ public Object onTraversalSuccess() {\n \n     private void generateIntervalsVCFFileFromAllShards() {\n         logger.info(\"Generating intervals VCF file...\");\n-        final VariantContextWriter intervalsVCFWriter = createVCFWriter(outputIntervalsVCFFile);\n+        final VariantContextWriter intervalsVCFWriter = GATKVariantContextUtils.createVCFWriter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNTAwMA=="}, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTMwMTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo1OTo1OFrOFdEZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo1OTo1OFrOFdEZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNTEwNg==", "bodyText": "Same here?", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366025106", "createdAt": "2020-01-13T20:59:58Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -412,7 +415,8 @@ private void generateSegmentsVCFFileFromAllShards() {\n \n         /* write variants */\n         logger.info(String.format(\"Writing segments VCF file to %s...\", outputSegmentsVCFFile.getAbsolutePath()));\n-        final VariantContextWriter segmentsVCFWriter = createVCFWriter(outputSegmentsVCFFile);\n+        final VariantContextWriter segmentsVCFWriter = GATKVariantContextUtils.createVCFWriter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTMwNTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/gcnv/GermlineCNVSegmentVariantComposer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTowMTozN1rOFdEcLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTowMTozN1rOFdEcLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyNTc3Mg==", "bodyText": "Can delete", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366025772", "createdAt": "2020-01-13T21:01:37Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/gcnv/GermlineCNVSegmentVariantComposer.java", "diffHunk": "@@ -128,7 +128,7 @@ VariantContext composeVariantContext(final IntegerCopyNumberSegment segment) {\n         int copyNumberCall = segment.getCallIntegerCopyNumberState().getCopyNumber();\n \n         final VariantContextBuilder variantContextBuilder = new VariantContextBuilder();\n-        variantContextBuilder.alleles(ALL_ALLELES);\n+        //variantContextBuilder.alleles(ALL_ALLELES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTMzMzIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/gcnv/GermlineCNVSegmentVariantComposer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMToxMjowOFrOFdEtfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo1MDo1MVrOFdgY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzMDIwNg==", "bodyText": "Could write this as final List<Allele> vcAlleles = Lists.newArrayList(REF_ALLELE);", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366030206", "createdAt": "2020-01-13T21:12:08Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/gcnv/GermlineCNVSegmentVariantComposer.java", "diffHunk": "@@ -155,8 +155,14 @@ VariantContext composeVariantContext(final IntegerCopyNumberSegment segment) {\n         genotypeBuilder.attribute(QSE, FastMath.round(segment.getQualityEnd()));\n         final Genotype genotype = genotypeBuilder.make();\n \n+        final List<Allele> vcAlleles = new ArrayList<>(Collections.singletonList(REF_ALLELE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4MzY5OQ==", "bodyText": "Lists is in which package?  avro?", "url": "https://github.com/broadinstitute/gatk/pull/6352#discussion_r366483699", "createdAt": "2020-01-14T17:50:51Z", "author": {"login": "ldgauthier"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/gcnv/GermlineCNVSegmentVariantComposer.java", "diffHunk": "@@ -155,8 +155,14 @@ VariantContext composeVariantContext(final IntegerCopyNumberSegment segment) {\n         genotypeBuilder.attribute(QSE, FastMath.round(segment.getQualityEnd()));\n         final Genotype genotype = genotypeBuilder.make();\n \n+        final List<Allele> vcAlleles = new ArrayList<>(Collections.singletonList(REF_ALLELE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzMDIwNg=="}, "originalCommit": {"oid": "7f97fb156cde3bc72c5fab1cb136a797dc95af5f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1211, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}