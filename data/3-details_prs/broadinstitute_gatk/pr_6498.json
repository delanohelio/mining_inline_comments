{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDU0OTYx", "number": 6498, "title": "Clean leading deletions from reads realigned to best haplotypes", "bodyText": "Closes #6490\n@jamesemery can you review this once tests pass?", "createdAt": "2020-03-12T05:54:23Z", "url": "https://github.com/broadinstitute/gatk/pull/6498", "merged": true, "mergeCommit": {"oid": "f1aea57c933c939a8afa47d675611b97555539c7"}, "closed": true, "closedAt": "2020-03-17T16:41:33Z", "author": {"login": "davidbenjamin"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMrLZCAH2gAyMzg3MDU0OTYxOjQxNzg1Mjg0OWZmOTk2OTQ3ODNjYThmNzY5MTRhNmU0NjdmY2E4Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOj23xAFqTM3NjEwNTQ1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "417852849ff99694783ca8f76914a6e467fca869", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/417852849ff99694783ca8f76914a6e467fca869", "committedDate": "2020-03-11T18:11:32Z", "message": "Replaced consolidateCigar with CigarBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "141c41550e6e95946d8094c44cbb6621ad8a12ec", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/141c41550e6e95946d8094c44cbb6621ad8a12ec", "committedDate": "2020-03-11T18:26:07Z", "message": "things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c117d6383d1850fad9754218c04fa390447e269f", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/c117d6383d1850fad9754218c04fa390447e269f", "committedDate": "2020-03-12T02:40:20Z", "message": "Improved trimCigar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f89d628d1dadca3c4f8b12652f473c76ab151ed5", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/f89d628d1dadca3c4f8b12652f473c76ab151ed5", "committedDate": "2020-03-12T02:45:19Z", "message": "moving around arg validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e007e9c4bd0db2714c1ffe1b98f829d94f43f728", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/e007e9c4bd0db2714c1ffe1b98f829d94f43f728", "committedDate": "2020-03-12T02:49:27Z", "message": "delete two unused methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1bdc4ae2d0c7e8ce31868cd5b91219fabb0012", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/1f1bdc4ae2d0c7e8ce31868cd5b91219fabb0012", "committedDate": "2020-03-12T02:52:35Z", "message": "got rid of cleanUpCigar which was made obsolete by CigarBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18051c7abf3caaf85d25ba503a809619758ad9c7", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/18051c7abf3caaf85d25ba503a809619758ad9c7", "committedDate": "2020-03-12T03:29:54Z", "message": "refactored logic for completely trimmed cigars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb926ebcf4aa75ec3331e6ef1da95c821ec2805", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/1fb926ebcf4aa75ec3331e6ef1da95c821ec2805", "committedDate": "2020-03-12T03:50:10Z", "message": "leading insertions edge case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6835f5cbefef7970ead8e0781ceb620b361f087e", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/6835f5cbefef7970ead8e0781ceb620b361f087e", "committedDate": "2020-03-12T05:22:10Z", "message": "accounting for removing leading deletions causing an alignment start shift"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ee462e5a8e108b01421c10842c2443a9f7d009f", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/3ee462e5a8e108b01421c10842c2443a9f7d009f", "committedDate": "2020-03-12T05:25:08Z", "message": "fixing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/c50b5cc0f60e4b23f6801bc932af051a4bda864a", "committedDate": "2020-03-12T05:44:41Z", "message": "update test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81b930f28c6349f2e15de42bd77069517ba6d07", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/d81b930f28c6349f2e15de42bd77069517ba6d07", "committedDate": "2020-03-12T14:26:39Z", "message": "fixing last tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNTc0MDU3", "url": "https://github.com/broadinstitute/gatk/pull/6498#pullrequestreview-373574057", "createdAt": "2020-03-12T13:53:47Z", "commit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzo1Mzo0N1rOF1fiIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo1Nzo0M1rOF1iPbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTQ4OA==", "bodyText": "Thats concerning, why should we be dropping an indel call here?", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391635488", "createdAt": "2020-03-12T13:53:47Z", "author": {"login": "jamesemery"}, "path": "src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/newMQcalc.combined.g.vcf", "diffHunk": "@@ -11191,18 +11191,18 @@\n 20\t10098280\t.\tA\t<NON_REF>\t.\t.\tEND=10098284\tGT:DP:GQ:MIN_DP:PL\t./.:4:9:3:0,9,126\t./.:48:51:42:0,51,765\n 20\t10098285\t.\tT\t<NON_REF>\t.\t.\tEND=10098288\tGT:DP:GQ:MIN_DP:PL\t./.:4:9:3:0,9,126\t./.:43:45:41:0,45,675\n 20\t10098289\t.\tA\t<NON_REF>\t.\t.\tEND=10098290\tGT:DP:GQ:MIN_DP:PL\t./.:4:9:3:0,9,126\t./.:41:33:40:0,33,495\n-20\t10098291\t.\tA\t<NON_REF>\t.\t.\tEND=10098292\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:42:27:41:0,27,405\n-20\t10098293\t.\tG\t<NON_REF>\t.\t.\t.\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:29:24:29:0,24,360\n-20\t10098294\t.\tT\t<NON_REF>\t.\t.\tEND=10098297\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:40:15:40:0,15,225\n-20\t10098298\t.\tA\t<NON_REF>\t.\t.\t.\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:36:12:36:0,12,180\n-20\t10098299\t.\tT\t<NON_REF>\t.\t.\t.\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:39:9:39:0,9,135\n-20\t10098300\t.\tT\t<NON_REF>\t.\t.\tEND=10098305\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:41:6:35:0,6,90\n-20\t10098306\t.\tG\t<NON_REF>\t.\t.\tEND=10098307\tGT:DP:GQ:MIN_DP:PL\t./.:3:6:2:0,6,86\t./.:32:3:27:0,3,45\n-20\t10098308\t.\tAAT\tA,<NON_REF>\t.\t.\tDP=35;ExcessHet=3.01;RAW_MQandDP=7200,2\tGT:AD:DP:GQ:MIN_DP:PL:SB\t./.:2,0,0:2:6:.:0,6,81,6,81,81:0,2,0,0\t./.:.:39:0:33:0,0,0,0,0,0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzODAyMw==", "bodyText": "What does this method do if pad size is 0? Does that mean it will add an empty cigar element into the cigar?", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391638023", "createdAt": "2020-03-12T13:57:34Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/haplotype/Haplotype.java", "diffHunk": "@@ -176,11 +175,7 @@ public Cigar getCigar() {\n      */\n     public Cigar getConsolidatedPaddedCigar(final int padSize) {\n         Utils.validateArg( padSize >= 0, () -> \"padSize must be >= 0 but got \" + padSize);\n-        final Cigar extendedHaplotypeCigar = new Cigar(getCigar().getCigarElements());\n-        if ( padSize > 0 ) {\n-            extendedHaplotypeCigar.add(new CigarElement(padSize, CigarOperator.M));\n-        }\n-        return AlignmentUtils.consolidateCigar(extendedHaplotypeCigar);\n+        return new CigarBuilder().addAll(getCigar()).add(new CigarElement(padSize, CigarOperator.M)).make();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0MjY3Nw==", "bodyText": "I'm not sure there is cause to eliminate this method. This is a reasonably useful utility method with associated tests that someone might want to use in the future.", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391642677", "createdAt": "2020-03-12T14:04:15Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -31,23 +31,6 @@\n     // cannot be instantiated\n     private AlignmentUtils() { }\n \n-    /**\n-     * Does cigar start or end with a deletion operation?\n-     *\n-     * @param cigar a non-null cigar to test\n-     * @return true if the first or last operator of cigar is a D\n-     */\n-    public static boolean startsOrEndsWithInsertionOrDeletion(final Cigar cigar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2MDU1OA==", "bodyText": "Add a sentence explaining this method, particularly that it is also responsible for tabulating deletions  interspersed with matches. it might be worth making a unit test  for this.", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391660558", "createdAt": "2020-03-12T14:30:12Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -232,12 +232,33 @@ public static Cigar calculateCigar(final byte[] refSeq, final byte[] altSeq, fin\n         final int baseEnd = paddedPath.length() - SW_PAD.length() - 1; // -1 because it's inclusive\n         nonStandard = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n \n-        if ( nonStandard.getReferenceLength() != refSeq.length ) {\n-            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength(), CigarOperator.D));\n+        // was there a deletion element in the SW alignment between the padding and the start?\n+        // if so, it was removed by cigar trimming and we must account for the shift in alignment start\n+        // otherwise, left-alignment will be wrong\n+        final int leadingDeletionsInAlignment = deletionsBeforeStart(alignment.getCigar(), baseStart);\n+\n+        if ( nonStandard.getReferenceLength() + leadingDeletionsInAlignment < refSeq.length ) {\n+            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength() - leadingDeletionsInAlignment, CigarOperator.D));\n         }\n \n-        // finally, return the cigar with all indels left aligned\n-        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, 0);\n+        return AlignmentUtils.leftAlignIndels(nonStandard, refSeq, altSeq, leadingDeletionsInAlignment);\n+    }\n+\n+    private static int deletionsBeforeStart(final Cigar cigar, final int start) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2NTE4Mg==", "bodyText": "So the signal that there was a deletion in the padding gets recorded by returning a trailing deletion in the cigar and left aligning it?", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391665182", "createdAt": "2020-03-12T14:36:36Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -232,12 +232,33 @@ public static Cigar calculateCigar(final byte[] refSeq, final byte[] altSeq, fin\n         final int baseEnd = paddedPath.length() - SW_PAD.length() - 1; // -1 because it's inclusive\n         nonStandard = AlignmentUtils.trimCigarByBases(alignment.getCigar(), baseStart, baseEnd);\n \n-        if ( nonStandard.getReferenceLength() != refSeq.length ) {\n-            nonStandard.add(new CigarElement(refSeq.length - nonStandard.getReferenceLength(), CigarOperator.D));\n+        // was there a deletion element in the SW alignment between the padding and the start?\n+        // if so, it was removed by cigar trimming and we must account for the shift in alignment start\n+        // otherwise, left-alignment will be wrong\n+        final int leadingDeletionsInAlignment = deletionsBeforeStart(alignment.getCigar(), baseStart);\n+\n+        if ( nonStandard.getReferenceLength() + leadingDeletionsInAlignment < refSeq.length ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MTQyMw==", "bodyText": "So this is the big crux of the change? That we are using the cigar builder with its defensive checks for edge deletions etc?", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391671423", "createdAt": "2020-03-12T14:45:40Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/recalibration/BaseRecalibrationEngine.java", "diffHunk": "@@ -290,7 +290,7 @@ private ReadTransformer makeReadTransform() {\n     private static GATKRead consolidateCigar( final GATKRead read ) {\n         // Always consolidate the cigar string into canonical form, collapsing zero-length / repeated cigar elements.\n         // Downstream code cannot necessarily handle non-consolidated cigar strings.\n-        read.setCigar(AlignmentUtils.consolidateCigar(read.getCigar()));\n+        read.setCigar(new CigarBuilder().addAll(read.getCigar()).make());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MzQ0MA==", "bodyText": "I'm not so sure this is the best behavior here... Is there any situation where a totally empty cigar makes sense? At least document this with a unit test asserting that you get an empty cigar back and not some horrible error message.", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391673440", "createdAt": "2020-03-12T14:48:38Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java", "diffHunk": "@@ -94,7 +98,7 @@ public Cigar make() {\n         if (lastOperator == CigarOperator.DELETION) {\n             cigarElements.remove(cigarElements.size() - 1);\n         }\n-        return new Cigar(cigarElements);\n+        return new Cigar(cigarElements);    // removing flanking deletions may cause an empty cigar to be output.  We do not throw an error or return null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3OTg1NQ==", "bodyText": "On a general note this seems brittle. We are relying on the fact that we are trimming underlying garbage inside of leftAlignIndels and then using this heuristic method after the fact to detect if we might have triggered the silent cigar element deletion code and correct for it. The underlying correction code seems to delete both leading and trailing deletions and the signal is the same in both cases which could cause this value to be wrong if the cigar you fed to leftAlignIndels had a trailing un-shiftable deletion. I think I would much prefer that leftAlignIndels itself returns a Pair of cigar + how many bases were excised from the front, that way we can shove all of this thorny behavior into a unit test. Perhaps the cigar builder could have a method that returns an accounting of what it has deleted for this purpose. Either way I don't think it should be the responsibility of client code to have to guess at where the new boundary is if this shift happened.", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r391679855", "createdAt": "2020-03-12T14:57:43Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -116,12 +99,11 @@ public static GATKRead createReadAlignedToRef(final GATKRead originalRead,\n         // this is the sub-cigar of the haplotype-to-ref alignment, with cigar elements before the read start removed.  Elements after the read end are kept.\n         final Cigar haplotypeToRef = trimCigarByBases(rightPaddedHaplotypeVsRefCigar, readToHaplotypeSWAlignment.getAlignmentOffset(), rightPaddedHaplotypeVsRefCigar.getReadLength() - 1);\n \n-        final Cigar readToRefCigarRaw = applyCigarToCigar(swCigar, haplotypeToRef);\n-        final Cigar readToRefCigarClean = cleanUpCigar(readToRefCigarRaw);\n-        final Cigar readToRefCigar = leftAlignIndels(readToRefCigarClean, refHaplotype.getBases(), originalRead.getBases(), readStartOnReferenceHaplotype);\n+        final Cigar readToRefCigar = applyCigarToCigar(swCigar, haplotypeToRef);\n+        final Cigar leftAlignedReadToRefCigar = leftAlignIndels(readToRefCigar, refHaplotype.getBases(), originalRead.getBases(), readStartOnReferenceHaplotype);\n \n         // it's possible that left-alignment shifted a deletion to the beginning of a read and removed it, shifting the first aligned base to the right\n-        final int leadingDeletions = readToRefCigarClean.getReferenceLength() - readToRefCigar.getReferenceLength();\n+        final int leadingDeletions = readToRefCigar.getReferenceLength() - leftAlignedReadToRefCigar.getReferenceLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50b5cc0f60e4b23f6801bc932af051a4bda864a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/c3ce41b2e454f56c01b99b6372b73b2b62d577c9", "committedDate": "2020-03-12T20:00:25Z", "message": "review edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1749a16b8c8ae0f71219471d0b01f5fb191208fe", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/1749a16b8c8ae0f71219471d0b01f5fb191208fe", "committedDate": "2020-03-12T20:35:39Z", "message": "integration test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e6845ad6502b4200dcbd2e36b5b4bcb63c1e126", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/5e6845ad6502b4200dcbd2e36b5b4bcb63c1e126", "committedDate": "2020-03-13T02:59:59Z", "message": "one more unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzI0OTg2", "url": "https://github.com/broadinstitute/gatk/pull/6498#pullrequestreview-375324986", "createdAt": "2020-03-16T15:26:38Z", "commit": {"oid": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToyNjozOVrOF25bjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToyNzo0MlrOF25edg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwODM2NQ==", "bodyText": "I would recommend making a static inner class to the CigarBuilder that is something the the effect of CigarAndTrimmingInformaiton that stores these things. Usually when we find ourselves using Triples its easier to make a helper class to document what all the fields are and prevent confusion.", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r393108365", "createdAt": "2020-03-16T15:26:39Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -889,7 +910,7 @@ public static Cigar removeTrailingDeletions(final Cigar c) {\n      * @param end Where should we stop keeping bases on the reference?  The maximum value is cigar.getReferenceLength()\n      * @return a new Cigar with reference length == start - end + 1\n      */\n-    public static Cigar trimCigarByReference(final Cigar cigar, final int start, final int end) {\n+    public static Triple<Cigar, Integer, Integer> trimCigarByReference(final Cigar cigar, final int start, final int end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwOTExMA==", "bodyText": "Document these. Also I would make this return an object rather than a triple.", "url": "https://github.com/broadinstitute/gatk/pull/6498#discussion_r393109110", "createdAt": "2020-03-16T15:27:42Z", "author": {"login": "jamesemery"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarBuilder.java", "diffHunk": "@@ -123,4 +134,17 @@ private void advanceSectionAndValidateCigarOrder(CigarOperator operator) {\n             }\n         }\n     }\n+\n+    public int getLeadingDeletionBasesRemoved() {\n+        return leadingDeletionBasesRemoved;\n+    }\n+\n+    public int getTrailingDeletionBasesRemoved() {\n+        return trailingDeletionBasesRemoved + trailingDeletionBasesRemovedInMake;\n+    }\n+\n+    public Triple<Cigar, Integer, Integer> makeAndRecordDeletionsRemoved() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ce41b2e454f56c01b99b6372b73b2b62d577c9"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da40e25c852b1673ed5b35150738cc3e1c58c420", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/da40e25c852b1673ed5b35150738cc3e1c58c420", "committedDate": "2020-03-17T04:07:35Z", "message": "more edits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTA1NDU3", "url": "https://github.com/broadinstitute/gatk/pull/6498#pullrequestreview-376105457", "createdAt": "2020-03-17T14:47:39Z", "commit": {"oid": "da40e25c852b1673ed5b35150738cc3e1c58c420"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2798, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}