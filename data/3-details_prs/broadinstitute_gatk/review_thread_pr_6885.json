{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMDI2ODc2", "number": 6885, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wM1QxNDo0NTozNFrOGdurMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxODo0MTo0OVrOGnTibw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMzODI2NjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wM1QxNDo0NTozNFrOKKPnmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNDozNTo0MVrOKZLkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTgzMDI5OA==", "bodyText": "Here's the aforementioned optimization.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r681830298", "createdAt": "2021-08-03T14:45:34Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -175,26 +163,21 @@ public static Cigar calculateCigar(final byte[] refSeq, final byte[] altSeq, fin\n \n         //Note: this is a performance optimization.\n         // If two strings are equal (a O(n) check) then it's trivial to get CIGAR for them.\n-        // Furthermore, if their lengths are equal and their element-by-element comparison yields two or fewer mismatches\n-        // it's also a trivial M-only CIGAR, because in order to have equal length one would need at least one insertion and\n-        // one deletion, in which case two substitutions is a better alignment.\n-        if (altSeq.length == refSeq.length){\n-            int mismatchCount = 0;\n-            for (int n = 0; n < refSeq.length && mismatchCount <= 2; n++) {\n-                mismatchCount += (altSeq[n] == refSeq[n] ? 0 : 1);\n-            }\n-            if (mismatchCount <= 2) {\n-                final Cigar matching = new Cigar();\n-                matching.add(new CigarElement(refSeq.length, CigarOperator.MATCH_OR_MISMATCH));\n-                return matching;\n-            }\n+        //TODO: in addressing http://github.com/broadinstitute/gatk/issues/6863,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c84a0a5188dd5638350fa7f222a6583147325644"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzQ5MjY3Ng==", "bodyText": "Punting, filed #7441. I would like to get a better sense of the applicability and impact of this optimization---from the original issue, seems like it's only relevant for non-hardware SW?", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r697492676", "createdAt": "2021-08-27T14:35:41Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/CigarUtils.java", "diffHunk": "@@ -175,26 +163,21 @@ public static Cigar calculateCigar(final byte[] refSeq, final byte[] altSeq, fin\n \n         //Note: this is a performance optimization.\n         // If two strings are equal (a O(n) check) then it's trivial to get CIGAR for them.\n-        // Furthermore, if their lengths are equal and their element-by-element comparison yields two or fewer mismatches\n-        // it's also a trivial M-only CIGAR, because in order to have equal length one would need at least one insertion and\n-        // one deletion, in which case two substitutions is a better alignment.\n-        if (altSeq.length == refSeq.length){\n-            int mismatchCount = 0;\n-            for (int n = 0; n < refSeq.length && mismatchCount <= 2; n++) {\n-                mismatchCount += (altSeq[n] == refSeq[n] ? 0 : 1);\n-            }\n-            if (mismatchCount <= 2) {\n-                final Cigar matching = new Cigar();\n-                matching.add(new CigarElement(refSeq.length, CigarOperator.MATCH_OR_MISMATCH));\n-                return matching;\n-            }\n+        //TODO: in addressing http://github.com/broadinstitute/gatk/issues/6863,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTgzMDI5OA=="}, "originalCommit": {"oid": "c84a0a5188dd5638350fa7f222a6583147325644"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM3MzM5OTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMVQxOToxNTo1NVrOKPRnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNDoyMzoxNFrOKZK-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEwNTk5MQ==", "bodyText": "Reminder to fix this and analogous parameter docs up, if needed.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r687105991", "createdAt": "2021-08-11T19:15:55Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "diffHunk": "@@ -656,14 +653,14 @@ int mergeDanglingHead(final DanglingChainMergeHelper danglingHeadMergeResult) {\n      * Generates the CIGAR string from the Smith-Waterman alignment of the dangling path (where the\n      * provided vertex is the sink) and the reference path.\n      *\n-     * @param aligner\n      * @param vertex      the sink of the dangling chain\n      * @param pruneFactor the prune factor to use in ignoring chain pieces if edge multiplicity is < pruneFactor\n      * @param recoverAll  recover even branches with forks\n+     * @param danglingTailSWParameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjgyODkzMw==", "bodyText": "Just another reminder to fix this doc.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r696828933", "createdAt": "2021-08-26T17:16:33Z", "author": {"login": "fleharty"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "diffHunk": "@@ -656,14 +653,14 @@ int mergeDanglingHead(final DanglingChainMergeHelper danglingHeadMergeResult) {\n      * Generates the CIGAR string from the Smith-Waterman alignment of the dangling path (where the\n      * provided vertex is the sink) and the reference path.\n      *\n-     * @param aligner\n      * @param vertex      the sink of the dangling chain\n      * @param pruneFactor the prune factor to use in ignoring chain pieces if edge multiplicity is < pruneFactor\n      * @param recoverAll  recover even branches with forks\n+     * @param danglingTailSWParameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEwNTk5MQ=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzQ4Mjk5MQ==", "bodyText": "Just removed it; looks like param docs aren't exhaustive in this class.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r697482991", "createdAt": "2021-08-27T14:23:14Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/AbstractReadThreadingGraph.java", "diffHunk": "@@ -656,14 +653,14 @@ int mergeDanglingHead(final DanglingChainMergeHelper danglingHeadMergeResult) {\n      * Generates the CIGAR string from the Smith-Waterman alignment of the dangling path (where the\n      * provided vertex is the sink) and the reference path.\n      *\n-     * @param aligner\n      * @param vertex      the sink of the dangling chain\n      * @param pruneFactor the prune factor to use in ignoring chain pieces if edge multiplicity is < pruneFactor\n      * @param recoverAll  recover even branches with forks\n+     * @param danglingTailSWParameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEwNTk5MQ=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM3MzQwNzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/ReadThreadingAssembler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMVQxOToxNzo1N1rOKPRscw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxNzoyMTozM1rOKYjRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEwNzE4Nw==", "bodyText": "SmithWaterman -> Smith-Waterman", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r687107187", "createdAt": "2021-08-11T19:17:57Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/ReadThreadingAssembler.java", "diffHunk": "@@ -300,13 +305,14 @@ private void assembleGraphsAndExpandKmersGivenHaplotypes(final Haplotype refHapl\n      * @param activeRegionWindow    window of the active region (without padding)\n      * @param resultSet             (can be null) the results set into which to deposit discovered haplotypes\n      * @param aligner               SmithWaterman aligner to use for aligning the discovered haplotype to the reference haplotype\n+     * @param haplotypeToReferenceSWParameters SmithWaterman parameters to use for aligning the discovered haplotype to the reference haplotype", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjgzMjQzMA==", "bodyText": "For consistency, make sure you get line 307 too", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r696832430", "createdAt": "2021-08-26T17:21:33Z", "author": {"login": "fleharty"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/readthreading/ReadThreadingAssembler.java", "diffHunk": "@@ -300,13 +305,14 @@ private void assembleGraphsAndExpandKmersGivenHaplotypes(final Haplotype refHapl\n      * @param activeRegionWindow    window of the active region (without padding)\n      * @param resultSet             (can be null) the results set into which to deposit discovered haplotypes\n      * @param aligner               SmithWaterman aligner to use for aligning the discovered haplotype to the reference haplotype\n+     * @param haplotypeToReferenceSWParameters SmithWaterman parameters to use for aligning the discovered haplotype to the reference haplotype", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzEwNzE4Nw=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM3Mzg0MTI2OnYy", "diffSide": "LEFT", "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMVQyMDozNDozOVrOKPVp2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMVQyMDozNDozOVrOKPVp2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzE3MjA1Nw==", "bodyText": "Not sure if we really wanted to keep this around...but I took it out.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r687172057", "createdAt": "2021-08-11T20:34:39Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/AlignmentUtils.java", "diffHunk": "@@ -91,9 +92,6 @@ public static GATKRead createReadAlignedToRef(final GATKRead originalRead,\n         // whether left-alignment shifted the start position.\n         final int readStartOnReferenceHaplotype = readStartOnReferenceHaplotype(rightPaddedHaplotypeVsRefCigar, readToHaplotypeSWAlignment.getAlignmentOffset());\n \n-\n-        //final int readStartOnReference = referenceStart + haplotype.getAlignmentStartHapwrtRef() + readStartOnHaplotype;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzODQwMzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/smithwaterman/SmithWatermanAlignmentConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxNzo0MDoyMVrOKYkGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNDoyOTo1OVrOKZLToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg0NTg4Mg==", "bodyText": "You can be brutally honest if you like and say, \"These parameters have not been rigorously optimized\"\nbut I'll leave that decision to you.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r696845882", "createdAt": "2021-08-26T17:40:21Z", "author": {"login": "fleharty"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/smithwaterman/SmithWatermanAlignmentConstants.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.broadinstitute.hellbender.utils.smithwaterman;\n+\n+import org.broadinstitute.gatk.nativebindings.smithwaterman.SWParameters;\n+import org.broadinstitute.hellbender.tools.walkers.haplotypecaller.readthreading.AbstractReadThreadingGraph;\n+import org.broadinstitute.hellbender.utils.read.AlignmentUtils;\n+import org.broadinstitute.hellbender.utils.read.CigarUtils;\n+\n+/**\n+ * This class collects the various {@link SWParameters} that are used for various alignment procedures.\n+ * It is likely that these parameters have not been rigorously optimized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzQ4ODI4OA==", "bodyText": "Let's be generous and leave room for doubt. Perhaps our definitions of \"rigorous\" and \"optimized\" have improved over the years...", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r697488288", "createdAt": "2021-08-27T14:29:59Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/smithwaterman/SmithWatermanAlignmentConstants.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.broadinstitute.hellbender.utils.smithwaterman;\n+\n+import org.broadinstitute.gatk.nativebindings.smithwaterman.SWParameters;\n+import org.broadinstitute.hellbender.tools.walkers.haplotypecaller.readthreading.AbstractReadThreadingGraph;\n+import org.broadinstitute.hellbender.utils.read.AlignmentUtils;\n+import org.broadinstitute.hellbender.utils.read.CigarUtils;\n+\n+/**\n+ * This class collects the various {@link SWParameters} that are used for various alignment procedures.\n+ * It is likely that these parameters have not been rigorously optimized.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg0NTg4Mg=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzODQxOTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/smithwaterman/SmithWatermanAlignmentConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxNzo0NDoxMVrOKYkQlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNDozMDo0NFrOKZLV8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg0ODUzNQ==", "bodyText": "The NEW_SW_PARAMETERS have now been around for 6 years, is it time to rename this?", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r696848535", "createdAt": "2021-08-26T17:44:11Z", "author": {"login": "fleharty"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/smithwaterman/SmithWatermanAlignmentConstants.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.broadinstitute.hellbender.utils.smithwaterman;\n+\n+import org.broadinstitute.gatk.nativebindings.smithwaterman.SWParameters;\n+import org.broadinstitute.hellbender.tools.walkers.haplotypecaller.readthreading.AbstractReadThreadingGraph;\n+import org.broadinstitute.hellbender.utils.read.AlignmentUtils;\n+import org.broadinstitute.hellbender.utils.read.CigarUtils;\n+\n+/**\n+ * This class collects the various {@link SWParameters} that are used for various alignment procedures.\n+ * It is likely that these parameters have not been rigorously optimized.\n+ * Documentation is also somewhat lacking, but we preserve any original comments that may have accompanied each set.\n+ * See also some relevant issues and comments:\n+ *  <p>\n+ *      <a href=\"http://github.com/broadinstitute/gatk/issues/2498\">http://github.com/broadinstitute/gatk/issues/2498</a>\n+ *      <a href=\"http://github.com/broadinstitute/gatk/issues/5564\">http://github.com/broadinstitute/gatk/issues/5564</a>\n+ *      <a href=\"http://github.com/broadinstitute/gatk/pull/4858#discussion_r194048530\">http://github.com/broadinstitute/gatk/pull/4858#discussion_r194048530</a>\n+ *  </p>\n+ */\n+public final class SmithWatermanAlignmentConstants {\n+    private SmithWatermanAlignmentConstants() {}\n+\n+    /**\n+     * {@code ORIGINAL_DEFAULT} is only used in test code. It is worth noting that these tests are somewhat insensitive\n+     * to the particular values used; (e.g., the majority pass if {@link SmithWatermanAlignmentConstants#STANDARD_NGS}\n+     * is substituted, and all pass if {@link SmithWatermanAlignmentConstants#NEW_SW_PARAMETERS} is substituted).\n+     *\n+     * Original comments:\n+     *      match=1, mismatch = -1/3, gap=-(1+k/3)\n+     */\n+    public static final SWParameters ORIGINAL_DEFAULT = new SWParameters(3, -1, -4, -3);\n+\n+    /**\n+     * {@code STANDARD_NGS} is the default for {@link AbstractReadThreadingGraph} methods for the recovery of dangling heads/tails.\n+     *\n+     * Original comments:\n+     *      none\n+     */\n+    public static final SWParameters STANDARD_NGS = new SWParameters(25, -50, -110, -6);\n+\n+    /**\n+     * {@code NEW_SW_PARAMETERS} is the default for {@link CigarUtils#calculateCigar} for haplotype-to-reference alignment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzQ4ODg4MQ==", "bodyText": "I'm going to leave names as is for now to avoid further confusion. However, I do think it's worth renaming everything if/when we consolidate.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r697488881", "createdAt": "2021-08-27T14:30:44Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/smithwaterman/SmithWatermanAlignmentConstants.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.broadinstitute.hellbender.utils.smithwaterman;\n+\n+import org.broadinstitute.gatk.nativebindings.smithwaterman.SWParameters;\n+import org.broadinstitute.hellbender.tools.walkers.haplotypecaller.readthreading.AbstractReadThreadingGraph;\n+import org.broadinstitute.hellbender.utils.read.AlignmentUtils;\n+import org.broadinstitute.hellbender.utils.read.CigarUtils;\n+\n+/**\n+ * This class collects the various {@link SWParameters} that are used for various alignment procedures.\n+ * It is likely that these parameters have not been rigorously optimized.\n+ * Documentation is also somewhat lacking, but we preserve any original comments that may have accompanied each set.\n+ * See also some relevant issues and comments:\n+ *  <p>\n+ *      <a href=\"http://github.com/broadinstitute/gatk/issues/2498\">http://github.com/broadinstitute/gatk/issues/2498</a>\n+ *      <a href=\"http://github.com/broadinstitute/gatk/issues/5564\">http://github.com/broadinstitute/gatk/issues/5564</a>\n+ *      <a href=\"http://github.com/broadinstitute/gatk/pull/4858#discussion_r194048530\">http://github.com/broadinstitute/gatk/pull/4858#discussion_r194048530</a>\n+ *  </p>\n+ */\n+public final class SmithWatermanAlignmentConstants {\n+    private SmithWatermanAlignmentConstants() {}\n+\n+    /**\n+     * {@code ORIGINAL_DEFAULT} is only used in test code. It is worth noting that these tests are somewhat insensitive\n+     * to the particular values used; (e.g., the majority pass if {@link SmithWatermanAlignmentConstants#STANDARD_NGS}\n+     * is substituted, and all pass if {@link SmithWatermanAlignmentConstants#NEW_SW_PARAMETERS} is substituted).\n+     *\n+     * Original comments:\n+     *      match=1, mismatch = -1/3, gap=-(1+k/3)\n+     */\n+    public static final SWParameters ORIGINAL_DEFAULT = new SWParameters(3, -1, -4, -3);\n+\n+    /**\n+     * {@code STANDARD_NGS} is the default for {@link AbstractReadThreadingGraph} methods for the recovery of dangling heads/tails.\n+     *\n+     * Original comments:\n+     *      none\n+     */\n+    public static final SWParameters STANDARD_NGS = new SWParameters(25, -50, -110, -6);\n+\n+    /**\n+     * {@code NEW_SW_PARAMETERS} is the default for {@link CigarUtils#calculateCigar} for haplotype-to-reference alignment.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg0ODUzNQ=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzODQ4MDY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxNzo1NzoyNVrOKYk14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNDozMDo1NFrOKZLWVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg1ODA4Mw==", "bodyText": "Why did you chose to use AVX_LOGLESS_CACHING rather than LOGLESS_CACHING?", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r696858083", "createdAt": "2021-08-26T17:57:25Z", "author": {"login": "fleharty"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerIntegrationTest.java", "diffHunk": "@@ -130,6 +130,49 @@ public void testLinkedDebruijnModeIsConsistentWithPastResults(final String input\n         }\n     }\n \n+    /**\n+     * Test that exposure and modification of Smith-Waterman parameters that were previously constants is consistent with past results (over non-complicated data).\n+     * Expected outputs were generated by changing previously hardcoded constants in the previous commit to the exposed values below.\n+     * See https://github.com/broadinstitute/gatk/pull/6885.\n+     */\n+    @Test(dataProvider=\"HaplotypeCallerTestInputs\")\n+    public void testExposureOfSmithWatermanParametersIsConsistentWithPastResults(final String inputFileName, final String referenceFileName) throws Exception {\n+        Utils.resetRandomGenerator();\n+\n+        final File output = createTempFile(\"testExposureOfSmithWatermanParametersIsConsistentWithPastResults\", \".vcf\");\n+        final File expected = new File(TEST_FILES_DIR, \"expected.testExposureOfSmithWatermanParameters.HC.gatk4.vcf\");\n+\n+        final String outputPath = UPDATE_EXACT_MATCH_EXPECTED_OUTPUTS ? expected.getAbsolutePath() : output.getAbsolutePath();\n+\n+        final String[] args = {\n+                \"-I\", inputFileName,\n+                \"-R\", referenceFileName,\n+                \"-L\", \"20:10000000-10100000\",\n+                \"-O\", outputPath,\n+                \"-pairHMM\", \"AVX_LOGLESS_CACHING\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzQ4ODk4Mg==", "bodyText": "See below.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r697488982", "createdAt": "2021-08-27T14:30:54Z", "author": {"login": "samuelklee"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerIntegrationTest.java", "diffHunk": "@@ -130,6 +130,49 @@ public void testLinkedDebruijnModeIsConsistentWithPastResults(final String input\n         }\n     }\n \n+    /**\n+     * Test that exposure and modification of Smith-Waterman parameters that were previously constants is consistent with past results (over non-complicated data).\n+     * Expected outputs were generated by changing previously hardcoded constants in the previous commit to the exposed values below.\n+     * See https://github.com/broadinstitute/gatk/pull/6885.\n+     */\n+    @Test(dataProvider=\"HaplotypeCallerTestInputs\")\n+    public void testExposureOfSmithWatermanParametersIsConsistentWithPastResults(final String inputFileName, final String referenceFileName) throws Exception {\n+        Utils.resetRandomGenerator();\n+\n+        final File output = createTempFile(\"testExposureOfSmithWatermanParametersIsConsistentWithPastResults\", \".vcf\");\n+        final File expected = new File(TEST_FILES_DIR, \"expected.testExposureOfSmithWatermanParameters.HC.gatk4.vcf\");\n+\n+        final String outputPath = UPDATE_EXACT_MATCH_EXPECTED_OUTPUTS ? expected.getAbsolutePath() : output.getAbsolutePath();\n+\n+        final String[] args = {\n+                \"-I\", inputFileName,\n+                \"-R\", referenceFileName,\n+                \"-L\", \"20:10000000-10100000\",\n+                \"-O\", outputPath,\n+                \"-pairHMM\", \"AVX_LOGLESS_CACHING\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg1ODA4Mw=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzODY3NzU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/mutect/Mutect2IntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxODo0MTo0OVrOKYmvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNDozMTowMVrOKZLWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg4OTE2Mg==", "bodyText": "I suggest using the non AVX... LOGLESS_CACHING instead.\nbecause of this...\n/* Optimized AVX implementation of LOGLESS_CACHING called through JNI. Throws if AVX is not available */", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r696889162", "createdAt": "2021-08-26T18:41:49Z", "author": {"login": "fleharty"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/mutect/Mutect2IntegrationTest.java", "diffHunk": "@@ -927,6 +928,51 @@ public void testFilteringHeaders() {\n         }\n     }\n \n+\n+    @DataProvider(name=\"ExposureOfSmithWatermanParametersTestInputs\")\n+    public Object[][] getExposureOfSmithWatermanParametersTestInputs() {\n+        return new Object[][] {\n+                {NA12878_20_21_WGS_bam, b37_reference_20_21}\n+        };\n+    }\n+\n+    /**\n+     * See {@link org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerIntegrationTest#testExposureOfSmithWatermanParametersIsConsistentWithPastResults}.\n+     */\n+    @Test(dataProvider=\"ExposureOfSmithWatermanParametersTestInputs\")\n+    public void testExposureOfSmithWatermanParametersIsConsistentWithPastResults(final String inputFileName, final String referenceFileName) throws Exception {\n+        Utils.resetRandomGenerator();\n+\n+        final File output = createTempFile(\"testExposureOfSmithWatermanParametersIsConsistentWithPastResults\", \".vcf\");\n+        final File expected = new File(toolsTestDir + \"mutect\", \"expected.testExposureOfSmithWatermanParameters.M2.gatk4.vcf\");\n+\n+        final String outputPath = output.getAbsolutePath();\n+\n+        final String[] args = {\n+                \"-I\", inputFileName,\n+                \"-R\", referenceFileName,\n+                \"-L\", \"20:10000000-10100000\",\n+                \"-O\", outputPath,\n+                \"-pairHMM\", \"AVX_LOGLESS_CACHING\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzQ4OTA2MA==", "bodyText": "Same.", "url": "https://github.com/broadinstitute/gatk/pull/6885#discussion_r697489060", "createdAt": "2021-08-27T14:31:01Z", "author": {"login": "samuelklee"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/mutect/Mutect2IntegrationTest.java", "diffHunk": "@@ -927,6 +928,51 @@ public void testFilteringHeaders() {\n         }\n     }\n \n+\n+    @DataProvider(name=\"ExposureOfSmithWatermanParametersTestInputs\")\n+    public Object[][] getExposureOfSmithWatermanParametersTestInputs() {\n+        return new Object[][] {\n+                {NA12878_20_21_WGS_bam, b37_reference_20_21}\n+        };\n+    }\n+\n+    /**\n+     * See {@link org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerIntegrationTest#testExposureOfSmithWatermanParametersIsConsistentWithPastResults}.\n+     */\n+    @Test(dataProvider=\"ExposureOfSmithWatermanParametersTestInputs\")\n+    public void testExposureOfSmithWatermanParametersIsConsistentWithPastResults(final String inputFileName, final String referenceFileName) throws Exception {\n+        Utils.resetRandomGenerator();\n+\n+        final File output = createTempFile(\"testExposureOfSmithWatermanParametersIsConsistentWithPastResults\", \".vcf\");\n+        final File expected = new File(toolsTestDir + \"mutect\", \"expected.testExposureOfSmithWatermanParameters.M2.gatk4.vcf\");\n+\n+        final String outputPath = output.getAbsolutePath();\n+\n+        final String[] args = {\n+                \"-I\", inputFileName,\n+                \"-R\", referenceFileName,\n+                \"-L\", \"20:10000000-10100000\",\n+                \"-O\", outputPath,\n+                \"-pairHMM\", \"AVX_LOGLESS_CACHING\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg4OTE2Mg=="}, "originalCommit": {"oid": "b2b4feab78ef1c18b0f6e272f9b5b5bc55d9fb7b"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 825, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}