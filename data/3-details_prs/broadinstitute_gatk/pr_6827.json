{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDk1MjQz", "number": 6827, "title": "ah update array extract tool", "bodyText": "remove compressed data, change GT to single char", "createdAt": "2020-09-16T16:08:20Z", "url": "https://github.com/broadinstitute/gatk/pull/6827", "merged": true, "mergeCommit": {"oid": "2f9e43c59edad36832092fc491bbc790feaccd60"}, "closed": true, "closedAt": "2020-09-18T16:35:03Z", "author": {"login": "ahaessly"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJer7MgH2gAyNDg4MDk1MjQzOjg4NTMwOTg1MDdhOTg5MDdhMDNlM2Q4ZWNkOWZhMzE5ZTRlNmZkN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKFAUUgFqTQ5MTQzMTA5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "author": {"user": {"login": "ahaessly", "name": "Andrea Haessly"}}, "url": "https://github.com/broadinstitute/gatk/commit/8853098507a98907a03e3d8ecd9fa319e4e6fd7f", "committedDate": "2020-09-16T16:07:41Z", "message": "remove compressed data, change GT to single char"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODcyMjE1", "url": "https://github.com/broadinstitute/gatk/pull/6827#pullrequestreview-490872215", "createdAt": "2020-09-17T18:24:02Z", "commit": {"oid": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODoyNDowMlrOHTvuDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0NDowM1rOHTwZhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2NjgyOQ==", "bodyText": "Can you say in the doc here what is excluded since it's not that many fields (NORMX, NORMY, LLR, and BAF)", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490466829", "createdAt": "2020-09-17T18:24:02Z", "author": {"login": "meganshand"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohort.java", "diffHunk": "@@ -98,6 +98,12 @@\n     )\n     private String cohortTable = null;\n \n+    @Argument(\n+            fullName = \"gt-only\",\n+            doc = \"If true, only get the genotype info\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Mzg4Mg==", "bodyText": "Do you need this default here?", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490473882", "createdAt": "2020-09-17T18:36:43Z", "author": {"login": "meganshand"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java", "diffHunk": "@@ -266,9 +274,108 @@ private VariantContext createVariantContextFromSampleRecord(final ProbeInfo prob\n         builder.chr(contig);\n         builder.start(startPosition);\n         builder.id(probeInfo.name);\n-        \n+\n+        final List<Allele> alleles = createAllelesFromProbeInfo(probeInfo);\n+\n+        builder.alleles(alleles);\n+        builder.stop(startPosition + alleles.get(0).length() - 1);\n+\n+        List<Allele> genotypeAlleles = new ArrayList<Allele>();\n+\n+        Object gtObj = sampleRecord.get(RawArrayFieldEnum.GT_encoded.name());\n+        GT_encoding gt;\n+        if (gtObj == null) {\n+            gt = RawArrayTsvCreator.value_to_drop;\n+        } else {\n+            gt = GT_encoding.getGTEncodingFromValue(gtObj.toString());\n+        }\n+\n+        switch (gt) {\n+            case HOM_REF:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(0));\n+                break;\n+            case HET0_1:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HOM_VAR:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HET1_2:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case HOM_ALT2:\n+                genotypeAlleles.add(alleles.get(2));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case MISSING:\n+            default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Nzk1OA==", "bodyText": "Is the diff just being weird or should the code below be deleted since it was moved to createAllelesFromProbeInfo?", "url": "https://github.com/broadinstitute/gatk/pull/6827#discussion_r490477958", "createdAt": "2020-09-17T18:44:03Z", "author": {"login": "meganshand"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/variantdb/arrays/ArrayExtractCohortEngine.java", "diffHunk": "@@ -266,9 +274,108 @@ private VariantContext createVariantContextFromSampleRecord(final ProbeInfo prob\n         builder.chr(contig);\n         builder.start(startPosition);\n         builder.id(probeInfo.name);\n-        \n+\n+        final List<Allele> alleles = createAllelesFromProbeInfo(probeInfo);\n+\n+        builder.alleles(alleles);\n+        builder.stop(startPosition + alleles.get(0).length() - 1);\n+\n+        List<Allele> genotypeAlleles = new ArrayList<Allele>();\n+\n+        Object gtObj = sampleRecord.get(RawArrayFieldEnum.GT_encoded.name());\n+        GT_encoding gt;\n+        if (gtObj == null) {\n+            gt = RawArrayTsvCreator.value_to_drop;\n+        } else {\n+            gt = GT_encoding.getGTEncodingFromValue(gtObj.toString());\n+        }\n+\n+        switch (gt) {\n+            case HOM_REF:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(0));\n+                break;\n+            case HET0_1:\n+                genotypeAlleles.add(alleles.get(0));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HOM_VAR:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(1));\n+                break;\n+            case HET1_2:\n+                genotypeAlleles.add(alleles.get(1));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case HOM_ALT2:\n+                genotypeAlleles.add(alleles.get(2));\n+                genotypeAlleles.add(alleles.get(2));\n+                break;\n+            case MISSING:\n+            default:\n+                genotypeAlleles.add(Allele.NO_CALL);\n+                genotypeAlleles.add(Allele.NO_CALL);\n+                break;\n+        }\n+\n+        genotypeBuilder.alleles(genotypeAlleles);\n+\n+        if (!gtDataOnly) {\n+            genotypeBuilder.attribute(RawArrayTsvCreator.NORMX, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.NORMX.name()))));\n+            genotypeBuilder.attribute(RawArrayTsvCreator.NORMY, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.NORMY.name()))));\n+            genotypeBuilder.attribute(RawArrayTsvCreator.BAF, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.BAF.name()))));\n+            genotypeBuilder.attribute(RawArrayTsvCreator.LRR, formatFloatForVcf(getNullableFloatFromDouble(sampleRecord.get(RawArrayFieldEnum.LRR.name()))));\n+        }\n+\n+        genotypeBuilder.name(sample);\n+\n+        builder.genotypes(genotypeBuilder.make());\n+\n+        try {\n+            VariantContext vc = builder.make();\n+            return vc;\n+        } catch (Exception e) {\n+            System.out.println(\"Error: \"+ e.getMessage() + \" processing \" + sampleRecord + \" PI: \" + probeInfo.alleleA + \"/\" +probeInfo.alleleB + \" with ga \" + genotypeAlleles + \" and alleles \" + alleles);\n+            throw e;\n+        }\n+\n+    }\n+\n+    List<Allele> createAllelesFromProbeInfo(final ProbeInfo probeInfo) {\n         final List<Allele> alleles = new ArrayList<>();\n-        Allele ref = Allele.create(probeInfo.ref, true);        \n+        Allele ref = Allele.create(probeInfo.ref, true);\n+        alleles.add(ref);\n+\n+        Allele alleleA = Allele.create(probeInfo.alleleA, false);\n+        Allele alleleB = Allele.create(probeInfo.alleleB, false);\n+\n+        boolean alleleAisRef = probeInfo.ref.equals(probeInfo.alleleA);\n+        boolean alleleBisRef = probeInfo.ref.equals(probeInfo.alleleB);\n+\n+        if (alleleAisRef) {\n+            alleleA = ref;\n+        } else {\n+            alleles.add(alleleA);\n+        }\n+\n+        if (alleleBisRef) {\n+            alleleB = ref;\n+        } else {\n+            alleles.add(alleleB);\n+        }\n+        return alleles;\n+    }\n+\n+        private VariantContext createVariantContextFromSampleRecordLegacyGT(final ProbeInfo probeInfo, final GenericRecord sampleRecord, final Set<String> columnNames, final String contig, final long startPosition, final String sample) {\n+        final VariantContextBuilder builder = new VariantContextBuilder();\n+        final GenotypeBuilder genotypeBuilder = new GenotypeBuilder();\n+\n+        builder.chr(contig);\n+        builder.start(startPosition);\n+        builder.id(probeInfo.name);\n+\n+        List<Allele> alleles = createAllelesFromProbeInfo(probeInfo);\n+        Allele ref = Allele.create(probeInfo.ref, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8853098507a98907a03e3d8ecd9fa319e4e6fd7f"}, "originalPosition": 245}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "author": {"user": {"login": "ahaessly", "name": "Andrea Haessly"}}, "url": "https://github.com/broadinstitute/gatk/commit/30bab6dba69d61b9cb39d8e6a4c84d283d7feea2", "committedDate": "2020-09-17T20:50:32Z", "message": "updated from PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDMxMDkw", "url": "https://github.com/broadinstitute/gatk/pull/6827#pullrequestreview-491431090", "createdAt": "2020-09-18T12:46:21Z", "commit": {"oid": "30bab6dba69d61b9cb39d8e6a4c84d283d7feea2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2480, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}