{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTUxMjA5", "number": 6444, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0NTowN1rODeBmLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNzo0NlrODeCNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODEwMDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0NTowN1rOFm9auw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MzowNVrOFnE70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NjQ3NQ==", "bodyText": "You can make this final by moving its constructor up to the declaration.", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376396475", "createdAt": "2020-02-07T13:45:07Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -451,6 +451,8 @@\n \n     private final Map<Integer, Integer> ploidyToNumberOfAlleles = new LinkedHashMap<Integer, Integer>();\n \n+    private PriorityQueue<VariantContext> pendingVariants;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxOTYzNQ==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376519635", "createdAt": "2020-02-07T17:43:05Z", "author": {"login": "kachulis"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -451,6 +451,8 @@\n \n     private final Map<Integer, Integer> ploidyToNumberOfAlleles = new LinkedHashMap<Integer, Integer>();\n \n+    private PriorityQueue<VariantContext> pendingVariants;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NjQ3NQ=="}, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODExNDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0OTozNlrOFm9jdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NTo1OVrOFnFAzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5ODcwOA==", "bodyText": "Moving variants to the right may seem like a non sequitur to the average reader so specify that it can occur if {@code preserveAlleles} is false.", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376398708", "createdAt": "2020-02-07T13:49:36Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -533,6 +537,13 @@ public void onTraversalStart() {\n     @Override\n     public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext ref, FeatureContext featureContext) {\n \n+        /*check for pending variants to write out\n+        since variant starts will only be moved further right, we can write out a pending variant if the current variant start is after the pending variant start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMDkwOQ==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376520909", "createdAt": "2020-02-07T17:45:59Z", "author": {"login": "kachulis"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -533,6 +537,13 @@ public void onTraversalStart() {\n     @Override\n     public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext ref, FeatureContext featureContext) {\n \n+        /*check for pending variants to write out\n+        since variant starts will only be moved further right, we can write out a pending variant if the current variant start is after the pending variant start", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5ODcwOA=="}, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE2MDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowNDozNlrOFm9_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MToyNFrOFnFJYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTc4Mw==", "bodyText": "I would just add every variant to pendingVariants.  This check is redundant with the while loop at the beginning of apply().  It's true that written as is the priority queue is usually empty, but I don't think the optimization is worth the added complexity.", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376405783", "createdAt": "2020-02-07T14:04:36Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -617,11 +632,28 @@ public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                vcfWriter.add(variantContextToWrite);\n+                if (variantContextToWrite.getStart() != vc.getStart()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMzEwNQ==", "bodyText": "Yeah you're right, I was trying to avoid doing too many comparisons in the priority queue, but since it is nearly always empty this is an essentially useless optimization.", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376523105", "createdAt": "2020-02-07T17:51:24Z", "author": {"login": "kachulis"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -617,11 +632,28 @@ public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                vcfWriter.add(variantContextToWrite);\n+                if (variantContextToWrite.getStart() != vc.getStart()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTc4Mw=="}, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE2MTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowNDo1MFrOFm9_fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowNDo1MFrOFm9_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTg4Nw==", "bodyText": "Don't need the return javadoc", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376405887", "createdAt": "2020-02-07T14:04:50Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants.java", "diffHunk": "@@ -617,11 +632,28 @@ public void apply(VariantContext vc, ReadsContext readsContext, ReferenceContext\n                     (!selectRandomFraction || Utils.getRandomGenerator().nextDouble() < fractionRandom)) {\n                 //remove annotations being dropped and write variantcontext\n                 final VariantContext variantContextToWrite = buildVariantContextWithDroppedAnnotationsRemoved(filteredGenotypeToNocall);\n-                vcfWriter.add(variantContextToWrite);\n+                if (variantContextToWrite.getStart() != vc.getStart()) {\n+                    //if variant has shifted, need to add to priority queue it is now after a variant to follow\n+                    pendingVariants.add(variantContextToWrite);\n+                } else {\n+                    vcfWriter.add(variantContextToWrite);\n+                }\n             }\n         }\n     }\n \n+    /**\n+     * write out all remaining pending variants\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE5OTAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNzowOFrOFm-W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MjowM1rOFnFKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTg4OQ==", "bodyText": "I'm going to be opinionated here and argue against using IntegrationTestSpec.  I think the intent of these two tests would be better expressed in code:\nfinal ArgumentsBuilder args = new ArgumentsBuilder()\n   .addVcf(testFile)\n   .addOutput(output)\n   .addArgument(StandardArgumentDefinitions.SAMPLE_NAME_SHORT_NAME, \"SAMPLE_01\")\n   .addBoolean(\"preserve-alleles\", false); // this may be overkill since it's the default\n\nrunCommandLine(args);\n\nfinal List<VariantContext> vcs = VariantContextTestUtils.readEntireVCFIntoMemory(output).getRight();\n\nAssert.assertTrue(Comparators.isInOrder(vcs, Comparator.comparingInt(VariantContext::getStart)));\n\nThe virtues I see in this approach are 1) Only one test file needs to be added/maintained.  2) Doesn't require exact match and therefore less brittle.  3) Intent is explicit.", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376411889", "createdAt": "2020-02-07T14:17:08Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "diffHunk": "@@ -85,6 +85,30 @@ public void testComplexSelection()  throws IOException {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    @Test\n+    public void testUntrimmedVariants() throws IOException {\n+        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMzQxOQ==", "bodyText": "Well argued, I'm convinced!", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376523419", "createdAt": "2020-02-07T17:52:03Z", "author": {"login": "kachulis"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "diffHunk": "@@ -85,6 +85,30 @@ public void testComplexSelection()  throws IOException {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    @Test\n+    public void testUntrimmedVariants() throws IOException {\n+        final String testFile = getToolTestDataDir() + \"untrimmed.vcf\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTg4OQ=="}, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwMDk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNzo0NlrOFm-YNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1Njo1M1rOFnFS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjIxMw==", "bodyText": "This test needs some javadoc explaining the potential output ordering pitfall of the input untrimmed variants.", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376412213", "createdAt": "2020-02-07T14:17:46Z", "author": {"login": "davidbenjamin"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "diffHunk": "@@ -85,6 +85,30 @@ public void testComplexSelection()  throws IOException {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    @Test\n+    public void testUntrimmedVariants() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTUyMA==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6444#discussion_r376525520", "createdAt": "2020-02-07T17:56:53Z", "author": {"login": "kachulis"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariantsIntegrationTest.java", "diffHunk": "@@ -85,6 +85,30 @@ public void testComplexSelection()  throws IOException {\n         spec.executeTest(\"testComplexSelection--\" + testFile, this);\n     }\n \n+    @Test\n+    public void testUntrimmedVariants() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjIxMw=="}, "originalCommit": {"oid": "99f912bff74128f84ff3bc32b1f98c8ff0148fcd"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}