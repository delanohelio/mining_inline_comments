{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODM5NjIx", "number": 6633, "title": "Extracting a new ReadsDataSource interface", "bodyText": "Extracting a new interface from the existing class ReadsDataSource\n\nthe new interface is called ReadsDataSource\nReadsDataSource has been renamed to ReadsPathDataSource\n\n\nThis is to support the introduction of a new ReadsDataSource implementation using Htsget", "createdAt": "2020-06-02T21:29:03Z", "url": "https://github.com/broadinstitute/gatk/pull/6633", "merged": true, "mergeCommit": {"oid": "7a6f8a19dc438d08d15a5321fe35829eeb0cba07"}, "closed": true, "closedAt": "2020-06-11T15:26:44Z", "author": {"login": "lbergelson"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnsySqgFqTQyMzc1MTE5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp8SGVgFqTQyODIzMzEzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzUxMTk5", "url": "https://github.com/broadinstitute/gatk/pull/6633#pullrequestreview-423751199", "createdAt": "2020-06-03T16:55:00Z", "commit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNjo1NTowMVrOGek-GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzoxOTozOFrOGel2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNjE4NQ==", "bodyText": "This message should still say ReadsDataSource, as the actual implementation in use by the engine may vary in the future.", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434716185", "createdAt": "2020-06-03T16:55:01Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/WalkerBase.java", "diffHunk": "@@ -46,7 +45,7 @@ final protected ReferenceDataSource directlyAccessEngineReferenceDataSource() {\n      */\n     @Override\n     final protected ReadsDataSource directlyAccessEngineReadsDataSource() {\n-        throw new GATKException(\"Should never directly access the engine ReadsDataSource in walker tool classes \" +\n+        throw new GATKException(\"Should never directly access the engine ReadsPathDataSource in walker tool classes \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxODY3NQ==", "bodyText": "Use the interface as the declared type wherever possible, here and below, except in cases such as ReadsPathDataSourceUnitTest where we genuinely want to restrict the implementation. This will help test whether your interface has captured sufficient functionality to be usable in practice.", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434718675", "createdAt": "2020-06-03T16:58:49Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/engine/AssemblyRegionIteratorUnitTest.java", "diffHunk": "@@ -54,7 +54,7 @@\n      */\n     @Test(dataProvider = \"testCorrectRegionsHaveCorrectReadsAndSizeData\")\n     public void testRegionsHaveCorrectReadsAndSize( final String reads, final String reference, final List<SimpleInterval> shardIntervals, final int minRegionSize, final int maxRegionSize, final int assemblyRegionPadding ) throws IOException {\n-        try (final ReadsDataSource readsSource = new ReadsDataSource(IOUtils.getPath(reads));\n+        try (final ReadsPathDataSource readsSource = new ReadsPathDataSource(IOUtils.getPath(reads));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzAzOA==", "bodyText": "You have introduced your famous (unbalanced parens ) in the ReadsPathDataSource constructors -- can you fix this?", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434723038", "createdAt": "2020-06-03T17:06:19Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package org.broadinstitute.hellbender.engine;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.samtools.MergingSamRecordIterator;\n+import htsjdk.samtools.SAMException;\n+import htsjdk.samtools.SAMFileHeader;\n+import htsjdk.samtools.SAMRecord;\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SamFileHeaderMerger;\n+import htsjdk.samtools.SamInputResource;\n+import htsjdk.samtools.SamReader;\n+import htsjdk.samtools.SamReaderFactory;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.IntervalUtils;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.gcs.BucketUtils;\n+import org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator;\n+import org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+import org.broadinstitute.hellbender.utils.read.ReadConstants;\n+\n+import java.io.IOException;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Manages traversals and queries over sources of reads which are accessible via {@link Path}s\n+ * (for now, SAM/BAM/CRAM files only).\n+ *\n+ * Two basic operations are available:\n+ *\n+ * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n+ * -Targeted queries by one interval at a time\n+ */\n+public final class ReadsPathDataSource implements ReadsDataSource {\n+    private static final Logger logger = LogManager.getLogger(ReadsPathDataSource.class);\n+\n+    /**\n+     * Mapping from SamReaders to iterators over the reads from each reader. Only one\n+     * iterator can be open from a given reader at a time (this is a restriction\n+     * in htsjdk). Iterator is set to null for a reader if no iteration is currently\n+     * active on that reader.\n+     */\n+    private final Map<SamReader, CloseableIterator<SAMRecord>> readers;\n+\n+    /**\n+     * Hang onto the input files so that we can print useful errors about them\n+     */\n+    private final Map<SamReader, Path> backingPaths;\n+\n+    /**\n+     * Only reads that overlap these intervals (and unmapped reads, if {@link #traverseUnmapped} is set) will be returned\n+     * during a full iteration. Null if iteration is unbounded.\n+     *\n+     * Individual queries are unaffected by these intervals -- only traversals initiated via {@link #iterator} are affected.\n+     */\n+    private List<SimpleInterval> intervalsForTraversal;\n+\n+    /**\n+     * If true, restrict traversals to unmapped reads (and reads overlapping any {@link #intervalsForTraversal}, if set).\n+     * False if iteration is unbounded or bounded only by our {@link #intervalsForTraversal}.\n+     *\n+     * Note that this setting covers only unmapped reads that have no position -- unmapped reads that are assigned the\n+     * position of their mates will be returned by queries overlapping that position.\n+     *\n+     * Individual queries are unaffected by this setting  -- only traversals initiated via {@link #iterator} are affected.\n+     */\n+    private boolean traverseUnmapped;\n+\n+    /**\n+     * Used to create a merged Sam header when we're dealing with multiple readers. Null if we only have a single reader.\n+     */\n+    private final SamFileHeaderMerger headerMerger;\n+\n+    /**\n+     * Are indices available for all files?\n+     */\n+    private boolean indicesAvailable;\n+\n+    /**\n+     * Initialize this data source with a single SAM/BAM file and validation stringency SILENT.\n+     *\n+     * @param samFile SAM/BAM file, not null.\n+     */\n+    public ReadsPathDataSource(final Path samFile ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNDM5Ng==", "bodyText": "The way you've structured this PR causes the commit history for ReadsDataSource to be lost/obfuscated (I checked just now in an IDE), which we should avoid if possible. I think we can help git understand what's happening by using a different name for the interface in this PR, merge it, then open a second PR to rename the interface to ReadsDataSource.", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434724396", "createdAt": "2020-06-03T17:08:45Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/ReadsPathDataSource.java", "diffHunk": "@@ -0,0 +1,520 @@\n+package org.broadinstitute.hellbender.engine;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.samtools.MergingSamRecordIterator;\n+import htsjdk.samtools.SAMException;\n+import htsjdk.samtools.SAMFileHeader;\n+import htsjdk.samtools.SAMRecord;\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SamFileHeaderMerger;\n+import htsjdk.samtools.SamInputResource;\n+import htsjdk.samtools.SamReader;\n+import htsjdk.samtools.SamReaderFactory;\n+import htsjdk.samtools.util.CloseableIterator;\n+import htsjdk.samtools.util.IOUtil;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import org.broadinstitute.hellbender.exceptions.UserException;\n+import org.broadinstitute.hellbender.utils.IntervalUtils;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.gcs.BucketUtils;\n+import org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator;\n+import org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator;\n+import org.broadinstitute.hellbender.utils.read.GATKRead;\n+import org.broadinstitute.hellbender.utils.read.ReadConstants;\n+\n+import java.io.IOException;\n+import java.nio.channels.SeekableByteChannel;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Manages traversals and queries over sources of reads which are accessible via {@link Path}s\n+ * (for now, SAM/BAM/CRAM files only).\n+ *\n+ * Two basic operations are available:\n+ *\n+ * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n+ * -Targeted queries by one interval at a time\n+ */\n+public final class ReadsPathDataSource implements ReadsDataSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMDU3Ng==", "bodyText": "There are a few additional methods that I think belong in the interface: traversalIsBounded(), and indicesAvailable() (though we may want to rename the latter to something like isQueryableByInterval())", "url": "https://github.com/broadinstitute/gatk/pull/6633#discussion_r434730576", "createdAt": "2020-06-03T17:19:38Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/ReadsDataSource.java", "diffHunk": "@@ -1,278 +1,44 @@\n package org.broadinstitute.hellbender.engine;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import htsjdk.samtools.MergingSamRecordIterator;\n-import htsjdk.samtools.SAMException;\n import htsjdk.samtools.SAMFileHeader;\n-import htsjdk.samtools.SAMRecord;\n import htsjdk.samtools.SAMSequenceDictionary;\n-import htsjdk.samtools.SamFileHeaderMerger;\n-import htsjdk.samtools.SamInputResource;\n-import htsjdk.samtools.SamReader;\n-import htsjdk.samtools.SamReaderFactory;\n-import htsjdk.samtools.util.CloseableIterator;\n-import htsjdk.samtools.util.IOUtil;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.broadinstitute.hellbender.exceptions.GATKException;\n-import org.broadinstitute.hellbender.exceptions.UserException;\n-import org.broadinstitute.hellbender.utils.IntervalUtils;\n import org.broadinstitute.hellbender.utils.SimpleInterval;\n-import org.broadinstitute.hellbender.utils.Utils;\n-import org.broadinstitute.hellbender.utils.gcs.BucketUtils;\n-import org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator;\n-import org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator;\n import org.broadinstitute.hellbender.utils.read.GATKRead;\n-import org.broadinstitute.hellbender.utils.read.ReadConstants;\n \n-import java.io.IOException;\n-import java.nio.channels.SeekableByteChannel;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Iterator;\n-import java.util.LinkedHashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n /**\n- * Manages traversals and queries over sources of reads (for now, SAM/BAM/CRAM files only).\n+ *\n+ * An interface for managing traversals over sources of reads.\n  *\n  * Two basic operations are available:\n  *\n  * -Iteration over all reads, optionally restricted to reads that overlap a set of intervals\n  * -Targeted queries by one interval at a time\n  */\n-public final class ReadsDataSource implements GATKDataSource<GATKRead>, AutoCloseable {\n-    protected static final Logger logger = LogManager.getLogger(ReadsDataSource.class);\n-\n-    /**\n-     * Mapping from SamReaders to iterators over the reads from each reader. Only one\n-     * iterator can be open from a given reader at a time (this is a restriction\n-     * in htsjdk). Iterator is set to null for a reader if no iteration is currently\n-     * active on that reader.\n-     */\n-    private final Map<SamReader, CloseableIterator<SAMRecord>> readers;\n-\n-    /**\n-     * Hang onto the input files so that we can print useful errors about them\n-     */\n-    private final Map<SamReader, Path> backingPaths;\n-\n-    /**\n-     * Only reads that overlap these intervals (and unmapped reads, if {@link #traverseUnmapped} is set) will be returned\n-     * during a full iteration. Null if iteration is unbounded.\n-     *\n-     * Individual queries are unaffected by these intervals -- only traversals initiated via {@link #iterator} are affected.\n-     */\n-    private List<SimpleInterval> intervalsForTraversal;\n-\n-    /**\n-     * If true, restrict traversals to unmapped reads (and reads overlapping any {@link #intervalsForTraversal}, if set).\n-     * False if iteration is unbounded or bounded only by our {@link #intervalsForTraversal}.\n-     *\n-     * Note that this setting covers only unmapped reads that have no position -- unmapped reads that are assigned the\n-     * position of their mates will be returned by queries overlapping that position.\n-     *\n-     * Individual queries are unaffected by this setting  -- only traversals initiated via {@link #iterator} are affected.\n-     */\n-    private boolean traverseUnmapped;\n-\n-    /**\n-     * Used to create a merged Sam header when we're dealing with multiple readers. Null if we only have a single reader.\n-     */\n-    private final SamFileHeaderMerger headerMerger;\n-\n-    /**\n-     * Are indices available for all files?\n-     */\n-    private boolean indicesAvailable;\n-\n-    /**\n-     * Initialize this data source with a single SAM/BAM file and validation stringency SILENT.\n-     *\n-     * @param samFile SAM/BAM file, not null.\n-     */\n-    public ReadsDataSource( final Path samFile ) {\n-        this(samFile != null ? Arrays.asList(samFile) : null, (SamReaderFactory)null);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM files and validation stringency SILENT.\n-     *\n-     * @param samFiles SAM/BAM files, not null.\n-     */\n-    public ReadsDataSource( final List<Path> samFiles ) {\n-        this(samFiles, (SamReaderFactory)null);\n-    }\n-\n-    /**\n-     * Initialize this data source with a single SAM/BAM file and a custom SamReaderFactory\n-     *\n-     * @param samPath path to SAM/BAM file, not null.\n-     * @param customSamReaderFactory SamReaderFactory to use, if null a default factory with no reference and validation\n-     *                               stringency SILENT is used.\n-     */\n-    public ReadsDataSource( final Path samPath, SamReaderFactory customSamReaderFactory ) {\n-        this(samPath != null ? Arrays.asList(samPath) : null, customSamReaderFactory);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM files and a custom SamReaderFactory\n-     *\n-     * @param samPaths path to SAM/BAM file, not null.\n-     * @param customSamReaderFactory SamReaderFactory to use, if null a default factory with no reference and validation\n-     *                               stringency SILENT is used.\n-     */\n-    public ReadsDataSource( final List<Path> samPaths, SamReaderFactory customSamReaderFactory ) {\n-        this(samPaths, null, customSamReaderFactory, 0, 0);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM/CRAM files, and explicit indices for those files.\n-     *\n-     * @param samPaths paths to SAM/BAM/CRAM files, not null\n-     * @param samIndices indices for all of the SAM/BAM/CRAM files, in the same order as samPaths. May be null,\n-     *                   in which case index paths are inferred automatically.\n-     */\n-    public ReadsDataSource( final List<Path> samPaths, final List<Path> samIndices ) {\n-        this(samPaths, samIndices, null, 0, 0);\n-    }\n-\n-    /**\n-     * Initialize this data source with multiple SAM/BAM/CRAM files, explicit indices for those files,\n-     * and a custom SamReaderFactory.\n-     *\n-     * @param samPaths paths to SAM/BAM/CRAM files, not null\n-     * @param samIndices indices for all of the SAM/BAM/CRAM files, in the same order as samPaths. May be null,\n-     *                   in which case index paths are inferred automatically.\n-     * @param customSamReaderFactory SamReaderFactory to use, if null a default factory with no reference and validation\n-     *                               stringency SILENT is used.\n-     */\n-    public ReadsDataSource( final List<Path> samPaths, final List<Path> samIndices,\n-        SamReaderFactory customSamReaderFactory) {\n-        this(samPaths, samIndices, customSamReaderFactory, 0, 0);\n-    }\n+public interface ReadsDataSource extends GATKDataSource<GATKRead>, AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef"}, "originalPosition": 161}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/e29e5279c71cd13bcdc91c9c45e45b76ee779eef", "committedDate": "2020-06-02T21:26:29Z", "message": "Extracting a new ReadsDataSource interface\n\n* Extracting a new interface from the existing class ReadsDataSource\n   * the new interface is called ReadsDataSource\n   * ReadsDataSource has been renamed to ReadsPathDataSource\n* This is to support the introduction of a new ReadsDataSource implementation using Htsget"}, "afterCommit": {"oid": "6188e392227ddb251d7d1caa687767f184f6e2e9", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/6188e392227ddb251d7d1caa687767f184f6e2e9", "committedDate": "2020-06-04T20:10:04Z", "message": "Extracting a new ReadsDataSource interface\n\n* Extracting a new interface from the existing class ReadsDataSource\n   * the new interface is called ReadsDataSource\n   * ReadsDataSource has been renamed to ReadsPathDataSource\n* This is to support the introduction of a new ReadsDataSource implementation using Htsget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717a40cc4aaf2797c37386e0b00a589177c0f201", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/717a40cc4aaf2797c37386e0b00a589177c0f201", "committedDate": "2020-06-10T15:44:51Z", "message": "Extracting a new ReadsDataSource interface\n\n* Extracting a new interface from the existing class ReadsDataSource\n   * the new interface is called ReadsDataSource\n   * ReadsDataSource has been renamed to ReadsPathDataSource\n* This is to support the introduction of a new ReadsDataSource implementation using Htsget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5430d46ebbc6ab6a1075370f47b83b4c3834a236", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/5430d46ebbc6ab6a1075370f47b83b4c3834a236", "committedDate": "2020-06-10T15:45:50Z", "message": "rename ReadsDataSourceInterface -> ReadsDataSource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37657a41c893cae93d463e2df1e66c40b5a90d2f", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/37657a41c893cae93d463e2df1e66c40b5a90d2f", "committedDate": "2020-06-04T20:13:04Z", "message": "rename ReadsDataSourceInterface -> ReadsDataSource"}, "afterCommit": {"oid": "5430d46ebbc6ab6a1075370f47b83b4c3834a236", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/5430d46ebbc6ab6a1075370f47b83b4c3834a236", "committedDate": "2020-06-10T15:45:50Z", "message": "rename ReadsDataSourceInterface -> ReadsDataSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjMzMTM0", "url": "https://github.com/broadinstitute/gatk/pull/6633#pullrequestreview-428233134", "createdAt": "2020-06-10T16:31:03Z", "commit": {"oid": "5430d46ebbc6ab6a1075370f47b83b4c3834a236"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}