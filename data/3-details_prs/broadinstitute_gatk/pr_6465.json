{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDkwNjA3", "number": 6465, "title": "Cleaning up old interval code", "bodyText": "Currently things are in a weird state, picard style interval lists are handled either as tribble files if they are named correctly as .interval_list\nIf they are named .intervals, .picard, or .list they are loaded with a different code path.\nThis unifies it so that picard files are only loaded as .interval_list and .intervals is always considered a Gatk style list\n\n\nThis removes the work around for broken 0 length intervals that was put in place a long time ago. However, the workaround was effectively removed\nfor all .interval_list files in 4.1.3.0 when we started reading those through the tribble plugin.  Either the broken files no longer are used or they\nare misnamed as .intervals\n\n\nfix tests to deal correctly with .inverval_list vs .intervals", "createdAt": "2020-02-21T21:59:15Z", "url": "https://github.com/broadinstitute/gatk/pull/6465", "merged": true, "mergeCommit": {"oid": "5e5ee077b6197b6f8745be16969c9a2bf6a5b459"}, "closed": true, "closedAt": "2020-03-02T16:31:58Z", "author": {"login": "lbergelson"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGmczigH2gAyMzc4NDkwNjA3OjllZmQzNTAyOGM2OGFjZDUyODU2ODk0Y2FmMDg1YmQzNDRmMjU2MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcI12leAH2gAyMzc4NDkwNjA3OjRlNDNlYjQ3MWUxNjU3MDNjMjY1ZGUxYzRiMTU0YmY5NWU5OGQ0NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9efd35028c68acd52856894caf085bd344f25626", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/9efd35028c68acd52856894caf085bd344f25626", "committedDate": "2020-02-21T21:17:29Z", "message": "Cleaning up old interval code\n\n* Currently things are in a weird state, picard style interval lists are handled either as tribble files if they are named correctly as .interval_list\n  If they are named .intervals, .picard, or .list they are loaded with a different code path.\n  This unifies it so that picard files are only loaded as .interval_list and .intervals is always considered a Gatk style list\n\n* This removes the work around for broken 0 length intervals that was put in place a long time ago. However, the workaround was effectively removed\n  for all .interval_list files in 4.1.3.0 when we started reading those through the tribble plugin.  Either the broken files no longer are used or they\n  are misnamed as .intervals\n\n* fix tests to deal correctly with .inverval_list vs .intervals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/7f6f0abff6bf507f77973b79431d411b98cd8a4f", "committedDate": "2020-02-25T22:31:26Z", "message": "fix test failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NjMwNDcx", "url": "https://github.com/broadinstitute/gatk/pull/6465#pullrequestreview-366630471", "createdAt": "2020-02-28T19:23:55Z", "commit": {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyMzo1NlrOFwAJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyODoxOVrOFwARSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3ODQ2Nw==", "bodyText": "Kind of a nit, but this error message will no longer include \".interval_list\", which is an acceptable extension.", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385878467", "createdAt": "2020-02-28T19:23:56Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/IntervalUtils.java", "diffHunk": "@@ -303,27 +315,23 @@ public static GenomeLocSortedSet loadIntervals(\n         }\n         // If it's a Feature-containing file, convert it to a list of intervals\n         else if ( FeatureManager.isFeatureFile(IOUtils.getPath(arg)) ) {\n-            rawIntervals.addAll(featureFileToIntervals(parser, arg));\n-        }\n-        // If it's an interval file, add its contents to the raw interval list\n-        else if ( isIntervalFile(arg) ) {\n             try {\n-                rawIntervals.addAll(intervalFileToList(parser, arg));\n-            }\n-            catch ( final UserException.MalformedGenomeLoc e ) {\n-                throw e;\n-            }\n-            catch ( final Exception e ) {\n-                throw new UserException.MalformedFile(new File(arg), \"Interval file could not be parsed in any supported format.\", e);\n+                rawIntervals.addAll(featureFileToIntervals(parser, arg));\n+            } catch (final IllegalArgumentException e){\n+                throw new UserException.MalformedFile(IOUtils.getPath(arg), \"Failure while loading intervals from file.\", e);\n             }\n         }\n+        // If it's an interval file, add its contents to the raw interval list\n+        else if ( isGatkIntervalFile(arg) ) {\n+            rawIntervals.addAll(gatkIntervalFileToList(parser, arg));\n+        }\n         // If it's neither a Feature-containing file nor an interval file, but is an existing file, throw an error.\n         // Note that since contigs can contain periods in their names, we can't use the mere presence of an \"extension\"\n         // as evidence that the user intended the String to be interpreted as a file.\n         else if ( new File(arg).exists() ) {\n             throw new UserException.CouldNotReadInputFile(arg, String.format(\"The file %s exists, but does not contain Features \" +\n                     \"(ie., is not in a supported Feature file format such as vcf, bcf, or bed), \" +\n-                    \"and does not have one of the supported interval file extensions (\" + INTERVAL_FILE_EXTENSIONS + \"). \" +\n+                    \"and does not have one of the supported interval file extensions (\" + GATK_INTERVAL_FILE_EXTENSIONS + \"). \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MDM5Mg==", "bodyText": "This block seems unnecessary ? It might be better to just rely on the next catch block, which will always include the inputPath name.", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385880392", "createdAt": "2020-02-28T19:28:19Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/IntervalUtils.java", "diffHunk": "@@ -356,67 +364,35 @@ else if ( new File(arg).exists() ) {\n     }\n \n     /**\n-     * Read a file of genome locations to process. The file may be in Picard\n-     * or GATK interval format.\n+     * Read a file of genome locations to process, this file must be in GATK interval format.\n      *\n      * @param glParser   GenomeLocParser\n      * @param fileName  interval file\n      * @return List<GenomeLoc> List of Genome Locs that have been parsed from file\n      */\n-    public static List<GenomeLoc> intervalFileToList(final GenomeLocParser glParser, final String fileName) {\n+    private static List<GenomeLoc> gatkIntervalFileToList(final GenomeLocParser glParser, final String fileName) {\n         Utils.nonNull(glParser, \"glParser is null\");\n         Utils.nonNull(fileName, \"file name is null\");\n \n         final Path inputPath = IOUtils.getPath(fileName);\n         final List<GenomeLoc> ret = new ArrayList<>();\n \n-        /**\n-         * First try to read the file as a Picard interval file since that's well structured --\n-         * we'll fail quickly if it's not a valid file.\n-         */\n-        boolean isPicardInterval = false;\n-        try {\n-            // Note: Picard will skip over intervals with contigs not in the sequence dictionary\n-            final IntervalList il = IntervalList.fromPath(inputPath);\n-            isPicardInterval = true;\n-\n-            for (final Interval interval : il.getIntervals()) {\n-                // The current Agilent exome interval list is off-by-one on all end positions. Until this is fixed we\n-                // need to tolerate intervals where the end is one before the start. We should remove this once a\n-                // corrected version of the interval list is released. This is tracked in:\n-                // https://github.com/broadinstitute/gatk/issues/2089\n-                if (interval.getStart() - interval.getEnd() == 1 ) {\n-                    logger.warn(\"Ignoring possibly incorrectly converted length 1 interval : \" + interval);\n-                }\n-                else if ( glParser.isValidGenomeLoc(interval.getContig(), interval.getStart(), interval.getEnd(), true)) {\n-                    ret.add(glParser.createGenomeLoc(interval.getContig(), interval.getStart(), interval.getEnd(), true));\n-                } else {\n-                    throw new UserException(inputPath.toUri() +  \" has an invalid interval : \" + interval) ;\n+        try (final PathLineIterator reader = new PathLineIterator(inputPath)) {\n+            for (final String line : reader) {\n+                final String trimmedLine = line.trim();\n+                if (!trimmedLine.isEmpty()) {\n+                    ret.add(glParser.parseGenomeLoc(trimmedLine));\n                 }\n             }\n-        }\n-        // if that didn't work, try parsing file as a GATK interval file\n-        catch (final Exception e) {\n-            if ( isPicardInterval ) // definitely a picard file, but we failed to parse\n-            {\n-                throw new UserException.CouldNotReadInputFile(inputPath, e);\n-            } else {\n-                try (PathLineIterator reader = new PathLineIterator(inputPath)) {\n-                    for (final String line : reader) {\n-                        final String trimmedLine = line.trim();\n-                        if (!trimmedLine.isEmpty()) {\n-                            ret.add(glParser.parseGenomeLoc(trimmedLine));\n-                        }\n-                    }\n-                }\n+            if (ret.isEmpty()) {\n+                throw new UserException.MalformedFile(inputPath, \"It contains no intervals.\");\n             }\n+            return ret;\n+        } catch (final UserException e){\n+            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NjU2NTgw", "url": "https://github.com/broadinstitute/gatk/pull/6465#pullrequestreview-366656580", "createdAt": "2020-02-28T20:10:10Z", "commit": {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoxMDoxMFrOFwBeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMDoxMDoxMFrOFwBeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwMDExNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"(ie., is not in a supported Feature file format such as vcf, bcf, or bed), \" +\n          \n          \n            \n                                \"(ie., is not in a supported Feature file format such as vcf, bcf, bed, or interval_list), \" +", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385900116", "createdAt": "2020-02-28T20:10:10Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/IntervalUtils.java", "diffHunk": "@@ -303,27 +315,23 @@ public static GenomeLocSortedSet loadIntervals(\n         }\n         // If it's a Feature-containing file, convert it to a list of intervals\n         else if ( FeatureManager.isFeatureFile(IOUtils.getPath(arg)) ) {\n-            rawIntervals.addAll(featureFileToIntervals(parser, arg));\n-        }\n-        // If it's an interval file, add its contents to the raw interval list\n-        else if ( isIntervalFile(arg) ) {\n             try {\n-                rawIntervals.addAll(intervalFileToList(parser, arg));\n-            }\n-            catch ( final UserException.MalformedGenomeLoc e ) {\n-                throw e;\n-            }\n-            catch ( final Exception e ) {\n-                throw new UserException.MalformedFile(new File(arg), \"Interval file could not be parsed in any supported format.\", e);\n+                rawIntervals.addAll(featureFileToIntervals(parser, arg));\n+            } catch (final IllegalArgumentException e){\n+                throw new UserException.MalformedFile(IOUtils.getPath(arg), \"Failure while loading intervals from file.\", e);\n             }\n         }\n+        // If it's an interval file, add its contents to the raw interval list\n+        else if ( isGatkIntervalFile(arg) ) {\n+            rawIntervals.addAll(gatkIntervalFileToList(parser, arg));\n+        }\n         // If it's neither a Feature-containing file nor an interval file, but is an existing file, throw an error.\n         // Note that since contigs can contain periods in their names, we can't use the mere presence of an \"extension\"\n         // as evidence that the user intended the String to be interpreted as a file.\n         else if ( new File(arg).exists() ) {\n             throw new UserException.CouldNotReadInputFile(arg, String.format(\"The file %s exists, but does not contain Features \" +\n                     \"(ie., is not in a supported Feature file format such as vcf, bcf, or bed), \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e43eb471e165703c265de1c4b154bf95e98d455", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/4e43eb471e165703c265de1c4b154bf95e98d455", "committedDate": "2020-02-28T20:22:04Z", "message": "Apply suggestions from code review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2773, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}