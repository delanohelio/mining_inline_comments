{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDE5ODky", "number": 6442, "title": "Parse combined AS_QUALapprox values from older reblocked GVCFs properly", "bodyText": "Sometimes NON_REF gets a zero and sometimes it's empty.  This seems isolated to a much older version of ReblockGVCF, but that was what we were running for production pipeline tests.\n@droazen I'd like this to go into this week's release", "createdAt": "2020-02-04T19:50:54Z", "url": "https://github.com/broadinstitute/gatk/pull/6442", "merged": true, "mergeCommit": {"oid": "9efe23d0438e1aa6ac68df40df43ce81a42ce28b"}, "closed": true, "closedAt": "2020-02-10T18:29:07Z", "author": {"login": "ldgauthier"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBG94vAH2gAyMzcxMDE5ODkyOjU4YjNlNDVlMGJkNTQzZjg0MDgxNjVmNTlkZjU5YTExYjE2YWRlMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDBcHOAFqTM1NjE2Mjc5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "58b3e45e0bd543f8408165f59df59a11b16ade31", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/58b3e45e0bd543f8408165f59df59a11b16ade31", "committedDate": "2020-02-04T19:47:02Z", "message": "For some reason, some of my merged VCs are coming back with values for\nNON_REF but sometimes they get zeros"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzM4OTU0", "url": "https://github.com/broadinstitute/gatk/pull/6442#pullrequestreview-355338954", "createdAt": "2020-02-07T18:09:20Z", "commit": {"oid": "58b3e45e0bd543f8408165f59df59a11b16ade31"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODowOToyMFrOFnFm6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMTowNlrOFnFp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMDY2NQ==", "bodyText": "assertEquals() would be more appropriate here", "url": "https://github.com/broadinstitute/gatk/pull/6442#discussion_r376530665", "createdAt": "2020-02-07T18:09:20Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_QualByDepthUnitTest.java", "diffHunk": "@@ -27,4 +34,16 @@ protected String getKey() {\n         return GATKVCFConstants.AS_QUAL_KEY;\n     }\n \n+    @Test\n+    public void testParseQualList() {\n+        final String goodQualList = \"|234|0\"; //combined VCs from GenomicsDB have zero value for NON-REF\n+        final String trickyQualList = \"|234|\"; //older single-sample GVCFs don't have a value for NON-REF -- GenomicsDB assigns an empty value, which is fair\n+        final VariantContext withNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, goodQualList).make();\n+        final VariantContext withNoNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, trickyQualList).make();\n+        Assert.assertTrue(AS_QualByDepth.parseQualList(withNonRefValue).size() == withNonRefValue.getAlternateAlleles().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b3e45e0bd543f8408165f59df59a11b16ade31"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMTQ0MA==", "bodyText": "Can you also add an assertion that the actual QD value assigned to NON_REF was 0 in the withNoNonRefValue case?", "url": "https://github.com/broadinstitute/gatk/pull/6442#discussion_r376531440", "createdAt": "2020-02-07T18:11:06Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/AS_QualByDepthUnitTest.java", "diffHunk": "@@ -27,4 +34,16 @@ protected String getKey() {\n         return GATKVCFConstants.AS_QUAL_KEY;\n     }\n \n+    @Test\n+    public void testParseQualList() {\n+        final String goodQualList = \"|234|0\"; //combined VCs from GenomicsDB have zero value for NON-REF\n+        final String trickyQualList = \"|234|\"; //older single-sample GVCFs don't have a value for NON-REF -- GenomicsDB assigns an empty value, which is fair\n+        final VariantContext withNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, goodQualList).make();\n+        final VariantContext withNoNonRefValue = new VariantContextBuilder(GATKVariantContextUtils.makeFromAlleles(\"good\", \"chr1\", 10001, Arrays.asList(\"A\",\"T\", Allele.NON_REF_STRING))).\n+                attribute(GATKVCFConstants.AS_RAW_QUAL_APPROX_KEY, trickyQualList).make();\n+        Assert.assertTrue(AS_QualByDepth.parseQualList(withNonRefValue).size() == withNonRefValue.getAlternateAlleles().size());\n+        Assert.assertTrue(AS_QualByDepth.parseQualList(withNoNonRefValue).size() == withNonRefValue.getAlternateAlleles().size());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b3e45e0bd543f8408165f59df59a11b16ade31"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35fdc4bc24fb44e759d6f487526778a19d8ca601", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/35fdc4bc24fb44e759d6f487526778a19d8ca601", "committedDate": "2020-02-07T19:54:43Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0be996b10b25e827de1669aabaedfec35e5620", "author": {"user": {"login": "ldgauthier", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/7b0be996b10b25e827de1669aabaedfec35e5620", "committedDate": "2020-02-07T19:57:29Z", "message": "Derp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTYyNzky", "url": "https://github.com/broadinstitute/gatk/pull/6442#pullrequestreview-356162792", "createdAt": "2020-02-10T18:28:28Z", "commit": {"oid": "7b0be996b10b25e827de1669aabaedfec35e5620"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2754, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}