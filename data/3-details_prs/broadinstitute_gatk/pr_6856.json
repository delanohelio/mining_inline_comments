{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTQxMDM4", "number": 6856, "title": "Fix treatment of star alleles in use genotype posteriors for qual mode", "bodyText": "This PR updates the --use-posteriors-to-calculate-qual mode to properly treat the star allele as a non-variant (for that site) allele. With this change, if a spanning deletion is present, it is treated as a non-variant allele for that site, and the posterior of no variant allele being present becomes the sum of the posteriors of all genotypes composed of combinations of the reference allele and the star allele.", "createdAt": "2020-09-30T14:12:31Z", "url": "https://github.com/broadinstitute/gatk/pull/6856", "merged": true, "mergeCommit": {"oid": "10e1cd9d271a5b45c9991a3d9708868ad2aa04ca"}, "closed": true, "closedAt": "2020-10-07T17:45:36Z", "author": {"login": "cwhelan"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOrBq3gFqTUwMTM4OTIxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP9UGoAH2gAyNDk1NTQxMDM4OmI3MTMyNDA0YzQxMjMwNThhOWNiNzAwOWY1YmFhMjQwNDc0OTE0MTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzg5MjE5", "url": "https://github.com/broadinstitute/gatk/pull/6856#pullrequestreview-501389219", "createdAt": "2020-10-02T19:19:55Z", "commit": {"oid": "fdb06c5214da196aebc26a9448c44a112957391d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdb06c5214da196aebc26a9448c44a112957391d", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/fdb06c5214da196aebc26a9448c44a112957391d", "committedDate": "2020-09-29T19:56:28Z", "message": "update changes after rebase"}, "afterCommit": {"oid": "d3a988a39ed9eb84834e18f50cb4602ae1cc2363", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/d3a988a39ed9eb84834e18f50cb4602ae1cc2363", "committedDate": "2020-10-05T19:16:00Z", "message": "update changes after rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee6c36c49106a01e7675def5b31586a48762f37", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/6ee6c36c49106a01e7675def5b31586a48762f37", "committedDate": "2020-10-05T19:33:56Z", "message": "use genotype posteriors for qual spanning deletion fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "committedDate": "2020-10-05T19:33:56Z", "message": "update changes after rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3a988a39ed9eb84834e18f50cb4602ae1cc2363", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/d3a988a39ed9eb84834e18f50cb4602ae1cc2363", "committedDate": "2020-10-05T19:16:00Z", "message": "update changes after rebase"}, "afterCommit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/0eadc4a629dfda911b82a0fbc2875ec1d589fd2c", "committedDate": "2020-10-05T19:33:56Z", "message": "update changes after rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDgyNjU1", "url": "https://github.com/broadinstitute/gatk/pull/6856#pullrequestreview-502482655", "createdAt": "2020-10-05T23:13:40Z", "commit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxMzo0MFrOHcww5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxNTowNVrOHcwy0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA==", "bodyText": "This can be simplified a bit.\nAssuming you can write in posterior (I think is the case):\nfinal double[] noVarPosteriors = IntStream.rangeClosed(0, ploidy)\n                 .map(p, gcCalc.alleleCountsToIndex(0, p, spanIndelIdx, ploidy - p))\n                 .mapToDouble(i -> posteriors[i])\n                 .toArray();\nreturn QualUtils.phredSum(noVarPosteriors) - QualUtils.phredSum(posteriors);", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499921124", "createdAt": "2020-10-05T23:13:40Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java", "diffHunk": "@@ -186,18 +186,41 @@ public VariantContext calculateGenotypes(final VariantContext vc, final Genotype\n         return builder.genotypes(genotypes).attributes(attributes).make();\n     }\n \n-    private double phredNoVariantPosteriorProbability(final GenotypesContext gc) {\n+    protected double phredNoVariantPosteriorProbability(final List<Allele> alleles, final GenotypesContext gc) {\n         return gc.stream()\n-                .map(gt -> VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN))\n-                //TODO reverting the following a change during refactoring, more sound but different to what it was:\n-                //        .mapToDouble(probs -> probs[0] - QualityUtils.phredSum(probs))\n-                .mapToDouble(probs -> probs[0])\n+                .mapToDouble(gt -> extractPNoAlt(alleles, gt))\n                 .filter(d -> !Double.isNaN(d))\n-                // We do not want to return 0 if empty but NaN,\n-                // so rather than simply call .sum() we have a custom reduce\n                 .reduce(Double.NaN, (a, b) -> Double.isNaN(a) ? b : (Double.isNaN(b) ? a : a + b) );\n     }\n \n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n+        final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n+        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);\n+        return pNoAlt;\n+    }\n+\n+    private static final GenotypeLikelihoodCalculators GL_CALCS = new GenotypeLikelihoodCalculators();\n+\n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt, final double[] posteriors) {\n+        if (!alleles.contains(Allele.SPAN_DEL)) {\n+            return posteriors[0] - Math.max(0, QualityUtils.phredSum(posteriors));\n+        } else {\n+            // here we need to get indices of genotypes composed of REF and * alleles\n+            final int ploidy = gt.getPloidy();\n+            final GenotypeLikelihoodCalculator glCalc = GL_CALCS.getInstance(ploidy, alleles.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTQxMg==", "bodyText": "I don't know why there is a need for the Math.max(0, x) but is trivial to add it to the code above I guess.", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499921412", "createdAt": "2020-10-05T23:14:27Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java", "diffHunk": "@@ -186,18 +186,41 @@ public VariantContext calculateGenotypes(final VariantContext vc, final Genotype\n         return builder.genotypes(genotypes).attributes(attributes).make();\n     }\n \n-    private double phredNoVariantPosteriorProbability(final GenotypesContext gc) {\n+    protected double phredNoVariantPosteriorProbability(final List<Allele> alleles, final GenotypesContext gc) {\n         return gc.stream()\n-                .map(gt -> VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN))\n-                //TODO reverting the following a change during refactoring, more sound but different to what it was:\n-                //        .mapToDouble(probs -> probs[0] - QualityUtils.phredSum(probs))\n-                .mapToDouble(probs -> probs[0])\n+                .mapToDouble(gt -> extractPNoAlt(alleles, gt))\n                 .filter(d -> !Double.isNaN(d))\n-                // We do not want to return 0 if empty but NaN,\n-                // so rather than simply call .sum() we have a custom reduce\n                 .reduce(Double.NaN, (a, b) -> Double.isNaN(a) ? b : (Double.isNaN(b) ? a : a + b) );\n     }\n \n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n+        final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n+        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);\n+        return pNoAlt;\n+    }\n+\n+    private static final GenotypeLikelihoodCalculators GL_CALCS = new GenotypeLikelihoodCalculators();\n+\n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt, final double[] posteriors) {\n+        if (!alleles.contains(Allele.SPAN_DEL)) {\n+            return posteriors[0] - Math.max(0, QualityUtils.phredSum(posteriors));\n+        } else {\n+            // here we need to get indices of genotypes composed of REF and * alleles\n+            final int ploidy = gt.getPloidy();\n+            final GenotypeLikelihoodCalculator glCalc = GL_CALCS.getInstance(ploidy, alleles.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA=="}, "originalCommit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTYxOA==", "bodyText": "Feel free to use IntRange instead of IntStream if you can get the same functionality from it.", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499921618", "createdAt": "2020-10-05T23:15:05Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java", "diffHunk": "@@ -186,18 +186,41 @@ public VariantContext calculateGenotypes(final VariantContext vc, final Genotype\n         return builder.genotypes(genotypes).attributes(attributes).make();\n     }\n \n-    private double phredNoVariantPosteriorProbability(final GenotypesContext gc) {\n+    protected double phredNoVariantPosteriorProbability(final List<Allele> alleles, final GenotypesContext gc) {\n         return gc.stream()\n-                .map(gt -> VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN))\n-                //TODO reverting the following a change during refactoring, more sound but different to what it was:\n-                //        .mapToDouble(probs -> probs[0] - QualityUtils.phredSum(probs))\n-                .mapToDouble(probs -> probs[0])\n+                .mapToDouble(gt -> extractPNoAlt(alleles, gt))\n                 .filter(d -> !Double.isNaN(d))\n-                // We do not want to return 0 if empty but NaN,\n-                // so rather than simply call .sum() we have a custom reduce\n                 .reduce(Double.NaN, (a, b) -> Double.isNaN(a) ? b : (Double.isNaN(b) ? a : a + b) );\n     }\n \n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n+        final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n+        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);\n+        return pNoAlt;\n+    }\n+\n+    private static final GenotypeLikelihoodCalculators GL_CALCS = new GenotypeLikelihoodCalculators();\n+\n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt, final double[] posteriors) {\n+        if (!alleles.contains(Allele.SPAN_DEL)) {\n+            return posteriors[0] - Math.max(0, QualityUtils.phredSum(posteriors));\n+        } else {\n+            // here we need to get indices of genotypes composed of REF and * alleles\n+            final int ploidy = gt.getPloidy();\n+            final GenotypeLikelihoodCalculator glCalc = GL_CALCS.getInstance(ploidy, alleles.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTEyNA=="}, "originalCommit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNTQ2MjU0", "url": "https://github.com/broadinstitute/gatk/pull/6856#pullrequestreview-502546254", "createdAt": "2020-10-06T02:43:34Z", "commit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMjo0MzozNFrOHc0D3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMjo0MzozNFrOHc0D3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk3NTEzNQ==", "bodyText": "unnecessary local variable.", "url": "https://github.com/broadinstitute/gatk/pull/6856#discussion_r499975135", "createdAt": "2020-10-06T02:43:34Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java", "diffHunk": "@@ -186,18 +186,41 @@ public VariantContext calculateGenotypes(final VariantContext vc, final Genotype\n         return builder.genotypes(genotypes).attributes(attributes).make();\n     }\n \n-    private double phredNoVariantPosteriorProbability(final GenotypesContext gc) {\n+    protected double phredNoVariantPosteriorProbability(final List<Allele> alleles, final GenotypesContext gc) {\n         return gc.stream()\n-                .map(gt -> VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN))\n-                //TODO reverting the following a change during refactoring, more sound but different to what it was:\n-                //        .mapToDouble(probs -> probs[0] - QualityUtils.phredSum(probs))\n-                .mapToDouble(probs -> probs[0])\n+                .mapToDouble(gt -> extractPNoAlt(alleles, gt))\n                 .filter(d -> !Double.isNaN(d))\n-                // We do not want to return 0 if empty but NaN,\n-                // so rather than simply call .sum() we have a custom reduce\n                 .reduce(Double.NaN, (a, b) -> Double.isNaN(a) ? b : (Double.isNaN(b) ? a : a + b) );\n     }\n \n+    private double extractPNoAlt(final List<Allele> alleles, final Genotype gt) {\n+        final double[] gpArray = VariantContextGetters.getAttributeAsDoubleArray(gt, VCFConstants.GENOTYPE_POSTERIORS_KEY, () -> new double[]{Double.NaN}, Double.NaN);\n+        final double pNoAlt = extractPNoAlt(alleles, gt, gpArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eadc4a629dfda911b82a0fbc2875ec1d589fd2c"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a4685d65334668607392a3571231a051e357609", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/7a4685d65334668607392a3571231a051e357609", "committedDate": "2020-10-06T16:57:06Z", "message": "address pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7132404c4123058a9cb7009f5baa24047491411", "author": {"user": {"login": "cwhelan", "name": null}}, "url": "https://github.com/broadinstitute/gatk/commit/b7132404c4123058a9cb7009f5baa24047491411", "committedDate": "2020-10-06T19:12:16Z", "message": "fix typo"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2491, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}