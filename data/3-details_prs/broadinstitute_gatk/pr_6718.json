{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzU1MDA2", "number": 6718, "title": "Another round of URI changes.", "bodyText": "This will enable WDL annotation on a bunch more tools.", "createdAt": "2020-07-21T21:25:55Z", "url": "https://github.com/broadinstitute/gatk/pull/6718", "merged": true, "mergeCommit": {"oid": "7e3d8a1e0c56206345128e3a6125ecc30427deda"}, "closed": true, "closedAt": "2020-11-25T20:38:52Z", "author": {"login": "cmnbroad"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCB_A4gBqjM2ODUyNDk5NjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgEgn-AFqTUzODgzMTc2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f46ee4996a762240a12e4bde541e8c62f92d0d16", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/f46ee4996a762240a12e4bde541e8c62f92d0d16", "committedDate": "2020-07-21T21:22:54Z", "message": "Repair imports."}, "afterCommit": {"oid": "89fe9c3d61b52bbdf6ea57d43367f46759fdb2cd", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/89fe9c3d61b52bbdf6ea57d43367f46759fdb2cd", "committedDate": "2020-08-24T12:45:45Z", "message": "Repair imports."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89fe9c3d61b52bbdf6ea57d43367f46759fdb2cd", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/89fe9c3d61b52bbdf6ea57d43367f46759fdb2cd", "committedDate": "2020-08-24T12:45:45Z", "message": "Repair imports."}, "afterCommit": {"oid": "e252b4583d74eee26bbf75718e7b90d665a11657", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/e252b4583d74eee26bbf75718e7b90d665a11657", "committedDate": "2020-09-09T20:16:00Z", "message": "Repair imports."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e252b4583d74eee26bbf75718e7b90d665a11657", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/e252b4583d74eee26bbf75718e7b90d665a11657", "committedDate": "2020-09-09T20:16:00Z", "message": "Repair imports."}, "afterCommit": {"oid": "92f8f0c4a41d92ed6315b9162cfb3c62d39c094c", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/92f8f0c4a41d92ed6315b9162cfb3c62d39c094c", "committedDate": "2020-09-09T21:17:40Z", "message": "Repair imports."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92f8f0c4a41d92ed6315b9162cfb3c62d39c094c", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/92f8f0c4a41d92ed6315b9162cfb3c62d39c094c", "committedDate": "2020-09-09T21:17:40Z", "message": "Repair imports."}, "afterCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/ce925329b4d8da2b29840b881811b822fbe0f2c7", "committedDate": "2020-09-21T17:06:17Z", "message": "Repair imports."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjk2NjQ0", "url": "https://github.com/broadinstitute/gatk/pull/6718#pullrequestreview-493696644", "createdAt": "2020-09-22T17:35:49Z", "commit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozNTo0OVrOHWFMQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoyNjowN1rOHYRgFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxNTc3OQ==", "bodyText": "This else clause specifically covers the file case -- non-local files should be caught by the else if (getScheme() != null && !getScheme().equals(\"file\")) clause above. Can you confirm that this change is correct and won't result in introducing file:// URIs into codepaths that can't handle them?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r492915779", "createdAt": "2020-09-22T17:35:49Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -123,7 +122,7 @@ private String makeIntoAbsolutePath() {\n         } else if (getScheme() != null && !getScheme().equals(\"file\")) { // local files always have a \"file\" scheme\n             return toPath().toAbsolutePath().toUri().toString();\n         } else {\n-            return new File(getURI()).getAbsolutePath();\n+            return getURI().getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMTIxNQ==", "bodyText": "We've gone from converting to absolute path to using the raw input String here -- can't we continue to absolutize the path if necessary?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495201215", "createdAt": "2020-09-25T19:54:09Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureWalker.java", "diffHunk": "@@ -55,16 +55,16 @@ protected final void onStartup() {\n \n     @SuppressWarnings(\"unchecked\")\n     private void initializeDrivingFeatures() {\n-        final File drivingFile = getDrivingFeatureFile();\n-        final FeatureCodec<? extends Feature, ?> codec = FeatureManager.getCodecForFile(drivingFile.toPath());\n+        final GATKPath drivingPath = getDrivingFeaturePath();\n+        final FeatureCodec<? extends Feature, ?> codec = FeatureManager.getCodecForFile(drivingPath.toPath());\n         if (isAcceptableFeatureType(codec.getFeatureType())) {\n-            drivingFeatures = new FeatureDataSource<>(new FeatureInput<>(drivingFile.getAbsolutePath()), FeatureDataSource.DEFAULT_QUERY_LOOKAHEAD_BASES, null, cloudPrefetchBuffer, cloudIndexPrefetchBuffer, referenceArguments.getReferencePath());\n+            drivingFeatures = new FeatureDataSource<>(new FeatureInput<>(drivingPath.getRawInputString()), FeatureDataSource.DEFAULT_QUERY_LOOKAHEAD_BASES, null, cloudPrefetchBuffer, cloudIndexPrefetchBuffer, referenceArguments.getReferencePath());\n \n-            final FeatureInput<F> drivingFeaturesInput = new FeatureInput<>(drivingFile.getAbsolutePath(), \"drivingFeatureFile\");\n+            final FeatureInput<F> drivingFeaturesInput = new FeatureInput<>(drivingPath.getRawInputString(), \"drivingFeatureFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwMzQ2Mw==", "bodyText": "Aren't argument tags part of the argument name these days, not the argument value?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495203463", "createdAt": "2020-09-25T19:59:09Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/MultiVariantWalker.java", "diffHunk": "@@ -63,7 +63,8 @@ protected MultiVariantInputArgumentCollection getMultiVariantInputArgumentCollec\n     protected void initializeDrivingVariants() {\n         multiVariantInputArgumentCollection.getDrivingVariantPaths().stream().forEach(\n                 f -> {\n-                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f);\n+                    // use getRawInputString() on the original GATKPath here to ensure that we propagate any argument tags\n+                    FeatureInput<VariantContext> featureInput = new FeatureInput<>(f.getRawInputString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNDEwNw==", "bodyText": "Same question: aren't the argument tags no longer part of the argument values?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495204107", "createdAt": "2020-09-25T20:00:31Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/VariantWalker.java", "diffHunk": "@@ -50,7 +50,8 @@ protected final void onStartup() {\n \n     @Override\n     protected void initializeDrivingVariants() {\n-        drivingVariantsFeatureInput = new FeatureInput<>(drivingVariantFile, \"drivingVariantFile\");\n+        // use getRawInputString() on the original GATKPath here to ensure that we propagate any argument tags\n+        drivingVariantsFeatureInput = new FeatureInput<>(drivingVariantFile.getRawInputString(), \"drivingVariantFile\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNDcyOA==", "bodyText": "Oh dear, I didn't realize this tool was still in the GATK -- it should really be removed....", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495204728", "createdAt": "2020-09-25T20:02:02Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/FixCallSetSampleOrdering.java", "diffHunk": "@@ -45,7 +45,7 @@\n     @Argument(fullName = GenomicsDBImport.SAMPLE_NAME_MAP_LONG_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNjQ3OQ==", "bodyText": "If we're no longer calling methods that throw IOException, then I think we need to call checkError() manually on the PrintWriter to check whether an error occurred....", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495206479", "createdAt": "2020-09-25T20:06:19Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/GetSampleName.java", "diffHunk": "@@ -95,12 +93,10 @@ public void onTraversalStart() {\n             throw new UserException.BadInput(\"The given bam input has no sample names.\");\n         }\n \n-        try (final FileWriter fileWriter = new FileWriter(outputSampleNameFile, false)) {\n+        try (final PrintWriter fileWriter = new PrintWriter(outputSampleNameFile.getOutputStream(), false)) {\n             final String rawSample = sampleNames.get(0);\n             final String outputSample = urlEncode ? IOUtils.urlEncode(rawSample) : rawSample;\n             fileWriter.write(outputSample);\n-        } catch (final IOException ioe) {\n-            throw new UserException(\"Could not write file.\", ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzAzMA==", "bodyText": "Same issue here -- need to check the error state of the PrintWriter. If exceptions are being suppressed internally in the writer then you're supposed to call checkError(), I believe.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495207030", "createdAt": "2020-09-25T20:07:45Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/PrintReadsHeader.java", "diffHunk": "@@ -33,11 +32,9 @@ public boolean requiresReads() {\n     public void traverse() {\n         final SAMFileHeader bamHeader = getHeaderForReads();\n \n-        try ( final PrintWriter outputWriter = new PrintWriter(outputFile) ) {\n+        try ( final PrintWriter outputWriter = new PrintWriter(outputFile.getOutputStream()) ) {\n             final SAMTextHeaderCodec codec = new SAMTextHeaderCodec();\n             codec.encode(outputWriter, bamHeader);\n-        } catch (FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(\"Error writing reads header to \" + outputFile, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODcwOA==", "bodyText": "If we're no longer calling methods that throw IOException, then how are I/O errors being handled? PrintStream also seems to have a checkError() method...but in general it would be preferable to call methods that throw IOException instead of methods that swallow the exception and set an error flag.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495208708", "createdAt": "2020-09-25T20:11:48Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -216,11 +216,8 @@ private void quantizeQualityScores() {\n     }\n \n     private void generateReport() {\n-        try ( PrintStream recalTableStream = new PrintStream(recalTableFile) ) {\n+        try ( PrintStream recalTableStream = new PrintStream(recalTableFile.getOutputStream()) ) {\n             RecalUtils.outputRecalibrationReport(recalTableStream, recalArgs, quantizationInfo, recalibrationEngine.getFinalRecalibrationTables(), recalibrationEngine.getCovariates());\n         }\n-        catch (final IOException e) {\n-            throw new UserException.CouldNotCreateOutputFile(recalTableFile, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwOTYyNw==", "bodyText": "Here too we need to handle errors during stream creation. If IOException is no longer thrown then I guess we have to call checkError()? (unless you can find a better option -- it would be preferable to be able to catch IOException like before)", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495209627", "createdAt": "2020-09-25T20:14:07Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -165,11 +165,7 @@ public HaplotypeCallerEngine(final HaplotypeCallerArgumentCollection hcArgs, Ass\n         forceCallingAllelesPresent = hcArgs.alleles != null;\n         initialize(createBamOutIndex, createBamOutMD5);\n         if (hcArgs.assemblyStateOutput != null) {\n-            try {\n-                assemblyDebugOutStream = new PrintStream(Files.newOutputStream(IOUtils.getPath(hcArgs.assemblyStateOutput)));\n-            } catch (IOException e) {\n-                throw new UserException.CouldNotCreateOutputFile(hcArgs.assemblyStateOutput, \"Provided argument for assembly debug graph location could not be created\");\n-            }\n+            assemblyDebugOutStream = new PrintStream(hcArgs.assemblyStateOutput.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMTU2NQ==", "bodyText": "Why isn't outFile itself converted to GATKPath in this tool? (it's still a File)", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495211565", "createdAt": "2020-09-25T20:18:54Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/varianteval/VariantEval.java", "diffHunk": "@@ -755,7 +755,7 @@ else if (ve instanceof MetricsCollection)\n                 metricsCollection.setData(compOverlap.concordantRate, indelSummary.n_SNPs, countVariants.nSNPs, indelSummary.n_indels, multiallelicSummary.nIndels, indelSummary.insertion_to_deletion_ratio, countVariants.insertionDeletionRatio, tiTvVariantEvaluator.tiTvRatio);\n         }\n \n-        try (PrintStream out = IOUtils.makePrintStreamMaybeGzipped(outFile)){\n+        try (PrintStream out = IOUtils.makePrintStreamMaybeGzipped(new GATKPath(outFile.getAbsolutePath()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjUwNQ==", "bodyText": "This is java.io.File, not java.nio.File", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495212505", "createdAt": "2020-09-25T20:21:04Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/CNNScoreVariants.java", "diffHunk": "@@ -221,7 +219,7 @@\n     private int windowStart = windowSize / 2;\n     private boolean waitforBatchCompletion = false;\n \n-    private File scoreFile;\n+    private File scoreFile; // use java.nio.File here because python code needs to write to this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjkxNw==", "bodyText": "No way around this?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495212917", "createdAt": "2020-09-25T20:22:01Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -199,10 +198,10 @@\n     @Argument(fullName= StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             shortName=StandardArgumentDefinitions.OUTPUT_SHORT_NAME,\n             doc=\"The output recal file used by ApplyRecalibration\", optional=false)\n-    private String output;\n+    private GATKPath output;\n \n     @Argument(fullName=\"tranches-file\", doc=\"The output tranches file used by ApplyRecalibration\", optional=false)\n-    private String TRANCHES_FILE;\n+    private File TRANCHES_FILE; // not GATKPath since this name must be accessible to R code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzgxNw==", "bodyText": "Handle errors on the PrintStream (by checkError() if that's the only way...)", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495213817", "createdAt": "2020-09-25T20:24:17Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,8 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n                                 report.print(modelReportStream);\n-                            } catch (FileNotFoundException e) {\n-                                throw new UserException.CouldNotCreateOutputFile(\"File: (\" + outputModel + \")\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMzkxNg==", "bodyText": "Handle errors on the PrintStream", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495213916", "createdAt": "2020-09-25T20:24:34Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -680,10 +680,8 @@ public Object onTraversalSuccess() {\n \n                 if (outputModel != null) {\n                     final GATKReport report = writeModelReport(goodModel, badModel, USE_ANNOTATIONS);\n-                    try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                    try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n                         report.print(modelReportStream);\n-                    } catch (FileNotFoundException e) {\n-                        throw new UserException.CouldNotCreateOutputFile(\"File: (\" + outputModel + \")\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxNDYxNQ==", "bodyText": "Will this constructor throw IOException if there's an error, or suppress the error?", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r495214615", "createdAt": "2020-09-25T20:26:07Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/io/IOUtils.java", "diffHunk": "@@ -646,11 +646,11 @@ public static File createFifoFile(final Path fifoFilePath, final boolean overwri\n     /**\n      * Makes a print stream for a file, gzipping on the fly if the file's name ends with '.gz'.\n      */\n-    public static PrintStream makePrintStreamMaybeGzipped(File file) throws IOException {\n-        if (file.getPath().endsWith(\".gz\")) {\n-            return new PrintStream(new GZIPOutputStream(new FileOutputStream(file)));\n+    public static PrintStream makePrintStreamMaybeGzipped(GATKPath filePath) throws IOException {\n+        if (filePath.hasExtension(\".gz\")) {\n+            return new PrintStream(new GZIPOutputStream(filePath.getOutputStream()));\n         } else {\n-            return new PrintStream(file);\n+            return new PrintStream(filePath.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce925329b4d8da2b29840b881811b822fbe0f2c7"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODAzOTQz", "url": "https://github.com/broadinstitute/gatk/pull/6718#pullrequestreview-522803943", "createdAt": "2020-11-03T19:16:25Z", "commit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxNjoyNVrOHs9BGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NDoxMFrOHs97eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5OTA5OA==", "bodyText": "Comment is inaccurate -- this constructor is public, not package access", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516899098", "createdAt": "2020-11-03T19:16:25Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -71,6 +73,39 @@\n         Utils.nonNull(rawArgumentValue, \"rawArgumentValue\");\n     }\n \n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5OTMzOA==", "bodyText": "Here too the comment is wrong -- this constructor is public", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516899338", "createdAt": "2020-11-03T19:16:52Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureInput.java", "diffHunk": "@@ -71,6 +73,39 @@\n         Utils.nonNull(rawArgumentValue, \"rawArgumentValue\");\n     }\n \n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.\n+     */\n+    public FeatureInput(final GATKPath gatkPath) {\n+        super(gatkPath);\n+    }\n+\n+    /**\n+     * Construct a FeatureInput from a GATKPath argument value.\n+     *\n+     * @param gatkPath an existing GATKPath object\n+     *\n+     * This constructor is meant to be called only by the engine and test classes,\n+     * which is why it has package access.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNDM0NQ==", "bodyText": "The PrintStream constructor can still end up throwing an exception, which we should handle (especially in an example tool like this). If you look at the implementation of PrintStream, you can see that the constructor ultimately ends up creating an OutputStreamWriter, which can throw...", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516904345", "createdAt": "2020-11-03T19:26:27Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalker.java", "diffHunk": "@@ -45,12 +42,7 @@ public AssemblyRegionEvaluator assemblyRegionEvaluator() {\n \n     @Override\n     public void onTraversalStart() {\n-        try {\n-            outputStream = outputFile != null ? new PrintStream(outputFile) : System.out;\n-        }\n-        catch ( final FileNotFoundException e ) {\n-            throw new UserException.CouldNotCreateOutputFile(outputFile, e);\n-        }\n+        outputStream = outputFile != null ? new PrintStream(outputFile.getOutputStream()) : System.out;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwNzE1NA==", "bodyText": "The OutputStreamWriter constructor can throw -- we should catch any exceptions thrown by it, and wrap within a UserException as before.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516907154", "createdAt": "2020-11-03T19:31:24Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -165,11 +164,7 @@ public HaplotypeCallerEngine(final HaplotypeCallerArgumentCollection hcArgs, Ass\n         forceCallingAllelesPresent = hcArgs.alleles != null;\n         initialize(createBamOutIndex, createBamOutMD5);\n         if (hcArgs.assemblyStateOutput != null) {\n-            try {\n-                assemblyDebugOutStream = new PrintStream(Files.newOutputStream(IOUtils.getPath(hcArgs.assemblyStateOutput)));\n-            } catch (IOException e) {\n-                throw new UserException.CouldNotCreateOutputFile(hcArgs.assemblyStateOutput, \"Provided argument for assembly debug graph location could not be created\");\n-            }\n+            assemblyDebugOutStream = new OutputStreamWriter(hcArgs.assemblyStateOutput.getOutputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODg5MA==", "bodyText": "You've switched from calling println() (which writes a newline to the stream) to calling write() (which I don't believe writes a newline).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516908890", "createdAt": "2020-11-03T19:34:37Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTE1NA==", "bodyText": "fix indentation here", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516909154", "createdAt": "2020-11-03T19:35:06Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Error writing to debug output stream\", e);\n             }\n-        }\n+    }\n \n-        // run the local assembler, getting back a collection of information on how we should proceed\n+\n+    // run the local assembler, getting back a collection of information on how we should proceed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTMwOA==", "bodyText": "Here too you've switched from calling println() (which writes a newline to the stream) to calling write() (which I don't believe writes a newline).", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516909308", "createdAt": "2020-11-03T19:35:22Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -531,19 +526,28 @@ public ActivityProfileState isActive( final AlignmentContext context, final Refe\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\n\\n\\n\\n\"+region.getSpan()+\"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n-            for (GATKRead read : region.getReads()) {\n-                assemblyDebugOutStream.println(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+            try {\n+                assemblyDebugOutStream.write(\"\\n\\n\\n\\n\" + region.getSpan() + \"\\nNumber of reads in region: \" + region.getReads().size() + \"     they are:\");\n+                for (GATKRead read : region.getReads()) {\n+                    assemblyDebugOutStream.write(read.getName() + \"   \" + read.convertToSAMRecord(region.getHeader()).getFlags());\n+                }\n+            } catch (IOException e) {\n+                throw new UserException(\"Error writing to debug output stream\", e);\n             }\n-        }\n+    }\n \n-        // run the local assembler, getting back a collection of information on how we should proceed\n+\n+    // run the local assembler, getting back a collection of information on how we should proceed\n         final AssemblyResultSet untrimmedAssemblyResult =  AssemblyBasedCallerUtils.assembleReads(region, givenAlleles, hcArgs, readsHeader, samplesList, logger, referenceReader, assemblyEngine, aligner, !hcArgs.doNotCorrectOverlappingBaseQualities);\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.println(\"\\nThere were \" + untrimmedAssemblyResult.getHaplotypeList().size() + \" haplotypes found. Here they are:\");\n-            for (String haplotype : untrimmedAssemblyResult.getHaplotypeList().stream().map(haplotype -> haplotype.toString()).sorted().collect(Collectors.toList())) {\n-                assemblyDebugOutStream.println(haplotype);\n+            try {\n+                assemblyDebugOutStream.write(\"\\nThere were \" + untrimmedAssemblyResult.getHaplotypeList().size() + \" haplotypes found. Here they are:\");\n+                for (String haplotype : untrimmedAssemblyResult.getHaplotypeList().stream().map(haplotype -> haplotype.toString()).sorted().collect(Collectors.toList())) {\n+                    assemblyDebugOutStream.write(haplotype);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTYyMQ==", "bodyText": "closingdebug -> closing debug", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516909621", "createdAt": "2020-11-03T19:35:58Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/haplotypecaller/HaplotypeCallerEngine.java", "diffHunk": "@@ -714,7 +718,11 @@ public void shutdown() {\n         }\n \n         if (assemblyDebugOutStream != null) {\n-            assemblyDebugOutStream.close();\n+            try {\n+                assemblyDebugOutStream.close();\n+            } catch (IOException e) {\n+                throw new UserException(\"Error closingdebug output stream\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzA4MA==", "bodyText": "You need to call checkError() after print(), since print() can also set the error flag.", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516913080", "createdAt": "2020-11-03T19:42:19Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,11 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                                if (modelReportStream.checkError()) {\n+                                    throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                                }\n                                 report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzcwNA==", "bodyText": "Also, as noted above the PrintStream constructor internally creates an OutputStreamWriter, which can throw an exception. We should catch that exception and wrap in a UserException", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516913704", "createdAt": "2020-11-03T19:43:31Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -653,10 +655,11 @@ public Object onTraversalSuccess() {\n                     if (goodModel.failedToConverge) {\n                         if (outputModel != null) {\n                             final GATKReport report = writeModelReport(goodModel, null, USE_ANNOTATIONS);\n-                            try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                            try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                                if (modelReportStream.checkError()) {\n+                                    throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                                }\n                                 report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzA4MA=="}, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNDA0MQ==", "bodyText": "Same problems here -- need to call checkError() after print(), not before, and need to handle the exception that can be thrown by the PrintStream constructor", "url": "https://github.com/broadinstitute/gatk/pull/6718#discussion_r516914041", "createdAt": "2020-11-03T19:44:10Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java", "diffHunk": "@@ -680,10 +683,11 @@ public Object onTraversalSuccess() {\n \n                 if (outputModel != null) {\n                     final GATKReport report = writeModelReport(goodModel, badModel, USE_ANNOTATIONS);\n-                    try (final PrintStream modelReportStream = new PrintStream(outputModel)) {\n+                    try (final PrintStream modelReportStream = new PrintStream(outputModel.getOutputStream())) {\n+                        if (modelReportStream.checkError()) {\n+                            throw new UserException.CouldNotCreateOutputFile(outputModel, \"I/O stream error writing to report output\");\n+                        }\n                         report.print(modelReportStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d507ac3aec3aae01f2c1f9a420bf009fea0b485e"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261561db338bebb705046d0e9629805ca6f61dde", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/261561db338bebb705046d0e9629805ca6f61dde", "committedDate": "2020-11-16T16:34:03Z", "message": "GATKPath migration for VCF inputs and outputs. WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f655fc281df34ec0436a8e5b883536be07740bb7", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/f655fc281df34ec0436a8e5b883536be07740bb7", "committedDate": "2020-11-16T16:34:03Z", "message": "GATKPath migration for sample, pedigree files and annotations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb05350ecbe6b4a4e09da3d1369a1197d717bb5", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/dbb05350ecbe6b4a4e09da3d1369a1197d717bb5", "committedDate": "2020-11-16T16:34:04Z", "message": "GATKPath for more tools inputs and outputs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0fba630f5f079d3a5c7fb7824164a86a7784f23", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/d0fba630f5f079d3a5c7fb7824164a86a7784f23", "committedDate": "2020-11-16T16:34:04Z", "message": "Stash temp WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba7bf419c370c58ce08a136afa81a1ee870dcc9d", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/ba7bf419c370c58ce08a136afa81a1ee870dcc9d", "committedDate": "2020-11-16T16:34:04Z", "message": "More updates."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886e360ebfba2ffc79ac86a2317fed6334d1a814", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/886e360ebfba2ffc79ac86a2317fed6334d1a814", "committedDate": "2020-11-16T16:34:04Z", "message": "Update ReferenceUtils."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3613b4df22d3c0b5c36451347c310b72c559078e", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/3613b4df22d3c0b5c36451347c310b72c559078e", "committedDate": "2020-11-16T16:34:04Z", "message": "Repair imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759337d5123ba4287f7ab6ecac869ed8b7f9a2b8", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/759337d5123ba4287f7ab6ecac869ed8b7f9a2b8", "committedDate": "2020-11-16T16:34:04Z", "message": "Fix IOException handling issues raised in code review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b849e2f9b09fba9850b3f61d3f55285697465a46", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/b849e2f9b09fba9850b3f61d3f55285697465a46", "committedDate": "2020-11-16T16:34:04Z", "message": "Fix comment in CNNScoreVariants."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c9c26cec71fe0d4f9d58acc65d6dfab7cfe6d6", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/53c9c26cec71fe0d4f9d58acc65d6dfab7cfe6d6", "committedDate": "2020-11-16T16:34:04Z", "message": "Add GATKPath copy constructor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2239cdb6d27e552f5f41e7a48d8200ada780048", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/c2239cdb6d27e552f5f41e7a48d8200ada780048", "committedDate": "2020-11-16T16:34:04Z", "message": "Update FeatureInput to use the GATKPath copy constructor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f05549bd26d5e88b111baac84a2396eff2253949", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/f05549bd26d5e88b111baac84a2396eff2253949", "committedDate": "2020-11-16T16:34:04Z", "message": "Add serialVersionUID to test code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d07e45ed9141579d7622fc13660295863fd3d38d", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/d07e45ed9141579d7622fc13660295863fd3d38d", "committedDate": "2020-11-16T16:34:04Z", "message": "More code review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a29e32107278e627d5885efede76eac7fc85a18e", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/a29e32107278e627d5885efede76eac7fc85a18e", "committedDate": "2020-11-09T20:37:42Z", "message": "More code review comments."}, "afterCommit": {"oid": "d07e45ed9141579d7622fc13660295863fd3d38d", "author": {"user": {"login": "cmnbroad", "name": "Chris Norman"}}, "url": "https://github.com/broadinstitute/gatk/commit/d07e45ed9141579d7622fc13660295863fd3d38d", "committedDate": "2020-11-16T16:34:04Z", "message": "More code review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4ODMxNzY5", "url": "https://github.com/broadinstitute/gatk/pull/6718#pullrequestreview-538831769", "createdAt": "2020-11-25T20:38:04Z", "commit": {"oid": "d07e45ed9141579d7622fc13660295863fd3d38d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2677, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}