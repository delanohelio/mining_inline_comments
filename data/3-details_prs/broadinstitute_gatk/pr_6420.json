{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjgxMzQ4", "number": 6420, "title": "wrote getPairOrientation method for GATKRead", "bodyText": "Closes #1550.  @SHuang-Broad do you still want this?", "createdAt": "2020-01-27T20:13:39Z", "url": "https://github.com/broadinstitute/gatk/pull/6420", "merged": true, "mergeCommit": {"oid": "cecf85cdc603ec508b150828eebf1621a28a686d"}, "closed": true, "closedAt": "2020-02-25T16:05:36Z", "author": {"login": "davidbenjamin"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-ihdQgH2gAyMzY3NjgxMzQ4OjJiNGU1NzRkMmM3OTczYWRhMjVhN2Y3ZDNmNGNhMWI4MmRmZDYwOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHzAU4AH2gAyMzY3NjgxMzQ4OmI5MDg3YWM2YzYzNzM2M2FkM2UwYTRiN2U2NDE2ZTRiZTdkNzMzZmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094", "committedDate": "2020-01-27T20:11:33Z", "message": "wrote getPairOrientation method for GATKRead"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDAxMTY1", "url": "https://github.com/broadinstitute/gatk/pull/6420#pullrequestreview-360401165", "createdAt": "2020-02-18T14:52:29Z", "commit": {"oid": "2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo1MjoyOVrOFrFWUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowNjoxOVrOFrF7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyMDcyMw==", "bodyText": "Do you mind moving this after the validation?", "url": "https://github.com/broadinstitute/gatk/pull/6420#discussion_r380720723", "createdAt": "2020-02-18T14:52:29Z", "author": {"login": "SHuang-Broad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/read/GATKRead.java", "diffHunk": "@@ -600,6 +601,24 @@ default int numCigarElements(){\n      */\n     void setIsSupplementaryAlignment( final boolean isSupplementaryAlignment );\n \n+    /**\n+     * Computes the pair orientation\n+     * @throws IllegalArgumentException If the read is not paired, or if either read or mate is unmapped\n+     */\n+    default SamPairUtil.PairOrientation getPairOrientation() {\n+        final boolean readIsOnReverseStrand = isReverseStrand();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNTQ1Mw==", "bodyText": "I believe it should 201, but meh...", "url": "https://github.com/broadinstitute/gatk/pull/6420#discussion_r380725453", "createdAt": "2020-02-18T14:59:23Z", "author": {"login": "SHuang-Broad"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/read/GATKReadAdaptersUnitTest.java", "diffHunk": "@@ -1378,5 +1378,95 @@ public void testUnmappedUnpairedDistinctionmates(final GATKRead read, final bool\n         Assert.assertEquals(read.mateIsUnplaced(), true);\n \n         read.convertToSAMRecord(hg19Header).setReadUnmappedFlag(false); // have to unset unmapped to allow SAMRecord to show its underlying data\n-        Assert.assertEquals(read.convertToSAMRecord(hg19Header).getMateAlignmentStart(), SAMRecord.NO_ALIGNMENT_START); }\n+        Assert.assertEquals(read.convertToSAMRecord(hg19Header).getMateAlignmentStart(), SAMRecord.NO_ALIGNMENT_START);\n+    }\n+\n+    @DataProvider(name = \"pair_orientation_failures\")\n+    public Object[][] pairOrientationFailures() {\n+        final GATKRead unpairedRead = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        unpairedRead.setIsPaired(false);\n+\n+        final GATKRead unmappedRead = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        unmappedRead.setIsPaired(true);\n+        unmappedRead.setIsUnmapped();\n+\n+        final GATKRead mateUnmappedRead = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        mateUnmappedRead.setIsPaired(true);\n+        mateUnmappedRead.setIsUnmapped();\n+\n+        return new Object[][]{\n+                {unpairedRead},\n+                {unmappedRead},\n+                {mateUnmappedRead},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"pair_orientation_failures\", expectedExceptions = IllegalArgumentException.class)\n+    public void testGetPairOrientationFailures(final GATKRead read) {\n+        final SamPairUtil.PairOrientation pairOrientation = read.getPairOrientation();\n+    }\n+\n+    @DataProvider(name = \"pair_orientation\")\n+    public Object[][] pairOrientation() {\n+        final GATKRead forwardStrandInnie = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        forwardStrandInnie.setIsPaired(true);\n+        forwardStrandInnie.setIsReverseStrand(false);\n+        forwardStrandInnie.setMateIsReverseStrand(true);\n+        forwardStrandInnie.setPosition(new SimpleInterval(\"1\", 100, 200));\n+        forwardStrandInnie.setMatePosition(new SimpleInterval(\"1\", 200, 300));\n+        forwardStrandInnie.setFragmentLength(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMDEzOA==", "bodyText": "May I also suggest adding test cases:\n\nmates mapped to different chromosomes\nOf course if you believe getting pair orientation from such mate pairs to be non-sense, then it should be move to the test cases expecting exceptions.", "url": "https://github.com/broadinstitute/gatk/pull/6420#discussion_r380730138", "createdAt": "2020-02-18T15:06:19Z", "author": {"login": "SHuang-Broad"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/read/GATKReadAdaptersUnitTest.java", "diffHunk": "@@ -1378,5 +1378,95 @@ public void testUnmappedUnpairedDistinctionmates(final GATKRead read, final bool\n         Assert.assertEquals(read.mateIsUnplaced(), true);\n \n         read.convertToSAMRecord(hg19Header).setReadUnmappedFlag(false); // have to unset unmapped to allow SAMRecord to show its underlying data\n-        Assert.assertEquals(read.convertToSAMRecord(hg19Header).getMateAlignmentStart(), SAMRecord.NO_ALIGNMENT_START); }\n+        Assert.assertEquals(read.convertToSAMRecord(hg19Header).getMateAlignmentStart(), SAMRecord.NO_ALIGNMENT_START);\n+    }\n+\n+    @DataProvider(name = \"pair_orientation_failures\")\n+    public Object[][] pairOrientationFailures() {\n+        final GATKRead unpairedRead = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        unpairedRead.setIsPaired(false);\n+\n+        final GATKRead unmappedRead = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        unmappedRead.setIsPaired(true);\n+        unmappedRead.setIsUnmapped();\n+\n+        final GATKRead mateUnmappedRead = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        mateUnmappedRead.setIsPaired(true);\n+        mateUnmappedRead.setIsUnmapped();\n+\n+        return new Object[][]{\n+                {unpairedRead},\n+                {unmappedRead},\n+                {mateUnmappedRead},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"pair_orientation_failures\", expectedExceptions = IllegalArgumentException.class)\n+    public void testGetPairOrientationFailures(final GATKRead read) {\n+        final SamPairUtil.PairOrientation pairOrientation = read.getPairOrientation();\n+    }\n+\n+    @DataProvider(name = \"pair_orientation\")\n+    public Object[][] pairOrientation() {\n+        final GATKRead forwardStrandInnie = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        forwardStrandInnie.setIsPaired(true);\n+        forwardStrandInnie.setIsReverseStrand(false);\n+        forwardStrandInnie.setMateIsReverseStrand(true);\n+        forwardStrandInnie.setPosition(new SimpleInterval(\"1\", 100, 200));\n+        forwardStrandInnie.setMatePosition(new SimpleInterval(\"1\", 200, 300));\n+        forwardStrandInnie.setFragmentLength(200);\n+\n+        final GATKRead reverseStrandInnie = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        reverseStrandInnie.setIsPaired(true);\n+        reverseStrandInnie.setIsReverseStrand(true);\n+        reverseStrandInnie.setMateIsReverseStrand(false);\n+        reverseStrandInnie.setPosition(new SimpleInterval(\"1\", 200, 300));\n+        reverseStrandInnie.setMatePosition(new SimpleInterval(\"1\", 100, 200));\n+        reverseStrandInnie.setFragmentLength(200);\n+\n+        final GATKRead forwardStrandOutie = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        forwardStrandOutie.setIsPaired(true);\n+        forwardStrandOutie.setIsReverseStrand(false);\n+        forwardStrandOutie.setMateIsReverseStrand(true);\n+        forwardStrandOutie.setPosition(new SimpleInterval(\"1\", 200, 300));\n+        forwardStrandOutie.setMatePosition(new SimpleInterval(\"1\", 100, 200));\n+        forwardStrandOutie.setFragmentLength(-200);\n+\n+        final GATKRead reverseStrandOutie = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        reverseStrandOutie.setIsPaired(true);\n+        reverseStrandOutie.setIsReverseStrand(true);\n+        reverseStrandOutie.setMateIsReverseStrand(false);\n+        reverseStrandOutie.setPosition(new SimpleInterval(\"1\", 100, 200));\n+        reverseStrandOutie.setMatePosition(new SimpleInterval(\"1\", 200, 300));\n+        reverseStrandOutie.setFragmentLength(-200);\n+\n+        final GATKRead forwardStrandTandem = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        forwardStrandTandem.setIsPaired(true);\n+        forwardStrandTandem.setIsReverseStrand(false);\n+        forwardStrandTandem.setMateIsReverseStrand(false);\n+        forwardStrandTandem.setPosition(new SimpleInterval(\"1\", 100, 200));\n+        forwardStrandTandem.setMatePosition(new SimpleInterval(\"1\", 200, 300));\n+\n+        final GATKRead reverseStrandTandem = ArtificialReadUtils.createArtificialRead(\"100M\");\n+        reverseStrandTandem.setIsPaired(true);\n+        reverseStrandTandem.setIsReverseStrand(true);\n+        reverseStrandTandem.setMateIsReverseStrand(true);\n+        reverseStrandTandem.setPosition(new SimpleInterval(\"1\", 100, 200));\n+        reverseStrandTandem.setMatePosition(new SimpleInterval(\"1\", 200, 300));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7af6dc2c7eb528cbaa76c55c03dd84e05aad34bd", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/7af6dc2c7eb528cbaa76c55c03dd84e05aad34bd", "committedDate": "2020-02-19T04:11:57Z", "message": "edits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjg5NjUw", "url": "https://github.com/broadinstitute/gatk/pull/6420#pullrequestreview-363689650", "createdAt": "2020-02-24T20:48:10Z", "commit": {"oid": "2b4e574d2c7973ada25a7f7d3f4ca1b82dfd6094"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9087ac6c637363ad3e0a4b7e6416e4be7d733fd", "author": {"user": {"login": "davidbenjamin", "name": "David Benjamin"}}, "url": "https://github.com/broadinstitute/gatk/commit/b9087ac6c637363ad3e0a4b7e6416e4be7d733fd", "committedDate": "2020-02-25T14:29:04Z", "message": "mate on different contig"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2730, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}