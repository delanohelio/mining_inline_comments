{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjUzMzAw", "number": 6757, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyOTowMVrOEynUIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoyMjo1NlrOEyn6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTA4Mzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyOTowMVrOHpWvfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyOTowMVrOHpWvfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNjI3MQ==", "bodyText": "END= annotation is not exclusive of hom-ref blocks, right? I guess within the context this method is used it is though. Perhaps can you add a comment indicating so.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513126271", "createdAt": "2020-10-28T01:29:01Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -256,7 +266,7 @@ private VariantContext regenotypeVC(final VariantContext originalVC) {\n     }\n \n     private boolean isHomRefBlock(final VariantContext result) {\n-        return result.getLog10PError() == VariantContext.NO_LOG10_PERROR;\n+        return result.hasAttribute(VCFConstants.END_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTEwMDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTozNzoyM1rOHpW4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTozNzoyM1rOHpW4Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyODU1MQ==", "bodyText": "Shouldn't hasGQ be called before any getGQ?  Shouldn't it even fail if not?\nPerhaps you could force rgpThreshold to be 0 or greater in that case the == 0 is unnecessary. Fail if it is no in [0.0 ... MAX_VALUE] (so negatives, NaN and Infinities would fail).\nAlso based on the description of rgpThreshold sounds like these comparisons should < rather than <=. Perhaps the doc of the argument should be changed.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513128551", "createdAt": "2020-10-28T01:37:23Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -272,10 +282,34 @@ private boolean isHomRefCall(final VariantContext result) {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0)) {\n+        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTEwNjEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTo0MDo1MlrOHpW7wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTo0MDo1MlrOHpW7wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyOTQwOA==", "bodyText": "Perhaps the warning message should say that we are using GQ in leu.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513129408", "createdAt": "2020-10-28T01:40:52Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -272,10 +282,34 @@ private boolean isHomRefCall(final VariantContext result) {\n \n     private VariantContext filterHomRefBlock(final VariantContext result) {\n         final Genotype genotype = result.getGenotype(0);\n-        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0)) {\n+        if (dropLowQuals && (genotype.getGQ() <= rgqThreshold || genotype.getGQ() == 0 || !genotype.hasGQ())) {\n             return null;\n         }\n         else if (genotype.isCalled() && genotype.isHomRef()) {\n+            if (!genotype.hasPL()) {\n+                if (genotype.hasGQ()) {\n+                    logger.warn(\"PL is missing for hom ref genotype at at least one position for sample \" + genotype.getSampleName() + \": \" + result.getContig() + \":\" + result.getStart() +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTEyMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTo0OTo1N1rOHpXFLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTo0OTo1N1rOHpXFLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzMTgyMg==", "bodyText": "Should this be an error instead of a warning?\nActually it really should as below there is code that clearly depends on it being a diploid and even may result in exception if not. Error makes more sense.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513131822", "createdAt": "2020-10-28T01:49:57Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCF.java", "diffHunk": "@@ -190,7 +198,9 @@ public void onTraversalStart() {\n         }\n         vcfWriter.writeHeader(new VCFHeader(headerLines, inputHeader.getGenotypeSamples()));\n \n-        logger.info(\"Notice that the -ploidy parameter is ignored in \" + getClass().getSimpleName() + \" tool as this is tool assumes a diploid sample\");\n+        if (genotypeArgs.samplePloidy != PLOIDY_TWO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTE3MTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoxNzowNFrOHpXh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoxNzowNFrOHpXh5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTE3Mg==", "bodyText": "I would compact the two last elses as minGQ = minGQ == -1 ? genotype.getGQ() : Math.min(...);", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513139172", "createdAt": "2020-10-28T02:17:04Z", "author": {"login": "vruano"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlock.java", "diffHunk": "@@ -124,6 +128,15 @@ public void add(final int pos, final int newEnd, final Genotype genotype) {\n                 }\n             }\n         }\n+        if (minPPs != null) {\n+            minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPPs);\n+        } else if (minPLs != null) {\n+            minGQ = GATKVariantContextUtils.calculateGQFromPLs(minPLs);\n+        } else if (minGQ == -1) {\n+            minGQ = genotype.getGQ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTE3NDgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoxOToxNFrOHpXkBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoxOToxNFrOHpXkBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzOTcxNg==", "bodyText": "This test seems a bit weak.... can you do a more through test e.g. the unaffected blocks should be in the same order and unchanged... etc.", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513139716", "createdAt": "2020-10-28T02:19:14Z", "author": {"login": "vruano"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/variantutils/ReblockGVCFIntegrationTest.java", "diffHunk": "@@ -185,4 +185,19 @@ public void testMQHeadersAreUpdated() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testReReblocking() {\n+        final File input = new File(getToolTestDataDir() + \"alreadyReblocked.chr22snippet.vcf\");\n+        final File output = createTempFile(\"rereblockedgvcf\", \".vcf\");\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        args.add(\"V\", input)\n+                .addOutput(output);\n+        runCommandLine(args);\n+\n+        Pair<VCFHeader, List<VariantContext>> inputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(input.getAbsolutePath());\n+        Pair<VCFHeader, List<VariantContext>> outputVCs = VariantContextTestUtils.readEntireVCFIntoMemory(output.getAbsolutePath());\n+\n+        Assert.assertTrue(inputVCs.getRight().size() > outputVCs.getRight().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTE4MTUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoyMjo1NlrOHpXnxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoyMjo1NlrOHpXnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MDY3Ng==", "bodyText": "Looks a bit weak of a test. Anything else that can be tested", "url": "https://github.com/broadinstitute/gatk/pull/6757#discussion_r513140676", "createdAt": "2020-10-28T02:22:56Z", "author": {"login": "vruano"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/variant/writers/HomRefBlockUnitTest.java", "diffHunk": "@@ -110,6 +110,22 @@ public void testCantAddDifferentNumbersOfPls(){\n         band.add(vc.getStart() + 1, getValidGenotypeBuilder().PL(new int[] {1,2,4,5,6}).make() );\n     }\n \n+    @Test\n+    public void testNoPLs() {\n+        //add VC with no PLs to block with PLs\n+        final VariantContext vc = getVariantContext();\n+        final GVCFBlock band = getHomRefBlock(getVariantContext());\n+        band.add(vc.getStart(), getValidGenotypeBuilder().make() );\n+        band.add(vc.getStart() + 1, getValidGenotypeBuilder().noPL().make());\n+        Assert.assertTrue(band.getSize() == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613525738733233e46f44532ad3be73ec4ff3560"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1034, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}