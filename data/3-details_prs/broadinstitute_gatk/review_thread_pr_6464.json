{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDQ1MDg0", "number": 6464, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1NzoyOVrODkDuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1OTo0M1rODkDu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM2NDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1NzoyOVrOFwMH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNTo0NFrOFwrjMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw==", "bodyText": "Where does the name is come from?  What about sbc, channel, or rawChannel?", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074603", "createdAt": "2020-03-01T03:57:29Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the\n+     * original channel.\n+     * @param cloudPrefetchBuffer the prefetcher buffer size in MB\n+     */\n+    public static Function<SeekableByteChannel, SeekableByteChannel> getPrefetchingWrapper(final int cloudPrefetchBuffer) {\n+        return cloudPrefetchBuffer > 0 ? is -> addPrefetcher(cloudPrefetchBuffer, is) : Utils.identityFunction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1Njc4Mg==", "bodyText": "that's a good question.... I don't remember where is came from...", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386456782", "createdAt": "2020-03-02T15:21:24Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the\n+     * original channel.\n+     * @param cloudPrefetchBuffer the prefetcher buffer size in MB\n+     */\n+    public static Function<SeekableByteChannel, SeekableByteChannel> getPrefetchingWrapper(final int cloudPrefetchBuffer) {\n+        return cloudPrefetchBuffer > 0 ? is -> addPrefetcher(cloudPrefetchBuffer, is) : Utils.identityFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw=="}, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjMyMQ==", "bodyText": "It depends on what the meaning of \"is\" is.", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386472321", "createdAt": "2020-03-02T15:44:59Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the\n+     * original channel.\n+     * @param cloudPrefetchBuffer the prefetcher buffer size in MB\n+     */\n+    public static Function<SeekableByteChannel, SeekableByteChannel> getPrefetchingWrapper(final int cloudPrefetchBuffer) {\n+        return cloudPrefetchBuffer > 0 ? is -> addPrefetcher(cloudPrefetchBuffer, is) : Utils.identityFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw=="}, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTQ4OA==", "bodyText": "rawChannel is a good option.", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386589488", "createdAt": "2020-03-02T19:05:44Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the\n+     * original channel.\n+     * @param cloudPrefetchBuffer the prefetcher buffer size in MB\n+     */\n+    public static Function<SeekableByteChannel, SeekableByteChannel> getPrefetchingWrapper(final int cloudPrefetchBuffer) {\n+        return cloudPrefetchBuffer > 0 ? is -> addPrefetcher(cloudPrefetchBuffer, is) : Utils.identityFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYwMw=="}, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM2NDI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1Nzo1OVrOFwMH_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNTo1NVrOFwrjlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYyMQ==", "bodyText": "\"it's\" with apostrophe", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074621", "createdAt": "2020-03-01T03:57:59Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTU5MA==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386589590", "createdAt": "2020-03-02T19:05:55Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {\n+        try {\n+            return SeekableByteChannelPrefetcher.addPrefetcher(bufferSizeMB, channel);\n+        } catch (final IOException ex) {\n+            throw new GATKException(\"Unable to initialize the prefetcher: \" + ex);\n+        }\n+    }\n+\n+    /**\n+     * Creates a wrapping function which adds a prefetcher if the buffer size is > 0 if its <= 0 then this wrapper returns the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDYyMQ=="}, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM2NDU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1ODo0MlrOFwMIHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1ODo0MlrOFwMIHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY1Mw==", "bodyText": "final arguments", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074653", "createdAt": "2020-03-01T03:58:42Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -429,4 +433,26 @@ public static CloudStorageConfiguration getCloudStorageConfiguration(int maxReop\n         // 2. Create GCS filesystem object with those credentials\n         return CloudStorageFileSystem.forBucket(bucket, CloudStorageConfiguration.DEFAULT, storageOptions);\n     }\n+\n+    /**\n+     * Wrap a SeekableByteChannel with a prefetcher.\n+     * @param bufferSizeMB buffer size in mb which the prefetcher should fetch ahead.\n+     * @param channel a channel that needs prefetching\n+     */\n+    public static SeekableByteChannel addPrefetcher(int bufferSizeMB, SeekableByteChannel channel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM2NDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1OToxNFrOFwMIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNzoyOFrOFwrmpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY3Mg==", "bodyText": "I think you can splurge and make this BUFFER_SIZE_MB", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074672", "createdAt": "2020-03-01T03:59:14Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -35,7 +35,7 @@\n     private final boolean removeHeader = true;\n \n     class ReadsIterator implements CloseableIterator<SAMRecord> {\n-        private final static int BUFSIZE = 200 * 1024 * 1024;\n+        private final static int BUFSIZE_MB = 200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDM3NQ==", "bodyText": "done, although we should delete that class in a separate pr", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386590375", "createdAt": "2020-03-02T19:07:28Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -35,7 +35,7 @@\n     private final boolean removeHeader = true;\n \n     class ReadsIterator implements CloseableIterator<SAMRecord> {\n-        private final static int BUFSIZE = 200 * 1024 * 1024;\n+        private final static int BUFSIZE_MB = 200;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY3Mg=="}, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTM2NDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo1OTo0M1rOFwMIOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNzo0N1rOFwrnUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY4MA==", "bodyText": "It can't hurt to make this channel.", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386074680", "createdAt": "2020-03-01T03:59:43Z", "author": {"login": "davidbenjamin"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -47,8 +47,7 @@ public ReadsIterator() throws IOException {\n             SeekableStream indexInMemory = new ByteArraySeekableStream(indexData);\n             // set high-level retries to deal with servers that might be temporarily overloaded\n             // while we're reading a very long file from them.\n-            SeekableByteChannelPrefetcher chan = new SeekableByteChannelPrefetcher(\n-                Files.newByteChannel(fpath), BUFSIZE);\n+            SeekableByteChannel chan = BucketUtils.addPrefetcher( BUFSIZE_MB, Files.newByteChannel(fpath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDU0Ng==", "bodyText": "done", "url": "https://github.com/broadinstitute/gatk/pull/6464#discussion_r386590546", "createdAt": "2020-03-02T19:07:47Z", "author": {"login": "lbergelson"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/nio/ReadsIterable.java", "diffHunk": "@@ -47,8 +47,7 @@ public ReadsIterator() throws IOException {\n             SeekableStream indexInMemory = new ByteArraySeekableStream(indexData);\n             // set high-level retries to deal with servers that might be temporarily overloaded\n             // while we're reading a very long file from them.\n-            SeekableByteChannelPrefetcher chan = new SeekableByteChannelPrefetcher(\n-                Files.newByteChannel(fpath), BUFSIZE);\n+            SeekableByteChannel chan = BucketUtils.addPrefetcher( BUFSIZE_MB, Files.newByteChannel(fpath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDY4MA=="}, "originalCommit": {"oid": "f30f5b42bb908a24fbd54374de10e99340ce6ac2"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1108, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}