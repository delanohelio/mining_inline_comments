{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTE5NjAw", "number": 6800, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNTozM1rOEhURWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MDoxMVrOEkKILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzcwNTg1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNTozM1rOHOkMRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToyNzo0MVrOHPa7ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTA3OQ==", "bodyText": "Can you add a new section to the README on WDL generation? For now, just the essential instructions on how to run it, anything users might need to know about the output WDLs, and a section for developers on how to write the annotations (including examples for BAM and FASTA inputs/outputs, and also an example of a directory output).", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485035079", "createdAt": "2020-09-08T16:05:33Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNjI3Nw==", "bodyText": "Done. I put the build instructions in the readme, along with a link to the wiki article on the annotations. I'm not sure what you mean by \"an example of a directory output\". There isn't anything special required for WDL or @Argument annotations for an input or output that is a directory - its all in the code used by the tool to process it.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485706277", "createdAt": "2020-09-09T15:32:57Z", "author": {"login": "cmnbroad"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTA3OQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3NTg5Ng==", "bodyText": "If I have a tool output that is a directory, I need to know how to write the Workflow annotation for it. If there's nothing special required, the docs should make that clear with an example.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485775896", "createdAt": "2020-09-09T16:57:16Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTA3OQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMTg3Nw==", "bodyText": "Updated in https://github.com/broadinstitute/gatk/wiki/How-to-Prepare-a-GATK-tool-for-WDL-Auto-Generation.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485931877", "createdAt": "2020-09-09T21:27:41Z", "author": {"login": "cmnbroad"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTA3OQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzcwODgwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNjoyMVrOHOkOFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1MTowMVrOHPFxcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTU0Mw==", "bodyText": "Is this a warning that you can recover from, or should it be a fatal error?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485035543", "createdAt": "2020-09-08T16:06:21Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations\n+    if (System.getenv('CROMWELL_JAR') == null || System.getenv('WOMTOOL_JAR') == null) {\n+        logger.warn(\"Running this task requires the CROMWELL_JAR and WOMTOOL_JAR environment variables to be set\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NTI2Nw==", "bodyText": "Not recoverable, so I made it throw. I had to move it into a doFirst closure though so it only happens when this task is actually executed - it probably should have been that way anyway.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485585267", "createdAt": "2020-09-09T12:51:01Z", "author": {"login": "cmnbroad"}, "path": "build.gradle", "diffHunk": "@@ -788,10 +788,16 @@ task gatkWDLGen(type: Javadoc, dependsOn: classes) {\n \n     // the wdl doclet will populate the test JSON input files with the name of a dummy\n     // file in this location, in order to satisfy cromwell's attempts to localize inputs and outputs\n-    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\")\n+    options.addStringOption(\"build-dir\", System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath())\n }\n \n task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n+    // running this task requires a local cromwell installation, with environment variables CROMWELL_JAR,\n+    // WOMTOOL_JAR set to the jar locations\n+    if (System.getenv('CROMWELL_JAR') == null || System.getenv('WOMTOOL_JAR') == null) {\n+        logger.warn(\"Running this task requires the CROMWELL_JAR and WOMTOOL_JAR environment variables to be set\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNTU0Mw=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzc0Nzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjoxNTo1NFrOHOkmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NDo1NlrOHOppQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA==", "bodyText": "Fix indentation here", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485041670", "createdAt": "2020-09-08T16:15:54Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "diffHunk": "@@ -223,12 +223,12 @@ public Object instanceMain(final String[] argv) {\n         return null;\n     }\n \n-    /**\n-     * Parse arguments and initialize any values annotated with {@link Argument}\n-     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-     * @throws CommandLineException if command line validation fails\n-     */\n-    protected final boolean parseArgs(final String[] argv) {\n+        /**\n+         * Parse arguments and initialize any values annotated with {@link Argument}\n+         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+         * @throws CommandLineException if command line validation fails\n+         */\n+        protected boolean parseArgs(final String[] argv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTk0OA==", "bodyText": "Also, I assume you removed final because you actually had to override this method?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485041948", "createdAt": "2020-09-08T16:16:22Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "diffHunk": "@@ -223,12 +223,12 @@ public Object instanceMain(final String[] argv) {\n         return null;\n     }\n \n-    /**\n-     * Parse arguments and initialize any values annotated with {@link Argument}\n-     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-     * @throws CommandLineException if command line validation fails\n-     */\n-    protected final boolean parseArgs(final String[] argv) {\n+        /**\n+         * Parse arguments and initialize any values annotated with {@link Argument}\n+         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+         * @throws CommandLineException if command line validation fails\n+         */\n+        protected boolean parseArgs(final String[] argv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDQxOQ==", "bodyText": "Yes, but I wound up not needing to do so. Restored the final and indentation fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485124419", "createdAt": "2020-09-08T18:44:56Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/CommandLineProgram.java", "diffHunk": "@@ -223,12 +223,12 @@ public Object instanceMain(final String[] argv) {\n         return null;\n     }\n \n-    /**\n-     * Parse arguments and initialize any values annotated with {@link Argument}\n-     * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n-     * @throws CommandLineException if command line validation fails\n-     */\n-    protected final boolean parseArgs(final String[] argv) {\n+        /**\n+         * Parse arguments and initialize any values annotated with {@link Argument}\n+         * @return true if program should be executed, false if an information only argument like {@link SpecialArgumentsCollection#HELP_FULLNAME} was specified\n+         * @throws CommandLineException if command line validation fails\n+         */\n+        protected boolean parseArgs(final String[] argv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MTY3MA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzc1NDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjoxNzoyN1rOHOkpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1NDozMFrOHOp9ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MjYyMQ==", "bodyText": "Will the Picard command-line validation recognize both legacy and POSIX syntax?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485042621", "createdAt": "2020-09-08T16:17:27Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java", "diffHunk": "@@ -17,6 +20,15 @@ public PicardCommandLineProgramExecutor(final picard.cmdline.CommandLineProgram\n         this.picardCommandLineProgram = picardCommandLineProgram;\n     }\n \n+    /**\n+     * Validate command line arguments.\n+     * @return true if program args are valid, otherwise false\n+     * @throws CommandLineException if command line argument validation fails\n+     */\n+    protected boolean validateArgs(final String[] argv) {\n+        return picardCommandLineProgram.getCommandLineParser().parseArguments(System.out, argv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTYzNQ==", "bodyText": "No, but only because we never use the legacy parser in gatk. There was a PR a few weeks ago that changed that, but those changes were abandoned.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485129635", "createdAt": "2020-09-08T18:54:30Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/PicardCommandLineProgramExecutor.java", "diffHunk": "@@ -17,6 +20,15 @@ public PicardCommandLineProgramExecutor(final picard.cmdline.CommandLineProgram\n         this.picardCommandLineProgram = picardCommandLineProgram;\n     }\n \n+    /**\n+     * Validate command line arguments.\n+     * @return true if program args are valid, otherwise false\n+     * @throws CommandLineException if command line argument validation fails\n+     */\n+    protected boolean validateArgs(final String[] argv) {\n+        return picardCommandLineProgram.getCommandLineParser().parseArguments(System.out, argv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0MjYyMQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzc2NDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjoxOTo1OVrOHOkvwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowMDozOFrOHOsDsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0NDE2MQ==", "bodyText": "The annotations look a lot better than before!", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485044161", "createdAt": "2020-09-08T16:19:59Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java", "diffHunk": "@@ -11,8 +11,8 @@\n public final class OptionalReferenceInputArgumentCollection extends ReferenceInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n \n-    @WorkflowResource(input=true, output=false, companionResources = {\"referenceDictionary\", \"referenceIndex\"})\n     @Argument(fullName = StandardArgumentDefinitions.REFERENCE_LONG_NAME, shortName = StandardArgumentDefinitions.REFERENCE_SHORT_NAME, doc = \"Reference sequence\", optional = true)\n+    @WorkflowInput(requiredCompanions = { StandardArgumentDefinitions.REFERENCE_INDEX_COMPANION, StandardArgumentDefinitions.REFERENCE_DICTIONARY_COMPANION})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2Mzk1NA==", "bodyText": "Yeah, they do.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485163954", "createdAt": "2020-09-08T20:00:38Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/OptionalReferenceInputArgumentCollection.java", "diffHunk": "@@ -11,8 +11,8 @@\n public final class OptionalReferenceInputArgumentCollection extends ReferenceInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n \n-    @WorkflowResource(input=true, output=false, companionResources = {\"referenceDictionary\", \"referenceIndex\"})\n     @Argument(fullName = StandardArgumentDefinitions.REFERENCE_LONG_NAME, shortName = StandardArgumentDefinitions.REFERENCE_SHORT_NAME, doc = \"Reference sequence\", optional = true)\n+    @WorkflowInput(requiredCompanions = { StandardArgumentDefinitions.REFERENCE_INDEX_COMPANION, StandardArgumentDefinitions.REFERENCE_DICTIONARY_COMPANION})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0NDE2MQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzgwNzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMDo1NVrOHOlJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDowNTozN1rOHOsNIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MDgzMQ==", "bodyText": "It might be better to have these \"companion\" constants grouped into a separate section in this file, with a comment explaining that these are not argument names, but string constants used in the Workflow annotations.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485050831", "createdAt": "2020-09-08T16:30:55Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java", "diffHunk": "@@ -9,8 +9,12 @@\n     private StandardArgumentDefinitions(){}\n \n     public static final String INPUT_LONG_NAME = \"input\";\n+    public static final String INPUT_INDEX_COMPANION = INPUT_LONG_NAME + \"Index\";\n     public static final String OUTPUT_LONG_NAME = \"output\";\n+    public static final String OUTPUT_INDEX_COMPANION = OUTPUT_LONG_NAME + \"Index\";\n     public static final String REFERENCE_LONG_NAME = \"reference\";\n+    public static final String REFERENCE_INDEX_COMPANION = REFERENCE_LONG_NAME + \"Index\";\n+    public static final String REFERENCE_DICTIONARY_COMPANION = REFERENCE_LONG_NAME + \"Dictionary\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2NjM2OQ==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485166369", "createdAt": "2020-09-08T20:05:37Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/StandardArgumentDefinitions.java", "diffHunk": "@@ -9,8 +9,12 @@\n     private StandardArgumentDefinitions(){}\n \n     public static final String INPUT_LONG_NAME = \"input\";\n+    public static final String INPUT_INDEX_COMPANION = INPUT_LONG_NAME + \"Index\";\n     public static final String OUTPUT_LONG_NAME = \"output\";\n+    public static final String OUTPUT_INDEX_COMPANION = OUTPUT_LONG_NAME + \"Index\";\n     public static final String REFERENCE_LONG_NAME = \"reference\";\n+    public static final String REFERENCE_INDEX_COMPANION = REFERENCE_LONG_NAME + \"Index\";\n+    public static final String REFERENCE_DICTIONARY_COMPANION = REFERENCE_LONG_NAME + \"Dictionary\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MDgzMQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzkxOTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowMTowNVrOHOmN4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDoxNDoyMlrOHOseIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODI1Nw==", "bodyText": "Leave some space between the serialVersionUID and this annotation for readability. Also, you should pick a canonical ordering for @Argument and WorkflowInput and stick to it consistently. Above you had @Argument coming first, but here you have WorkflowInput first.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485068257", "createdAt": "2020-09-08T17:01:05Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java", "diffHunk": "@@ -13,6 +14,7 @@\n  */\n public final class RequiredReadInputArgumentCollection extends ReadInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n+    @WorkflowInput(optionalCompanions = StandardArgumentDefinitions.INPUT_INDEX_COMPANION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MDcyMA==", "bodyText": "Done. I did try to use the same ordering everywhere but I guess I missed this one - I don't see any others.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485170720", "createdAt": "2020-09-08T20:14:22Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/cmdline/argumentcollections/RequiredReadInputArgumentCollection.java", "diffHunk": "@@ -13,6 +14,7 @@\n  */\n public final class RequiredReadInputArgumentCollection extends ReadInputArgumentCollection {\n     private static final long serialVersionUID = 1L;\n+    @WorkflowInput(optionalCompanions = StandardArgumentDefinitions.INPUT_INDEX_COMPANION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2ODI1Nw=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk0NzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzowODo0NlrOHOmezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1ODowMVrOHOqFbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjU4OQ==", "bodyText": "What did we end up going with for the default memory usage?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485072589", "createdAt": "2020-09-08T17:08:46Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java", "diffHunk": "@@ -19,10 +21,12 @@\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @ExperimentalFeature\n+@WorkflowProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTYzMQ==", "bodyText": "Its 4G (IIRC, I had previously incorrectly said that it was 1G, but it was and still is 4G). We still might want to find away to customize that for Picard.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485131631", "createdAt": "2020-09-08T18:58:01Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/AddOriginalAlignmentTags.java", "diffHunk": "@@ -19,10 +21,12 @@\n         programGroup = ReadDataManipulationProgramGroup.class\n )\n @ExperimentalFeature\n+@WorkflowProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3MjU4OQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk2MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxMjo0N1rOHOmneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1ODo0MFrOHOqGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDgxMA==", "bodyText": "An output directory with multiple files is ok here?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485074810", "createdAt": "2020-09-08T17:12:47Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java", "diffHunk": "@@ -77,6 +80,7 @@\n             fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             doc = \"The directory to output SAM/BAM/CRAM files.\"\n     )\n+    @WorkflowOutput\n     public GATKPath OUTPUT_DIRECTORY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMTk4MA==", "bodyText": "Yes, I manually tested this on one of the tools to make sure it works - I think it was this one.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485131980", "createdAt": "2020-09-08T18:58:40Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/SplitReads.java", "diffHunk": "@@ -77,6 +80,7 @@\n             fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n             doc = \"The directory to output SAM/BAM/CRAM files.\"\n     )\n+    @WorkflowOutput\n     public GATKPath OUTPUT_DIRECTORY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3NDgxMA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk4MjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxODo1MFrOHOm0Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowNDowMVrOHOqSTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODA0Ng==", "bodyText": "If you had an optional input to a tool, how would you express that in the current framework?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485078046", "createdAt": "2020-09-08T17:18:50Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java", "diffHunk": "@@ -84,6 +89,7 @@\n      * created on the same input data.\n      */\n     @Argument(fullName=StandardArgumentDefinitions.BQSR_TABLE_LONG_NAME, shortName=StandardArgumentDefinitions.BQSR_TABLE_SHORT_NAME, doc=\"Input recalibration table for BQSR\")\n+    @WorkflowInput", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDkyNA==", "bodyText": "The \"optional-ness\" of the WDL arg for the input is derived from the @Argument optional attribute. The \"optional-ness\" of the inputs companions is based on the combination of the two attributes (@Argument and companion), with the only special handling/override case being for a required companion on an optional arg, where the @Argument attribute overrides the companion attribute and results in the companion arg being optional.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485134924", "createdAt": "2020-09-08T19:04:01Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/ApplyBQSR.java", "diffHunk": "@@ -84,6 +89,7 @@\n      * created on the same input data.\n      */\n     @Argument(fullName=StandardArgumentDefinitions.BQSR_TABLE_LONG_NAME, shortName=StandardArgumentDefinitions.BQSR_TABLE_SHORT_NAME, doc=\"Input recalibration table for BQSR\")\n+    @WorkflowInput", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODA0Ng=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk4NTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoxOTozN1rOHOm12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowODowOVrOHOqaag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODQ4OA==", "bodyText": "@WorkflowInput works ok with fields of a Collection type? Is this covered by tests?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485078488", "createdAt": "2020-09-08T17:19:37Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -104,6 +108,7 @@\n      * reflected those sites skipped by the -XL argument.\n      */\n     @Argument(fullName = KNOWN_SITES_ARG_FULL_NAME, doc = \"One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.\", optional = false)\n+    @WorkflowInput\n     private List<FeatureInput<Feature>> knownSites;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNzAwMg==", "bodyText": "Yes. The TestWDLTool has several args that are collections, including File and other types. And the generated test data that is used to validate the WDL for actual tools always generates two values for any collection arg.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485137002", "createdAt": "2020-09-08T19:08:09Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/bqsr/BaseRecalibrator.java", "diffHunk": "@@ -104,6 +108,7 @@\n      * reflected those sites skipped by the -XL argument.\n      */\n     @Argument(fullName = KNOWN_SITES_ARG_FULL_NAME, doc = \"One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis.\", optional = false)\n+    @WorkflowInput\n     private List<FeatureInput<Feature>> knownSites;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3ODQ4OA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk4OTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMDo1MVrOHOm40g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo1MTozM1rOHPFy1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTI1MA==", "bodyText": "\"Output file\" -> \"Output BAM file\"", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485079250", "createdAt": "2020-09-08T17:20:51Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java", "diffHunk": "@@ -55,9 +52,16 @@\n  * --fraction-to-keep 0.95 \\\n  * -O umiGrouped_0.95.bam\n  **/\n+@CommandLineProgramProperties(\n+        summary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        oneLineSummary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        programGroup = ReadDataManipulationProgramGroup.class\n+)\n @BetaFeature\n+@WorkflowProperties\n public class DownsampleByDuplicateSet extends DuplicateSetWalker {\n-    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"\")\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"Output file\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NTYyMQ==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485585621", "createdAt": "2020-09-09T12:51:33Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/consensus/DownsampleByDuplicateSet.java", "diffHunk": "@@ -55,9 +52,16 @@\n  * --fraction-to-keep 0.95 \\\n  * -O umiGrouped_0.95.bam\n  **/\n+@CommandLineProgramProperties(\n+        summary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        oneLineSummary = \"Discard a set fraction of duplicate sets from a UMI-grouped bam\",\n+        programGroup = ReadDataManipulationProgramGroup.class\n+)\n @BetaFeature\n+@WorkflowProperties\n public class DownsampleByDuplicateSet extends DuplicateSetWalker {\n-    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"\")\n+    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc = \"Output file\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTI1MA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAwNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyNTo0OVrOHOnD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjo0OToyOFrOHPFtGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MjA4MQ==", "bodyText": "final?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485082081", "createdAt": "2020-09-08T17:25:49Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -32,6 +34,8 @@\n     // This must be kept in sync with the value used in build.gradle, where the file is created\n     private final static String dummyWDLTestFileName = \"dummyWDLTestFile\";\n \n+    private static String WDL_TEST_VALUE_PROPERTY = \"testValue\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU4NDE1NA==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485584154", "createdAt": "2020-09-09T12:49:28Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -32,6 +34,8 @@\n     // This must be kept in sync with the value used in build.gradle, where the file is created\n     private final static String dummyWDLTestFileName = \"dummyWDLTestFile\";\n \n+    private static String WDL_TEST_VALUE_PROPERTY = \"testValue\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MjA4MQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAxNTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyNzo0OVrOHOnIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozMzoxM1rOHPWyrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MzIzMQ==", "bodyText": "Are you guaranteed that there's always at least one element here?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485083231", "createdAt": "2020-09-08T17:27:49Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NDEwOQ==", "bodyText": "Yes, this code block is inside a guard that checks that there actually are positional args.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485864109", "createdAt": "2020-09-09T19:33:13Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MzIzMQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAyMjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyOTo1NVrOHOnNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMDoxOVrOHPWQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDQzMA==", "bodyText": "Is this file cleaned up on JVM exit?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485084430", "createdAt": "2020-09-08T17:29:55Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTM4Mg==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485855382", "createdAt": "2020-09-09T19:20:19Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDQzMA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAyODU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozMTo0MVrOHOnQ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTozODoxNVrOHPNY2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTQxOQ==", "bodyText": "Is it possible to use our createTempFile() method that automatically sets the file to be deleted on exit, and writes to the temp dir instead of the build dir?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485085419", "createdAt": "2020-09-08T17:31:41Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDA0Mw==", "bodyText": "I updated build.gradle to clean up the outputs (including the cromwell output folders, as well as the dummy test file). Dynamically creating a temporary output directory would complicate things a bit because both (this) Java code and gradle validation code need to agree on the name. It could be done, but I've tested the cleanup I added and it seems to work. See what you think.  I expect the validation will mostly only be run on travis anyway.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485710043", "createdAt": "2020-09-09T15:38:15Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTQxOQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAzMTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozMjo0MVrOHOnS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTozODo0MFrOHPXDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTkzNQ==", "bodyText": "Can you explain more precisely what the problem is here, and how we can avoid triggering it in other tools?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485085935", "createdAt": "2020-09-08T17:32:41Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n+\n+        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n+        // mutex args will have a value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2ODQ5Mg==", "bodyText": "This is strictly to accommodate a limitation in the automated tests, specifically the test-value generation code, not something fundamental about the actual WDL or the tools. The test data generation code isn't mutex-arg-aware, so it will generate and populate test values for all of the args in a mutex group, which will fail when run. This line of code is a special case to accommodate the one mutex arg that is in all Spark tools to allow those WDLs to run. There should be a more general-purpose solution though. Ticket to resolve this is #6805.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485868492", "createdAt": "2020-09-09T19:38:40Z", "author": {"login": "cmnbroad"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/help/GATKWDLWorkUnitHandler.java", "diffHunk": "@@ -135,58 +143,142 @@ protected void processPositionalArguments(\n             final CommandLineArgumentParser clp,\n             final Map<String, List<Map<String, Object>>> args) {\n         super.processPositionalArguments(clp, args);\n-        final List<Map<String, Object>> positionalArgsList = args.get(\"positional\");\n+        final List<Map<String, Object>> positionalArgsList = args.get(TemplateProperties.ARGUMENTS_POSITIONAL);\n         if (positionalArgsList != null && !positionalArgsList.isEmpty()) {\n-            final Map<String, Object> positionalArgs = args.get(\"positional\").get(0);\n-            final String argType = (String) positionalArgs.get(\"type\");\n-            positionalArgs.put(\"testValue\",\n-                    getInputValueForTest(\n-                            argType,\n-                            (String) positionalArgs.get(\"defaultValue\"))\n+            final Map<String, Object> positionalArgs = args.get(TemplateProperties.ARGUMENTS_POSITIONAL).get(0);\n+            positionalArgs.put(WDL_TEST_VALUE_PROPERTY,\n+                    testValueAsJSON(\n+                            WDLWorkUnitHandler.POSITIONAL_ARGS,\n+                            clp.getPositionalArgumentDefinition(),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_TYPE),\n+                            (String) positionalArgs.get(TemplateProperties.ARGUMENT_DEFAULT_VALUE))\n             );\n         }\n     }\n \n     /**\n-     * Return a test input value for use in the WDL validation test inputs. If an option has WDL type\n-     * File, then we need to provide the name of an actual file that exists so cromwell can localize it.\n-     * \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     * Return a test input value for use in the WDL validation test inputs.\n+     *\n+     * If an option has WDL type File, then we need to provide the name of an actual file that exists so cromwell\n+     * can localize it: \"dummyWDLTestFileName\" is a file that will be created by the test task.\n+     *\n+     * @param longName the long name for this arg\n+     * @param argDef the ArgumentDefinition for this arg\n      * @param wdlType the wdl type for which an input value is needed\n-     * @param defaultValue the default value for the argument for which an input value is required\n+     * @param defaultWDLValue the default value for the argument for which an input value is required\n      * @return a test input value that is either the default value, or the name of an actual test file\n      * that will exist at test execution time\n      */\n-    protected String getInputValueForTest(final String wdlType, final String defaultValue) {\n+    protected String testValueAsJSON(\n+            final String longName,\n+            final ArgumentDefinition argDef,\n+            final String wdlType,\n+            final String defaultWDLValue) {\n+        final Argument argumentAnnotation = argDef.getUnderlyingField().getAnnotation(Argument.class);\n+        final PositionalArguments positionalAnnotation = argDef.getUnderlyingField().getAnnotation(PositionalArguments.class);\n+        final boolean isRequired =\n+                (argumentAnnotation != null && !argumentAnnotation.optional())\n+                || positionalAnnotation != null;\n+        final String dummyWDLTestFile = ((GATKWDLDoclet) getDoclet()).getBuildDir() + \"/\" + dummyWDLTestFileName;\n+\n+        // Hack to resolve the mutex argument in GATKSparkTool; otherwise all spark tools will fail since all\n+        // mutex args will have a value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NTkzNQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA1MDYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozODowNlrOHOneVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1NDoyOVrOHOr28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4ODg1NQ==", "bodyText": "How did this test work before with no space between -R and the reference file?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485088855", "createdAt": "2020-09-08T17:38:06Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java", "diffHunk": "@@ -59,7 +59,7 @@ public void testSplitsFixNDN() throws Exception {\n     @Test //regression test for https://github.com/broadinstitute/gatk/pull/1853\n     public void testSplitsOfUnpairedAndUnmappedReads() throws Exception {\n         IntegrationTestSpec spec = new IntegrationTestSpec(\n-                \"-R\" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +\n+                \"-R \" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MDY5MA==", "bodyText": "The jopt parser's option clustering code accepted -Rhuman_g1k_v37.20.21.fasta as -R human_g1k_v37.20.21.fasta, but only because it couldn't peel off any more options (a different reference file might have failed). But we disabled option clustering in Barclay 4.0 because it could manifest weird errors, so this will no longer succeed.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485160690", "createdAt": "2020-09-08T19:54:29Z", "author": {"login": "cmnbroad"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/walkers/rnaseq/SplitNCigarReadsIntegrationTest.java", "diffHunk": "@@ -59,7 +59,7 @@ public void testSplitsFixNDN() throws Exception {\n     @Test //regression test for https://github.com/broadinstitute/gatk/pull/1853\n     public void testSplitsOfUnpairedAndUnmappedReads() throws Exception {\n         IntegrationTestSpec spec = new IntegrationTestSpec(\n-                \"-R\" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +\n+                \"-R \" + b37_reference_20_21 + \" -I \" + largeFileTestDir + \"K-562.duplicateMarked.chr20.bam -O %s --process-secondary-alignments \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4ODg1NQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA2MjI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0MToyOVrOHOnleA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowODo0MlrOHPV4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDY4MA==", "bodyText": "Can you include at least one @WorkflowInput / @WorkflowOutput in this test class that does not have any companion files?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485090680", "createdAt": "2020-09-08T17:41:29Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTEzNg==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485849136", "createdAt": "2020-09-09T19:08:42Z", "author": {"login": "cmnbroad"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDY4MA=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA2NDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0MTo1NFrOHOnmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTowOToxM1rOHPV5cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDk0Nw==", "bodyText": "No test coverage for optionalCompanions?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485090947", "createdAt": "2020-09-08T17:41:54Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInput;\n+\n+    @Argument(fullName = \"requiredScalarFileOutput\",\n+            shortName = \"requiredScalarFileOutput\",\n+            doc = \"requiredScalarFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputDictionary\", \"requiredScalarFileOutputIndex\"})\n+    public File requiredScalarFileOutput;\n+\n+    @Argument(fullName = \"requiredListFileOutput\",\n+            shortName = \"requiredListFileOutput\",\n+            doc = \"requiredListFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputDictionary\", \"requiredListFileOutputIndex\"})\n+    public List<File> requiredListFileOutput;\n+\n+\n+    // optional Files\n+    @Argument(fullName = \"optionalScalarFileInput\",\n+            shortName = \"optionalScalarFileInput\",\n+            doc = \"optionalScalarFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputDictionary\", \"optionalScalarFileInputIndex\"})\n+    public File optionalScalarFileInput;\n+\n+    @Argument(fullName = \"optionalListFileInput\",\n+            shortName = \"optionalListFileInput\",\n+            doc = \"optionalListFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalListFileInputDictionary\", \"optionalListFileInputIndex\"})\n+    public List<File> optionalListFileInput;\n+\n+    @Argument(fullName = \"optionaldScalarFileOutput\",\n+            shortName = \"optionalScalarFileOutput\",\n+            doc = \"optionalScalarFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputDictionary\", \"optionalScalarFileOutputIndex\"})\n+    public File optionalScalarFileOutput;\n+\n+    @Argument(fullName = \"optionaldListFileOutput\",\n+            shortName = \"optionalListFileOutput\",\n+            doc = \"optionalListFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputDictionary\", \"optionalListFileOutputIndex\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTQ1OA==", "bodyText": "Oh wow - done. I also added some mixed companions cases.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485849458", "createdAt": "2020-09-09T19:09:13Z", "author": {"login": "cmnbroad"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/TestWDLTool.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.broadinstitute.hellbender.utils.help;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.barclay.argparser.PositionalArguments;\n+import org.broadinstitute.barclay.argparser.WorkflowProperties;\n+import org.broadinstitute.barclay.argparser.WorkflowInput;\n+import org.broadinstitute.barclay.argparser.WorkflowOutput;\n+import org.broadinstitute.barclay.help.DocumentedFeature;\n+import org.broadinstitute.hellbender.cmdline.TestProgramGroup;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * NOTE: this file needs to live in a separate package from the doc tests, otherwise all of the docs tests\n+ * will pick it up as a command line program, which will change the outputs.\n+ *\n+ * CommandLineProgram test tool for testing WDL generation. Contains various combinations of\n+ * commandline argument and workflow input/outputs with companion resources:\n+ *\n+ *  scalar/array\n+ *  file/non-file\n+ *  required/optional\n+ */\n+@CommandLineProgramProperties(\n+        summary = TestWDLTool.SUMMARY,\n+        oneLineSummary = TestWDLTool.ONE_LINE_SUMMARY,\n+        programGroup = TestProgramGroup.class)\n+@WorkflowProperties(memory =\"8G\")\n+@DocumentedFeature(groupName = TestWDLTool.GROUP_NAME)\n+public class TestWDLTool {\n+\n+    public static final String SUMMARY = \"WDL Test Tool\";\n+    public static final String ONE_LINE_SUMMARY = \"WDL Test Tool to test WDL Generation\";\n+    public static final String GROUP_NAME = \"WDL feature group name\";\n+\n+    @PositionalArguments(doc = \"Positional args doc\")\n+    @WorkflowInput(requiredCompanions={\"posDictionary\", \"posIndex\"})\n+    public List<File> positionalListFileInput;\n+\n+    // required Files\n+    @Argument(fullName = \"requiredScalarFileInput\",\n+            shortName = \"requiredScalarFileInput\",\n+            doc = \"requiredScalarFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredScalarFileInputDictionary\", \"requiredScalarFileInputIndex\"}, localizationOptional = true)\n+    public File requiredScalarFileInput;\n+\n+    @Argument(fullName = \"requiredListFileInput\",\n+            shortName = \"requiredListFileInput\",\n+            doc = \"requiredListFileInput doc\",\n+            optional = false)\n+    @WorkflowInput(requiredCompanions={\"requiredListFileInputDictionary\", \"requiredListFileInputIndex\"}, localizationOptional = true)\n+    public List<File> requiredListFileInput;\n+\n+    @Argument(fullName = \"requiredScalarFileOutput\",\n+            shortName = \"requiredScalarFileOutput\",\n+            doc = \"requiredScalarFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredScalarFileOutputDictionary\", \"requiredScalarFileOutputIndex\"})\n+    public File requiredScalarFileOutput;\n+\n+    @Argument(fullName = \"requiredListFileOutput\",\n+            shortName = \"requiredListFileOutput\",\n+            doc = \"requiredListFileOutput doc\",\n+            optional = false)\n+    @WorkflowOutput(requiredCompanions={\"requiredListFileOutputDictionary\", \"requiredListFileOutputIndex\"})\n+    public List<File> requiredListFileOutput;\n+\n+\n+    // optional Files\n+    @Argument(fullName = \"optionalScalarFileInput\",\n+            shortName = \"optionalScalarFileInput\",\n+            doc = \"optionalScalarFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalScalarFileInputDictionary\", \"optionalScalarFileInputIndex\"})\n+    public File optionalScalarFileInput;\n+\n+    @Argument(fullName = \"optionalListFileInput\",\n+            shortName = \"optionalListFileInput\",\n+            doc = \"optionalListFileInput doc\",\n+            optional = true)\n+    @WorkflowInput(requiredCompanions={\"optionalListFileInputDictionary\", \"optionalListFileInputIndex\"})\n+    public List<File> optionalListFileInput;\n+\n+    @Argument(fullName = \"optionaldScalarFileOutput\",\n+            shortName = \"optionalScalarFileOutput\",\n+            doc = \"optionalScalarFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalScalarFileOutputDictionary\", \"optionalScalarFileOutputIndex\"})\n+    public File optionalScalarFileOutput;\n+\n+    @Argument(fullName = \"optionaldListFileOutput\",\n+            shortName = \"optionalListFileOutput\",\n+            doc = \"optionalListFileOutput doc\",\n+            optional = true)\n+    @WorkflowOutput(requiredCompanions={\"optionalListFileOutputDictionary\", \"optionalListFileOutputIndex\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDk0Nw=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA3MjU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0NDoyMlrOHOnrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1OTo0N1rOHOsB4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MjMwMQ==", "bodyText": "private?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485092301", "createdAt": "2020-09-08T17:44:22Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java", "diffHunk": "@@ -32,21 +38,92 @@\n         );\n     }\n \n+    @Test\n+    public void wdlGenSmokeTest() throws IOException, ParseException {\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentest\");\n+        doWDLGenTest(wdlGenTestPackages, \"src/main/java\", wdlTestTargetDir);\n+\n+        // load and parse every generated JSON file to make sure they're valid JSON\n+        final File[] jsonFiles = wdlTestTargetDir.listFiles((File dir, String name) -> name.endsWith(\".json\"));\n+        for (final File f : jsonFiles) {\n+            assertValidJSONFile(f);\n+        }\n+    }\n+\n+    // This test uses a test tool with all combinations of input/output, list/scalar, across all types, including\n+    // companions, to ensure that the various templates use the template maps correctly.\n+    @Test\n+    public void wdlGenTemplateTest() throws IOException, ParseException {\n+        final File expectedResultsDir = new File(\"src/test/resources/org/broadinstitute/hellbender/utils/wdltest/\");\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentemplatetest\");\n+\n+        doWDLGenTest(\n+                Collections.singletonList(\"org.broadinstitute.hellbender.utils.help\"),\n+                \"src/test/java\",\n+                wdlTestTargetDir);\n+\n+        // index\n+        final String indexHTML = \"index.html\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, indexHTML),\n+                new File(wdlTestTargetDir, indexHTML));\n+\n+        // wdls\n+        final String defaultWDL = \"TestWDLTool.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDL),\n+                new File(wdlTestTargetDir, defaultWDL));\n+\n+        final String allArgsWDL = \"TestWDLToolAllArgs.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDL),\n+                new File(wdlTestTargetDir, allArgsWDL));\n+\n+        final String allArgsTestWDL = \"TestWDLToolAllArgsTest.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDL),\n+                new File(wdlTestTargetDir, allArgsTestWDL));\n+\n+        // jsons\n+        final String defaultWDLInputs = \"TestWDLToolInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDLInputs),\n+                new File(wdlTestTargetDir, defaultWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, defaultWDLInputs));\n+\n+        final String allArgsWDLInputs = \"TestWDLToolAllArgsInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDLInputs),\n+                new File(wdlTestTargetDir, allArgsWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsWDLInputs));\n+\n+        final String allArgsTestWDLInputs = \"TestWDLToolAllArgsTestInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDLInputs),\n+                new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+    }\n+\n+    private void assertValidJSONFile(final File targetFile) throws IOException, ParseException {\n+        try (FileReader fileReader = new FileReader(targetFile)) {\n+            new JSONParser().parse(fileReader);\n+        }\n+    }\n+\n     // suppress deprecation warning on Java 11 since we're using deprecated javadoc APIs\n     @SuppressWarnings({\"deprecation\",\"removal\"})\n-    @Test\n-    public static void wdlGenSmokeTest() {\n-        final File wdlTestTarget = createTempDir(\"wdlgentest\");\n+    public void doWDLGenTest(List<String> testPackages, final String sourcePath, final File wdlTestTargetDir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MzQ4OA==", "bodyText": "Done, all.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485163488", "createdAt": "2020-09-08T19:59:47Z", "author": {"login": "cmnbroad"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/help/WDLGenerationIntegrationTest.java", "diffHunk": "@@ -32,21 +38,92 @@\n         );\n     }\n \n+    @Test\n+    public void wdlGenSmokeTest() throws IOException, ParseException {\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentest\");\n+        doWDLGenTest(wdlGenTestPackages, \"src/main/java\", wdlTestTargetDir);\n+\n+        // load and parse every generated JSON file to make sure they're valid JSON\n+        final File[] jsonFiles = wdlTestTargetDir.listFiles((File dir, String name) -> name.endsWith(\".json\"));\n+        for (final File f : jsonFiles) {\n+            assertValidJSONFile(f);\n+        }\n+    }\n+\n+    // This test uses a test tool with all combinations of input/output, list/scalar, across all types, including\n+    // companions, to ensure that the various templates use the template maps correctly.\n+    @Test\n+    public void wdlGenTemplateTest() throws IOException, ParseException {\n+        final File expectedResultsDir = new File(\"src/test/resources/org/broadinstitute/hellbender/utils/wdltest/\");\n+        final File wdlTestTargetDir = createTempDir(\"wdlgentemplatetest\");\n+\n+        doWDLGenTest(\n+                Collections.singletonList(\"org.broadinstitute.hellbender.utils.help\"),\n+                \"src/test/java\",\n+                wdlTestTargetDir);\n+\n+        // index\n+        final String indexHTML = \"index.html\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, indexHTML),\n+                new File(wdlTestTargetDir, indexHTML));\n+\n+        // wdls\n+        final String defaultWDL = \"TestWDLTool.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDL),\n+                new File(wdlTestTargetDir, defaultWDL));\n+\n+        final String allArgsWDL = \"TestWDLToolAllArgs.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDL),\n+                new File(wdlTestTargetDir, allArgsWDL));\n+\n+        final String allArgsTestWDL = \"TestWDLToolAllArgsTest.wdl\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDL),\n+                new File(wdlTestTargetDir, allArgsTestWDL));\n+\n+        // jsons\n+        final String defaultWDLInputs = \"TestWDLToolInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, defaultWDLInputs),\n+                new File(wdlTestTargetDir, defaultWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, defaultWDLInputs));\n+\n+        final String allArgsWDLInputs = \"TestWDLToolAllArgsInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsWDLInputs),\n+                new File(wdlTestTargetDir, allArgsWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsWDLInputs));\n+\n+        final String allArgsTestWDLInputs = \"TestWDLToolAllArgsTestInputs.json\";\n+        IntegrationTestSpec.assertEqualTextFiles(\n+                new File(expectedResultsDir, allArgsTestWDLInputs),\n+                new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+        assertValidJSONFile(new File(wdlTestTargetDir, allArgsTestWDLInputs));\n+    }\n+\n+    private void assertValidJSONFile(final File targetFile) throws IOException, ParseException {\n+        try (FileReader fileReader = new FileReader(targetFile)) {\n+            new JSONParser().parse(fileReader);\n+        }\n+    }\n+\n     // suppress deprecation warning on Java 11 since we're using deprecated javadoc APIs\n     @SuppressWarnings({\"deprecation\",\"removal\"})\n-    @Test\n-    public static void wdlGenSmokeTest() {\n-        final File wdlTestTarget = createTempDir(\"wdlgentest\");\n+    public void doWDLGenTest(List<String> testPackages, final String sourcePath, final File wdlTestTargetDir) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MjMwMQ=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA3NjcyOnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/TestWDLTool.wdl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0NTozOVrOHOnuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToxOTozM1rOHPWO4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5Mjk2Nw==", "bodyText": "Expected results files should be clearly labeled as such, either by being put into a directory with \"expected\" in the name, or by having \"expected\" in their file names.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485092967", "createdAt": "2020-09-08T17:45:39Z", "author": {"login": "droazen"}, "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/TestWDLTool.wdl", "diffHunk": "@@ -0,0 +1,284 @@\n+version 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NDk0Nw==", "bodyText": "Done.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485854947", "createdAt": "2020-09-09T19:19:33Z", "author": {"login": "cmnbroad"}, "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/TestWDLTool.wdl", "diffHunk": "@@ -0,0 +1,284 @@\n+version 1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5Mjk2Nw=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA4MTU0OnYy", "diffSide": "RIGHT", "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/index.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0NzowNlrOHOnxQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTozODo0OFrOHPNacA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MzY5Nw==", "bodyText": "GATK version 1.1-111?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485093697", "createdAt": "2020-09-08T17:47:06Z", "author": {"login": "droazen"}, "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/index.html", "diffHunk": "@@ -0,0 +1,100 @@\n+<?php\n+\n+    include '../../../../common/include/common.php';\n+    include_once '../../../config.php';\n+    $module = modules::GATK;\n+    $name = docSN::toolDocs;\n+\n+    printHeader($module, $name, topSN::guide);\n+\n+    $selected_major_version = 4;\n+    $dirs = lookupVersionDirs($selected_major_version);\n+?>\n+\n+<link type='text/css' rel='stylesheet' href='gatkDoc.css'>\n+\n+<div class='row'>\n+\n+    <aside class=\"col-md-3\">\n+\n+        <?php echo produceGuideNav($module, $name) . makeTwitterFeed(); ?>\n+\n+    </aside>\n+\n+    <div class='col-md-9'>\n+\n+\n+\n+        <div class=\"row\">\n+            <div class=\"col-md-6\">\n+                <h1 id=\"top\"><i class='<?php print ico::toolDocsIcon; ?>'></i> GATK WDL Index</h1>\n+            </div>\n+            <div class=\"col-md-6\">\n+                <div class=\"btn-group pull-right\" style='margin-top:14px;'>\n+                    <a class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n+                        Version 1.1-111\n+                        <span class=\"caret\"></span>\n+                    </a>\n+                    <ul class=\"dropdown-menu\">\n+                        <?php foreach($dirs as $dir) { ?>\n+                            <li class=\"hide_me_html\"><a tabindex='-1' href='../<?=$dir?>' ><?=$dir?></a></li>\n+                        <?php } ?>\n+                    </ul>\n+                </div>\n+            </div>\n+        </div>\n+\n+        <div class=\"hide_me_html\">\n+            <hr />\n+            <em>Showing docs for version 1.1-111 | The latest version is <?php print $latest_version; ?></em>\n+            <hr />\n+        </div>\n+\n+        <div class=\"accordion\" id=\"index\">\n+                <br />\n+                <br />\n+                <br />\n+        <div class=\"accordion-group\">\n+            <div class=\"accordion-heading\">\n+                <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#index\" href=\"#WDLfeaturegroupname\">\n+                    <h4>WDL feature group name</h4>\n+                </a>\n+            </div>\n+            <div class=\"accordion-body collapse\" id=\"WDLfeaturegroupname\">\n+                <div class=\"accordion-inner\">\n+                    <p class=\"lead\">Tools for internal test purposes</p>\n+                    <table class=\"table table-striped table-bordered table-condensed cozy\">\n+                        <tr>\n+                            <th>Name</th>\n+                            <th>Summary</th>\n+                        </tr>\n+                                <tr>\n+                                    <td><a href=\"TestWDLTool.wdl\">TestWDLTool</a></td>\n+                                        <td>WDL Test Tool to test WDL Generation</td>\n+                                </tr>\n+                    </table>\n+                </div>\n+            </div>\n+        </div>\n+                <br />\n+        </div>\n+\n+        <hr>\n+        <p><a href='#top'><i class='fa fa-chevron-up'></i> Return to top</a></p>\n+        <hr>\n+        <p class=\"see-also\">See also \n+        \t<a href=\"https://software.broadinstitute.org/gatk/documentation/\">General Documentation</a> |\n+        \t<a class=\"hide_me_php\" href=\"index.html\">Tool WDL Index</a> <a class=\"hide_me_html\" href=\"index\">Tool WDL Index</a> |\n+        \t<a href=\"https://gatkforums.broadinstitute.org/gatk/\">Support Forum</a>\n+        </p>\n+\n+        <p class=\"version\">GATK version 1.1-111 built at 2016/11/11 11:11:11.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxMDQ0OA==", "bodyText": "Oh - fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r485710448", "createdAt": "2020-09-09T15:38:48Z", "author": {"login": "cmnbroad"}, "path": "src/test/resources/org/broadinstitute/hellbender/utils/wdltest/index.html", "diffHunk": "@@ -0,0 +1,100 @@\n+<?php\n+\n+    include '../../../../common/include/common.php';\n+    include_once '../../../config.php';\n+    $module = modules::GATK;\n+    $name = docSN::toolDocs;\n+\n+    printHeader($module, $name, topSN::guide);\n+\n+    $selected_major_version = 4;\n+    $dirs = lookupVersionDirs($selected_major_version);\n+?>\n+\n+<link type='text/css' rel='stylesheet' href='gatkDoc.css'>\n+\n+<div class='row'>\n+\n+    <aside class=\"col-md-3\">\n+\n+        <?php echo produceGuideNav($module, $name) . makeTwitterFeed(); ?>\n+\n+    </aside>\n+\n+    <div class='col-md-9'>\n+\n+\n+\n+        <div class=\"row\">\n+            <div class=\"col-md-6\">\n+                <h1 id=\"top\"><i class='<?php print ico::toolDocsIcon; ?>'></i> GATK WDL Index</h1>\n+            </div>\n+            <div class=\"col-md-6\">\n+                <div class=\"btn-group pull-right\" style='margin-top:14px;'>\n+                    <a class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n+                        Version 1.1-111\n+                        <span class=\"caret\"></span>\n+                    </a>\n+                    <ul class=\"dropdown-menu\">\n+                        <?php foreach($dirs as $dir) { ?>\n+                            <li class=\"hide_me_html\"><a tabindex='-1' href='../<?=$dir?>' ><?=$dir?></a></li>\n+                        <?php } ?>\n+                    </ul>\n+                </div>\n+            </div>\n+        </div>\n+\n+        <div class=\"hide_me_html\">\n+            <hr />\n+            <em>Showing docs for version 1.1-111 | The latest version is <?php print $latest_version; ?></em>\n+            <hr />\n+        </div>\n+\n+        <div class=\"accordion\" id=\"index\">\n+                <br />\n+                <br />\n+                <br />\n+        <div class=\"accordion-group\">\n+            <div class=\"accordion-heading\">\n+                <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#index\" href=\"#WDLfeaturegroupname\">\n+                    <h4>WDL feature group name</h4>\n+                </a>\n+            </div>\n+            <div class=\"accordion-body collapse\" id=\"WDLfeaturegroupname\">\n+                <div class=\"accordion-inner\">\n+                    <p class=\"lead\">Tools for internal test purposes</p>\n+                    <table class=\"table table-striped table-bordered table-condensed cozy\">\n+                        <tr>\n+                            <th>Name</th>\n+                            <th>Summary</th>\n+                        </tr>\n+                                <tr>\n+                                    <td><a href=\"TestWDLTool.wdl\">TestWDLTool</a></td>\n+                                        <td>WDL Test Tool to test WDL Generation</td>\n+                                </tr>\n+                    </table>\n+                </div>\n+            </div>\n+        </div>\n+                <br />\n+        </div>\n+\n+        <hr>\n+        <p><a href='#top'><i class='fa fa-chevron-up'></i> Return to top</a></p>\n+        <hr>\n+        <p class=\"see-also\">See also \n+        \t<a href=\"https://software.broadinstitute.org/gatk/documentation/\">General Documentation</a> |\n+        \t<a class=\"hide_me_php\" href=\"index.html\">Tool WDL Index</a> <a class=\"hide_me_html\" href=\"index\">Tool WDL Index</a> |\n+        \t<a href=\"https://gatkforums.broadinstitute.org/gatk/\">Support Forum</a>\n+        </p>\n+\n+        <p class=\"version\">GATK version 1.1-111 built at 2016/11/11 11:11:11.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MzY5Nw=="}, "originalCommit": {"oid": "1195d6ef5363532d69c67faea3e49ee691892452"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ4OTkzOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNjo1OVrOHS7Vyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoxMTowMVrOHVM8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwODY1MA==", "bodyText": "Looks like you left the womtool validation step commented out -- was this intentional?", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r489608650", "createdAt": "2020-09-16T17:36:59Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -811,26 +819,35 @@ task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n         def wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> !f.getAbsolutePath().endsWith(\".html\") && !f.getAbsolutePath().endsWith(\".json\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final womtoolLocation = System.getenv('WOMTOOL_JAR')\n-            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n-            execWDLValidation(validateWDLCommand)\n-        }\n+        final womtoolLocation = System.getenv('WOMTOOL_JAR')\n+//        wdlFiles.any() { wdlFile ->\n+//            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n+//            execWDLValidation(validateWDLCommand)\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5NDEzMA==", "bodyText": "Oh good catch- it was a temporary shortcut and not intentional. Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r491994130", "createdAt": "2020-09-21T12:11:01Z", "author": {"login": "cmnbroad"}, "path": "build.gradle", "diffHunk": "@@ -811,26 +819,35 @@ task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n         def wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> !f.getAbsolutePath().endsWith(\".html\") && !f.getAbsolutePath().endsWith(\".json\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final womtoolLocation = System.getenv('WOMTOOL_JAR')\n-            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n-            execWDLValidation(validateWDLCommand)\n-        }\n+        final womtoolLocation = System.getenv('WOMTOOL_JAR')\n+//        wdlFiles.any() { wdlFile ->\n+//            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n+//            execWDLValidation(validateWDLCommand)\n+//        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwODY1MA=="}, "originalCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzUwMTI3OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MDoxMVrOHS7cxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoxMToxMlrOHVM8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDQzNw==", "bodyText": "getWLDInputJSON -> getWDLInputJSON", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r489610437", "createdAt": "2020-09-16T17:40:11Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -811,26 +819,35 @@ task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n         def wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> !f.getAbsolutePath().endsWith(\".html\") && !f.getAbsolutePath().endsWith(\".json\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final womtoolLocation = System.getenv('WOMTOOL_JAR')\n-            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n-            execWDLValidation(validateWDLCommand)\n-        }\n+        final womtoolLocation = System.getenv('WOMTOOL_JAR')\n+//        wdlFiles.any() { wdlFile ->\n+//            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n+//            execWDLValidation(validateWDLCommand)\n+//        }\n \n         // now execute the *AllArgs test wdls using cromwell\n         wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> f.getAbsolutePath().endsWith(\"AllArgsTest.wdl\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final cromwellLocation = System.getenv('CROMWELL_JAR')\n-            final testInputJSON = getWLDInputJSONTestFileNameFromWDLName(wdlFile)\n-            final runWDLCommand = \"java -jar $cromwellLocation run --inputs $testInputJSON $wdlFile\"\n-            // the test JSON input file is populated by the WDL gen process with this dummy file name\n-            // to satisfy cromwell's attempt to de/localize input files\n-            def buildDir = System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\"\n-            final createDummyTestInputFile = \"touch $buildDir/dummyWDLTestFile\"\n-            execWDLValidation(createDummyTestInputFile)\n-            execWDLValidation(runWDLCommand)\n+\n+        // the test JSON input file is populated by the WDL gen process with the name of this dummy file\n+        // to satisfy cromwell's attempt to de/localize input/output files\n+        def buildDir = System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath()\n+        final dummyWDLTestFileName = \"$buildDir/dummyWDLTestFile\"\n+        final File dummyWDLTestFile = file(dummyWDLTestFileName)\n+        final cromwellLocation = System.getenv('CROMWELL_JAR')\n+        try {\n+            wdlFiles.any() { wdlFile ->\n+                final testInputJSON = getWLDInputJSONTestFileNameFromWDLName(wdlFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5NDIyNw==", "bodyText": "Fixed.", "url": "https://github.com/broadinstitute/gatk/pull/6800#discussion_r491994227", "createdAt": "2020-09-21T12:11:12Z", "author": {"login": "cmnbroad"}, "path": "build.gradle", "diffHunk": "@@ -811,26 +819,35 @@ task gatkWDLGenValidation(dependsOn: [gatkWDLGen, shadowJar]) {\n         def wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> !f.getAbsolutePath().endsWith(\".html\") && !f.getAbsolutePath().endsWith(\".json\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final womtoolLocation = System.getenv('WOMTOOL_JAR')\n-            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n-            execWDLValidation(validateWDLCommand)\n-        }\n+        final womtoolLocation = System.getenv('WOMTOOL_JAR')\n+//        wdlFiles.any() { wdlFile ->\n+//            final validateWDLCommand = \"java -jar $womtoolLocation validate $wdlFile\"\n+//            execWDLValidation(validateWDLCommand)\n+//        }\n \n         // now execute the *AllArgs test wdls using cromwell\n         wdlFiles = fileTree(dir: wdlGenFolder).filter {\n             f -> f.getAbsolutePath().endsWith(\"AllArgsTest.wdl\")\n         }\n-        wdlFiles.any() { wdlFile ->\n-            final cromwellLocation = System.getenv('CROMWELL_JAR')\n-            final testInputJSON = getWLDInputJSONTestFileNameFromWDLName(wdlFile)\n-            final runWDLCommand = \"java -jar $cromwellLocation run --inputs $testInputJSON $wdlFile\"\n-            // the test JSON input file is populated by the WDL gen process with this dummy file name\n-            // to satisfy cromwell's attempt to de/localize input files\n-            def buildDir = System.getenv(\"TRAVIS_BUILD_DIR\") ?: \".\"\n-            final createDummyTestInputFile = \"touch $buildDir/dummyWDLTestFile\"\n-            execWDLValidation(createDummyTestInputFile)\n-            execWDLValidation(runWDLCommand)\n+\n+        // the test JSON input file is populated by the WDL gen process with the name of this dummy file\n+        // to satisfy cromwell's attempt to de/localize input/output files\n+        def buildDir = System.getenv(\"TRAVIS_BUILD_DIR\") ?: new File(\".\").getAbsolutePath()\n+        final dummyWDLTestFileName = \"$buildDir/dummyWDLTestFile\"\n+        final File dummyWDLTestFile = file(dummyWDLTestFileName)\n+        final cromwellLocation = System.getenv('CROMWELL_JAR')\n+        try {\n+            wdlFiles.any() { wdlFile ->\n+                final testInputJSON = getWLDInputJSONTestFileNameFromWDLName(wdlFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDQzNw=="}, "originalCommit": {"oid": "4bfbc9f05ad60fde5c036797984f3804dd8c1230"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1056, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}