{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Nzc1MzMx", "number": 6559, "title": "FilterIntervals now filters out any singleton intervals", "bodyText": "This implements suggestion #2 proposed by @samuelklee from issue #5852", "createdAt": "2020-04-21T16:40:09Z", "url": "https://github.com/broadinstitute/gatk/pull/6559", "merged": true, "mergeCommit": {"oid": "189ea455b167b1fa8f4793eeadb8cbbfc26e1518"}, "closed": true, "closedAt": "2020-06-12T19:42:51Z", "author": {"login": "asmirnov239"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaPZoSgH2gAyNDA2Nzc1MzMxOjhhYzczYjVlNDc3Nzk4NzQ0NDA4ZDIwMTllYTY1NDRjZDJmMWNmZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnb_MBgH2gAyNDA2Nzc1MzMxOjAyOGY5ZjkwODYzYTMyZjdhOGMwMjUxOWNkN2RjMDA5ZGY4MWU0MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "author": {"user": {"login": "asmirnov239", "name": "Andrey Smirnov"}}, "url": "https://github.com/broadinstitute/gatk/commit/8ac73b5e477798744408d2019ea6544cd2f1cffc", "committedDate": "2020-04-22T21:44:41Z", "message": "FilterIntervals now filters out any singleton intervals, that have no other intervals on their contigs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "151fed2de9cf34f828db67d73aa08236411b0e30", "author": {"user": {"login": "asmirnov239", "name": "Andrey Smirnov"}}, "url": "https://github.com/broadinstitute/gatk/commit/151fed2de9cf34f828db67d73aa08236411b0e30", "committedDate": "2020-04-21T17:43:34Z", "message": "Fixed minor issue"}, "afterCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "author": {"user": {"login": "asmirnov239", "name": "Andrey Smirnov"}}, "url": "https://github.com/broadinstitute/gatk/commit/8ac73b5e477798744408d2019ea6544cd2f1cffc", "committedDate": "2020-04-22T21:44:41Z", "message": "FilterIntervals now filters out any singleton intervals, that have no other intervals on their contigs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzk1MTE5", "url": "https://github.com/broadinstitute/gatk/pull/6559#pullrequestreview-403795119", "createdAt": "2020-04-30T18:59:07Z", "commit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "state": "APPROVED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1OTowN1rOGO2W5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMjowNFrOGO2x7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzg0NQ==", "bodyText": "Put mapToObj on its own line for consistency.", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418223845", "createdAt": "2020-04-30T18:59:07Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzk5NQ==", "bodyText": "Break up filter and forEach onto their own lines.", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418223995", "createdAt": "2020-04-30T18:59:27Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTI4Nw==", "bodyText": "I might just name this variable count.  Perhaps even intervalCount, and rename the map to contigToIntervalCountMap.", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418225287", "createdAt": "2020-04-30T19:01:39Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjE3OA==", "bodyText": "Seems a bit weird to have <= since it should never happen (and I can't imagine future code changes that would make it possible), but no biggie.", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418226178", "createdAt": "2020-04-30T19:03:25Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());\n+            if (value <= 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjY5OQ==", "bodyText": "Perhaps a log message here indicating when a contig is dropped?", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418226699", "createdAt": "2020-04-30T19:04:24Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());\n+            if (value <= 1) {\n+                mask[i] = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTEwNg==", "bodyText": "I'd make the variable names and code here consistent with the code in FilterIntervals.", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229106", "createdAt": "2020-04-30T19:09:02Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that\n+     * are the only ones on their corresponding contigs.\n+     */\n+    private void checkForSingletonIntervalAbsence(final List<SimpleIntervalCollection> intervalCollections){\n+        final List<SimpleInterval> concatenatedIntervalList = new ArrayList<>();\n+        IntStream.range(0, numShards).forEach(i -> {\n+            concatenatedIntervalList.addAll(intervalCollections.get(i).getIntervals());\n+        });\n+\n+        final Map<String, Long> contigToCountMap = concatenatedIntervalList.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTYxOQ==", "bodyText": "Validate that the concatenation of the sharded interval lists does not have singleton intervals..., perhaps?", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229619", "createdAt": "2020-04-30T19:09:57Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTc5Nw==", "bodyText": "Stray import?", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229797", "createdAt": "2020-04-30T19:10:19Z", "author": {"login": "samuelklee"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervalsIntegrationTest.java", "diffHunk": "@@ -27,6 +27,7 @@\n import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.lang.reflect.AnnotatedElement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTk0OA==", "bodyText": "White space.  Thanks for adding these tests!", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229948", "createdAt": "2020-04-30T19:10:37Z", "author": {"login": "samuelklee"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervalsIntegrationTest.java", "diffHunk": "@@ -71,6 +72,16 @@\n                             new AnnotationMap(Arrays.asList(\n                                     Pair.of(CopyNumberAnnotations.GC_CONTENT, 0.95),\n                                     Pair.of(CopyNumberAnnotations.MAPPABILITY, 0.95),\n+                                    Pair.of(CopyNumberAnnotations.SEGMENTAL_DUPLICATION_CONTENT, 0.5)))),\n+                    new AnnotatedInterval(new SimpleInterval(\"20\", 51,\t60),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMDc2Ng==", "bodyText": "Comma after i.e..", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418230766", "createdAt": "2020-04-30T19:12:04Z", "author": {"login": "samuelklee"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -40,15 +40,16 @@\n  * {@link CollectReadCounts}, outputs a filtered Picard interval list.  The set intersection of intervals from the\n  * specified intervals, the annotated intervals, and the first count file will be taken as the initial set of intervals\n  * on which to perform filtering.  Parameters for filtering based on the annotations and counts can be adjusted.\n- * Annotation-based filters will be applied first, followed by count-based filters.  The result may be passed via -L to\n- * other tools (e.g., {@link DetermineGermlineContigPloidy} and {@link GermlineCNVCaller}) to mask intervals from\n- * analysis.\n+ * Annotation-based filters will be applied first, followed by count-based filters. In the end, any singleton intervals\n+ * (i.e. those being by themselves on their corresponding contigs) found after applying other filters will be filtered", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODA3MTE2", "url": "https://github.com/broadinstitute/gatk/pull/6559#pullrequestreview-403807116", "createdAt": "2020-04-30T19:16:23Z", "commit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxNjoyNFrOGO27CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyNjo1MFrOGO3QRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzA5Nw==", "bodyText": "Log a warning here, something like:\nFiltered singleton interval on contig: \"chrX\"", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418233097", "createdAt": "2020-04-30T19:16:24Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());\n+            if (value <= 1) {\n+                mask[i] = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzUyNQ==", "bodyText": "Why this change?", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418233525", "createdAt": "2020-04-30T19:17:09Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -246,7 +243,7 @@\n     public void onStartup() {\n         super.onStartup();\n         /* check for successful import of gcnvkernel */\n-        PythonScriptExecutor.checkPythonEnvironmentForPackage(\"gcnvkernel\");\n+        PythonScriptExecutor.checkPythonEnvironmentForPackage(\"numpy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzkwNg==", "bodyText": "I'd argue you can just call this checkForSingletonInterval", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418233906", "createdAt": "2020-04-30T19:17:59Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that\n+     * are the only ones on their corresponding contigs.\n+     */\n+    private void checkForSingletonIntervalAbsence(final List<SimpleIntervalCollection> intervalCollections){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNjYwOA==", "bodyText": "Can be simplified a bit:\n        intervalCollections.stream()\n                .flatMap(list -> list.getIntervals().stream())\n                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()))\n                .entrySet().stream()\n                .forEach(entry -> { \n                    if (entry.getValue() == 1) { \n                        throw new IllegalArgumentException(\n                                String.format(\"Records contain a singleton interval on contig (%s).\" + \n                                        \" Please run FilterIntervals tool first.\", entry.getKey()));\n            }\n        });", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418236608", "createdAt": "2020-04-30T19:23:07Z", "author": {"login": "mwalker174"}, "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that\n+     * are the only ones on their corresponding contigs.\n+     */\n+    private void checkForSingletonIntervalAbsence(final List<SimpleIntervalCollection> intervalCollections){\n+        final List<SimpleInterval> concatenatedIntervalList = new ArrayList<>();\n+        IntStream.range(0, numShards).forEach(i -> {\n+            concatenatedIntervalList.addAll(intervalCollections.get(i).getIntervals());\n+        });\n+\n+        final Map<String, Long> contigToCountMap = concatenatedIntervalList.stream()\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        contigToCountMap.keySet().forEach(c -> {\n+            if (contigToCountMap.get(c) == 1) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Records contain a singleton interval on contig (%s).\" +\n+                                \" Please run FilterIntervals tool first.\", c));\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzODUzNQ==", "bodyText": "Does one of these test for the singleton case?", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418238535", "createdAt": "2020-04-30T19:26:50Z", "author": {"login": "mwalker174"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervalsIntegrationTest.java", "diffHunk": "@@ -92,28 +103,28 @@\n         return new Object[][]{\n                 //intervals file, array of strings for excluded intervals, annotated-intervals file,\n                 //min/max GC content, mix/max mappability, min/max seg-dupe content, expected array of indices of retained intervals\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4)},\n-                {intervalsFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Collections.singletonList(2)},\n-                {intervalsFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4)},\n-                {intervalsWithExtraIntervalFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Collections.singletonList(2)},\n-                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1)}};\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4, 5)},\n+                {intervalsFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(2, 5)},\n+                {intervalsFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4, 5)},\n+                {intervalsWithExtraIntervalFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 5)}};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028f9f90863a32f7a8c02519cd7dc009df81e424", "author": {"user": {"login": "asmirnov239", "name": "Andrey Smirnov"}}, "url": "https://github.com/broadinstitute/gatk/commit/028f9f90863a32f7a8c02519cd7dc009df81e424", "committedDate": "2020-06-02T21:45:35Z", "message": "Addressed PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2860, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}