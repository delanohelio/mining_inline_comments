{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzA4NTM5", "number": 6526, "title": "Adding initial support for http(s) paths including signed urls.", "bodyText": "Adding a beta version of http-nio which allows streaming http files and seeking within them.\nThis allows using https urls including signed urls to access remote files.\nBams/crams can be read by specifying the index manually.  Automatic index resolution does not work correctly at the moment.\nknown caveats\n\nsome methods are not implement in the nio filesystem library yet\nfailures are not retryied\n\n\n\nI'm currently fighting with sonatype to get a real release pushed out... it seems close...", "createdAt": "2020-03-25T16:58:00Z", "url": "https://github.com/broadinstitute/gatk/pull/6526", "merged": true, "mergeCommit": {"oid": "e3297dce6e417e4637b6891cfa94ab5cff1dcb41"}, "closed": true, "closedAt": "2020-04-15T03:11:03Z", "author": {"login": "lbergelson"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTbEv6AFqTM4NTc4ODc0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXqGkuAH2gAyMzkzNzA4NTM5OmFhMjc5MTJiNjBkMmJhNjg1ZWQ2ZDJhOThjMGMzNTc5MzRkYmRmMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Nzg4NzQ5", "url": "https://github.com/broadinstitute/gatk/pull/6526#pullrequestreview-385788749", "createdAt": "2020-04-01T17:14:58Z", "commit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxNDo1OFrOF_KmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyMzowMFrOF_K5QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODI1NA==", "bodyText": "Is it worth updating our WDLs to use --read-index if that argument is just going to be replaced soon with bundle files? Or did you update this particular one just so that @davidbenjamin could try this new feature out?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401778254", "createdAt": "2020-04-01T17:14:58Z", "author": {"login": "droazen"}, "path": "scripts/mutect2_wdl/mutect2.wdl", "diffHunk": "@@ -576,12 +576,12 @@ task M2 {\n         touch f1r2.tar.gz\n         echo \"\" > normal_name.txt\n \n-        gatk --java-options \"-Xmx~{command_mem}m\" GetSampleName -R ~{ref_fasta} -I ~{tumor_bam} -O tumor_name.txt -encode\n-        tumor_command_line=\"-I ~{tumor_bam} -tumor `cat tumor_name.txt`\"\n+        gatk --java-options \"-Xmx~{command_mem}m\" GetSampleName -R ~{ref_fasta} -I ~{tumor_bam} --read-index ~{tumor_bai} -O tumor_name.txt -encode\n+        tumor_command_line=\"-I ~{tumor_bam} --read-index ~{tumor_bai} -tumor `cat tumor_name.txt`\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODQwMg==", "bodyText": "Confirming that this artifact is now in maven central?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401778402", "createdAt": "2020-04-01T17:15:12Z", "author": {"login": "droazen"}, "path": "build.gradle", "diffHunk": "@@ -355,6 +355,8 @@ dependencies {\n     compile 'org.broadinstitute:gatk-bwamem-jni:1.0.4'\n     compile 'org.broadinstitute:gatk-fermilite-jni:1.2.0'\n \n+    compile 'org.broadinstitute:http-nio:0.1.0-rc1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MDMyOQ==", "bodyText": "I think that isCloudStorageUrl() is meant to test specifically for GCS urls, as the name implies, so I don't think we should overload it to also check for http. Recommend introducing a new method isHTTPUrl(), and calling it from appropriate places such as BucketUtils.isRemoteStorageUrl()", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401780329", "createdAt": "2020-04-01T17:18:18Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -66,7 +68,8 @@ public static boolean isCloudStorageUrl(final GATKPathSpecifier pathSpec) {\n \n     public static boolean isCloudStorageUrl(final java.nio.file.Path path) {\n         // the initial \"\" protects us against a null scheme\n-        return (\"\" + path.toUri().getScheme() + \"://\").equals(GCS_PREFIX);\n+        final String prefix = \"\" + path.toUri().getScheme() + \"://\";\n+        return prefix.equals(GCS_PREFIX) || prefix.equals(HTTP_PREFIX) || prefix.equals(HTTPS_PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MTI0MA==", "bodyText": "If this method is generally useful, perhaps it should live in BucketUtils rather than in this test class.", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401781240", "createdAt": "2020-04-01T17:19:50Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +52,66 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+        return new Object[][]{\n+                {bucketPathToPublicHttpUrl(bam), bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals},\n+                {toSignedUrl(bam), toSignedUrl(bai), bam, bai, largeFileIntervals},\n+                {bucketPathToPublicHttpUrl(cram), bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals},\n+                {toSignedUrl(cram), toSignedUrl(crai), cram, crai, cramIntervals}\n+\n+        };\n+    }\n+\n+    @Test(groups = {\"cloud\", \"bucket\"}, dataProvider = \"getHttpPaths\")\n+    public void testHttpPaths(String reads, String index, String nonHttpReads, String nonHttpIndex, List<SimpleInterval> intervals) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        final File out = createTempFile(\"out\", \".bam\");\n+        System.out.println(\"reading http\");\n+        args.addInput(reads)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(\"read-index\", index)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out);\n+        intervals.forEach(args::addInterval);\n+        runCommandLine(args);\n+\n+        System.out.println(\"reading gs\");\n+        final ArgumentsBuilder args2 = new ArgumentsBuilder();\n+        final File out2 = createTempFile(\"out\", \".bam\");\n+        args2.addInput(nonHttpReads)\n+                .add(\"read-index\", nonHttpIndex)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out2);\n+        intervals.forEach(args2::addInterval);\n+        runCommandLine(args2);\n+\n+        SamAssertionUtils.assertEqualBamFiles(out, out2, false, ValidationStringency.DEFAULT_STRINGENCY);\n+    }\n+\n+    public static String toSignedUrl(String path) {\n+        final Storage storage = StorageOptions.getDefaultInstance().getService();\n+        final BlobInfo info = BlobInfo.newBuilder(BucketUtils.getBucket(path), BucketUtils.getPathWithoutBucket(path)).build();\n+        return storage.signUrl(info, 1L, TimeUnit.HOURS,\n+                Storage.SignUrlOption.httpMethod(HttpMethod.GET)\n+        ).toString();\n+    }\n+\n+    public static String bucketPathToPublicHttpUrl(String path){\n+        return String.format(\"https://storage.googleapis.com/%s/%s\", BucketUtils.getBucket(path), BucketUtils.getPathWithoutBucket(path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MTYzMA==", "bodyText": "This is another utility method that might be useful to move to BucketUtils", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401781630", "createdAt": "2020-04-01T17:20:27Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +52,66 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+        return new Object[][]{\n+                {bucketPathToPublicHttpUrl(bam), bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals},\n+                {toSignedUrl(bam), toSignedUrl(bai), bam, bai, largeFileIntervals},\n+                {bucketPathToPublicHttpUrl(cram), bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals},\n+                {toSignedUrl(cram), toSignedUrl(crai), cram, crai, cramIntervals}\n+\n+        };\n+    }\n+\n+    @Test(groups = {\"cloud\", \"bucket\"}, dataProvider = \"getHttpPaths\")\n+    public void testHttpPaths(String reads, String index, String nonHttpReads, String nonHttpIndex, List<SimpleInterval> intervals) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        final File out = createTempFile(\"out\", \".bam\");\n+        System.out.println(\"reading http\");\n+        args.addInput(reads)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(\"read-index\", index)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out);\n+        intervals.forEach(args::addInterval);\n+        runCommandLine(args);\n+\n+        System.out.println(\"reading gs\");\n+        final ArgumentsBuilder args2 = new ArgumentsBuilder();\n+        final File out2 = createTempFile(\"out\", \".bam\");\n+        args2.addInput(nonHttpReads)\n+                .add(\"read-index\", nonHttpIndex)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out2);\n+        intervals.forEach(args2::addInterval);\n+        runCommandLine(args2);\n+\n+        SamAssertionUtils.assertEqualBamFiles(out, out2, false, ValidationStringency.DEFAULT_STRINGENCY);\n+    }\n+\n+    public static String toSignedUrl(String path) {\n+        final Storage storage = StorageOptions.getDefaultInstance().getService();\n+        final BlobInfo info = BlobInfo.newBuilder(BucketUtils.getBucket(path), BucketUtils.getPathWithoutBucket(path)).build();\n+        return storage.signUrl(info, 1L, TimeUnit.HOURS,\n+                Storage.SignUrlOption.httpMethod(HttpMethod.GET)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MjAwOQ==", "bodyText": "Use the logger instead of System.out.println()", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401782009", "createdAt": "2020-04-01T17:21:02Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +52,66 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+        return new Object[][]{\n+                {bucketPathToPublicHttpUrl(bam), bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals},\n+                {toSignedUrl(bam), toSignedUrl(bai), bam, bai, largeFileIntervals},\n+                {bucketPathToPublicHttpUrl(cram), bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals},\n+                {toSignedUrl(cram), toSignedUrl(crai), cram, crai, cramIntervals}\n+\n+        };\n+    }\n+\n+    @Test(groups = {\"cloud\", \"bucket\"}, dataProvider = \"getHttpPaths\")\n+    public void testHttpPaths(String reads, String index, String nonHttpReads, String nonHttpIndex, List<SimpleInterval> intervals) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        final File out = createTempFile(\"out\", \".bam\");\n+        System.out.println(\"reading http\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MjMzOA==", "bodyText": "What happens if you run with the default prefetch settings?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401782338", "createdAt": "2020-04-01T17:21:37Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +52,66 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+        return new Object[][]{\n+                {bucketPathToPublicHttpUrl(bam), bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals},\n+                {toSignedUrl(bam), toSignedUrl(bai), bam, bai, largeFileIntervals},\n+                {bucketPathToPublicHttpUrl(cram), bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals},\n+                {toSignedUrl(cram), toSignedUrl(crai), cram, crai, cramIntervals}\n+\n+        };\n+    }\n+\n+    @Test(groups = {\"cloud\", \"bucket\"}, dataProvider = \"getHttpPaths\")\n+    public void testHttpPaths(String reads, String index, String nonHttpReads, String nonHttpIndex, List<SimpleInterval> intervals) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        final File out = createTempFile(\"out\", \".bam\");\n+        System.out.println(\"reading http\");\n+        args.addInput(reads)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MjYwOQ==", "bodyText": "Use the logger instead of System.out.println()", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401782609", "createdAt": "2020-04-01T17:22:04Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +52,66 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+        return new Object[][]{\n+                {bucketPathToPublicHttpUrl(bam), bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals},\n+                {toSignedUrl(bam), toSignedUrl(bai), bam, bai, largeFileIntervals},\n+                {bucketPathToPublicHttpUrl(cram), bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals},\n+                {toSignedUrl(cram), toSignedUrl(crai), cram, crai, cramIntervals}\n+\n+        };\n+    }\n+\n+    @Test(groups = {\"cloud\", \"bucket\"}, dataProvider = \"getHttpPaths\")\n+    public void testHttpPaths(String reads, String index, String nonHttpReads, String nonHttpIndex, List<SimpleInterval> intervals) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        final File out = createTempFile(\"out\", \".bam\");\n+        System.out.println(\"reading http\");\n+        args.addInput(reads)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(\"read-index\", index)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out);\n+        intervals.forEach(args::addInterval);\n+        runCommandLine(args);\n+\n+        System.out.println(\"reading gs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MzEwNQ==", "bodyText": "Can you also assert that the output files are non-empty and contain the expected number of records given the intervals?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r401783105", "createdAt": "2020-04-01T17:23:00Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +52,66 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+        return new Object[][]{\n+                {bucketPathToPublicHttpUrl(bam), bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals},\n+                {toSignedUrl(bam), toSignedUrl(bai), bam, bai, largeFileIntervals},\n+                {bucketPathToPublicHttpUrl(cram), bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals},\n+                {toSignedUrl(cram), toSignedUrl(crai), cram, crai, cramIntervals}\n+\n+        };\n+    }\n+\n+    @Test(groups = {\"cloud\", \"bucket\"}, dataProvider = \"getHttpPaths\")\n+    public void testHttpPaths(String reads, String index, String nonHttpReads, String nonHttpIndex, List<SimpleInterval> intervals) throws IOException {\n+        final ArgumentsBuilder args = new ArgumentsBuilder();\n+        final File out = createTempFile(\"out\", \".bam\");\n+        System.out.println(\"reading http\");\n+        args.addInput(reads)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(\"read-index\", index)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out);\n+        intervals.forEach(args::addInterval);\n+        runCommandLine(args);\n+\n+        System.out.println(\"reading gs\");\n+        final ArgumentsBuilder args2 = new ArgumentsBuilder();\n+        final File out2 = createTempFile(\"out\", \".bam\");\n+        args2.addInput(nonHttpReads)\n+                .add(\"read-index\", nonHttpIndex)\n+                .add(StandardArgumentDefinitions.CLOUD_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .add(StandardArgumentDefinitions.CLOUD_INDEX_PREFETCH_BUFFER_LONG_NAME, 1)\n+                .addReference(GATKBaseTest.b37Reference)\n+                .addOutput(out2);\n+        intervals.forEach(args2::addInterval);\n+        runCommandLine(args2);\n+\n+        SamAssertionUtils.assertEqualBamFiles(out, out2, false, ValidationStringency.DEFAULT_STRINGENCY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd83748eea2d6a1d53122b9285d4868fb7b994ad", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/fd83748eea2d6a1d53122b9285d4868fb7b994ad", "committedDate": "2020-04-06T21:16:41Z", "message": "Adding initial support for http(s) paths including signed urls.\n\n* Adding a beta version of http-nio which allows streaming http files and seeking within them.\n* This allows using https urls including signed urls to access remote files.\n* Bams/crams can be read by specifying the index manually.  Automatic index resolution does not work correctly at the moment.\n* known caveats\n    * some methods are not implement in the nio filesystem library yet\n    * failures are not retryied"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4d3433013ded8fe81ce9fec09cf895de9d27295", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/d4d3433013ded8fe81ce9fec09cf895de9d27295", "committedDate": "2020-04-06T21:16:41Z", "message": "update to release version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42cb03a8a025cf6063ecdd9da98767a14dc09a1e", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/42cb03a8a025cf6063ecdd9da98767a14dc09a1e", "committedDate": "2020-04-08T21:17:05Z", "message": "responding to comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d602d99b9a82adccddaddd93f886689ce8981114", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/d602d99b9a82adccddaddd93f886689ce8981114", "committedDate": "2020-03-25T17:26:23Z", "message": "update to release version"}, "afterCommit": {"oid": "42cb03a8a025cf6063ecdd9da98767a14dc09a1e", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/42cb03a8a025cf6063ecdd9da98767a14dc09a1e", "committedDate": "2020-04-08T21:17:05Z", "message": "responding to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caa035396ddb92944803f5742edbf770818c24bb", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/caa035396ddb92944803f5742edbf770818c24bb", "committedDate": "2020-04-08T22:01:59Z", "message": "more bucket utils changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/d45831063016b39b2dab157f0f5b631f94cd4ce8", "committedDate": "2020-04-08T22:04:32Z", "message": "woops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDI4ODIz", "url": "https://github.com/broadinstitute/gatk/pull/6526#pullrequestreview-393028823", "createdAt": "2020-04-14T15:13:39Z", "commit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxMzozOVrOGFTm4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozOToxNFrOGFUy0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxNzMxMg==", "bodyText": "It seems like this condition should actually be: \"if this is any kind of URL at all, return it unmodified\"", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408217312", "createdAt": "2020-04-14T15:13:39Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -89,7 +115,7 @@ public static boolean isRemoteStorageUrl(String path) {\n      * @return an absolute file path if the original path was a relative file path, otherwise the original path\n      */\n     public static String makeFilePathAbsolute(String path){\n-        if (isCloudStorageUrl(path) || isHadoopUrl(path) || isFileUrl(path)){\n+        if (isGcsUrl(path) || isHadoopUrl(path) || isFileUrl(path) || isHttpUrl(path)){\n             return path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxOTYxNA==", "bodyText": "The comment \"Only apply the wrappers if the feature input is on Google Cloud Storage\" needs updating.", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408219614", "createdAt": "2020-04-14T15:16:44Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/engine/FeatureDataSource.java", "diffHunk": "@@ -374,7 +374,7 @@ final void printCacheStats() {\n             final boolean requireIndex = false;\n \n             // Only apply the wrappers if the feature input is on Google Cloud Storage\n-            if (BucketUtils.isCloudStorageUrl(featureInput)) {\n+            if (BucketUtils.isEligibleForPrefetching(featureInput)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTE1OQ==", "bodyText": "Would be better if you could call the isGcsUrl()/isHttpUrl() methods from here, but no big deal (@cmnbroad is probably going to refactor all of this code anyway as part of the GATKPathSpecifier migration..). More importantly: have you actually tested the prefetcher with HTTP/HTTPs inputs to make sure that it works properly?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408225159", "createdAt": "2020-04-14T15:23:59Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -15,58 +19,80 @@\n import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.broadinstitute.hellbender.engine.GATKPathSpecifier;\n import org.broadinstitute.hellbender.exceptions.GATKException;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.utils.Utils;\n import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.broadinstitute.http.nio.HttpFileSystemProvider;\n+import org.broadinstitute.http.nio.HttpsFileSystemProvider;\n import shaded.cloud_nio.com.google.api.gax.retrying.RetrySettings;\n import shaded.cloud_nio.com.google.auth.oauth2.GoogleCredentials;\n import shaded.cloud_nio.com.google.cloud.http.HttpTransportOptions;\n import shaded.cloud_nio.org.threeten.bp.Duration;\n \n import java.io.*;\n+import java.net.URL;\n import java.nio.channels.SeekableByteChannel;\n import java.nio.file.Files;\n import java.util.Arrays;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n \n /**\n  * Utilities for dealing with google buckets.\n  */\n public final class BucketUtils {\n-    public static final String GCS_SCHEME = \"gs\";\n-    public static final String GCS_PREFIX = GCS_SCHEME + \"://\";\n+    public static final String GCS_PREFIX = GoogleCloudStorageFileSystem.SCHEME + \"://\";\n+    public static final String HTTP_PREFIX = HttpFileSystemProvider.SCHEME + \"://\";\n+    public static final String HTTPS_PREFIX = HttpsFileSystemProvider.SCHEME +\"://\";\n     public static final String HDFS_PREFIX = \"hdfs://\";\n \n     // slashes omitted since hdfs paths seem to only have 1 slash which would be weirder to include than no slashes\n     public static final String FILE_PREFIX = \"file:\";\n \n-    public static final Logger logger = LogManager.getLogger(\"org.broadinstitute.hellbender.utils.gcs\");\n-\n     private BucketUtils(){} //private so that no one will instantiate this class\n \n-    public static boolean isCloudStorageUrl(final String path) {\n+    /**\n+     * @param path path to inspect\n+     * @return true if this path represents a gcs location\n+     */\n+    public static boolean isGcsUrl(final String path) {\n         Utils.nonNull(path);\n         return path.startsWith(GCS_PREFIX);\n     }\n \n     /**\n-     * Return true if this {@code GATKPathSpecifier} represents a gcs URI.\n      * @param pathSpec specifier to inspect\n-     * @return true if this {@code GATKPathSpecifier} represents a gcs URI.\n+     * @return true if this {@code GATKPathSpecifier} represents a remote storage system which may benefit from prefetching (gcs or http(s))\n      */\n-    public static boolean isCloudStorageUrl(final GATKPathSpecifier pathSpec) {\n+    public static boolean isEligibleForPrefetching(final GATKPathSpecifier pathSpec) {\n         Utils.nonNull(pathSpec);\n-        return pathSpec.getScheme().equals(GCS_SCHEME);\n+        return isEligibleForPrefetching(pathSpec.getScheme());\n+     }\n+\n+    /**\n+     * @param path path to inspect\n+     * @return true if this {@code Path} represents a remote storage system which may benefit from prefetching (gcs or http(s))\n+     */\n+    public static boolean isEligibleForPrefetching(final java.nio.file.Path path) {\n+        Utils.nonNull(path);\n+        return isEligibleForPrefetching(path.toUri().getScheme());\n     }\n \n-    public static boolean isCloudStorageUrl(final java.nio.file.Path path) {\n-        // the initial \"\" protects us against a null scheme\n-        return (\"\" + path.toUri().getScheme() + \"://\").equals(GCS_PREFIX);\n+    private static boolean isEligibleForPrefetching(final String scheme){\n+        return scheme != null\n+                && (scheme.equals(GoogleCloudStorageFileSystem.SCHEME)\n+                || scheme.equals(HttpFileSystemProvider.SCHEME)\n+                || scheme.equals(HttpsFileSystemProvider.SCHEME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTY2NA==", "bodyText": "Iif -> if", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408225664", "createdAt": "2020-04-14T15:24:37Z", "author": {"login": "droazen"}, "path": "src/main/java/org/broadinstitute/hellbender/utils/gcs/BucketUtils.java", "diffHunk": "@@ -15,58 +19,80 @@\n import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.broadinstitute.hellbender.engine.GATKPathSpecifier;\n import org.broadinstitute.hellbender.exceptions.GATKException;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.utils.Utils;\n import org.broadinstitute.hellbender.utils.io.IOUtils;\n+import org.broadinstitute.http.nio.HttpFileSystemProvider;\n+import org.broadinstitute.http.nio.HttpsFileSystemProvider;\n import shaded.cloud_nio.com.google.api.gax.retrying.RetrySettings;\n import shaded.cloud_nio.com.google.auth.oauth2.GoogleCredentials;\n import shaded.cloud_nio.com.google.cloud.http.HttpTransportOptions;\n import shaded.cloud_nio.org.threeten.bp.Duration;\n \n import java.io.*;\n+import java.net.URL;\n import java.nio.channels.SeekableByteChannel;\n import java.nio.file.Files;\n import java.util.Arrays;\n import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n import java.util.function.Function;\n \n /**\n  * Utilities for dealing with google buckets.\n  */\n public final class BucketUtils {\n-    public static final String GCS_SCHEME = \"gs\";\n-    public static final String GCS_PREFIX = GCS_SCHEME + \"://\";\n+    public static final String GCS_PREFIX = GoogleCloudStorageFileSystem.SCHEME + \"://\";\n+    public static final String HTTP_PREFIX = HttpFileSystemProvider.SCHEME + \"://\";\n+    public static final String HTTPS_PREFIX = HttpsFileSystemProvider.SCHEME +\"://\";\n     public static final String HDFS_PREFIX = \"hdfs://\";\n \n     // slashes omitted since hdfs paths seem to only have 1 slash which would be weirder to include than no slashes\n     public static final String FILE_PREFIX = \"file:\";\n \n-    public static final Logger logger = LogManager.getLogger(\"org.broadinstitute.hellbender.utils.gcs\");\n-\n     private BucketUtils(){} //private so that no one will instantiate this class\n \n-    public static boolean isCloudStorageUrl(final String path) {\n+    /**\n+     * @param path path to inspect\n+     * @return true if this path represents a gcs location\n+     */\n+    public static boolean isGcsUrl(final String path) {\n         Utils.nonNull(path);\n         return path.startsWith(GCS_PREFIX);\n     }\n \n     /**\n-     * Return true if this {@code GATKPathSpecifier} represents a gcs URI.\n      * @param pathSpec specifier to inspect\n-     * @return true if this {@code GATKPathSpecifier} represents a gcs URI.\n+     * @return true if this {@code GATKPathSpecifier} represents a remote storage system which may benefit from prefetching (gcs or http(s))\n      */\n-    public static boolean isCloudStorageUrl(final GATKPathSpecifier pathSpec) {\n+    public static boolean isEligibleForPrefetching(final GATKPathSpecifier pathSpec) {\n         Utils.nonNull(pathSpec);\n-        return pathSpec.getScheme().equals(GCS_SCHEME);\n+        return isEligibleForPrefetching(pathSpec.getScheme());\n+     }\n+\n+    /**\n+     * @param path path to inspect\n+     * @return true if this {@code Path} represents a remote storage system which may benefit from prefetching (gcs or http(s))\n+     */\n+    public static boolean isEligibleForPrefetching(final java.nio.file.Path path) {\n+        Utils.nonNull(path);\n+        return isEligibleForPrefetching(path.toUri().getScheme());\n     }\n \n-    public static boolean isCloudStorageUrl(final java.nio.file.Path path) {\n-        // the initial \"\" protects us against a null scheme\n-        return (\"\" + path.toUri().getScheme() + \"://\").equals(GCS_PREFIX);\n+    private static boolean isEligibleForPrefetching(final String scheme){\n+        return scheme != null\n+                && (scheme.equals(GoogleCloudStorageFileSystem.SCHEME)\n+                || scheme.equals(HttpFileSystemProvider.SCHEME)\n+                || scheme.equals(HttpsFileSystemProvider.SCHEME));\n+    }\n+\n+    /**\n+     * @return true Iif the given path is an http or https Url.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODYyMQ==", "bodyText": "This class should be named BucketUtilsUnitTest", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408228621", "createdAt": "2020-04-14T15:28:17Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -4,23 +4,24 @@\n import com.google.cloud.storage.contrib.nio.SeekableByteChannelPrefetcher;\n import htsjdk.samtools.util.IOUtil;\n import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.broadinstitute.hellbender.engine.GATKPathSpecifier;\n import org.broadinstitute.hellbender.testutils.MiniClusterUtils;\n import org.broadinstitute.hellbender.utils.config.ConfigFactory;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import java.io.File;\n import java.io.FileWriter;\n import java.io.IOException;\n-import java.net.URI;\n-import java.nio.channels.FileChannel;\n import java.nio.channels.SeekableByteChannel;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.security.GeneralSecurityException;\n import java.util.function.Function;\n+import java.util.stream.Stream;\n \n public final class BucketUtilsTest extends GATKBaseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyOTUxNA==", "bodyText": "largeFileIntervals -> bamIntervals", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408229514", "createdAt": "2020-04-14T15:29:24Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +50,59 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDY0Mg==", "bodyText": "I assume that you've verified these expected read counts using a code path that does not go through the new HTTP NIO provider?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408230642", "createdAt": "2020-04-14T15:30:53Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/tools/PrintReadsIntegrationTest.java", "diffHunk": "@@ -39,4 +50,59 @@ public void testNoConflictPG() throws IOException {\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads\"));\n         Assert.assertNotNull(SamReaderFactory.makeDefault().open(outFile).getFileHeader().getProgramRecord(\"GATK PrintReads.1\"));\n     }\n+\n+    @DataProvider\n+    public Object[][] getHttpPaths(){\n+        final String bam = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam\";\n+        final String bai = \"gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam.bai\";\n+        final String cram = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram\";\n+        final String crai = \"gs://hellbender/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai\";\n+        final List<SimpleInterval> largeFileIntervals = Arrays.asList(new SimpleInterval(\"3\",1_000_000, 1_000_001),\n+               new SimpleInterval(\"3\", 1_000_003, 1_000_100),\n+                new SimpleInterval(\"20\", 1_099_000, 1_100_000));\n+\n+        final List<SimpleInterval> cramIntervals = Arrays.asList(new SimpleInterval(\"20\", 9_999_902, 10_000_000));\n+        return new Object[][]{\n+                {BucketUtils.bucketPathToPublicHttpUrl(bam), BucketUtils.bucketPathToPublicHttpUrl(bai), bam, bai, largeFileIntervals, 528L},\n+                {BucketUtils.createSignedUrlToGcsObject(bam, 1L), BucketUtils.createSignedUrlToGcsObject(bai, 1L), bam, bai, largeFileIntervals, 528L},\n+                {BucketUtils.bucketPathToPublicHttpUrl(cram), BucketUtils.bucketPathToPublicHttpUrl(crai), cram, crai, cramIntervals, 112L},\n+                {BucketUtils.createSignedUrlToGcsObject(cram, 1L), BucketUtils.createSignedUrlToGcsObject(crai, 1L), cram, crai, cramIntervals, 112L}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzUxMg==", "bodyText": "file:///", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408233512", "createdAt": "2020-04-14T15:34:51Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -31,22 +32,36 @@\n     }\n \n     @Test(groups={\"bucket\"})\n-    public void testIsCloudStorageURL(){\n-        Assert.assertTrue(BucketUtils.isCloudStorageUrl(\"gs://abucket/bucket\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"hdfs://namenode/path/to/file\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"localFile\"));\n+    public void testIsGcsUrl(){\n+        Assert.assertTrue(BucketUtils.isGcsUrl(\"gs://abucket/bucket\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"hdfs://namenode/path/to/file\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"localFile\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"https://www.somewhere.com\"));\n+    }\n \n-        Assert.assertTrue(BucketUtils.isCloudStorageUrl(Paths.get(URI.create(\"gs://abucket/bucket\"))));\n-        // We cannot run this one because the HDFS provider looks for the \"namenode\" machine\n-        // and throws an exception.\n-        //Assert.assertFalse(BucketUtils.isCloudStorageUrl(Paths.get(URI.create(\"hdfs://namenode/path/to/file\"))));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(Paths.get(\"localFile\")));\n+    @DataProvider\n+    public Object[][] getVariousPathsForPrefetching(){\n+        return new Object[][]{\n+                {\"localFile\", false},\n+                {\"files:///local/file\", false},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzk5OQ==", "bodyText": "You could unit test the HDFS case by calling the overload that takes the scheme as a raw String...", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408233999", "createdAt": "2020-04-14T15:35:33Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -31,22 +32,36 @@\n     }\n \n     @Test(groups={\"bucket\"})\n-    public void testIsCloudStorageURL(){\n-        Assert.assertTrue(BucketUtils.isCloudStorageUrl(\"gs://abucket/bucket\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"hdfs://namenode/path/to/file\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"localFile\"));\n+    public void testIsGcsUrl(){\n+        Assert.assertTrue(BucketUtils.isGcsUrl(\"gs://abucket/bucket\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"hdfs://namenode/path/to/file\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"localFile\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"https://www.somewhere.com\"));\n+    }\n \n-        Assert.assertTrue(BucketUtils.isCloudStorageUrl(Paths.get(URI.create(\"gs://abucket/bucket\"))));\n-        // We cannot run this one because the HDFS provider looks for the \"namenode\" machine\n-        // and throws an exception.\n-        //Assert.assertFalse(BucketUtils.isCloudStorageUrl(Paths.get(URI.create(\"hdfs://namenode/path/to/file\"))));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(Paths.get(\"localFile\")));\n+    @DataProvider\n+    public Object[][] getVariousPathsForPrefetching(){\n+        return new Object[][]{\n+                {\"localFile\", false},\n+                {\"files:///local/file\", false},\n+                {\"http://www.somewhere.com\", true},\n+                {\"https://www.somewhere.com\", true},\n+               // {\"hdfs://namenode/path/to/file\", false}, skip this because it fails when namenode doesn't exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNDcwOA==", "bodyText": "Test file:// here as well", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408234708", "createdAt": "2020-04-14T15:36:30Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -61,20 +76,26 @@ public void testIsHadoopURL(){\n         Assert.assertFalse(BucketUtils.isHadoopUrl(\"gs://abucket/bucket\"));\n         Assert.assertTrue(BucketUtils.isHadoopUrl(\"hdfs://namenode/path/to/file\"));\n         Assert.assertFalse(BucketUtils.isHadoopUrl(\"localFile\"));\n+        Assert.assertFalse(BucketUtils.isHadoopUrl(\"http://www.somewhere.com\"));\n+        Assert.assertFalse(BucketUtils.isHadoopUrl(\"https://www.somewhere.com\"));\n     }\n \n     @Test\n     public void testIsRemoteStorageURL(){\n         Assert.assertTrue(BucketUtils.isRemoteStorageUrl(\"gs://abucket/bucket\"));\n         Assert.assertTrue(BucketUtils.isRemoteStorageUrl(\"hdfs://namenode/path/to/file\"));\n         Assert.assertFalse(BucketUtils.isRemoteStorageUrl(\"localFile\"));\n+        Assert.assertTrue(BucketUtils.isRemoteStorageUrl(\"http://www.somewhere.com\"));\n+        Assert.assertTrue(BucketUtils.isRemoteStorageUrl(\"https://www.somewhere.com\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNTQyOQ==", "bodyText": "Can you add a unit test like this for isHttpUrl() as well?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408235429", "createdAt": "2020-04-14T15:37:33Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -31,22 +32,36 @@\n     }\n \n     @Test(groups={\"bucket\"})\n-    public void testIsCloudStorageURL(){\n-        Assert.assertTrue(BucketUtils.isCloudStorageUrl(\"gs://abucket/bucket\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"hdfs://namenode/path/to/file\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"localFile\"));\n+    public void testIsGcsUrl(){\n+        Assert.assertTrue(BucketUtils.isGcsUrl(\"gs://abucket/bucket\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"hdfs://namenode/path/to/file\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"localFile\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"https://www.somewhere.com\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNjQzMA==", "bodyText": "Is this really a \"cloud\" test? It just does local String operations.", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408236430", "createdAt": "2020-04-14T15:38:48Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -202,4 +223,27 @@ public void testGetWrapper(int bufferSize, boolean prefetchingIsEnabled) throws\n             Assert.assertEquals(wrapped instanceof SeekableByteChannelPrefetcher, prefetchingIsEnabled);\n         }\n     }\n+\n+    @Test(groups=\"cloud\")\n+    public void testCreateSignedUrl() throws IOException {\n+        final String gcsPathString = getGCPTestInputPath() + \"nio/big.txt\";\n+        Assert.assertTrue(Files.exists(IOUtils.getPath(gcsPathString)), \"test file is missing, \" + gcsPathString);\n+\n+        final String signed = BucketUtils.createSignedUrlToGcsObject(gcsPathString, 1);\n+        final Path path = IOUtils.getPath(signed);\n+        Assert.assertTrue(signed.startsWith(\"https://\"), \"path doesn't star with https, \" + signed);\n+        Assert.assertTrue(signed.contains(\"big.txt\"), \"path is missing blob name, \"+ signed);\n+        Assert.assertTrue(Files.exists(path), \"path doesn't exist: \" + signed);\n+        try(final Stream<String> lines = Files.lines(path))  {\n+            Assert.assertTrue(lines.anyMatch(line -> line.contains(\"The Project Gutenberg EBook of The Adventures of Sherlock Holmes\")), \"blob data is incorrect, \" + signed);\n+        }\n+    }\n+\n+    @Test(groups=\"cloud\")\n+    public void testBucketPathToPublicHttpUrl(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNjc1NA==", "bodyText": "star -> start", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408236754", "createdAt": "2020-04-14T15:39:14Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUtilsTest.java", "diffHunk": "@@ -202,4 +223,27 @@ public void testGetWrapper(int bufferSize, boolean prefetchingIsEnabled) throws\n             Assert.assertEquals(wrapped instanceof SeekableByteChannelPrefetcher, prefetchingIsEnabled);\n         }\n     }\n+\n+    @Test(groups=\"cloud\")\n+    public void testCreateSignedUrl() throws IOException {\n+        final String gcsPathString = getGCPTestInputPath() + \"nio/big.txt\";\n+        Assert.assertTrue(Files.exists(IOUtils.getPath(gcsPathString)), \"test file is missing, \" + gcsPathString);\n+\n+        final String signed = BucketUtils.createSignedUrlToGcsObject(gcsPathString, 1);\n+        final Path path = IOUtils.getPath(signed);\n+        Assert.assertTrue(signed.startsWith(\"https://\"), \"path doesn't star with https, \" + signed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45831063016b39b2dab157f0f5b631f94cd4ce8"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "528f73ae6cc9b7fa03aaa63aab19acaafc54b640", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/528f73ae6cc9b7fa03aaa63aab19acaafc54b640", "committedDate": "2020-04-14T19:53:37Z", "message": "re-responding to comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjc2MDkw", "url": "https://github.com/broadinstitute/gatk/pull/6526#pullrequestreview-393276090", "createdAt": "2020-04-14T20:36:32Z", "commit": {"oid": "528f73ae6cc9b7fa03aaa63aab19acaafc54b640"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDozNjozMlrOGFf70g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo0MjoxOFrOGFgIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxOTI4Mg==", "bodyText": "BucketUnitUtilsTest -> BucketUtilsUnitTest", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408419282", "createdAt": "2020-04-14T20:36:32Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUnitUtilsTest.java", "diffHunk": "@@ -4,25 +4,26 @@\n import com.google.cloud.storage.contrib.nio.SeekableByteChannelPrefetcher;\n import htsjdk.samtools.util.IOUtil;\n import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.broadinstitute.hellbender.engine.GATKPathSpecifier;\n import org.broadinstitute.hellbender.testutils.MiniClusterUtils;\n import org.broadinstitute.hellbender.utils.config.ConfigFactory;\n+import org.broadinstitute.hellbender.utils.io.IOUtils;\n import org.testng.Assert;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n \n import java.io.File;\n import java.io.FileWriter;\n import java.io.IOException;\n-import java.net.URI;\n-import java.nio.channels.FileChannel;\n import java.nio.channels.SeekableByteChannel;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.security.GeneralSecurityException;\n import java.util.function.Function;\n+import java.util.stream.Stream;\n \n-public final class BucketUtilsTest extends GATKBaseTest {\n+public final class BucketUnitUtilsTest extends GATKBaseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528f73ae6cc9b7fa03aaa63aab19acaafc54b640"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMDQ0OA==", "bodyText": "Where's the unit test for isHttpUrl()?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408420448", "createdAt": "2020-04-14T20:38:44Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUnitUtilsTest.java", "diffHunk": "@@ -31,20 +32,39 @@\n     }\n \n     @Test(groups={\"bucket\"})\n-    public void testIsCloudStorageURL(){\n-        Assert.assertTrue(BucketUtils.isCloudStorageUrl(\"gs://abucket/bucket\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"hdfs://namenode/path/to/file\"));\n-        Assert.assertFalse(BucketUtils.isCloudStorageUrl(\"localFile\"));\n+    public void testIsGcsUrl(){\n+        Assert.assertTrue(BucketUtils.isGcsUrl(\"gs://abucket/bucket\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"hdfs://namenode/path/to/file\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"localFile\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"https://www.somewhere.com\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"http://www.somewhere.com\"));\n+        Assert.assertFalse(BucketUtils.isGcsUrl(\"https://www.somewhere.com\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528f73ae6cc9b7fa03aaa63aab19acaafc54b640"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMjA3NA==", "bodyText": "existanc -> existence", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408422074", "createdAt": "2020-04-14T20:41:36Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUnitUtilsTest.java", "diffHunk": "@@ -202,4 +244,28 @@ public void testGetWrapper(int bufferSize, boolean prefetchingIsEnabled) throws\n             Assert.assertEquals(wrapped instanceof SeekableByteChannelPrefetcher, prefetchingIsEnabled);\n         }\n     }\n+\n+    @Test(groups=\"cloud\")\n+    public void testCreateSignedUrl() throws IOException {\n+        final String gcsPathString = getGCPTestInputPath() + \"nio/big.txt\";\n+        Assert.assertTrue(Files.exists(IOUtils.getPath(gcsPathString)), \"test file is missing, \" + gcsPathString);\n+\n+        final String signed = BucketUtils.createSignedUrlToGcsObject(gcsPathString, 1);\n+        final Path path = IOUtils.getPath(signed);\n+        Assert.assertTrue(signed.startsWith(\"https://\"), \"path doesn't start with https, \" + signed);\n+        Assert.assertTrue(signed.contains(\"big.txt\"), \"path is missing blob name, \"+ signed);\n+        Assert.assertTrue(Files.exists(path), \"path doesn't exist: \" + signed);\n+        try(final Stream<String> lines = Files.lines(path))  {\n+            Assert.assertTrue(lines.anyMatch(line -> line.contains(\"The Project Gutenberg EBook of The Adventures of Sherlock Holmes\")), \"blob data is incorrect, \" + signed);\n+        }\n+    }\n+\n+    @Test(groups=\"cloud\")\n+    public void testBucketPathToPublicHttpUrl(){\n+        final String gcsPathString = \"gs://hellbender/test/resources/nio/big.txt\"; //note this doesn't actually check the existanc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528f73ae6cc9b7fa03aaa63aab19acaafc54b640"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMjQ2MQ==", "bodyText": "Just checking that the runtime of this test is reasonable (since the file is named \"big.txt\")?", "url": "https://github.com/broadinstitute/gatk/pull/6526#discussion_r408422461", "createdAt": "2020-04-14T20:42:18Z", "author": {"login": "droazen"}, "path": "src/test/java/org/broadinstitute/hellbender/utils/gcs/BucketUnitUtilsTest.java", "diffHunk": "@@ -202,4 +244,28 @@ public void testGetWrapper(int bufferSize, boolean prefetchingIsEnabled) throws\n             Assert.assertEquals(wrapped instanceof SeekableByteChannelPrefetcher, prefetchingIsEnabled);\n         }\n     }\n+\n+    @Test(groups=\"cloud\")\n+    public void testCreateSignedUrl() throws IOException {\n+        final String gcsPathString = getGCPTestInputPath() + \"nio/big.txt\";\n+        Assert.assertTrue(Files.exists(IOUtils.getPath(gcsPathString)), \"test file is missing, \" + gcsPathString);\n+\n+        final String signed = BucketUtils.createSignedUrlToGcsObject(gcsPathString, 1);\n+        final Path path = IOUtils.getPath(signed);\n+        Assert.assertTrue(signed.startsWith(\"https://\"), \"path doesn't start with https, \" + signed);\n+        Assert.assertTrue(signed.contains(\"big.txt\"), \"path is missing blob name, \"+ signed);\n+        Assert.assertTrue(Files.exists(path), \"path doesn't exist: \" + signed);\n+        try(final Stream<String> lines = Files.lines(path))  {\n+            Assert.assertTrue(lines.anyMatch(line -> line.contains(\"The Project Gutenberg EBook of The Adventures of Sherlock Holmes\")), \"blob data is incorrect, \" + signed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528f73ae6cc9b7fa03aaa63aab19acaafc54b640"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa27912b60d2ba685ed6d2a98c0c357934dbdf12", "author": {"user": {"login": "lbergelson", "name": "Louis Bergelson"}}, "url": "https://github.com/broadinstitute/gatk/commit/aa27912b60d2ba685ed6d2a98c0c357934dbdf12", "committedDate": "2020-04-14T21:09:32Z", "message": "fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2836, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}