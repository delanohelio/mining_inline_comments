{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMDMwMTk1", "number": 1214, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo0Nzo1MVrOEQFMxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDo1ODo1NVrOEQbGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mjk3ODYyOnYy", "diffSide": "RIGHT", "path": "python/tests/core/test_base_table_scan.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo0Nzo1MVrOG0DREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0OTo1M1rOG0RBzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjY1OA==", "bodyText": "Is this still needed with the ts_table fixture already parametrized?", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457232658", "createdAt": "2020-07-20T09:47:51Z", "author": {"login": "xhochy"}, "path": "python/tests/core/test_base_table_scan.py", "diffHunk": "@@ -14,11 +14,12 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-\n from iceberg.api import Schema\n from iceberg.api.types import IntegerType, NestedField\n+import pytest\n \n \n+@pytest.mark.parametrize(\"ts_table\", ['one', 'none'], indirect=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d10305db1a197a973d9c91b439c56fce795e68d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1ODEyNA==", "bodyText": "thanks for that. You are correct! fixed.", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457458124", "createdAt": "2020-07-20T14:49:53Z", "author": {"login": "rymurr"}, "path": "python/tests/core/test_base_table_scan.py", "diffHunk": "@@ -14,11 +14,12 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-\n from iceberg.api import Schema\n from iceberg.api.types import IntegerType, NestedField\n+import pytest\n \n \n+@pytest.mark.parametrize(\"ts_table\", ['one', 'none'], indirect=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjY1OA=="}, "originalCommit": {"oid": "d10305db1a197a973d9c91b439c56fce795e68d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjU2MDk0OnYy", "diffSide": "RIGHT", "path": "python/iceberg/api/partition_spec.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDo1NTo0MVrOG0kP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxMjoxMlrOG0phOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3MzAzOQ==", "bodyText": "Why is PartitionSpecBuilder in quotes?\nNot a problem, I've just not seen that before. Schema isn't in quotes.", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457773039", "createdAt": "2020-07-21T00:55:41Z", "author": {"login": "rdblue"}, "path": "python/iceberg/api/partition_spec.py", "diffHunk": "@@ -183,7 +183,7 @@ def __repr__(self):\n         return \"\".join(sb)\n \n     @staticmethod\n-    def builder_for(schema):\n+    def builder_for(schema: Schema) -> \"PartitionSpecBuilder\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1OTM4Ng==", "bodyText": "Its because this is above the PartitionSpecBuilder class in the file. So the PartitionSpecBuilder class isn't yet reference-able. One of the small annoyances of mypy. Moving the class to the top of the file or to the a new file would fix it but create a needlessly larger diff\nNote: the same double-quote notation is used for a method in PartitionSpecBuilder which returns a PartitionSpecBuilder for the same reason, this is unfortunately unavoidable (to my knowledge) .", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457859386", "createdAt": "2020-07-21T06:12:12Z", "author": {"login": "rymurr"}, "path": "python/iceberg/api/partition_spec.py", "diffHunk": "@@ -183,7 +183,7 @@ def __repr__(self):\n         return \"\".join(sb)\n \n     @staticmethod\n-    def builder_for(schema):\n+    def builder_for(schema: Schema) -> \"PartitionSpecBuilder\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3MzAzOQ=="}, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjU2NDg3OnYy", "diffSide": "LEFT", "path": "python/tests/core/test_base_table_scan.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDo1Nzo1NlrOG0kSRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoxMjo1OFrOG0piKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3MzYzNg==", "bodyText": "Nit: this file doesn't need to change and could cause git conflicts.", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457773636", "createdAt": "2020-07-21T00:57:56Z", "author": {"login": "rdblue"}, "path": "python/tests/core/test_base_table_scan.py", "diffHunk": "@@ -14,7 +14,6 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1OTYyNw==", "bodyText": "agreed, fixed", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457859627", "createdAt": "2020-07-21T06:12:58Z", "author": {"login": "rymurr"}, "path": "python/tests/core/test_base_table_scan.py", "diffHunk": "@@ -14,7 +14,6 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3MzYzNg=="}, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjU2NjQ3OnYy", "diffSide": "RIGHT", "path": "python/tests/api/test_helpers.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDo1ODo1NVrOG0kTMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxMjoyNlrOG0_fCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3Mzg3NQ==", "bodyText": "Are the renames from Mock to Test worth the trouble? Unless this is following a python convention, it seems like this is just going to cause git conflicts.", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457773875", "createdAt": "2020-07-21T00:58:55Z", "author": {"login": "rdblue"}, "path": "python/tests/api/test_helpers.py", "diffHunk": "@@ -74,7 +74,7 @@ def predicate(self, pred):\n             return None\n \n \n-class TestDataFile(DataFile):\n+class MockDataFile(DataFile):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NTQxMw==", "bodyText": "Up to you really @rdblue. I may be nit picking but I dislike the visual noise in pytest outputs. Master writes 8-10 lines of warnings in yellow and this patch writes one line in green.\nThe rename suppresses warnings like below. Given the way pytest aggressively searches for test patterns I think its convention to only have test in the name if you want pytest to try and test it.\ntests/api/test_helpers.py:77\n  /home/ryan/workspace/iceberg/python/tests/api/test_helpers.py:77: PytestCollectionWarning: cannot collect test class 'TestDataFile' because it has a __init__ constructor (from: tests/api/test_helpers.py)\n    class TestDataFile(DataFile):", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457865413", "createdAt": "2020-07-21T06:28:41Z", "author": {"login": "rymurr"}, "path": "python/tests/api/test_helpers.py", "diffHunk": "@@ -74,7 +74,7 @@ def predicate(self, pred):\n             return None\n \n \n-class TestDataFile(DataFile):\n+class MockDataFile(DataFile):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3Mzg3NQ=="}, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1MzY1Nw==", "bodyText": "It would be preferable to not name them Test\u2026 as this is the standard prefix for classes that actually have tests.", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r457953657", "createdAt": "2020-07-21T09:14:02Z", "author": {"login": "xhochy"}, "path": "python/tests/api/test_helpers.py", "diffHunk": "@@ -74,7 +74,7 @@ def predicate(self, pred):\n             return None\n \n \n-class TestDataFile(DataFile):\n+class MockDataFile(DataFile):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3Mzg3NQ=="}, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxOTI3NA==", "bodyText": "Sounds reasonable to me.", "url": "https://github.com/apache/iceberg/pull/1214#discussion_r458219274", "createdAt": "2020-07-21T16:12:26Z", "author": {"login": "rdblue"}, "path": "python/tests/api/test_helpers.py", "diffHunk": "@@ -74,7 +74,7 @@ def predicate(self, pred):\n             return None\n \n \n-class TestDataFile(DataFile):\n+class MockDataFile(DataFile):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3Mzg3NQ=="}, "originalCommit": {"oid": "e21321fca1c4c6a477249475753b377126155a80"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3773, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}