{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MjM0MzE0", "number": 1446, "title": "Fix ConcurrentModificationException in DeleteFileIndex", "bodyText": "This fixes the tests that have been flaky in Java 11.\nThe problem was that the DeleteFileIndex uses a map from partition spec ID to thread-local StructLikeWrapper for working with partition tuples. The map was being updated with concurrent calls to computeIfAbsent, resulting in a ConcurrentModificationException.\nThat exception was causing a planning task to fail inside of ParallelIterator, which was not correctly checking for failed tasks. When a task failed, the files from the task were not added to the iterator's queue, which caused the flaky behavior. This PR also updates ParallelIterator to check for exceptions held by task futures when it checks task status to ensure that future issues will result in failures.\nThe bug does not affect any released version of Iceberg because the underlying problem was in DeleteFileIndex that has not been included in a release.", "createdAt": "2020-09-13T20:17:41Z", "url": "https://github.com/apache/iceberg/pull/1446", "merged": true, "mergeCommit": {"oid": "f71091539e1fa9e4064cfbc5141fe3e890e1a5f0"}, "closed": true, "closedAt": "2020-09-15T17:05:27Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIkVrAgH2gAyNDg2MjM0MzE0OmMyNzgyZGUzNTYwZGE5MDc1NTZiOTJkOTg1M2M4YzAzMDUwYjA1OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJJRdPAFqTQ4ODc4ODQ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/c2782de3560da907556b92d9853c8c03050b0595", "committedDate": "2020-09-13T20:08:53Z", "message": "Fix ConcurrentModificationException in DeleteFileIndex."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjI2NDg3", "url": "https://github.com/apache/iceberg/pull/1446#pullrequestreview-487626487", "createdAt": "2020-09-14T10:36:03Z", "commit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDozNjowNFrOHRNzxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDozNjowNFrOHRNzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNDA4Nw==", "bodyText": "So I see that there are multple places where ParallelIterator class is synchronized or otherwise blocking. However, from my reading of the rest of the class at least, it seems that we can submit two tasks per worker.\nIs there any way we can avoid blocking on futures indefinitely in a loop, like for example possibly somehow joining the currently running futures and then throwing as sooon as one of them throws an exception. Perhaps there's something I'm missing that makes this less of a concern than it seems initially. If that's the case, could we possibly add a comment indicating why it's not a concern?\nI'm just thinking out loud here, but to me, Future.get usually feels like a code smell.\nThough I'm supportive if this will fix flaky tests. And if there's no concern, then that's great. If there is concern, my feeling is that maybe it's best to fix the flaky tests and then open an issue to be sure to come back to this to have ParallelIterable be more... well, parallel. But again, I might be missing something that makes it more parallel than it seems to me at first glance.", "url": "https://github.com/apache/iceberg/pull/1446#discussion_r487814087", "createdAt": "2020-09-14T10:36:04Z", "author": {"login": "kbendick"}, "path": "core/src/main/java/org/apache/iceberg/util/ParallelIterable.java", "diffHunk": "@@ -98,6 +99,22 @@ private boolean checkTasks() {\n \n       for (int i = 0; i < taskFutures.length; i += 1) {\n         if (taskFutures[i] == null || taskFutures[i].isDone()) {\n+          if (taskFutures[i] != null) {\n+            // check for task failure and re-throw any exception\n+            try {\n+              taskFutures[i].get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODcyMTk3", "url": "https://github.com/apache/iceberg/pull/1446#pullrequestreview-487872197", "createdAt": "2020-09-14T15:09:19Z", "commit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowOToxOVrOHRZrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowOToxOVrOHRZrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwODY1Mw==", "bodyText": "My only question on this PR is whether we should switch to using a Caffeine loading cache here? I just notice in some places we do that, and in others we just use the concurrent map.", "url": "https://github.com/apache/iceberg/pull/1446#discussion_r488008653", "createdAt": "2020-09-14T15:09:19Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/DeleteFileIndex.java", "diffHunk": "@@ -76,7 +76,7 @@\n     ImmutableMap.Builder<Integer, Types.StructType> builder = ImmutableMap.builder();\n     specsById.forEach((specId, spec) -> builder.put(specId, spec.partitionType()));\n     this.partitionTypeById = builder.build();\n-    this.wrapperById = Maps.newHashMap();\n+    this.wrapperById = Maps.newConcurrentMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjUyNjQx", "url": "https://github.com/apache/iceberg/pull/1446#pullrequestreview-488252641", "createdAt": "2020-09-15T01:02:55Z", "commit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Nzg4NDcy", "url": "https://github.com/apache/iceberg/pull/1446#pullrequestreview-488788472", "createdAt": "2020-09-15T15:10:46Z", "commit": {"oid": "c2782de3560da907556b92d9853c8c03050b0595"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4201, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}