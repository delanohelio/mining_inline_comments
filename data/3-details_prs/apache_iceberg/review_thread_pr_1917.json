{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTM1NzI0", "number": 1917, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjowMToxMFrOFEYxyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozNjoyMlrOFGeoKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTQ0NTg1OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjowMToxMFrOIEeYRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjo1NzowOFrOIEe5TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2Mjk1MQ==", "bodyText": "nit: can use !hmsTable.getPartitionKeys().isEmpty()", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541562951", "createdAt": "2020-12-12T12:01:10Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && hmsTable.getPartitionKeys().size() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf40c143745250ab6846e4c46f1e4b4c58ac6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3MTQwNQ==", "bodyText": "Done", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541571405", "createdAt": "2020-12-12T12:57:08Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && hmsTable.getPartitionKeys().size() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2Mjk1MQ=="}, "originalCommit": {"oid": "f9ccf40c143745250ab6846e4c46f1e4b4c58ac6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTUwNTIzOnYy", "diffSide": "RIGHT", "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjo0NToxMlrOIEeyBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQyMDozODoxMVrOIErZ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2OTU0MA==", "bodyText": "Can we make runPartitionedWriteTest generic enough to reuse it here too? Would be great to have an execution test for multi-level partition as well.", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541569540", "createdAt": "2020-12-12T12:45:12Z", "author": {"login": "marton-bod"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java", "diffHunk": "@@ -666,45 +666,52 @@ public void testCreateTableWithColumnSpecification() throws IOException {\n   }\n \n   @Test\n-  public void testCreateTableWithColumnSpecificationPartitioned() {\n+  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n+    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n+    runPartitionedWriteTest(identifier, createSQLForPartitionedTableBySchema(testTables, identifier));\n+  }\n+\n+  @Test\n+  public void testCreatePartitionedTableByProperty() throws IOException {\n+    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n+    runPartitionedWriteTest(identifier, createSQLForPartitionedTableByProperty(testTables, identifier));\n+  }\n+\n+  @Test\n+  public void testCreatePartitionedTableWithPropertiesAndWithColumnSpecification() {\n+    PartitionSpec spec = PartitionSpec.builderFor(CUSTOMER_SCHEMA).identity(\"last_name\").build();\n+\n     AssertHelpers.assertThrows(\"should throw exception\", IllegalArgumentException.class,\n-        \"currently not supported\", () -> {\n+        \"Provide only one of the following\", () -> {\n           shell.executeStatement(\"CREATE EXTERNAL TABLE customers (customer_id BIGINT) \" +\n               \"PARTITIONED BY (first_name STRING) \" +\n               \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n-              testTables.locationForCreateTableSQL(TableIdentifier.of(\"default\", \"customers\")));\n+              testTables.locationForCreateTableSQL(TableIdentifier.of(\"default\", \"customers\")) +\n+              \" TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" +\n+              PartitionSpecParser.toJson(spec) + \"')\");\n         }\n     );\n   }\n \n   @Test\n-  public void testCreatePartitionedTable() throws IOException {\n+  public void testCreateTableWithColumnSpecificationMultilevelPartitioned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf40c143745250ab6846e4c46f1e4b4c58ac6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3NjM2MQ==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541776361", "createdAt": "2020-12-12T20:38:11Z", "author": {"login": "pvary"}, "path": "mr/src/test/java/org/apache/iceberg/mr/hive/TestHiveIcebergStorageHandler.java", "diffHunk": "@@ -666,45 +666,52 @@ public void testCreateTableWithColumnSpecification() throws IOException {\n   }\n \n   @Test\n-  public void testCreateTableWithColumnSpecificationPartitioned() {\n+  public void testCreateTableWithColumnSpecificationPartitioned() throws IOException {\n+    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n+    runPartitionedWriteTest(identifier, createSQLForPartitionedTableBySchema(testTables, identifier));\n+  }\n+\n+  @Test\n+  public void testCreatePartitionedTableByProperty() throws IOException {\n+    TableIdentifier identifier = TableIdentifier.of(\"default\", \"customers\");\n+    runPartitionedWriteTest(identifier, createSQLForPartitionedTableByProperty(testTables, identifier));\n+  }\n+\n+  @Test\n+  public void testCreatePartitionedTableWithPropertiesAndWithColumnSpecification() {\n+    PartitionSpec spec = PartitionSpec.builderFor(CUSTOMER_SCHEMA).identity(\"last_name\").build();\n+\n     AssertHelpers.assertThrows(\"should throw exception\", IllegalArgumentException.class,\n-        \"currently not supported\", () -> {\n+        \"Provide only one of the following\", () -> {\n           shell.executeStatement(\"CREATE EXTERNAL TABLE customers (customer_id BIGINT) \" +\n               \"PARTITIONED BY (first_name STRING) \" +\n               \"STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler' \" +\n-              testTables.locationForCreateTableSQL(TableIdentifier.of(\"default\", \"customers\")));\n+              testTables.locationForCreateTableSQL(TableIdentifier.of(\"default\", \"customers\")) +\n+              \" TBLPROPERTIES ('\" + InputFormatConfig.PARTITION_SPEC + \"'='\" +\n+              PartitionSpecParser.toJson(spec) + \"')\");\n         }\n     );\n   }\n \n   @Test\n-  public void testCreatePartitionedTable() throws IOException {\n+  public void testCreateTableWithColumnSpecificationMultilevelPartitioned() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2OTU0MA=="}, "originalCommit": {"oid": "f9ccf40c143745250ab6846e4c46f1e4b4c58ac6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTUwOTkzOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjo0ODo0NFrOIEe0Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjo1NzoxNlrOIEe5gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3MDA2Mg==", "bodyText": "nit: shall we check hmsTable.isSetPartitionKeys() here? in other places we seem to use that instead of the null check", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541570062", "createdAt": "2020-12-12T12:48:44Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && hmsTable.getPartitionKeys().size() != 0) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());\n+        cols.addAll(hmsTable.getPartitionKeys());\n+        return HiveSchemaUtil.convert(cols);\n+      } else {\n+        return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      }\n     }\n   }\n \n   private static PartitionSpec spec(Schema schema, Properties properties,\n       org.apache.hadoop.hive.metastore.api.Table hmsTable) {\n \n-    Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),\n-        \"Partitioned Hive tables are currently not supported\");\n-\n     if (properties.getProperty(InputFormatConfig.PARTITION_SPEC) != null) {\n+      Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf40c143745250ab6846e4c46f1e4b4c58ac6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3MTQ1Ng==", "bodyText": "Done", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541571456", "createdAt": "2020-12-12T12:57:16Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && hmsTable.getPartitionKeys().size() != 0) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());\n+        cols.addAll(hmsTable.getPartitionKeys());\n+        return HiveSchemaUtil.convert(cols);\n+      } else {\n+        return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      }\n     }\n   }\n \n   private static PartitionSpec spec(Schema schema, Properties properties,\n       org.apache.hadoop.hive.metastore.api.Table hmsTable) {\n \n-    Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),\n-        \"Partitioned Hive tables are currently not supported\");\n-\n     if (properties.getProperty(InputFormatConfig.PARTITION_SPEC) != null) {\n+      Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3MDA2Mg=="}, "originalCommit": {"oid": "f9ccf40c143745250ab6846e4c46f1e4b4c58ac6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU1NDEzOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoyMDo0NVrOIEfHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQyMDozODoyNFrOIErZ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDk5NA==", "bodyText": "shouldn't this be !hmsTable.isSetPartitionKeys()?", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541574994", "createdAt": "2020-12-12T13:20:45Z", "author": {"login": "marton-bod"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());\n+        cols.addAll(hmsTable.getPartitionKeys());\n+        return HiveSchemaUtil.convert(cols);\n+      } else {\n+        return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      }\n     }\n   }\n \n   private static PartitionSpec spec(Schema schema, Properties properties,\n       org.apache.hadoop.hive.metastore.api.Table hmsTable) {\n \n-    Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),\n-        \"Partitioned Hive tables are currently not supported\");\n-\n     if (properties.getProperty(InputFormatConfig.PARTITION_SPEC) != null) {\n+      Preconditions.checkArgument(hmsTable.isSetPartitionKeys() || hmsTable.getPartitionKeys().isEmpty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04073e2ca7626be583375c66c38be12b29e9a1cd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc3NjM3Ng==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r541776376", "createdAt": "2020-12-12T20:38:24Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());\n+        cols.addAll(hmsTable.getPartitionKeys());\n+        return HiveSchemaUtil.convert(cols);\n+      } else {\n+        return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      }\n     }\n   }\n \n   private static PartitionSpec spec(Schema schema, Properties properties,\n       org.apache.hadoop.hive.metastore.api.Table hmsTable) {\n \n-    Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),\n-        \"Partitioned Hive tables are currently not supported\");\n-\n     if (properties.getProperty(InputFormatConfig.PARTITION_SPEC) != null) {\n+      Preconditions.checkArgument(hmsTable.isSetPartitionKeys() || hmsTable.getPartitionKeys().isEmpty(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDk5NA=="}, "originalCommit": {"oid": "04073e2ca7626be583375c66c38be12b29e9a1cd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzM2NDk4OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMjowMFrOIHgkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo1MDoyM1rOIOSoxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDYwOA==", "bodyText": "Nit: generally prefer Lists.newArrayList() to specific class constructors.", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r544744608", "createdAt": "2020-12-17T01:32:00Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1NjMyNg==", "bodyText": "Fix in #2029", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r551856326", "createdAt": "2021-01-05T10:50:23Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDYwOA=="}, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzM2NzE3OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMjo0MVrOIHglwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo1MDozMlrOIOSpBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDg5Nw==", "bodyText": "Nit: this could be an else if to remove a level of indentation.", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r544744897", "createdAt": "2020-12-17T01:32:41Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1NjM4OA==", "bodyText": "Fix in #2029", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r551856388", "createdAt": "2021-01-05T10:50:32Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NDg5Nw=="}, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzM2ODM3OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozMzoyOFrOIHgmew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo1MToyMFrOIOSqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NTA4Mw==", "bodyText": "When would isSetPartitionKeys() be true and getPartitionKeys() empty?", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r544745083", "createdAt": "2020-12-17T01:33:28Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1Njc3OA==", "bodyText": "Theoretically it could be set to an empty list. Checked this way to keep on the safe side.", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r551856778", "createdAt": "2021-01-05T10:51:20Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NTA4Mw=="}, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzM3MDAwOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozNDowN1rOIHgnVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo1MTozNFrOIOSq8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NTMwMg==", "bodyText": "Nit: could be else if case.", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r544745302", "createdAt": "2020-12-17T01:34:07Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());\n+        cols.addAll(hmsTable.getPartitionKeys());\n+        return HiveSchemaUtil.convert(cols);\n+      } else {\n+        return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      }\n     }\n   }\n \n   private static PartitionSpec spec(Schema schema, Properties properties,\n       org.apache.hadoop.hive.metastore.api.Table hmsTable) {\n \n-    Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),\n-        \"Partitioned Hive tables are currently not supported\");\n-\n     if (properties.getProperty(InputFormatConfig.PARTITION_SPEC) != null) {\n+      Preconditions.checkArgument(!hmsTable.isSetPartitionKeys() || hmsTable.getPartitionKeys().isEmpty(),\n+          \"Provide only one of the following: Hive partition specification, or the \" +\n+              InputFormatConfig.PARTITION_SPEC + \" property\");\n       return PartitionSpecParser.fromJson(schema, properties.getProperty(InputFormatConfig.PARTITION_SPEC));\n     } else {\n-      return PartitionSpec.unpartitioned();\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1Njg4Mg==", "bodyText": "Fix in #2029", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r551856882", "createdAt": "2021-01-05T10:51:34Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/hive/HiveIcebergMetaHook.java", "diffHunk": "@@ -197,20 +205,32 @@ private static Schema schema(Properties properties, org.apache.hadoop.hive.metas\n     if (properties.getProperty(InputFormatConfig.TABLE_SCHEMA) != null) {\n       return SchemaParser.fromJson(properties.getProperty(InputFormatConfig.TABLE_SCHEMA));\n     } else {\n-      return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {\n+        // Add partitioning columns to the original column list before creating the Iceberg Schema\n+        List<FieldSchema> cols = new ArrayList<>(hmsTable.getSd().getCols());\n+        cols.addAll(hmsTable.getPartitionKeys());\n+        return HiveSchemaUtil.convert(cols);\n+      } else {\n+        return HiveSchemaUtil.convert(hmsTable.getSd().getCols());\n+      }\n     }\n   }\n \n   private static PartitionSpec spec(Schema schema, Properties properties,\n       org.apache.hadoop.hive.metastore.api.Table hmsTable) {\n \n-    Preconditions.checkArgument(hmsTable.getPartitionKeys() == null || hmsTable.getPartitionKeys().isEmpty(),\n-        \"Partitioned Hive tables are currently not supported\");\n-\n     if (properties.getProperty(InputFormatConfig.PARTITION_SPEC) != null) {\n+      Preconditions.checkArgument(!hmsTable.isSetPartitionKeys() || hmsTable.getPartitionKeys().isEmpty(),\n+          \"Provide only one of the following: Hive partition specification, or the \" +\n+              InputFormatConfig.PARTITION_SPEC + \" property\");\n       return PartitionSpecParser.fromJson(schema, properties.getProperty(InputFormatConfig.PARTITION_SPEC));\n     } else {\n-      return PartitionSpec.unpartitioned();\n+      if (hmsTable.isSetPartitionKeys() && !hmsTable.getPartitionKeys().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NTMwMg=="}, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzM3NTc4OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTozNjoyMlrOIHgqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMDo1MTo1M1rOIOSriw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NjA5OQ==", "bodyText": "Why was this needed? Additional tasks because of partitioning?", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r544746099", "createdAt": "2020-12-17T01:36:22Z", "author": {"login": "rdblue"}, "path": "build.gradle", "diffHunk": "@@ -542,7 +542,7 @@ project(':iceberg-mr') {\n \n   test {\n     // testJoinTables / testScanTable\n-    maxHeapSize '1500m'\n+    maxHeapSize '2500m'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1NzAzNQ==", "bodyText": "Yeah. The extra tasks eat more memory :(", "url": "https://github.com/apache/iceberg/pull/1917#discussion_r551857035", "createdAt": "2021-01-05T10:51:53Z", "author": {"login": "pvary"}, "path": "build.gradle", "diffHunk": "@@ -542,7 +542,7 @@ project(':iceberg-mr') {\n \n   test {\n     // testJoinTables / testScanTable\n-    maxHeapSize '1500m'\n+    maxHeapSize '2500m'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0NjA5OQ=="}, "originalCommit": {"oid": "ff585b45f95684a236aacd7fd8f1dbc177ab0765"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3326, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}