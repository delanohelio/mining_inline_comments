{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTgzNzM0", "number": 1153, "title": "Flink: Add Avro value reader, writer implementations", "bodyText": "I implemented the flink avro reader writer, also raise the issue #1152. Please take a look, @rdblue .\nThanks in advance.", "createdAt": "2020-07-01T09:53:47Z", "url": "https://github.com/apache/iceberg/pull/1153", "merged": true, "mergeCommit": {"oid": "bc7bd0e30839740d0d9d7430cac984c10659ca38"}, "closed": true, "closedAt": "2020-07-03T16:13:55Z", "author": {"login": "openinx"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwnJ1OgH2gAyNDQyNTgzNzM0OjY5ZGM5YWIwZTIwZmY3YTQ3MTRiOWY5ZjM4Y2U1MmZmYzMwMjllNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxV0OIgFqTQ0MjQ5NjQxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69dc9ab0e20ff7a4714b9f9f38ce52ffc3029e5d", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/69dc9ab0e20ff7a4714b9f9f38ce52ffc3029e5d", "committedDate": "2020-07-01T09:51:29Z", "message": "Flink: Add Avro value reader, writer implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/ca598e41fbcfa7fed08aeeec5427590d6f833af1", "committedDate": "2020-07-02T11:28:31Z", "message": "Fix the checkstyles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTc4NTE3", "url": "https://github.com/apache/iceberg/pull/1153#pullrequestreview-441978517", "createdAt": "2020-07-02T19:50:32Z", "commit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1MDozMlrOGsbGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1MDozMlrOGsbGhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDU2Ng==", "bodyText": "To make sure the projection is done correctly in the record reader, can you add a projection test? Here's the one we use for Iceberg generics and Avro: https://github.com/apache/iceberg/blob/master/data/src/test/java/org/apache/iceberg/data/avro/TestGenericReadProjection.java", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449234566", "createdAt": "2020-07-02T19:50:32Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkAvroReaderWriter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import org.apache.flink.types.Row;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.FileAppender;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.flink.data.RandomData.COMPLEX_SCHEMA;\n+\n+public class TestFlinkAvroReaderWriter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTc4ODM4", "url": "https://github.com/apache/iceberg/pull/1153#pullrequestreview-441978838", "createdAt": "2020-07-02T19:51:10Z", "commit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1MToxMFrOGsbHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1MToxMFrOGsbHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDg0Mg==", "bodyText": "How many records have you tested with?", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449234842", "createdAt": "2020-07-02T19:51:10Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestFlinkAvroReaderWriter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import org.apache.flink.types.Row;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.FileAppender;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import static org.apache.iceberg.flink.data.RandomData.COMPLEX_SCHEMA;\n+\n+public class TestFlinkAvroReaderWriter {\n+  private static final int NUM_RECORDS = 20_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTc5NjY1", "url": "https://github.com/apache/iceberg/pull/1153#pullrequestreview-441979665", "createdAt": "2020-07-02T19:52:37Z", "commit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1MjozN1rOGsbKFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1MjozN1rOGsbKFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNTQ3Nw==", "bodyText": "Should setWriter be used in setSchema above for this class as well?", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449235477", "createdAt": "2020-07-02T19:52:37Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java", "diffHunk": "@@ -50,13 +50,17 @@ public void setSchema(Schema schema) {\n     this.writer = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n   }\n \n+  protected void setWriter(ValueWriter<T> writer) {\n+    this.writer = writer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTgwNjEz", "url": "https://github.com/apache/iceberg/pull/1153#pullrequestreview-441980613", "createdAt": "2020-07-02T19:54:24Z", "commit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1NDoyNFrOGsbNAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTo1NDoyNFrOGsbNAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNjIyNQ==", "bodyText": "Can we remove the constructor since it is empty?", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449236225", "createdAt": "2020-07-02T19:54:24Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/data/avro/DataWriter.java", "diffHunk": "@@ -50,13 +50,17 @@ public void setSchema(Schema schema) {\n     this.writer = (ValueWriter<T>) AvroSchemaVisitor.visit(schema, new WriteBuilder());\n   }\n \n+  protected void setWriter(ValueWriter<T> writer) {\n+    this.writer = writer;\n+  }\n+\n   @Override\n   public void write(T datum, Encoder out) throws IOException {\n     writer.write(datum, out);\n   }\n \n-  private static class WriteBuilder extends AvroSchemaVisitor<ValueWriter<?>> {\n-    private WriteBuilder() {\n+  protected static class WriteBuilder extends AvroSchemaVisitor<ValueWriter<?>> {\n+    protected WriteBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca598e41fbcfa7fed08aeeec5427590d6f833af1"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "576a47d66670e1bdc7a7e85bc0095f4874645a26", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/576a47d66670e1bdc7a7e85bc0095f4874645a26", "committedDate": "2020-07-03T05:06:47Z", "message": "Make the ReaderBuilder & WriterBuilder private access and provid the avro project unit tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61584831bc5d5a60179a99dc6f6e88c877f7f756", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/61584831bc5d5a60179a99dc6f6e88c877f7f756", "committedDate": "2020-07-03T09:12:02Z", "message": "More unit tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDk2NDEz", "url": "https://github.com/apache/iceberg/pull/1153#pullrequestreview-442496413", "createdAt": "2020-07-03T16:13:25Z", "commit": {"oid": "61584831bc5d5a60179a99dc6f6e88c877f7f756"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxMzoyNVrOGs0ZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxMzoyNVrOGs0ZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTA5Nw==", "bodyText": "Looks good. We may want to also apply these cases to ORC and Parquet also.", "url": "https://github.com/apache/iceberg/pull/1153#discussion_r449649097", "createdAt": "2020-07-03T16:13:25Z", "author": {"login": "rdblue"}, "path": "flink/src/test/java/org/apache/iceberg/flink/data/TestRowProjection.java", "diffHunk": "@@ -0,0 +1,570 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.flink.types.Row;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Comparators;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class TestRowProjection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61584831bc5d5a60179a99dc6f6e88c877f7f756"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4582, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}