{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTA5Nzg0", "number": 1648, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0Mzo0NVrOFK9zDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQyMzo1NDoyOVrOFpAekw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDQyNTc1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0Mzo0NVrOIN4zaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMjowNjozMlrOIQPz7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzA2NA==", "bodyText": "This comment looks like the victim of an unintended search and replace.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r551433064", "createdAt": "2021-01-04T16:43:45Z", "author": {"login": "massdosage"}, "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "diffHunk": "@@ -28,7 +30,8 @@ private AssertHelpers() {\n   }\n \n   /**\n-   * A convenience method to avoid a large number of @Test(expected=...) tests\n+   * A convenience method to avoid a large numb/test/java/org/apache/iceberg/TestHelpers.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3451c821812972b9a018efe8c358ef29602686f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwNzE4Mg==", "bodyText": "Good catch, thanks!", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r553907182", "createdAt": "2021-01-08T12:06:32Z", "author": {"login": "Fokko"}, "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "diffHunk": "@@ -28,7 +30,8 @@ private AssertHelpers() {\n   }\n \n   /**\n-   * A convenience method to avoid a large number of @Test(expected=...) tests\n+   * A convenience method to avoid a large numb/test/java/org/apache/iceberg/TestHelpers.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzA2NA=="}, "originalCommit": {"oid": "c3451c821812972b9a018efe8c358ef29602686f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDU5MDM2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTo0MjoxMlrOISRmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTo0MjoxMlrOISRmkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzMzY4Mw==", "bodyText": "Remove this? Seems to be a remnant of the previous search/replace.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r556033683", "createdAt": "2021-01-12T19:42:12Z", "author": {"login": "shardulm94"}, "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "diffHunk": "@@ -29,6 +31,7 @@ private AssertHelpers() {\n \n   /**\n    * A convenience method to avoid a large number of @Test(expected=...) tests\n+   * of @Test(expected=...) tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6207fc11cc752ac2e2d721442ae0b2b63012d08"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDYwNTE5OnYy", "diffSide": "RIGHT", "path": "versions.props", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTo0NTozNFrOISRvaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODo1NDo1NlrOISlVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzNTk0NA==", "bodyText": "Can we bump this to Avro 1.10.1? I was specifically interested in https://issues.apache.org/jira/browse/AVRO-2817. I can also create a followup PR if you prefer and leave it at 1.10.0 here.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r556035944", "createdAt": "2021-01-12T19:45:34Z", "author": {"login": "shardulm94"}, "path": "versions.props", "diffHunk": "@@ -1,5 +1,5 @@\n org.slf4j:* = 1.7.25\n-org.apache.avro:avro = 1.9.2\n+org.apache.avro:avro = 1.10.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6207fc11cc752ac2e2d721442ae0b2b63012d08"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM1Njk0NA==", "bodyText": "I've bumped it to 1.10.1", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r556356944", "createdAt": "2021-01-13T08:54:56Z", "author": {"login": "Fokko"}, "path": "versions.props", "diffHunk": "@@ -1,5 +1,5 @@\n org.slf4j:* = 1.7.25\n-org.apache.avro:avro = 1.9.2\n+org.apache.avro:avro = 1.10.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzNTk0NA=="}, "originalCommit": {"oid": "f6207fc11cc752ac2e2d721442ae0b2b63012d08"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTY3NTQ3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwOToxMToxNlrOIeGl_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwODo1OToxNVrOIhYehg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQzNjIyMg==", "bodyText": "Javadoc looks wrong, cut and paste error?", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r568436222", "createdAt": "2021-02-02T09:11:16Z", "author": {"login": "massdosage"}, "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "diffHunk": "@@ -137,4 +139,16 @@ private static void handleException(String message,\n       throw e;\n     }\n   }\n+\n+  /**\n+   * A convenience method to assert the cause of thrown exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a6e5ca87eea919e86221c00db62902b742c154"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTg3NDk1MA==", "bodyText": "Good catch, thanks!", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r571874950", "createdAt": "2021-02-08T08:59:15Z", "author": {"login": "Fokko"}, "path": "api/src/test/java/org/apache/iceberg/AssertHelpers.java", "diffHunk": "@@ -137,4 +139,16 @@ private static void handleException(String message,\n       throw e;\n     }\n   }\n+\n+  /**\n+   * A convenience method to assert the cause of thrown exception.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQzNjIyMg=="}, "originalCommit": {"oid": "24a6e5ca87eea919e86221c00db62902b742c154"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MTY4MTg2OnYy", "diffSide": "RIGHT", "path": "parquet/src/test/java/org/apache/iceberg/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwOToxMjo0NVrOIeGp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwODo1OToxOVrOIhYetQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQzNzI0Nw==", "bodyText": "Same here.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r568437247", "createdAt": "2021-02-02T09:12:45Z", "author": {"login": "massdosage"}, "path": "parquet/src/test/java/org/apache/iceberg/TestHelpers.java", "diffHunk": "@@ -85,4 +87,17 @@ private static void handleException(String message,\n       throw e;\n     }\n   }\n+\n+  /**\n+   * A convenience method to assert the cause of thrown exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a6e5ca87eea919e86221c00db62902b742c154"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTg3NDk5Nw==", "bodyText": "Good catch, thanks!", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r571874997", "createdAt": "2021-02-08T08:59:19Z", "author": {"login": "Fokko"}, "path": "parquet/src/test/java/org/apache/iceberg/TestHelpers.java", "diffHunk": "@@ -85,4 +87,17 @@ private static void handleException(String message,\n       throw e;\n     }\n   }\n+\n+  /**\n+   * A convenience method to assert the cause of thrown exception.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQzNzI0Nw=="}, "originalCommit": {"oid": "24a6e5ca87eea919e86221c00db62902b742c154"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NzczNjk2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQyMzo0MDo0N1rOIpBb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMVQxMDowMjoxMFrOI0yZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4NjAzNQ==", "bodyText": "I think this should still use projectedLocation. Looks like it might just be a typo.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r579886035", "createdAt": "2021-02-21T23:40:47Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java", "diffHunk": "@@ -221,10 +221,10 @@ public void testNestedStructProjection() throws Exception {\n     );\n \n     projected = writeAndRead(\"latitude_only\", writeSchema, latOnly, record);\n-    projectedLocation = (Record) projected.get(\"location\");\n-    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n+    Record projectedLocation = (Record) projected.get(\"location\");\n+    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n     Assert.assertNotNull(\"Should project location\", projected.get(\"location\"));\n-    Assert.assertNull(\"Should not project longitude\", projectedLocation.get(\"long\"));\n+    AssertHelpers.assertEmptyAvroField(projected, \"long\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f5901b8f683bc9e06115ffd3319a9b93c3afb4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjIyMjQ4OA==", "bodyText": "Good catch, probably a copy-paste!", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r592222488", "createdAt": "2021-03-11T10:02:10Z", "author": {"login": "Fokko"}, "path": "core/src/test/java/org/apache/iceberg/avro/TestReadProjection.java", "diffHunk": "@@ -221,10 +221,10 @@ public void testNestedStructProjection() throws Exception {\n     );\n \n     projected = writeAndRead(\"latitude_only\", writeSchema, latOnly, record);\n-    projectedLocation = (Record) projected.get(\"location\");\n-    Assert.assertNull(\"Should not project id\", projected.get(\"id\"));\n+    Record projectedLocation = (Record) projected.get(\"location\");\n+    AssertHelpers.assertEmptyAvroField(projected, \"id\");\n     Assert.assertNotNull(\"Should project location\", projected.get(\"location\"));\n-    Assert.assertNull(\"Should not project longitude\", projectedLocation.get(\"long\"));\n+    AssertHelpers.assertEmptyAvroField(projected, \"long\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4NjAzNQ=="}, "originalCommit": {"oid": "04f5901b8f683bc9e06115ffd3319a9b93c3afb4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1Nzc0MjQ0OnYy", "diffSide": "RIGHT", "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetAvro.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQyMzo0NjoyOFrOIpBelQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxODoyMDo0OVrOI3CRcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4Njc0MQ==", "bodyText": "This change results in creating a new Decimal for every value. While I don't think that we use this very much, I would rather not introduce object allocation for every conversion. Can you add a static cache for these? That was the purpose of decimalsByScale.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r579886741", "createdAt": "2021-02-21T23:46:28Z", "author": {"login": "rdblue"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetAvro.java", "diffHunk": "@@ -169,12 +164,14 @@ public String getLogicalTypeName() {\n \n     @Override\n     public BigDecimal fromFixed(GenericFixed value, Schema schema, LogicalType type) {\n-      return super.fromFixed(value, schema, decimalsByScale[((ParquetDecimal) type).scale()]);\n+      final ParquetDecimal dec = (ParquetDecimal) type;\n+      return super.fromFixed(value, schema, LogicalTypes.decimal(dec.precision(), dec.scale()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f5901b8f683bc9e06115ffd3319a9b93c3afb4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjIzNTI4NQ==", "bodyText": "I know, but we didn't take the scale into account, so it could actually change the scale. I fixed this in the fromFixed by directly creating the BigDecimal, this is what's happening in the Avro library:\n    @Override\n    public BigDecimal fromFixed(GenericFixed value, Schema schema, LogicalType type) {\n      int scale = ((LogicalTypes.Decimal) type).getScale();\n      return new BigDecimal(new BigInteger(value.bytes()), scale);\n    }\n\nFor the toFixed this isn't that trivial, since this would mean copying a lot of code.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r592235285", "createdAt": "2021-03-11T10:19:23Z", "author": {"login": "Fokko"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetAvro.java", "diffHunk": "@@ -169,12 +164,14 @@ public String getLogicalTypeName() {\n \n     @Override\n     public BigDecimal fromFixed(GenericFixed value, Schema schema, LogicalType type) {\n-      return super.fromFixed(value, schema, decimalsByScale[((ParquetDecimal) type).scale()]);\n+      final ParquetDecimal dec = (ParquetDecimal) type;\n+      return super.fromFixed(value, schema, LogicalTypes.decimal(dec.precision(), dec.scale()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4Njc0MQ=="}, "originalCommit": {"oid": "04f5901b8f683bc9e06115ffd3319a9b93c3afb4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDU3OTgyNw==", "bodyText": "I think it's fine to delegate to toFixed. I just don't want to call LogicalTypes.decimal every time to create a new decimal LogicalType with the same scale and precision. I think just adding a cache keyed by a Pair of scale and precision would fix it.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r594579827", "createdAt": "2021-03-15T18:20:49Z", "author": {"login": "rdblue"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetAvro.java", "diffHunk": "@@ -169,12 +164,14 @@ public String getLogicalTypeName() {\n \n     @Override\n     public BigDecimal fromFixed(GenericFixed value, Schema schema, LogicalType type) {\n-      return super.fromFixed(value, schema, decimalsByScale[((ParquetDecimal) type).scale()]);\n+      final ParquetDecimal dec = (ParquetDecimal) type;\n+      return super.fromFixed(value, schema, LogicalTypes.decimal(dec.precision(), dec.scale()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg4Njc0MQ=="}, "originalCommit": {"oid": "04f5901b8f683bc9e06115ffd3319a9b93c3afb4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc4NTQzNzYzOnYy", "diffSide": "RIGHT", "path": "versions.props", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQyMzo1NDoyOVrOI7ZTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMDo0Njo1MFrOI8I5jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE1MTQwMA==", "bodyText": "Hi, @Fokko .\nCould you update this PR with 1.10.2?", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r599151400", "createdAt": "2021-03-22T23:54:29Z", "author": {"login": "dongjoon-hyun"}, "path": "versions.props", "diffHunk": "@@ -1,5 +1,5 @@\n org.slf4j:* = 1.7.25\n-org.apache.avro:avro = 1.9.2\n+org.apache.avro:avro = 1.10.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbe6ca303193ecdbe642f8be6814aff08e3e9a0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTkzMTI3OQ==", "bodyText": "Done! Thanks for pointing out.", "url": "https://github.com/apache/iceberg/pull/1648#discussion_r599931279", "createdAt": "2021-03-23T20:46:50Z", "author": {"login": "Fokko"}, "path": "versions.props", "diffHunk": "@@ -1,5 +1,5 @@\n org.slf4j:* = 1.7.25\n-org.apache.avro:avro = 1.9.2\n+org.apache.avro:avro = 1.10.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE1MTQwMA=="}, "originalCommit": {"oid": "5cbe6ca303193ecdbe642f8be6814aff08e3e9a0"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3343, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}