{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Nzc5MDA1", "number": 1464, "title": "Flink: Add flink sink document", "bodyText": "It's the document for flink sink connector, pls apply this patch after applied the PR #1423.", "createdAt": "2020-09-16T07:04:27Z", "url": "https://github.com/apache/iceberg/pull/1464", "merged": true, "mergeCommit": {"oid": "c4f8bc3f4ff240724ad47734609928ea45e70e4d"}, "closed": true, "closedAt": "2020-10-01T17:52:00Z", "author": {"login": "openinx"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJgrTigFqTQ4OTkxNDU1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMbjdvAFqTQ5Njc5MDk2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTE0NTUz", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489914553", "createdAt": "2020-09-16T18:26:47Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoyNjo0OVrOHS9FOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoyNjo0OVrOHS9FOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYzNzE3OQ==", "bodyText": "This is a SQL command, right? So we might want to use upper case to distinguish the keywords?\nCREATE CATALOG hive_catalog WITH (\n  ...\n);", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489637179", "createdAt": "2020-09-16T18:26:49Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTE0OTgw", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489914980", "createdAt": "2020-09-16T18:27:25Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoyNzoyNVrOHS9H1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODoyNzoyNVrOHS9H1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYzNzg0NA==", "bodyText": "This sets the current catalog?", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489637844", "createdAt": "2020-09-16T18:27:25Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTE3Mzg5", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489917389", "createdAt": "2020-09-16T18:30:57Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozMDo1N1rOHS9YZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozMDo1N1rOHS9YZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY0MjA4NA==", "bodyText": "Could we move these support notes into the table at the top? I think it would be good to have the description for ALTER TABLE note that columns can't be changed with Flink SQL. I'd prefer not to have sections that state what Flink does not support, since we want that easily available in the compatibility table. That also makes it easier to update the docs because we only add sections, we don't have to find and remove them.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489642084", "createdAt": "2020-09-16T18:30:57Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration)\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### Adding/Removing/Renaming table columns\n+\n+Iceberg does not support adding/removing/renaming table columns now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 178}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTIyMDAx", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489922001", "createdAt": "2020-09-16T18:37:52Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozNzo1MlrOHS95Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozNzo1MlrOHS95Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY1MDQ1MA==", "bodyText": "Should this note that PARTITION BY does not yet support hidden partitioning?", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489650450", "createdAt": "2020-09-16T18:37:52Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTIzMjM4", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489923238", "createdAt": "2020-09-16T18:39:46Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozOTo0NlrOHS-Beg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozOTo0NlrOHS-Beg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY1MjYwMg==", "bodyText": "Are these stored in table properties?", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489652602", "createdAt": "2020-09-16T18:39:46Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTIzNDM2", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489923436", "createdAt": "2020-09-16T18:40:03Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo0MDowM1rOHS-C2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo0MDowM1rOHS-C2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY1Mjk1NQ==", "bodyText": "Is UNSET supported as well?", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489652955", "createdAt": "2020-09-16T18:40:03Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration)\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTI0Njky", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489924692", "createdAt": "2020-09-16T18:42:01Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo0MjowMVrOHS-Kag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODo0MjowMVrOHS-Kag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY1NDg5MA==", "bodyText": "INSERT OVERWRITE can only be used in batch mode, right? Otherwise it doesn't make sense as an operation because you would only ever get 1 checkpoint of data in a partition.\nIf so, it would be good to have a note that calls it out.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489654890", "createdAt": "2020-09-16T18:42:01Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration)\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### Adding/Removing/Renaming table columns\n+\n+Iceberg does not support adding/removing/renaming table columns now.\n+\n+### Altering tables' partition keys.\n+\n+Iceberg does not support altering partition keys now.\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES 1, 'a';\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE`. Overwrites are atomic operations for Iceberg tables.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTUwOTgy", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489950982", "createdAt": "2020-09-16T19:20:23Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyMDoyM1rOHTAy7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyMDoyM1rOHTAy7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5ODAzMA==", "bodyText": "The documentation for overwrites doesn't account for hidden partitions.\n\nWhen all the partition columns are set a value in PARTITION clause, it is inserting into a static partition. . . . When partial partition columns (prefix part of all partition columns) are set a value in PARTITION clause, it is writing the query result into a dynamic partition.\n\nIt would be great to clarify how hidden partitions are handled in that documentation, but it definitely needs to be covered here.\nI think this should also specifically say that unpartitioned tables are completely overwritten by INSERT OVERWRITE.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489698030", "createdAt": "2020-09-16T19:20:23Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration)\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### Adding/Removing/Renaming table columns\n+\n+Iceberg does not support adding/removing/renaming table columns now.\n+\n+### Altering tables' partition keys.\n+\n+Iceberg does not support altering partition keys now.\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES 1, 'a';\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE`. Overwrites are atomic operations for Iceberg tables.\n+\n+Partitions that have rows produced by the SELECT query will be replaced, for example:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample VALUES 1, 'a'\n+```\n+\n+Iceberg also support overwriting given partitions by the `select` values:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample PARTITION(data='a') SELECT 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTc0NzE5", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-489974719", "createdAt": "2020-09-16T19:56:16Z", "commit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1NjoxN1rOHTCDug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1NjoxN1rOHTCDug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODcxNA==", "bodyText": "Should this be input?", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r489718714", "createdAt": "2020-09-16T19:56:17Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,277 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 |                                                        |\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier\n+for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html).\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.11.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).\n+\n+Step.4 Start the flink SQL client:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+create catalog hive_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='1',\n+  'property-version'='1'\n+);\n+```\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+create catalog hadoop_catalog with(\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+We could execute the sql command `use catalog hive_catalog` to use one of the catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support most common [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration)\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### Adding/Removing/Renaming table columns\n+\n+Iceberg does not support adding/removing/renaming table columns now.\n+\n+### Altering tables' partition keys.\n+\n+Iceberg does not support altering partition keys now.\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES 1, 'a';\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE`. Overwrites are atomic operations for Iceberg tables.\n+\n+Partitions that have rows produced by the SELECT query will be replaced, for example:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample VALUES 1, 'a'\n+```\n+\n+Iceberg also support overwriting given partitions by the `select` values:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample PARTITION(data='a') SELECT 6;\n+```\n+\n+## Reading with DataStream\n+\n+Iceberg does not support streaming or batch read now, but it's working in-progress.\n+\n+## Writing with DataStream\n+\n+Iceberg support writing to iceberg table from different DataStream input.\n+\n+\n+### Appending data.\n+\n+we have supported to write `DataStream<RowData>` and `DataStream<Row` to target iceberg table natively.\n+\n+```java\n+StreamExecutionEnvironment env = ...;\n+\n+DataStream<RowData> input = ... ;\n+Configuration hadoopConf = new Configuration();\n+TableLoader tableLoader = TableLoader.fromHadooptable(\"hdfs://nn:8020/warehouse/path\");\n+\n+FlinkSink.forRowData(dataStream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711"}, "originalPosition": 245}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dafbc65c3f3e998edc52274b397a2bf3779621c0", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/dafbc65c3f3e998edc52274b397a2bf3779621c0", "committedDate": "2020-09-17T01:53:07Z", "message": "Add flink document"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c0fed1645d8ac1ad9d0881bb2b01f96d06fb02", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/f4c0fed1645d8ac1ad9d0881bb2b01f96d06fb02", "committedDate": "2020-09-17T02:29:05Z", "message": "Addressing the comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "438f7b3eab02e90bbd06a72f08d7799db49f6711", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/438f7b3eab02e90bbd06a72f08d7799db49f6711", "committedDate": "2020-09-16T06:25:58Z", "message": "Add flink document"}, "afterCommit": {"oid": "f4c0fed1645d8ac1ad9d0881bb2b01f96d06fb02", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/f4c0fed1645d8ac1ad9d0881bb2b01f96d06fb02", "committedDate": "2020-09-17T02:29:05Z", "message": "Addressing the comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e8c1035b7174f752ff8d0b2bd16e39c2159bec", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/c9e8c1035b7174f752ff8d0b2bd16e39c2159bec", "committedDate": "2020-09-17T03:33:23Z", "message": "Fix the typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31cf6214b4bf94e1f63f847949c066d6960a9db", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/d31cf6214b4bf94e1f63f847949c066d6960a9db", "committedDate": "2020-09-17T04:38:26Z", "message": "Add command to switch between streaming and batch mode."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMDAzNDEw", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-493003410", "createdAt": "2020-09-21T21:46:33Z", "commit": {"oid": "d31cf6214b4bf94e1f63f847949c066d6960a9db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c441a6c175b442e8da46cfe7cbd6b51540f6521", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/3c441a6c175b442e8da46cfe7cbd6b51540f6521", "committedDate": "2020-09-22T06:36:05Z", "message": "Minor changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTg1Nzc1", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-495185775", "createdAt": "2020-09-24T02:57:52Z", "commit": {"oid": "3c441a6c175b442e8da46cfe7cbd6b51540f6521"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo1Nzo1MlrOHXH8Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo1Nzo1MlrOHXH8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwOTM1OQ==", "bodyText": "The apache official repository does not provide  iceberg-flink-runtime.jar  now ,the link is iceberg-flink ,not iceberg-flink-runtime.jar", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r494009359", "createdAt": "2020-09-24T02:57:52Z", "author": {"login": "zhangjun0x01"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink/).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c441a6c175b442e8da46cfe7cbd6b51540f6521"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99", "author": {"user": {"login": "openinx", "name": "openinx"}}, "url": "https://github.com/apache/iceberg/commit/b2764a188eb3fe191f0e67e1bc5af5a9be180d99", "committedDate": "2020-09-24T08:08:20Z", "message": "the iceberg-flink-runtime downloading url should be under the flink-runtime."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDMxNDI0", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-495431424", "createdAt": "2020-09-24T10:29:28Z", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyOToyOFrOHXUBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyOToyOFrOHXUBZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNzMzMg==", "bodyText": "It's necessary to fix this issue #1437 before we get this pr merged,  because when i create the hive_catalog, it will try to create the default database but failed to :\nFlink SQL> CREATE CATALOG hive_catalog WITH (\n>   'type'='iceberg',\n>   'catalog-type'='hive',\n>   'uri'='thrift://localhost:9083',\n>   'clients'='5',\n>   'property-version'='1'\n> );\n2020-09-24 18:24:21,111 WARN  org.apache.flink.table.client.cli.CliClient                  [] - Could not execute SQL statement.\norg.apache.flink.table.client.gateway.SqlExecutionException: Could not execute statement: CREATE CATALOG hive_catalog WITH (\n  'type'='iceberg',\n  'catalog-type'='hive',\n  'uri'='thrift://localhost:9083',\n  'clients'='5',\n  'property-version'='1'\n)\n\tat org.apache.flink.table.client.gateway.local.LocalExecutor.executeSql(LocalExecutor.java:362) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.cli.CliClient.callDdl(CliClient.java:642) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.cli.CliClient.callDdl(CliClient.java:637) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.cli.CliClient.callCommand(CliClient.java:357) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat java.util.Optional.ifPresent(Optional.java:159) [?:1.8.0_221]\n\tat org.apache.flink.table.client.cli.CliClient.open(CliClient.java:212) [flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.SqlClient.openCli(SqlClient.java:142) [flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.SqlClient.start(SqlClient.java:114) [flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.SqlClient.main(SqlClient.java:201) [flink-sql-client_2.12-1.11.1.jar:1.11.1]\nCaused by: java.lang.IllegalArgumentException: Can not create a Path from a null string\n\tat org.apache.hadoop.fs.Path.checkPathArg(Path.java:159) ~[hadoop-common-2.9.2.jar:?]\n\tat org.apache.hadoop.fs.Path.<init>(Path.java:175) ~[hadoop-common-2.9.2.jar:?]\n\tat org.apache.hadoop.fs.Path.<init>(Path.java:110) ~[hadoop-common-2.9.2.jar:?]\n\tat org.apache.iceberg.hive.HiveCatalog.convertToDatabase(HiveCatalog.java:459) ~[?:?]\n\tat org.apache.iceberg.hive.HiveCatalog.lambda$createNamespace$5(HiveCatalog.java:214) ~[?:?]\n\tat org.apache.iceberg.hive.ClientPool.run(ClientPool.java:54) ~[?:?]\n\tat org.apache.iceberg.hive.HiveCatalog.createNamespace(HiveCatalog.java:213) ~[?:?]\n\tat org.apache.iceberg.flink.FlinkCatalog.createDatabase(FlinkCatalog.java:195) ~[?:?]\n\tat org.apache.iceberg.flink.FlinkCatalog.open(FlinkCatalog.java:116) ~[?:?]\n\tat org.apache.flink.table.catalog.CatalogManager.registerCatalog(CatalogManager.java:191) ~[flink-table-blink_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.api.internal.TableEnvironmentImpl.createCatalog(TableEnvironmentImpl.java:1086) ~[flink-table-blink_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.api.internal.TableEnvironmentImpl.executeOperation(TableEnvironmentImpl.java:1019) ~[flink-table-blink_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.api.internal.TableEnvironmentImpl.executeSql(TableEnvironmentImpl.java:690) ~[flink-table-blink_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.gateway.local.LocalExecutor.lambda$executeSql$7(LocalExecutor.java:360) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.gateway.local.ExecutionContext.wrapClassLoader(ExecutionContext.java:255) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\tat org.apache.flink.table.client.gateway.local.LocalExecutor.executeSql(LocalExecutor.java:360) ~[flink-sql-client_2.12-1.11.1.jar:1.11.1]\n\t... 8 more", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r494207332", "createdAt": "2020-09-24T10:29:28Z", "author": {"login": "openinx"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/).\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+CREATE CATALOG hive_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='5',\n+  'property-version'='1'\n+);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzgyNzY4", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-496782768", "createdAt": "2020-09-25T20:03:12Z", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowMzoxM1rOHYQ7Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowMzoxM1rOHYQ7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTIwMw==", "bodyText": "I'm not sure that I agree that the API supports writing a generic DataStream<T> because the rows must be converted before they are actually written. Writing a generic T would require a way to control the data model. I think it may be worth adding support to write Iceberg generics, but probably not arbitrary T.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r495205203", "createdAt": "2020-09-25T20:03:13Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/).\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+CREATE CATALOG hive_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='5',\n+  'property-version'='1'\n+);\n+```\n+\n+* `type`: Please just use `iceberg` for iceberg table format. (Required)\n+* `catalog-type`: Iceberg currently support `hive` or `hadoop` catalog type. (Required)\n+* `uri`: The Hive metastore's thrift URI. (Required)\n+* `clients`: The Hive metastore client pool size, default value is 2. (Optional)\n+* `property-version`: Version number to describe the property version. This property can be used for backwards compatibility in case the property format changes. The currently property version is `1`. (Optional)\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+CREATE CATALOG hadoop_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+* `warehouse`: The HDFS directory to store metadata files and data files. (Required)\n+\n+We could execute the sql command `USE CATALOG hive_catalog` to set the current catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database if we don't want to create tables under the `default` database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support the most commonly used [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning, apache flink does not yet support hidden partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration) which will be stored in apache iceberg table properties.\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+Notice: we could execute the following sql command to switch the execute type from 'streaming' mode to 'batch' mode, and vice versa:\n+\n+```sql\n+-- Execute the flink job in streaming mode for current session context\n+SET execution.type = streaming\n+\n+-- Execute the flink job in batch mode for current session context\n+SET execution.type = batch\n+```\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES (1, 'a');\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE` in batch job (flink streaming job does not support `INSERT OVERWRITE`). Overwrites are atomic operations for Iceberg tables.\n+\n+Partitions that have rows produced by the SELECT query will be replaced, for example:\n+\n+```sql\n+INSERT OVERWRITE sample VALUES (1, 'a');\n+```\n+\n+Iceberg also support overwriting given partitions by the `select` values:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample PARTITION(data='a') SELECT 6;\n+```\n+\n+For a partitioned iceberg table, when all the partition columns are set a value in `PARTITION` clause, it is inserting into a static partition, otherwise if partial partition columns (prefix part of all partition columns) are set a value in `PARTITION` clause, it is writing the query result into a dynamic partition.\n+For an unpartitioned iceberg table, its data will be completely overwritten by `INSERT OVERWRITE`.\n+\n+## Reading with DataStream\n+\n+Iceberg does not support streaming or batch read now, but it's working in-progress.\n+\n+## Writing with DataStream\n+\n+Iceberg support writing to iceberg table from different DataStream input.\n+\n+\n+### Appending data.\n+\n+we have supported writing `DataStream<RowData>` and `DataStream<Row` to the sink iceberg table natively.\n+\n+```java\n+StreamExecutionEnvironment env = ...;\n+\n+DataStream<RowData> input = ... ;\n+Configuration hadoopConf = new Configuration();\n+TableLoader tableLoader = TableLoader.fromHadooptable(\"hdfs://nn:8020/warehouse/path\");\n+\n+FlinkSink.forRowData(input)\n+    .tableLoader(tableLoader)\n+    .hadoopConf(hadoopConf)\n+    .build();\n+\n+env.execute(\"Test Iceberg DataStream\");\n+```\n+\n+The iceberg API also allows users to write generic `DataStream<T>` to iceberg table, more example could be found in this [unit test](https://github.com/apache/iceberg/blob/master/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "originalPosition": 262}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2Nzg0MDEw", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-496784010", "createdAt": "2020-09-25T20:04:20Z", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNDoyMFrOHYQ9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNDoyMFrOHYQ9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNTY2NQ==", "bodyText": "This copies from the Flink docs, but doesn't cover what happens with hidden partitioning. I think this should give an example and be specific: hidden partitions are overwritten dynamically.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r495205665", "createdAt": "2020-09-25T20:04:20Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/).\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+CREATE CATALOG hive_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='5',\n+  'property-version'='1'\n+);\n+```\n+\n+* `type`: Please just use `iceberg` for iceberg table format. (Required)\n+* `catalog-type`: Iceberg currently support `hive` or `hadoop` catalog type. (Required)\n+* `uri`: The Hive metastore's thrift URI. (Required)\n+* `clients`: The Hive metastore client pool size, default value is 2. (Optional)\n+* `property-version`: Version number to describe the property version. This property can be used for backwards compatibility in case the property format changes. The currently property version is `1`. (Optional)\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+CREATE CATALOG hadoop_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+* `warehouse`: The HDFS directory to store metadata files and data files. (Required)\n+\n+We could execute the sql command `USE CATALOG hive_catalog` to set the current catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database if we don't want to create tables under the `default` database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support the most commonly used [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning, apache flink does not yet support hidden partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration) which will be stored in apache iceberg table properties.\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+Notice: we could execute the following sql command to switch the execute type from 'streaming' mode to 'batch' mode, and vice versa:\n+\n+```sql\n+-- Execute the flink job in streaming mode for current session context\n+SET execution.type = streaming\n+\n+-- Execute the flink job in batch mode for current session context\n+SET execution.type = batch\n+```\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES (1, 'a');\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE` in batch job (flink streaming job does not support `INSERT OVERWRITE`). Overwrites are atomic operations for Iceberg tables.\n+\n+Partitions that have rows produced by the SELECT query will be replaced, for example:\n+\n+```sql\n+INSERT OVERWRITE sample VALUES (1, 'a');\n+```\n+\n+Iceberg also support overwriting given partitions by the `select` values:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample PARTITION(data='a') SELECT 6;\n+```\n+\n+For a partitioned iceberg table, when all the partition columns are set a value in `PARTITION` clause, it is inserting into a static partition, otherwise if partial partition columns (prefix part of all partition columns) are set a value in `PARTITION` clause, it is writing the query result into a dynamic partition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "originalPosition": 231}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2Nzg2NzA5", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-496786709", "createdAt": "2020-09-25T20:06:49Z", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNjo0OVrOHYRBMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowNjo0OVrOHYRBMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNjcwNg==", "bodyText": "+1, this is a good way to state what will happen.\nBut, the example is incomplete because it doesn't state which partitions would be replaced. I think this needs to have an example table as well as a query. If Flink supports a CASE statement, then I suggest partitioning by \"even\" and \"odd\" ids. That's easy to understand and you can show what happens with very few rows.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r495206706", "createdAt": "2020-09-25T20:06:49Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/).\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+CREATE CATALOG hive_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='5',\n+  'property-version'='1'\n+);\n+```\n+\n+* `type`: Please just use `iceberg` for iceberg table format. (Required)\n+* `catalog-type`: Iceberg currently support `hive` or `hadoop` catalog type. (Required)\n+* `uri`: The Hive metastore's thrift URI. (Required)\n+* `clients`: The Hive metastore client pool size, default value is 2. (Optional)\n+* `property-version`: Version number to describe the property version. This property can be used for backwards compatibility in case the property format changes. The currently property version is `1`. (Optional)\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+CREATE CATALOG hadoop_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+* `warehouse`: The HDFS directory to store metadata files and data files. (Required)\n+\n+We could execute the sql command `USE CATALOG hive_catalog` to set the current catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database if we don't want to create tables under the `default` database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support the most commonly used [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning, apache flink does not yet support hidden partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration) which will be stored in apache iceberg table properties.\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+Notice: we could execute the following sql command to switch the execute type from 'streaming' mode to 'batch' mode, and vice versa:\n+\n+```sql\n+-- Execute the flink job in streaming mode for current session context\n+SET execution.type = streaming\n+\n+-- Execute the flink job in batch mode for current session context\n+SET execution.type = batch\n+```\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES (1, 'a');\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE` in batch job (flink streaming job does not support `INSERT OVERWRITE`). Overwrites are atomic operations for Iceberg tables.\n+\n+Partitions that have rows produced by the SELECT query will be replaced, for example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2Nzg4NTYy", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-496788562", "createdAt": "2020-09-25T20:08:32Z", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowODozM1rOHYRDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDowODozM1rOHYRDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzM1MA==", "bodyText": "Is there a good place to link to in Flink docs for this?", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r495207350", "createdAt": "2020-09-25T20:08:33Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/).\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+CREATE CATALOG hive_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='5',\n+  'property-version'='1'\n+);\n+```\n+\n+* `type`: Please just use `iceberg` for iceberg table format. (Required)\n+* `catalog-type`: Iceberg currently support `hive` or `hadoop` catalog type. (Required)\n+* `uri`: The Hive metastore's thrift URI. (Required)\n+* `clients`: The Hive metastore client pool size, default value is 2. (Optional)\n+* `property-version`: Version number to describe the property version. This property can be used for backwards compatibility in case the property format changes. The currently property version is `1`. (Optional)\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+CREATE CATALOG hadoop_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+* `warehouse`: The HDFS directory to store metadata files and data files. (Required)\n+\n+We could execute the sql command `USE CATALOG hive_catalog` to set the current catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database if we don't want to create tables under the `default` database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support the most commonly used [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning, apache flink does not yet support hidden partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration) which will be stored in apache iceberg table properties.\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+Notice: we could execute the following sql command to switch the execute type from 'streaming' mode to 'batch' mode, and vice versa:\n+\n+```sql\n+-- Execute the flink job in streaming mode for current session context\n+SET execution.type = streaming\n+\n+-- Execute the flink job in batch mode for current session context\n+SET execution.type = batch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzkwOTYy", "url": "https://github.com/apache/iceberg/pull/1464#pullrequestreview-496790962", "createdAt": "2020-09-25T20:10:30Z", "commit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMDozMFrOHYRG0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDoxMDozMFrOHYRG0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwODE0Ng==", "bodyText": "I don't think that documentation is a good place for this. If you want, we could reference a tag in the issue tracker, or a milestone. But we don't want to need to update docs when these are done. Compatibility and features should be covered mainly in the table.", "url": "https://github.com/apache/iceberg/pull/1464#discussion_r495208146", "createdAt": "2020-09-25T20:10:30Z", "author": {"login": "rdblue"}, "path": "site/docs/flink.md", "diffHunk": "@@ -0,0 +1,296 @@\n+<!--\n+ - Licensed to the Apache Software Foundation (ASF) under one or more\n+ - contributor license agreements.  See the NOTICE file distributed with\n+ - this work for additional information regarding copyright ownership.\n+ - The ASF licenses this file to You under the Apache License, Version 2.0\n+ - (the \"License\"); you may not use this file except in compliance with\n+ - the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing, software\n+ - distributed under the License is distributed on an \"AS IS\" BASIS,\n+ - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ - See the License for the specific language governing permissions and\n+ - limitations under the License.\n+ -->\n+\n+# Flink\n+\n+Apache Iceberg support both [Apache Flink](https://flink.apache.org/)'s DataStream API and Table API to write records into iceberg table. Currently,\n+we only integrate iceberg with apache flink 1.11.x .\n+\n+| Feature support                                                        |  Flink 1.11.0      |  Notes                                                 |\n+|------------------------------------------------------------------------|--------------------|--------------------------------------------------------|\n+| [SQL create catalog](#creating-catalogs-and-using-catalogs)            | \u2714\ufe0f                 |                                                        |\n+| [SQL create database](#create-database)                                | \u2714\ufe0f                 |                                                        |\n+| [SQL create table](#create-table)                                      | \u2714\ufe0f                 |                                                        |\n+| [SQL alter table](#alter-table)                                        | \u2714\ufe0f                 | Only support altering table properties, Columns/PartitionKey changes are not supported now|\n+| [SQL drop_table](#drop-table)                                          | \u2714\ufe0f                 |                                                        |\n+| [SQL select](#querying-with-sql)                                       |  \ufe0f                 |                                                        |\n+| [SQL insert into](#insert-into)                                        | \u2714\ufe0f \ufe0f               | Support both streaming and batch mode                  |\n+| [SQL insert overwrite](#insert-overwrite)                              | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream read](#reading-with-datastream)                            | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream append](#appending-data)                                   | \u2714\ufe0f \ufe0f               |                                                        |\n+| [DataStream overwrite](#overwrite-data)                                | \u2714\ufe0f \ufe0f               |                                                        |\n+| [Metadata tables](#inspecting-tables)                                  |    \ufe0f               |                                                        |\n+\n+## Preparation\n+\n+To create iceberg table in flink, we recommend to use [Flink SQL Client](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html) because it's easier for users to understand the concepts.\n+\n+Step.1 Downloading the flink 1.11.x binary package from the apache flink [download page](https://flink.apache.org/downloads.html). We now use scala 2.12 to archive the apache iceberg-flink-runtime jar, so it's recommended to use flink 1.11 bundled with scala 2.12.\n+\n+```bash\n+wget https://downloads.apache.org/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.12.tgz\n+tar xzvf flink-1.11.1-bin-scala_2.12.tgz\n+```\n+\n+Step.2 Start a standalone flink cluster within hadoop environment.\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# Start the flink standalone cluster\n+./bin/start-cluster.sh\n+```\n+\n+Step.3 Start the flink SQL client.\n+\n+We've created a separate `flink-runtime` module in iceberg project to generate a bundled jar, which could be loaded by flink SQL client directly.\n+\n+If we want to build the `flink-runtime` bundled jar manually, please just build the `iceberg` project and it will generate the jar under `<iceberg-root-dir>/flink-runtime/build/libs`. Of course, we could also download the `flink-runtime` jar from the [apache official repository](https://repo.maven.apache.org/maven2/org/apache/iceberg/iceberg-flink-runtime/).\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+./bin/sql-client.sh embedded -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar shell\n+```\n+\n+By default, iceberg has included hadoop jars for hadoop catalog. If we want to use hive catalog, we will need to load the hive jars when opening the flink sql client. Fortunately, apache flink has provided a [bundled hive jar](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/hive/#using-bundled-hive-jar) for sql client. So we could open the sql client\n+as the following:\n+\n+```bash\n+# HADOOP_HOME is your hadoop root directory after unpack the binary package.\n+export HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\n+\n+# wget the flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar from the above bundled jar URL firstly.\n+\n+# open the SQL client.\n+./bin/sql-client.sh embedded \\\n+    -j <flink-runtime-directory>/iceberg-flink-runtime-xxx.jar \\\n+    -j <hive-bundlded-jar-directory>/flink-sql-connector-hive-2.3.6_2.11-1.11.0.jar \\\n+    shell\n+```\n+\n+## Creating catalogs and using catalogs.\n+\n+Flink 1.11 support to create catalogs by using flink sql.\n+\n+This creates an iceberg catalog named `hive_catalog` that loads tables from a hive metastore:\n+\n+```sql\n+CREATE CATALOG hive_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hive',\n+  'uri'='thrift://localhost:9083',\n+  'clients'='5',\n+  'property-version'='1'\n+);\n+```\n+\n+* `type`: Please just use `iceberg` for iceberg table format. (Required)\n+* `catalog-type`: Iceberg currently support `hive` or `hadoop` catalog type. (Required)\n+* `uri`: The Hive metastore's thrift URI. (Required)\n+* `clients`: The Hive metastore client pool size, default value is 2. (Optional)\n+* `property-version`: Version number to describe the property version. This property can be used for backwards compatibility in case the property format changes. The currently property version is `1`. (Optional)\n+\n+Iceberg also supports a directory-based catalog in HDFS that can be configured using `'catalog-type'='hadoop'`:\n+\n+```sql\n+CREATE CATALOG hadoop_catalog WITH (\n+  'type'='iceberg',\n+  'catalog-type'='hadoop',\n+  'warehouse'='hdfs://nn:8020/warehouse/path',\n+  'property-version'='1'\n+);\n+```\n+\n+* `warehouse`: The HDFS directory to store metadata files and data files. (Required)\n+\n+We could execute the sql command `USE CATALOG hive_catalog` to set the current catalog.\n+\n+## DDL commands\n+\n+### `CREATE DATABASE`\n+\n+By default, iceberg will use the `default` database in flink. Using the following example to create a separate database if we don't want to create tables under the `default` database:\n+\n+```sql\n+CREATE DATABASE iceberg_db;\n+USE iceberg_db;\n+```\n+\n+### `CREATE TABLE`\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+);\n+```\n+\n+Table create commands support the most commonly used [flink create clauses](https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/create.html#create-table) now, including: \n+\n+* `PARTITION BY (column1, column2, ...)` to configure partitioning, apache flink does not yet support hidden partitioning.\n+* `COMMENT 'table document'` to set a table description.\n+* `WITH ('key'='value', ...)` to set [table configuration](../configuration) which will be stored in apache iceberg table properties.\n+\n+Currently, it does not support computed column, primary key and watermark definition etc.\n+\n+### `PARTITIONED BY`\n+\n+To create a partition table, use `PARTITIONED BY`:\n+\n+```sql\n+CREATE TABLE hive_catalog.default.sample (\n+    id BIGINT COMMENT 'unique id',\n+    data STRING\n+) PARTITIONED BY (data);\n+```\n+\n+Apache Iceberg support hidden partition but apache flink don't support partitioning by a function on columns, so we've no way to support hidden partition in flink DDL now, we will improve apache flink DDL in future.\n+\n+### `ALTER TABLE`\n+\n+Iceberg only support altering table properties in flink 1.11 now.\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample SET ('write.format.default'='avro')\n+```\n+\n+### `ALTER TABLE .. RENAME TO`\n+\n+```sql\n+ALTER TABLE hive_catalog.default.sample RENAME TO hive_catalog.default.new_sample;\n+```\n+\n+### `DROP TABLE`\n+\n+To delete a table, run:\n+\n+```sql\n+DROP TABLE hive_catalog.default.sample;\n+```\n+\n+## Querying with SQL\n+\n+Iceberg does not support streaming read or batch read in flink now, it's still working in-progress.\n+\n+## Writing with SQL\n+\n+Iceberg support both `INSERT INTO` and `INSERT OVERWRITE` in flink 1.11 now.\n+\n+Notice: we could execute the following sql command to switch the execute type from 'streaming' mode to 'batch' mode, and vice versa:\n+\n+```sql\n+-- Execute the flink job in streaming mode for current session context\n+SET execution.type = streaming\n+\n+-- Execute the flink job in batch mode for current session context\n+SET execution.type = batch\n+```\n+\n+### `INSERT INTO`\n+\n+To append new data to a table with a flink streaming job, use `INSERT INTO`:\n+\n+```sql\n+INSERT INTO hive_catalog.default.sample VALUES (1, 'a');\n+INSERT INTO hive_catalog.default.sample SELECT id, data from other_kafka_table;\n+```\n+\n+### `INSERT OVERWRITE`\n+\n+To replace data in the table with the result of a query, use `INSERT OVERWRITE` in batch job (flink streaming job does not support `INSERT OVERWRITE`). Overwrites are atomic operations for Iceberg tables.\n+\n+Partitions that have rows produced by the SELECT query will be replaced, for example:\n+\n+```sql\n+INSERT OVERWRITE sample VALUES (1, 'a');\n+```\n+\n+Iceberg also support overwriting given partitions by the `select` values:\n+\n+```sql\n+INSERT OVERWRITE hive_catalog.default.sample PARTITION(data='a') SELECT 6;\n+```\n+\n+For a partitioned iceberg table, when all the partition columns are set a value in `PARTITION` clause, it is inserting into a static partition, otherwise if partial partition columns (prefix part of all partition columns) are set a value in `PARTITION` clause, it is writing the query result into a dynamic partition.\n+For an unpartitioned iceberg table, its data will be completely overwritten by `INSERT OVERWRITE`.\n+\n+## Reading with DataStream\n+\n+Iceberg does not support streaming or batch read now, but it's working in-progress.\n+\n+## Writing with DataStream\n+\n+Iceberg support writing to iceberg table from different DataStream input.\n+\n+\n+### Appending data.\n+\n+we have supported writing `DataStream<RowData>` and `DataStream<Row` to the sink iceberg table natively.\n+\n+```java\n+StreamExecutionEnvironment env = ...;\n+\n+DataStream<RowData> input = ... ;\n+Configuration hadoopConf = new Configuration();\n+TableLoader tableLoader = TableLoader.fromHadooptable(\"hdfs://nn:8020/warehouse/path\");\n+\n+FlinkSink.forRowData(input)\n+    .tableLoader(tableLoader)\n+    .hadoopConf(hadoopConf)\n+    .build();\n+\n+env.execute(\"Test Iceberg DataStream\");\n+```\n+\n+The iceberg API also allows users to write generic `DataStream<T>` to iceberg table, more example could be found in this [unit test](https://github.com/apache/iceberg/blob/master/flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java).\n+\n+### Overwrite data\n+\n+To overwrite the data in existing iceberg table dynamically, we could set the `overwrite` flag in FlinkSink builder.\n+\n+```java\n+StreamExecutionEnvironment env = ...;\n+\n+DataStream<RowData> input = ... ;\n+Configuration hadoopConf = new Configuration();\n+TableLoader tableLoader = TableLoader.fromHadooptable(\"hdfs://nn:8020/warehouse/path\");\n+\n+FlinkSink.forRowData(input)\n+    .tableLoader(tableLoader)\n+    .overwrite(true)\n+    .hadoopConf(hadoopConf)\n+    .build();\n+\n+env.execute(\"Test Iceberg DataStream\");\n+```\n+\n+## Inspecting tables.\n+\n+Iceberg does not support inspecting table in flink sql now, we need to use [iceberg's Java API](../api) to read iceberg's meta data to get those table information.\n+\n+## Future improvement.\n+\n+There are some features that we do not yet support in the current flink iceberg integration work:\n+\n+* Don't support creating iceberg table with hidden partitioning. [Discussion](http://mail-archives.apache.org/mod_mbox/flink-dev/202008.mbox/%3cCABi+2jQCo3MsOa4+ywaxV5J-Z8TGKNZDX-pQLYB-dG+dVUMiMw@mail.gmail.com%3e) in flink mail list.\n+* Don't support creating iceberg table with computed column.\n+* Don't support creating iceberg table with watermark.\n+* Don't support adding columns, removing columns, renaming columns, changing columns. [FLINK-19062](https://issues.apache.org/jira/browse/FLINK-19062) is tracking this.\n+* Don't support flink read iceberg table in batch or streaming mode. [#1346](https://github.com/apache/iceberg/pull/1346) and [#1293](https://github.com/apache/iceberg/pull/1293) are tracking this. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2764a188eb3fe191f0e67e1bc5af5a9be180d99"}, "originalPosition": 296}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4210, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}