{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODk4Njcz", "number": 896, "title": "Avro: Support partition values using a constants map", "bodyText": "This updates Avro readers to support passing a map from field IDs to constants. This is used to inject constant values from partition data.\nUnlike similar changes for Parquet (see #585), this doesn't replace the reader for a field because the readers still need to be called to update the decoder state by consuming a value from the stream. Instead, this adds a phase after reading a struct when the constants are set. This happens whether or not the data file contained a given field.\nThis is needed for partition values in InputFormats, #843, and is the Avro part of fixing #575.", "createdAt": "2020-04-06T20:50:18Z", "url": "https://github.com/apache/iceberg/pull/896", "merged": true, "mergeCommit": {"oid": "b47e97781b82109432612a0f36ebb0d0ce270d8b"}, "closed": true, "closedAt": "2020-04-09T16:28:54Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVE78NgH2gAyMzk5ODk4NjczOmQwNzViMGU5ODU1ZTVmMTVmYzY0Mzg2Y2ZmMDkwNWM2YmNiNGRkZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVfTyrAFqTM4OTYyOTI2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/d075b0e9855e5f15fc64386cff0905c6bcb4ddf3", "committedDate": "2020-04-06T20:43:35Z", "message": "Avro: Support partition values using a constants map."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjA5ODcw", "url": "https://github.com/apache/iceberg/pull/896#pullrequestreview-388609870", "createdAt": "2020-04-06T20:55:29Z", "commit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NToyOVrOGBpiHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NToyOVrOGBpiHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MjIzNg==", "bodyText": "I did a quick check on this method to make sure the incoming buffer is not modified and found that it is for off-heap buffers. This fixes the problem, but isn't really related. If anyone prefers, I can move this to a separate PR.", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404382236", "createdAt": "2020-04-06T20:55:29Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/util/ByteBuffers.java", "diffHunk": "@@ -41,7 +41,7 @@\n       }\n     } else {\n       byte[] bytes = new byte[buffer.remaining()];\n-      buffer.get(bytes);\n+      buffer.asReadOnlyBuffer().get(bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDk2NjE4", "url": "https://github.com/apache/iceberg/pull/896#pullrequestreview-389096618", "createdAt": "2020-04-07T13:08:11Z", "commit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzowODoxMlrOGCCqpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozMTowMlrOGCMEew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5NDAyMw==", "bodyText": "Is this true only for identity partitioning or in general?", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404794023", "createdAt": "2020-04-07T13:08:12Z", "author": {"login": "rdsr"}, "path": "core/src/main/java/org/apache/iceberg/util/PartitionUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.FileScanTask;\n+import org.apache.iceberg.PartitionField;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.StructLike;\n+\n+public class PartitionUtil {\n+  private PartitionUtil() {\n+  }\n+\n+  public static Map<Integer, ?> constantsMap(FileScanTask task) {\n+    return constantsMap(task.spec(), task.file().partition());\n+  }\n+\n+  private static Map<Integer, ?> constantsMap(PartitionSpec spec, StructLike partitionData) {\n+    // use java.util.HashMap because partition data may contain null values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5ODE2MA==", "bodyText": "no longer required?", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404798160", "createdAt": "2020-04-07T13:14:12Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/TableScanIterable.java", "diffHunk": "@@ -74,13 +76,15 @@\n \n   private CloseableIterable<Record> open(FileScanTask task) {\n     InputFile input = ops.io().newInputFile(task.file().path().toString());\n+    Map<Integer, ?> partition = PartitionUtil.constantsMap(task);\n \n     // TODO: join to partition data from the manifest file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5OTMxMw==", "bodyText": "nit: idToConstants like other places?", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404799313", "createdAt": "2020-04-07T13:15:51Z", "author": {"login": "rdsr"}, "path": "data/src/main/java/org/apache/iceberg/data/avro/DataReader.java", "diffHunk": "@@ -45,17 +46,23 @@\n       ThreadLocal.withInitial(() -> new MapMaker().weakKeys().makeMap());\n \n   public static <D> DataReader<D> create(org.apache.iceberg.Schema expectedSchema, Schema readSchema) {\n-    return new DataReader<>(expectedSchema, readSchema);\n+    return create(expectedSchema, readSchema, ImmutableMap.of());\n+  }\n+\n+  public static <D> DataReader<D> create(org.apache.iceberg.Schema expectedSchema, Schema readSchema,\n+                                         Map<Integer, ?> constants) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0ODA5MQ==", "bodyText": "Should we return the obj at pos here?", "url": "https://github.com/apache/iceberg/pull/896#discussion_r404948091", "createdAt": "2020-04-07T16:31:02Z", "author": {"login": "rdsr"}, "path": "spark/src/main/java/org/apache/iceberg/spark/data/SparkValueReaders.java", "diffHunk": "@@ -253,46 +258,59 @@ public ArrayBasedMapData read(Decoder decoder, Object reuse) throws IOException\n     }\n   }\n \n-  static class StructReader implements ValueReader<InternalRow> {\n-    private final ValueReader<?>[] readers;\n+  static class StructReader extends ValueReaders.StructReader<InternalRow> {\n+    private final int numFields;\n \n-    private StructReader(List<ValueReader<?>> readers) {\n-      this.readers = new ValueReader[readers.size()];\n-      for (int i = 0; i < this.readers.length; i += 1) {\n-        this.readers[i] = readers.get(i);\n-      }\n+    protected StructReader(List<ValueReader<?>> readers, Types.StructType struct, Map<Integer, ?> idToConstant) {\n+      super(readers, struct, idToConstant);\n+      this.numFields = readers.size();\n     }\n \n-    ValueReader<?>[] readers() {\n-      return readers;\n+    @Override\n+    protected InternalRow reuseOrCreate(Object reuse) {\n+      if (reuse instanceof GenericInternalRow && ((GenericInternalRow) reuse).numFields() == numFields) {\n+        return (InternalRow) reuse;\n+      }\n+      return new GenericInternalRow(numFields);\n     }\n \n     @Override\n-    public InternalRow read(Decoder decoder, Object reuse) throws IOException {\n-      GenericInternalRow row = new GenericInternalRow(readers.length);\n-      if (decoder instanceof ResolvingDecoder) {\n-        // this may not set all of the fields. nulls are set by default.\n-        for (Schema.Field field : ((ResolvingDecoder) decoder).readFieldOrder()) {\n-          Object value = readers[field.pos()].read(decoder, null);\n-          if (value != null) {\n-            row.update(field.pos(), value);\n-          } else {\n-            row.setNullAt(field.pos());\n-          }\n-        }\n+    protected Object get(InternalRow struct, int pos) {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d075b0e9855e5f15fc64386cff0905c6bcb4ddf3"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a50f583d511435bcb2c43e0b02ddb722db32fc0", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/7a50f583d511435bcb2c43e0b02ddb722db32fc0", "committedDate": "2020-04-07T17:38:25Z", "message": "Fix checkstyle and review issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2227e60dbe8eeba289934b5dcacd6674c8700b9", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/f2227e60dbe8eeba289934b5dcacd6674c8700b9", "committedDate": "2020-04-07T21:32:22Z", "message": "Fix checkstyle problems."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjI5MjY5", "url": "https://github.com/apache/iceberg/pull/896#pullrequestreview-389629269", "createdAt": "2020-04-08T03:27:10Z", "commit": {"oid": "f2227e60dbe8eeba289934b5dcacd6674c8700b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4768, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}