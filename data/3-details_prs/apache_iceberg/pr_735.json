{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjY5Nzk3", "number": 735, "title": "Refactor FilteredManifest and ManifestGroup", "bodyText": "Changes\n\nliveEntries() and iterator() are now sharing underlying code\nColumn stats are always projected when querying either allEntries() or liveEntries() or iterator()\n1. ManifestGroup now relies on a builder\nallEntries(), liveEntries() and iterator()  does not reuse containers and creates a copy. If this is too expensive in some case we can have a option  to reuseContainers\n\nThese changes will affect #315 as well\nUpdate\n\nColumn stats now projected in allEntries() or liveEntries() or iterator() if required for metrics evaluation\nReverted to old behavior of allEntries(), liveEntries()  do not create copies of entries whereas iterator() does", "createdAt": "2020-01-13T18:54:40Z", "url": "https://github.com/apache/iceberg/pull/735", "merged": true, "mergeCommit": {"oid": "c73b6574eda1466c4ad4c6addb3f44b23928c681"}, "closed": true, "closedAt": "2020-01-27T18:32:15Z", "author": {"login": "rdsr"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7WRwZAFqTM0NDg2OTk0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-g7KYgFqTM0ODg3NDU5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODY5OTQ1", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-344869945", "createdAt": "2020-01-17T22:13:46Z", "commit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxMzo0NlrOFfGl0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxMzo0NlrOFfGl0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODE2MQ==", "bodyText": "This is good, but can we make sure there is a row filter before adding these columns? Without the row filter they aren't needed.", "url": "https://github.com/apache/iceberg/pull/735#discussion_r368158161", "createdAt": "2020-01-17T22:13:46Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -95,60 +95,31 @@ public FilteredManifest caseSensitive(boolean isCaseSensitive) {\n       Evaluator evaluator = evaluator();\n       InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n \n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n+      // ensure stats columns are present for metrics evaluation\n+      Collection<String> projectColumns = withStatsColumns(columns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODcwNjQ3", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-344870647", "createdAt": "2020-01-17T22:15:43Z", "commit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNTo0M1rOFfGn1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNTo0M1rOFfGn1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODY3Ng==", "bodyText": "Overall, I like the idea behind the changes to this file. It's a good idea to simply filter allEntries() to produce liveEntries(). But the change to copy ManifestEntries is going to hurt job planning performance. ManifestReader and FilteredManifest purposely do not copy entries to avoid the additional overhead while scanning. ManifestEntry is internal so anything that handles them should know when to make a defensive copy or not.\nThe public part of this class is the Iterable<DataFile>, which makes a defensive copy of all matching data files. That iterator should still make a copy, while the entries methods should not.", "url": "https://github.com/apache/iceberg/pull/735#discussion_r368158676", "createdAt": "2020-01-17T22:15:43Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -95,60 +95,31 @@ public FilteredManifest caseSensitive(boolean isCaseSensitive) {\n       Evaluator evaluator = evaluator();\n       InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n \n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n+      // ensure stats columns are present for metrics evaluation\n+      Collection<String> projectColumns = withStatsColumns(columns);\n+\n+      CloseableIterable<ManifestEntry> entries = CloseableIterable.filter(\n+          reader.entries(projection(fileSchema, projectColumns, caseSensitive)),\n           entry -> entry != null &&\n               evaluator.eval(entry.file().partition()) &&\n               metricsEvaluator.eval(entry.file()));\n \n+      boolean dropStats = dropColumnStats(columns);\n+      return CloseableIterable.transform(entries, e -> dropStats ? e.copyWithoutStats() : e.copy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODcxMTI3", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-344871127", "createdAt": "2020-01-17T22:17:03Z", "commit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNzowNFrOFfGpXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNzowNFrOFfGpXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTA2OA==", "bodyText": "Can we replace \"*\" with a constant from somewhere?", "url": "https://github.com/apache/iceberg/pull/735#discussion_r368159068", "createdAt": "2020-01-17T22:17:04Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -193,4 +164,19 @@ private InclusiveMetricsEvaluator metricsEvaluator() {\n     }\n     return lazyMetricsEvaluator;\n   }\n+\n+  private static boolean dropColumnStats(Collection<String> columns) {\n+    return !columns.contains(\"*\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03a96dc23d75db7fc2a31a8832cf716550c02f9d", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/03a96dc23d75db7fc2a31a8832cf716550c02f9d", "committedDate": "2020-01-19T02:59:43Z", "message": "[Refactor]: Remove duplication form FilteredManifest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8627c9b218d03c728014efb6a00574676f0184d", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/d8627c9b218d03c728014efb6a00574676f0184d", "committedDate": "2020-01-13T18:43:48Z", "message": "[Refactor]: Remove duplication form FilteredManifest"}, "afterCommit": {"oid": "e36373a3d825cf5f0544d2335fc5594e4b1a13fe", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/e36373a3d825cf5f0544d2335fc5594e4b1a13fe", "committedDate": "2020-01-19T03:14:00Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/4f8d0176f179011b4d561576d15de1582ddc30d6", "committedDate": "2020-01-19T04:15:42Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e36373a3d825cf5f0544d2335fc5594e4b1a13fe", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/e36373a3d825cf5f0544d2335fc5594e4b1a13fe", "committedDate": "2020-01-19T03:14:00Z", "message": "Address review comments"}, "afterCommit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/4f8d0176f179011b4d561576d15de1582ddc30d6", "committedDate": "2020-01-19T04:15:42Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTI1MjE4", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-347525218", "createdAt": "2020-01-23T18:46:10Z", "commit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0NjoxMFrOFhIyiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0NjoxMFrOFhIyiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MTMzNw==", "bodyText": "For performance, I think it is worse to copy here than to return the extra columns. We don't copy because we assume that the caller will use the row immediately -- e.g. to aggregate stats -- or will make a defensive copy. The caller is responsible to decide. That really cuts down on object allocation and helps performance. Copying just to get rid of stats columns forces a copy, when the caller may not need one.\nLet's just return what was read here. In iterator, where we are copying anyway we can do the copy with or without stats.", "url": "https://github.com/apache/iceberg/pull/735#discussion_r370291337", "createdAt": "2020-01-23T18:46:10Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -95,60 +94,38 @@ public FilteredManifest caseSensitive(boolean isCaseSensitive) {\n       Evaluator evaluator = evaluator();\n       InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n \n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n+      // ensure stats columns are present for metrics evaluation\n+      boolean requireStatsProjection = requireStatsProjection();\n+      Collection<String> projectColumns = requireStatsProjection ? withStatsColumns(columns) : columns;\n+\n+      CloseableIterable<ManifestEntry> entries = CloseableIterable.filter(\n+          reader.entries(projection(fileSchema, projectColumns, caseSensitive)),\n           entry -> entry != null &&\n               evaluator.eval(entry.file().partition()) &&\n               metricsEvaluator.eval(entry.file()));\n \n+      // note that columns itself could have stats projected, that's ok.\n+      // We only drop stats if we have forced stats projection.\n+      return CloseableIterable.transform(entries, e -> requireStatsProjection ? e.copyWithoutStats() : e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTI3MDAy", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-347527002", "createdAt": "2020-01-23T18:48:59Z", "commit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0ODo1OVrOFhI4HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0ODo1OVrOFhI4HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mjc2NA==", "bodyText": "Doesn't this check need to be a little different?\nIf I project just one of the stats columns, then this will be true to pick up the column stats for filtering. But returning copyWithoutStats() in that case will drop a column that was projected. Instead, I think we need to check whether the intersection of stats columns and the requested projection is non-empty. If it is non-empty, then copy. If it is empty, copy without stats.", "url": "https://github.com/apache/iceberg/pull/735#discussion_r370292764", "createdAt": "2020-01-23T18:48:59Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -95,60 +94,38 @@ public FilteredManifest caseSensitive(boolean isCaseSensitive) {\n       Evaluator evaluator = evaluator();\n       InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n \n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n+      // ensure stats columns are present for metrics evaluation\n+      boolean requireStatsProjection = requireStatsProjection();\n+      Collection<String> projectColumns = requireStatsProjection ? withStatsColumns(columns) : columns;\n+\n+      CloseableIterable<ManifestEntry> entries = CloseableIterable.filter(\n+          reader.entries(projection(fileSchema, projectColumns, caseSensitive)),\n           entry -> entry != null &&\n               evaluator.eval(entry.file().partition()) &&\n               metricsEvaluator.eval(entry.file()));\n \n+      // note that columns itself could have stats projected, that's ok.\n+      // We only drop stats if we have forced stats projection.\n+      return CloseableIterable.transform(entries, e -> requireStatsProjection ? e.copyWithoutStats() : e);\n     } else {\n       return reader.entries(projection(fileSchema, columns, caseSensitive));\n     }\n   }\n \n   CloseableIterable<ManifestEntry> liveEntries() {\n-    if ((rowFilter != null && rowFilter != Expressions.alwaysTrue()) ||\n-        (partFilter != null && partFilter != Expressions.alwaysTrue())) {\n-      Evaluator evaluator = evaluator();\n-      InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n-\n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n-          entry -> entry != null &&\n-              entry.status() != Status.DELETED &&\n-              evaluator.eval(entry.file().partition()) &&\n-              metricsEvaluator.eval(entry.file()));\n-\n-    } else {\n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n-          entry -> entry != null && entry.status() != Status.DELETED);\n-    }\n+    return CloseableIterable.filter(allEntries(), entry -> entry != null && entry.status() != Status.DELETED);\n   }\n \n+  /**\n+   * @return an Iterator of DataFile. Makes defensive copies of files before returning\n+   */\n   @Override\n   public Iterator<DataFile> iterator() {\n-    if ((rowFilter != null && rowFilter != Expressions.alwaysTrue()) ||\n-        (partFilter != null && partFilter != Expressions.alwaysTrue())) {\n-      Evaluator evaluator = evaluator();\n-      InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n-\n-      // ensure stats columns are present for metrics evaluation\n-      List<String> projectColumns = Lists.newArrayList(columns);\n-      projectColumns.addAll(STATS_COLUMNS); // order doesn't matter\n-\n-      // if no stats columns were projected, drop them\n-      boolean dropStats = Sets.intersection(Sets.newHashSet(columns), STATS_COLUMNS).isEmpty();\n-\n-      return Iterators.transform(\n-          Iterators.filter(reader.iterator(partFilter, projection(fileSchema, projectColumns, caseSensitive)),\n-              input -> input != null &&\n-                  evaluator.eval(input.partition()) &&\n-                  metricsEvaluator.eval(input)),\n-          dropStats ? DataFile::copyWithoutStats : DataFile::copy);\n-\n-    } else {\n-      return Iterators.transform(\n-          reader.iterator(partFilter, projection(fileSchema, columns, caseSensitive)),\n-          DataFile::copy);\n-    }\n+    // If requireStatsProjection is true, we don't create a defensive\n+    // copy of manifest entry as it was already done by allEntries()\n+    boolean requireStatsProjection = requireStatsProjection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTI5NzY3", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-347529767", "createdAt": "2020-01-23T18:53:25Z", "commit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1MzoyNVrOFhJAQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1MzoyNVrOFhJAQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NDg1MQ==", "bodyText": "I'm undecided about the change to use a builder instead of a refinement API. The builder is simpler, but the implementation ends up doing very little and there is for some reason a build() call in the chain required just before entries().\nOn the other hand, the refinement API is a bit hard to maintain and is a little confusing. Its purpose is to make the ManifestGroup immutable so it can be shared, but that seems unlikely. We can wrap it in refinement APIs if we want to do this.\nHow about a third option: let's make ManifestGroup mutable. That way it is essentially a builder that you don't need to call build() on. You can just call entries() directly. The advantage is that the API remains the same (fewer changes everywhere) and we have a simpler class to maintain because it doesn't need to follow the refinement pattern.\nWhat do you think?", "url": "https://github.com/apache/iceberg/pull/735#discussion_r370294851", "createdAt": "2020-01-23T18:53:25Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/ManifestGroup.java", "diffHunk": "@@ -204,4 +141,78 @@ public ManifestGroup select(String... columnNames) {\n \n     return CloseableIterable.concat(readers);\n   }\n+\n+  static Builder builder(FileIO io, Iterable<ManifestFile> manifests) {\n+    return new Builder(io, manifests);\n+  }\n+\n+  static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTMwNTc1", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-347530575", "createdAt": "2020-01-23T18:54:42Z", "commit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1NDo0M1rOFhJClQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1NDo0M1rOFhJClQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5NTQ0NQ==", "bodyText": "The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there.", "url": "https://github.com/apache/iceberg/pull/735#discussion_r370295445", "createdAt": "2020-01-23T18:54:43Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/ManifestReader.java", "diffHunk": "@@ -226,11 +226,11 @@ private void cacheChanges() {\n \n   @Override\n   public Iterator<DataFile> iterator() {\n-    return iterator(alwaysTrue(), fileSchema);\n+    return iterator(fileSchema);\n   }\n \n   // visible for use by PartialManifest\n-  Iterator<DataFile> iterator(Expression partFilter, Schema fileProjection) {\n+  Iterator<DataFile> iterator(Schema fileProjection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f8d0176f179011b4d561576d15de1582ddc30d6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd34f48703616e2d213ffce150b517e7fdff1723", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/dd34f48703616e2d213ffce150b517e7fdff1723", "committedDate": "2020-01-23T23:34:17Z", "message": "Address review comments - take 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e70203606a84e5d233a1f3cb18dc7a4a63b9493", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/6e70203606a84e5d233a1f3cb18dc7a4a63b9493", "committedDate": "2020-01-23T22:59:41Z", "message": "Address review comments - take 2"}, "afterCommit": {"oid": "dd34f48703616e2d213ffce150b517e7fdff1723", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/dd34f48703616e2d213ffce150b517e7fdff1723", "committedDate": "2020-01-23T23:34:17Z", "message": "Address review comments - take 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/0a707de27a639e1fd6d3ea61fd23e89b6304f0c6", "committedDate": "2020-01-24T06:08:40Z", "message": "Address review comments - take 3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTc3MjU0", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-348177254", "createdAt": "2020-01-24T19:32:47Z", "commit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjo0N1rOFhoNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjo0N1rOFhoNBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjAyMQ==", "bodyText": "Maybe it makes sense to remove duplicates here? There could be a scenario where a user projects stats columns partially and this ends up adding duplicate columns. Maybe just make projectColumns a set if order doesn't matter?", "url": "https://github.com/apache/iceberg/pull/735#discussion_r370806021", "createdAt": "2020-01-24T19:32:47Z", "author": {"login": "rdsr"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -193,4 +164,29 @@ private InclusiveMetricsEvaluator metricsEvaluator() {\n     }\n     return lazyMetricsEvaluator;\n   }\n+\n+  private boolean requireStatsProjection() {\n+    // Make sure we have all stats columns for metrics evaluator\n+    return rowFilter != Expressions.alwaysTrue() &&\n+        !columns.containsAll(ManifestReader.ALL_COLUMNS) &&\n+        !columns.containsAll(STATS_COLUMNS);\n+  }\n+\n+  private boolean dropStats() {\n+    // Make sure we only drop all stats if we had projected all stats\n+    // We do not drop stats even if we had partially added some stats columns\n+    return rowFilter != Expressions.alwaysTrue() &&\n+        !columns.containsAll(ManifestReader.ALL_COLUMNS) &&\n+        Sets.intersection(Sets.newHashSet(columns), STATS_COLUMNS).isEmpty();\n+  }\n+\n+  private static Collection<String> withStatsColumns(Collection<String> columns) {\n+    if (columns.containsAll(ManifestReader.ALL_COLUMNS)) {\n+      return columns;\n+    } else {\n+      List<String> projectColumns = Lists.newArrayList(columns);\n+      projectColumns.addAll(STATS_COLUMNS); // order doesn't matter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODcwNDc1", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-348870475", "createdAt": "2020-01-27T18:12:52Z", "commit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxMjo1MlrOFiMcZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxMjo1MlrOFiMcZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM5OTc4MQ==", "bodyText": "+1", "url": "https://github.com/apache/iceberg/pull/735#discussion_r371399781", "createdAt": "2020-01-27T18:12:52Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -95,60 +94,32 @@ public FilteredManifest caseSensitive(boolean isCaseSensitive) {\n       Evaluator evaluator = evaluator();\n       InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n \n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n+      // ensure stats columns are present for metrics evaluation\n+      boolean requireStatsProjection = requireStatsProjection();\n+      Collection<String> projectColumns = requireStatsProjection ? withStatsColumns(columns) : columns;\n+\n+      return CloseableIterable.filter(\n+          reader.entries(projection(fileSchema, projectColumns, caseSensitive)),\n           entry -> entry != null &&\n               evaluator.eval(entry.file().partition()) &&\n               metricsEvaluator.eval(entry.file()));\n-\n     } else {\n       return reader.entries(projection(fileSchema, columns, caseSensitive));\n     }\n   }\n \n   CloseableIterable<ManifestEntry> liveEntries() {\n-    if ((rowFilter != null && rowFilter != Expressions.alwaysTrue()) ||\n-        (partFilter != null && partFilter != Expressions.alwaysTrue())) {\n-      Evaluator evaluator = evaluator();\n-      InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n-\n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n-          entry -> entry != null &&\n-              entry.status() != Status.DELETED &&\n-              evaluator.eval(entry.file().partition()) &&\n-              metricsEvaluator.eval(entry.file()));\n-\n-    } else {\n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n-          entry -> entry != null && entry.status() != Status.DELETED);\n-    }\n+    return CloseableIterable.filter(allEntries(), entry -> entry != null && entry.status() != Status.DELETED);\n   }\n \n+  /**\n+   * @return an Iterator of DataFile. Makes defensive copies of files before returning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODcxOTg1", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-348871985", "createdAt": "2020-01-27T18:15:25Z", "commit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxNToyNVrOFiMhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxNToyNVrOFiMhBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQwMDk2NQ==", "bodyText": "Minor: It would be better to move the dropStats check outside of the lambda. There's no need to check it inside when we could just use a different lambda that doesn't put a conditional inside a tight loop:\n    if (dropStats()) {\n      return CloseableIterable.transform(liveEntries(), e -> e.file().copyWithoutStats()).iterator();\n    } else {\n      return CloseableIterable.transform(liveEntries(), e -> e.file().copy()).iterator();\n    }", "url": "https://github.com/apache/iceberg/pull/735#discussion_r371400965", "createdAt": "2020-01-27T18:15:25Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -95,60 +94,32 @@ public FilteredManifest caseSensitive(boolean isCaseSensitive) {\n       Evaluator evaluator = evaluator();\n       InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n \n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n+      // ensure stats columns are present for metrics evaluation\n+      boolean requireStatsProjection = requireStatsProjection();\n+      Collection<String> projectColumns = requireStatsProjection ? withStatsColumns(columns) : columns;\n+\n+      return CloseableIterable.filter(\n+          reader.entries(projection(fileSchema, projectColumns, caseSensitive)),\n           entry -> entry != null &&\n               evaluator.eval(entry.file().partition()) &&\n               metricsEvaluator.eval(entry.file()));\n-\n     } else {\n       return reader.entries(projection(fileSchema, columns, caseSensitive));\n     }\n   }\n \n   CloseableIterable<ManifestEntry> liveEntries() {\n-    if ((rowFilter != null && rowFilter != Expressions.alwaysTrue()) ||\n-        (partFilter != null && partFilter != Expressions.alwaysTrue())) {\n-      Evaluator evaluator = evaluator();\n-      InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n-\n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n-          entry -> entry != null &&\n-              entry.status() != Status.DELETED &&\n-              evaluator.eval(entry.file().partition()) &&\n-              metricsEvaluator.eval(entry.file()));\n-\n-    } else {\n-      return CloseableIterable.filter(reader.entries(projection(fileSchema, columns, caseSensitive)),\n-          entry -> entry != null && entry.status() != Status.DELETED);\n-    }\n+    return CloseableIterable.filter(allEntries(), entry -> entry != null && entry.status() != Status.DELETED);\n   }\n \n+  /**\n+   * @return an Iterator of DataFile. Makes defensive copies of files before returning\n+   */\n   @Override\n   public Iterator<DataFile> iterator() {\n-    if ((rowFilter != null && rowFilter != Expressions.alwaysTrue()) ||\n-        (partFilter != null && partFilter != Expressions.alwaysTrue())) {\n-      Evaluator evaluator = evaluator();\n-      InclusiveMetricsEvaluator metricsEvaluator = metricsEvaluator();\n-\n-      // ensure stats columns are present for metrics evaluation\n-      List<String> projectColumns = Lists.newArrayList(columns);\n-      projectColumns.addAll(STATS_COLUMNS); // order doesn't matter\n-\n-      // if no stats columns were projected, drop them\n-      boolean dropStats = Sets.intersection(Sets.newHashSet(columns), STATS_COLUMNS).isEmpty();\n-\n-      return Iterators.transform(\n-          Iterators.filter(reader.iterator(partFilter, projection(fileSchema, projectColumns, caseSensitive)),\n-              input -> input != null &&\n-                  evaluator.eval(input.partition()) &&\n-                  metricsEvaluator.eval(input)),\n-          dropStats ? DataFile::copyWithoutStats : DataFile::copy);\n-\n-    } else {\n-      return Iterators.transform(\n-          reader.iterator(partFilter, projection(fileSchema, columns, caseSensitive)),\n-          DataFile::copy);\n-    }\n+    boolean dropStats = dropStats();\n+    return CloseableIterable.transform(liveEntries(),\n+        e -> dropStats ? e.file().copyWithoutStats() : e.file().copy()).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94c14501f9af01bf53b38dbc986b9deca4e3b594", "author": {"user": {"login": "rdsr", "name": "Ratandeep Ratti"}}, "url": "https://github.com/apache/iceberg/commit/94c14501f9af01bf53b38dbc986b9deca4e3b594", "committedDate": "2020-01-27T18:18:44Z", "message": "Address review comments - take 4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4ODc0NTk3", "url": "https://github.com/apache/iceberg/pull/735#pullrequestreview-348874597", "createdAt": "2020-01-27T18:19:49Z", "commit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxOTo0OVrOFiMo-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxODoxOTo0OVrOFiMo-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQwMzAwMg==", "bodyText": "I like how straight-forward this is now.", "url": "https://github.com/apache/iceberg/pull/735#discussion_r371403002", "createdAt": "2020-01-27T18:19:49Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/FilteredManifest.java", "diffHunk": "@@ -193,4 +164,29 @@ private InclusiveMetricsEvaluator metricsEvaluator() {\n     }\n     return lazyMetricsEvaluator;\n   }\n+\n+  private boolean requireStatsProjection() {\n+    // Make sure we have all stats columns for metrics evaluator\n+    return rowFilter != Expressions.alwaysTrue() &&\n+        !columns.containsAll(ManifestReader.ALL_COLUMNS) &&\n+        !columns.containsAll(STATS_COLUMNS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a707de27a639e1fd6d3ea61fd23e89b6304f0c6"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4878, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}