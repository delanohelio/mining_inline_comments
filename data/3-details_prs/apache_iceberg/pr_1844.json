{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4ODE3OTYy", "number": 1844, "title": "AWS: support custom client configuration", "bodyText": "As we get some initial feedback for AWS module usage, we notice many users would like to have the ability to use their customzied mechanism to load AWS credential and region because resources like S3 buckets and Glue catalogs are commonly centralized in a single AWS account. In particular, multiple users ask for the support of STS assume role credential provider. So this PR adds the support for loading a custom AwsClientConfigFactory to satisfy all customers need, and use the assume role feature as an example, so that people can use AssumeRoleConfigFactory to assume a role for access of AWS resources in cross-account cross-region cases.\nIn addition, we notice that similar to the work done in FileIO interface, the introduction of these features require all the related factory interfaces to have the initialize(Map catalogProperties) interface to cascadingly pass in the catalog properties. Therefore, we also introduce the CatalogConfigurable interface in iceberg-api to make the whole thing more organized.", "createdAt": "2020-11-28T00:13:01Z", "url": "https://github.com/apache/iceberg/pull/1844", "merged": true, "mergeCommit": {"oid": "545316ac274aae29903e924d2eb4c7faa3f9a177"}, "closed": true, "closedAt": "2020-12-19T16:28:08Z", "author": {"login": "jackye1995"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhK8e5gFqTU0MDQ1MTY5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnbxybAH2gAyNTI4ODE3OTYyOjJkZjVhMmNkYTI2N2I4NTVhNGJkMGVlMjVlZDk4YTg4MWRlZDRjMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDUxNjk1", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-540451695", "createdAt": "2020-11-29T06:41:50Z", "commit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwNjo0MTo1MFrOH7guXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwNjo0MTo1MFrOH7guXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA==", "bodyText": "Looks like the class in DynConstructors.builder(Class) is only used during hiddenImpl. Can probably just use DynConstructors.builder() unless you want to keep that open for later?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r532164188", "createdAt": "2020-11-29T06:41:50Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDIwNjQx", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-541420641", "createdAt": "2020-12-01T01:23:14Z", "commit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToyMzoxNFrOH8UatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToyMzoxNFrOH8UatQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ==", "bodyText": "Can you give a quick example of how this is used and how it simplifies configuration?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533011125", "createdAt": "2020-12-01T01:23:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTMxODIy", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-542131822", "createdAt": "2020-12-01T17:26:07Z", "commit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoyNjowOFrOH83x_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoyNjowOFrOH83x_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw==", "bodyText": "@rdblue, one thing we need to think about is how we want to pass properties down.  I feel like CatalogConfigurable is a bit of a misnomer here because we should really be able to specify properties at a Catalog level or a table level (e.g. someone may want to configure table specific credentials that differ from the catalog).\nHow these properties are accessed and cascade is somewhat unclear.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533590527", "createdAt": "2020-12-01T17:26:08Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzA0NjM3", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-542304637", "createdAt": "2020-12-01T21:19:28Z", "commit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxOToyOVrOH9ALVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMzozMlrOH9B5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODA4NA==", "bodyText": "this can go to npe if properties is null.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533728084", "createdAt": "2020-12-01T21:19:29Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "diffHunk": "@@ -44,6 +44,11 @@ public static double propertyAsDouble(Map<String, String> properties,\n     return defaultValue;\n   }\n \n+  public static Integer propertyAsInt(Map<String, String> properties, String property) {\n+    String value = properties.get(property);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODE2Ng==", "bodyText": "same here.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533728166", "createdAt": "2020-12-01T21:19:37Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "diffHunk": "@@ -53,6 +58,11 @@ public static int propertyAsInt(Map<String, String> properties,\n     return defaultValue;\n   }\n \n+  public static Long propertyAsLong(Map<String, String> properties, String property) {\n+    String value = properties.get(property);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODkyNQ==", "bodyText": "why do you need serializable?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533728925", "createdAt": "2020-12-01T21:21:07Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "diffHunk": "@@ -19,12 +19,15 @@\n \n package org.apache.iceberg.aws;\n \n+import java.io.Serializable;\n import java.util.Map;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.util.PropertyUtil;\n import software.amazon.awssdk.services.s3.model.ObjectCannedACL;\n \n-public class AwsProperties {\n+public class AwsProperties implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MTEyNg==", "bodyText": "This is not clear. Can you rephrase?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533751126", "createdAt": "2020-12-01T22:03:29Z", "author": {"login": "giovannifumarola"}, "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface for classes to implement when the class might be initialized during", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDQ2Nw==", "bodyText": "properties can be null at this point.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533754467", "createdAt": "2020-12-01T22:09:54Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDgwOQ==", "bodyText": "why do you use propertyutil.property()?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533754809", "createdAt": "2020-12-01T22:10:33Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTE4MQ==", "bodyText": "externalId can be null or empty. do you need any check here?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533755181", "createdAt": "2020-12-01T22:11:16Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleCredentialsProviderFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTYyMQ==", "bodyText": "you need to check if the caller has called init before calling configure.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533755621", "createdAt": "2020-12-01T22:12:09Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NjAzMA==", "bodyText": "same comments from the previous class.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533756030", "createdAt": "2020-12-01T22:13:02Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+\n+/**\n+ * Factory that uses the same configured region for all AWS client initialization,\n+ * and uses region in the default AWS region provider chain for refreshing assume role credentials.\n+ */\n+public class AssumeRoleSingleRegionFactory implements AwsClientRegionFactory {\n+\n+  private Region region;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NjMwOQ==", "bodyText": "RegionStr can be an incorrect value.\nWe need to check if region is correct.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533756309", "createdAt": "2020-12-01T22:13:32Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+\n+/**\n+ * Factory that uses the same configured region for all AWS client initialization,\n+ * and uses region in the default AWS region provider chain for refreshing assume role credentials.\n+ */\n+public class AssumeRoleSingleRegionFactory implements AwsClientRegionFactory {\n+\n+  private Region region;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // do not configure STS so it can pick up default credentials\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.region(region);\n+    }\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleSingleRegionFactory with null region\");\n+    region = Region.of(regionStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/d11a66bdfe9f5a199375a5d9cf13d8239fb40480", "committedDate": "2020-12-01T03:16:39Z", "message": "fix bugs"}, "afterCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/9f3d5ef8f006b9fb3e987756bbaa2737b5442804", "committedDate": "2020-12-02T02:18:34Z", "message": "AWS: support custom credentials, region and assume role functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNDU3NTMx", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-542457531", "createdAt": "2020-12-02T02:46:32Z", "commit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjo0NjozMlrOH9IMdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzowNzoyOVrOH9ImNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1OTQ0Ng==", "bodyText": "I remember reading about iceberg being able to support catalog backed by multiple cloud vendors based on its design, wondering if we do want to support that (and thus might want to change the name CatalogConfigurable).", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533859446", "createdAt": "2020-12-02T02:46:32Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2MzY5Ng==", "bodyText": "I think s3 passed in from this and the constructor below will be overwritten in initialize, do we want to consolidate them/mention in javadoc?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533863696", "createdAt": "2020-12-02T02:59:56Z", "author": {"login": "yyanyy"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -37,12 +37,16 @@\n  * See {@link S3URI#VALID_SCHEMES} for the list of supported S3 URI schemes.\n  */\n public class S3FileIO implements FileIO {\n-  private final SerializableSupplier<S3Client> s3;\n+  private SerializableSupplier<S3Client> s3;\n   private AwsProperties awsProperties;\n   private transient S3Client client;\n \n+  /**\n+   * No-arg constructor to load the FileIO dynamically.\n+   * <p>\n+   * All fields are initialized by calling {@link S3FileIO#initialize(Map)} later.\n+   */\n   public S3FileIO() {\n-    this(AwsClientUtil::defaultS3Client);\n   }\n \n   public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2NjAzNw==", "bodyText": "I think class.getSimpleName() could avoid changing this, but leaving as is doesn't harm.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533866037", "createdAt": "2020-12-02T03:07:29Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestCatalogUtil.java", "diffHunk": "@@ -118,7 +118,7 @@ public void loadCustomFileIO_badArg() {\n   public void loadCustomFileIO_badClass() {\n     AssertHelpers.assertThrows(\"cannot cast\",\n         IllegalArgumentException.class,\n-        \"does not implement FileIO\",\n+        \"does not implement org.apache.iceberg.io.FileIO\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTA5MDkw", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-545109090", "createdAt": "2020-12-04T16:27:00Z", "commit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzowMVrOH_YVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0NzoyOFrOH_ZLXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTAwNg==", "bodyText": "As it seems that we're standardizing on Map<String, String> for properties in a number of areas (catalog, table properties, etc.), It might make sense to just make this Configuratble and promote out side of Catalog.  I'm just certain we add a lot of value by making this catalog specific.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536221006", "createdAt": "2020-12-04T16:27:01Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface to implement if the class will be initialized during dynamic catalog loading in engines like Spark.\n+ * <p>\n+ * When {@link Catalog#initialize(String catalogName, Map catalogProperties)} is called,\n+ * The same catalog properties map is passed in to {@link CatalogConfigurable#initialize(Map catalogProperties)}\n+ * to cascadingly complete the full catalog loading process.\n+ */\n+public interface CatalogConfigurable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTQ3MQ==", "bodyText": "I'm somewhat mixed on whether we want to include this in Iceberg.  At a high-level, we want to leave as much AWS client configuration outside of Iceberg as possible (this allows for more flexibility without adding configuration/complexity to the iceberg project).  At the same time, I see we might want to include functionality in cases where it's so commonly used that everyone would end up implementing the same functionality.\nAt Netflix, our situation is more complicated than this would allow for, so we would likely have a custom implementation regardless.  In the more general case, I would assume that instance credentials and the default credential provider chain would be sufficient.  Should we just leave this out?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536225471", "createdAt": "2020-12-04T16:33:17Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of {@link AwsClientConfigFactory} for the assume role use case.\n+ */\n+public class AssumeRoleClientConfigFactory implements AwsClientConfigFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ==", "bodyText": "While I generally agree with the dynamically loading/configuring AWS Clients, something about this implementation feels a little awkward.  For example, this interface technically isn't a \"Factory\" per se (that's mostly just a naming issue, I still think general approach is sound.  Maybe AwsClientConfigurer).  It configures a client, but doesn't actually create anything new.  Also, the actual configuration is applied via AwsProperties::configure, which seems a little strange.\nI'd suggest making a small change to move the dynamic loading into the AwsClientUtil (just keep the class string reference in properties) and remove the configure from AwsProperties (keeping logic out of the properties class).  AwsClientConfigurer would initialize with AwsProperties or take it as a parameter so that configure can be called directly (not through the properties class).", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536234845", "createdAt": "2020-12-04T16:47:28Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "038aaccdb8869efd620ff68df951f5b0ccf11420", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/038aaccdb8869efd620ff68df951f5b0ccf11420", "committedDate": "2020-12-04T20:47:20Z", "message": "fix naming"}, "afterCommit": {"oid": "66448d2fbd78c40ff33e7c917eedaaa8618f8998", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/66448d2fbd78c40ff33e7c917eedaaa8618f8998", "committedDate": "2020-12-08T22:15:43Z", "message": "AWS: support custom client configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66448d2fbd78c40ff33e7c917eedaaa8618f8998", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/66448d2fbd78c40ff33e7c917eedaaa8618f8998", "committedDate": "2020-12-08T22:15:43Z", "message": "AWS: support custom client configuration"}, "afterCommit": {"oid": "083c3dfe8d61c229635919bff49edf0893c1087b", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/083c3dfe8d61c229635919bff49edf0893c1087b", "committedDate": "2020-12-10T08:04:09Z", "message": "AWS: support custom client configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "083c3dfe8d61c229635919bff49edf0893c1087b", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/083c3dfe8d61c229635919bff49edf0893c1087b", "committedDate": "2020-12-10T08:04:09Z", "message": "AWS: support custom client configuration"}, "afterCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/06ab6a19c257e5408686a1e55a22d265f4622861", "committedDate": "2020-12-10T08:10:55Z", "message": "AWS: support custom client configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTQ3MDAw", "url": "https://github.com/apache/iceberg/pull/1844#pullrequestreview-553947000", "createdAt": "2020-12-16T18:00:49Z", "commit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowMDo0OVrOIHSKVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxOToyNFrOIHS5ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwODUwMQ==", "bodyText": "I'm not sure it actually makes sense for the FileIO to implement CatalogConfigurable.  For S3FileIO, the initialization is just setting up the AwsProperties, which is also being set as part of the constructor and those two paths actually conflict (as you note in the comments).  However, this makes S3FileIO pretty confusing. (I'll add more comments on S3FileIO).", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544508501", "createdAt": "2020-12-16T18:00:49Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -29,7 +29,7 @@\n  * must be serializable because various clients of Spark tables may initialize this once and pass\n  * it off to a separate module that would then interact with the streams.\n  */\n-public interface FileIO extends Serializable {\n+public interface FileIO extends Serializable, CatalogConfigurable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjYyMQ==", "bodyText": "I don't feel like the factory reference should be held by AwsProperties.  This also complicates the Serialization as AwsClientFactory now needs to be Serializable and I'm not even sure that it is at this point due to the UrlConnectionHttpClient.create() reference.  It seems like we should separate AwsProperties and the AwsClientFactory.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544512621", "createdAt": "2020-12-16T18:07:14Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "diffHunk": "@@ -131,6 +170,8 @@\n   private String glueCatalogId;\n   private boolean glueCatalogSkipArchive;\n \n+  private AwsClientFactory clientFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxNTk5OQ==", "bodyText": "As I mention above, in the FileIO comment, having both this path and constructor path for initialization causes some problems.  If we use the default constructor, then initialize() gets called, don't we end up with two S3 client being created (and the first never gets properly closed)? I forgot this is a supplier, so it doesn't actually get created.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544515999", "createdAt": "2020-12-16T18:12:21Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -85,5 +101,6 @@ private S3Client client() {\n   @Override\n   public void initialize(Map<String, String> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxODI5OQ==", "bodyText": "As we did in a few other places (like S3OutputStream) it would be good to break out the builders a little as the nested builders tend to be a little harder to follow.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544518299", "createdAt": "2020-12-16T18:15:47Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of a {@link AwsClientFactory} for the assume role use case.\n+ * <p>\n+ * The factory is initialized with a role ARN, region and optional external ID to assume from catalog properties,\n+ * and configure all clients except the STS client to use the STS assume role credentials provider.\n+ * The STS client is initialized using default credential and region chain\n+ * and used to refresh the assume role session token.\n+ */\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private Region region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+    region = Region.of(regionStr);\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyMDYxMQ==", "bodyText": "Small issue I ran into when configuring StsClient was that region() was required in some cases (It may have been due to cross-account role assume in the same region, but I had to explicitly set it).  If that's not a common issue, we can ignore it for now.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544520611", "createdAt": "2020-12-16T18:19:24Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of a {@link AwsClientFactory} for the assume role use case.\n+ * <p>\n+ * The factory is initialized with a role ARN, region and optional external ID to assume from catalog properties,\n+ * and configure all clients except the STS client to use the STS assume role credentials provider.\n+ * The STS client is initialized using default credential and region chain\n+ * and used to refresh the assume role session token.\n+ */\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private Region region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+    region = Region.of(regionStr);\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+        .stsClient(StsClient.builder().httpClient(HTTP_CLIENT_DEFAULT).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/06ab6a19c257e5408686a1e55a22d265f4622861", "committedDate": "2020-12-10T08:10:55Z", "message": "AWS: support custom client configuration"}, "afterCommit": {"oid": "b949c4aea8000e1f1e5ff3275782fb1f26ad652d", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/b949c4aea8000e1f1e5ff3275782fb1f26ad652d", "committedDate": "2020-12-18T08:16:23Z", "message": "AWS: custom client configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a728eee2264cced77ca8766d7e97e8ef4c59f8b", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/3a728eee2264cced77ca8766d7e97e8ef4c59f8b", "committedDate": "2020-12-18T08:19:37Z", "message": "AWS: support custom client configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b949c4aea8000e1f1e5ff3275782fb1f26ad652d", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/b949c4aea8000e1f1e5ff3275782fb1f26ad652d", "committedDate": "2020-12-18T08:16:23Z", "message": "AWS: custom client configuration"}, "afterCommit": {"oid": "3a728eee2264cced77ca8766d7e97e8ef4c59f8b", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/3a728eee2264cced77ca8766d7e97e8ef4c59f8b", "committedDate": "2020-12-18T08:19:37Z", "message": "AWS: support custom client configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2df5a2cda267b855a4bd0ee25ed98a881ded4c07", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/2df5a2cda267b855a4bd0ee25ed98a881ded4c07", "committedDate": "2020-12-18T17:42:06Z", "message": "fix checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3454, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}