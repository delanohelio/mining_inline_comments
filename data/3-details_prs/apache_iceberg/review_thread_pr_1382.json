{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjk0Njk2", "number": 1382, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowNzo0M1rOEc1M5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowNzo0M1rOEc1M5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjY3MjM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/types/FixupTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowNzo0M1rOHHmfPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowNzo0M1rOHHmfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzczMjY3MQ==", "bodyText": "Sorry this class is so complicated. It's really just a Schema with partner visitor, but that pattern wasn't around when we needed to write this, so I used the custom order visitor. I should eventually go clean these up!", "url": "https://github.com/apache/iceberg/pull/1382#discussion_r477732671", "createdAt": "2020-08-27T00:07:43Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/types/FixupTypes.java", "diffHunk": "@@ -17,32 +17,23 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.spark;\n+package org.apache.iceberg.types;\n \n import java.util.List;\n import java.util.function.Supplier;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n-import org.apache.iceberg.types.Type;\n-import org.apache.iceberg.types.TypeUtil;\n-import org.apache.iceberg.types.Types;\n \n /**\n- * This is used to fix primitive types to match a table schema. Some types, like binary and fixed,\n- * are converted to the same Spark type. Conversion back can produce only one, which may not be\n- * correct. This uses a reference schema to override types that were lost in round-trip conversion.\n+ * This is used to fix primitive types to match a table schema. This uses a reference schema to\n+ * override types that were lost in round-trip conversion.\n  */\n-class FixupTypes extends TypeUtil.CustomOrderSchemaVisitor<Type> {\n+public abstract class FixupTypes extends TypeUtil.CustomOrderSchemaVisitor<Type> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aec0cc5d3446e7beeb798f56c14270bfe1dda55"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3687, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}