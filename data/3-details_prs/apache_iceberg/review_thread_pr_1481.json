{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzE5MzUy", "number": 1481, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDowNzoyOVrOEm05Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxNDo1NVrOEnHpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ3OTQzOnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDowNzozMFrOHXFRaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxMDowOVrOHXTWow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NTY3Mg==", "bodyText": "Because this was protected, I think we should keep it and just delegate to where the method moved. We can also deprecated it and set a version when it will be removed:\n  /**\n   * ...\n   * @deprecated will be removed in 0.11.0; use CatalogUtil.dropTableData instead.\n   */", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493965672", "createdAt": "2020-09-24T00:07:30Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -278,84 +268,6 @@ private Transaction newReplaceTableTransaction(boolean orCreate) {\n     }\n   }\n \n-  /**\n-   * Drops all data and metadata files referenced by TableMetadata.\n-   * <p>\n-   * This should be called by dropTable implementations to clean up table files once the table has been dropped in the\n-   * metastore.\n-   *\n-   * @param io a FileIO to use for deletes\n-   * @param metadata the last valid TableMetadata instance for a dropped table.\n-   */\n-  protected static void dropTableData(FileIO io, TableMetadata metadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NjM4Nw==", "bodyText": "Good point!\nDone", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494196387", "createdAt": "2020-09-24T10:10:09Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -278,84 +268,6 @@ private Transaction newReplaceTableTransaction(boolean orCreate) {\n     }\n   }\n \n-  /**\n-   * Drops all data and metadata files referenced by TableMetadata.\n-   * <p>\n-   * This should be called by dropTable implementations to clean up table files once the table has been dropped in the\n-   * metastore.\n-   *\n-   * @param io a FileIO to use for deletes\n-   * @param metadata the last valid TableMetadata instance for a dropped table.\n-   */\n-  protected static void dropTableData(FileIO io, TableMetadata metadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NTY3Mg=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ4MTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDowODo0NlrOHXFSrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxMDo0NlrOHXTYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NTk5OA==", "bodyText": "Nit: accidentally duplicated line?", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493965998", "createdAt": "2020-09-24T00:08:46Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -196,9 +197,10 @@ public boolean dropTable(TableIdentifier identifier, boolean purge) {\n \n     try {\n       if (purge && lastMetadata != null) {\n+        // Since the data files and the metadata files may store in different locations,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5Njc1MQ==", "bodyText": "Removed. Thanks", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494196751", "createdAt": "2020-09-24T10:10:46Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopCatalog.java", "diffHunk": "@@ -196,9 +197,10 @@ public boolean dropTable(TableIdentifier identifier, boolean purge) {\n \n     try {\n       if (purge && lastMetadata != null) {\n+        // Since the data files and the metadata files may store in different locations,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NTk5OA=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ4NjQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxMTowOVrOHXFVfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMzowMVrOHXiaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NjcxOA==", "bodyText": "I think this wasn't implemented before because it is not part of the Tables API, but now that this is the only implementation, maybe we should consider just deprecating the Tables API and making HadoopTables a stand-alone class.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493966718", "createdAt": "2020-09-24T00:11:09Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NzMzMA==", "bodyText": "Maybe this would merit another discussion, and another PR", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494197330", "createdAt": "2020-09-24T10:11:48Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NjcxOA=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MzA4OQ==", "bodyText": "Agreed.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494443089", "createdAt": "2020-09-24T16:13:01Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NjcxOA=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ4NzQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxMTozM1rOHXFWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoxMjo1N1rOHXTcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2Njg2MA==", "bodyText": "I think this should be a @throws instead of text.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493966860", "createdAt": "2020-09-24T00:11:33Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5Nzk1MQ==", "bodyText": "Done", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494197951", "createdAt": "2020-09-24T10:12:57Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2Njg2MA=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ5MTc2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxMzo1OFrOHXFYpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoxNlrOHXT-1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NzUyNg==", "bodyText": "The TableOperations created just below can tell you the same information. I think this should use that instead to avoid creating two.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493967526", "createdAt": "2020-09-24T00:13:58Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    // Just for checking if the table exists or not\n+    load(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjY3OA==", "bodyText": "Thanks for the idea!\nDone", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494206678", "createdAt": "2020-09-24T10:28:16Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    // Just for checking if the table exists or not\n+    load(location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NzUyNg=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ5MjYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNDoyM1rOHXFZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoyNFrOHXT_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NzY0NQ==", "bodyText": "Since this is a new method, you can use UncheckedIOException directly.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493967645", "createdAt": "2020-09-24T00:14:23Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    // Just for checking if the table exists or not\n+    load(location);\n+\n+    TableOperations ops = newTableOps(location);\n+    TableMetadata lastMetadata;\n+    if (purge && ops.current() != null) {\n+      lastMetadata = ops.current();\n+    } else {\n+      lastMetadata = null;\n+    }\n+\n+    try {\n+      if (purge && lastMetadata != null) {\n+        // Since the data files and the metadata files may store in different locations,\n+        // so it has to call dropTableData to force delete the data file.\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+      }\n+      Path tablePath = new Path(location);\n+      Util.getFs(tablePath, conf).delete(tablePath, true /* recursive */);\n+      return true;\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Failed to delete file: %s\", location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjc2MQ==", "bodyText": "Done", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494206761", "createdAt": "2020-09-24T10:28:24Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    // Just for checking if the table exists or not\n+    load(location);\n+\n+    TableOperations ops = newTableOps(location);\n+    TableMetadata lastMetadata;\n+    if (purge && ops.current() != null) {\n+      lastMetadata = ops.current();\n+    } else {\n+      lastMetadata = null;\n+    }\n+\n+    try {\n+      if (purge && lastMetadata != null) {\n+        // Since the data files and the metadata files may store in different locations,\n+        // so it has to call dropTableData to force delete the data file.\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+      }\n+      Path tablePath = new Path(location);\n+      Util.getFs(tablePath, conf).delete(tablePath, true /* recursive */);\n+      return true;\n+    } catch (IOException e) {\n+      throw new RuntimeIOException(e, \"Failed to delete file: %s\", location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2NzY0NQ=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ5NDcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNToxNFrOHXFaRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNjo0NFrOHXFcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2Nzk0MQ==", "bodyText": "Would it be faster to call this instead of calling dropTableData? There seems to be no need to read files to find what to delete, only to delete the remaining files afterward.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493967941", "createdAt": "2020-09-24T00:15:14Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    // Just for checking if the table exists or not\n+    load(location);\n+\n+    TableOperations ops = newTableOps(location);\n+    TableMetadata lastMetadata;\n+    if (purge && ops.current() != null) {\n+      lastMetadata = ops.current();\n+    } else {\n+      lastMetadata = null;\n+    }\n+\n+    try {\n+      if (purge && lastMetadata != null) {\n+        // Since the data files and the metadata files may store in different locations,\n+        // so it has to call dropTableData to force delete the data file.\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+      }\n+      Path tablePath = new Path(location);\n+      Util.getFs(tablePath, conf).delete(tablePath, true /* recursive */);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2ODM4NQ==", "bodyText": "Nevermind, I just remembered. And there's already a comment for it.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493968385", "createdAt": "2020-09-24T00:16:44Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files. Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   * Throws NoSuchTableException if the table does not exists.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    // Just for checking if the table exists or not\n+    load(location);\n+\n+    TableOperations ops = newTableOps(location);\n+    TableMetadata lastMetadata;\n+    if (purge && ops.current() != null) {\n+      lastMetadata = ops.current();\n+    } else {\n+      lastMetadata = null;\n+    }\n+\n+    try {\n+      if (purge && lastMetadata != null) {\n+        // Since the data files and the metadata files may store in different locations,\n+        // so it has to call dropTableData to force delete the data file.\n+        CatalogUtil.dropTableData(ops.io(), lastMetadata);\n+      }\n+      Path tablePath = new Path(location);\n+      Util.getFs(tablePath, conf).delete(tablePath, true /* recursive */);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2Nzk0MQ=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ5OTQ2OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoxNzo0MVrOHXFdDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyOTozNVrOHXUBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2ODY1Mg==", "bodyText": "Normally, we would use ImmutableSet.of(...). That's simpler and creates a set that can't be modified.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493968652", "createdAt": "2020-09-24T00:17:41Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -44,23 +61,31 @@\n   private static final String NAME = \"name\";\n   private static final String LOCATION = \"location\";\n \n+  private static final Set<String> PROPERTIES_TO_REMOVE = Stream\n+      .of(InputFormatConfig.TABLE_SCHEMA, InputFormatConfig.PARTITION_SPEC, LOCATION, NAME)\n+      .collect(Collectors.toCollection(HashSet::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNzM5OQ==", "bodyText": "Done", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494207399", "createdAt": "2020-09-24T10:29:35Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -44,23 +61,31 @@\n   private static final String NAME = \"name\";\n   private static final String LOCATION = \"location\";\n \n+  private static final Set<String> PROPERTIES_TO_REMOVE = Stream\n+      .of(InputFormatConfig.TABLE_SCHEMA, InputFormatConfig.PARTITION_SPEC, LOCATION, NAME)\n+      .collect(Collectors.toCollection(HashSet::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2ODY1Mg=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTUwNDUxOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyMDoxNlrOHXFf9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDo0MDoxNlrOHXUYCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2OTM5OA==", "bodyText": "Minor: Javadoc won't automatically break paragraphs, so you have to use <p> between them.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493969398", "createdAt": "2020-09-24T00:20:16Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -44,23 +61,31 @@\n   private static final String NAME = \"name\";\n   private static final String LOCATION = \"location\";\n \n+  private static final Set<String> PROPERTIES_TO_REMOVE = Stream\n+      .of(InputFormatConfig.TABLE_SCHEMA, InputFormatConfig.PARTITION_SPEC, LOCATION, NAME)\n+      .collect(Collectors.toCollection(HashSet::new));\n+\n   private Catalogs() {\n   }\n \n   /**\n    * Load an Iceberg table using the catalog and table identifier (or table path) specified by the configuration.\n-   * Catalog resolution happens in this order:\n-   * 1. Custom catalog if specified by {@link InputFormatConfig#CATALOG_LOADER_CLASS}\n-   * 2. Hadoop or Hive catalog if specified by {@link InputFormatConfig#CATALOG}\n-   * 3. Hadoop Tables\n    * @param conf a Hadoop conf\n    * @return an Iceberg table\n    */\n   public static Table loadTable(Configuration conf) {\n     return loadTable(conf, conf.get(InputFormatConfig.TABLE_IDENTIFIER), conf.get(InputFormatConfig.TABLE_LOCATION));\n   }\n \n-  // For use in HiveIcebergSerDe and HiveIcebergStorageHandler\n+  /**\n+   * Load an Iceberg table using the catalog specified by the configuration.\n+   * The table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) should be specified by\n+   * the controlling properties.\n+   * Used by HiveIcebergSerDe and HiveIcebergStorageHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxMzEzMA==", "bodyText": "Happily relearning javadoc formatting \ud83d\ude04\nDone", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494213130", "createdAt": "2020-09-24T10:40:16Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -44,23 +61,31 @@\n   private static final String NAME = \"name\";\n   private static final String LOCATION = \"location\";\n \n+  private static final Set<String> PROPERTIES_TO_REMOVE = Stream\n+      .of(InputFormatConfig.TABLE_SCHEMA, InputFormatConfig.PARTITION_SPEC, LOCATION, NAME)\n+      .collect(Collectors.toCollection(HashSet::new));\n+\n   private Catalogs() {\n   }\n \n   /**\n    * Load an Iceberg table using the catalog and table identifier (or table path) specified by the configuration.\n-   * Catalog resolution happens in this order:\n-   * 1. Custom catalog if specified by {@link InputFormatConfig#CATALOG_LOADER_CLASS}\n-   * 2. Hadoop or Hive catalog if specified by {@link InputFormatConfig#CATALOG}\n-   * 3. Hadoop Tables\n    * @param conf a Hadoop conf\n    * @return an Iceberg table\n    */\n   public static Table loadTable(Configuration conf) {\n     return loadTable(conf, conf.get(InputFormatConfig.TABLE_IDENTIFIER), conf.get(InputFormatConfig.TABLE_LOCATION));\n   }\n \n-  // For use in HiveIcebergSerDe and HiveIcebergStorageHandler\n+  /**\n+   * Load an Iceberg table using the catalog specified by the configuration.\n+   * The table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) should be specified by\n+   * the controlling properties.\n+   * Used by HiveIcebergSerDe and HiveIcebergStorageHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2OTM5OA=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTUwODg4OnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyMjoxNVrOHXFiYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMjo0OVrOHXiZ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDAxNg==", "bodyText": "It looks like this is the reason why the examples specify a table property. Can we instead use Hive schema DDL and convert it to Iceberg? Similarly, can we get the identity partition fields that way to create a spec?", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493970016", "createdAt": "2020-09-24T00:22:15Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -77,6 +102,77 @@ private static Table loadTable(Configuration conf, String tableIdentifier, Strin\n     return new HadoopTables(conf).load(tableLocation);\n   }\n \n+  /**\n+   * Creates an Iceberg table using the catalog specified by the configuration.\n+   * The properties should contain the following values:\n+   * <p><ul>\n+   * <li>Table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) is required\n+   * <li>Table schema ({@link InputFormatConfig#TABLE_SCHEMA}) is required\n+   * <li>Partition specification ({@link InputFormatConfig#PARTITION_SPEC}) is optional. Table will be unpartitioned if\n+   *  not provided\n+   * </ul><p>\n+   * Other properties will be handled over to the Table creation. The controlling properties above will not be\n+   * propagated.\n+   * @param conf a Hadoop conf\n+   * @param props the controlling properties\n+   * @return the created Iceberg table\n+   */\n+  public static Table createTable(Configuration conf, Properties props) {\n+    String schemaString = props.getProperty(InputFormatConfig.TABLE_SCHEMA);\n+    Preconditions.checkNotNull(schemaString, \"Table schema not set\");\n+    Schema schema = SchemaParser.fromJson(props.getProperty(InputFormatConfig.TABLE_SCHEMA));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxNjE2MA==", "bodyText": "I think we should keep the serialized schema for the Catalogs interface. Other systems like Impala, Presto, etc. might want to use it as well.\nI would like to tackle the Hive schema DDL in another PR. The data is available in HiveIcebergSerDe.initialize in a somewhat convoluted way. I would like to get it there and convert it to the Iceberg Schema string. From there I would only push the Iceberg related stuff down further.\nWhat do you think?", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494216160", "createdAt": "2020-09-24T10:46:15Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -77,6 +102,77 @@ private static Table loadTable(Configuration conf, String tableIdentifier, Strin\n     return new HadoopTables(conf).load(tableLocation);\n   }\n \n+  /**\n+   * Creates an Iceberg table using the catalog specified by the configuration.\n+   * The properties should contain the following values:\n+   * <p><ul>\n+   * <li>Table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) is required\n+   * <li>Table schema ({@link InputFormatConfig#TABLE_SCHEMA}) is required\n+   * <li>Partition specification ({@link InputFormatConfig#PARTITION_SPEC}) is optional. Table will be unpartitioned if\n+   *  not provided\n+   * </ul><p>\n+   * Other properties will be handled over to the Table creation. The controlling properties above will not be\n+   * propagated.\n+   * @param conf a Hadoop conf\n+   * @param props the controlling properties\n+   * @return the created Iceberg table\n+   */\n+  public static Table createTable(Configuration conf, Properties props) {\n+    String schemaString = props.getProperty(InputFormatConfig.TABLE_SCHEMA);\n+    Preconditions.checkNotNull(schemaString, \"Table schema not set\");\n+    Schema schema = SchemaParser.fromJson(props.getProperty(InputFormatConfig.TABLE_SCHEMA));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDAxNg=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0Mjk3Ng==", "bodyText": "I think it's fine to do this in a separate PR. I just really don't want to require setting properties with JSON schema or spec representations as the way to use Iceberg. It's okay for a way to customize if there isn't syntax, but normal cases should just use DDL.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494442976", "createdAt": "2020-09-24T16:12:49Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -77,6 +102,77 @@ private static Table loadTable(Configuration conf, String tableIdentifier, Strin\n     return new HadoopTables(conf).load(tableLocation);\n   }\n \n+  /**\n+   * Creates an Iceberg table using the catalog specified by the configuration.\n+   * The properties should contain the following values:\n+   * <p><ul>\n+   * <li>Table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) is required\n+   * <li>Table schema ({@link InputFormatConfig#TABLE_SCHEMA}) is required\n+   * <li>Partition specification ({@link InputFormatConfig#PARTITION_SPEC}) is optional. Table will be unpartitioned if\n+   *  not provided\n+   * </ul><p>\n+   * Other properties will be handled over to the Table creation. The controlling properties above will not be\n+   * propagated.\n+   * @param conf a Hadoop conf\n+   * @param props the controlling properties\n+   * @return the created Iceberg table\n+   */\n+  public static Table createTable(Configuration conf, Properties props) {\n+    String schemaString = props.getProperty(InputFormatConfig.TABLE_SCHEMA);\n+    Preconditions.checkNotNull(schemaString, \"Table schema not set\");\n+    Schema schema = SchemaParser.fromJson(props.getProperty(InputFormatConfig.TABLE_SCHEMA));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDAxNg=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTUxMjQwOnYy", "diffSide": "RIGHT", "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMDoyNDoyMFrOHXFkhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTowMTozOFrOHXVDKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDU2Ng==", "bodyText": "Somewhat out of scope: We might want to build a Catalog for this logic so that this class can avoid loading and checking the catalog in every method. The catalog would get created with the configuration and handle this delegation internally.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r493970566", "createdAt": "2020-09-24T00:24:20Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -77,6 +102,77 @@ private static Table loadTable(Configuration conf, String tableIdentifier, Strin\n     return new HadoopTables(conf).load(tableLocation);\n   }\n \n+  /**\n+   * Creates an Iceberg table using the catalog specified by the configuration.\n+   * The properties should contain the following values:\n+   * <p><ul>\n+   * <li>Table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) is required\n+   * <li>Table schema ({@link InputFormatConfig#TABLE_SCHEMA}) is required\n+   * <li>Partition specification ({@link InputFormatConfig#PARTITION_SPEC}) is optional. Table will be unpartitioned if\n+   *  not provided\n+   * </ul><p>\n+   * Other properties will be handled over to the Table creation. The controlling properties above will not be\n+   * propagated.\n+   * @param conf a Hadoop conf\n+   * @param props the controlling properties\n+   * @return the created Iceberg table\n+   */\n+  public static Table createTable(Configuration conf, Properties props) {\n+    String schemaString = props.getProperty(InputFormatConfig.TABLE_SCHEMA);\n+    Preconditions.checkNotNull(schemaString, \"Table schema not set\");\n+    Schema schema = SchemaParser.fromJson(props.getProperty(InputFormatConfig.TABLE_SCHEMA));\n+\n+    String specString = props.getProperty(InputFormatConfig.PARTITION_SPEC);\n+    PartitionSpec spec = PartitionSpec.unpartitioned();\n+    if (specString != null) {\n+      spec = PartitionSpecParser.fromJson(schema, specString);\n+    }\n+\n+    String location = props.getProperty(LOCATION);\n+\n+    // Create a table property map without the controlling properties\n+    Map<String, String> map = new HashMap<>(props.size());\n+    for (Object key : props.keySet()) {\n+      if (!PROPERTIES_TO_REMOVE.contains(key)) {\n+        map.put(key.toString(), props.get(key).toString());\n+      }\n+    }\n+\n+    Optional<Catalog> catalog = loadCatalog(conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyNDE3MA==", "bodyText": "HiveCatalog has a cache, but this might be useful for other Catalogs as well.\nThis seems like a good idea to pursue, but I do not promise anything here, as I have too much on my plate currently", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494224170", "createdAt": "2020-09-24T11:01:38Z", "author": {"login": "pvary"}, "path": "mr/src/main/java/org/apache/iceberg/mr/Catalogs.java", "diffHunk": "@@ -77,6 +102,77 @@ private static Table loadTable(Configuration conf, String tableIdentifier, Strin\n     return new HadoopTables(conf).load(tableLocation);\n   }\n \n+  /**\n+   * Creates an Iceberg table using the catalog specified by the configuration.\n+   * The properties should contain the following values:\n+   * <p><ul>\n+   * <li>Table identifier ({@link Catalogs#NAME}) or table path ({@link Catalogs#LOCATION}) is required\n+   * <li>Table schema ({@link InputFormatConfig#TABLE_SCHEMA}) is required\n+   * <li>Partition specification ({@link InputFormatConfig#PARTITION_SPEC}) is optional. Table will be unpartitioned if\n+   *  not provided\n+   * </ul><p>\n+   * Other properties will be handled over to the Table creation. The controlling properties above will not be\n+   * propagated.\n+   * @param conf a Hadoop conf\n+   * @param props the controlling properties\n+   * @return the created Iceberg table\n+   */\n+  public static Table createTable(Configuration conf, Properties props) {\n+    String schemaString = props.getProperty(InputFormatConfig.TABLE_SCHEMA);\n+    Preconditions.checkNotNull(schemaString, \"Table schema not set\");\n+    Schema schema = SchemaParser.fromJson(props.getProperty(InputFormatConfig.TABLE_SCHEMA));\n+\n+    String specString = props.getProperty(InputFormatConfig.PARTITION_SPEC);\n+    PartitionSpec spec = PartitionSpec.unpartitioned();\n+    if (specString != null) {\n+      spec = PartitionSpecParser.fromJson(schema, specString);\n+    }\n+\n+    String location = props.getProperty(LOCATION);\n+\n+    // Create a table property map without the controlling properties\n+    Map<String, String> map = new HashMap<>(props.size());\n+    for (Object key : props.keySet()) {\n+      if (!PROPERTIES_TO_REMOVE.contains(key)) {\n+        map.put(key.toString(), props.get(key).toString());\n+      }\n+    }\n+\n+    Optional<Catalog> catalog = loadCatalog(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3MDU2Ng=="}, "originalCommit": {"oid": "c584198d44cfa3b49fe93e078b1be11b1e66b8f9"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDU1MTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxNDo1NVrOHXifEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTowNDo1NFrOHX_Iag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0NDMwNg==", "bodyText": "I should have caught this yesterday, but shouldn't this return false instead of throwing the exception? That's what all the other drop methods do. If the table doesn't exist, it isn't an exceptional case. It just returns false to signal that it nothing needed to be done.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494444306", "createdAt": "2020-09-24T16:14:55Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   * @throws NoSuchTableException if the table does not exists.\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   * @throws NoSuchTableException if the table does not exists.\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    TableOperations ops = newTableOps(location);\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      if (purge) {\n+        lastMetadata = ops.current();\n+      }\n+    } else {\n+      throw new NoSuchTableException(\"Table does not exist at location: %s, so it can not be dropped\", location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1960cde82595ac31d5c2beee5e806ae6bb9c5eb6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxMzY0Mg==", "bodyText": "I should have caught this yesterday, but shouldn't this return false instead of throwing the exception? That's what all the other drop methods do. If the table doesn't exist, it isn't an exceptional case. It just returns false to signal that it nothing needed to be done.\n\nGood point! Finding it now is better than finding it after pushing the PR \ud83d\ude04\nFixed.", "url": "https://github.com/apache/iceberg/pull/1481#discussion_r494913642", "createdAt": "2020-09-25T11:04:54Z", "author": {"login": "pvary"}, "path": "core/src/main/java/org/apache/iceberg/hadoop/HadoopTables.java", "diffHunk": "@@ -144,6 +147,52 @@ public Table create(Schema schema, PartitionSpec spec, SortOrder order,\n     return new BaseTable(ops, location);\n   }\n \n+  /**\n+   * Drop a table and delete all data and metadata files.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @return true if the table was dropped\n+   * @throws NoSuchTableException if the table does not exists.\n+   */\n+  public boolean dropTable(String location) {\n+    return dropTable(location, true);\n+  }\n+\n+  /**\n+   * Drop a table; optionally delete data and metadata files.\n+   * <p>\n+   * If purge is set to true the implementation should delete all data and metadata files.\n+   *\n+   * @param location a path URI (e.g. hdfs:///warehouse/my_table)\n+   * @param purge if true, delete all data and metadata files in the table\n+   * @return true if the table was dropped\n+   * @throws NoSuchTableException if the table does not exists.\n+   */\n+  public boolean dropTable(String location, boolean purge) {\n+    TableOperations ops = newTableOps(location);\n+    TableMetadata lastMetadata = null;\n+    if (ops.current() != null) {\n+      if (purge) {\n+        lastMetadata = ops.current();\n+      }\n+    } else {\n+      throw new NoSuchTableException(\"Table does not exist at location: %s, so it can not be dropped\", location);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0NDMwNg=="}, "originalCommit": {"oid": "1960cde82595ac31d5c2beee5e806ae6bb9c5eb6"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3503, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}