{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODA3Mzk0", "number": 1340, "title": "Introduce GenericAppenderFactory and GenericAppenderHelper", "bodyText": "In #1293, we found lot of places use switch case avro orc parquet to create appender, these logicals can be extract to GenericAppenderFactory.", "createdAt": "2020-08-14T06:53:00Z", "url": "https://github.com/apache/iceberg/pull/1340", "merged": true, "mergeCommit": {"oid": "c66d0607011d7a87bb7f349b51fa0af78310beee"}, "closed": true, "closedAt": "2020-08-20T00:23:59Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-wUnigBqjM2NTUyODQ5MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAS0okgBqjM2Njg4NzMzMjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "197faffe70fc94cecb330748739a7916f8ce5593", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/197faffe70fc94cecb330748739a7916f8ce5593", "committedDate": "2020-08-14T07:47:41Z", "message": "Fix cases"}, "afterCommit": {"oid": "e2b8e6e7b7855e6051cc35dbbb86472b228c3821", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/e2b8e6e7b7855e6051cc35dbbb86472b228c3821", "committedDate": "2020-08-14T08:27:05Z", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2b8e6e7b7855e6051cc35dbbb86472b228c3821", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/e2b8e6e7b7855e6051cc35dbbb86472b228c3821", "committedDate": "2020-08-14T08:27:05Z", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper"}, "afterCommit": {"oid": "31ef1f31040e8e1753bbf771f3166a215b9b89f4", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/31ef1f31040e8e1753bbf771f3166a215b9b89f4", "committedDate": "2020-08-17T02:15:10Z", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f80e419de18896ce8f6e74f3a63102dbf47ecab6", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/f80e419de18896ce8f6e74f3a63102dbf47ecab6", "committedDate": "2020-08-17T07:32:31Z", "message": "Minor"}, "afterCommit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/38e060571797e758c5562c3b0cedb76119008ffd", "committedDate": "2020-08-17T08:44:40Z", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTYwNjU4", "url": "https://github.com/apache/iceberg/pull/1340#pullrequestreview-468960658", "createdAt": "2020-08-18T03:07:38Z", "commit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzowNzozOFrOHCBtgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzoxMDoxMlrOHCBwJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzIzMg==", "bodyText": "The name is usually a table name for the given schema.   not fileFormat.   we may need to remove this line, or set it with a reasonable table name.", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471887232", "createdAt": "2020-08-18T03:07:38Z", "author": {"login": "openinx"}, "path": "data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileAppenderFactory;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.parquet.Parquet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+/**\n+ * Factory to create a new {@link FileAppender} to write {@link Record}s.\n+ */\n+public class GenericAppenderFactory implements FileAppenderFactory<Record> {\n+\n+  private final Schema schema;\n+  private final Map<String, String> config = Maps.newHashMap();\n+\n+  public GenericAppenderFactory(Schema schema) {\n+    this.schema = schema;\n+  }\n+\n+  public GenericAppenderFactory set(String property, String value) {\n+    config.put(property, value);\n+    return this;\n+  }\n+\n+  public GenericAppenderFactory setAll(Map<String, String> properties) {\n+    config.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public FileAppender<Record> newAppender(OutputFile outputFile, FileFormat fileFormat) {\n+    try {\n+      switch (fileFormat) {\n+        case AVRO:\n+          return Avro.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(DataWriter::create)\n+              .named(fileFormat.name())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzMwMQ==", "bodyText": "ditto", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471887301", "createdAt": "2020-08-18T03:07:53Z", "author": {"login": "openinx"}, "path": "data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileAppenderFactory;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.parquet.Parquet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+/**\n+ * Factory to create a new {@link FileAppender} to write {@link Record}s.\n+ */\n+public class GenericAppenderFactory implements FileAppenderFactory<Record> {\n+\n+  private final Schema schema;\n+  private final Map<String, String> config = Maps.newHashMap();\n+\n+  public GenericAppenderFactory(Schema schema) {\n+    this.schema = schema;\n+  }\n+\n+  public GenericAppenderFactory set(String property, String value) {\n+    config.put(property, value);\n+    return this;\n+  }\n+\n+  public GenericAppenderFactory setAll(Map<String, String> properties) {\n+    config.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public FileAppender<Record> newAppender(OutputFile outputFile, FileFormat fileFormat) {\n+    try {\n+      switch (fileFormat) {\n+        case AVRO:\n+          return Avro.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(DataWriter::create)\n+              .named(fileFormat.name())\n+              .setAll(config)\n+              .build();\n+\n+        case PARQUET:\n+          return Parquet.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(GenericParquetWriter::buildWriter)\n+              .named(fileFormat.name())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NzkwOQ==", "bodyText": "To keep the consistent semantics,  I suggest to set overwrite=true. Both flink and spark's FileAppenderFactory have enabled the overwrite.", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471887909", "createdAt": "2020-08-18T03:10:12Z", "author": {"login": "openinx"}, "path": "data/src/main/java/org/apache/iceberg/data/GenericAppenderFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Map;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.avro.Avro;\n+import org.apache.iceberg.data.avro.DataWriter;\n+import org.apache.iceberg.data.orc.GenericOrcWriter;\n+import org.apache.iceberg.data.parquet.GenericParquetWriter;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.io.FileAppenderFactory;\n+import org.apache.iceberg.io.OutputFile;\n+import org.apache.iceberg.orc.ORC;\n+import org.apache.iceberg.parquet.Parquet;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+/**\n+ * Factory to create a new {@link FileAppender} to write {@link Record}s.\n+ */\n+public class GenericAppenderFactory implements FileAppenderFactory<Record> {\n+\n+  private final Schema schema;\n+  private final Map<String, String> config = Maps.newHashMap();\n+\n+  public GenericAppenderFactory(Schema schema) {\n+    this.schema = schema;\n+  }\n+\n+  public GenericAppenderFactory set(String property, String value) {\n+    config.put(property, value);\n+    return this;\n+  }\n+\n+  public GenericAppenderFactory setAll(Map<String, String> properties) {\n+    config.putAll(properties);\n+    return this;\n+  }\n+\n+  @Override\n+  public FileAppender<Record> newAppender(OutputFile outputFile, FileFormat fileFormat) {\n+    try {\n+      switch (fileFormat) {\n+        case AVRO:\n+          return Avro.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(DataWriter::create)\n+              .named(fileFormat.name())\n+              .setAll(config)\n+              .build();\n+\n+        case PARQUET:\n+          return Parquet.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(GenericParquetWriter::buildWriter)\n+              .named(fileFormat.name())\n+              .setAll(config)\n+              .build();\n+\n+        case ORC:\n+          return ORC.write(outputFile)\n+              .schema(schema)\n+              .createWriterFunc(GenericOrcWriter::buildWriter)\n+              .setAll(config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTY5MDgx", "url": "https://github.com/apache/iceberg/pull/1340#pullrequestreview-468969081", "createdAt": "2020-08-18T03:38:21Z", "commit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozODoyMVrOHCCKyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozODoyMVrOHCCKyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NDcyOQ==", "bodyText": "We could call the withPartition(partition) directly without this nullable check, because builder will handle  this inside it.", "url": "https://github.com/apache/iceberg/pull/1340#discussion_r471894729", "createdAt": "2020-08-18T03:38:21Z", "author": {"login": "openinx"}, "path": "data/src/test/java/org/apache/iceberg/data/GenericAppenderHelper.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.iceberg.AppendFiles;\n+import org.apache.iceberg.DataFile;\n+import org.apache.iceberg.DataFiles;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.Files;\n+import org.apache.iceberg.StructLike;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.io.FileAppender;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.junit.Assert;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * Helper for appending {@link DataFile} to a table or appending {@link Record}s to a table.\n+ */\n+public class GenericAppenderHelper {\n+\n+  private final Table table;\n+  private final FileFormat fileFormat;\n+  private final TemporaryFolder tmp;\n+\n+  public GenericAppenderHelper(Table table, FileFormat fileFormat, TemporaryFolder tmp) {\n+    this.table = table;\n+    this.fileFormat = fileFormat;\n+    this.tmp = tmp;\n+  }\n+\n+  public void appendToTable(DataFile... dataFiles) {\n+    Preconditions.checkNotNull(table, \"table not set\");\n+\n+    AppendFiles append = table.newAppend();\n+\n+    for (DataFile dataFile : dataFiles) {\n+      append = append.appendFile(dataFile);\n+    }\n+\n+    append.commit();\n+  }\n+\n+  public void appendToTable(List<Record> records) throws IOException {\n+    appendToTable(null, records);\n+  }\n+\n+  public void appendToTable(StructLike partition, List<Record> records) throws IOException {\n+    appendToTable(writeFile(partition, records));\n+  }\n+\n+  public DataFile writeFile(StructLike partition, List<Record> records) throws IOException {\n+    Preconditions.checkNotNull(table, \"table not set\");\n+    File file = tmp.newFile();\n+    Assert.assertTrue(file.delete());\n+    return appendToLocalFile(table, file, fileFormat, partition, records);\n+  }\n+\n+  private static DataFile appendToLocalFile(\n+      Table table, File file, FileFormat format, StructLike partition, List<Record> records)\n+      throws IOException {\n+    FileAppender<Record> appender = new GenericAppenderFactory(table.schema()).newAppender(\n+        Files.localOutput(file), format);\n+    try (FileAppender<Record> fileAppender = appender) {\n+      fileAppender.addAll(records);\n+    }\n+\n+    DataFiles.Builder builder = DataFiles.builder(table.spec())\n+        .withRecordCount(records.size())\n+        .withFileSizeInBytes(file.length())\n+        .withPath(file.toURI().toString())\n+        .withMetrics(appender.metrics())\n+        .withFormat(format);\n+    if (partition != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e060571797e758c5562c3b0cedb76119008ffd"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/63744eb3c4e7b4820a4de8d77611ec54e2870a60", "committedDate": "2020-08-19T03:12:46Z", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2382d337493ffa2c44e86a1349d3b994d719f38b", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/2382d337493ffa2c44e86a1349d3b994d719f38b", "committedDate": "2020-08-18T05:40:01Z", "message": "Address comments"}, "afterCommit": {"oid": "63744eb3c4e7b4820a4de8d77611ec54e2870a60", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/iceberg/commit/63744eb3c4e7b4820a4de8d77611ec54e2870a60", "committedDate": "2020-08-19T03:12:46Z", "message": "Introduce GenericAppenderFactory and GenericAppenderHelper"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4046, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}