{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjY4MTc1", "number": 1829, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDowNzozMlrOE9YFWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTowMTozOFrOFBWQrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzkzMTc5OnYy", "diffSide": "RIGHT", "path": "spark/src/main/java/org/apache/iceberg/spark/source/StructInternalRow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDowNzozMlrOH6CUiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDowNzozMlrOH6CUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxNzQ4MQ==", "bodyText": "The reason for changing this class is discussed in this thread", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r530617481", "createdAt": "2020-11-25T20:07:32Z", "author": {"login": "yyanyy"}, "path": "spark/src/main/java/org/apache/iceberg/spark/source/StructInternalRow.java", "diffHunk": "@@ -115,12 +120,30 @@ public short getShort(int ordinal) {\n \n   @Override\n   public int getInt(int ordinal) {\n-    return struct.get(ordinal, Integer.class);\n+    Object integer = struct.get(ordinal, Object.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODIyODMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1NzozMVrOH6FEjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1OTozMlrOIA4N-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjU0MA==", "bodyText": "inputschema can be null at this point.", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r530662540", "createdAt": "2020-11-25T21:57:31Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> getMetricsMode(inputSchema, metricsConfig, metrics.id()) != MetricsModes.None.get())\n+        .collect(Collectors.toMap(FieldMetrics::id, FieldMetrics::nanValueCount));\n+  }\n+\n+  public static MetricsModes.MetricsMode getMetricsMode(Schema inputSchema, MetricsConfig metricsConfig, int fieldId) {\n+    String columnName = inputSchema.findColumnName(fieldId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5MTEzMg==", "bodyText": "I'll add a validation check to ensure they are not null", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r530691132", "createdAt": "2020-11-25T23:24:32Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> getMetricsMode(inputSchema, metricsConfig, metrics.id()) != MetricsModes.None.get())\n+        .collect(Collectors.toMap(FieldMetrics::id, FieldMetrics::nanValueCount));\n+  }\n+\n+  public static MetricsModes.MetricsMode getMetricsMode(Schema inputSchema, MetricsConfig metricsConfig, int fieldId) {\n+    String columnName = inputSchema.findColumnName(fieldId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjU0MA=="}, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNjA3Ng==", "bodyText": "I agree. Let's add checks to fail when metricsConfig or inputSchema is null. This is a useful method so I think it is worth keeping it public, but we would ideally not fail with a NullPointerException. This is not called in a tight loop, so it should be fine to add the checks on each call.", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r536926076", "createdAt": "2020-12-06T01:06:06Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> getMetricsMode(inputSchema, metricsConfig, metrics.id()) != MetricsModes.None.get())\n+        .collect(Collectors.toMap(FieldMetrics::id, FieldMetrics::nanValueCount));\n+  }\n+\n+  public static MetricsModes.MetricsMode getMetricsMode(Schema inputSchema, MetricsConfig metricsConfig, int fieldId) {\n+    String columnName = inputSchema.findColumnName(fieldId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjU0MA=="}, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTk5NQ==", "bodyText": "Yes, sorry I overwrote my own earlier change that addressed this when I renamed this file...", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r537791995", "createdAt": "2020-12-07T19:59:32Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> getMetricsMode(inputSchema, metricsConfig, metrics.id()) != MetricsModes.None.get())\n+        .collect(Collectors.toMap(FieldMetrics::id, FieldMetrics::nanValueCount));\n+  }\n+\n+  public static MetricsModes.MetricsMode getMetricsMode(Schema inputSchema, MetricsConfig metricsConfig, int fieldId) {\n+    String columnName = inputSchema.findColumnName(fieldId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjU0MA=="}, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODIyODg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo0NFrOH6FE5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo0NFrOH6FE5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjYyOQ==", "bodyText": "same for metrics config.", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r530662629", "createdAt": "2020-11-25T21:57:44Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(\n+      Stream<FieldMetrics> fieldMetrics, MetricsConfig metricsConfig, Schema inputSchema) {\n+    if (fieldMetrics == null || inputSchema == null) {\n+      return Maps.newHashMap();\n+    }\n+\n+    return fieldMetrics\n+        .filter(metrics -> getMetricsMode(inputSchema, metricsConfig, metrics.id()) != MetricsModes.None.get())\n+        .collect(Collectors.toMap(FieldMetrics::id, FieldMetrics::nanValueCount));\n+  }\n+\n+  public static MetricsModes.MetricsMode getMetricsMode(Schema inputSchema, MetricsConfig metricsConfig, int fieldId) {\n+    String columnName = inputSchema.findColumnName(fieldId);\n+    return metricsConfig.columnMode(columnName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODIyOTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo1NVrOH6FFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMTo1Nzo1NVrOH6FFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MjcwNQ==", "bodyText": "NIT: add javadoc.", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r530662705", "createdAt": "2020-11-25T21:57:55Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/MetricsUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.iceberg.relocated.com.google.common.collect.Maps;\n+\n+public class MetricsUtil {\n+\n+  private MetricsUtil() {\n+  }\n+\n+  public static Map<Integer, Long> getNanValueCounts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c150f5a25a73e6bc87a6f686df0845a0ee4fd6cc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTU3NDQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/NaNFieldMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTowMDoxN1rOIADUkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1OTozOVrOIA4OOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNTMzMA==", "bodyText": "Since we expect to add lower and upper bounds to this class (since Parquet and ORC do not ignore NaN values), I think this should probably be called FloatFieldMetrics. That way we don't need to rename when this adds support for lower and upper.", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r536925330", "createdAt": "2020-12-06T01:00:17Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/NaNFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {\n+public class NaNFieldMetrics extends FieldMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d88f21aa7ee7ec332b5fa628d427351c1988fa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MjA1Nw==", "bodyText": "Sounds good; I'll keep the javadoc as is since they currently reflect reality, and will update comments to mention tracking float fields when the class starts to track upper/lower bound", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r537792057", "createdAt": "2020-12-07T19:59:39Z", "author": {"login": "yyanyy"}, "path": "core/src/main/java/org/apache/iceberg/NaNFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {\n+public class NaNFieldMetrics extends FieldMetrics {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNTMzMA=="}, "originalCommit": {"oid": "b7d88f21aa7ee7ec332b5fa628d427351c1988fa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTU3NjE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/NaNFieldMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTowMTozOFrOIADVQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwMTowMTozOFrOIADVQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNTUwNA==", "bodyText": "This demonstrates the drawback to adding too much context to an exception message. The method and class should be in the stack trace and renames require updating this message. Let's keep the good error message, but remove the class and method names.", "url": "https://github.com/apache/iceberg/pull/1829#discussion_r536925504", "createdAt": "2020-12-06T01:01:38Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/NaNFieldMetrics.java", "diffHunk": "@@ -17,51 +17,50 @@\n  * under the License.\n  */\n \n-package org.apache.iceberg.parquet;\n+package org.apache.iceberg;\n \n import java.nio.ByteBuffer;\n-import org.apache.iceberg.FieldMetrics;\n \n /**\n- * Iceberg internally tracked field level metrics, used by Parquet writer only.\n+ * Iceberg internally tracked field level metrics, used by Parquet and ORC writers only.\n  * <p>\n- * Parquet keeps track of most metrics in its footer, and only NaN counter is actually tracked by writers.\n- * This wrapper ensures that metrics not being updated by Parquet writers will not be incorrectly used, by throwing\n+ * Parquet/ORC keeps track of most metrics in file statistics, and only NaN counter is actually tracked by writers.\n+ * This wrapper ensures that metrics not being updated by those writers will not be incorrectly used, by throwing\n  * exceptions when they are accessed.\n  */\n-public class ParquetFieldMetrics extends FieldMetrics {\n+public class NaNFieldMetrics extends FieldMetrics {\n \n   /**\n-   * Constructor for creating a Parquet-specific FieldMetrics.\n+   * Constructor for creating a FieldMetrics with only NaN counter.\n    * @param id field id being tracked by the writer\n    * @param nanValueCount number of NaN values, will only be non-0 for double or float field.\n    */\n-  public ParquetFieldMetrics(int id,\n-                             long nanValueCount) {\n+  public NaNFieldMetrics(int id,\n+                         long nanValueCount) {\n     super(id, 0L, 0L, nanValueCount, null, null);\n   }\n \n   @Override\n   public long valueCount() {\n     throw new IllegalStateException(\n-        \"Shouldn't access valueCount() within ParquetFieldMetrics, as this metric is tracked by Parquet footer. \");\n+        \"Shouldn't access valueCount() within NaNOnlyFieldMetrics, as this metric is tracked in file statistics. \");\n   }\n \n   @Override\n   public long nullValueCount() {\n     throw new IllegalStateException(\n-        \"Shouldn't access nullValueCount() within ParquetFieldMetrics, as this metric is tracked by Parquet footer. \");\n+        \"Shouldn't access nullValueCount() within NaNOnlyFieldMetrics, as this metric is tracked in file statistics. \");\n   }\n \n   @Override\n   public ByteBuffer lowerBound() {\n     throw new IllegalStateException(\n-        \"Shouldn't access lowerBound() within ParquetFieldMetrics, as this metric is tracked by Parquet footer. \");\n+        \"Shouldn't access lowerBound() within NaNOnlyFieldMetrics, as this metric is tracked in file statistics. \");\n   }\n \n   @Override\n   public ByteBuffer upperBound() {\n     throw new IllegalStateException(\n-        \"Shouldn't access upperBound() within ParquetFieldMetrics, as this metric is tracked by Parquet footer. \");\n+        \"Shouldn't access upperBound() within NaNOnlyFieldMetrics, as this metric is tracked in file statistics. \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7d88f21aa7ee7ec332b5fa628d427351c1988fa"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3168, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}