{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3OTI1MDcz", "number": 1835, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzozOToxMVrOE-JVZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0NDowNVrOE-JWwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjAwMTAwOnYy", "diffSide": "RIGHT", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzozOToxMVrOH7MSuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjowODowOFrOH7pubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTQzMg==", "bodyText": "nit: maybe use tableObjects or tables for this and use tableNames for prev.", "url": "https://github.com/apache/iceberg/pull/1835#discussion_r531829432", "createdAt": "2020-11-28T03:39:11Z", "author": {"login": "rdsr"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -118,8 +119,11 @@ public HiveCatalog(\n \n     try {\n       List<String> tables = clients.run(client -> client.getAllTables(database));\n-      List<TableIdentifier> tableIdentifiers = tables.stream()\n-          .map(t -> TableIdentifier.of(namespace, t))\n+      List<Table> tableObject = clients.run(client -> client.getTableObjectsByName(database, tables));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d880747891efdbbff891f35106882a666ca39"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMxMTY2Mg==", "bodyText": "I udpated it, it is more clear", "url": "https://github.com/apache/iceberg/pull/1835#discussion_r532311662", "createdAt": "2020-11-30T02:08:08Z", "author": {"login": "zhangjun0x01"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -118,8 +119,11 @@ public HiveCatalog(\n \n     try {\n       List<String> tables = clients.run(client -> client.getAllTables(database));\n-      List<TableIdentifier> tableIdentifiers = tables.stream()\n-          .map(t -> TableIdentifier.of(namespace, t))\n+      List<Table> tableObject = clients.run(client -> client.getTableObjectsByName(database, tables));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTQzMg=="}, "originalCommit": {"oid": "fa4d880747891efdbbff891f35106882a666ca39"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjAwMzMyOnYy", "diffSide": "RIGHT", "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0MTo1MVrOH7MTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjowNzoxM1rOH7ptuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTY4Ng==", "bodyText": "in org.apache.hadoop.hive.metastore.api.Table class I do see internally to check for table.getParameters is null or not. Do you think that check makes sense here? I'm not completely certain whether table.getParameters won't be null", "url": "https://github.com/apache/iceberg/pull/1835#discussion_r531829686", "createdAt": "2020-11-28T03:41:51Z", "author": {"login": "rdsr"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -118,8 +119,11 @@ public HiveCatalog(\n \n     try {\n       List<String> tables = clients.run(client -> client.getAllTables(database));\n-      List<TableIdentifier> tableIdentifiers = tables.stream()\n-          .map(t -> TableIdentifier.of(namespace, t))\n+      List<Table> tableObject = clients.run(client -> client.getTableObjectsByName(database, tables));\n+      List<TableIdentifier> tableIdentifiers = tableObject.stream()\n+          .filter(table -> BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE\n+              .equalsIgnoreCase(table.getParameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d880747891efdbbff891f35106882a666ca39"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMxMTQ4MQ==", "bodyText": "Yes,I added the check", "url": "https://github.com/apache/iceberg/pull/1835#discussion_r532311481", "createdAt": "2020-11-30T02:07:13Z", "author": {"login": "zhangjun0x01"}, "path": "hive-metastore/src/main/java/org/apache/iceberg/hive/HiveCatalog.java", "diffHunk": "@@ -118,8 +119,11 @@ public HiveCatalog(\n \n     try {\n       List<String> tables = clients.run(client -> client.getAllTables(database));\n-      List<TableIdentifier> tableIdentifiers = tables.stream()\n-          .map(t -> TableIdentifier.of(namespace, t))\n+      List<Table> tableObject = clients.run(client -> client.getTableObjectsByName(database, tables));\n+      List<TableIdentifier> tableIdentifiers = tableObject.stream()\n+          .filter(table -> BaseMetastoreTableOperations.ICEBERG_TABLE_TYPE_VALUE\n+              .equalsIgnoreCase(table.getParameters().get(BaseMetastoreTableOperations.TABLE_TYPE_PROP)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTY4Ng=="}, "originalCommit": {"oid": "fa4d880747891efdbbff891f35106882a666ca39"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjAwNDQ4OnYy", "diffSide": "RIGHT", "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/HiveTableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwMzo0NDowNVrOH7MUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjoxMjoxMFrOH7pyVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTgzMg==", "bodyText": "a simpler way IMO could have been to use HiveCatalog and Iceberg apis  to create a table and then drop the iceberg metadata from Hive table properties. Though I guess this is fine too.", "url": "https://github.com/apache/iceberg/pull/1835#discussion_r531829832", "createdAt": "2020-11-28T03:44:05Z", "author": {"login": "rdsr"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/HiveTableTest.java", "diffHunk": "@@ -298,14 +308,43 @@ public void testFailure() throws TException {\n   }\n \n   @Test\n-  public void testListTables() {\n+  public void testListTables() throws TException, IOException {\n     List<TableIdentifier> tableIdents = catalog.listTables(TABLE_IDENTIFIER.namespace());\n     List<TableIdentifier> expectedIdents = tableIdents.stream()\n         .filter(t -> t.namespace().level(0).equals(DB_NAME) && t.name().equals(TABLE_NAME))\n         .collect(Collectors.toList());\n \n     Assert.assertEquals(1, expectedIdents.size());\n     Assert.assertTrue(catalog.tableExists(TABLE_IDENTIFIER));\n+\n+    // create a hive table\n+    String hiveTableName = \"test_hive_table\";\n+    org.apache.hadoop.hive.metastore.api.Table hiveTable = createHiveTable(hiveTableName);\n+    metastoreClient.createTable(hiveTable);\n+\n+    List<TableIdentifier> tableIdents1 = catalog.listTables(TABLE_IDENTIFIER.namespace());\n+    Assert.assertEquals(\"should only 1 iceberg table .\", 1, tableIdents1.size());\n+    Assert.assertTrue(catalog.tableExists(TABLE_IDENTIFIER));\n+    metastoreClient.dropTable(DB_NAME, hiveTableName);\n+  }\n+\n+  private org.apache.hadoop.hive.metastore.api.Table createHiveTable(String hiveTableName) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d880747891efdbbff891f35106882a666ca39"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMxMjY2MQ==", "bodyText": "I think we can remove the properties from iceberg table, but it is not a correct hive table. Although the unit test can pass, I am not sure whether it makes sense.", "url": "https://github.com/apache/iceberg/pull/1835#discussion_r532312661", "createdAt": "2020-11-30T02:12:10Z", "author": {"login": "zhangjun0x01"}, "path": "hive-metastore/src/test/java/org/apache/iceberg/hive/HiveTableTest.java", "diffHunk": "@@ -298,14 +308,43 @@ public void testFailure() throws TException {\n   }\n \n   @Test\n-  public void testListTables() {\n+  public void testListTables() throws TException, IOException {\n     List<TableIdentifier> tableIdents = catalog.listTables(TABLE_IDENTIFIER.namespace());\n     List<TableIdentifier> expectedIdents = tableIdents.stream()\n         .filter(t -> t.namespace().level(0).equals(DB_NAME) && t.name().equals(TABLE_NAME))\n         .collect(Collectors.toList());\n \n     Assert.assertEquals(1, expectedIdents.size());\n     Assert.assertTrue(catalog.tableExists(TABLE_IDENTIFIER));\n+\n+    // create a hive table\n+    String hiveTableName = \"test_hive_table\";\n+    org.apache.hadoop.hive.metastore.api.Table hiveTable = createHiveTable(hiveTableName);\n+    metastoreClient.createTable(hiveTable);\n+\n+    List<TableIdentifier> tableIdents1 = catalog.listTables(TABLE_IDENTIFIER.namespace());\n+    Assert.assertEquals(\"should only 1 iceberg table .\", 1, tableIdents1.size());\n+    Assert.assertTrue(catalog.tableExists(TABLE_IDENTIFIER));\n+    metastoreClient.dropTable(DB_NAME, hiveTableName);\n+  }\n+\n+  private org.apache.hadoop.hive.metastore.api.Table createHiveTable(String hiveTableName) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyOTgzMg=="}, "originalCommit": {"oid": "fa4d880747891efdbbff891f35106882a666ca39"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3171, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}