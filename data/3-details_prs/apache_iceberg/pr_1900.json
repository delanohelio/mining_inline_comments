{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1Njg1NzE4", "number": 1900, "title": "AWS: add more S3FileIO tests, cleanup related codebase", "bodyText": "@danielcweeks made the following updates to S3FileIO related code:\n\nadded integration tests that verifies upload behaviors against S3\nupdated variable names and documentations in AwsProperties to be consistent with others, added corresponding tests\nfixed invalid reference to private variable S3URI#VALID_SCHEMES in doc of S3FileIO\nmuted errorprone warnings:\n\n/iceberg/aws/src/main/java/org/apache/iceberg/aws/s3/S3RequestUtil.java:35: warning: [UnnecessaryLambda] Returning a lambda from a helper method or saving it in a constant is unnecessary; prefer to implement the functional interface method directly and use a method reference instead.\n  private static final Function<ServerSideEncryption, S3Request.Builder> NULL_SSE_SETTER = sse -> null;\n                                                                         ^\n    (see https://errorprone.info/bugpattern/UnnecessaryLambda)\n  Did you mean 'private static  S3Request.Builder nullSseSetter(ServerSideEncryption sse){return null;}'?\n/iceberg/aws/src/main/java/org/apache/iceberg/aws/s3/S3RequestUtil.java:36: warning: [UnnecessaryLambda] Returning a lambda from a helper method or saving it in a constant is unnecessary; prefer to implement the functional interface method directly and use a method reference instead.\n  private static final Function<String, S3Request.Builder> NULL_STRING_SETTER = s -> null;\n                                                           ^\n    (see https://errorprone.info/bugpattern/UnnecessaryLambda)\n  Did you mean 'private static  S3Request.Builder nullStringSetter(String s){return null;}'?\n/iceberg/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java:92: warning: [StaticAssignmentInConstructor] This assignment is to a static field. Mutating static state from a constructor is highly error-prone.\n          executorService = MoreExecutors.getExitingExecutorService(\n                          ^\n    (see https://errorprone.info/bugpattern/StaticAssignmentInConstructor)\n/iceberg/aws/src/main/java/org/apache/iceberg/aws/s3/S3OutputStream.java:92: warning: [StaticGuardedByInstance] Write to static variable should not be guarded by instance lock 'this'\n          executorService = MoreExecutors.getExitingExecutorService(\n          ^\n    (see https://errorprone.info/bugpattern/StaticGuardedByInstance)\n4 warnings", "createdAt": "2020-12-10T06:11:11Z", "url": "https://github.com/apache/iceberg/pull/1900", "merged": true, "mergeCommit": {"oid": "d48c7a37a0c78b7b3de69b019f495b60f7997e80"}, "closed": true, "closedAt": "2020-12-11T17:08:42Z", "author": {"login": "jackye1995"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdktAzjgH2gAyNTM1Njg1NzE4OjAyY2ZiMmMxNzRjMWExMWY4NDk0NGQ0NGRmNTk1NDQyMWY5MzA4YmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlLE8FgFqTU1MDMwMTI2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02cfb2c174c1a11f84944d44df5954421f9308be", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/02cfb2c174c1a11f84944d44df5954421f9308be", "committedDate": "2020-12-10T06:05:07Z", "message": "AWS: add more S3FileIO tests, cleanup codebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjgyMzE5", "url": "https://github.com/apache/iceberg/pull/1900#pullrequestreview-549682319", "createdAt": "2020-12-10T23:04:40Z", "commit": {"oid": "02cfb2c174c1a11f84944d44df5954421f9308be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzowNDo0MFrOIDhgFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzowNDo0MFrOIDhgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2NTUyNg==", "bodyText": "Maybe I'm missing something, but I don't think these are actually testing the multipart upload.  If we're writing with the OutputStream::write interface, that would only be writing a single byte, so 100 bytes in this case.  That wouldn't be enough to trigger the multipart behavior.\nI think that's the case for most of the tests I see here.  You might want to look at the S3Outputstream test because you can actually validate the operations performed like this: https://github.com/apache/iceberg/blob/master/aws/src/test/java/org/apache/iceberg/aws/s3/S3OutputStreamTest.java#L109", "url": "https://github.com/apache/iceberg/pull/1900#discussion_r540565526", "createdAt": "2020-12-10T23:04:40Z", "author": {"login": "danielcweeks"}, "path": "aws/src/integration/java/org/apache/iceberg/aws/s3/S3MultipartUploadTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws.s3;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.aws.AwsClientUtil;\n+import org.apache.iceberg.aws.AwsIntegTestUtil;\n+import org.apache.iceberg.aws.AwsProperties;\n+import org.apache.iceberg.io.InputFile;\n+import org.apache.iceberg.io.PositionOutputStream;\n+import org.apache.iceberg.io.SeekableInputStream;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import software.amazon.awssdk.services.s3.S3Client;\n+\n+/**\n+ * Long-running tests to ensure multipart upload logic is resilient\n+ */\n+public class S3MultipartUploadTest {\n+\n+  private final Random random = new Random(1);\n+  private static S3Client s3;\n+  private static String bucketName;\n+  private static String prefix;\n+  private String objectUri;\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    s3 = AwsClientUtil.defaultS3Client();\n+    bucketName = AwsIntegTestUtil.testBucketName();\n+    prefix = UUID.randomUUID().toString();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    AwsIntegTestUtil.cleanS3Bucket(s3, bucketName, prefix);\n+  }\n+\n+  @Before\n+  public void before() {\n+    String objectKey = String.format(\"%s/%s\", prefix, UUID.randomUUID().toString());\n+    objectUri = String.format(\"s3://%s/%s\", bucketName, objectKey);\n+  }\n+\n+  @Test\n+  public void testManyParts_writeWithInt() throws IOException {\n+    AwsProperties properties = new AwsProperties();\n+    properties.setS3FileIoMultiPartSize(AwsProperties.S3FILEIO_MULTIPART_SIZE_MIN);\n+    S3FileIO io = new S3FileIO(() -> s3, properties);\n+    PositionOutputStream outputStream = io.newOutputFile(objectUri).create();\n+    for (int i = 0; i < 100; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02cfb2c174c1a11f84944d44df5954421f9308be"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53c011b67351975b916c0b9cc09fc5c4b75e8118", "author": {"user": {"login": "jackye1995", "name": "Jack Ye"}}, "url": "https://github.com/apache/iceberg/commit/53c011b67351975b916c0b9cc09fc5c4b75e8118", "committedDate": "2020-12-11T05:39:36Z", "message": "refactor upload test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMzAxMjYx", "url": "https://github.com/apache/iceberg/pull/1900#pullrequestreview-550301261", "createdAt": "2020-12-11T17:06:47Z", "commit": {"oid": "53c011b67351975b916c0b9cc09fc5c4b75e8118"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3581, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}