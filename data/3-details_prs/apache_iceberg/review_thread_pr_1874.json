{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDg0ODgx", "number": 1874, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo1MDo1NVrOFAzz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo1MjoxMVrOFA419A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzkzMTczOnYy", "diffSide": "RIGHT", "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo1MDo1NVrOH_RvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDo0NjoxNlrOH_UB9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMzA4OA==", "bodyText": "Not sure we need some of the more generic checks here, like testing if named and pos args cannot be mixed", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536113088", "createdAt": "2020-12-04T13:50:55Z", "author": {"login": "RussellSpitzer"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.extensions;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchProcedureException;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.TableProperties.GC_ENABLED;\n+\n+public class TestExpireSnapshotsProcedure extends SparkExtensionsTestBase {\n+\n+  public TestExpireSnapshotsProcedure(String catalogName, String implementation, Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+  }\n+\n+  @After\n+  public void removeTables() {\n+    sql(\"DROP TABLE IF EXISTS %s\", tableName);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsInEmptyTable() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name());\n+    assertEquals(\"Should not delete any files\", ImmutableList.of(row(0L, 0L, 0L)), output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsUsingPositionalArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+    Snapshot firstSnapshot = table.currentSnapshot();\n+\n+    waitUntilAfter(firstSnapshot.timestampMillis());\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    table.refresh();\n+\n+    Snapshot secondSnapshot = table.currentSnapshot();\n+    Timestamp secondSnapshotTimestamp = Timestamp.from(Instant.ofEpochMilli(secondSnapshot.timestampMillis()));\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    // expire without retainLast param\n+    List<Object[]> output1 = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), secondSnapshotTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output1);\n+\n+    table.refresh();\n+\n+    Assert.assertEquals(\"Should expire one snapshot\", 1, Iterables.size(table.snapshots()));\n+\n+    sql(\"INSERT OVERWRITE %s VALUES (3, 'c')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (4, 'd')\", tableName);\n+    assertEquals(\"Should have expected rows\",\n+        ImmutableList.of(row(3L, \"c\"), row(4L, \"d\")),\n+        sql(\"SELECT * FROM %s ORDER BY id\", tableName));\n+\n+    table.refresh();\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    Assert.assertEquals(\"Should be 3 snapshots\", 3, Iterables.size(table.snapshots()));\n+\n+    // expire with retainLast param\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 2)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(2L, 2L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotUsingNamedArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 1)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsGCDisabled() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'false')\", tableName, GC_ENABLED);\n+\n+    AssertHelpers.assertThrows(\"Should reject call\",\n+        ValidationException.class, \"Cannot expire snapshots: GC is disabled\",\n+        () -> sql(\"CALL %s.system.expire_snapshots('%s', '%s')\", catalogName,\n+            tableIdent.namespace(), tableIdent.name()));\n+  }\n+\n+  @Test\n+  public void testInvalidExpireSnapshotsCases() {\n+    AssertHelpers.assertThrows(\"Should not allow mixed args\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzOTg1Ng==", "bodyText": "It is a bit weird but we have such checks in other procedures so I added for consistency.", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536139856", "createdAt": "2020-12-04T14:30:59Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.extensions;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchProcedureException;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.TableProperties.GC_ENABLED;\n+\n+public class TestExpireSnapshotsProcedure extends SparkExtensionsTestBase {\n+\n+  public TestExpireSnapshotsProcedure(String catalogName, String implementation, Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+  }\n+\n+  @After\n+  public void removeTables() {\n+    sql(\"DROP TABLE IF EXISTS %s\", tableName);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsInEmptyTable() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name());\n+    assertEquals(\"Should not delete any files\", ImmutableList.of(row(0L, 0L, 0L)), output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsUsingPositionalArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+    Snapshot firstSnapshot = table.currentSnapshot();\n+\n+    waitUntilAfter(firstSnapshot.timestampMillis());\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    table.refresh();\n+\n+    Snapshot secondSnapshot = table.currentSnapshot();\n+    Timestamp secondSnapshotTimestamp = Timestamp.from(Instant.ofEpochMilli(secondSnapshot.timestampMillis()));\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    // expire without retainLast param\n+    List<Object[]> output1 = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), secondSnapshotTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output1);\n+\n+    table.refresh();\n+\n+    Assert.assertEquals(\"Should expire one snapshot\", 1, Iterables.size(table.snapshots()));\n+\n+    sql(\"INSERT OVERWRITE %s VALUES (3, 'c')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (4, 'd')\", tableName);\n+    assertEquals(\"Should have expected rows\",\n+        ImmutableList.of(row(3L, \"c\"), row(4L, \"d\")),\n+        sql(\"SELECT * FROM %s ORDER BY id\", tableName));\n+\n+    table.refresh();\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    Assert.assertEquals(\"Should be 3 snapshots\", 3, Iterables.size(table.snapshots()));\n+\n+    // expire with retainLast param\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 2)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(2L, 2L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotUsingNamedArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 1)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsGCDisabled() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'false')\", tableName, GC_ENABLED);\n+\n+    AssertHelpers.assertThrows(\"Should reject call\",\n+        ValidationException.class, \"Cannot expire snapshots: GC is disabled\",\n+        () -> sql(\"CALL %s.system.expire_snapshots('%s', '%s')\", catalogName,\n+            tableIdent.namespace(), tableIdent.name()));\n+  }\n+\n+  @Test\n+  public void testInvalidExpireSnapshotsCases() {\n+    AssertHelpers.assertThrows(\"Should not allow mixed args\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMzA4OA=="}, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MDUxOQ==", "bodyText": "Sounds fine, It doesn't really matter since they run so quickly.", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536150519", "createdAt": "2020-12-04T14:46:16Z", "author": {"login": "RussellSpitzer"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.extensions;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchProcedureException;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.TableProperties.GC_ENABLED;\n+\n+public class TestExpireSnapshotsProcedure extends SparkExtensionsTestBase {\n+\n+  public TestExpireSnapshotsProcedure(String catalogName, String implementation, Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+  }\n+\n+  @After\n+  public void removeTables() {\n+    sql(\"DROP TABLE IF EXISTS %s\", tableName);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsInEmptyTable() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name());\n+    assertEquals(\"Should not delete any files\", ImmutableList.of(row(0L, 0L, 0L)), output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsUsingPositionalArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+    Snapshot firstSnapshot = table.currentSnapshot();\n+\n+    waitUntilAfter(firstSnapshot.timestampMillis());\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    table.refresh();\n+\n+    Snapshot secondSnapshot = table.currentSnapshot();\n+    Timestamp secondSnapshotTimestamp = Timestamp.from(Instant.ofEpochMilli(secondSnapshot.timestampMillis()));\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    // expire without retainLast param\n+    List<Object[]> output1 = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), secondSnapshotTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output1);\n+\n+    table.refresh();\n+\n+    Assert.assertEquals(\"Should expire one snapshot\", 1, Iterables.size(table.snapshots()));\n+\n+    sql(\"INSERT OVERWRITE %s VALUES (3, 'c')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (4, 'd')\", tableName);\n+    assertEquals(\"Should have expected rows\",\n+        ImmutableList.of(row(3L, \"c\"), row(4L, \"d\")),\n+        sql(\"SELECT * FROM %s ORDER BY id\", tableName));\n+\n+    table.refresh();\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    Assert.assertEquals(\"Should be 3 snapshots\", 3, Iterables.size(table.snapshots()));\n+\n+    // expire with retainLast param\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 2)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(2L, 2L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotUsingNamedArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 1)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsGCDisabled() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"ALTER TABLE %s SET TBLPROPERTIES ('%s' 'false')\", tableName, GC_ENABLED);\n+\n+    AssertHelpers.assertThrows(\"Should reject call\",\n+        ValidationException.class, \"Cannot expire snapshots: GC is disabled\",\n+        () -> sql(\"CALL %s.system.expire_snapshots('%s', '%s')\", catalogName,\n+            tableIdent.namespace(), tableIdent.name()));\n+  }\n+\n+  @Test\n+  public void testInvalidExpireSnapshotsCases() {\n+    AssertHelpers.assertThrows(\"Should not allow mixed args\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMzA4OA=="}, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mzk0NjI1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo1NDoxOVrOH_R4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDo0Njo1MVrOH_UDtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNTI0OA==", "bodyText": "So we are going with the action default expire time? Just checking because I thougt some folks wanted that changed", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536115248", "createdAt": "2020-12-04T13:54:19Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "diffHunk": "@@ -96,6 +75,36 @@ public StructType outputType() {\n     return OUTPUT_TYPE;\n   }\n \n+  @Override\n+  public InternalRow[] call(InternalRow args) {\n+    String namespace = args.getString(0);\n+    String tableName = args.getString(1);\n+    Long olderThanMillis = args.isNullAt(2) ? null : DateTimeUtils.toMillis(args.getLong(2));\n+    Integer retainLastNum = args.isNullAt(3) ? null : args.getInt(3);\n+\n+    return modifyIcebergTable(namespace, tableName, table -> {\n+      Actions actions = Actions.forTable(table);\n+\n+      ExpireSnapshotsAction action = actions.expireSnapshots();\n+\n+      if (olderThanMillis != null) {\n+        action.expireOlderThan(olderThanMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzOTM5Nw==", "bodyText": "The action delegates to ExpireSnapshots table API that, in turn, respects the default table props we added recently.", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536139397", "createdAt": "2020-12-04T14:30:20Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "diffHunk": "@@ -96,6 +75,36 @@ public StructType outputType() {\n     return OUTPUT_TYPE;\n   }\n \n+  @Override\n+  public InternalRow[] call(InternalRow args) {\n+    String namespace = args.getString(0);\n+    String tableName = args.getString(1);\n+    Long olderThanMillis = args.isNullAt(2) ? null : DateTimeUtils.toMillis(args.getLong(2));\n+    Integer retainLastNum = args.isNullAt(3) ? null : args.getInt(3);\n+\n+    return modifyIcebergTable(namespace, tableName, table -> {\n+      Actions actions = Actions.forTable(table);\n+\n+      ExpireSnapshotsAction action = actions.expireSnapshots();\n+\n+      if (olderThanMillis != null) {\n+        action.expireOlderThan(olderThanMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNTI0OA=="}, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MDk2NA==", "bodyText": "Ah! Excellent, I forgot about that", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536150964", "createdAt": "2020-12-04T14:46:51Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "diffHunk": "@@ -96,6 +75,36 @@ public StructType outputType() {\n     return OUTPUT_TYPE;\n   }\n \n+  @Override\n+  public InternalRow[] call(InternalRow args) {\n+    String namespace = args.getString(0);\n+    String tableName = args.getString(1);\n+    Long olderThanMillis = args.isNullAt(2) ? null : DateTimeUtils.toMillis(args.getLong(2));\n+    Integer retainLastNum = args.isNullAt(3) ? null : args.getInt(3);\n+\n+    return modifyIcebergTable(namespace, tableName, table -> {\n+      Actions actions = Actions.forTable(table);\n+\n+      ExpireSnapshotsAction action = actions.expireSnapshots();\n+\n+      if (olderThanMillis != null) {\n+        action.expireOlderThan(olderThanMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExNTI0OA=="}, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDc0Mzc0OnYy", "diffSide": "RIGHT", "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0OToyOFrOH_ZQXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoyNzoxOFrOH_amSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjEyNg==", "bodyText": "Named args?", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536236126", "createdAt": "2020-12-04T16:49:28Z", "author": {"login": "rdblue"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.extensions;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchProcedureException;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.TableProperties.GC_ENABLED;\n+\n+public class TestExpireSnapshotsProcedure extends SparkExtensionsTestBase {\n+\n+  public TestExpireSnapshotsProcedure(String catalogName, String implementation, Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+  }\n+\n+  @After\n+  public void removeTables() {\n+    sql(\"DROP TABLE IF EXISTS %s\", tableName);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsInEmptyTable() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name());\n+    assertEquals(\"Should not delete any files\", ImmutableList.of(row(0L, 0L, 0L)), output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsUsingPositionalArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+    Snapshot firstSnapshot = table.currentSnapshot();\n+\n+    waitUntilAfter(firstSnapshot.timestampMillis());\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    table.refresh();\n+\n+    Snapshot secondSnapshot = table.currentSnapshot();\n+    Timestamp secondSnapshotTimestamp = Timestamp.from(Instant.ofEpochMilli(secondSnapshot.timestampMillis()));\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    // expire without retainLast param\n+    List<Object[]> output1 = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), secondSnapshotTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output1);\n+\n+    table.refresh();\n+\n+    Assert.assertEquals(\"Should expire one snapshot\", 1, Iterables.size(table.snapshots()));\n+\n+    sql(\"INSERT OVERWRITE %s VALUES (3, 'c')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (4, 'd')\", tableName);\n+    assertEquals(\"Should have expected rows\",\n+        ImmutableList.of(row(3L, \"c\"), row(4L, \"d\")),\n+        sql(\"SELECT * FROM %s ORDER BY id\", tableName));\n+\n+    table.refresh();\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    Assert.assertEquals(\"Should be 3 snapshots\", 3, Iterables.size(table.snapshots()));\n+\n+    // expire with retainLast param\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 2)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(2L, 2L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotUsingNamedArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 1)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1ODEyMA==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536258120", "createdAt": "2020-12-04T17:27:18Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.extensions;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.iceberg.AssertHelpers;\n+import org.apache.iceberg.Snapshot;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Iterables;\n+import org.apache.spark.sql.AnalysisException;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchProcedureException;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.TableProperties.GC_ENABLED;\n+\n+public class TestExpireSnapshotsProcedure extends SparkExtensionsTestBase {\n+\n+  public TestExpireSnapshotsProcedure(String catalogName, String implementation, Map<String, String> config) {\n+    super(catalogName, implementation, config);\n+  }\n+\n+  @After\n+  public void removeTables() {\n+    sql(\"DROP TABLE IF EXISTS %s\", tableName);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsInEmptyTable() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name());\n+    assertEquals(\"Should not delete any files\", ImmutableList.of(row(0L, 0L, 0L)), output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotsUsingPositionalArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+    Snapshot firstSnapshot = table.currentSnapshot();\n+\n+    waitUntilAfter(firstSnapshot.timestampMillis());\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    table.refresh();\n+\n+    Snapshot secondSnapshot = table.currentSnapshot();\n+    Timestamp secondSnapshotTimestamp = Timestamp.from(Instant.ofEpochMilli(secondSnapshot.timestampMillis()));\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    // expire without retainLast param\n+    List<Object[]> output1 = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s')\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), secondSnapshotTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(0L, 0L, 1L)),\n+        output1);\n+\n+    table.refresh();\n+\n+    Assert.assertEquals(\"Should expire one snapshot\", 1, Iterables.size(table.snapshots()));\n+\n+    sql(\"INSERT OVERWRITE %s VALUES (3, 'c')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (4, 'd')\", tableName);\n+    assertEquals(\"Should have expected rows\",\n+        ImmutableList.of(row(3L, \"c\"), row(4L, \"d\")),\n+        sql(\"SELECT * FROM %s ORDER BY id\", tableName));\n+\n+    table.refresh();\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    Assert.assertEquals(\"Should be 3 snapshots\", 3, Iterables.size(table.snapshots()));\n+\n+    // expire with retainLast param\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 2)\",\n+        catalogName, tableIdent.namespace(), tableIdent.name(), currentTimestamp);\n+    assertEquals(\"Procedure output must match\",\n+        ImmutableList.of(row(2L, 2L, 1L)),\n+        output);\n+  }\n+\n+  @Test\n+  public void testExpireSnapshotUsingNamedArgs() {\n+    sql(\"CREATE TABLE %s (id bigint NOT NULL, data string) USING iceberg\", tableName);\n+\n+    sql(\"INSERT INTO TABLE %s VALUES (1, 'a')\", tableName);\n+    sql(\"INSERT INTO TABLE %s VALUES (2, 'b')\", tableName);\n+\n+    Table table = validationCatalog.loadTable(tableIdent);\n+\n+    Assert.assertEquals(\"Should be 2 snapshots\", 2, Iterables.size(table.snapshots()));\n+\n+    waitUntilAfter(table.currentSnapshot().timestampMillis());\n+\n+    Timestamp currentTimestamp = Timestamp.from(Instant.ofEpochMilli(System.currentTimeMillis()));\n+\n+    List<Object[]> output = sql(\n+        \"CALL %s.system.expire_snapshots('%s', '%s', TIMESTAMP '%s', 1)\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjEyNg=="}, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDc1NjM2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo1MjoxMVrOH_ZXlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoyNDoxMVrOH_aedg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNzk3Mw==", "bodyText": "Don't we usually name columns like this with _count instead of num_? I would expect deleted_data_files_count, like we have added_data_files_count in manifests or record_count in data files.", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536237973", "createdAt": "2020-12-04T16:52:11Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.procedures;\n+\n+import org.apache.iceberg.actions.Actions;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.actions.ExpireSnapshotsActionResult;\n+import org.apache.iceberg.spark.procedures.SparkProcedures.ProcedureBuilder;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.iceberg.catalog.ProcedureParameter;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * A procedure that expires snapshots in a table.\n+ *\n+ * @see Actions#expireSnapshots()\n+ */\n+public class ExpireSnapshotsProcedure extends BaseProcedure {\n+\n+  private static final ProcedureParameter[] PARAMETERS = new ProcedureParameter[] {\n+      ProcedureParameter.required(\"namespace\", DataTypes.StringType),\n+      ProcedureParameter.required(\"table\", DataTypes.StringType),\n+      ProcedureParameter.optional(\"older_than\", DataTypes.TimestampType),\n+      ProcedureParameter.optional(\"retain_last\", DataTypes.IntegerType)\n+  };\n+\n+  private static final StructType OUTPUT_TYPE = new StructType(new StructField[]{\n+      new StructField(\"num_deleted_data_files\", DataTypes.LongType, true, Metadata.empty()),\n+      new StructField(\"num_deleted_manifest_files\", DataTypes.LongType, true, Metadata.empty()),\n+      new StructField(\"num_deleted_manifest_lists\", DataTypes.LongType, true, Metadata.empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1NjExOA==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1874#discussion_r536256118", "createdAt": "2020-12-04T17:24:11Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.spark.procedures;\n+\n+import org.apache.iceberg.actions.Actions;\n+import org.apache.iceberg.actions.ExpireSnapshotsAction;\n+import org.apache.iceberg.actions.ExpireSnapshotsActionResult;\n+import org.apache.iceberg.spark.procedures.SparkProcedures.ProcedureBuilder;\n+import org.apache.spark.sql.catalyst.InternalRow;\n+import org.apache.spark.sql.catalyst.util.DateTimeUtils;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n+import org.apache.spark.sql.connector.iceberg.catalog.ProcedureParameter;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.Metadata;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+\n+/**\n+ * A procedure that expires snapshots in a table.\n+ *\n+ * @see Actions#expireSnapshots()\n+ */\n+public class ExpireSnapshotsProcedure extends BaseProcedure {\n+\n+  private static final ProcedureParameter[] PARAMETERS = new ProcedureParameter[] {\n+      ProcedureParameter.required(\"namespace\", DataTypes.StringType),\n+      ProcedureParameter.required(\"table\", DataTypes.StringType),\n+      ProcedureParameter.optional(\"older_than\", DataTypes.TimestampType),\n+      ProcedureParameter.optional(\"retain_last\", DataTypes.IntegerType)\n+  };\n+\n+  private static final StructType OUTPUT_TYPE = new StructType(new StructField[]{\n+      new StructField(\"num_deleted_data_files\", DataTypes.LongType, true, Metadata.empty()),\n+      new StructField(\"num_deleted_manifest_files\", DataTypes.LongType, true, Metadata.empty()),\n+      new StructField(\"num_deleted_manifest_lists\", DataTypes.LongType, true, Metadata.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNzk3Mw=="}, "originalCommit": {"oid": "5b68c526e75ed82b07e146fefdec1c0e7cd593eb"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3259, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}