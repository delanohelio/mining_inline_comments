{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzg5Njk3", "number": 1497, "title": "MR: apply row-level delete files when reading", "bodyText": "This applies row-level delete files when reading for IcebergInputFormat. This also includes changes from #985.\nThis also refactors the deletes read unit tests to a separated base test class to avoid duplication.", "createdAt": "2020-09-23T13:39:47Z", "url": "https://github.com/apache/iceberg/pull/1497", "merged": true, "mergeCommit": {"oid": "118cc80c16950d6c6b87eaadd843b2b156c9435a"}, "closed": true, "closedAt": "2020-10-05T17:02:03Z", "author": {"login": "chenjunjiedada"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdL1BdhAFqTQ5NTExNDIwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOvuyWgH2gAyNDkxNzg5Njk3OjMyZGIzYzQyODkwMmUwMGY5NTMzZGI1ODdlODI5ZGJmNDg3OTJiMGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE0MjAx", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495114201", "createdAt": "2020-09-23T23:16:58Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxNjo1OFrOHXEP-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxNjo1OFrOHXEP-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0ODkyMg==", "bodyText": "Can you import this class directly to avoid so many changes in this file?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493948922", "createdAt": "2020-09-23T23:16:58Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -148,15 +144,15 @@ public void testMixedPositionAndEqualityDeletes() throws IOException {\n     );\n \n     DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n+        table, Files.localOutput(temp.newFile()), TestHelpers.Row.of(0), dataDeletes, dataSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE0Mjc2", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495114276", "createdAt": "2020-09-23T23:17:09Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxNzoxMFrOHXEQMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxNzoxMFrOHXEQMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0ODk3OQ==", "bodyText": "Nit: unnecessary whitespace change", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493948979", "createdAt": "2020-09-23T23:17:10Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -269,4 +265,5 @@ private StructLikeSet rowSetWithoutIds(int... idsToRemove) {\n         .forEach(set::add);\n     return set;\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE1MDc3", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495115077", "createdAt": "2020-09-23T23:19:39Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxOTozOVrOHXES8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxOTozOVrOHXES8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0OTY4MA==", "bodyText": "While I would like to get the encryption manager and io changes in, I don't think that they should be mixed into this commit. Was it necessary to do this for some reason?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493949680", "createdAt": "2020-09-23T23:19:39Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -129,7 +133,7 @@\n           // TODO: We do not support residual evaluation for HIVE and PIG in memory data model yet\n           checkResiduals(task);\n         }\n-        splits.add(new IcebergSplit(conf, task));\n+        splits.add(new IcebergSplit(conf, task, table.io(), table.encryption()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE2MTQ5", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495116149", "createdAt": "2020-09-23T23:22:47Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyMjo0N1rOHXEWlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyMjo0N1rOHXEWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MDYxMw==", "bodyText": "Why not put the schema and spec in the parent class, DeletesReadTest? The data it generates is for this schema.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493950613", "createdAt": "2020-09-23T23:22:47Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/GenericReaderDeletesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.TestTables;\n+import org.apache.iceberg.types.Types;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class GenericReaderDeletesTest extends DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE3MDAz", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495117003", "createdAt": "2020-09-23T23:25:20Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNToyMFrOHXEZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNToyMFrOHXEZzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTQzOA==", "bodyText": "We prefer using Lists.newArrayList()", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493951438", "createdAt": "2020-09-23T23:25:20Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -92,6 +72,22 @@ public void testEqualityDeletes() throws IOException {\n     Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n   }\n \n+  protected void generateTestData() throws IOException {\n+    this.records = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE3MTA0", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495117104", "createdAt": "2020-09-23T23:25:40Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNTo0MFrOHXEaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNTo0MFrOHXEaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTUyMw==", "bodyText": "I think a better way to break down the class would be to have an abstract Table createTable(String name, Schema, Spec) method. Then the table and dataFile fields don't need to be shared. I also don't think that there is a need to make records public either.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493951523", "createdAt": "2020-09-23T23:25:40Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/GenericReaderDeletesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.TestTables;\n+import org.apache.iceberg.types.Types;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public class GenericReaderDeletesTest extends DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n+\n+  // Partition spec used to create tables\n+  static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n+\n+  @Before\n+  public void writeTestDataFile() throws IOException {\n+    File tableDir = temp.newFolder();\n+    tableDir.delete();\n+    this.table = TestTables.create(tableDir, \"test\", SCHEMA, SPEC, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE3NjIz", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495117623", "createdAt": "2020-09-23T23:27:12Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNzoxMlrOHXEb7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNzoxMlrOHXEb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MTk4Mg==", "bodyText": "Why is this needed?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493951982", "createdAt": "2020-09-23T23:27:12Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -248,6 +258,26 @@ public void close() throws IOException {\n       return iterable;\n     }\n \n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE3ODYz", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495117863", "createdAt": "2020-09-23T23:27:56Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNzo1NlrOHXEcyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyNzo1NlrOHXEcyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MjIwMA==", "bodyText": "Why not return deletes.filter(...) here? That would remove the need for iter and break.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493952200", "createdAt": "2020-09-23T23:27:56Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -248,6 +258,26 @@ public void close() throws IOException {\n       return iterable;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private CloseableIterable<T> open(FileScanTask currentTask, Schema readSchema) {\n+      CloseableIterable<T> iter;\n+      switch (inMemoryDataModel) {\n+        case PIG:\n+        case HIVE:\n+          // TODO implement value readers for Pig and Hive\n+          throw new UnsupportedOperationException(\"Avro support not yet supported for Pig and Hive\");\n+        case GENERIC:\n+          DeleteFilter deletes = new GenericDeleteFilter(io, currentTask, tableSchema, readSchema);\n+          Schema requiredSchema = deletes.requiredSchema();\n+          iter = deletes.filter(openTask(currentTask, requiredSchema));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTE4Mzg3", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495118387", "createdAt": "2020-09-23T23:29:25Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyOToyNVrOHXEedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoyOToyNVrOHXEedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1MjYyOQ==", "bodyText": "Is there a simpler way to configure this? Normally, we build these using literals instead of a block of code.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493952629", "createdAt": "2020-09-23T23:29:25Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/TestMrReadDeletes.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Locale;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseTable;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.data.DeletesReadTest;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.types.Types;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+@RunWith(Parameterized.class)\n+public class TestMrReadDeletes extends DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n+\n+  // Partition spec used to create tables\n+  static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n+\n+  // parametrized variables\n+  private final TestIcebergInputFormats.TestInputFormat.Factory<Record> testInputFormat;\n+  private final FileFormat fileFormat;\n+\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    Object[][] parameters = new Object[TestIcebergInputFormats.TESTED_INPUT_FORMATS.size() *\n+        TestIcebergInputFormats.TESTED_FILE_FORMATS.size()][2];\n+\n+    int idx = 0;\n+\n+    for (TestIcebergInputFormats.TestInputFormat.Factory<Record> inputFormat :\n+        TestIcebergInputFormats.TESTED_INPUT_FORMATS) {\n+      for (String fileFormat : TestIcebergInputFormats.TESTED_FILE_FORMATS) {\n+        parameters[idx++] = new Object[] {inputFormat, fileFormat};\n+      }\n+    }\n+\n+    return parameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTIwMzc4", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-495120378", "createdAt": "2020-09-23T23:35:08Z", "commit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzozNTowOFrOHXElKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzozNTowOFrOHXElKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1NDM0NA==", "bodyText": "This method is what reads the rows from the table using Spark. Deleting this method and using the one in DeletesReadTest makes this test suite use the exact same read path as the generics -- IcebergGenerics.\nYou can probably make this method abstract and implement it in both classes to get around this. You'll also need to implement a read using the input format or Hive runner to test the Hive code.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r493954344", "createdAt": "2020-09-23T23:35:08Z", "author": {"login": "rdblue"}, "path": "spark/src/test/java/org/apache/iceberg/spark/source/TestSparkReaderDeletes.java", "diffHunk": "@@ -93,212 +102,4 @@ public void createTable() throws IOException {\n   public void dropTable() {\n     catalog.dropTable(TableIdentifier.of(\"default\", \"table\"));\n   }\n-\n-  @Test\n-  public void testEqualityDeletes() throws IOException {\n-    Schema deleteRowSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(deleteRowSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n-\n-    table.newRowDelta()\n-        .addDeletes(eqDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(29, 89, 122);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n-    Schema deleteRowSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(deleteRowSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n-\n-    table.newRowDelta()\n-        .addDeletes(eqDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n-    StructLikeSet actual = rowSet(table, \"id\"); // data is added by the reader to apply the eq deletes\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testPositionDeletes() throws IOException {\n-    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n-        Pair.of(dataFile.path(), 0L), // id = 29\n-        Pair.of(dataFile.path(), 3L), // id = 89\n-        Pair.of(dataFile.path(), 6L) // id = 122\n-    );\n-\n-    DeleteFile posDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n-\n-    table.newRowDelta()\n-        .addDeletes(posDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(29, 89, 122);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testMixedPositionAndEqualityDeletes() throws IOException {\n-    Schema dataSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(dataSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n-\n-    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n-        Pair.of(dataFile.path(), 3L), // id = 89\n-        Pair.of(dataFile.path(), 5L) // id = 121\n-    );\n-\n-    DeleteFile posDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n-\n-    table.newRowDelta()\n-        .addDeletes(eqDeletes)\n-        .addDeletes(posDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testMultipleEqualityDeleteSchemas() throws IOException {\n-    Schema dataSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(dataSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile dataEqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n-\n-    Schema idSchema = table.schema().select(\"id\");\n-    Record idDelete = GenericRecord.create(idSchema);\n-    List<Record> idDeletes = Lists.newArrayList(\n-        idDelete.copy(\"id\", 121), // id = 121\n-        idDelete.copy(\"id\", 29) // id = 29\n-    );\n-\n-    DeleteFile idEqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), idDeletes, idSchema);\n-\n-    table.newRowDelta()\n-        .addDeletes(dataEqDeletes)\n-        .addDeletes(idEqDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(29, 89, 121, 122);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testEqualityDeleteByNull() throws IOException {\n-    // data is required in the test table; make it optional for this test\n-    table.updateSchema()\n-        .makeColumnOptional(\"data\")\n-        .commit();\n-\n-    // add a new data file with a record where data is null\n-    Record record = GenericRecord.create(table.schema());\n-    DataFile dataFileWithNull = FileHelpers.writeDataFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0),\n-        Lists.newArrayList(record.copy(\"id\", 131, \"data\", null)));\n-\n-    table.newAppend()\n-        .appendFile(dataFileWithNull)\n-        .commit();\n-\n-    // delete where data is null\n-    Schema dataSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(dataSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", null) // id = 131\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n-\n-    table.newRowDelta()\n-        .addDeletes(eqDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(131);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  private static StructLikeSet rowSet(Table table) {\n-    return rowSet(table, \"*\");\n-  }\n-\n-  private static StructLikeSet rowSet(Table table, String... columns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994b230a0c2c109fbb2d91f87362ab2141f87291"}, "originalPosition": 296}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8faeac6a485712679f85666b144b364d09963ad6", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/8faeac6a485712679f85666b144b364d09963ad6", "committedDate": "2020-09-24T03:19:22Z", "message": "address comments"}, "afterCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/84310d9737e3fc2957c1d3edc2e5498c58340300", "committedDate": "2020-09-24T03:30:30Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDI0Mjg0", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497024284", "createdAt": "2020-09-26T18:55:06Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTQ3MzM3", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497947337", "createdAt": "2020-09-28T22:40:12Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MDoxMlrOHZSNnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MDoxMlrOHZSNnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NDg0Nw==", "bodyText": "Why is this public and not protected to expose it to child classes?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496274847", "createdAt": "2020-09-28T22:40:12Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -25,49 +25,45 @@\n import org.apache.iceberg.DataFile;\n import org.apache.iceberg.DeleteFile;\n import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n-import org.apache.iceberg.TableTestBase;\n import org.apache.iceberg.TestHelpers.Row;\n-import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n import org.apache.iceberg.util.ArrayUtil;\n import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n import org.apache.iceberg.util.StructProjection;\n import org.junit.Assert;\n-import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n-public class TestGenericReaderDeletes extends TableTestBase {\n-  public TestGenericReaderDeletes() {\n-    super(2 /* format v2 with delete files */);\n-  }\n+import static org.apache.iceberg.types.Types.NestedField.required;\n \n-  private List<Record> records = null;\n-  private DataFile dataFile = null;\n+public abstract class DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n \n-  @Before\n-  public void writeTestDataFile() throws IOException {\n-    this.records = Lists.newArrayList();\n+  // Partition spec used to create tables\n+  public static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n \n-    // records all use IDs that are in bucket id_bucket=0\n-    GenericRecord record = GenericRecord.create(table.schema());\n-    records.add(record.copy(\"id\", 29, \"data\", \"a\"));\n-    records.add(record.copy(\"id\", 43, \"data\", \"b\"));\n-    records.add(record.copy(\"id\", 61, \"data\", \"c\"));\n-    records.add(record.copy(\"id\", 89, \"data\", \"d\"));\n-    records.add(record.copy(\"id\", 100, \"data\", \"e\"));\n-    records.add(record.copy(\"id\", 121, \"data\", \"f\"));\n-    records.add(record.copy(\"id\", 122, \"data\", \"g\"));\n+  protected Table table;\n+  protected DataFile dataFile;\n \n-    this.dataFile = FileHelpers.writeDataFile(table, Files.localOutput(temp.newFile()), Row.of(0), records);\n+  private List<Record> records;\n \n-    table.newAppend()\n-        .appendFile(dataFile)\n-        .commit();\n-  }\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n+\n+  public abstract Table createTable(String name, Schema schema, PartitionSpec spec) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTQ3OTU2", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497947956", "createdAt": "2020-09-28T22:41:49Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MTo0OVrOHZSPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MTo0OVrOHZSPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NTM0Nw==", "bodyText": "Why is this @Before here and not in the base class?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496275347", "createdAt": "2020-09-28T22:41:49Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/GenericReaderDeletesTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TestTables;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.util.StructLikeSet;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+public class GenericReaderDeletesTest extends DeletesReadTest {\n+\n+  @Override\n+  public Table createTable(String name, Schema schema, PartitionSpec spec) throws IOException {\n+    File tableDir = temp.newFolder();\n+    tableDir.delete();\n+\n+    return TestTables.create(tableDir, name, schema, spec, 2);\n+  }\n+\n+  @Override\n+  public StructLikeSet rowSet(Table table, String... columns) throws IOException {\n+    StructLikeSet set = StructLikeSet.create(table.schema().asStruct());\n+    try (CloseableIterable<Record> reader = IcebergGenerics.read(table).select(columns).build()) {\n+      reader.forEach(set::add);\n+    }\n+    return set;\n+  }\n+\n+  @Before\n+  public void writeTestDataFile() throws IOException {\n+    this.table = createTable(\"test\", SCHEMA, SPEC);\n+    generateTestData();\n+    table.newAppend()\n+        .appendFile(dataFile)\n+        .commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTQ4MjEz", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497948213", "createdAt": "2020-09-28T22:42:27Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MjoyN1rOHZSQbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo0MjoyN1rOHZSQbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NTU2NA==", "bodyText": "Isn't this identical to the one in the generics test? I think this should be in the base class instead.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496275564", "createdAt": "2020-09-28T22:42:27Z", "author": {"login": "rdblue"}, "path": "spark/src/test/java/org/apache/iceberg/spark/source/TestSparkReaderDeletes.java", "diffHunk": "@@ -20,285 +20,111 @@\n package org.apache.iceberg.spark.source;\n \n import java.io.IOException;\n-import java.util.List;\n-import java.util.Set;\n+import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.iceberg.BaseTable;\n-import org.apache.iceberg.DataFile;\n-import org.apache.iceberg.DeleteFile;\n-import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n import org.apache.iceberg.TableMetadata;\n import org.apache.iceberg.TableOperations;\n-import org.apache.iceberg.TestHelpers.Row;\n+import org.apache.iceberg.catalog.Namespace;\n import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.data.FileHelpers;\n-import org.apache.iceberg.data.GenericRecord;\n-import org.apache.iceberg.data.Record;\n-import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n-import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.data.DeletesReadTest;\n+import org.apache.iceberg.exceptions.AlreadyExistsException;\n+import org.apache.iceberg.hive.HiveCatalog;\n+import org.apache.iceberg.hive.TestHiveMetastore;\n import org.apache.iceberg.spark.SparkStructLike;\n-import org.apache.iceberg.spark.SparkTestBase;\n import org.apache.iceberg.types.Types;\n-import org.apache.iceberg.util.ArrayUtil;\n-import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n-import org.apache.iceberg.util.StructProjection;\n import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.internal.SQLConf;\n import org.junit.After;\n-import org.junit.Assert;\n+import org.junit.AfterClass;\n import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n+import org.junit.BeforeClass;\n \n-public abstract class TestSparkReaderDeletes extends SparkTestBase {\n-  private static final Schema SCHEMA = new Schema(\n-      Types.NestedField.required(1, \"id\", Types.IntegerType.get()),\n-      Types.NestedField.required(2, \"data\", Types.StringType.get()));\n-  private Table table = null;\n-  private List<Record> records = null;\n-  private DataFile dataFile = null;\n+import static org.apache.hadoop.hive.conf.HiveConf.ConfVars.METASTOREURIS;\n \n-  @Rule\n-  public TemporaryFolder temp = new TemporaryFolder();\n+public abstract class TestSparkReaderDeletes extends DeletesReadTest {\n \n-  @Before\n-  public void createTable() throws IOException {\n-    this.table = catalog.createTable(TableIdentifier.of(\"default\", \"table\"), SCHEMA);\n-    TableOperations ops = ((BaseTable) table).operations();\n-    TableMetadata meta = ops.current();\n-    ops.commit(meta, meta.upgradeToFormatVersion(2));\n-\n-    this.records = Lists.newArrayList();\n+  private static TestHiveMetastore metastore = null;\n+  protected static SparkSession spark = null;\n+  protected static HiveCatalog catalog = null;\n \n-    // records all use IDs that are in bucket id_bucket=0\n-    GenericRecord record = GenericRecord.create(table.schema());\n-    records.add(record.copy(\"id\", 29, \"data\", \"a\"));\n-    records.add(record.copy(\"id\", 43, \"data\", \"b\"));\n-    records.add(record.copy(\"id\", 61, \"data\", \"c\"));\n-    records.add(record.copy(\"id\", 89, \"data\", \"d\"));\n-    records.add(record.copy(\"id\", 100, \"data\", \"e\"));\n-    records.add(record.copy(\"id\", 121, \"data\", \"f\"));\n-    records.add(record.copy(\"id\", 122, \"data\", \"g\"));\n+  @BeforeClass\n+  public static void startMetastoreAndSpark() {\n+    metastore = new TestHiveMetastore();\n+    metastore.start();\n+    HiveConf hiveConf = metastore.hiveConf();\n \n-    this.dataFile = FileHelpers.writeDataFile(table, Files.localOutput(temp.newFile()), Row.of(0), records);\n+    spark = SparkSession.builder()\n+        .master(\"local[2]\")\n+        .config(SQLConf.PARTITION_OVERWRITE_MODE().key(), \"dynamic\")\n+        .config(\"spark.hadoop.\" + METASTOREURIS.varname, hiveConf.get(METASTOREURIS.varname))\n+        .enableHiveSupport()\n+        .getOrCreate();\n \n-    table.newAppend()\n-        .appendFile(dataFile)\n-        .commit();\n-  }\n+    catalog = new HiveCatalog(spark.sessionState().newHadoopConf());\n \n-  @After\n-  public void dropTable() {\n-    catalog.dropTable(TableIdentifier.of(\"default\", \"table\"));\n+    try {\n+      catalog.createNamespace(Namespace.of(\"default\"));\n+    } catch (AlreadyExistsException ignored) {\n+      // the default namespace already exists. ignore the create error\n+    }\n   }\n \n-  @Test\n-  public void testEqualityDeletes() throws IOException {\n-    Schema deleteRowSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(deleteRowSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n-\n-    table.newRowDelta()\n-        .addDeletes(eqDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(29, 89, 122);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n+  @AfterClass\n+  public static void stopMetastoreAndSpark() {\n+    catalog.close();\n+    catalog = null;\n+    metastore.stop();\n+    metastore = null;\n+    spark.stop();\n+    spark = null;\n   }\n \n-  @Test\n-  public void testEqualityDeletesWithRequiredEqColumn() throws IOException {\n-    Schema deleteRowSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(deleteRowSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n-\n-    table.newRowDelta()\n-        .addDeletes(eqDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = selectColumns(rowSetWithoutIds(29, 89, 122), \"id\");\n-    StructLikeSet actual = rowSet(table, \"id\"); // data is added by the reader to apply the eq deletes\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testPositionDeletes() throws IOException {\n-    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n-        Pair.of(dataFile.path(), 0L), // id = 29\n-        Pair.of(dataFile.path(), 3L), // id = 89\n-        Pair.of(dataFile.path(), 6L) // id = 122\n-    );\n-\n-    DeleteFile posDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), deletes);\n-\n-    table.newRowDelta()\n-        .addDeletes(posDeletes)\n-        .commit();\n-\n-    StructLikeSet expected = rowSetWithoutIds(29, 89, 122);\n-    StructLikeSet actual = rowSet(table);\n-\n-    Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n-  }\n-\n-  @Test\n-  public void testMixedPositionAndEqualityDeletes() throws IOException {\n-    Schema dataSchema = table.schema().select(\"data\");\n-    Record dataDelete = GenericRecord.create(dataSchema);\n-    List<Record> dataDeletes = Lists.newArrayList(\n-        dataDelete.copy(\"data\", \"a\"), // id = 29\n-        dataDelete.copy(\"data\", \"d\"), // id = 89\n-        dataDelete.copy(\"data\", \"g\") // id = 122\n-    );\n-\n-    DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, dataSchema);\n-\n-    List<Pair<CharSequence, Long>> deletes = Lists.newArrayList(\n-        Pair.of(dataFile.path(), 3L), // id = 89\n-        Pair.of(dataFile.path(), 5L) // id = 121\n-    );\n+  @Before\n+  public void prepareData() throws IOException {\n+    this.table = createTable(\"table\", SCHEMA, SPEC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTUyMDg4", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497952088", "createdAt": "2020-09-28T22:52:33Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1MjozM1rOHZSdQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1MjozM1rOHZSdQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3ODg0OA==", "bodyText": "This error message is for Avro, but I think it should be that Pig and Hive are not supported for any format.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496278848", "createdAt": "2020-09-28T22:52:33Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -248,6 +258,22 @@ public void close() throws IOException {\n       return iterable;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private CloseableIterable<T> open(FileScanTask currentTask, Schema readSchema) {\n+      switch (inMemoryDataModel) {\n+        case PIG:\n+        case HIVE:\n+          // TODO implement value readers for Pig and Hive\n+          throw new UnsupportedOperationException(\"Avro support not yet supported for Pig and Hive\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTUyNTkw", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497952590", "createdAt": "2020-09-28T22:54:01Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1NDowMVrOHZSe_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1NDowMVrOHZSe_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3OTI5NA==", "bodyText": "This constructor should be just below the parameters, and then abstract method implementations should come just afterwards.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496279294", "createdAt": "2020-09-28T22:54:01Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/TestMrReadDeletes.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseTable;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.data.DeletesReadTest;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.util.StructLikeSet;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestMrReadDeletes extends DeletesReadTest {\n+  private TestHelper helper;\n+  private InputFormatConfig.ConfigBuilder builder;\n+  private Configuration conf;\n+\n+  // parametrized variables\n+  private final TestIcebergInputFormats.TestInputFormat.Factory<Record> testInputFormat;\n+  private final FileFormat fileFormat;\n+\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { \"IcebergInputFormat\", FileFormat.PARQUET },\n+        new Object[] { \"IcebergInputFormat\", FileFormat.AVRO },\n+        new Object[] { \"IcebergInputFormat\", FileFormat.ORC },\n+        new Object[] { \"MapredIcebergInputFormat\", FileFormat.PARQUET },\n+        new Object[] { \"MapredIcebergInputFormat\", FileFormat.AVRO },\n+        new Object[] { \"MapredIcebergInputFormat\", FileFormat.ORC },\n+    };\n+  }\n+\n+  @Override\n+  public Table createTable(String name, Schema schema, PartitionSpec spec) throws IOException {\n+    Table table;\n+    conf = new Configuration();\n+    HadoopTables tables = new HadoopTables(conf);\n+    File location = temp.newFolder(testInputFormat.name(), fileFormat.name());\n+    Assert.assertTrue(location.delete());\n+    helper = new TestHelper(conf, tables, location.toString(), schema, spec, fileFormat, temp);\n+    table = helper.createTable();\n+\n+    TableOperations ops = ((BaseTable) table).operations();\n+    TableMetadata meta = ops.current();\n+    ops.commit(meta, meta.upgradeToFormatVersion(2));\n+\n+    return table;\n+  }\n+\n+  @Override\n+  public StructLikeSet rowSet(Table table, String... columns) {\n+    Schema projected = table.schema().select(columns);\n+    StructLikeSet set = StructLikeSet.create(projected.asStruct());\n+    set.addAll(testInputFormat.create(builder.project(projected).conf()).getRecords());\n+\n+    return set;\n+  }\n+\n+  public TestMrReadDeletes(String inputFormat, FileFormat fileFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTUzMDU0", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-497953054", "createdAt": "2020-09-28T22:55:18Z", "commit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1NToxOFrOHZSgrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjo1NToxOFrOHZSgrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3OTcyNQ==", "bodyText": "Why does this create a new configuration?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496279725", "createdAt": "2020-09-28T22:55:18Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/TestMrReadDeletes.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.mr;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.iceberg.BaseTable;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TableMetadata;\n+import org.apache.iceberg.TableOperations;\n+import org.apache.iceberg.data.DeletesReadTest;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.hadoop.HadoopTables;\n+import org.apache.iceberg.util.StructLikeSet;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class TestMrReadDeletes extends DeletesReadTest {\n+  private TestHelper helper;\n+  private InputFormatConfig.ConfigBuilder builder;\n+  private Configuration conf;\n+\n+  // parametrized variables\n+  private final TestIcebergInputFormats.TestInputFormat.Factory<Record> testInputFormat;\n+  private final FileFormat fileFormat;\n+\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { \"IcebergInputFormat\", FileFormat.PARQUET },\n+        new Object[] { \"IcebergInputFormat\", FileFormat.AVRO },\n+        new Object[] { \"IcebergInputFormat\", FileFormat.ORC },\n+        new Object[] { \"MapredIcebergInputFormat\", FileFormat.PARQUET },\n+        new Object[] { \"MapredIcebergInputFormat\", FileFormat.AVRO },\n+        new Object[] { \"MapredIcebergInputFormat\", FileFormat.ORC },\n+    };\n+  }\n+\n+  @Override\n+  public Table createTable(String name, Schema schema, PartitionSpec spec) throws IOException {\n+    Table table;\n+    conf = new Configuration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84310d9737e3fc2957c1d3edc2e5498c58340300", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/84310d9737e3fc2957c1d3edc2e5498c58340300", "committedDate": "2020-09-24T03:30:30Z", "message": "address comments"}, "afterCommit": {"oid": "e1102d746051e804b76c4bd7c32a942011a7d8c3", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/e1102d746051e804b76c4bd7c32a942011a7d8c3", "committedDate": "2020-09-29T06:28:08Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njc1NTgz", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-498675583", "createdAt": "2020-09-29T16:33:20Z", "commit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMzoyMVrOHZ3KTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMzoyMVrOHZ3KTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MDIwNA==", "bodyText": "Why are these protected and not private?\nMy earlier suggestion was to avoid sharing fields with subclasses because the tests are all in this class. Only creating a table and reading it needs to be customized by subclasses, and we can pass in anything necessary to do that.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496880204", "createdAt": "2020-09-29T16:33:21Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -25,53 +25,68 @@\n import org.apache.iceberg.DataFile;\n import org.apache.iceberg.DeleteFile;\n import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n-import org.apache.iceberg.TableTestBase;\n import org.apache.iceberg.TestHelpers.Row;\n-import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n import org.apache.iceberg.util.ArrayUtil;\n import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n import org.apache.iceberg.util.StructProjection;\n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n-public class TestGenericReaderDeletes extends TableTestBase {\n-  public TestGenericReaderDeletes() {\n-    super(2 /* format v2 with delete files */);\n-  }\n+import static org.apache.iceberg.types.Types.NestedField.required;\n \n-  private List<Record> records = null;\n-  private DataFile dataFile = null;\n+public abstract class DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n \n-  @Before\n-  public void writeTestDataFile() throws IOException {\n-    this.records = Lists.newArrayList();\n+  // Partition spec used to create tables\n+  public static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n \n-    // records all use IDs that are in bucket id_bucket=0\n-    GenericRecord record = GenericRecord.create(table.schema());\n-    records.add(record.copy(\"id\", 29, \"data\", \"a\"));\n-    records.add(record.copy(\"id\", 43, \"data\", \"b\"));\n-    records.add(record.copy(\"id\", 61, \"data\", \"c\"));\n-    records.add(record.copy(\"id\", 89, \"data\", \"d\"));\n-    records.add(record.copy(\"id\", 100, \"data\", \"e\"));\n-    records.add(record.copy(\"id\", 121, \"data\", \"f\"));\n-    records.add(record.copy(\"id\", 122, \"data\", \"g\"));\n+  protected final String testTableName = \"test\";\n+  protected Table testTable;\n+  protected DataFile dataFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njc4MDQ2", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-498678046", "createdAt": "2020-09-29T16:36:17Z", "commit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNjoxOFrOHZ3SKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNjoxOFrOHZ3SKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MjIxOQ==", "bodyText": "I think this method should no longer exist, and there is no reason for it to be accessible to subclasses. It is also not a good idea to write methods like this one that have assumptions about other variables and operate by creating side-effects. It is less of a problem now that it is not called by subclasses. Now, there is just little reason for it to exist when this could be moved into the @Before method.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496882219", "createdAt": "2020-09-29T16:36:18Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -80,21 +95,37 @@ public void testEqualityDeletes() throws IOException {\n     );\n \n     DeleteFile eqDeletes = FileHelpers.writeDeleteFile(\n-        table, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n+        testTable, Files.localOutput(temp.newFile()), Row.of(0), dataDeletes, deleteRowSchema);\n \n-    table.newRowDelta()\n+    testTable.newRowDelta()\n         .addDeletes(eqDeletes)\n         .commit();\n \n     StructLikeSet expected = rowSetWithoutIds(29, 89, 122);\n-    StructLikeSet actual = rowSet(table);\n+    StructLikeSet actual = rowSet(testTable);\n \n     Assert.assertEquals(\"Table should contain expected rows\", expected, actual);\n   }\n \n+  protected void generateTestData() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njc4NDE3", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-498678417", "createdAt": "2020-09-29T16:36:44Z", "commit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNjo0NFrOHZ3TPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNjo0NFrOHZ3TPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MjQ5Mw==", "bodyText": "Renaming table -> testTable introduces unnecessary changes and doesn't add much value. What was the rationale for doing this?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496882493", "createdAt": "2020-09-29T16:36:44Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -25,53 +25,68 @@\n import org.apache.iceberg.DataFile;\n import org.apache.iceberg.DeleteFile;\n import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n-import org.apache.iceberg.TableTestBase;\n import org.apache.iceberg.TestHelpers.Row;\n-import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n import org.apache.iceberg.util.ArrayUtil;\n import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n import org.apache.iceberg.util.StructProjection;\n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n-public class TestGenericReaderDeletes extends TableTestBase {\n-  public TestGenericReaderDeletes() {\n-    super(2 /* format v2 with delete files */);\n-  }\n+import static org.apache.iceberg.types.Types.NestedField.required;\n \n-  private List<Record> records = null;\n-  private DataFile dataFile = null;\n+public abstract class DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n \n-  @Before\n-  public void writeTestDataFile() throws IOException {\n-    this.records = Lists.newArrayList();\n+  // Partition spec used to create tables\n+  public static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n \n-    // records all use IDs that are in bucket id_bucket=0\n-    GenericRecord record = GenericRecord.create(table.schema());\n-    records.add(record.copy(\"id\", 29, \"data\", \"a\"));\n-    records.add(record.copy(\"id\", 43, \"data\", \"b\"));\n-    records.add(record.copy(\"id\", 61, \"data\", \"c\"));\n-    records.add(record.copy(\"id\", 89, \"data\", \"d\"));\n-    records.add(record.copy(\"id\", 100, \"data\", \"e\"));\n-    records.add(record.copy(\"id\", 121, \"data\", \"f\"));\n-    records.add(record.copy(\"id\", 122, \"data\", \"g\"));\n+  protected final String testTableName = \"test\";\n+  protected Table testTable;\n+  protected DataFile dataFile;\n+\n+  private List<Record> records;\n \n-    this.dataFile = FileHelpers.writeDataFile(table, Files.localOutput(temp.newFile()), Row.of(0), records);\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n \n-    table.newAppend()\n+  @Before\n+  public void prepareData() throws IOException {\n+    this.testTable = createTable(testTableName, SCHEMA, SPEC);\n+    generateTestData();\n+    testTable.newAppend()\n         .appendFile(dataFile)\n         .commit();\n   }\n \n+  @After\n+  public void cleanup() throws IOException {\n+    dropTable(testTableName);\n+  }\n+\n+  protected abstract Table createTable(String name, Schema schema, PartitionSpec spec) throws IOException;\n+\n+  protected abstract void dropTable(String name) throws IOException;\n+\n   @Test\n   public void testEqualityDeletes() throws IOException {\n-    Schema deleteRowSchema = table.schema().select(\"data\");\n+    Schema deleteRowSchema = testTable.schema().select(\"data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njg0MzQ3", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-498684347", "createdAt": "2020-09-29T16:44:01Z", "commit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NDowMlrOHZ3lkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NDowMlrOHZ3lkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4NzE4NQ==", "bodyText": "This shouldn't be public when the abstract method is protected.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496887185", "createdAt": "2020-09-29T16:44:02Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/GenericReaderDeletesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.Schema;\n+import org.apache.iceberg.Table;\n+import org.apache.iceberg.TestTables;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.util.StructLikeSet;\n+import org.junit.After;\n+\n+public class GenericReaderDeletesTest extends DeletesReadTest {\n+\n+  @Override\n+  public Table createTable(String name, Schema schema, PartitionSpec spec) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njg1MDMx", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-498685031", "createdAt": "2020-09-29T16:44:54Z", "commit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NDo1NVrOHZ3oAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NDo1NVrOHZ3oAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4NzgxMA==", "bodyText": "This should be clear that Pig and Hive object models are not supported. Pig and Hive engines can read using generics.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496887810", "createdAt": "2020-09-29T16:44:55Z", "author": {"login": "rdblue"}, "path": "mr/src/main/java/org/apache/iceberg/mr/mapreduce/IcebergInputFormat.java", "diffHunk": "@@ -250,6 +252,22 @@ public void close() throws IOException {\n       return iterable;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private CloseableIterable<T> open(FileScanTask currentTask, Schema readSchema) {\n+      switch (inMemoryDataModel) {\n+        case PIG:\n+        case HIVE:\n+          // TODO implement value readers for Pig and Hive\n+          throw new UnsupportedOperationException(\"Pig and Hive are not supported for any format\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njg3MDI3", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-498687027", "createdAt": "2020-09-29T16:47:25Z", "commit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NzoyNVrOHZ3uig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0NzoyNVrOHZ3uig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4OTQ4Mg==", "bodyText": "Why was this changed to public?", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r496889482", "createdAt": "2020-09-29T16:47:25Z", "author": {"login": "rdblue"}, "path": "mr/src/test/java/org/apache/iceberg/mr/TestIcebergInputFormats.java", "diffHunk": "@@ -370,7 +370,7 @@ public void testCustomCatalog() throws IOException {\n     testInputFormat.create(builder.conf()).validate(expectedRecords);\n   }\n \n-  private abstract static class TestInputFormat<T> {\n+  public abstract static class TestInputFormat<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cbaaa0ce100ddf1f4f4b78548209ce2fae48789"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9ac7e5f42278b7270d8ad466df77087c12d715c", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/f9ac7e5f42278b7270d8ad466df77087c12d715c", "committedDate": "2020-09-29T23:26:52Z", "message": "address comments"}, "afterCommit": {"oid": "0a952f9954e4b65282643f95c8cb98e9e9e2890a", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/0a952f9954e4b65282643f95c8cb98e9e9e2890a", "committedDate": "2020-09-29T23:37:04Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a952f9954e4b65282643f95c8cb98e9e9e2890a", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/0a952f9954e4b65282643f95c8cb98e9e9e2890a", "committedDate": "2020-09-29T23:37:04Z", "message": "address comments"}, "afterCommit": {"oid": "f5d382da0cb71892efc7aa9eb156a19fe9a4ab3e", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/f5d382da0cb71892efc7aa9eb156a19fe9a4ab3e", "committedDate": "2020-09-30T00:06:07Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTMwODk2", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-500530896", "createdAt": "2020-10-01T16:39:38Z", "commit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjozOTozOFrOHbSp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjozOTozOFrOHbSp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3OTI0OA==", "bodyText": "Nit: whitespace-only change.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r498379248", "createdAt": "2020-10-01T16:39:38Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -63,12 +82,20 @@ public void writeTestDataFile() throws IOException {\n     records.add(record.copy(\"id\", 122, \"data\", \"g\"));\n \n     this.dataFile = FileHelpers.writeDataFile(table, Files.localOutput(temp.newFile()), Row.of(0), records);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTMxMjUx", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-500531251", "createdAt": "2020-10-01T16:40:06Z", "commit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0MDowNlrOHbSq8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0MDowNlrOHbSq8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3OTUwNQ==", "bodyText": "Nit: unnecessary method renames cause more changed lines than needed.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r498379505", "createdAt": "2020-10-01T16:40:06Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -25,31 +25,50 @@\n import org.apache.iceberg.DataFile;\n import org.apache.iceberg.DeleteFile;\n import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n-import org.apache.iceberg.TableTestBase;\n import org.apache.iceberg.TestHelpers.Row;\n-import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n import org.apache.iceberg.util.ArrayUtil;\n import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n import org.apache.iceberg.util.StructProjection;\n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n-public class TestGenericReaderDeletes extends TableTestBase {\n-  public TestGenericReaderDeletes() {\n-    super(2 /* format v2 with delete files */);\n-  }\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public abstract class DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n+\n+  // Partition spec used to create tables\n+  public static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n+\n+  protected final String testTableName = \"test\";\n+  protected Table table;\n \n-  private List<Record> records = null;\n-  private DataFile dataFile = null;\n+  private DataFile dataFile;\n+  private List<Record> records;\n+\n+  @Rule\n+  public TemporaryFolder temp = new TemporaryFolder();\n \n   @Before\n-  public void writeTestDataFile() throws IOException {\n+  public void prepareData() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTMxNzQy", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-500531742", "createdAt": "2020-10-01T16:40:42Z", "commit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0MDo0MlrOHbSsWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0MDo0MlrOHbSsWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3OTg2NA==", "bodyText": "Changing the order of these two lines and dropping the default also causes unnecessary changes.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r498379864", "createdAt": "2020-10-01T16:40:42Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -25,31 +25,50 @@\n import org.apache.iceberg.DataFile;\n import org.apache.iceberg.DeleteFile;\n import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n-import org.apache.iceberg.TableTestBase;\n import org.apache.iceberg.TestHelpers.Row;\n-import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n import org.apache.iceberg.util.ArrayUtil;\n import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n import org.apache.iceberg.util.StructProjection;\n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n-public class TestGenericReaderDeletes extends TableTestBase {\n-  public TestGenericReaderDeletes() {\n-    super(2 /* format v2 with delete files */);\n-  }\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public abstract class DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n+\n+  // Partition spec used to create tables\n+  public static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n+\n+  protected final String testTableName = \"test\";\n+  protected Table table;\n \n-  private List<Record> records = null;\n-  private DataFile dataFile = null;\n+  private DataFile dataFile;\n+  private List<Record> records;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTM3MjUw", "url": "https://github.com/apache/iceberg/pull/1497#pullrequestreview-500537250", "createdAt": "2020-10-01T16:47:59Z", "commit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0Nzo1OVrOHbS7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0Nzo1OVrOHbS7hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4Mzc1MQ==", "bodyText": "I think this should be private. If it is needed by subclases, it should be passed into methods, not shared. I think this is only used by Spark, so it should be easy to fix.", "url": "https://github.com/apache/iceberg/pull/1497#discussion_r498383751", "createdAt": "2020-10-01T16:47:59Z", "author": {"login": "rdblue"}, "path": "data/src/test/java/org/apache/iceberg/data/DeletesReadTest.java", "diffHunk": "@@ -25,31 +25,50 @@\n import org.apache.iceberg.DataFile;\n import org.apache.iceberg.DeleteFile;\n import org.apache.iceberg.Files;\n+import org.apache.iceberg.PartitionSpec;\n import org.apache.iceberg.Schema;\n import org.apache.iceberg.Table;\n-import org.apache.iceberg.TableTestBase;\n import org.apache.iceberg.TestHelpers.Row;\n-import org.apache.iceberg.io.CloseableIterable;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.apache.iceberg.relocated.com.google.common.collect.Sets;\n+import org.apache.iceberg.types.Types;\n import org.apache.iceberg.util.ArrayUtil;\n import org.apache.iceberg.util.Pair;\n import org.apache.iceberg.util.StructLikeSet;\n import org.apache.iceberg.util.StructProjection;\n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n-public class TestGenericReaderDeletes extends TableTestBase {\n-  public TestGenericReaderDeletes() {\n-    super(2 /* format v2 with delete files */);\n-  }\n+import static org.apache.iceberg.types.Types.NestedField.required;\n+\n+public abstract class DeletesReadTest {\n+  // Schema passed to create tables\n+  public static final Schema SCHEMA = new Schema(\n+      required(1, \"id\", Types.IntegerType.get()),\n+      required(2, \"data\", Types.StringType.get())\n+  );\n+\n+  // Partition spec used to create tables\n+  public static final PartitionSpec SPEC = PartitionSpec.builderFor(SCHEMA)\n+      .bucket(\"data\", 16)\n+      .build();\n+\n+  protected final String testTableName = \"test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd747d4b21bd1531e3344dfd0b40807df0defef"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1053ba3adb98f7924396a855d39fdb5a6fa875", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/8d1053ba3adb98f7924396a855d39fdb5a6fa875", "committedDate": "2020-10-02T13:51:25Z", "message": "MR: apply row-level delete files when reeding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d37e9e091fffa30ec49434e18b7d54d230f7b561", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/d37e9e091fffa30ec49434e18b7d54d230f7b561", "committedDate": "2020-10-02T13:51:25Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b9a69e746b17a267926e359a297c3f4ffce098", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/a0b9a69e746b17a267926e359a297c3f4ffce098", "committedDate": "2020-10-02T13:51:50Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48bbec703b5f05703a8458c0d35ed0597e090c11", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/48bbec703b5f05703a8458c0d35ed0597e090c11", "committedDate": "2020-10-02T13:51:50Z", "message": "update naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "389bbd4256bb093f921db7a4c5e3cf53f1d2c21b", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/389bbd4256bb093f921db7a4c5e3cf53f1d2c21b", "committedDate": "2020-10-02T13:51:50Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef7e00606bb2f1c4ee97fe7367a70bb7c62af73b", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/ef7e00606bb2f1c4ee97fe7367a70bb7c62af73b", "committedDate": "2020-10-02T13:51:50Z", "message": "refactor unit test constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20d63354fa27d99c3a73b4375d42d6ad323d4e5", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/f20d63354fa27d99c3a73b4375d42d6ad323d4e5", "committedDate": "2020-10-02T13:53:32Z", "message": "minor fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e6140b882253ac1849343696d463b230433b9f6", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/3e6140b882253ac1849343696d463b230433b9f6", "committedDate": "2020-10-01T23:52:06Z", "message": "minor fixes"}, "afterCommit": {"oid": "f20d63354fa27d99c3a73b4375d42d6ad323d4e5", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/f20d63354fa27d99c3a73b4375d42d6ad323d4e5", "committedDate": "2020-10-02T13:53:32Z", "message": "minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e21552ade08fc079c5641b89ed625af71a3c46", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/01e21552ade08fc079c5641b89ed625af71a3c46", "committedDate": "2020-10-03T00:47:28Z", "message": "Fix remaining issues. (#5)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32db3c428902e00f9533db587e829dbf48792b0a", "author": {"user": {"login": "chenjunjiedada", "name": "Chen, Junjie"}}, "url": "https://github.com/apache/iceberg/commit/32db3c428902e00f9533db587e829dbf48792b0a", "committedDate": "2020-10-03T00:48:49Z", "message": "Merge branch 'master' into apply-row-level-deletes-when-reading"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3832, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}