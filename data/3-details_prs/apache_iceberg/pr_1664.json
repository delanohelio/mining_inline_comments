{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjU1NDU3", "number": 1664, "title": "Parquet: Optimize IN predicates in ParquetDictionaryRowGroupFilter", "bodyText": "This PR optimizes the evaluation of IN predicates on dictionary encoded columns in Parquet.\nThe previous solution relied on isEmpty on top of Sets$intersection. That, in turn, used Collections$disjoint(set2, set1). The latter checks whether the first argument is a set or not. If yes, it would simply iterate over the second argument ignoring the fact that the second argument can be also a set and may be even bigger. All of that led to the fact that we iterated through all dictionary values to evaluate IN predicates.", "createdAt": "2020-10-26T19:24:56Z", "url": "https://github.com/apache/iceberg/pull/1664", "merged": true, "mergeCommit": {"oid": "2d7555511694581ec97c258d6c4888eb45965588"}, "closed": true, "closedAt": "2020-10-28T16:40:05Z", "author": {"login": "aokolnychyi"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWZXYWAH2gAyNTEwMjU1NDU3OjUyNDcxNTgxYTViZmVlNDNlYWJjMzMxNjdmNWNmNjY3YjNmZmRkMTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXAEP4AFqTUxODg0OTMzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14", "author": {"user": {"login": "aokolnychyi", "name": "Anton Okolnychyi"}}, "url": "https://github.com/apache/iceberg/commit/52471581a5bfee43eabc33167f5cf667b3ffdd14", "committedDate": "2020-10-26T19:16:44Z", "message": "Parquet: Optimize IN predicates in ParquetDictionaryRowGroupFilter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTA2NTYw", "url": "https://github.com/apache/iceberg/pull/1664#pullrequestreview-517106560", "createdAt": "2020-10-26T19:26:54Z", "commit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNjo1NFrOHofC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNjo1NFrOHofC6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzczOQ==", "bodyText": "We could rely on Collections$disjoint here knowing how it behaves but I'd prefer to have full control here and be sure this logic does not change.", "url": "https://github.com/apache/iceberg/pull/1664#discussion_r512213739", "createdAt": "2020-10-26T19:26:54Z", "author": {"login": "aokolnychyi"}, "path": "parquet/src/main/java/org/apache/iceberg/parquet/ParquetDictionaryRowGroupFilter.java", "diffHunk": "@@ -278,8 +278,27 @@ public Boolean or(Boolean leftResult, Boolean rightResult) {\n \n       Set<T> dictionary = dict(id, ref.comparator());\n \n-      // ROWS_CANNOT_MATCH if all values of the dictionary are not in the set (the intersection is empty)\n-      return Sets.intersection(dictionary, literalSet).isEmpty() ? ROWS_CANNOT_MATCH : ROWS_MIGHT_MATCH;\n+      // we need to find out the smaller set to iterate through\n+      Set<T> smallerSet;\n+      Set<T> biggerSet;\n+\n+      if (literalSet.size() < dictionary.size()) {\n+        smallerSet = literalSet;\n+        biggerSet = dictionary;\n+      } else {\n+        smallerSet = dictionary;\n+        biggerSet = literalSet;\n+      }\n+\n+      for (T e : smallerSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODQ5MzM2", "url": "https://github.com/apache/iceberg/pull/1664#pullrequestreview-518849336", "createdAt": "2020-10-28T16:22:08Z", "commit": {"oid": "52471581a5bfee43eabc33167f5cf667b3ffdd14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3629, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}