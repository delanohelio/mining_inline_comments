{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4ODE3OTYy", "number": 1844, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwNjo0MTo1MFrOE-W8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxOToyNFrOFGVQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODIzMTU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwNjo0MTo1MFrOH7guXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTowNDo0NVrOH8YVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA==", "bodyText": "Looks like the class in DynConstructors.builder(Class) is only used during hiddenImpl. Can probably just use DynConstructors.builder() unless you want to keep that open for later?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r532164188", "createdAt": "2020-11-29T06:41:50Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2NjkxMQ==", "bodyText": "I'm also wondering if we should just use a ServiceLoader instead of using the dyn constructors stuff? DynConstructors seems to be more heavy duty/less safe. Like: https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/datasources/DataSource.scala#L656", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r532266911", "createdAt": "2020-11-29T21:11:26Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3ODQwOA==", "bodyText": "it's also a little ridiculous having to serialize all the config for FileIO and others into Map<String, String> so that it can be loaded from properties if it's already serializable.\nIs there some way Spark could support a Map<String, Serializable> which can get passed through to DataSourceV2? Is that already getting discussed somewhere?\nIn the short term, can we make builders loadable which then build the object.\nThis way whether or not something is valid config/is null is up to the object/builder during initialization instead of post initialization?\nAlso it lets there be final configuration variables instead of this weird, private null for the first couple seconds of it's lifetime.\nWhat I've been working on:\n\n/**\n * Should have an empty constructor.\n *\n * Necessary for getting past the Hadoop Configuration / Spark Options / Iceberg Options configuration barriers.\n */\npublic interface LoadableBuilder<T extends LoadableBuilder<T, K>> {\n    /**\n     * Method name for our custom {@link Conf}\n     *\n     * Should load config from conf\n     * @param conf\n     */\n    T load(Conf conf);\n\n    K build();\n}\n\npublic interface Dumpable {\n    /**\n     * Method name for our custom {@link Conf}\n     *\n     * Should add current config to conf\n     * @param conf\n     */\n    void dump(Conf conf);\n}", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r532278408", "createdAt": "2020-11-29T22:29:45Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNDg5MA==", "bodyText": "I'm also wondering if we should just use a ServiceLoader instead of using the dyn constructors stuff?\n\nI don't think this would be a good choice. ServiceLoader will scan the entire classpath for matching classes, which takes a really long time in large applications for initialization. It also introduces runtime issues because service files need to be merged when creating shaded Jars and it is easy to overlook.\nSince we already know the class to load from configuration that is passed to the catalog, I don't think ServiceLoader is a good option compared to using reflection to load a class. And the Dyn* classes just help make that easier to read and maintain.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533014890", "createdAt": "2020-12-01T01:34:28Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNTYyMg==", "bodyText": "it's also a little ridiculous having to serialize all the config for FileIO and others into Map<String, String> so that it can be loaded from properties if it's already serializable.\n\nI don't think I'm following what you are suggesting. The configuration passed in comes from a string map, like a Spark config or Hadoop config. Serialization is a concern after catalogs are configured because the components that were created on the driver need to be serialized to be sent for use on executors. Those are separate enough that I'm not sure how to improve on this.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533015622", "createdAt": "2020-12-01T01:36:41Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0NzMwMQ==", "bodyText": "it's also a little ridiculous having to serialize all the config for FileIO and others into Map<String, String> so that it can be loaded from properties if it's already serializable.\n\n\nYes as Ryan said, I don't think it serializes all the config. Map<String, String> properties is passed in during Spark initialization time and only initialized once. For AWS module, AwsProperties is serialized, but it is a much smaller subset of all the configurations.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533047301", "createdAt": "2020-12-01T03:19:57Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0ODM5NQ==", "bodyText": "You're right, serialization is unrelated", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533048395", "createdAt": "2020-12-01T03:23:53Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NDk3MQ==", "bodyText": "I don't think the user needs to reimplement the aws builders for every service, see the example I provided in the conversation below. In the v2 AWS client, the following aspects can be override:\n\ncredential provider\nregion\nendpoint (url + port)\nhttp client (for things like proxy)\nclient configuration\nservice configuration\n\nwe can either provide a way to dynamically configure each type of AWS client, or dynamically configure each aspect of the clients. From my current observation it is more common for users to want to use the same configuration across all clients, but maybe also have some exceptions for some specific clients. So it seems to make more sense to go with this proposed approach.\nFor your given example, yes information like port needs to be passed in, but even in a normal application it needs to be passed in from some configuration file. In this method you can also read your own configuration system instead of reading from the catalog properties passed in.\nYou can read the example I gave below for more information, and there is no need to initialize the client from the user.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533054971", "createdAt": "2020-12-01T03:48:02Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NTIxNA==", "bodyText": "@jackye1995 for sure. It's awesome that's it's so configurable. I've been pulling apart our codebase to try to strip out s3a (which is way harder to configure on the version I'm on than this) and I'm excited for when I can test this out!\nit's also a little ridiculous having to serialize all the config this line was worded poorly and was meant to be sympathetic about all the config mapping you're having to add, not the implementation. (It was after hours of trying to translate between my own internal configuration)", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533075214", "createdAt": "2020-12-01T05:04:45Z", "author": {"login": "johnclara"}, "path": "core/src/main/java/org/apache/iceberg/CatalogUtil.java", "diffHunk": "@@ -171,45 +172,57 @@ public static Catalog loadCatalog(\n \n   /**\n    * Load a custom {@link FileIO} implementation.\n+   */\n+  public static FileIO loadFileIO(\n+      String impl,\n+      Map<String, String> properties,\n+      Configuration hadoopConf) {\n+    return loadCatalogConfigurable(impl, properties, hadoopConf, FileIO.class);\n+  }\n+\n+  /**\n+   * Load a custom implementation of a {@link CatalogConfigurable}.\n    * <p>\n    * The implementation must have a no-arg constructor.\n-   * If the class implements {@link Configurable},\n+   * If the class implements Hadoop's {@link Configurable},\n    * a Hadoop config will be passed using {@link Configurable#setConf(Configuration)}.\n-   * {@link FileIO#initialize(Map properties)} is called to complete the initialization.\n+   * {@link CatalogConfigurable#initialize(Map properties)} is called to complete the initialization.\n    *\n    * @param impl full class name of a custom FileIO implementation\n    * @param hadoopConf hadoop configuration\n+   * @param resultClass the final return class type\n    * @return FileIO class\n    * @throws IllegalArgumentException if class path not found or\n    *  right constructor not found or\n    *  the loaded class cannot be casted to the given interface type\n    */\n-  public static FileIO loadFileIO(\n+  public static <T extends CatalogConfigurable> T loadCatalogConfigurable(\n       String impl,\n       Map<String, String> properties,\n-      Configuration hadoopConf) {\n-    LOG.info(\"Loading custom FileIO implementation: {}\", impl);\n-    DynConstructors.Ctor<FileIO> ctor;\n+      Configuration hadoopConf,\n+      Class<T> resultClass) {\n+    LOG.info(\"Loading custom {} implementation: {}\", resultClass.getName(), impl);\n+    DynConstructors.Ctor<T> ctor;\n     try {\n-      ctor = DynConstructors.builder(FileIO.class).impl(impl).buildChecked();\n+      ctor = DynConstructors.builder(resultClass).impl(impl).buildChecked();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDE4OA=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDAxNjQ5OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMToyMzoxNFrOH8UatQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjoyMDoyOVrOH9HtZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ==", "bodyText": "Can you give a quick example of how this is used and how it simplifies configuration?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533011125", "createdAt": "2020-12-01T01:23:14Z", "author": {"login": "rdblue"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0NjAxOA==", "bodyText": "The AssumeRoleCredentialsFactory is an example for it, I can give another example with more complicated customer use case:\npackage com.my.team;\n\nimport software.amazon.awssdk.auth.credentials.ContainerCredentialsProvider;\nimport software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\nimport software.amazon.awssdk.services.glue.GlueClient;\nimport software.amazon.awssdk.services.glue.GlueClientBuilder;\nimport software.amazon.awssdk.services.s3.S3ClientBuilder;\nimport software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\nimport software.amazon.awssdk.services.sts.auth.StsAssumeRoleWithSamlCredentialsProvider;\n\npublic class CustomCredentialsFactory implements AwsClientCredentialsFactory {\n\n\n  @Override\n  public void configure(AwsClientBuilder clientBuilder) {\n   if (clientBuilder instanceof S3ClientBuilder) {\n     clientBuilder.credentialsProvider(StsAssumeRoleWithSamlCredentialsProvider.builder()\n         .refreshRequest(...)\n         .build());\n   } else if (clientBuilder instanceof GlueClientBuilder) {\n     clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n         .refreshRequest(...)\n         .build())\n   } else {\n     clientBuilder.credentialsProvider(ContainerCredentialsProvider.builder().build());\n   }\n  }\n}\nAnd it can be started with:\nspark-sql --jars iceberg-spark3-runtime.jar \\\n    --conf spark.sql.catalog.my_catalog=org.apache.iceberg.spark.SparkCatalog \\\n    --conf spark.sql.catalog.my_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog \\\n    --conf spark.sql.catalog.my_catalog.warehouse=s3://my-bucket \\\n    --conf spark.sql.catalog.my_catalog.client.credentials-factory=com.my.team.CustomCredentialsFactory", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533046018", "createdAt": "2020-12-01T03:15:18Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3OTM3Nw==", "bodyText": "So, I'm just catching up on all of the discussion and may not be following everything just yet, but I feel like we should try to avoid most S3Client configuration in Iceberg.  Part of the reason the S3FileIO takes a supplier for an S3Client is the we can externalize all of the configuration.\nThe places where we have exposed configuration (part size, acl, etc.) is because they are request level options.  Since credentials are at the client level, we should be able to have just a S3ClientFactory that supplies all of the custom client configuration as opposed to exposing features (like credentials) directly.\nI feel like that would really reduce the complexity in Iceberg and at the same time expose all of the possible configuration for the S3Client that anyone may want to leverage.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533579377", "createdAt": "2020-12-01T17:10:01Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzQxOQ==", "bodyText": "This PR mostly comes from the following use cases:\n\nuse a customized credential provider across all the AWS clients\nuse some kind of proxy configuration for HTTP client to bypass network boundary (not included in this PR, plan to put in another one)\n\nI completely agree that we should expose limited number of configurations for S3FileIO, but those are not related to S3 but AWS clients in general.\nAnd maybe I missed something, but based on my understanding, for people using open source Iceberg directly, it is not straightforward to use the supplier, unless they do something like\npublic MyS3ClientFileIO extends S3FileIO {\n  public MyS3ClientFileIO() {\n    super(new MyS3ClientSupplier());\n  }\n}\nAnd load the MyS3ClientFileIO instead of S3FileIO as the FileIO implementation, which is (1) not very convenient, and (2) people with the requirements I listed basically have to override all the classes that touches AWS clients.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533637419", "createdAt": "2020-12-01T18:39:47Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2NDc5Mw==", "bodyText": "@jackye1995  I'm not proposing that users would subclass the S3FileIO, but rather that we take your approach of dynamically loading and just up-level it to the whole S3Client supplier as opposed to just parts of the client configuration.  This would mean configuring with something like --conf spark.sql.catalog.my_catalog.client.s3.supplier=com.my.team.S3ClientSupplier.  We could then just change the S3FileIO to check for a configured supplier before using the default client.\nThis allows anyone to supply a fully configured client based on their own requirements and we wouldn't need to expose the specific configurations through the Iceberg APIs.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533764793", "createdAt": "2020-12-01T22:29:50Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5ODkxMg==", "bodyText": "I see, yes I have been personally debating about this and that's why I put up this PR for feedbacks. We can either as you suggest provide integration points to load each AWS client, or in my current PR to provide integration points to load important aspects like credential providers, and there are pros and cons for both.\nCurrently what I see is that we will at least have the following clients in the AWS module:\n\nGlue\nDynamoDB\nS3\nKMS\n(planned) CloudWatch\nand might be more\n\nAnd in my use cases listed, it is much cleaner to just expose a holistic factory for credentials rather than to load every single AWS client dynamically.\nSo what about exposing a single factory named AwsClientConfigurationFactory, for people to configure any client configuration? It will look like:\npublic interface AwsClientConfigurationFactory implements CatalogConfigurable, Serializable {\n\n    <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder);\n}\n\npublic class MyClientConfigurationFactory implements AwsClientConfigurationFactory {\n\n    <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n        if (clientBuilder instanceof S3ClientBuilder) {\n             S3ClientBuilder s3Clientbuilder = (S3ClientBuilder) clientBuilder;\n             // do whatever you want with s3\n       }\n      // do common stuffs across all client builders\n       clientBuilder.credentialsProvider(...);\n    }\n}\nBy doing so, there is only 1 integration point for all AWS clients, and it can satisfy all both use case for configuring a single client, or configuring common properties across all clients.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533798912", "createdAt": "2020-12-01T23:48:38Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MTQ5Mw==", "bodyText": "@danielcweeks see updated PR for more details.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533851493", "createdAt": "2020-12-02T02:20:29Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+\n+/**\n+ * Interface for loading a custom factory to configure AWS credentials for different services.\n+ * See {@link AssumeRoleCredentialsFactory} as an example.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTEyNQ=="}, "originalCommit": {"oid": "743d182e9fdb40ff7cec5d04adb1c810fcf41ceb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzY4NDQ3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzoyNjowOFrOH83x_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzoyNjozOVrOH-oYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw==", "bodyText": "@rdblue, one thing we need to think about is how we want to pass properties down.  I feel like CatalogConfigurable is a bit of a misnomer here because we should really be able to specify properties at a Catalog level or a table level (e.g. someone may want to configure table specific credentials that differ from the catalog).\nHow these properties are accessed and cascade is somewhat unclear.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533590527", "createdAt": "2020-12-01T17:26:08Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzOTkzMQ==", "bodyText": "I remember there was a discussion in #1618 , and we came to the conclusion that a FileIO should just be a catalog level thing, which means the credentials used should also be catalog level configuration. Does Iceberg have access control feature at table level?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533639931", "createdAt": "2020-12-01T18:43:48Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1OTQ0Ng==", "bodyText": "I remember reading about iceberg being able to support catalog backed by multiple cloud vendors based on its design, wondering if we do want to support that (and thus might want to change the name CatalogConfigurable).", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533859446", "createdAt": "2020-12-02T02:46:32Z", "author": {"login": "yyanyy"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NzcyNg==", "bodyText": "Do you have a link to what you read? And how does it relate to CatalogConfigurable?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r534577726", "createdAt": "2020-12-03T00:35:29Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQzNTQxNw==", "bodyText": "So, there are some features that we might want to control at the table level, but I think that's just going to complicate things.  @rdblue brought up a good point that table level properties are not available on initial load (only catalog properties), so we would need to thing through what cases would really benefit from table level overrides.  We can revisit that later, so I'll resolve.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r535435417", "createdAt": "2020-12-03T17:26:39Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -20,7 +20,7 @@\n package org.apache.iceberg.io;\n \n import java.io.Serializable;\n-import java.util.Map;\n+import org.apache.iceberg.catalog.CatalogConfigurable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5MDUyNw=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODU2MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxOToyOVrOH9ALVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozMDowOFrOH9z6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODA4NA==", "bodyText": "this can go to npe if properties is null.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533728084", "createdAt": "2020-12-01T21:19:29Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "diffHunk": "@@ -44,6 +44,11 @@ public static double propertyAsDouble(Map<String, String> properties,\n     return defaultValue;\n   }\n \n+  public static Integer propertyAsInt(Map<String, String> properties, String property) {\n+    String value = properties.get(property);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NTY5OA==", "bodyText": "All methods in this util assumes properties is not null.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r534575698", "createdAt": "2020-12-03T00:30:08Z", "author": {"login": "jackye1995"}, "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "diffHunk": "@@ -44,6 +44,11 @@ public static double propertyAsDouble(Map<String, String> properties,\n     return defaultValue;\n   }\n \n+  public static Integer propertyAsInt(Map<String, String> properties, String property) {\n+    String value = properties.get(property);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODA4NA=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODU2NDI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxOTozN1rOH9ALpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToxOTozN1rOH9ALpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODE2Ng==", "bodyText": "same here.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533728166", "createdAt": "2020-12-01T21:19:37Z", "author": {"login": "giovannifumarola"}, "path": "core/src/main/java/org/apache/iceberg/util/PropertyUtil.java", "diffHunk": "@@ -53,6 +58,11 @@ public static int propertyAsInt(Map<String, String> properties,\n     return defaultValue;\n   }\n \n+  public static Long propertyAsLong(Map<String, String> properties, String property) {\n+    String value = properties.get(property);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODU2OTAyOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToyMTowN1rOH9AOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzowNjoxN1rOH9DfHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODkyNQ==", "bodyText": "why do you need serializable?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533728925", "createdAt": "2020-12-01T21:21:07Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "diffHunk": "@@ -19,12 +19,15 @@\n \n package org.apache.iceberg.aws;\n \n+import java.io.Serializable;\n import java.util.Map;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.util.PropertyUtil;\n import software.amazon.awssdk.services.s3.model.ObjectCannedACL;\n \n-public class AwsProperties {\n+public class AwsProperties implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4MjMwMA==", "bodyText": "because it's a part of S3FileIO which is serializable.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533782300", "createdAt": "2020-12-01T23:06:17Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "diffHunk": "@@ -19,12 +19,15 @@\n \n package org.apache.iceberg.aws;\n \n+import java.io.Serializable;\n import java.util.Map;\n+import org.apache.iceberg.CatalogUtil;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n import org.apache.iceberg.util.PropertyUtil;\n import software.amazon.awssdk.services.s3.model.ObjectCannedACL;\n \n-public class AwsProperties {\n+public class AwsProperties implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyODkyNQ=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODcwODk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowMzoyOVrOH9BlVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowMzoyOVrOH9BlVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MTEyNg==", "bodyText": "This is not clear. Can you rephrase?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533751126", "createdAt": "2020-12-01T22:03:29Z", "author": {"login": "giovannifumarola"}, "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface for classes to implement when the class might be initialized during", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODcyOTU5OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowOTo1NFrOH9ByYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozMTowNlrOH9z7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDQ2Nw==", "bodyText": "properties can be null at this point.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533754467", "createdAt": "2020-12-01T22:09:54Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NjA1Ng==", "bodyText": "initialize is called from engines like Spark that passes user configurations that is guaranteed to be non-null. That is why I do not check null for it.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r534576056", "createdAt": "2020-12-03T00:31:06Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDQ2Nw=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODczMTcxOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDozM1rOH9BzuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMDozM1rOH9BzuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NDgwOQ==", "bodyText": "why do you use propertyutil.property()?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533754809", "createdAt": "2020-12-01T22:10:33Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODczNDA0OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMToxNlrOH9B1LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzowNTozMVrOH9Dd0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTE4MQ==", "bodyText": "externalId can be null or empty. do you need any check here?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533755181", "createdAt": "2020-12-01T22:11:16Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleCredentialsProviderFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4MTk3MQ==", "bodyText": "It can be null, and IAM will then not check external ID.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533781971", "createdAt": "2020-12-01T23:05:31Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+          .refreshRequest(AssumeRoleRequest.builder()\n+              .roleArn(roleArn)\n+              .roleSessionName(genSessionName())\n+              .durationSeconds(timeout)\n+              .externalId(externalId)\n+              .build())\n+          .stsClient(AwsClientUtil.defaultStsClient())\n+          .build());\n+    }\n+  }\n+\n+  private String genSessionName() {\n+    return String.format(\"iceberg-aws-%s\", UUID.randomUUID());\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleCredentialsProviderFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTE4MQ=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODczNjY0OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMjowOVrOH9B25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozMzo1M1rOH9z_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTYyMQ==", "bodyText": "you need to check if the caller has called init before calling configure.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533755621", "createdAt": "2020-12-01T22:12:09Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NzA5OA==", "bodyText": "initialize is called from engines like Spark that passes user configurations, and is guaranteed to be called as the fist method during dynamic loading.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r534577098", "createdAt": "2020-12-03T00:33:53Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleCredentialsFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Factory to use STS assume role credential to access cross-account cross-region AWS resources.\n+ */\n+public class AssumeRoleCredentialsFactory implements AwsClientCredentialsFactory {\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // STS will use default credential in the environment as the root credential to assume the role\n+    if (!(clientBuilder instanceof StsClientBuilder)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTYyMQ=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODczODg4OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMzowMlrOH9B4fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMzowMlrOH9B4fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NjAzMA==", "bodyText": "same comments from the previous class.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533756030", "createdAt": "2020-12-01T22:13:02Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+\n+/**\n+ * Factory that uses the same configured region for all AWS client initialization,\n+ * and uses region in the default AWS region provider chain for refreshing assume role credentials.\n+ */\n+public class AssumeRoleSingleRegionFactory implements AwsClientRegionFactory {\n+\n+  private Region region;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODc0MDU3OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMzozMlrOH9B5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMDozNDozN1rOH90A4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NjMwOQ==", "bodyText": "RegionStr can be an incorrect value.\nWe need to check if region is correct.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533756309", "createdAt": "2020-12-01T22:13:32Z", "author": {"login": "giovannifumarola"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+\n+/**\n+ * Factory that uses the same configured region for all AWS client initialization,\n+ * and uses region in the default AWS region provider chain for refreshing assume role credentials.\n+ */\n+public class AssumeRoleSingleRegionFactory implements AwsClientRegionFactory {\n+\n+  private Region region;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // do not configure STS so it can pick up default credentials\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.region(region);\n+    }\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleSingleRegionFactory with null region\");\n+    region = Region.of(regionStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NzM3Ng==", "bodyText": "There are special regions that cannot be checked, that is why we only check not null.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r534577376", "createdAt": "2020-12-03T00:34:37Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleSingleRegionFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+\n+/**\n+ * Factory that uses the same configured region for all AWS client initialization,\n+ * and uses region in the default AWS region provider chain for refreshing assume role credentials.\n+ */\n+public class AssumeRoleSingleRegionFactory implements AwsClientRegionFactory {\n+\n+  private Region region;\n+\n+  @Override\n+  public void configure(AwsClientBuilder clientBuilder) {\n+    // do not configure STS so it can pick up default credentials\n+    if (!(clientBuilder instanceof StsClientBuilder)) {\n+      clientBuilder.region(region);\n+    }\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleSingleRegionFactory with null region\");\n+    region = Region.of(regionStr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NjMwOQ=="}, "originalCommit": {"oid": "d11a66bdfe9f5a199375a5d9cf13d8239fb40480"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTQ1NzMxOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjo1OTo1NlrOH9IdEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDozNzozM1rOH9KJHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2MzY5Ng==", "bodyText": "I think s3 passed in from this and the constructor below will be overwritten in initialize, do we want to consolidate them/mention in javadoc?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533863696", "createdAt": "2020-12-02T02:59:56Z", "author": {"login": "yyanyy"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -37,12 +37,16 @@\n  * See {@link S3URI#VALID_SCHEMES} for the list of supported S3 URI schemes.\n  */\n public class S3FileIO implements FileIO {\n-  private final SerializableSupplier<S3Client> s3;\n+  private SerializableSupplier<S3Client> s3;\n   private AwsProperties awsProperties;\n   private transient S3Client client;\n \n+  /**\n+   * No-arg constructor to load the FileIO dynamically.\n+   * <p>\n+   * All fields are initialized by calling {@link S3FileIO#initialize(Map)} later.\n+   */\n   public S3FileIO() {\n-    this(AwsClientUtil::defaultS3Client);\n   }\n \n   public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg5MTM1Nw==", "bodyText": "Yes this constructor should not call initialize, currently within Iceberg it is only used by tests. Let me add the documentation.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533891357", "createdAt": "2020-12-02T04:37:33Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -37,12 +37,16 @@\n  * See {@link S3URI#VALID_SCHEMES} for the list of supported S3 URI schemes.\n  */\n public class S3FileIO implements FileIO {\n-  private final SerializableSupplier<S3Client> s3;\n+  private SerializableSupplier<S3Client> s3;\n   private AwsProperties awsProperties;\n   private transient S3Client client;\n \n+  /**\n+   * No-arg constructor to load the FileIO dynamically.\n+   * <p>\n+   * All fields are initialized by calling {@link S3FileIO#initialize(Map)} later.\n+   */\n   public S3FileIO() {\n-    this(AwsClientUtil::defaultS3Client);\n   }\n \n   public S3FileIO(SerializableSupplier<S3Client> s3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2MzY5Ng=="}, "originalCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTQ3MzI4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestCatalogUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzowNzoyOVrOH9ImNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDo0MzowMlrOH9KPLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2NjAzNw==", "bodyText": "I think class.getSimpleName() could avoid changing this, but leaving as is doesn't harm.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533866037", "createdAt": "2020-12-02T03:07:29Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/TestCatalogUtil.java", "diffHunk": "@@ -118,7 +118,7 @@ public void loadCustomFileIO_badArg() {\n   public void loadCustomFileIO_badClass() {\n     AssertHelpers.assertThrows(\"cannot cast\",\n         IllegalArgumentException.class,\n-        \"does not implement FileIO\",\n+        \"does not implement org.apache.iceberg.io.FileIO\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg5MjkxMA==", "bodyText": "thanks, will do that", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r533892910", "createdAt": "2020-12-02T04:43:02Z", "author": {"login": "jackye1995"}, "path": "core/src/test/java/org/apache/iceberg/TestCatalogUtil.java", "diffHunk": "@@ -118,7 +118,7 @@ public void loadCustomFileIO_badArg() {\n   public void loadCustomFileIO_badClass() {\n     AssertHelpers.assertThrows(\"cannot cast\",\n         IllegalArgumentException.class,\n-        \"does not implement FileIO\",\n+        \"does not implement org.apache.iceberg.io.FileIO\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2NjAzNw=="}, "originalCommit": {"oid": "9f3d5ef8f006b9fb3e987756bbaa2737b5442804"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY0MjkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjoyNzowMVrOH_YVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozOTowMVrOH_hMtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTAwNg==", "bodyText": "As it seems that we're standardizing on Map<String, String> for properties in a number of areas (catalog, table properties, etc.), It might make sense to just make this Configuratble and promote out side of Catalog.  I'm just certain we add a lot of value by making this catalog specific.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536221006", "createdAt": "2020-12-04T16:27:01Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface to implement if the class will be initialized during dynamic catalog loading in engines like Spark.\n+ * <p>\n+ * When {@link Catalog#initialize(String catalogName, Map catalogProperties)} is called,\n+ * The same catalog properties map is passed in to {@link CatalogConfigurable#initialize(Map catalogProperties)}\n+ * to cascadingly complete the full catalog loading process.\n+ */\n+public interface CatalogConfigurable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NjI2MA==", "bodyText": "The reason I name it CatalogConfigurable is that Hadoop has its configurable interface called Configurable and it causes class name duplication. And I put it in the catalog package to not confuse the properties here with table properties. What do you think?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536366260", "createdAt": "2020-12-04T20:39:01Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/catalog/CatalogConfigurable.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.catalog;\n+\n+import java.util.Map;\n+\n+/**\n+ * Interface to implement if the class will be initialized during dynamic catalog loading in engines like Spark.\n+ * <p>\n+ * When {@link Catalog#initialize(String catalogName, Map catalogProperties)} is called,\n+ * The same catalog properties map is passed in to {@link CatalogConfigurable#initialize(Map catalogProperties)}\n+ * to cascadingly complete the full catalog loading process.\n+ */\n+public interface CatalogConfigurable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyMTAwNg=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDY3MjQ1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleClientConfigFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjozMzoxN1rOH_Ymvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODozMjozNlrOIC9PcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTQ3MQ==", "bodyText": "I'm somewhat mixed on whether we want to include this in Iceberg.  At a high-level, we want to leave as much AWS client configuration outside of Iceberg as possible (this allows for more flexibility without adding configuration/complexity to the iceberg project).  At the same time, I see we might want to include functionality in cases where it's so commonly used that everyone would end up implementing the same functionality.\nAt Netflix, our situation is more complicated than this would allow for, so we would likely have a custom implementation regardless.  In the more general case, I would assume that instance credentials and the default credential provider chain would be sufficient.  Should we just leave this out?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536225471", "createdAt": "2020-12-04T16:33:17Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of {@link AwsClientConfigFactory} for the assume role use case.\n+ */\n+public class AssumeRoleClientConfigFactory implements AwsClientConfigFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2MTkxMw==", "bodyText": "Yes agree, internally we also have our own credential provider implementation, but I think this will be a very common use case, because it is very likely for organizations to have a centralized glue catalog / s3 bucket and run computes in other AWS accounts. Plus it also serve as an example implementation.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r539961913", "createdAt": "2020-12-10T08:16:58Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of {@link AwsClientConfigFactory} for the assume role use case.\n+ */\n+public class AssumeRoleClientConfigFactory implements AwsClientConfigFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTQ3MQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk3MTQ0MA==", "bodyText": "And with discussion in #1887 , we will mark all aws dependencies as provided, which means there is no additional jar size increase to add this example.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r539971440", "createdAt": "2020-12-10T08:32:36Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.sts.StsClientBuilder;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of {@link AwsClientConfigFactory} for the assume role use case.\n+ */\n+public class AssumeRoleClientConfigFactory implements AwsClientConfigFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNTQ3MQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDczNTMwOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0NzoyOFrOH_ZLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODoxNDozNVrOIC8kwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ==", "bodyText": "While I generally agree with the dynamically loading/configuring AWS Clients, something about this implementation feels a little awkward.  For example, this interface technically isn't a \"Factory\" per se (that's mostly just a naming issue, I still think general approach is sound.  Maybe AwsClientConfigurer).  It configures a client, but doesn't actually create anything new.  Also, the actual configuration is applied via AwsProperties::configure, which seems a little strange.\nI'd suggest making a small change to move the dynamic loading into the AwsClientUtil (just keep the class string reference in properties) and remove the configure from AwsProperties (keeping logic out of the properties class).  AwsClientConfigurer would initialize with AwsProperties or take it as a parameter so that configure can be called directly (not through the properties class).", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536234845", "createdAt": "2020-12-04T16:47:28Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0ODcyMw==", "bodyText": "Another thought (and I'm starting to think this may just make more sense) is to merge the idea of the AwsClientConfigFactory and AwsClientUtil and just make a single dynamically loadable class that would be a factory for creating the clients.  All the AwsClientUtil does at this point is instantiate the classes and all the AwsClientConfigFactory does is configure it, so it would be pretty sensible to just make one that does both as a AwsClientFactory\nThen you just have\nAwsClientFactory::<service>Client() with a DefaultAwsClientFactory that is loaded if a custom implementation is not supplied.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536248723", "createdAt": "2020-12-04T17:11:21Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMTM2MA==", "bodyText": "Yes definitely agree that factory is not a good name, and I put it in AwsProperties::configure just to satisfy the interface of client.applyMutation(...), but I also feel it is a bit awkward. DefaultAwsClientFactory sounds like a good idea, let me do that.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536301360", "createdAt": "2020-12-04T18:40:07Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMjgzNQ==", "bodyText": "However, I don't want people implementing the class to keep updating when we add new AWS clients, let me think about that for a moment", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536302835", "createdAt": "2020-12-04T18:42:46Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MTY1Ng==", "bodyText": "@danielcweeks So after testing a few different approaches, I think keeping a AwsClientConfigurer and a single AwsClientFactory is the most flexible approach. Users can configure all clients using AwsClientConfigurer, and we can introduce new clients in AwsClientFactory without users changing their configurer implementation. Please let me know what you think, thank you!", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536371656", "createdAt": "2020-12-04T20:50:03Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ1NTg1Mg==", "bodyText": "@jackye1995 I like this better, but I feel like I'm not following what value the AwsClientConfigurer adds at this point.  It seems that AwsClientConfigurer interface is just a duplication of the setDefaultsAndConfigure in AwsClientFactory (they have the same signature).  Why wouldn't we just drop the AwsClientConfigurer and dynamically load the factory? Then if someone wants to extend the configuration, they just extend AwsClientFactory and override the configure method?  It seems like we would still be able to add new clients and the configure method would still apply to any of the standard client builder options.\nThe added value this provides is that since the Factory is responsible for instantiation, we can now override that behavior (e.g. cache/reuse/proxy or force new instances for instances of the client).  That may not be necessary for glue catalog as I assume there would only be one instance, but for S3FileIO it may be helpful.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r536455852", "createdAt": "2020-12-05T00:13:15Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3MjAyNg==", "bodyText": "Yes I thought about just having a factory, but here are my reasons for having the additional AwsClientConfigurer delegation, please let me know if you think they are important or not:\n\nthe interface of the factory would continue to evolve as more clients are added. I think for a public interface used for dynamic loading, it is preferred to keep it stable and unchanged for most of the time, so there won't be incompatibility errors when the package versions do not match.\nI see there are 3 layers of configuration, (1) defaults to initialize a bare-minimum client (http client impl, etc.) (2) user-specific defaults for all their clients (credentials, etc.), (3) user-specific client configurations (s3 client retry, etc.), and the intention of setDefaultsAndConfigure is to configure (1) and then leave (2) and (3) for customers to configure using the configurer.\nIf a user can directly load a factory, there is nothing to stop the user from overriding the specific get client methods and skip config layer 1. This also defeats the purpose of using a general configure method.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r537772026", "createdAt": "2020-12-07T19:31:10Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NTU2NA==", "bodyText": "@danielcweeks any thoughts on this?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r539685564", "createdAt": "2020-12-09T22:10:16Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0MjgyMQ==", "bodyText": "Sorry, this just dropped off my radar.\nI don't actually disagree with in concept with any of the items above, but I would propose handling it differently.\nMake AwsClientFactory an interface, which would just expose the client calls (e.g. factory.s3(), factory.glue()).  Create a DefaultAwsClientFactory that has the common configuration setDefaultsAndConfigure.  Create an StsAwsClientFactory that overrides for setDefaultsAndConfigure for the common functionality.\nNow I can see your point in #3 that if someone were to override the client creation, they would have to directly call the setDefaultsAndConfigure, but I don't feel like preventing users from overriding the creation of the client is a good tradeoff for ensuring that they're consistently configured.\nWe could separate the instantiation and access of the client in the factory so that you can enforce the configure path, but I feel like that's just overcomplicating the situation.  Doing the above just gets us back to a more traditional, interface and implementation design that I feel will make more sense for anyone looking to provide a custom implementation.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r539742821", "createdAt": "2020-12-10T00:07:45Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2MDUxMg==", "bodyText": "Thanks for the feedback, updated, please let me know if this looks good to you.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r539960512", "createdAt": "2020-12-10T08:14:35Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsClientConfigFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.io.Serializable;\n+import org.apache.iceberg.catalog.CatalogConfigurable;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+\n+/**\n+ * Interface for any customization of AWS client.\n+ * <p>\n+ * User can provide an implementation of this factory to perform any modification to AWS clients,\n+ * such as credentials provider, region, endpoint, http client, etc.\n+ * See {@link AssumeRoleClientConfigFactory} as an example.\n+ */\n+public interface AwsClientConfigFactory extends CatalogConfigurable, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNDg0NQ=="}, "originalCommit": {"oid": "b48bbccbbd7403012ce434cde51a8f63b9f35f94"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTc2MDczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowMDo0OVrOIHSKVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowOToxMFrOIIEpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwODUwMQ==", "bodyText": "I'm not sure it actually makes sense for the FileIO to implement CatalogConfigurable.  For S3FileIO, the initialization is just setting up the AwsProperties, which is also being set as part of the constructor and those two paths actually conflict (as you note in the comments).  However, this makes S3FileIO pretty confusing. (I'll add more comments on S3FileIO).", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544508501", "createdAt": "2020-12-16T18:00:49Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -29,7 +29,7 @@\n  * must be serializable because various clients of Spark tables may initialize this once and pass\n  * it off to a separate module that would then interact with the streams.\n  */\n-public interface FileIO extends Serializable {\n+public interface FileIO extends Serializable, CatalogConfigurable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzk0Mw==", "bodyText": "In that case, let me remove the CatalogConfigurable related changes first. I do think it is worth adding, but seems too much to discuss in this PR.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r545313943", "createdAt": "2020-12-17T18:36:13Z", "author": {"login": "jackye1995"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -29,7 +29,7 @@\n  * must be serializable because various clients of Spark tables may initialize this once and pass\n  * it off to a separate module that would then interact with the streams.\n  */\n-public interface FileIO extends Serializable {\n+public interface FileIO extends Serializable, CatalogConfigurable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwODUwMQ=="}, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNTYwOQ==", "bodyText": "I just want to be sure that we understand how the properties are getting propagated to the FileIO.  Right now, it seems that we're loading it via the CatalogUtils, but only in the glue catalog, so it seems somewhat specific at this point.  Since the glue catalog can just load the properties and use the S3FileIO constructor, it seems like we should pull it out from the PR and revisit with a broader change address the default dynamic loading.\nI agree that it might be a good addition because if you dynamically load FileIO right now, I don't believe you can set custom AwsProperties.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r545335609", "createdAt": "2020-12-17T19:09:10Z", "author": {"login": "danielcweeks"}, "path": "api/src/main/java/org/apache/iceberg/io/FileIO.java", "diffHunk": "@@ -29,7 +29,7 @@\n  * must be serializable because various clients of Spark tables may initialize this once and pass\n  * it off to a separate module that would then interact with the streams.\n  */\n-public interface FileIO extends Serializable {\n+public interface FileIO extends Serializable, CatalogConfigurable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUwODUwMQ=="}, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTc4ODE5OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODowNzoxNFrOIHSabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozODozMlrOIIDaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjYyMQ==", "bodyText": "I don't feel like the factory reference should be held by AwsProperties.  This also complicates the Serialization as AwsClientFactory now needs to be Serializable and I'm not even sure that it is at this point due to the UrlConnectionHttpClient.create() reference.  It seems like we should separate AwsProperties and the AwsClientFactory.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544512621", "createdAt": "2020-12-16T18:07:14Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "diffHunk": "@@ -131,6 +170,8 @@\n   private String glueCatalogId;\n   private boolean glueCatalogSkipArchive;\n \n+  private AwsClientFactory clientFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNTQwMQ==", "bodyText": "UrlConnectionHttpClient.create() is a static final, should not affect serialization.\nI think the client factory has to be serializable anyway, because AwsClientFactory::s3will be used as the supplier for s3 client in S3FileIO. Is there any use case that you think need it to be not serializable?", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r545315401", "createdAt": "2020-12-17T18:38:32Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AwsProperties.java", "diffHunk": "@@ -131,6 +170,8 @@\n   private String glueCatalogId;\n   private boolean glueCatalogSkipArchive;\n \n+  private AwsClientFactory clientFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxMjYyMQ=="}, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTgxMDgxOnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxMjoyMVrOIHSnnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxMjoyMVrOIHSnnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxNTk5OQ==", "bodyText": "As I mention above, in the FileIO comment, having both this path and constructor path for initialization causes some problems.  If we use the default constructor, then initialize() gets called, don't we end up with two S3 client being created (and the first never gets properly closed)? I forgot this is a supplier, so it doesn't actually get created.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544515999", "createdAt": "2020-12-16T18:12:21Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/s3/S3FileIO.java", "diffHunk": "@@ -85,5 +101,6 @@ private S3Client client() {\n   @Override\n   public void initialize(Map<String, String> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTgyNjA1OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxNTo0N1rOIHSwmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxNTo0N1rOIHSwmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxODI5OQ==", "bodyText": "As we did in a few other places (like S3OutputStream) it would be good to break out the builders a little as the nested builders tend to be a little harder to follow.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544518299", "createdAt": "2020-12-16T18:15:47Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of a {@link AwsClientFactory} for the assume role use case.\n+ * <p>\n+ * The factory is initialized with a role ARN, region and optional external ID to assume from catalog properties,\n+ * and configure all clients except the STS client to use the STS assume role credentials provider.\n+ * The STS client is initialized using default credential and region chain\n+ * and used to refresh the assume role session token.\n+ */\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private Region region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+    region = Region.of(regionStr);\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTg0MDk3OnYy", "diffSide": "RIGHT", "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODoxOToyNFrOIHS5ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMToxMFrOIIEtyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyMDYxMQ==", "bodyText": "Small issue I ran into when configuring StsClient was that region() was required in some cases (It may have been due to cross-account role assume in the same region, but I had to explicitly set it).  If that's not a common issue, we can ignore it for now.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r544520611", "createdAt": "2020-12-16T18:19:24Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of a {@link AwsClientFactory} for the assume role use case.\n+ * <p>\n+ * The factory is initialized with a role ARN, region and optional external ID to assume from catalog properties,\n+ * and configure all clients except the STS client to use the STS assume role credentials provider.\n+ * The STS client is initialized using default credential and region chain\n+ * and used to refresh the assume role session token.\n+ */\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private Region region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+    region = Region.of(regionStr);\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+        .stsClient(StsClient.builder().httpClient(HTTP_CLIENT_DEFAULT).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNjI3NA==", "bodyText": "I don't see this issue in integration tests on my side, let me add them here and see if I can simulate the situation you describe.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r545316274", "createdAt": "2020-12-17T18:39:40Z", "author": {"login": "jackye1995"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of a {@link AwsClientFactory} for the assume role use case.\n+ * <p>\n+ * The factory is initialized with a role ARN, region and optional external ID to assume from catalog properties,\n+ * and configure all clients except the STS client to use the STS assume role credentials provider.\n+ * The STS client is initialized using default credential and region chain\n+ * and used to refresh the assume role session token.\n+ */\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private Region region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+    region = Region.of(regionStr);\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+        .stsClient(StsClient.builder().httpClient(HTTP_CLIENT_DEFAULT).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyMDYxMQ=="}, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNjc3OQ==", "bodyText": "It may be too obscure of a case to deal with at this point.  I just don't know how others are using assume role, so it's entirely up to your judgement.  Just wanted to point it out for the future.", "url": "https://github.com/apache/iceberg/pull/1844#discussion_r545336779", "createdAt": "2020-12-17T19:11:10Z", "author": {"login": "danielcweeks"}, "path": "aws/src/main/java/org/apache/iceberg/aws/AssumeRoleAwsClientFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.aws;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.PropertyUtil;\n+import software.amazon.awssdk.awscore.client.builder.AwsClientBuilder;\n+import software.amazon.awssdk.awscore.client.builder.AwsSyncClientBuilder;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.glue.GlueClient;\n+import software.amazon.awssdk.services.kms.KmsClient;\n+import software.amazon.awssdk.services.s3.S3Client;\n+import software.amazon.awssdk.services.sts.StsClient;\n+import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n+import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n+\n+/**\n+ * Example of a {@link AwsClientFactory} for the assume role use case.\n+ * <p>\n+ * The factory is initialized with a role ARN, region and optional external ID to assume from catalog properties,\n+ * and configure all clients except the STS client to use the STS assume role credentials provider.\n+ * The STS client is initialized using default credential and region chain\n+ * and used to refresh the assume role session token.\n+ */\n+public class AssumeRoleAwsClientFactory implements AwsClientFactory {\n+\n+  private static final SdkHttpClient HTTP_CLIENT_DEFAULT = UrlConnectionHttpClient.create();\n+\n+  private String roleArn;\n+  private String externalId;\n+  private int timeout;\n+  private Region region;\n+\n+  @Override\n+  public S3Client s3() {\n+    return S3Client.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public GlueClient glue() {\n+    return GlueClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public KmsClient kms() {\n+    return KmsClient.builder().applyMutation(this::configure).build();\n+  }\n+\n+  @Override\n+  public void initialize(Map<String, String> properties) {\n+    roleArn = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_ARN);\n+    Preconditions.checkNotNull(roleArn,\n+        \"Cannot initialize AssumeRoleClientConfigFactory with null role ARN\");\n+    timeout = PropertyUtil.propertyAsInt(properties, AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC,\n+        AwsProperties.CLIENT_ASSUME_ROLE_TIMEOUT_SEC_DEFAULT);\n+    externalId = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_EXTERNAL_ID);\n+\n+    String regionStr = properties.get(AwsProperties.CLIENT_ASSUME_ROLE_REGION);\n+    Preconditions.checkNotNull(regionStr, \"Cannot initialize AssumeRoleClientConfigFactory with null region\");\n+    region = Region.of(regionStr);\n+  }\n+\n+  private <T extends AwsClientBuilder & AwsSyncClientBuilder> T configure(T clientBuilder) {\n+    clientBuilder.credentialsProvider(StsAssumeRoleCredentialsProvider.builder()\n+        .stsClient(StsClient.builder().httpClient(HTTP_CLIENT_DEFAULT).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUyMDYxMQ=="}, "originalCommit": {"oid": "06ab6a19c257e5408686a1e55a22d265f4622861"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3190, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}