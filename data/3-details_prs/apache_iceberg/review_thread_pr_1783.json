{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzk4ODIx", "number": 1783, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1Nzo0OVrOE-6umg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowNzo1OVrOFEMv7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA5MzcwOnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1Nzo0OVrOH8VG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozMjo0MVrOH8qjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMjQ0Nw==", "bodyText": "I don't think catalogName is accurate because catalogs have names (this one is spark_catalog). It should be catalogClass to be more clear.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533022447", "createdAt": "2020-12-01T01:57:49Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class SetupSourceCatalog {\n+\n+  private SetupSourceCatalog() {\n+\n+  }\n+\n+  public static void setupSparkCatalog(SparkSession spark) {\n+    setupSparkCatalog(spark, SparkSessionCatalog.class.getName());\n+  }\n+\n+  public static void setupSparkCatalog(SparkSession spark, String catalogName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3MzcxMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533373710", "createdAt": "2020-12-01T12:32:41Z", "author": {"login": "rymurr"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class SetupSourceCatalog {\n+\n+  private SetupSourceCatalog() {\n+\n+  }\n+\n+  public static void setupSparkCatalog(SparkSession spark) {\n+    setupSparkCatalog(spark, SparkSessionCatalog.class.getName());\n+  }\n+\n+  public static void setupSparkCatalog(SparkSession spark, String catalogName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMjQ0Nw=="}, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA5NjEwOnYy", "diffSide": "RIGHT", "path": "spark3/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1OToxNVrOH8VIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjozMzo1NVrOH8qlfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMjg0Mg==", "bodyText": "Why not add this to the iceberg-spark module? The only thing that isn't compatible is SparkSessionCatalog.class.getName(). The 2.4 code should ignore these settings, and this change would be a lot smaller.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533022842", "createdAt": "2020-12-01T01:59:15Z", "author": {"login": "rdblue"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class SetupSourceCatalog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3NDMzMg==", "bodyText": "cool, I was thinking similar but wanted to get your opinion first", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533374332", "createdAt": "2020-12-01T12:33:55Z", "author": {"login": "rymurr"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class SetupSourceCatalog {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMjg0Mg=="}, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDEwMTEyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMjowMTowMFrOH8VLEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxMTo1MVrOIBaXYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMzUwNw==", "bodyText": "@RussellSpitzer, I seem to remember looking at very similar logic recently. Did we commit that anywhere that we can reuse?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533023507", "createdAt": "2020-12-01T02:01:00Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNTYzMA==", "bodyText": "The logic was added to Spark3Util: https://github.com/apache/iceberg/blob/master/spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java#L607\nCan you update this to use those utils?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r537925630", "createdAt": "2020-12-07T23:56:23Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMzUwNw=="}, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1MTQ1OA==", "bodyText": "lovely, thats fixed", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r538351458", "createdAt": "2020-12-08T13:11:51Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMzUwNw=="}, "originalCommit": {"oid": "2e5ab046dd34c19a07aba7c737ddd5db2b4a6291"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjU2NTQ3OnYy", "diffSide": "LEFT", "path": "spark3/src/test/java/org/apache/iceberg/spark/source/TestSparkSchema3.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzozNzo0NVrOH8s5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzozNzo0NVrOH8s5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxMjEyNg==", "bodyText": "A potential complication: SupportsCatalogOptions doesn't allow for specifying the schema. I don't know how much people rely on this feature but it is a breaking change for the IcebergSource", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533412126", "createdAt": "2020-12-01T13:37:45Z", "author": {"login": "rymurr"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/TestSparkSchema3.java", "diffHunk": "@@ -1,23 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzgzNzA5OnYy", "diffSide": "RIGHT", "path": "spark/src/test/java/org/apache/iceberg/TestScanTaskSerialization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowMjoxNlrOH85PLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjowNzowN1rOH9X7Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNDM4MA==", "bodyText": "Nit: unnecessary whitespace change.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533614380", "createdAt": "2020-12-01T18:02:16Z", "author": {"login": "rdblue"}, "path": "spark/src/test/java/org/apache/iceberg/TestScanTaskSerialization.java", "diffHunk": "@@ -60,11 +62,17 @@\n       optional(3, \"c3\", Types.StringType.get())\n   );\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExNzEyNw==", "bodyText": "fixed", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534117127", "createdAt": "2020-12-02T12:07:07Z", "author": {"login": "rymurr"}, "path": "spark/src/test/java/org/apache/iceberg/TestScanTaskSerialization.java", "diffHunk": "@@ -60,11 +62,17 @@\n       optional(3, \"c3\", Types.StringType.get())\n   );\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNDM4MA=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzgzODQwOnYy", "diffSide": "RIGHT", "path": "spark/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowMjozOFrOH85QDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjowNzoyNlrOH9X7sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNDYwNg==", "bodyText": "Nit: can you remove this newline?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533614606", "createdAt": "2020-12-01T18:02:38Z", "author": {"login": "rdblue"}, "path": "spark/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class SetupSourceCatalog {\n+\n+  private SetupSourceCatalog() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExNzI5Ng==", "bodyText": "fixed", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534117296", "createdAt": "2020-12-02T12:07:26Z", "author": {"login": "rymurr"}, "path": "spark/src/test/java/org/apache/iceberg/spark/source/SetupSourceCatalog.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iceberg.spark.source;\n+\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.spark.sql.SparkSession;\n+\n+public final class SetupSourceCatalog {\n+\n+  private SetupSourceCatalog() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNDYwNg=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg0NzMyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowNTowM1rOH85V0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDo1MDoxNFrOH9tl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNjA4MQ==", "bodyText": "I think the correct exception is the Spark exception since this is going to be called from Spark code.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533616081", "createdAt": "2020-12-01T18:05:03Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMDQxMA==", "bodyText": "The Spark NoSuchTableException is typed which would change the interface. It appears there is no well defined way to return from this function w/o a table being found. It NPEs if you return null so an untyped exception seems to be the expected way to denote no table found. I thought the Iceberg NoSuchTableException was the best compromise here.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534120410", "createdAt": "2020-12-02T12:13:11Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNjA4MQ=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3MjE3Mw==", "bodyText": "Got it, I agree in that case. Thanks for explaining! You may want to add a comment here to explain in the code as well.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534472173", "createdAt": "2020-12-02T20:50:14Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxNjA4MQ=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg2MDEzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODowODoyOFrOH85d4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjoxNzoyNVrOH9YRbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxODE0NQ==", "bodyText": "Why is this second attempt done?\nWrapping the identifier in ` should escape the entire string as a single identifier, so the parser would return the original path as one component.\nI think this would be equivalent to ident = path.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533618145", "createdAt": "2020-12-01T18:08:28Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMjg2MA==", "bodyText": "you are correct. Fixed", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534122860", "createdAt": "2020-12-02T12:17:25Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxODE0NQ=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg2OTgzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMDo1NVrOH85jzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjoxOTo1MFrOH9YWrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxOTY2MQ==", "bodyText": "The default implementation always returns spark_catalog, not the current catalog. Since we want to use the current catalog when it isn't defined in the identifier, tableIdentifier(options) should fill it in. That would simplify this logic because it should always be non-null.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533619661", "createdAt": "2020-12-01T18:10:55Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));\n+      } catch (ParseException ignored) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    if (ident.size() == 1) {\n+      return Pair.of(null, TableIdentifier.of(defaultNamespace, ident.get(0)));\n+    } else if (ident.size() == 2) {\n+      if (catalogManager.isCatalogRegistered(ident.get(0))) {\n+        return Pair.of(ident.get(0), TableIdentifier.of(defaultNamespace, ident.get(1))); //todo what if path?\n+      } else {\n+        return Pair.of(null, TableIdentifier.of(ident.toArray(new String[0])));\n+      }\n     } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      if (catalogManager.isCatalogRegistered(ident.get(0))) {\n+        return Pair.of(ident.get(0), TableIdentifier.of(ident.subList(1, ident.size()).toArray(new String[0])));\n+      } else {\n+        return Pair.of(null, TableIdentifier.of(ident.toArray(new String[0])));\n+      }\n     }\n   }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    Table table = findTable(options, conf);\n-\n-    // Set confs from table properties\n-    mergeIcebergHadoopConfs(conf, table.properties());\n-\n-    // Re-overwrite values set in options and table properties but were not in the environment.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    return table;\n+  @Override\n+  public Identifier extractIdentifier(CaseInsensitiveStringMap options) {\n+    TableIdentifier tableIdentifier = tableIdentifier(options).second();\n+    return Identifier.of(tableIdentifier.namespace().levels(), tableIdentifier.name());\n   }\n \n-  private static void mergeIcebergHadoopConfs(Configuration baseConf, Map<String, String> options) {\n-    options.keySet().stream()\n-        .filter(key -> key.startsWith(\"hadoop.\"))\n-        .forEach(key -> baseConf.set(key.replaceFirst(\"hadoop.\", \"\"), options.get(key)));\n+  @Override\n+  public String extractCatalog(CaseInsensitiveStringMap options) {\n+    String catalogName = tableIdentifier(options).first();\n+    return (catalogName == null) ? SupportsCatalogOptions.super.extractCatalog(options) : catalogName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyNDIwNA==", "bodyText": "Ahh, yes. I just re-read the comments. Make sense, fixed.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534124204", "createdAt": "2020-12-02T12:19:50Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));\n+      } catch (ParseException ignored) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    if (ident.size() == 1) {\n+      return Pair.of(null, TableIdentifier.of(defaultNamespace, ident.get(0)));\n+    } else if (ident.size() == 2) {\n+      if (catalogManager.isCatalogRegistered(ident.get(0))) {\n+        return Pair.of(ident.get(0), TableIdentifier.of(defaultNamespace, ident.get(1))); //todo what if path?\n+      } else {\n+        return Pair.of(null, TableIdentifier.of(ident.toArray(new String[0])));\n+      }\n     } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      if (catalogManager.isCatalogRegistered(ident.get(0))) {\n+        return Pair.of(ident.get(0), TableIdentifier.of(ident.subList(1, ident.size()).toArray(new String[0])));\n+      } else {\n+        return Pair.of(null, TableIdentifier.of(ident.toArray(new String[0])));\n+      }\n     }\n   }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    Table table = findTable(options, conf);\n-\n-    // Set confs from table properties\n-    mergeIcebergHadoopConfs(conf, table.properties());\n-\n-    // Re-overwrite values set in options and table properties but were not in the environment.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    return table;\n+  @Override\n+  public Identifier extractIdentifier(CaseInsensitiveStringMap options) {\n+    TableIdentifier tableIdentifier = tableIdentifier(options).second();\n+    return Identifier.of(tableIdentifier.namespace().levels(), tableIdentifier.name());\n   }\n \n-  private static void mergeIcebergHadoopConfs(Configuration baseConf, Map<String, String> options) {\n-    options.keySet().stream()\n-        .filter(key -> key.startsWith(\"hadoop.\"))\n-        .forEach(key -> baseConf.set(key.replaceFirst(\"hadoop.\", \"\"), options.get(key)));\n+  @Override\n+  public String extractCatalog(CaseInsensitiveStringMap options) {\n+    String catalogName = tableIdentifier(options).first();\n+    return (catalogName == null) ? SupportsCatalogOptions.super.extractCatalog(options) : catalogName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxOTY2MQ=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg4MDc1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxMzo1N1rOH85qkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjoyMzoxNVrOH9YdvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTM5NQ==", "bodyText": "This shouldn't fill in the default namespace. If the identifier was two parts, like prod.items, then it is not correct to modify that to be prod.default.items.\nI think that this should use the same logic as the else.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533621395", "createdAt": "2020-12-01T18:13:57Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));\n+      } catch (ParseException ignored) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    if (ident.size() == 1) {\n+      return Pair.of(null, TableIdentifier.of(defaultNamespace, ident.get(0)));\n+    } else if (ident.size() == 2) {\n+      if (catalogManager.isCatalogRegistered(ident.get(0))) {\n+        return Pair.of(ident.get(0), TableIdentifier.of(defaultNamespace, ident.get(1))); //todo what if path?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyNjAxMw==", "bodyText": "ok, makes sense. That also clarifies the todo i left there. Fixed to not add a default namespace. Does the same logic apply for the case above. If I pass items it will get re-written to default_catalog.default.items, should it only be default_catalog.items?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534126013", "createdAt": "2020-12-02T12:23:15Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));\n+      } catch (ParseException ignored) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    if (ident.size() == 1) {\n+      return Pair.of(null, TableIdentifier.of(defaultNamespace, ident.get(0)));\n+    } else if (ident.size() == 2) {\n+      if (catalogManager.isCatalogRegistered(ident.get(0))) {\n+        return Pair.of(ident.get(0), TableIdentifier.of(defaultNamespace, ident.get(1))); //todo what if path?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTM5NQ=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Nzg4MTUwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxNDowOVrOH85rEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjoyMzoyOVrOH9YeSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTUyMA==", "bodyText": "Nit: could you separate the control flow statements with a newline?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r533621520", "createdAt": "2020-12-01T18:14:09Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));\n+      } catch (ParseException ignored) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    if (ident.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyNjE1Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r534126152", "createdAt": "2020-12-02T12:23:29Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +61,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      try {\n+        ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(String.format(\"`%s`\", path)));\n+      } catch (ParseException ignored) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    if (ident.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMTUyMA=="}, "originalCommit": {"oid": "ac33ea3fd109d0b808f3c7f90cc38dc704b6923c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTYzMzM5OnYy", "diffSide": "LEFT", "path": "spark3/src/test/java/org/apache/iceberg/spark/source/TestIcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxODoyODowN1rOH-rGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo0NTozNFrOH_RihQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTk0Mg==", "bodyText": "nit: should not change license", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r535479942", "createdAt": "2020-12-03T18:28:07Z", "author": {"login": "jackye1995"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/TestIcebergSource.java", "diffHunk": "@@ -1,27 +1,23 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "033a36adbdb4ab57f50d70e5dfb369541ffd1c67"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwOTcwMQ==", "bodyText": "fixed, dunno how that happened...", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r536109701", "createdAt": "2020-12-04T13:45:34Z", "author": {"login": "rymurr"}, "path": "spark3/src/test/java/org/apache/iceberg/spark/source/TestIcebergSource.java", "diffHunk": "@@ -1,27 +1,23 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3OTk0Mg=="}, "originalCommit": {"oid": "033a36adbdb4ab57f50d70e5dfb369541ffd1c67"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTc4NTcyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTowNDo1NlrOH-skSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzo0NjoyMlrOH_RkeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMzk0Nw==", "bodyText": "Because we are now assigning an empty namespace for size==2 case,  I think it can be merged together with the else case. We only get ident.subList(1, ident.size()).toArray(new String[0]) simplified to ident.get(1), but the rest are all duplicates.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r535503947", "createdAt": "2020-12-03T19:04:56Z", "author": {"login": "jackye1995"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +62,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    String currentCatalogName = catalogManager.currentCatalog().name();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      ident = new ArrayList<>();\n+      ident.add(path);\n+    }\n \n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    if (ident.size() == 1) {\n+      return Pair.of(currentCatalogName, TableIdentifier.of(defaultNamespace, ident.get(0)));\n+    } else if (ident.size() == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "033a36adbdb4ab57f50d70e5dfb369541ffd1c67"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMDIwMQ==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r536110201", "createdAt": "2020-12-04T13:46:22Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +62,62 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Pair<String, TableIdentifier> tableIdentifier(CaseInsensitiveStringMap options) {\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    String currentCatalogName = catalogManager.currentCatalog().name();\n+    Namespace defaultNamespace = Namespace.of(catalogManager.currentNamespace());\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n+    List<String> ident;\n+    try {\n+      ident = scala.collection.JavaConverters.seqAsJavaList(SparkSession.active().sessionState().sqlParser().parseMultipartIdentifier(path));\n+    } catch (ParseException e) {\n+      ident = new ArrayList<>();\n+      ident.add(path);\n+    }\n \n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    if (ident.size() == 1) {\n+      return Pair.of(currentCatalogName, TableIdentifier.of(defaultNamespace, ident.get(0)));\n+    } else if (ident.size() == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMzk0Nw=="}, "originalCommit": {"oid": "033a36adbdb4ab57f50d70e5dfb369541ffd1c67"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzI5ODc2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoxMDo1OVrOICfz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo1ODowMFrOICh-3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4OTI3MA==", "bodyText": "What does \"using settings from 'catalog'\" mean in practice? Hadoop tables are loaded using a generic HadoopTables, so the catalog doesn't really affect it at all, I think. In that case, this is promising something that it doesn't need to and I'd prefer to avoid making claims about behavior like that.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539489270", "createdAt": "2020-12-09T17:10:59Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -19,22 +19,49 @@\n \n package org.apache.iceberg.spark.source;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> loads a HadoopTable at given path using settings from 'catalog'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNDgzMQ==", "bodyText": "Yes you are correct. I was thinking of a catalog having different hadoop Configuration but I don't think that makes any sense. Fixed now.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539524831", "createdAt": "2020-12-09T17:58:00Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -19,22 +19,49 @@\n \n package org.apache.iceberg.spark.source;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> loads a HadoopTable at given path using settings from 'catalog'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ4OTI3MA=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzMwNDc0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoxMjoxMVrOICf3kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo1ODowNFrOICh_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MDE5NQ==", "bodyText": "In these examples, I think it is easier to understand if you separate the cases and use catalog and namespace, rather than \"if xxx is a catalog . . . otherwise . . .\".", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539490195", "createdAt": "2020-12-09T17:12:11Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -19,22 +19,49 @@\n \n package org.apache.iceberg.spark.source;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> loads a HadoopTable at given path using settings from 'catalog'\n+ *  table = \"catalog.namespace.`file:/path/to/table`\" -> fails. Namespace doesn't exist for paths\n+ *  table = \"tablename\" -> loads currentCatalog.currentNamespace.tablename\n+ *  table = \"xxx.tablename\" -> if xxx is a catalog load \"tablename\" from the specified catalog. Otherwise\n+ *          load \"xxx.tablename\" from current catalog\n+ *  table = \"xxx.yyy.tablename\" -> if xxx is a catalog load \"yyy.tablename\" from the specified catalog. Otherwise\n+ *          load \"xxx.yyy.tablename\" from current catalog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNDg4OA==", "bodyText": "agreed, fixed.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539524888", "createdAt": "2020-12-09T17:58:04Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -19,22 +19,49 @@\n \n package org.apache.iceberg.spark.source;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkCatalog;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.catalyst.parser.ParseException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> loads a HadoopTable at given path using settings from 'catalog'\n+ *  table = \"catalog.namespace.`file:/path/to/table`\" -> fails. Namespace doesn't exist for paths\n+ *  table = \"tablename\" -> loads currentCatalog.currentNamespace.tablename\n+ *  table = \"xxx.tablename\" -> if xxx is a catalog load \"tablename\" from the specified catalog. Otherwise\n+ *          load \"xxx.tablename\" from current catalog\n+ *  table = \"xxx.yyy.tablename\" -> if xxx is a catalog load \"yyy.tablename\" from the specified catalog. Otherwise\n+ *          load \"xxx.yyy.tablename\" from current catalog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MDE5NQ=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzMxOTgzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoxNToxM1rOICgAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowMjoxMVrOICiKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MjQzMw==", "bodyText": "When implementing SupportsCatalogOptions, I don't think this will ever be called. Should we remove it and throw UnsupportedOperationException instead?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539492433", "createdAt": "2020-12-09T17:15:13Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNzc4MQ==", "bodyText": "inferPartitioning method uses it :-( Can we return Transform[0] and have Spark do the work?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539527781", "createdAt": "2020-12-09T18:02:11Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5MjQzMw=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzMzNzQzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoxODo0OVrOICgK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNzo0NlrOICjNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTE2Mw==", "bodyText": "Is this try/catch to avoid the / check? I think that's a pretty reasonable check. I'm not sure that this is a good idea because the cases you listed above would pass this.\nFor example, this uses a valid identifier, but is clearly a path reference:\nspark.format(\"iceberg\").load(\"catalog.`file:/path/to/table`\");\nAs I mentioned above, I don't think that we should support the mixed path and catalog identifiers, but I still think it is probably a more predictable check to just look for /.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539495163", "createdAt": "2020-12-09T17:18:49Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTExMQ==", "bodyText": "the try component takes care of catalog.table, catalog.namespace.table and catalog.`file://path/to/table`  but doens't take care of file://path/to/table which throws a parse exception. The catch part deals w/ file://path/to/table.\nI suppose we can check\n\nif there is a ` character and a / and reject (don't mix catalogs and paths)\nIf just / then treat as path\nassume its tables and parse it", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539531111", "createdAt": "2020-12-09T18:07:12Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTE2Mw=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNzgyMw==", "bodyText": "Yeah, I think that the problem is that catalog.`file://path/to/table`  is ambiguous and should not be supported. But parsing it successfully means that it would be translated to a path-based table with a catalog.\nI don't think a more complicated check is needed, to see if the / is probably escaped. If there is a /, then it's a path. That's a really simple rule to follow.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539537823", "createdAt": "2020-12-09T18:17:30Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTE2Mw=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0NDkwMw==", "bodyText": "After thnking more I have thrown out catalog.`file:/path/to/table` and simplified the method", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539544903", "createdAt": "2020-12-09T18:27:46Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTE2Mw=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzM0MTc3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoxOTozM1rOICgNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNzoyMFrOICiXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTgwNw==", "bodyText": "Nit: Using ImmutableList makes this more concise: Spark3Util.catalogAndIdentifier(spark, ImmutableList.of(path))", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539495807", "createdAt": "2020-12-09T17:19:33Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      List<String> ident = new ArrayList<>();\n+      ident.add(path);\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, ident);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMTE4OQ==", "bodyText": "fixed", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539531189", "createdAt": "2020-12-09T18:07:20Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      List<String> ident = new ArrayList<>();\n+      ident.add(path);\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, ident);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NTgwNw=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzM2MjYzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzoyMzo1N1rOICgZ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyODowNVrOICjOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5ODk4Mg==", "bodyText": "I think it would be simpler just to start this method with a check for the path:\nif (path.contains(\"/\")) {\n  Identifier ident = new PathIdentifer(path);\n  // do catalog resolution\n  return catalog, ident;\n}\n\nIt's easier to document and understand if the rules are simple.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539498982", "createdAt": "2020-12-09T17:23:57Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      List<String> ident = new ArrayList<>();\n+      ident.add(path);\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, ident);\n+    }\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n+    String[] currentNamespace = catalogManager.currentNamespace();\n+    // we have to check for paths but want to re-use the exiting utils to extract catalog/identifier\n+    if (checkPathIdentifier(catalogAndIdentifier.identifier(), currentNamespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0NTE0OQ==", "bodyText": "agreed, cleaned up", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539545149", "createdAt": "2020-12-09T18:28:05Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +83,85 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n     String path = options.get(\"path\");\n-\n-    if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+    SparkSession spark = SparkSession.active();\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      List<String> ident = new ArrayList<>();\n+      ident.add(path);\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, ident);\n+    }\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n+    String[] currentNamespace = catalogManager.currentNamespace();\n+    // we have to check for paths but want to re-use the exiting utils to extract catalog/identifier\n+    if (checkPathIdentifier(catalogAndIdentifier.identifier(), currentNamespace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5ODk4Mg=="}, "originalCommit": {"oid": "512c268d7c84470e314be4f2b6d3352da62ec6c4"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTA0MDgxOnYy", "diffSide": "RIGHT", "path": "site/docs/spark.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyMDowNFrOICvlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozNDoyM1rOIDHGpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0NzY3OQ==", "bodyText": "I think these lines can be removed from the docs. I don't think we need to document cases that would be parsed as strange table identifiers that were never supported.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539747679", "createdAt": "2020-12-10T00:20:04Z", "author": {"login": "rdblue"}, "path": "site/docs/spark.md", "diffHunk": "@@ -325,6 +325,21 @@ spark.read\n \n Time travel is not yet supported by Spark's SQL syntax.\n \n+### Table names and paths\n+\n+Paths and table names can be loaded from the Spark3 dataframe interface. How paths/tables are loaded depends on how\n+the identifier is specified. When using `spark.read().format(\"iceberg\").path(table)` or `spark.table(table)` the `table`\n+variable can take a number of forms as listed below:\n+\n+*  `file:/path/to/table` -> loads a HadoopTable at given path\n+*  ```catalog.`file:/path/to/table` ``` -> fails. Don't set a catalog for paths\n+*  ```catalog.namespace.`file:/path/to/table` ``` -> fails. Namespace doesn't exist for paths", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMzAzMA==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540133030", "createdAt": "2020-12-10T12:34:23Z", "author": {"login": "rymurr"}, "path": "site/docs/spark.md", "diffHunk": "@@ -325,6 +325,21 @@ spark.read\n \n Time travel is not yet supported by Spark's SQL syntax.\n \n+### Table names and paths\n+\n+Paths and table names can be loaded from the Spark3 dataframe interface. How paths/tables are loaded depends on how\n+the identifier is specified. When using `spark.read().format(\"iceberg\").path(table)` or `spark.table(table)` the `table`\n+variable can take a number of forms as listed below:\n+\n+*  `file:/path/to/table` -> loads a HadoopTable at given path\n+*  ```catalog.`file:/path/to/table` ``` -> fails. Don't set a catalog for paths\n+*  ```catalog.namespace.`file:/path/to/table` ``` -> fails. Namespace doesn't exist for paths", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0NzY3OQ=="}, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTA0MzI2OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyMDo1MFrOICvmsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozNDoyNVrOIDHGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODAxOA==", "bodyText": "Same here, no need for the catalog/path lines.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539748018", "createdAt": "2020-12-10T00:20:50Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -20,21 +20,45 @@\n package org.apache.iceberg.spark.source;\n \n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> fails. Don't set a catalog for paths\n+ *  table = \"catalog.namespace.`file:/path/to/table`\" -> fails. Namespace doesn't exist for paths", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMzA2Mw==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540133063", "createdAt": "2020-12-10T12:34:25Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -20,21 +20,45 @@\n package org.apache.iceberg.spark.source;\n \n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> fails. Don't set a catalog for paths\n+ *  table = \"catalog.namespace.`file:/path/to/table`\" -> fails. Namespace doesn't exist for paths", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODAxOA=="}, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTA0MzY1OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyMTowMlrOICvm9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozNDoyOVrOIDHG5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODA4Ng==", "bodyText": "Nit: starts with \"otherwise\" still.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539748086", "createdAt": "2020-12-10T00:21:02Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -20,21 +20,45 @@\n package org.apache.iceberg.spark.source;\n \n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> fails. Don't set a catalog for paths\n+ *  table = \"catalog.namespace.`file:/path/to/table`\" -> fails. Namespace doesn't exist for paths\n+ *  table = \"tablename\" -> loads currentCatalog.currentNamespace.tablename\n+ *  table = \"catalog.tablename\" -> load \"tablename\" from the specified catalog.\n+ *  table = \"namespace.tablename\" -> Otherwise load \"namespace.tablename\" from current catalog", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMzA5Mg==", "bodyText": "done", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540133092", "createdAt": "2020-12-10T12:34:29Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -20,21 +20,45 @@\n package org.apache.iceberg.spark.source;\n \n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.base.Splitter;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path\n+ *  table = \"catalog.`file:/path/to/table`\" -> fails. Don't set a catalog for paths\n+ *  table = \"catalog.namespace.`file:/path/to/table`\" -> fails. Namespace doesn't exist for paths\n+ *  table = \"tablename\" -> loads currentCatalog.currentNamespace.tablename\n+ *  table = \"catalog.tablename\" -> load \"tablename\" from the specified catalog.\n+ *  table = \"namespace.tablename\" -> Otherwise load \"namespace.tablename\" from current catalog", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODA4Ng=="}, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTA0NDU0OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyMToyM1rOICvndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozNDozM1rOIDHHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODIxMg==", "bodyText": "Nit: looks like newlines between control flow are missing in a lot of these changes.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539748212", "createdAt": "2020-12-10T00:21:23Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +80,70 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMzEyMg==", "bodyText": "done.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540133122", "createdAt": "2020-12-10T12:34:33Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +80,70 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0ODIxMg=="}, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTA1MTgzOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyMzo0N1rOICvrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozNDozOVrOIDHHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0OTIxMw==", "bodyText": "This is doing a lot of extra work by not calling CatalogAndIdentifier directly. There are two maps created, two identical catalog/table resolutions, and then this needs to get the active session and look up the catalog that was already loaded. Is it possible to refactor so that the \"extract\" functions use a common method that can be used here?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539749213", "createdAt": "2020-12-10T00:23:47Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +80,70 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMzE4Nw==", "bodyText": "yup, this wasn't refactored when I removed some code from the extract methods. Now that they don't do anything I have cleaned up the getTable method.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540133187", "createdAt": "2020-12-10T12:34:39Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +80,70 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0OTIxMw=="}, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTA1NDU4OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDoyNDozOVrOICvs0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozNDo1MFrOIDHHxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0OTU4NA==", "bodyText": "I think this should parse the identifier using Spark rather than DOT.splitToList. It should be spark.sessionState().sqlParser().parseMultipartIdentifier(path).", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r539749584", "createdAt": "2020-12-10T00:24:39Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +80,70 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    setupDefaultSparkCatalog();\n     String path = options.get(\"path\");\n+    SparkSession spark = SparkSession.active();\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n+    }\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark,\n+        DOT.splitToList(path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMzMxNg==", "bodyText": "done. I have thrown an IllegalArgumentException in place of the Spark ParseException. This will eventually be caught and turned back into an AnalysisException.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540133316", "createdAt": "2020-12-10T12:34:50Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +80,70 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    String catalogName = extractCatalog(new CaseInsensitiveStringMap(options));\n+    Identifier ident = extractIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogManager catalogManager = SparkSession.active().sessionState().catalogManager();\n+    CatalogPlugin catalog = catalogManager.catalog(catalogName);\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    setupDefaultSparkCatalog();\n     String path = options.get(\"path\");\n+    SparkSession spark = SparkSession.active();\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n+    }\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark,\n+        DOT.splitToList(path));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc0OTU4NA=="}, "originalCommit": {"oid": "e89c1ba706b123ba1de1a5a19fd6ea92eb90bc37"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc3NzEwOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyNzowMlrOIDjnzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDowMzozN1rOIDxsog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMDI3MA==", "bodyText": "Sorry for not catching this before, but I think this should be passed in. This should avoid extra calls to SparkSession.active().", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540600270", "createdAt": "2020-12-11T00:27:02Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +77,77 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    setupDefaultSparkCatalog();\n     String path = options.get(\"path\");\n+    SparkSession spark = SparkSession.active();\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    Table table = findTable(options, conf);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot parse path %s. It is not a valid SQL table\", path), e);\n+    }\n \n-    // Set confs from table properties\n-    mergeIcebergHadoopConfs(conf, table.properties());\n+    if (catalogAndIdentifier.catalog().name().equals(\"spark_catalog\") &&\n+        !(catalogAndIdentifier.catalog() instanceof SparkSessionCatalog)) {\n+      // catalog is a session catalog but does not support Iceberg. Use Iceberg instead.\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          catalogAndIdentifier.identifier());\n+    } else {\n+      return catalogAndIdentifier;\n+    }\n+  }\n \n-    // Re-overwrite values set in options and table properties but were not in the environment.\n-    mergeIcebergHadoopConfs(conf, options);\n+  @Override\n+  public Identifier extractIdentifier(CaseInsensitiveStringMap options) {\n+    return catalogAndIdentifier(options).identifier();\n+  }\n \n-    return table;\n+  @Override\n+  public String extractCatalog(CaseInsensitiveStringMap options) {\n+    return catalogAndIdentifier(options).catalog().name();\n   }\n \n-  private static void mergeIcebergHadoopConfs(Configuration baseConf, Map<String, String> options) {\n-    options.keySet().stream()\n-        .filter(key -> key.startsWith(\"hadoop.\"))\n-        .forEach(key -> baseConf.set(key.replaceFirst(\"hadoop.\", \"\"), options.get(key)));\n+  private static void setupDefaultSparkCatalog() {\n+    SparkSession spark = SparkSession.active();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed51bd68b10fe2fcced2b231f28499b69f7cbf5"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMDg4Mg==", "bodyText": "I should have too. Fixed :-)", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540830882", "createdAt": "2020-12-11T10:03:37Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +77,77 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    setupDefaultSparkCatalog();\n     String path = options.get(\"path\");\n+    SparkSession spark = SparkSession.active();\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    Table table = findTable(options, conf);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot parse path %s. It is not a valid SQL table\", path), e);\n+    }\n \n-    // Set confs from table properties\n-    mergeIcebergHadoopConfs(conf, table.properties());\n+    if (catalogAndIdentifier.catalog().name().equals(\"spark_catalog\") &&\n+        !(catalogAndIdentifier.catalog() instanceof SparkSessionCatalog)) {\n+      // catalog is a session catalog but does not support Iceberg. Use Iceberg instead.\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          catalogAndIdentifier.identifier());\n+    } else {\n+      return catalogAndIdentifier;\n+    }\n+  }\n \n-    // Re-overwrite values set in options and table properties but were not in the environment.\n-    mergeIcebergHadoopConfs(conf, options);\n+  @Override\n+  public Identifier extractIdentifier(CaseInsensitiveStringMap options) {\n+    return catalogAndIdentifier(options).identifier();\n+  }\n \n-    return table;\n+  @Override\n+  public String extractCatalog(CaseInsensitiveStringMap options) {\n+    return catalogAndIdentifier(options).catalog().name();\n   }\n \n-  private static void mergeIcebergHadoopConfs(Configuration baseConf, Map<String, String> options) {\n-    options.keySet().stream()\n-        .filter(key -> key.startsWith(\"hadoop.\"))\n-        .forEach(key -> baseConf.set(key.replaceFirst(\"hadoop.\", \"\"), options.get(key)));\n+  private static void setupDefaultSparkCatalog() {\n+    SparkSession spark = SparkSession.active();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMDI3MA=="}, "originalCommit": {"oid": "3ed51bd68b10fe2fcced2b231f28499b69f7cbf5"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc5MTQyOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDozMjoyMFrOIDjvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDowNzo1OFrOIDx3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMjIwMw==", "bodyText": "There's no need to catch ParseException any more. A new version of catalogAndIdentifer was added with context to form the error message. This could be:\nSpark3Util.CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(\"identifier\", spark, path);", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540602203", "createdAt": "2020-12-11T00:32:20Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +77,77 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    setupDefaultSparkCatalog();\n     String path = options.get(\"path\");\n+    SparkSession spark = SparkSession.active();\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    Table table = findTable(options, conf);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot parse path %s. It is not a valid SQL table\", path), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed51bd68b10fe2fcced2b231f28499b69f7cbf5"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzMzU4NA==", "bodyText": "nice, thanks to @RussellSpitzer! I added another method there to extract the default catalog w/o passing it in.", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r540833584", "createdAt": "2020-12-11T10:07:58Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +77,77 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    setupDefaultSparkCatalog();\n     String path = options.get(\"path\");\n+    SparkSession spark = SparkSession.active();\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n-\n-    Table table = findTable(options, conf);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n+    try {\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, path);\n+    } catch (ParseException e) {\n+      throw new IllegalArgumentException(String.format(\"Cannot parse path %s. It is not a valid SQL table\", path), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwMjIwMw=="}, "originalCommit": {"oid": "3ed51bd68b10fe2fcced2b231f28499b69f7cbf5"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODM2NDk3OnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0MDozMVrOIEDF_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo0OToyMlrOIEDbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExNTkwMw==", "bodyText": "The \"Cannot parse\" part is filled in automatically, so you just need to pass the name of the arg. Probably \"path or identifier\".", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r541115903", "createdAt": "2020-12-11T17:40:31Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +76,72 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    SparkSession spark = SparkSession.active();\n+    setupDefaultSparkCatalog(spark);\n     String path = options.get(\"path\");\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(\n+        \"Cannot parse path %s. It is not a valid SQL table\", spark, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed421acd7e54a6a88ebc429fc8b3d068c5e1a196"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExODI5OQ==", "bodyText": "\ud83e\udd26 fixed", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r541118299", "createdAt": "2020-12-11T17:44:30Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +76,72 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    SparkSession spark = SparkSession.active();\n+    setupDefaultSparkCatalog(spark);\n     String path = options.get(\"path\");\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(\n+        \"Cannot parse path %s. It is not a valid SQL table\", spark, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExNTkwMw=="}, "originalCommit": {"oid": "ed421acd7e54a6a88ebc429fc8b3d068c5e1a196"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMTI5Nw==", "bodyText": "That was fast!", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r541121297", "createdAt": "2020-12-11T17:49:22Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -56,48 +76,72 @@ public boolean supportsExternalMetadata() {\n   }\n \n   @Override\n-  public SparkTable getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n-    // Get Iceberg table from options\n-    Configuration conf = SparkSession.active().sessionState().newHadoopConf();\n-    Table icebergTable = getTableAndResolveHadoopConfiguration(options, conf);\n-\n-    // Build Spark table based on Iceberg table, and return it\n-    // Eagerly refresh the table before reading to ensure views containing this table show up-to-date data\n-    return new SparkTable(icebergTable, schema, true);\n+  public Table getTable(StructType schema, Transform[] partitioning, Map<String, String> options) {\n+    Spark3Util.CatalogAndIdentifier catalogIdentifier = catalogAndIdentifier(new CaseInsensitiveStringMap(options));\n+    CatalogPlugin catalog = catalogIdentifier.catalog();\n+    Identifier ident = catalogIdentifier.identifier();\n+\n+    try {\n+      if (catalog instanceof TableCatalog) {\n+        return ((TableCatalog) catalog).loadTable(ident);\n+      }\n+    } catch (NoSuchTableException e) {\n+      // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+      throw new org.apache.iceberg.exceptions.NoSuchTableException(e, \"Cannot find table for %s.\", ident);\n+    }\n+\n+    // throwing an iceberg NoSuchTableException because the Spark one is typed and cant be thrown from this interface\n+    throw new org.apache.iceberg.exceptions.NoSuchTableException(\"Cannot find table for %s.\", ident);\n   }\n \n-  protected Table findTable(Map<String, String> options, Configuration conf) {\n+  private Spark3Util.CatalogAndIdentifier catalogAndIdentifier(CaseInsensitiveStringMap options) {\n     Preconditions.checkArgument(options.containsKey(\"path\"), \"Cannot open table: path is not set\");\n+    SparkSession spark = SparkSession.active();\n+    setupDefaultSparkCatalog(spark);\n     String path = options.get(\"path\");\n+    CatalogManager catalogManager = spark.sessionState().catalogManager();\n \n     if (path.contains(\"/\")) {\n-      HadoopTables tables = new HadoopTables(conf);\n-      return tables.load(path);\n-    } else {\n-      HiveCatalog hiveCatalog = HiveCatalogs.loadCatalog(conf);\n-      TableIdentifier tableIdentifier = TableIdentifier.parse(path);\n-      return hiveCatalog.loadTable(tableIdentifier);\n+      // contains a path. Return iceberg default catalog and a PathIdentifier\n+      return new Spark3Util.CatalogAndIdentifier(catalogManager.catalog(DEFAULT_CATALOG_NAME),\n+          new PathIdentifier(path));\n     }\n-  }\n \n-  private Table getTableAndResolveHadoopConfiguration(Map<String, String> options, Configuration conf) {\n-    // Overwrite configurations from the Spark Context with configurations from the options.\n-    mergeIcebergHadoopConfs(conf, options);\n+    final Spark3Util.CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(\n+        \"Cannot parse path %s. It is not a valid SQL table\", spark, path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExNTkwMw=="}, "originalCommit": {"oid": "ed421acd7e54a6a88ebc429fc8b3d068c5e1a196"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTQ3NTAxOnYy", "diffSide": "RIGHT", "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowNzo1OVrOIEN4Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDozMToxN1rOIFTORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MjYzMQ==", "bodyText": "Maybe important to note that these are used with this priority as well, ie\nif \"catalog.namespace.table\" is valid it will be read and \"namespace.namespace.table\" will be ignored ?", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r541292631", "createdAt": "2020-12-11T21:07:59Z", "author": {"login": "RussellSpitzer"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -20,21 +20,41 @@\n package org.apache.iceberg.spark.source;\n \n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aada53d5b15833d49fe452021215b7e35ec0e3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyODc0Mg==", "bodyText": "very good point @RussellSpitzer, I have included a note to that effect", "url": "https://github.com/apache/iceberg/pull/1783#discussion_r542428742", "createdAt": "2020-12-14T14:31:17Z", "author": {"login": "rymurr"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/source/IcebergSource.java", "diffHunk": "@@ -20,21 +20,41 @@\n package org.apache.iceberg.spark.source;\n \n import java.util.Map;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.iceberg.Table;\n-import org.apache.iceberg.catalog.TableIdentifier;\n-import org.apache.iceberg.hadoop.HadoopTables;\n-import org.apache.iceberg.hive.HiveCatalog;\n-import org.apache.iceberg.hive.HiveCatalogs;\n import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableMap;\n+import org.apache.iceberg.spark.PathIdentifier;\n+import org.apache.iceberg.spark.Spark3Util;\n+import org.apache.iceberg.spark.SparkSessionCatalog;\n import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.connector.catalog.TableProvider;\n+import org.apache.spark.sql.catalyst.analysis.NoSuchTableException;\n+import org.apache.spark.sql.connector.catalog.CatalogManager;\n+import org.apache.spark.sql.connector.catalog.CatalogPlugin;\n+import org.apache.spark.sql.connector.catalog.Identifier;\n+import org.apache.spark.sql.connector.catalog.SupportsCatalogOptions;\n+import org.apache.spark.sql.connector.catalog.Table;\n+import org.apache.spark.sql.connector.catalog.TableCatalog;\n import org.apache.spark.sql.connector.expressions.Transform;\n import org.apache.spark.sql.sources.DataSourceRegister;\n import org.apache.spark.sql.types.StructType;\n import org.apache.spark.sql.util.CaseInsensitiveStringMap;\n \n-public class IcebergSource implements DataSourceRegister, TableProvider {\n+/**\n+ * The IcebergSource loads/writes tables with format \"iceberg\". It can load paths and tables.\n+ *\n+ * How paths/tables are loaded when using spark.read().format(\"iceberg\").path(table)\n+ *\n+ *  table = \"file:/path/to/table\" -> loads a HadoopTable at given path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI5MjYzMQ=="}, "originalCommit": {"oid": "d8aada53d5b15833d49fe452021215b7e35ec0e3"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3472, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}