{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NTk4OTg2", "number": 1890, "title": "Change Procedures to use Identifiers instead of Namespace/Table Params", "bodyText": "Previous procedures would take namespace and table seperately. In order to\nfacilitate future developments in table identifiers like path based identifiers,\nwe have switched to using single string parameters for identifying the table.", "createdAt": "2020-12-08T17:14:13Z", "url": "https://github.com/apache/iceberg/pull/1890", "merged": true, "mergeCommit": {"oid": "e39584ed89356cacf006610bffd475a3ad3a1ac4"}, "closed": true, "closedAt": "2020-12-09T15:37:56Z", "author": {"login": "RussellSpitzer"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkNYHegH2gAyNTM0NTk4OTg2OjJkN2FiOTI5ZmZjM2Y3ODg3YTM3MjZhYTc5YmMzNzY2ZjEyODUyZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkf_hegFqTU0ODI2NTU4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/2d7ab929ffc3f7887a3726aa79bc3766f12852f3", "committedDate": "2020-12-08T17:13:37Z", "message": "Change Procedures to use Identifiers instead of Namespace/Table Params\n\nPrevious procedures would take namespace and table seperately. In order to\nfacilitate future developments in table identifiers like path based identifiers,\nwe have switched to using single string parameters for identifying the table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDUyNDYx", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547452461", "createdAt": "2020-12-08T17:16:21Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNjoyMlrOIBq2RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNjoyMlrOIBq2RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMTUwOA==", "bodyText": "Last time we talked, we thought about defaulting the catalog to the procedure catalog, not the default catalog.\nI thought we would simply take the first parsed name part and check if spark.sql.catalog._name_part_ is set. If yes, it means our identifier contains a catalog and we don't have to prepend the procedure catalog to name parts and should resolve the catalog and validate the resolved catalog matches tableCatalog. If there is no such catalog, we can just call tableCatalog.load with the constructed identifier.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538621508", "createdAt": "2020-12-08T17:16:22Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -75,25 +71,15 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n   }\n \n   // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  protected Identifier toIdentifier(String identifier) {\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n     try {\n-      ParserInterface parser = spark.sessionState().sqlParser();\n-      Seq<String> namePartsSeq = parser.parseMultipartIdentifier(identifierAsString);\n-      String[] nameParts = new String[namePartsSeq.size()];\n-      namePartsSeq.copyToArray(nameParts);\n-      return nameParts;\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifier, tableCatalog);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDUyODk5", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547452899", "createdAt": "2020-12-08T17:16:54Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNjo1NFrOIBq4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNjo1NFrOIBq4gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMjA4Mw==", "bodyText": "We should validate the resolved catalog is tableCatalog to make sure we don't modify tables in other catalogs.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538622083", "createdAt": "2020-12-08T17:16:54Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -75,25 +71,15 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n   }\n \n   // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  protected Identifier toIdentifier(String identifier) {\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;\n     try {\n-      ParserInterface parser = spark.sessionState().sqlParser();\n-      Seq<String> namePartsSeq = parser.parseMultipartIdentifier(identifierAsString);\n-      String[] nameParts = new String[namePartsSeq.size()];\n-      namePartsSeq.copyToArray(nameParts);\n-      return nameParts;\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifier, tableCatalog);\n     } catch (ParseException e) {\n-      throw new RuntimeException(\"Couldn't parse identifier: \" + identifierAsString, e);\n+      throw new IllegalArgumentException(\"Cannot parse identifier\", e);\n     }\n+\n+    return catalogAndIdentifier.identifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDU1OTk2", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547455996", "createdAt": "2020-12-08T17:20:22Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMDoyM1rOIBrHBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMDoyM1rOIBrHBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyNTc5OA==", "bodyText": "I think we better call our variables tableIdent rather than tableName now. I think we can keep the parameter name as table.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538625798", "createdAt": "2020-12-08T17:20:23Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/ExpireSnapshotsProcedure.java", "diffHunk": "@@ -77,12 +76,11 @@ public StructType outputType() {\n \n   @Override\n   public InternalRow[] call(InternalRow args) {\n-    String namespace = args.getString(0);\n-    String tableName = args.getString(1);\n-    Long olderThanMillis = args.isNullAt(2) ? null : DateTimeUtils.toMillis(args.getLong(2));\n-    Integer retainLastNum = args.isNullAt(3) ? null : args.getInt(3);\n+    String tableName = args.getString(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDU4MDQz", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547458043", "createdAt": "2020-12-08T17:22:44Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMjo0NFrOIBrQ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMjo0NFrOIBrQ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyODMxNA==", "bodyText": "nit: shall we call it identifierAsString to be consistent?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538628314", "createdAt": "2020-12-08T17:22:44Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -48,20 +46,18 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     this.tableCatalog = tableCatalog;\n   }\n \n-  protected <T> T modifyIcebergTable(String namespace, String tableName, Function<org.apache.iceberg.Table, T> func) {\n-    return execute(namespace, tableName, true, func);\n+  protected <T> T modifyIcebergTable(String identifier, Function<org.apache.iceberg.Table, T> func) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDU4NzMz", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547458733", "createdAt": "2020-12-08T17:23:34Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMzozNFrOIBrUPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMzozNFrOIBrUPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyOTE4MQ==", "bodyText": "Shall we do an import so that we can refer to CatalogAndIdentifier directly?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538629181", "createdAt": "2020-12-08T17:23:34Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -75,25 +71,15 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n   }\n \n   // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  protected Identifier toIdentifier(String identifier) {\n+    Spark3Util.CatalogAndIdentifier catalogAndIdentifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDU5MDU2", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547459056", "createdAt": "2020-12-08T17:23:58Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMzo1OVrOIBrVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyMzo1OVrOIBrVsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyOTU1NQ==", "bodyText": "nit: identifier -> identifierAsString?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538629555", "createdAt": "2020-12-08T17:23:59Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -75,25 +71,15 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n   }\n \n   // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  protected Identifier toIdentifier(String identifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDU5NzE2", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547459716", "createdAt": "2020-12-08T17:24:42Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyNDo0MlrOIBrYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyNDo0MlrOIBrYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMDMyNQ==", "bodyText": "nit: formatting is off", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538630325", "createdAt": "2020-12-08T17:24:42Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "diffHunk": "@@ -605,31 +605,41 @@ private static String sqlString(org.apache.iceberg.expressions.Literal<?> lit) {\n   }\n \n   public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name) throws ParseException {\n+    return catalogAndIdentifier(spark, name, spark.sessionState().catalogManager().currentCatalog());\n+  }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name,\n+                                                            CatalogPlugin fallBackCatalog) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDYwNDQ5", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547460449", "createdAt": "2020-12-08T17:25:30Z", "commit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyNTozMFrOIBrcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoyNTozMFrOIBrcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTIzNA==", "bodyText": "Shall we call it defaultCatalog?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538631234", "createdAt": "2020-12-08T17:25:30Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "diffHunk": "@@ -605,31 +605,41 @@ private static String sqlString(org.apache.iceberg.expressions.Literal<?> lit) {\n   }\n \n   public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name) throws ParseException {\n+    return catalogAndIdentifier(spark, name, spark.sessionState().catalogManager().currentCatalog());\n+  }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name,\n+                                                            CatalogPlugin fallBackCatalog) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7ab929ffc3f7887a3726aa79bc3766f12852f3"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54302cd3be45ae68906a21213c7d64b6145c4940", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/54302cd3be45ae68906a21213c7d64b6145c4940", "committedDate": "2020-12-08T17:26:23Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/8d650b1fb2599ee913a88e1a5d99008b13589a71", "committedDate": "2020-12-08T19:11:52Z", "message": "Reviewer Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTc5ODMx", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547579831", "createdAt": "2020-12-08T19:55:00Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1NTowMFrOIBzedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1NTowMFrOIBzedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Mjg2OQ==", "bodyText": "Should this have a test for empty table name?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538762869", "createdAt": "2020-12-08T19:55:00Z", "author": {"login": "rdblue"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCherrypickSnapshotProcedure.java", "diffHunk": "@@ -171,18 +167,10 @@ public void testInvalidCherrypickSnapshotCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.cherrypick_snapshot('n', 't')\", catalogName));\n+        () -> sql(\"CALL %s.system.cherrypick_snapshot('t')\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n         AnalysisException.class, \"Wrong arg type for snapshot_id: cannot cast\",\n-        () -> sql(\"CALL %s.system.cherrypick_snapshot('n', 't', 2.2)\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.cherrypick_snapshot('', 't', 1L)\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject empty table name\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTgxMjM0", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547581234", "createdAt": "2020-12-08T19:56:50Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1Njo1MFrOIBzjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo1Njo1MFrOIBzjGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NDA1OQ==", "bodyText": "Nit: whitespace change?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538764059", "createdAt": "2020-12-08T19:56:50Z", "author": {"login": "rdblue"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java", "diffHunk": "@@ -184,8 +184,8 @@ public void testRollbackToTimestampWithQuotedIdentifiers() {\n     String quotedNamespace = quotedNamespaceBuilder.toString();\n \n     List<Object[]> output = sql(\n-        \"CALL %s.system.rollback_to_timestamp('%s', '`%s`', TIMESTAMP '%s')\",\n-        catalogName, quotedNamespace, tableIdent.name(), firstSnapshotTimestamp);\n+        \"CALL %s.system.rollback_to_timestamp('%s', TIMESTAMP '%s')\",\n+            catalogName, quotedNamespace + \".`\" + tableIdent.name() + \"`\", firstSnapshotTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTg0MzUw", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547584350", "createdAt": "2020-12-08T20:01:09Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMTowOVrOIBztrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMTowOVrOIBztrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Njc2NA==", "bodyText": "This namespace is associated with a catalog. I don't think this should use the catalog passed in with this namespace unless that catalog is the current catalog. I would do the following:\n\nIf the fallback catalog is the current catalog, use the current namespace\nIf the fallback catalog is not the current catalog, use its default namespace (catalog.defaultNamespace())\n\nThe catalog's default namespace is used when you switch to that catalog. The default namespace becomes the current namespace. Using the default fits with the idea that the fallback catalog is the current catalog for the context of the stored procedure.\nIt this is difficult to implement, then we can always go back to using the current catalog rather than the procedure catalog.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538766764", "createdAt": "2020-12-08T20:01:09Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "diffHunk": "@@ -605,31 +605,41 @@ private static String sqlString(org.apache.iceberg.expressions.Literal<?> lit) {\n   }\n \n   public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name) throws ParseException {\n+    return catalogAndIdentifier(spark, name, spark.sessionState().catalogManager().currentCatalog());\n+  }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name,\n+                                                          CatalogPlugin defaultCatalog) throws ParseException {\n     ParserInterface parser = spark.sessionState().sqlParser();\n     Seq<String> multiPartIdentifier = parser.parseMultipartIdentifier(name);\n     List<String> javaMultiPartIdentifier = JavaConverters.seqAsJavaList(multiPartIdentifier);\n-    return catalogAndIdentifier(spark, javaMultiPartIdentifier);\n+    return catalogAndIdentifier(spark, javaMultiPartIdentifier, defaultCatalog);\n+  }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, List<String> nameParts) {\n+    return catalogAndIdentifier(spark, nameParts, spark.sessionState().catalogManager().currentCatalog());\n   }\n \n   /**\n    * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n    * Attempts to find the catalog and identifier a multipart identifier represents\n    * @param spark Spark session to use for resolution\n    * @param nameParts Multipart identifier representing a table\n+   * @param fallBackCatalog Catalog to use if none is specified\n    * @return The CatalogPlugin and Identifier for the table\n    */\n-  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, List<String> nameParts) {\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, List<String> nameParts,\n+                                                          CatalogPlugin fallBackCatalog) {\n     Preconditions.checkArgument(!nameParts.isEmpty(),\n         \"Cannot determine catalog and Identifier from empty name parts\");\n     CatalogManager catalogManager = spark.sessionState().catalogManager();\n-    CatalogPlugin currentCatalog = catalogManager.currentCatalog();\n     String[] currentNamespace = catalogManager.currentNamespace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTg1Njg4", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547585688", "createdAt": "2020-12-08T20:03:05Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMzowNVrOIBzyag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMzowNVrOIBzyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Nzk3OA==", "bodyText": "It would be nice to follow this recommendation from the other review: https://github.com/apache/iceberg/pull/1525/files#r538758721\nThe description could be the argument name.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538767978", "createdAt": "2020-12-08T20:03:05Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -74,26 +71,20 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     return result;\n   }\n \n-  // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  private Identifier toIdentifier(String identifierAsString) {\n+    CatalogAndIdentifier catalogAndIdentifier;\n     try {\n-      ParserInterface parser = spark.sessionState().sqlParser();\n-      Seq<String> namePartsSeq = parser.parseMultipartIdentifier(identifierAsString);\n-      String[] nameParts = new String[namePartsSeq.size()];\n-      namePartsSeq.copyToArray(nameParts);\n-      return nameParts;\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifierAsString, tableCatalog);\n     } catch (ParseException e) {\n-      throw new RuntimeException(\"Couldn't parse identifier: \" + identifierAsString, e);\n+      throw new IllegalArgumentException(\"Cannot parse identifier\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTg1ODY2", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547585866", "createdAt": "2020-12-08T20:03:19Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMzoxOVrOIBzzBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMzoxOVrOIBzzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2ODEzMg==", "bodyText": "Nit: missing newline between control flow.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538768132", "createdAt": "2020-12-08T20:03:19Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -74,26 +71,20 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     return result;\n   }\n \n-  // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  private Identifier toIdentifier(String identifierAsString) {\n+    CatalogAndIdentifier catalogAndIdentifier;\n     try {\n-      ParserInterface parser = spark.sessionState().sqlParser();\n-      Seq<String> namePartsSeq = parser.parseMultipartIdentifier(identifierAsString);\n-      String[] nameParts = new String[namePartsSeq.size()];\n-      namePartsSeq.copyToArray(nameParts);\n-      return nameParts;\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifierAsString, tableCatalog);\n     } catch (ParseException e) {\n-      throw new RuntimeException(\"Couldn't parse identifier: \" + identifierAsString, e);\n+      throw new IllegalArgumentException(\"Cannot parse identifier\", e);\n+    }\n+    if (!catalogAndIdentifier.catalog().equals(tableCatalog)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTg2MDM3", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547586037", "createdAt": "2020-12-08T20:03:34Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMzozNFrOIBzzdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDowMzozNFrOIBzzdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2ODI0NA==", "bodyText": "Use a precondition?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538768244", "createdAt": "2020-12-08T20:03:34Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -74,26 +71,20 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     return result;\n   }\n \n-  // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n-\n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+  private Identifier toIdentifier(String identifierAsString) {\n+    CatalogAndIdentifier catalogAndIdentifier;\n     try {\n-      ParserInterface parser = spark.sessionState().sqlParser();\n-      Seq<String> namePartsSeq = parser.parseMultipartIdentifier(identifierAsString);\n-      String[] nameParts = new String[namePartsSeq.size()];\n-      namePartsSeq.copyToArray(nameParts);\n-      return nameParts;\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifierAsString, tableCatalog);\n     } catch (ParseException e) {\n-      throw new RuntimeException(\"Couldn't parse identifier: \" + identifierAsString, e);\n+      throw new IllegalArgumentException(\"Cannot parse identifier\", e);\n+    }\n+    if (!catalogAndIdentifier.catalog().equals(tableCatalog)) {\n+      throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NjA3OTg3", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547607987", "createdAt": "2020-12-08T20:35:29Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNToyOVrOIB0-XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozNToyOVrOIB0-XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4NzQyMQ==", "bodyText": "nit: I think we call it fallBackCatalog here and defaultCatalog above", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538787421", "createdAt": "2020-12-08T20:35:29Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/Spark3Util.java", "diffHunk": "@@ -605,31 +605,41 @@ private static String sqlString(org.apache.iceberg.expressions.Literal<?> lit) {\n   }\n \n   public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name) throws ParseException {\n+    return catalogAndIdentifier(spark, name, spark.sessionState().catalogManager().currentCatalog());\n+  }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, String name,\n+                                                          CatalogPlugin defaultCatalog) throws ParseException {\n     ParserInterface parser = spark.sessionState().sqlParser();\n     Seq<String> multiPartIdentifier = parser.parseMultipartIdentifier(name);\n     List<String> javaMultiPartIdentifier = JavaConverters.seqAsJavaList(multiPartIdentifier);\n-    return catalogAndIdentifier(spark, javaMultiPartIdentifier);\n+    return catalogAndIdentifier(spark, javaMultiPartIdentifier, defaultCatalog);\n+  }\n+\n+  public static CatalogAndIdentifier catalogAndIdentifier(SparkSession spark, List<String> nameParts) {\n+    return catalogAndIdentifier(spark, nameParts, spark.sessionState().catalogManager().currentCatalog());\n   }\n \n   /**\n    * A modified version of Spark's LookupCatalog.CatalogAndIdentifier.unapply\n    * Attempts to find the catalog and identifier a multipart identifier represents\n    * @param spark Spark session to use for resolution\n    * @param nameParts Multipart identifier representing a table\n+   * @param fallBackCatalog Catalog to use if none is specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NjEwMTk5", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547610199", "createdAt": "2020-12-08T20:38:53Z", "commit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozODo1NFrOIB1Fug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDozODo1NFrOIB1Fug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4OTMwNg==", "bodyText": "Should we keep one precondition for identifierAsString?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538789306", "createdAt": "2020-12-08T20:38:54Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -48,20 +47,18 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     this.tableCatalog = tableCatalog;\n   }\n \n-  protected <T> T modifyIcebergTable(String namespace, String tableName, Function<org.apache.iceberg.Table, T> func) {\n-    return execute(namespace, tableName, true, func);\n+  protected <T> T modifyIcebergTable(String identifierAsString, Function<org.apache.iceberg.Table, T> func) {\n+    return execute(identifierAsString, true, func);\n   }\n \n-  protected <T> T withIcebergTable(String namespace, String tableName, Function<org.apache.iceberg.Table, T> func) {\n-    return execute(namespace, tableName, false, func);\n+  protected <T> T withIcebergTable(String identifierAsString, Function<org.apache.iceberg.Table, T> func) {\n+    return execute(identifierAsString, false, func);\n   }\n \n-  private <T> T execute(String namespace, String tableName, boolean refreshSparkCache,\n+  private <T> T execute(String identifierAsString, boolean refreshSparkCache,\n                         Function<org.apache.iceberg.Table, T> func) {\n-    Preconditions.checkArgument(namespace != null && !namespace.isEmpty(), \"Namespace cannot be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d650b1fb2599ee913a88e1a5d99008b13589a71"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308aa914b87ae563205cb5c085cc129290e6621a", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/308aa914b87ae563205cb5c085cc129290e6621a", "committedDate": "2020-12-08T21:29:15Z", "message": "Reviewer Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/094987f1c263aa1bdeaca422260a2f9fc41cea7b", "committedDate": "2020-12-08T23:13:50Z", "message": "Add test and Check for Same Catalog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzIzNDI1", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547723425", "createdAt": "2020-12-08T23:35:59Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozNTo1OVrOIB7TBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozNTo1OVrOIB7TBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MTAxNQ==", "bodyText": "This is really wordy. I'd probably simplify it to \"Cannot run procedure %s in catalog %s: %s is a table in catalog %s\".", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r538891015", "createdAt": "2020-12-08T23:35:59Z", "author": {"login": "rdblue"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -79,10 +79,14 @@ protected Identifier toIdentifier(String identifierAsString, String argName) {\n     try {\n       catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifierAsString, tableCatalog);\n     } catch (ParseException e) {\n-      throw new IllegalArgumentException(String.format(\"Cannot parse identifier [%s] for argument %s\",\n+      throw new IllegalArgumentException(String.format(\"Cannot parse identifier '%s' for argument %s\",\n           identifierAsString, argName), e);\n     }\n \n+    Preconditions.checkArgument(catalogAndIdentifier.catalog().equals(tableCatalog), \"Cannot run procedure\" +\n+        \" in catalog '%s': Argument %s was set to '%s' which resolves to a table in a different catalog '%s'\",\n+        tableCatalog.name(), argName, identifierAsString, catalogAndIdentifier.catalog().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NzI1MTg2", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547725186", "createdAt": "2020-12-08T23:40:09Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTExODQz", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547911843", "createdAt": "2020-12-09T07:45:09Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0NTowOVrOICGqPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0NTowOVrOICGqPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3NzE4Mw==", "bodyText": "nit: with?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539077183", "createdAt": "2020-12-09T07:45:09Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestCherrypickSnapshotProcedure.java", "diffHunk": "@@ -171,18 +167,14 @@ public void testInvalidCherrypickSnapshotCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.cherrypick_snapshot('n', 't')\", catalogName));\n+        () -> sql(\"CALL %s.system.cherrypick_snapshot('t')\", catalogName));\n+\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTEyMjE0", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547912214", "createdAt": "2020-12-09T07:45:46Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0NTo0N1rOICGrhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0NTo0N1rOICGrhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3NzUxMQ==", "bodyText": "nit: with?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539077511", "createdAt": "2020-12-09T07:45:47Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -163,18 +163,28 @@ public void testInvalidExpireSnapshotsCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.expire_snapshots('n')\", catalogName));\n+        () -> sql(\"CALL %s.system.expire_snapshots()\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n-        RuntimeException.class, \"Couldn't parse identifier\",\n+        AnalysisException.class, \"Wrong arg type\",\n         () -> sql(\"CALL %s.system.expire_snapshots('n', 2.2)\", catalogName));\n \n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.expire_snapshots('', 't')\", catalogName));\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTEyOTMy", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547912932", "createdAt": "2020-12-09T07:47:02Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0NzowMlrOICGuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0NzowMlrOICGuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3ODE1Mg==", "bodyText": "nit: we can probably use our sql() helper method to get parameterization for free.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539078152", "createdAt": "2020-12-09T07:47:02Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestExpireSnapshotsProcedure.java", "diffHunk": "@@ -163,18 +163,28 @@ public void testInvalidExpireSnapshotsCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.expire_snapshots('n')\", catalogName));\n+        () -> sql(\"CALL %s.system.expire_snapshots()\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n-        RuntimeException.class, \"Couldn't parse identifier\",\n+        AnalysisException.class, \"Wrong arg type\",\n         () -> sql(\"CALL %s.system.expire_snapshots('n', 2.2)\", catalogName));\n \n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.expire_snapshots('', 't')\", catalogName));\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",\n+        IllegalArgumentException.class, \"Cannot handle an empty identifier\",\n+        () -> sql(\"CALL %s.system.expire_snapshots('')\", catalogName));\n+  }\n \n-    AssertHelpers.assertThrows(\"Should reject empty table name\",\n-        IllegalArgumentException.class, \"Table name cannot be empty\",\n-        () -> sql(\"CALL %s.system.expire_snapshots('n', '')\", catalogName));\n+  @Test\n+  public void testResolvingTableInAnotherCatalog() throws IOException {\n+    String anotherCatalog = \"another_\" + catalogName;\n+    spark.conf().set(\"spark.sql.catalog.\" + anotherCatalog, SparkCatalog.class.getName());\n+    spark.conf().set(\"spark.sql.catalog.\" + anotherCatalog + \".type\", \"hadoop\");\n+    spark.conf().set(\"spark.sql.catalog.\" + anotherCatalog + \".warehouse\", \"file:\" + temp.newFolder().toString());\n+    spark.sql(String.format(\"CREATE TABLE %s.%s (id bigint NOT NULL, data string) USING iceberg\", anotherCatalog,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTEzMzI0", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547913324", "createdAt": "2020-12-09T07:47:40Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0Nzo0MFrOICGvgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0Nzo0MFrOICGvgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3ODUyOQ==", "bodyText": "nit: with?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539078529", "createdAt": "2020-12-09T07:47:40Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRemoveOrphanFilesProcedure.java", "diffHunk": "@@ -230,18 +222,14 @@ public void testInvalidRemoveOrphanFilesCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.remove_orphan_files('n')\", catalogName));\n+        () -> sql(\"CALL %s.system.remove_orphan_files()\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n-        RuntimeException.class, \"Couldn't parse identifier\",\n+        AnalysisException.class, \"Wrong arg type\",\n         () -> sql(\"CALL %s.system.remove_orphan_files('n', 2.2)\", catalogName));\n \n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.remove_orphan_files('', 't')\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject empty table name\",\n-        IllegalArgumentException.class, \"Table name cannot be empty\",\n-        () -> sql(\"CALL %s.system.remove_orphan_files('n', '')\", catalogName));\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTEzNDcy", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547913472", "createdAt": "2020-12-09T07:47:54Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0Nzo1NVrOICGv9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0Nzo1NVrOICGv9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3ODY0NQ==", "bodyText": "nit: with?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539078645", "createdAt": "2020-12-09T07:47:55Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRewriteManifestsProcedure.java", "diffHunk": "@@ -162,22 +157,18 @@ public void testInvalidRewriteManifestsCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.rewrite_manifests('n')\", catalogName));\n+        () -> sql(\"CALL %s.system.rewrite_manifests()\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n-        RuntimeException.class, \"Couldn't parse identifier\",\n+        AnalysisException.class, \"Wrong arg type\",\n         () -> sql(\"CALL %s.system.rewrite_manifests('n', 2.2)\", catalogName));\n \n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.rewrite_manifests('', 't')\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject empty table name\",\n-        IllegalArgumentException.class, \"Table name cannot be empty\",\n-        () -> sql(\"CALL %s.system.rewrite_manifests('n', '')\", catalogName));\n-\n     AssertHelpers.assertThrows(\"Should reject duplicate arg names name\",\n         AnalysisException.class, \"Duplicate procedure argument: table\",\n         () -> sql(\"CALL %s.system.rewrite_manifests(table => 't', tAbLe => 't')\", catalogName));\n+\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTEzNjI0", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547913624", "createdAt": "2020-12-09T07:48:12Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0ODoxMlrOICGwgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNzo0ODoxMlrOICGwgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3ODc4NQ==", "bodyText": "nit: with?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539078785", "createdAt": "2020-12-09T07:48:12Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToSnapshotProcedure.java", "diffHunk": "@@ -243,30 +239,22 @@ public void testInvalidRollbackToSnapshotCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot('n', 't')\", catalogName));\n+        () -> sql(\"CALL %s.system.rollback_to_snapshot('t')\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot('n', 1L)\", catalogName));\n+        () -> sql(\"CALL %s.system.rollback_to_snapshot(1L)\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot(namespace => 'n', snapshot_id => 1L)\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n-        AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot(table => 't', snapshot_id => 1L)\", catalogName));\n+        () -> sql(\"CALL %s.system.rollback_to_snapshot(table => 't')\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n         AnalysisException.class, \"Wrong arg type for snapshot_id: cannot cast\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot('n', 't', 2.2)\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot('', 't', 1L)\", catalogName));\n+        () -> sql(\"CALL %s.system.rollback_to_snapshot('t', 2.2)\", catalogName));\n \n-    AssertHelpers.assertThrows(\"Should reject empty table name\",\n-        IllegalArgumentException.class, \"Table name cannot be empty\",\n-        () -> sql(\"CALL %s.system.rollback_to_snapshot('n', '', 1L)\", catalogName));\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTY0MDQ1", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547964045", "createdAt": "2020-12-09T08:57:33Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODo1NzozM1rOICJcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODo1NzozM1rOICJcHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEyMjcxNw==", "bodyText": "nit: can fit on one line now", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539122717", "createdAt": "2020-12-09T08:57:33Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -48,20 +48,17 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     this.tableCatalog = tableCatalog;\n   }\n \n-  protected <T> T modifyIcebergTable(String namespace, String tableName, Function<org.apache.iceberg.Table, T> func) {\n-    return execute(namespace, tableName, true, func);\n+  protected <T> T modifyIcebergTable(Identifier ident, Function<org.apache.iceberg.Table, T> func) {\n+    return execute(ident, true, func);\n   }\n \n-  protected <T> T withIcebergTable(String namespace, String tableName, Function<org.apache.iceberg.Table, T> func) {\n-    return execute(namespace, tableName, false, func);\n+  protected <T> T withIcebergTable(Identifier ident, Function<org.apache.iceberg.Table, T> func) {\n+    return execute(ident, false, func);\n   }\n \n-  private <T> T execute(String namespace, String tableName, boolean refreshSparkCache,\n+  private <T> T execute(Identifier ident, boolean refreshSparkCache,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTkwNzEx", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-547990711", "createdAt": "2020-12-09T09:29:21Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOToyOToyMVrOICK2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOToyOToyMVrOICK2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE0NTg4Nw==", "bodyText": "I like Ryan's suggestion in another PR to add a variant of catalogAndIdentifier that does not throw a checked parse exception. Explicit handling of parse exceptions makes other places more complicated.\nIf we follow that idea and add this method to Spark3Util:\n\n  public static CatalogAndIdentifier catalogAndIdentifier(String description, SparkSession spark,\n                                                          String name, CatalogPlugin defaultCatalog) {\n    try {\n      return catalogAndIdentifier(spark, name, defaultCatalog);\n    } catch (ParseException e) {\n      throw new IllegalArgumentException(\"Cannot parse \" + description + \": \" + name, e);\n    }\n  }\n\nThis place can look like this:\n  protected Identifier toIdentifier(String identifierAsString, String argName) {\n    Preconditions.checkArgument(identifierAsString != null && !identifierAsString.isEmpty(),\n        \"Cannot handle an empty identifier for argument %s\", argName);\n\n    CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(\n        \"identifier for arg \" + argName, spark, identifierAsString, tableCatalog);\n\n    CatalogPlugin catalog = catalogAndIdentifier.catalog();\n    Identifier identifier = catalogAndIdentifier.identifier();\n\n    Preconditions.checkArgument(\n        catalog.equals(tableCatalog),\n        \"Cannot run procedure in catalog %s: %s is a table in catalog %s\",\n        tableCatalog.name(), identifierAsString, catalog);\n\n    return identifier;\n  }", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539145887", "createdAt": "2020-12-09T09:29:21Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -74,26 +71,23 @@ protected BaseProcedure(TableCatalog tableCatalog) {\n     return result;\n   }\n \n-  // we have to parse both namespace and name as they may be quoted\n-  protected Identifier toIdentifier(String namespaceAsString, String name) {\n-    String[] namespaceParts = parseMultipartIdentifier(namespaceAsString);\n+  protected Identifier toIdentifier(String identifierAsString, String argName) {\n+    Preconditions.checkArgument(identifierAsString != null && !identifierAsString.isEmpty(),\n+        \"Cannot handle an empty identifier for argument %s\", argName);\n \n-    String[] nameParts = parseMultipartIdentifier(name);\n-    Preconditions.checkArgument(nameParts.length == 1, \"Name must consist of one part: %s\", name);\n-\n-    return Identifier.of(namespaceParts, nameParts[0]);\n-  }\n-\n-  private String[] parseMultipartIdentifier(String identifierAsString) {\n+    CatalogAndIdentifier catalogAndIdentifier;\n     try {\n-      ParserInterface parser = spark.sessionState().sqlParser();\n-      Seq<String> namePartsSeq = parser.parseMultipartIdentifier(identifierAsString);\n-      String[] nameParts = new String[namePartsSeq.size()];\n-      namePartsSeq.copyToArray(nameParts);\n-      return nameParts;\n+      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifierAsString, tableCatalog);\n     } catch (ParseException e) {\n-      throw new RuntimeException(\"Couldn't parse identifier: \" + identifierAsString, e);\n+      throw new IllegalArgumentException(String.format(\"Cannot parse identifier '%s' for argument %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDAzNTQw", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-548003540", "createdAt": "2020-12-09T09:43:57Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0Mzo1N1rOICLhKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0Mzo1N1rOICLhKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1Njc3Nw==", "bodyText": "extra space", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539156777", "createdAt": "2020-12-09T09:43:57Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestRollbackToTimestampProcedure.java", "diffHunk": "@@ -184,8 +184,8 @@ public void testRollbackToTimestampWithQuotedIdentifiers() {\n     String quotedNamespace = quotedNamespaceBuilder.toString();\n \n     List<Object[]> output = sql(\n-        \"CALL %s.system.rollback_to_timestamp('%s', '`%s`', TIMESTAMP '%s')\",\n-        catalogName, quotedNamespace, tableIdent.name(), firstSnapshotTimestamp);\n+        \"CALL %s.system.rollback_to_timestamp('%s', TIMESTAMP '%s')\",\n+         catalogName, quotedNamespace + \".`\" + tableIdent.name() + \"`\", firstSnapshotTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDA0MTk1", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-548004195", "createdAt": "2020-12-09T09:44:40Z", "commit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0NDo0MVrOICLjUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTo0NDo0MVrOICLjUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1NzMyOQ==", "bodyText": "nit: with?", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539157329", "createdAt": "2020-12-09T09:44:41Z", "author": {"login": "aokolnychyi"}, "path": "spark3-extensions/src/test/java/org/apache/iceberg/spark/extensions/TestSetCurrentSnapshotProcedure.java", "diffHunk": "@@ -196,30 +196,26 @@ public void testInvalidRollbackToSnapshotCases() {\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot('n', 't')\", catalogName));\n+        () -> sql(\"CALL %s.system.set_current_snapshot('t')\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot('n', 1L)\", catalogName));\n+        () -> sql(\"CALL %s.system.set_current_snapshot(1L)\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot(namespace => 'n', snapshot_id => 1L)\", catalogName));\n+        () -> sql(\"CALL %s.system.set_current_snapshot(snapshot_id => 1L)\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls without all required args\",\n         AnalysisException.class, \"Missing required parameters\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot(table => 't', snapshot_id => 1L)\", catalogName));\n+        () -> sql(\"CALL %s.system.set_current_snapshot(table => 't')\", catalogName));\n \n     AssertHelpers.assertThrows(\"Should reject calls with invalid arg types\",\n         AnalysisException.class, \"Wrong arg type for snapshot_id: cannot cast\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot('n', 't', 2.2)\", catalogName));\n+        () -> sql(\"CALL %s.system.set_current_snapshot('t', 2.2)\", catalogName));\n \n-    AssertHelpers.assertThrows(\"Should reject empty namespace\",\n-        IllegalArgumentException.class, \"Namespace cannot be empty\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot('', 't', 1L)\", catalogName));\n-\n-    AssertHelpers.assertThrows(\"Should reject empty table name\",\n-        IllegalArgumentException.class, \"Table name cannot be empty\",\n-        () -> sql(\"CALL %s.system.set_current_snapshot('n', '', 1L)\", catalogName));\n+    AssertHelpers.assertThrows(\"Should reject calls without empty table identifier\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094987f1c263aa1bdeaca422260a2f9fc41cea7b"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e44eaa4880fb045a1f185528aa930da12679127e", "author": {"user": {"login": "aokolnychyi", "name": "Anton Okolnychyi"}}, "url": "https://github.com/apache/iceberg/commit/e44eaa4880fb045a1f185528aa930da12679127e", "committedDate": "2020-12-09T09:51:43Z", "message": "Minor review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2343e9569a98cb7ea019ce5a7d23249f78920f8b", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/2343e9569a98cb7ea019ce5a7d23249f78920f8b", "committedDate": "2020-12-09T13:40:31Z", "message": "Merge pull request #1 from aokolnychyi/minor-changes\n\nMinor review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTk2MjYz", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-548196263", "createdAt": "2020-12-09T13:46:15Z", "commit": {"oid": "2343e9569a98cb7ea019ce5a7d23249f78920f8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo0NjoxNVrOICVXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo0NjoxNVrOICVXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMxODE1Ng==", "bodyText": "I missed to call catalog.name() on the third arg.", "url": "https://github.com/apache/iceberg/pull/1890#discussion_r539318156", "createdAt": "2020-12-09T13:46:15Z", "author": {"login": "aokolnychyi"}, "path": "spark3/src/main/java/org/apache/iceberg/spark/procedures/BaseProcedure.java", "diffHunk": "@@ -75,19 +73,18 @@ protected Identifier toIdentifier(String identifierAsString, String argName) {\n     Preconditions.checkArgument(identifierAsString != null && !identifierAsString.isEmpty(),\n         \"Cannot handle an empty identifier for argument %s\", argName);\n \n-    CatalogAndIdentifier catalogAndIdentifier;\n-    try {\n-      catalogAndIdentifier = Spark3Util.catalogAndIdentifier(spark, identifierAsString, tableCatalog);\n-    } catch (ParseException e) {\n-      throw new IllegalArgumentException(String.format(\"Cannot parse identifier '%s' for argument %s\",\n-          identifierAsString, argName), e);\n-    }\n+    CatalogAndIdentifier catalogAndIdentifier = Spark3Util.catalogAndIdentifier(\n+        \"identifier for arg \" + argName, spark, identifierAsString, tableCatalog);\n+\n+    CatalogPlugin catalog = catalogAndIdentifier.catalog();\n+    Identifier identifier = catalogAndIdentifier.identifier();\n \n-    Preconditions.checkArgument(catalogAndIdentifier.catalog().equals(tableCatalog), \"Cannot run procedure\" +\n-        \" in catalog '%s': Argument %s was set to '%s' which resolves to a table in a different catalog '%s'\",\n-        tableCatalog.name(), argName, identifierAsString, catalogAndIdentifier.catalog().name());\n+    Preconditions.checkArgument(\n+        catalog.equals(tableCatalog),\n+        \"Cannot run procedure in catalog %s: %s is a table in catalog %s\",\n+        tableCatalog.name(), identifierAsString, catalog);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2343e9569a98cb7ea019ce5a7d23249f78920f8b"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12bf5371981baadd2de461a7a82d6a83e2ec7a79", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/12bf5371981baadd2de461a7a82d6a83e2ec7a79", "committedDate": "2020-12-09T14:04:51Z", "message": "Missed catalog.name()"}, "afterCommit": {"oid": "3e9ecf828cc1ab329d73cc387b5eb79c6239e58e", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/3e9ecf828cc1ab329d73cc387b5eb79c6239e58e", "committedDate": "2020-12-09T14:07:36Z", "message": "Missed catalog.name and add back quotes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31fd07aa3915f7dfa345cb0f761dc59785e51881", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/31fd07aa3915f7dfa345cb0f761dc59785e51881", "committedDate": "2020-12-09T14:08:32Z", "message": "Missed catalog.name and add back quotes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e9ecf828cc1ab329d73cc387b5eb79c6239e58e", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/3e9ecf828cc1ab329d73cc387b5eb79c6239e58e", "committedDate": "2020-12-09T14:07:36Z", "message": "Missed catalog.name and add back quotes"}, "afterCommit": {"oid": "31fd07aa3915f7dfa345cb0f761dc59785e51881", "author": {"user": {"login": "RussellSpitzer", "name": "Russell Spitzer"}}, "url": "https://github.com/apache/iceberg/commit/31fd07aa3915f7dfa345cb0f761dc59785e51881", "committedDate": "2020-12-09T14:08:32Z", "message": "Missed catalog.name and add back quotes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjY1NTgz", "url": "https://github.com/apache/iceberg/pull/1890#pullrequestreview-548265583", "createdAt": "2020-12-09T14:54:58Z", "commit": {"oid": "31fd07aa3915f7dfa345cb0f761dc59785e51881"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3545, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}