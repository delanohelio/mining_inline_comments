{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NDA2MTEx", "number": 1909, "title": "Add ExceptionUtil.runSafely", "bodyText": "This adds a utility method that accepts blocks as lambdas and correctly handles exceptions. Catch and finally blocks are always run and any exceptions thrown in those blocks are added to the main block's exception as suppressed exceptions. If the main block does not throw an exception, but finally does then the finally exception is thrown.\nThis currently supports up to 3 checked exception classes.", "createdAt": "2020-12-11T02:04:02Z", "url": "https://github.com/apache/iceberg/pull/1909", "merged": true, "mergeCommit": {"oid": "e532f116f3b0a7dfacdde89ee947144a820d5d9e"}, "closed": true, "closedAt": "2020-12-17T20:26:22Z", "author": {"login": "rdblue"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdk-KyEAH2gAyNTM2NDA2MTExOjU3MzdiOTc0MDE1YzdhYTk4ODJhYWRiYjBhOGU0ZTU1MmUxNTYwNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnIUaUgH2gAyNTM2NDA2MTExOmZlNmZkNGFlMTQ4YTg4MDM4NWY3NzUxZWY3ZWU2ZTk1YzZjN2I2YTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5737b974015c7aa9882aadbb0a8e4e552e156064", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/5737b974015c7aa9882aadbb0a8e4e552e156064", "committedDate": "2020-12-11T02:04:24Z", "message": "Add ExceptionUtil.runSafely."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cf325f6dd98726c6a214cb0ae5c29851414fde0", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/5cf325f6dd98726c6a214cb0ae5c29851414fde0", "committedDate": "2020-12-11T02:01:15Z", "message": "Add ExceptionUtil.runSafely."}, "afterCommit": {"oid": "5737b974015c7aa9882aadbb0a8e4e552e156064", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/5737b974015c7aa9882aadbb0a8e4e552e156064", "committedDate": "2020-12-11T02:04:24Z", "message": "Add ExceptionUtil.runSafely."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d6a5f657eeb098dd39b6d97a22f90f40b9b4f9", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/76d6a5f657eeb098dd39b6d97a22f90f40b9b4f9", "committedDate": "2020-12-11T02:08:31Z", "message": "Catch Exception rather than Throwable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/972b24600c9ee6dbbba4acf5330b1800110caeb9", "committedDate": "2020-12-11T17:26:04Z", "message": "Fix checkstyle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjM5OTE1", "url": "https://github.com/apache/iceberg/pull/1909#pullrequestreview-554239915", "createdAt": "2020-12-17T02:42:56Z", "commit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjo0Mjo1NlrOIHiGUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjo0Mjo1NlrOIHiGUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2OTYxOQ==", "bodyText": "Other than the copy-paste error in this assert failure message and L62, change LGTM!", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r544769619", "createdAt": "2020-12-17T02:42:56Z", "author": {"login": "yyanyy"}, "path": "core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestExceptionUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestExceptionUtil.class);\n+\n+  private static class CustomCheckedException extends Exception {\n+    private CustomCheckedException(String message) {\n+      super(message);\n+    }\n+  }\n+\n+  @Test\n+  public void testRunSafely() {\n+    CustomCheckedException exc = new CustomCheckedException(\"test\");\n+    try {\n+      ExceptionUtil.runSafely(() -> {\n+            throw exc;\n+          }, e -> {\n+            throw new Exception(\"test catch suppression\");\n+          }, () -> {\n+            throw new RuntimeException(\"test finally suppression\");\n+          }, CustomCheckedException.class\n+      );\n+\n+      Assert.fail(\"Should have thrown CustomCheckedException\");\n+\n+    } catch (CustomCheckedException e) {\n+      LOG.info(\"Final exception\", e);\n+      Assert.assertEquals(\"Should throw correct exception instance\", exc, e);\n+      Assert.assertEquals(\"Should not alter exception message\", \"test\", e.getMessage());\n+      Assert.assertEquals(\"Should have 2 suppressed exceptions\", 2, e.getSuppressed().length);\n+\n+      Throwable throwSuppressed = e.getSuppressed()[0];\n+      Assert.assertTrue(\"Should be a CustomCheckedException\", throwSuppressed instanceof Exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjQ1ODEx", "url": "https://github.com/apache/iceberg/pull/1909#pullrequestreview-554645811", "createdAt": "2020-12-17T14:19:13Z", "commit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoxOToxM1rOIH3w2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoxOToxM1rOIH3w2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyNDU3MQ==", "bodyText": "How do we get here? Is this just for safety? From what I can tell we only allow the block to have called exceptions for e1 -> e3, and all that's left should be RuntimeExceptions right?", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545124571", "createdAt": "2020-12-17T14:19:13Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/util/ExceptionUtil.java", "diffHunk": "@@ -36,4 +40,96 @@ private ExceptionUtil() {\n     }\n     throw new RuntimeException(exception);\n   }\n+\n+  interface Block<R, E1 extends Exception, E2 extends Exception, E3 extends Exception> {\n+    R run() throws E1, E2, E3;\n+  }\n+\n+  interface CatchBlock {\n+    void run(Throwable failure) throws Exception;\n+  }\n+\n+  interface FinallyBlock {\n+    void run() throws Exception;\n+  }\n+\n+  public static <R> R runSafely(\n+      Block<R, RuntimeException, RuntimeException, RuntimeException> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock) {\n+    return runSafely(block, catchBlock, finallyBlock,\n+        RuntimeException.class, RuntimeException.class, RuntimeException.class);\n+  }\n+\n+  public static <R, E1 extends Exception> R runSafely(\n+      Block<R, E1, RuntimeException, RuntimeException> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock,\n+      Class<? extends E1> e1Class) throws E1 {\n+    return runSafely(block, catchBlock, finallyBlock, e1Class, RuntimeException.class, RuntimeException.class);\n+  }\n+\n+  public static <R, E1 extends Exception, E2 extends Exception> R runSafely(\n+      Block<R, E1, E2, RuntimeException> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock,\n+      Class<? extends E1> e1Class,\n+      Class<? extends E2> e2Class) throws E1, E2 {\n+    return runSafely(block, catchBlock, finallyBlock, e1Class, e2Class, RuntimeException.class);\n+  }\n+\n+  public static <R, E1 extends Exception, E2 extends Exception, E3 extends Exception> R runSafely(\n+      Block<R, E1, E2, E3> block,\n+      CatchBlock catchBlock,\n+      FinallyBlock finallyBlock,\n+      Class<? extends E1> e1Class,\n+      Class<? extends E2> e2Class,\n+      Class<? extends E3> e3Class) throws E1, E2, E3 {\n+    Exception failure = null;\n+    try {\n+      return block.run();\n+\n+    } catch (Exception t) {\n+      failure = t;\n+\n+      if (catchBlock != null) {\n+        try {\n+          catchBlock.run(failure);\n+        } catch (Exception e) {\n+          LOG.warn(\"Suppressing failure in catch block\", e);\n+          failure.addSuppressed(e);\n+        }\n+      }\n+\n+      tryThrowAs(failure, e1Class);\n+      tryThrowAs(failure, e2Class);\n+      tryThrowAs(failure, e3Class);\n+      tryThrowAs(failure, RuntimeException.class);\n+      throw new RuntimeException(\"Unknown throwable\", failure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjU0ODc5", "url": "https://github.com/apache/iceberg/pull/1909#pullrequestreview-554654879", "createdAt": "2020-12-17T14:28:47Z", "commit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoyODo0OFrOIH4NYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoyODo0OFrOIH4NYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzMTg3NA==", "bodyText": "I may be a bit paranoid, but I'd like to have a test which uses three exception types. Also a case for just testing runtime exceptions in each block.\nOther than that I think this is a good utility! Thanks for working on it", "url": "https://github.com/apache/iceberg/pull/1909#discussion_r545131874", "createdAt": "2020-12-17T14:28:48Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/util/TestExceptionUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestExceptionUtil {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestExceptionUtil.class);\n+\n+  private static class CustomCheckedException extends Exception {\n+    private CustomCheckedException(String message) {\n+      super(message);\n+    }\n+  }\n+\n+  @Test\n+  public void testRunSafely() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzA0NDQw", "url": "https://github.com/apache/iceberg/pull/1909#pullrequestreview-554704440", "createdAt": "2020-12-17T15:18:58Z", "commit": {"oid": "972b24600c9ee6dbbba4acf5330b1800110caeb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2696cdfb32e9ae36dbbb341bc196eabfeeccf07f", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/2696cdfb32e9ae36dbbb341bc196eabfeeccf07f", "committedDate": "2020-12-17T18:28:46Z", "message": "Add more test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6fd4ae148a880385f7751ef7ee6e95c6c7b6a9", "author": {"user": {"login": "rdblue", "name": "Ryan Blue"}}, "url": "https://github.com/apache/iceberg/commit/fe6fd4ae148a880385f7751ef7ee6e95c6c7b6a9", "committedDate": "2020-12-17T19:01:49Z", "message": "Fix lambdas for Java 11."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3592, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}