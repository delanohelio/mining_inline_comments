{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzUzNTQy", "number": 936, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxNzo0M1rODz1epw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToyNjoxN1rOD0ZfoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjgwMTY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxNzo0M1rOGIfJ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTozOTozOFrOGJVRsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1MjIyMQ==", "bodyText": "This needed to change because it isn't possible to write entries to a manifest that inherits a sequence number but not snapshot ID, unless the snapshot ID matches the commit.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r411552221", "createdAt": "2020-04-20T17:17:43Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -24,22 +24,36 @@\n import org.apache.iceberg.ManifestEntry.Status;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+@RunWith(Parameterized.class)\n public class TestManifestWriter extends TableTestBase {\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { 1 },\n+        new Object[] { 2 },\n+    };\n+  }\n+\n+  public TestManifestWriter(int formatVersion) {\n+    super(formatVersion);\n+  }\n \n   @Test\n   public void testManifestStats() throws IOException {\n     ManifestFile manifest = writeManifest(\n         \"manifest.avro\",\n-        manifestEntry(Status.ADDED, 100L, newFile(10)),\n-        manifestEntry(Status.ADDED, 100L, newFile(20)),\n-        manifestEntry(Status.ADDED, 100L, newFile(5)),\n-        manifestEntry(Status.ADDED, 100L, newFile(5)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(15)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(10)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(1)),\n-        manifestEntry(Status.DELETED, 100L, newFile(5)),\n-        manifestEntry(Status.DELETED, 100L, newFile(2)));\n+        manifestEntry(Status.ADDED, null, newFile(10)),\n+        manifestEntry(Status.ADDED, null, newFile(20)),\n+        manifestEntry(Status.ADDED, null, newFile(5)),\n+        manifestEntry(Status.ADDED, null, newFile(5)),\n+        manifestEntry(Status.EXISTING, null, newFile(15)),\n+        manifestEntry(Status.EXISTING, null, newFile(10)),\n+        manifestEntry(Status.EXISTING, null, newFile(1)),\n+        manifestEntry(Status.DELETED, null, newFile(5)),\n+        manifestEntry(Status.DELETED, null, newFile(2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c08e31589895f1965efbf0bb0c793376a805541"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNTc0Mg==", "bodyText": "Whenever we are rewriting manifests in the rewrite manifests action, we create a manifest with snapshot id = null but each entry is assigned a valid snapshot id. Will that continue to work?", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412415742", "createdAt": "2020-04-21T19:03:08Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -24,22 +24,36 @@\n import org.apache.iceberg.ManifestEntry.Status;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+@RunWith(Parameterized.class)\n public class TestManifestWriter extends TableTestBase {\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { 1 },\n+        new Object[] { 2 },\n+    };\n+  }\n+\n+  public TestManifestWriter(int formatVersion) {\n+    super(formatVersion);\n+  }\n \n   @Test\n   public void testManifestStats() throws IOException {\n     ManifestFile manifest = writeManifest(\n         \"manifest.avro\",\n-        manifestEntry(Status.ADDED, 100L, newFile(10)),\n-        manifestEntry(Status.ADDED, 100L, newFile(20)),\n-        manifestEntry(Status.ADDED, 100L, newFile(5)),\n-        manifestEntry(Status.ADDED, 100L, newFile(5)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(15)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(10)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(1)),\n-        manifestEntry(Status.DELETED, 100L, newFile(5)),\n-        manifestEntry(Status.DELETED, 100L, newFile(2)));\n+        manifestEntry(Status.ADDED, null, newFile(10)),\n+        manifestEntry(Status.ADDED, null, newFile(20)),\n+        manifestEntry(Status.ADDED, null, newFile(5)),\n+        manifestEntry(Status.ADDED, null, newFile(5)),\n+        manifestEntry(Status.EXISTING, null, newFile(15)),\n+        manifestEntry(Status.EXISTING, null, newFile(10)),\n+        manifestEntry(Status.EXISTING, null, newFile(1)),\n+        manifestEntry(Status.DELETED, null, newFile(5)),\n+        manifestEntry(Status.DELETED, null, newFile(2)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1MjIyMQ=="}, "originalCommit": {"oid": "5c08e31589895f1965efbf0bb0c793376a805541"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzODk2Mg==", "bodyText": "Yes. The problem here was that entries had a null snapshot ID, but they shouldn't for rewrites.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412438962", "createdAt": "2020-04-21T19:39:38Z", "author": {"login": "rdblue"}, "path": "core/src/test/java/org/apache/iceberg/TestManifestWriter.java", "diffHunk": "@@ -24,22 +24,36 @@\n import org.apache.iceberg.ManifestEntry.Status;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+@RunWith(Parameterized.class)\n public class TestManifestWriter extends TableTestBase {\n+  @Parameterized.Parameters\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+        new Object[] { 1 },\n+        new Object[] { 2 },\n+    };\n+  }\n+\n+  public TestManifestWriter(int formatVersion) {\n+    super(formatVersion);\n+  }\n \n   @Test\n   public void testManifestStats() throws IOException {\n     ManifestFile manifest = writeManifest(\n         \"manifest.avro\",\n-        manifestEntry(Status.ADDED, 100L, newFile(10)),\n-        manifestEntry(Status.ADDED, 100L, newFile(20)),\n-        manifestEntry(Status.ADDED, 100L, newFile(5)),\n-        manifestEntry(Status.ADDED, 100L, newFile(5)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(15)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(10)),\n-        manifestEntry(Status.EXISTING, 100L, newFile(1)),\n-        manifestEntry(Status.DELETED, 100L, newFile(5)),\n-        manifestEntry(Status.DELETED, 100L, newFile(2)));\n+        manifestEntry(Status.ADDED, null, newFile(10)),\n+        manifestEntry(Status.ADDED, null, newFile(20)),\n+        manifestEntry(Status.ADDED, null, newFile(5)),\n+        manifestEntry(Status.ADDED, null, newFile(5)),\n+        manifestEntry(Status.EXISTING, null, newFile(15)),\n+        manifestEntry(Status.EXISTING, null, newFile(10)),\n+        manifestEntry(Status.EXISTING, null, newFile(1)),\n+        manifestEntry(Status.DELETED, null, newFile(5)),\n+        manifestEntry(Status.DELETED, null, newFile(2)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1MjIyMQ=="}, "originalCommit": {"oid": "5c08e31589895f1965efbf0bb0c793376a805541"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Nzc4MDc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyMTo1NFrOGIoOmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToyMzo1NlrOGJUsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMDg4OQ==", "bodyText": "This is needed to create v2 tables in tests. It isn't public.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r411700889", "createdAt": "2020-04-20T21:21:54Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -52,6 +52,14 @@ public static TableMetadata newTableMetadata(Schema schema,\n                                                PartitionSpec spec,\n                                                String location,\n                                                Map<String, String> properties) {\n+    return newTableMetadata(schema, spec, location, properties, DEFAULT_TABLE_FORMAT_VERSION);\n+  }\n+\n+  static TableMetadata newTableMetadata(Schema schema,\n+                                        PartitionSpec spec,\n+                                        String location,\n+                                        Map<String, String> properties,\n+                                        int formatVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MjM0MQ==", "bodyText": "Is it something we want to annotate with @VisibleForTesting?", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412372341", "createdAt": "2020-04-21T17:58:45Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -52,6 +52,14 @@ public static TableMetadata newTableMetadata(Schema schema,\n                                                PartitionSpec spec,\n                                                String location,\n                                                Map<String, String> properties) {\n+    return newTableMetadata(schema, spec, location, properties, DEFAULT_TABLE_FORMAT_VERSION);\n+  }\n+\n+  static TableMetadata newTableMetadata(Schema schema,\n+                                        PartitionSpec spec,\n+                                        String location,\n+                                        Map<String, String> properties,\n+                                        int formatVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMDg4OQ=="}, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyOTM3OA==", "bodyText": "We don't use that annotation elsewhere and I'm reluctant to start because it increases our dependence on guava. It is also likely that we will open this up later, so I don't think we need to.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412429378", "createdAt": "2020-04-21T19:23:56Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -52,6 +52,14 @@ public static TableMetadata newTableMetadata(Schema schema,\n                                                PartitionSpec spec,\n                                                String location,\n                                                Map<String, String> properties) {\n+    return newTableMetadata(schema, spec, location, properties, DEFAULT_TABLE_FORMAT_VERSION);\n+  }\n+\n+  static TableMetadata newTableMetadata(Schema schema,\n+                                        PartitionSpec spec,\n+                                        String location,\n+                                        Map<String, String> properties,\n+                                        int formatVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMDg4OQ=="}, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Nzc4MzE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyMjo0MlrOGIoQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMToyMjo0MlrOGIoQHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMTI3OQ==", "bodyText": "Copied manifests will use a null snapshot ID.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r411701279", "createdAt": "2020-04-20T21:22:42Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "diffHunk": "@@ -243,11 +243,11 @@ static Schema wrapFileSchema(Types.StructType fileSchema) {\n \n   static class IndexedManifestEntry implements ManifestEntry, IndexedRecord {\n     private final org.apache.avro.Schema avroSchema;\n-    private final long commitSnapshotId;\n+    private final Long commitSnapshotId;\n     private final V1Metadata.IndexedDataFile fileWrapper;\n     private ManifestEntry wrapped = null;\n \n-    IndexedManifestEntry(long commitSnapshotId, Types.StructType partitionType) {\n+    IndexedManifestEntry(Long commitSnapshotId, Types.StructType partitionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjMxMDY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/ManifestFiles.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1Nzo0M1rOGJRKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxMDowMVrOGJRsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MTU3NQ==", "bodyText": "Does this mean manifests will be written with the v2 schema (i.e. with sequence numbers) even though TableMetadata is v1 and the manifest list is written with v1? And this should work because we do a projection on read and sequence number is optional?", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412371575", "createdAt": "2020-04-21T17:57:43Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/ManifestFiles.java", "diffHunk": "@@ -73,8 +73,8 @@ public static ManifestReader read(ManifestFile manifest, FileIO io, Map<Integer,\n    * @return a manifest writer\n    */\n   public static ManifestWriter write(PartitionSpec spec, OutputFile outputFile) {\n-    // always use a v1 writer for appended manifests because sequence number must be inherited\n-    return write(1, spec, outputFile, null);\n+    // always use a v2 writer to preserve sequence numbers, but use null for sequence number so appends inherit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MDI2NA==", "bodyText": "This is the constructor used to create an append or rewritten manifest, so this makes the manifests that are passed into FastAppend, MergeAppend, and RewriteManifests support sequence numbers. It is needed for the last case: when rewriting a manifest for a v2 table, we need to preserve sequence numbers.\nThis works for v1 because v1 tables will ignore the new fields.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412380264", "createdAt": "2020-04-21T18:10:01Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/ManifestFiles.java", "diffHunk": "@@ -73,8 +73,8 @@ public static ManifestReader read(ManifestFile manifest, FileIO io, Map<Integer,\n    * @return a manifest writer\n    */\n   public static ManifestWriter write(PartitionSpec spec, OutputFile outputFile) {\n-    // always use a v1 writer for appended manifests because sequence number must be inherited\n-    return write(1, spec, outputFile, null);\n+    // always use a v2 writer to preserve sequence numbers, but use null for sequence number so appends inherit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MTU3NQ=="}, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjcwMjQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOToyNjoxN1rOGJUx2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTozNDo1MlrOGJVGXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMDgwOA==", "bodyText": "I think we have to update the condition in get as commitSnapshotId is now Long and we cannot use ==.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412430808", "createdAt": "2020-04-21T19:26:17Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "diffHunk": "@@ -243,11 +243,11 @@ static Schema wrapFileSchema(Types.StructType fileSchema) {\n \n   static class IndexedManifestEntry implements ManifestEntry, IndexedRecord {\n     private final org.apache.avro.Schema avroSchema;\n-    private final long commitSnapshotId;\n+    private final Long commitSnapshotId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNDIwMQ==", "bodyText": "Isn't this okay because it will unbox the values first? Using equals would duplicate the null checks, I thought.", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412434201", "createdAt": "2020-04-21T19:31:35Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "diffHunk": "@@ -243,11 +243,11 @@ static Schema wrapFileSchema(Types.StructType fileSchema) {\n \n   static class IndexedManifestEntry implements ManifestEntry, IndexedRecord {\n     private final org.apache.avro.Schema avroSchema;\n-    private final long commitSnapshotId;\n+    private final Long commitSnapshotId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMDgwOA=="}, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNjA2MQ==", "bodyText": "Fixed", "url": "https://github.com/apache/iceberg/pull/936#discussion_r412436061", "createdAt": "2020-04-21T19:34:52Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/V2Metadata.java", "diffHunk": "@@ -243,11 +243,11 @@ static Schema wrapFileSchema(Types.StructType fileSchema) {\n \n   static class IndexedManifestEntry implements ManifestEntry, IndexedRecord {\n     private final org.apache.avro.Schema avroSchema;\n-    private final long commitSnapshotId;\n+    private final Long commitSnapshotId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMDgwOA=="}, "originalCommit": {"oid": "9d8998073a3f9676eeca9a2fb09d91f695497874"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2933, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}