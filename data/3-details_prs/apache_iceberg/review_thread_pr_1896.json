{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjIyNjEx", "number": 1896, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDozNzo0OVrOFC9TAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDozNzo0OVrOFC9TAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjQ1NzYxOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/sink/TestDeltaTaskWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDozNzo0OVrOICX3aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDozNzo0OVrOICX3aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM1OTA4Mw==", "bodyText": "It will need to add more unit tests,  such as:\n\nUpsert a key whose old values are located in partition1, while new values will be written in partition2.\nwrite the equality file with only equality columns ( the current unit test will write the full columns ).", "url": "https://github.com/apache/iceberg/pull/1896#discussion_r539359083", "createdAt": "2020-12-09T14:37:49Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/sink/TestDeltaTaskWriter.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink.sink;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.iceberg.FileFormat;\n+import org.apache.iceberg.PartitionSpec;\n+import org.apache.iceberg.RowDelta;\n+import org.apache.iceberg.TableTestBase;\n+import org.apache.iceberg.data.IcebergGenerics;\n+import org.apache.iceberg.data.Record;\n+import org.apache.iceberg.flink.FlinkSchemaUtil;\n+import org.apache.iceberg.io.CloseableIterable;\n+import org.apache.iceberg.io.TaskWriter;\n+import org.apache.iceberg.io.WriteResult;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.util.StructLikeSet;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.apache.iceberg.flink.SimpleDataUtil.createDelete;\n+import static org.apache.iceberg.flink.SimpleDataUtil.createInsert;\n+import static org.apache.iceberg.flink.SimpleDataUtil.createRecord;\n+import static org.apache.iceberg.flink.SimpleDataUtil.createUpdateAfter;\n+import static org.apache.iceberg.flink.SimpleDataUtil.createUpdateBefore;\n+\n+@RunWith(Parameterized.class)\n+public class TestDeltaTaskWriter extends TableTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac53adcf456c3ce84bb58649ba29900d2955213d"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3302, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}