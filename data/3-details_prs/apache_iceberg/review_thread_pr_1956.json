{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjgxMDcy", "number": 1956, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoyODowMFrOFHrbPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjo0NDozOVrOFVeiTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk1ODM5OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoyODowMFrOIJNlDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoyMDowM1rOIJ67vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMDU3Mg==", "bodyText": "I checked the flink codebase,  all the RowData's TypeSerializer related classes are not expose to be public, they are marked as Internal.  The only way I can think of is:  Use a compactbility utility to load InternalTypeInfo  or RowDataTypeInfo class if there's exist one.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r546530572", "createdAt": "2020-12-21T06:28:00Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -91,7 +91,7 @@ public static Builder forRow(DataStream<Row> input, TableSchema tableSchema) {\n     DataType[] fieldDataTypes = tableSchema.getFieldDataTypes();\n \n     DataFormatConverters.RowConverter rowConverter = new DataFormatConverters.RowConverter(fieldDataTypes);\n-    return builderFor(input, rowConverter::toInternal, RowDataTypeInfo.of(rowType))\n+    return builderFor(input, rowConverter::toInternal, InternalTypeInfo.of(rowType))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgxMjc2Mg==", "bodyText": "I think this is the shim layer approach that others suggested.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r546812762", "createdAt": "2020-12-21T16:46:14Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -91,7 +91,7 @@ public static Builder forRow(DataStream<Row> input, TableSchema tableSchema) {\n     DataType[] fieldDataTypes = tableSchema.getFieldDataTypes();\n \n     DataFormatConverters.RowConverter rowConverter = new DataFormatConverters.RowConverter(fieldDataTypes);\n-    return builderFor(input, rowConverter::toInternal, RowDataTypeInfo.of(rowType))\n+    return builderFor(input, rowConverter::toInternal, InternalTypeInfo.of(rowType))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMDU3Mg=="}, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MzY2Mg==", "bodyText": "Em, It's true.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r547273662", "createdAt": "2020-12-22T13:20:03Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -91,7 +91,7 @@ public static Builder forRow(DataStream<Row> input, TableSchema tableSchema) {\n     DataType[] fieldDataTypes = tableSchema.getFieldDataTypes();\n \n     DataFormatConverters.RowConverter rowConverter = new DataFormatConverters.RowConverter(fieldDataTypes);\n-    return builderFor(input, rowConverter::toInternal, RowDataTypeInfo.of(rowType))\n+    return builderFor(input, rowConverter::toInternal, InternalTypeInfo.of(rowType))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzMDU3Mg=="}, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4NDMyOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0MTozM1rOIJNzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMDo0NzoyMVrOIdbSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDI5OQ==", "bodyText": "It's strange here, because I saw the TableColumn is marked as PublicEvolving, but after released flink 1.12.0 it did not have any Interface compatibility guarantee.  At least, it should marked as deprecated, and keep it a major release.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r546534299", "createdAt": "2020-12-21T06:41:33Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -83,8 +83,8 @@ public void testGetTable() {\n             Types.NestedField.optional(1, \"strV\", Types.StringType.get())));\n     Assert.assertEquals(\n         Arrays.asList(\n-            TableColumn.of(\"id\", DataTypes.BIGINT()),\n-            TableColumn.of(\"strV\", DataTypes.STRING())),\n+            TableColumn.physical(\"id\", DataTypes.BIGINT()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NjU5MQ==", "bodyText": "@stevenzwu  I think we could change to use the loaded iceberg schema to accomplish the schema validation, so that we don't have to use the flink's TableSchema.\nopeninx@2a63571#diff-4c56ab08c19464dbe3351f71fc39345ee031a282b3e8dc1b107cbe9a1964d105R81", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566046591", "createdAt": "2021-01-28T12:13:28Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -83,8 +83,8 @@ public void testGetTable() {\n             Types.NestedField.optional(1, \"strV\", Types.StringType.get())));\n     Assert.assertEquals(\n         Arrays.asList(\n-            TableColumn.of(\"id\", DataTypes.BIGINT()),\n-            TableColumn.of(\"strV\", DataTypes.STRING())),\n+            TableColumn.physical(\"id\", DataTypes.BIGINT()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDI5OQ=="}, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyODE5OA==", "bodyText": "thx a lot for the suggestion. will update", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566228198", "createdAt": "2021-01-28T16:24:17Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -83,8 +83,8 @@ public void testGetTable() {\n             Types.NestedField.optional(1, \"strV\", Types.StringType.get())));\n     Assert.assertEquals(\n         Arrays.asList(\n-            TableColumn.of(\"id\", DataTypes.BIGINT()),\n-            TableColumn.of(\"strV\", DataTypes.STRING())),\n+            TableColumn.physical(\"id\", DataTypes.BIGINT()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDI5OQ=="}, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzY4ODc5Ng==", "bodyText": "sorry, this API break was a mistake and will be fixed in the next bugfix release\nhttps://issues.apache.org/jira/browse/FLINK-21226", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567688796", "createdAt": "2021-02-01T09:49:29Z", "author": {"login": "twalthr"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -83,8 +83,8 @@ public void testGetTable() {\n             Types.NestedField.optional(1, \"strV\", Types.StringType.get())));\n     Assert.assertEquals(\n         Arrays.asList(\n-            TableColumn.of(\"id\", DataTypes.BIGINT()),\n-            TableColumn.of(\"strV\", DataTypes.STRING())),\n+            TableColumn.physical(\"id\", DataTypes.BIGINT()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDI5OQ=="}, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcyNjY0Ng==", "bodyText": "It's OK,  we've planned to just upgrade the flink 1.12 because we needs the newly introduced API from 1.12.0 to develop our unified iceberg flink source/sink.  Thanks @twalthr for the work.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567726646", "createdAt": "2021-02-01T10:47:21Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -83,8 +83,8 @@ public void testGetTable() {\n             Types.NestedField.optional(1, \"strV\", Types.StringType.get())));\n     Assert.assertEquals(\n         Arrays.asList(\n-            TableColumn.of(\"id\", DataTypes.BIGINT()),\n-            TableColumn.of(\"strV\", DataTypes.STRING())),\n+            TableColumn.physical(\"id\", DataTypes.BIGINT()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDI5OQ=="}, "originalCommit": {"oid": "6c3caf41a3f1930355f8eaec1189a4e7a5e6c583"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjI0MDQ5OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDoxODoyNFrOIMBS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNDo0OToxM1rOIMdVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3NTA0Mw==", "bodyText": "Would it make sense to use 2 here (or any value greater than 1)? At my work, we've found that some people's code runs into issues once it's distributed. I highly doubt that's likely to be the case here, given that typically those users were relatively new end users of flink, but it still might be helpful to run the tests with non-local shuffles (not in the same JVM). We could do 2 and then halve the number of slots per task manager.\nYour call, but since this has been helpful for some people in my organization I thought I'd mention it.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r549475043", "createdAt": "2020-12-28T20:18:24Z", "author": {"login": "kbendick"}, "path": "flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java", "diffHunk": "@@ -46,21 +49,36 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Rule;\n+import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n @RunWith(Parameterized.class)\n-public class TestFlinkIcebergSink extends AbstractTestBase {\n+public class TestFlinkIcebergSink extends TestBaseUtils {\n   private static final TypeInformation<Row> ROW_TYPE_INFO = new RowTypeInfo(\n       SimpleDataUtil.FLINK_SCHEMA.getFieldTypes());\n   private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n       SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n \n-  @Rule\n-  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final org.apache.flink.configuration.Configuration config =\n+      new org.apache.flink.configuration.Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);\n+\n+  @ClassRule\n+  public static MiniClusterWithClientResource miniClusterResource = new MiniClusterWithClientResource(\n+      new MiniClusterResourceConfiguration.Builder()\n+          .setNumberTaskManagers(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c721b14acecc12f211bafebdf14c8fe0734d86a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNDQ2OA==", "bodyText": "it seems that most Flink unit test with MiniCluster are using one taskmanager. I would stick with the convention.\nOn the other hand, this code is added to disable CHECK_LEAKED_CLASSLOADER. If we can fix that problem, we can stick with the AbstractTestBase base class", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r549934468", "createdAt": "2020-12-30T04:49:13Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/sink/TestFlinkIcebergSink.java", "diffHunk": "@@ -46,21 +49,36 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Rule;\n+import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n @RunWith(Parameterized.class)\n-public class TestFlinkIcebergSink extends AbstractTestBase {\n+public class TestFlinkIcebergSink extends TestBaseUtils {\n   private static final TypeInformation<Row> ROW_TYPE_INFO = new RowTypeInfo(\n       SimpleDataUtil.FLINK_SCHEMA.getFieldTypes());\n   private static final DataFormatConverters.RowConverter CONVERTER = new DataFormatConverters.RowConverter(\n       SimpleDataUtil.FLINK_SCHEMA.getFieldDataTypes());\n \n-  @Rule\n-  public TemporaryFolder tempFolder = new TemporaryFolder();\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final org.apache.flink.configuration.Configuration config =\n+      new org.apache.flink.configuration.Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);\n+\n+  @ClassRule\n+  public static MiniClusterWithClientResource miniClusterResource = new MiniClusterWithClientResource(\n+      new MiniClusterResourceConfiguration.Builder()\n+          .setNumberTaskManagers(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3NTA0Mw=="}, "originalCommit": {"oid": "2c721b14acecc12f211bafebdf14c8fe0734d86a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjA0NTA3OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjoyMTozMVrOIOH22w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQwNDoxMDowMlrOIQnCVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY3OTcwNw==", "bodyText": "I read the javadoc about  TableResult again.  The correct way to execute sql and get the results is:\nTableResult result = tEnv.execute(\"select ...\");\n// using try-with-resources statement\ntry (CloseableIterator<Row> it = result.collect()) {\n        it... // collect same data\n}\nThen I think we don't have to call c.getJobExecutionResult().get() here. How about removing  the line101 ~ line 106 and the following part use try-with-resources statement ?", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r551679707", "createdAt": "2021-01-05T02:21:31Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -76,7 +99,7 @@ protected TableEnvironment getTableEnv() {\n     TableResult tableResult = getTableEnv().executeSql(String.format(query, args));\n     tableResult.getJobClient().ifPresent(c -> {\n       try {\n-        c.getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n+        c.getJobExecutionResult().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcwNDY3OQ==", "bodyText": "I was wondering the same question regarding c.getJobExecutionResult().get(). Updated the PR per your suggestion.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r551704679", "createdAt": "2021-01-05T04:02:05Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -76,7 +99,7 @@ protected TableEnvironment getTableEnv() {\n     TableResult tableResult = getTableEnv().executeSql(String.format(query, args));\n     tableResult.getJobClient().ifPresent(c -> {\n       try {\n-        c.getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n+        c.getJobExecutionResult().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY3OTcwNw=="}, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI4NzcwMA==", "bodyText": "BTW, removing the JobClientgetJobExecutionResult().get() works well for Flink 1.12. It seems that it doesn't work with Flink 1.11 when I tried it in the Flink test refactor PR", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r554287700", "createdAt": "2021-01-09T04:10:02Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -76,7 +99,7 @@ protected TableEnvironment getTableEnv() {\n     TableResult tableResult = getTableEnv().executeSql(String.format(query, args));\n     tableResult.getJobClient().ifPresent(c -> {\n       try {\n-        c.getJobExecutionResult(Thread.currentThread().getContextClassLoader()).get();\n+        c.getJobExecutionResult().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY3OTcwNw=="}, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjA1MDkwOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjoyMzo0N1rOIOH6EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNDowMjoxNVrOIOJYlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MDUyOA==", "bodyText": "Similar issues  here.  ( see https://github.com/apache/iceberg/pull/1956/files#r551679707 )", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r551680528", "createdAt": "2021-01-05T02:23:47Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "diffHunk": "@@ -107,7 +121,14 @@ public void testResiduals() throws Exception {\n   }\n \n   private List<Row> executeSQL(String sql) {\n-    return Lists.newArrayList(tEnv.executeSql(sql).collect());\n+    CloseableIterator<Row> iter = getTableEnv().executeSql(sql).collect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcwNDcyNg==", "bodyText": "updated", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r551704726", "createdAt": "2021-01-05T04:02:15Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "diffHunk": "@@ -107,7 +121,14 @@ public void testResiduals() throws Exception {\n   }\n \n   private List<Row> executeSQL(String sql) {\n-    return Lists.newArrayList(tEnv.executeSql(sql).collect());\n+    CloseableIterator<Row> iter = getTableEnv().executeSql(sql).collect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MDUyOA=="}, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjA1NTA0OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMjoyNTo0N1rOIOH8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjoxNDoxNFrOIb_WWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MTEzNw==", "bodyText": "Why do we need to change here ?", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r551681137", "createdAt": "2021-01-05T02:25:47Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "diffHunk": "@@ -52,12 +53,25 @@ public TestFlinkScanSql(String fileFormat) {\n   @Override\n   public void before() throws IOException {\n     super.before();\n-    tEnv = TableEnvironment.create(EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build());\n-    tEnv.executeSql(String.format(\n+    getTableEnv().executeSql(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzM2NQ==", "bodyText": "this is to avoid creating the table environment for each test method. it is the same pattern used by FlinkTestBase.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r551683365", "createdAt": "2021-01-05T02:33:43Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "diffHunk": "@@ -52,12 +53,25 @@ public TestFlinkScanSql(String fileFormat) {\n   @Override\n   public void before() throws IOException {\n     super.before();\n-    tEnv = TableEnvironment.create(EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build());\n-    tEnv.executeSql(String.format(\n+    getTableEnv().executeSql(String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MTEzNw=="}, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2MDE0Nw==", "bodyText": "OK, that sounds good to me.\nNit: here we could just use the executeSQL methods now.   Maybe we could just rename the executeSQL(String sql) as sql(String query, Object... args), so that we could have the same usage that is similar to the FlinkTestBase#sql.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566060147", "createdAt": "2021-01-28T12:34:49Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "diffHunk": "@@ -52,12 +53,25 @@ public TestFlinkScanSql(String fileFormat) {\n   @Override\n   public void before() throws IOException {\n     super.before();\n-    tEnv = TableEnvironment.create(EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build());\n-    tEnv.executeSql(String.format(\n+    getTableEnv().executeSql(String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MTEzNw=="}, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIyMDM3Ng==", "bodyText": "really like the suggestion. will update", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566220376", "createdAt": "2021-01-28T16:14:14Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/source/TestFlinkScanSql.java", "diffHunk": "@@ -52,12 +53,25 @@ public TestFlinkScanSql(String fileFormat) {\n   @Override\n   public void before() throws IOException {\n     super.before();\n-    tEnv = TableEnvironment.create(EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build());\n-    tEnv.executeSql(String.format(\n+    getTableEnv().executeSql(String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MTEzNw=="}, "originalCommit": {"oid": "558e3f5996ecc092b04142df560858ab530e53dd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTQ5NjgyOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjoxMzo0NVrOIb0wEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjoyNzo1MlrOId9ALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NjczNg==", "bodyText": "ditto.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566046736", "createdAt": "2021-01-28T12:13:45Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -107,7 +107,7 @@ public void testRenameTable() {\n         () -> getTableEnv().from(\"tl\")\n     );\n     Assert.assertEquals(\n-        Collections.singletonList(TableColumn.of(\"id\", DataTypes.BIGINT())),\n+        Collections.singletonList(TableColumn.physical(\"id\", DataTypes.BIGINT())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc5MTc2Nw==", "bodyText": "Here,  we could use the similar way to avoid to use TableColumn#physical. openinx@2a63571#diff-4c56ab08c19464dbe3351f71fc39345ee031a282b3e8dc1b107cbe9a1964d105R102", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566791767", "createdAt": "2021-01-29T12:36:18Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -107,7 +107,7 @@ public void testRenameTable() {\n         () -> getTableEnv().from(\"tl\")\n     );\n     Assert.assertEquals(\n-        Collections.singletonList(TableColumn.of(\"id\", DataTypes.BIGINT())),\n+        Collections.singletonList(TableColumn.physical(\"id\", DataTypes.BIGINT())),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NjczNg=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI3OTA4Nw==", "bodyText": "@stevenzwu ,  do you think  this issue need to fix in this PR ? I think we'd better to...", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568279087", "createdAt": "2021-02-02T02:27:52Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -107,7 +107,7 @@ public void testRenameTable() {\n         () -> getTableEnv().from(\"tl\")\n     );\n     Assert.assertEquals(\n-        Collections.singletonList(TableColumn.of(\"id\", DataTypes.BIGINT())),\n+        Collections.singletonList(TableColumn.physical(\"id\", DataTypes.BIGINT())),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NjczNg=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTUwMjE1OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjoxNToyOVrOIb0zjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwMTozNDoxOFrOIcRu-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NzYyOQ==", "bodyText": "Why do we need to change here ?  in the new flink 1.12.1 release,  the null data will be hit the LIKE '%%' ?", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566047629", "createdAt": "2021-01-28T12:15:29Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java", "diffHunk": "@@ -617,12 +617,14 @@ public void testFilterNotPushDownLike() {\n     explainNoPushDown = getTableEnv().explainSql(sqlNoPushDown);\n     Assert.assertFalse(\"Explain should not contain FilterPushDown\",\n         explainNoPushDown.contains(expectedFilterPushDownExplain));\n+\n     sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n     resultLike = sql(sqlNoPushDown);\n-    Assert.assertEquals(\"Should have 2 records\", 2, resultLike.size());\n+    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE3OTE4Mg==", "bodyText": "yeah. there are a couple of small behavior changes in 1.12. I also confirmed with zhangjun0x01\n98d9f6a", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566179182", "createdAt": "2021-01-28T15:23:22Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java", "diffHunk": "@@ -617,12 +617,14 @@ public void testFilterNotPushDownLike() {\n     explainNoPushDown = getTableEnv().explainSql(sqlNoPushDown);\n     Assert.assertFalse(\"Explain should not contain FilterPushDown\",\n         explainNoPushDown.contains(expectedFilterPushDownExplain));\n+\n     sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n     resultLike = sql(sqlNoPushDown);\n-    Assert.assertEquals(\"Should have 2 records\", 2, resultLike.size());\n+    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NzYyOQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjUyMTU5Mw==", "bodyText": "I tested it again. In hive 2.3.7, the sql select * from mytest where data like '%'  , data is null will not match. In flink 1.12, it will return the value of data is null. I have not found the related flink jira for this", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566521593", "createdAt": "2021-01-29T01:34:18Z", "author": {"login": "zhangjun0x01"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkTableSource.java", "diffHunk": "@@ -617,12 +617,14 @@ public void testFilterNotPushDownLike() {\n     explainNoPushDown = getTableEnv().explainSql(sqlNoPushDown);\n     Assert.assertFalse(\"Explain should not contain FilterPushDown\",\n         explainNoPushDown.contains(expectedFilterPushDownExplain));\n+\n     sqlNoPushDown = \"SELECT * FROM  \" + TABLE_NAME + \"  WHERE data LIKE '%%' \";\n     resultLike = sql(sqlNoPushDown);\n-    Assert.assertEquals(\"Should have 2 records\", 2, resultLike.size());\n+    Assert.assertEquals(\"Should have 3 records\", 3, resultLike.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA0NzYyOQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTU3MDQ3OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjozMDozMFrOIb1bKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxNjowNToxOVrOIcqZ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA1Nzc2OQ==", "bodyText": "I'd prefer to create our iceberg's RowDataCloner (which is similar to the RowDataConvert ),  so that we could get ride of this flink internal InternalSerializers.\nRelying on flink internal interfaces that do not promise compatibility should be avoided as much as possible in subsequent development codes.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566057769", "createdAt": "2021-01-28T12:30:30Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java", "diffHunk": "@@ -62,9 +61,8 @@ private TestHelpers() {\n   }\n \n   public static RowData copyRowData(RowData from, RowType rowType) {\n-    ExecutionConfig config = new ExecutionConfig();\n     TypeSerializer[] fieldSerializers = rowType.getChildren().stream()\n-        .map((LogicalType type) -> InternalSerializers.create(type, config))\n+        .map((LogicalType type) -> InternalSerializers.create(type))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM0MjU3OQ==", "bodyText": "It will be great if we can achieve the goal. Looking at the behavior of clone, I am wondering if we will need to reinvent a lot of specific serializers (like BooleanSerializer) that InternalSerializers eventually depends on. Those type serializers are also internal just like InternalSerializers.\nIdeally, it will be great if RowData interface provides a public clone API. Actually, in the FLIP-27 source, we need need to clone RowData since RowDataIterator returns a reused RowData object.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566342579", "createdAt": "2021-01-28T19:11:53Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java", "diffHunk": "@@ -62,9 +61,8 @@ private TestHelpers() {\n   }\n \n   public static RowData copyRowData(RowData from, RowType rowType) {\n-    ExecutionConfig config = new ExecutionConfig();\n     TypeSerializer[] fieldSerializers = rowType.getChildren().stream()\n-        .map((LogicalType type) -> InternalSerializers.create(type, config))\n+        .map((LogicalType type) -> InternalSerializers.create(type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA1Nzc2OQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc5NjY2OQ==", "bodyText": "Here we will use this to copy a RowData into a newly created GenericRowData, that means we don't have to use the complex TypeSerializer ( that is used for copying binary data for BinaryRowData).   I think it will be good to remove the internal API if possible,  so I'd recommend to use the  similar RowDataConverter way to copy a totally new java objects for each fields.\nBTW, I've discussed with flink sql team (@wuchong),   the future apache flink will provides RowData copy utility to acomplish this RowData clone..", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566796669", "createdAt": "2021-01-29T12:45:31Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java", "diffHunk": "@@ -62,9 +61,8 @@ private TestHelpers() {\n   }\n \n   public static RowData copyRowData(RowData from, RowType rowType) {\n-    ExecutionConfig config = new ExecutionConfig();\n     TypeSerializer[] fieldSerializers = rowType.getChildren().stream()\n-        .map((LogicalType type) -> InternalSerializers.create(type, config))\n+        .map((LogicalType type) -> InternalSerializers.create(type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA1Nzc2OQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njc5ODE5Mw==", "bodyText": "Of course, we could open separate PR to address the InternalSerializers issue if you think it's necessary.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566798193", "createdAt": "2021-01-29T12:48:17Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java", "diffHunk": "@@ -62,9 +61,8 @@ private TestHelpers() {\n   }\n \n   public static RowData copyRowData(RowData from, RowType rowType) {\n-    ExecutionConfig config = new ExecutionConfig();\n     TypeSerializer[] fieldSerializers = rowType.getChildren().stream()\n-        .map((LogicalType type) -> InternalSerializers.create(type, config))\n+        .map((LogicalType type) -> InternalSerializers.create(type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA1Nzc2OQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkyNTgwOA==", "bodyText": "Created issue-2184 to track this issue. probably a separate PR is better.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566925808", "createdAt": "2021-01-29T16:05:19Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestHelpers.java", "diffHunk": "@@ -62,9 +61,8 @@ private TestHelpers() {\n   }\n \n   public static RowData copyRowData(RowData from, RowType rowType) {\n-    ExecutionConfig config = new ExecutionConfig();\n     TypeSerializer[] fieldSerializers = rowType.getChildren().stream()\n-        .map((LogicalType type) -> InternalSerializers.create(type, config))\n+        .map((LogicalType type) -> InternalSerializers.create(type))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA1Nzc2OQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTU5NjMwOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjozNzozNlrOIb1q8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNToyNDozN1rOIb85KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2MTgxMQ==", "bodyText": "Nit: How about just import the org.apache.flink.configuration.Configuration class and use:\nprivate static final Configuration config = new Configuration().set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);\nhere.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566061811", "createdAt": "2021-01-28T12:37:36Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +36,28 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final org.apache.flink.configuration.Configuration config =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjE4MDEzNg==", "bodyText": "will fix", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566180136", "createdAt": "2021-01-28T15:24:37Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +36,28 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final org.apache.flink.configuration.Configuration config =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2MTgxMQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTYxMTkwOnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMjo0MTo1MlrOIb10cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNjo0MTowNlrOIcAmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2NDI0MQ==", "bodyText": "As this InternalTypeInfo is the flink internal API that we have to depends on in the flink+iceberg integration work,  I'd like to move this InternalTypeInfo.of(RowType rowType) into a separate small utility methods,  in case of changing every places that refer this internal class.\nopeninx@2a63571#diff-e4d1084ea160d030f3a225948d224678436b79eb5a94df230c71cdc7327f99d8R43", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566064241", "createdAt": "2021-01-28T12:41:52Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -33,7 +33,7 @@\n import org.apache.flink.table.api.TableSchema;\n import org.apache.flink.table.data.RowData;\n import org.apache.flink.table.data.util.DataFormatConverters;\n-import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjI0MDkyNQ==", "bodyText": "will do assuming you meant just consolidation of calls to Flink Internal and PublicEvolve APIs. we don't need to support both Flink 1.11 and 1.12 in the compatibility util class.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566240925", "createdAt": "2021-01-28T16:41:06Z", "author": {"login": "stevenzwu"}, "path": "flink/src/main/java/org/apache/iceberg/flink/sink/FlinkSink.java", "diffHunk": "@@ -33,7 +33,7 @@\n import org.apache.flink.table.api.TableSchema;\n import org.apache.flink.table.data.RowData;\n import org.apache.flink.table.data.util.DataFormatConverters;\n-import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjA2NDI0MQ=="}, "originalCommit": {"oid": "4b9baeb07babb634a5d717df180666ece2792edf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3MDUyMjc0OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxMzozMjozMVrOIckLoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxODoyMzozMFrOIdukLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ==", "bodyText": "I think we need to disable the CoreOptions.CHECK_LEAKED_CLASSLOADER here  ?  Seems like we usually validation the iceberg tables results once we've terminated the flink job.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566823841", "createdAt": "2021-01-29T13:32:31Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkxODAzNg==", "bodyText": "It is already disabled here. We need to disable this check for other tests that are affected by this. CI tests were passing after disabling here. It started to fail again after I rebased with latest master.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r566918036", "createdAt": "2021-01-29T15:54:04Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzAxNzM1Mg==", "bodyText": "This is getting really tricky to debug. Can't reproduce it locally. Hence, can't set up break point or add debug logging to custom built Flink.\nI tried to disable CoreOptions.CHECK_LEAKED_CLASSLOADER for all MiniClulster tests. That doesn't help.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567017352", "createdAt": "2021-01-29T18:37:06Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzcyNzI5OQ==", "bodyText": "OK, I'd see how to reproduce those class loader issues.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567727299", "createdAt": "2021-02-01T10:48:14Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2NTg0Nw==", "bodyText": "There're still some ITCases which did not disable the CHECK_LEAKED_CLASSLOADER in current patch, so I made this commit: openinx@c8c2c8e to re-trigger the travis CI again, let's see what will it say: https://github.com/openinx/incubator-iceberg/runs/1806279011", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567765847", "createdAt": "2021-02-01T11:52:39Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2NjgzMQ==", "bodyText": "If the travis CI pass, then @stevenzwu, you can apply this commit into this PR to retry this travis CI:\ncurl -s https://github.com/openinx/incubator-iceberg/commit/c8c2c8e8e72fd1b2051f1f946bb54c968e86c81d.patch | git am", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567766831", "createdAt": "2021-02-01T11:54:24Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgwODUzNw==", "bodyText": "Seems all unit tests are passed https://github.com/openinx/incubator-iceberg/runs/1806279011 ! @stevenzwu , you could add this commit and then retry the travis CI again.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r567808537", "createdAt": "2021-02-01T13:04:28Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODA0MjU0MA==", "bodyText": "@openinx thx a lot for identifying the missing integration tests that require disabling classloader check. I didn't realize the need to search for StreamExecutionEnvironment.getExecutionEnvironment.\nBTW, I also added MiniClusterWithClientResource to TestFlinkIcebergSinkV2, which might help speed up a tiny bit.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568042540", "createdAt": "2021-02-01T18:23:30Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkTestBase.java", "diffHunk": "@@ -34,8 +37,27 @@\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n \n-public abstract class FlinkTestBase extends AbstractTestBase {\n+public abstract class FlinkTestBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  private static final Configuration config = new Configuration()\n+          // disable classloader check as Avro may cache class/object in the serializers.\n+          .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjgyMzg0MQ=="}, "originalCommit": {"oid": "5dd3ea888dc0c439a428742407bd4b48483ed9e8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDYwMTgwOnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkCatalogTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjoyNDoxOVrOId87Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjo0ODoxM1rOId9aSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI3NzgxNA==", "bodyText": "Nit: in apache iceberg, we usually use the unified Lists.newArrayLists to create a new ArrayList.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568277814", "createdAt": "2021-02-02T02:24:19Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkCatalogTestBase.java", "diffHunk": "@@ -119,6 +123,12 @@ protected String warehouseRoot() {\n     }\n   }\n \n+  protected String getFullQualifiedTableName(String tableName) {\n+    final List<String> levels = new ArrayList<>(Arrays.asList(icebergNamespace.levels()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05c00e1a311396400e277bdb07d024e5fb0781f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI4NTc3MA==", "bodyText": "will fix", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568285770", "createdAt": "2021-02-02T02:48:13Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/FlinkCatalogTestBase.java", "diffHunk": "@@ -119,6 +123,12 @@ protected String warehouseRoot() {\n     }\n   }\n \n+  protected String getFullQualifiedTableName(String tableName) {\n+    final List<String> levels = new ArrayList<>(Arrays.asList(icebergNamespace.levels()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI3NzgxNA=="}, "originalCommit": {"oid": "b05c00e1a311396400e277bdb07d024e5fb0781f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDYxMjM0OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjoyODozN1rOId9BHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjoyODozN1rOId9BHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI3OTMyNw==", "bodyText": "Thanks a lot for the unit tests improvement !", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568279327", "createdAt": "2021-02-02T02:28:37Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/TestFlinkCatalogTable.java", "diffHunk": "@@ -136,13 +133,23 @@ public void testCreateTableIfNotExists() {\n \n     sql(\"DROP TABLE tl\");\n     AssertHelpers.assertThrows(\"Table 'tl' should be dropped\",\n-        NoSuchTableException.class, \"Table does not exist: db.tl\", () -> table(\"tl\"));\n+        NoSuchTableException.class,\n+        \"Table does not exist: \" + getFullQualifiedTableName(\"tl\"),\n+        () -> table(\"tl\"));\n \n-    sql(\"CREATE TABLE IF NO EXISTS tl(id BIGINT)\");\n+    sql(\"CREATE TABLE IF NOT EXISTS tl(id BIGINT)\");\n     Assert.assertEquals(Maps.newHashMap(), table(\"tl\").properties());\n \n-    sql(\"CREATE TABLE IF NOT EXISTS tl(id BIGINT) WITH ('location'='/tmp/location')\");\n-    Assert.assertEquals(\"Should still be the old table.\", Maps.newHashMap(), table(\"tl\").properties());\n+    final String uuid = UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05c00e1a311396400e277bdb07d024e5fb0781f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDY0NDU2OnYy", "diffSide": "RIGHT", "path": "flink/src/test/java/org/apache/iceberg/flink/MiniClusterBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjo0MzoxN1rOId9TvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjo0ODo0MlrOId9a1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI4NDA5Mg==", "bodyText": "I saw the TestFlinkIcebergSinkV2 also defines the similar mini cluster resources, then how about make it into a small methods so that the TestFlinkIcebergSinkV2 could reuse it ?   For future defined mini cluster resource, we'd better also reuse this one because it will be easy to forget to disable this CHECK_LEAKED_CLASSLOADER switch for developers.\n  @ClassRule\n  public static MiniClusterWithClientResource miniClusterResource = createMiniClusterResource();\n\n  @ClassRule\n  public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n\n  public static MiniClusterWithClientResource createMiniClusterResource() {\n    return new MiniClusterWithClientResource(\n        new MiniClusterResourceConfiguration.Builder()\n            .setNumberTaskManagers(1)\n            .setNumberSlotsPerTaskManager(DEFAULT_PARALLELISM)\n            .setConfiguration(CONFIG)\n            .build());\n  }\nThe TestFlinkIcebergSinkV2 could just use:\n@ClassRule\npublic static MiniClusterWithClientResource miniClusterResource = MiniClusterBase.createMiniClusterResource();", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568284092", "createdAt": "2021-02-02T02:43:17Z", "author": {"login": "openinx"}, "path": "flink/src/test/java/org/apache/iceberg/flink/MiniClusterBase.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.CoreOptions;\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.flink.test.util.TestBaseUtils;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * It will start a mini cluster with classloader.check-leaked-classloader=false, so that we won't break the unit tests\n+ * because of the class loader leak issue. In our iceberg integration tests, there're some that will assert the results\n+ * after finished the flink jobs, so actually we may access the class loader that has been closed by the flink task\n+ * managers if we enable the switch classloader.check-leaked-classloader by default.\n+ */\n+public class MiniClusterBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  public static final Configuration CONFIG = new Configuration()\n+      // disable classloader check as Avro may cache class/object in the serializers.\n+      .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);\n+\n+  @ClassRule\n+  public static MiniClusterWithClientResource miniClusterResource = new MiniClusterWithClientResource(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05c00e1a311396400e277bdb07d024e5fb0781f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI4NTkxMQ==", "bodyText": "That is a great idea. will update", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568285911", "createdAt": "2021-02-02T02:48:42Z", "author": {"login": "stevenzwu"}, "path": "flink/src/test/java/org/apache/iceberg/flink/MiniClusterBase.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg.flink;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.CoreOptions;\n+import org.apache.flink.runtime.testutils.MiniClusterResourceConfiguration;\n+import org.apache.flink.test.util.MiniClusterWithClientResource;\n+import org.apache.flink.test.util.TestBaseUtils;\n+import org.junit.ClassRule;\n+import org.junit.rules.TemporaryFolder;\n+\n+/**\n+ * It will start a mini cluster with classloader.check-leaked-classloader=false, so that we won't break the unit tests\n+ * because of the class loader leak issue. In our iceberg integration tests, there're some that will assert the results\n+ * after finished the flink jobs, so actually we may access the class loader that has been closed by the flink task\n+ * managers if we enable the switch classloader.check-leaked-classloader by default.\n+ */\n+public class MiniClusterBase extends TestBaseUtils {\n+\n+  private static final int DEFAULT_PARALLELISM = 4;\n+\n+  public static final Configuration CONFIG = new Configuration()\n+      // disable classloader check as Avro may cache class/object in the serializers.\n+      .set(CoreOptions.CHECK_LEAKED_CLASSLOADER, false);\n+\n+  @ClassRule\n+  public static MiniClusterWithClientResource miniClusterResource = new MiniClusterWithClientResource(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI4NDA5Mg=="}, "originalCommit": {"oid": "b05c00e1a311396400e277bdb07d024e5fb0781f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDY0NzE3OnYy", "diffSide": "RIGHT", "path": "flink/src/main/java/org/apache/iceberg/flink/actions/Actions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjo0NDozOVrOId9VVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMjo0NDozOVrOId9VVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI4NDUwMA==", "bodyText": "Thanks a lot for this.", "url": "https://github.com/apache/iceberg/pull/1956#discussion_r568284500", "createdAt": "2021-02-02T02:44:39Z", "author": {"login": "openinx"}, "path": "flink/src/main/java/org/apache/iceberg/flink/actions/Actions.java", "diffHunk": "@@ -37,7 +43,7 @@ public static Actions forTable(StreamExecutionEnvironment env, Table table) {\n   }\n \n   public static Actions forTable(Table table) {\n-    return new Actions(StreamExecutionEnvironment.getExecutionEnvironment(), table);\n+    return new Actions(StreamExecutionEnvironment.getExecutionEnvironment(CONFIG), table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05c00e1a311396400e277bdb07d024e5fb0781f"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3069, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}