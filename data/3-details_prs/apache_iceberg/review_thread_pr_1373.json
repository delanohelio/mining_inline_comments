{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODMxNDc1", "number": 1373, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzowODoyN1rOEbxb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDozNToyMVrOEfxQ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTU2OTQ3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzowODoyN1rOHF5UHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxMToyNFrOHK-FEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Mzk2NA==", "bodyText": "I think matching the behavior in PartitionSpec is the most reasonable way.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r475943964", "createdAt": "2020-08-24T23:08:27Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MDkxNg==", "bodyText": "I wish we had reserved 0 for the unpartitioned spec. I'm happy to take that approach for sort order.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479570916", "createdAt": "2020-08-28T23:16:14Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Mzk2NA=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2NDkxNQ==", "bodyText": "Sounds good, let's reserve it.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481264915", "createdAt": "2020-09-01T16:11:24Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Mzk2NA=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTU3MjIyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzowOTowOVrOHF5V9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxMDowNFrOHK9_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ==", "bodyText": "This seems to get out of hand. We may want to switch to a builder here.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r475944439", "createdAt": "2020-08-24T23:09:09Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MTA1Nw==", "bodyText": "I think that would definitely make it a little cleaner here and in all of the related \"create\" methods", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476561057", "createdAt": "2020-08-25T16:00:52Z", "author": {"login": "RussellSpitzer"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNjY0Mg==", "bodyText": "@rdsr @shardulm94 @rdblue what do you guys think?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477606642", "createdAt": "2020-08-26T21:43:35Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgyMzgxMg==", "bodyText": "I'm +1. But this is a public API, we'd have to keep the current methods around though, marked as deprecated.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r478823812", "createdAt": "2020-08-28T04:27:39Z", "author": {"login": "rdsr"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjU3Ng==", "bodyText": "Yeah, I think we can map existing methods into the builder and keep the compatibility.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479456576", "createdAt": "2020-08-28T18:00:27Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NDgzMw==", "bodyText": "We only double the number of implementations every time we add a new config option...\n+1 to a builder, I think that would be helpful.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479574833", "createdAt": "2020-08-28T23:36:55Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2MzU5Nw==", "bodyText": "Submitted PR #1409 for this.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481263597", "createdAt": "2020-09-01T16:10:04Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/catalog/Catalog.java", "diffHunk": "@@ -58,9 +60,50 @@ Table createTable(\n       TableIdentifier identifier,\n       Schema schema,\n       PartitionSpec spec,\n+      SortOrder sortOrder,\n       String location,\n       Map<String, String> properties);\n \n+  /**\n+   * Create a table.\n+   *\n+   * @param identifier a table identifier\n+   * @param schema a schema\n+   * @param spec a partition spec\n+   * @param location a location for the table; leave null if unspecified\n+   * @param properties a string map of table properties\n+   * @return a Table instance\n+   * @throws AlreadyExistsException if the table already exists\n+   */\n+  default Table createTable(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NDQzOQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTU3NzYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoxMDoyM1rOHF5Zjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoxNjoyMVrOHLAlwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTM1OA==", "bodyText": "This problem is not specific to SortOrder but also applies to PartitionSpec.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r475945358", "createdAt": "2020-08-24T23:10:23Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -94,9 +105,15 @@ static TableMetadata newTableMetadata(Schema schema,\n     }\n     PartitionSpec freshSpec = specBuilder.build();\n \n+    // TODO: case sensitivity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3OTM2NA==", "bodyText": "I don't think this would be a problem unless the schema passed in is not the schema used to create the spec or sort order. If it is the same, then the case sensitive check will always work. If not, then we could have an error when we can't find the name when rebuilding for the schema with fresh IDs.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479579364", "createdAt": "2020-08-29T00:01:36Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -94,9 +105,15 @@ static TableMetadata newTableMetadata(Schema schema,\n     }\n     PartitionSpec freshSpec = specBuilder.build();\n \n+    // TODO: case sensitivity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTM1OA=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNjA1MA==", "bodyText": "Agree. We could have this problem but on one layer above.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481306050", "createdAt": "2020-09-01T17:16:21Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -94,9 +105,15 @@ static TableMetadata newTableMetadata(Schema schema,\n     }\n     PartitionSpec freshSpec = specBuilder.build();\n \n+    // TODO: case sensitivity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0NTM1OA=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTU5MzExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoxNDowNlrOHF5j1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoyMjo1MVrOHL5ovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ==", "bodyText": "I did not default the null order as the SQL standard does not define this. Spark and Presto, as well as RDBMs, use different default null orderings.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r475947991", "createdAt": "2020-08-24T23:14:06Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwOTI4MQ==", "bodyText": "I think even if other frameworks don't define this it's ok to have a default? Like If a user doesn't care then we should just make the decision for them right?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476509281", "createdAt": "2020-08-25T14:49:20Z", "author": {"login": "RussellSpitzer"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNjkzNQ==", "bodyText": "Yeah, I'll be fine with picking a default value ourselves.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477606935", "createdAt": "2020-08-26T21:44:20Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3Mjk5NQ==", "bodyText": "What does Presto use? That seems like a reasonable choice. I'd like to avoid requiring field-level NullOrder when using this API.\nThat might be slightly annoying, since the builder pattern shouldn't rely on calling methods in a particular order. That is, I think that these two should produce the same sort order:\n// ORDER BY x ASC NULLS FIRST, y DESC NULLS FIRST\nSortOrder.builderFor(schema)\n    .asc(\"x\")\n    .desc(\"y\")\n    .nullsFirst()\n    .build();\n\n// ORDER BY x ASC NULLS FIRST, y DESC NULLS FIRST\nSortOrder.builderFor(schema)\n    .nullsFirst()\n    .asc(\"x\")\n    .desc(\"y\")\n    .build();", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479572995", "createdAt": "2020-08-28T23:27:40Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NTAwNw==", "bodyText": "Presto seems to behave differently than any other system. I wanted to follow Spark, Hive and MySQL until I saw a stale PR in Hive to switch to NULLS LAST by default. Having said that, I still propose to match Spark and MySQL and also allow setting a null order per column as that is possible in many systems.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r480385007", "createdAt": "2020-08-31T20:37:04Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ0ODE1Nw==", "bodyText": "That sounds good to me for the defaults. I'd still like to make it easy to use the default if you don't care, and easy to set the default for this sort order, like the examples above.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r480448157", "createdAt": "2020-08-31T22:48:20Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzMwNg==", "bodyText": "How commonly do we expect to see cases when users want to configure a null order for all columns through a global param? In most cases, the ordering will come from query engines in a form of expressions that have a null order per column. If users create a sort order manually and don't care, they can just skip null orders. I do get the use case of being able to set the default but my worry that it complicates the implementation. We will need to defer assigning a null order in asc/desc and iterate through sort columns in build and see whether we already assigned the null order for a particular column.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481283306", "createdAt": "2020-09-01T16:38:01Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI5NTEyNg==", "bodyText": "Yeah, that's a fair argument. We can always add nullsFirst() and nullsLast() calls later and keep just the asc and desc calls for now.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481295126", "createdAt": "2020-09-01T16:57:21Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MDcwMQ==", "bodyText": "Presto does NULLS LAST by default in both directions because we expect that users don't want to see nulls. Consider these queries:\nSELECT x FROM t ORDER BY x LIMIT 10;\nSELECT x FROM t ORDER BY x DESC LIMIT 10;\nIn both of these cases, the user likely wants to see some data, not a bunch of nulls. This behavior is allowed by the SQL standard:\n\nIf <null ordering> is not specified, then an implementation-defined <null ordering> is implicit. The implementation-defined default for <null ordering> shall not depend on the context outside of <sort specification list>.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r482240701", "createdAt": "2020-09-02T17:22:51Z", "author": {"login": "electrum"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0Nzk5MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODkwNjc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoxNjowM1rOHGaQIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoxMTozMVrOHJWoJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4MzYxNw==", "bodyText": "I've usually seen this with \"Locale.ROOT\" to avoid the Turkish issues, I assume English works as well?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476483617", "createdAt": "2020-08-25T14:16:03Z", "author": {"login": "RussellSpitzer"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {\n+    Preconditions.checkArgument(jsonValue != null, \"json value is null\");\n+    return NullOrder.valueOf(\"NULLS_\" + jsonValue.toUpperCase(Locale.ENGLISH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzA0MA==", "bodyText": "Yeah, should work too.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477607040", "createdAt": "2020-08-26T21:44:36Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {\n+    Preconditions.checkArgument(jsonValue != null, \"json value is null\");\n+    return NullOrder.valueOf(\"NULLS_\" + jsonValue.toUpperCase(Locale.ENGLISH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4MzYxNw=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2OTk1OQ==", "bodyText": "Yeah, both work. I think we have mixed usage in the project. If the word is English, then it's okay to use this.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479569959", "createdAt": "2020-08-28T23:11:31Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {\n+    Preconditions.checkArgument(jsonValue != null, \"json value is null\");\n+    return NullOrder.valueOf(\"NULLS_\" + jsonValue.toUpperCase(Locale.ENGLISH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4MzYxNw=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTA0MDA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDo0MzowMlrOHGbh3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxNToyM1rOHK-X-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNDU0MQ==", "bodyText": "Could use guava Streams.zip here, skip a little bit of direct indexing but that's personal preference", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476504541", "createdAt": "2020-08-25T14:43:02Z", "author": {"login": "RussellSpitzer"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzExNw==", "bodyText": "Let me check.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477607117", "createdAt": "2020-08-26T21:44:44Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNDU0MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MTMxMQ==", "bodyText": "I'd rather not expand the use of Gauva. We could build our own zip easily enough.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479571311", "createdAt": "2020-08-28T23:18:41Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNDU0MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2OTc1Mg==", "bodyText": "Let's keep it as is then.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481269752", "createdAt": "2020-09-01T16:15:23Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNDU0MQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTM3MTYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/Table.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1NjowN1rOHGexYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0OToxNlrOHHkqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NzY2NQ==", "bodyText": "I think when we return a Map of common classes we should describe what they represent, the Integer keys here I assume are Field numbers right?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476557665", "createdAt": "2020-08-25T15:56:07Z", "author": {"login": "RussellSpitzer"}, "path": "api/src/main/java/org/apache/iceberg/Table.java", "diffHunk": "@@ -65,6 +65,20 @@\n    */\n   Map<Integer, PartitionSpec> specs();\n \n+  /**\n+   * Return the {@link SortOrder sort order} for this table.\n+   *\n+   * @return this table's sort order\n+   */\n+  SortOrder sortOrder();\n+\n+  /**\n+   * Return a map of {@link SortOrder sort orders} for this table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNzMxMA==", "bodyText": "It is a map from order id -> order. Let me add a comment.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477607310", "createdAt": "2020-08-26T21:45:09Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/Table.java", "diffHunk": "@@ -65,6 +65,20 @@\n    */\n   Map<Integer, PartitionSpec> specs();\n \n+  /**\n+   * Return the {@link SortOrder sort order} for this table.\n+   *\n+   * @return this table's sort order\n+   */\n+  SortOrder sortOrder();\n+\n+  /**\n+   * Return a map of {@link SortOrder sort orders} for this table.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NzY2NQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwMjgzMA==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477702830", "createdAt": "2020-08-26T23:49:16Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/Table.java", "diffHunk": "@@ -65,6 +65,20 @@\n    */\n   Map<Integer, PartitionSpec> specs();\n \n+  /**\n+   * Return the {@link SortOrder sort order} for this table.\n+   *\n+   * @return this table's sort order\n+   */\n+  SortOrder sortOrder();\n+\n+  /**\n+   * Return a map of {@link SortOrder sort orders} for this table.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NzY2NQ=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTcyNzkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyNDoyMFrOHGiPmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDo1NDo0N1rOHJXqcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxNDU1Mg==", "bodyText": "This block of changes 652 -668 Is confusing to me, could add some more comments? I'm mostly confused about when we add \"freshSortOrder\" , it looks like we ignore it entirely if an equivalent SortOrder is there?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476614552", "createdAt": "2020-08-25T17:24:20Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -598,20 +649,38 @@ public TableMetadata buildReplacement(Schema updatedSchema, PartitionSpec update\n       builder.add(freshSpec);\n     }\n \n+    // determine the next order id\n+    int maxOrderId = sortOrders.stream().mapToInt(SortOrder::orderId).max().orElse(INITIAL_SORT_ORDER_ID);\n+    int nextOrderId = maxOrderId + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYwNjMwNQ==", "bodyText": "I've matched the logic we have for PartitionSpec. If we have an equivalent partition spec, we use it. I'll add a comment.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477606305", "createdAt": "2020-08-26T21:42:44Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -598,20 +649,38 @@ public TableMetadata buildReplacement(Schema updatedSchema, PartitionSpec update\n       builder.add(freshSpec);\n     }\n \n+    // determine the next order id\n+    int maxOrderId = sortOrders.stream().mapToInt(SortOrder::orderId).max().orElse(INITIAL_SORT_ORDER_ID);\n+    int nextOrderId = maxOrderId + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxNDU1Mg=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NjkzMA==", "bodyText": "This is used when we are running a REPLACE TABLE operation. We want to keep the history, but the schema and partition spec can be completely new. When the schema and partition spec are new, we assign fresh IDs to the schema and rebuild the partition spec (and sort order) to use the newly assigned IDs. That's why we use the freshSpec and freshSortOrder methods here as well as when creating new table metadata -- because we don't trust the IDs that were assigned in the schema that was passed in.\nI should note that when we update a schema, we also rebuild the specs and sort orders. But in those cases, the IDs aren't what we are changing. What may change are the fields in the schema. Fields could be renamed, or dropped. What we're primarily looking for is when a field is dropped. Then rebuilding the order or spec will hit a validation exception.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479586930", "createdAt": "2020-08-29T00:54:47Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -598,20 +649,38 @@ public TableMetadata buildReplacement(Schema updatedSchema, PartitionSpec update\n       builder.add(freshSpec);\n     }\n \n+    // determine the next order id\n+    int maxOrderId = sortOrders.stream().mapToInt(SortOrder::orderId).max().orElse(INITIAL_SORT_ORDER_ID);\n+    int nextOrderId = maxOrderId + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxNDU1Mg=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTc2Nzg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestTableMetadata.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyOToxMFrOHGijxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Nzo1OVrOHHkjcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxOTcxOA==", "bodyText": "Does this include tests for the serde to/from json?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r476619718", "createdAt": "2020-08-25T17:29:10Z", "author": {"login": "RussellSpitzer"}, "path": "core/src/test/java/org/apache/iceberg/TestTableMetadata.java", "diffHunk": "@@ -35,6 +35,7 @@\n import org.apache.iceberg.TableMetadata.MetadataLogEntry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5OTYzMg==", "bodyText": "Yep.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477699632", "createdAt": "2020-08-26T23:47:06Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/TestTableMetadata.java", "diffHunk": "@@ -35,6 +35,7 @@\n import org.apache.iceberg.TableMetadata.MetadataLogEntry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxOTcxOA=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwMDk3OA==", "bodyText": "This also tests backward compatibility.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477700978", "createdAt": "2020-08-26T23:47:59Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/TestTableMetadata.java", "diffHunk": "@@ -35,6 +35,7 @@\n import org.apache.iceberg.TableMetadata.MetadataLogEntry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxOTcxOA=="}, "originalCommit": {"oid": "f7156637202b839243a6bddde9229ab8c7be93f7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ1MjM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/expressions/Expressions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Mzo1N1rOHHkL2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjozOToxNVrOHK_Ptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDkzOA==", "bodyText": "We are using this in Builder.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477694938", "createdAt": "2020-08-26T23:43:57Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/expressions/Expressions.java", "diffHunk": "@@ -251,7 +251,7 @@ public static Expression rewriteNot(Expression expr) {\n     return ExpressionVisitors.visit(expr, RewriteNot.get());\n   }\n \n-  static <T> NamedReference<T> ref(String name) {\n+  public static <T> NamedReference<T> ref(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453f49fc3d6643e8cd2ea17badb5df851b67c7b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTMwMQ==", "bodyText": "It should be fine to pass this in through the factory methods that accept Term, so it's okay to make it public.\nIt should have Javadoc, though. And it would be helpful to mention that this is equivalent to using the Expressions methods that accept String: The following are equivalent: equals(\"a\", 5) and equals(ref(\"a\"), 5)", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479575301", "createdAt": "2020-08-28T23:39:39Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/expressions/Expressions.java", "diffHunk": "@@ -251,7 +251,7 @@ public static Expression rewriteNot(Expression expr) {\n     return ExpressionVisitors.visit(expr, RewriteNot.get());\n   }\n \n-  static <T> NamedReference<T> ref(String name) {\n+  public static <T> NamedReference<T> ref(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDkzOA=="}, "originalCommit": {"oid": "453f49fc3d6643e8cd2ea17badb5df851b67c7b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4NDAyMw==", "bodyText": "Will add.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481284023", "createdAt": "2020-09-01T16:39:15Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/expressions/Expressions.java", "diffHunk": "@@ -251,7 +251,7 @@ public static Expression rewriteNot(Expression expr) {\n     return ExpressionVisitors.visit(expr, RewriteNot.get());\n   }\n \n-  static <T> NamedReference<T> ref(String name) {\n+  public static <T> NamedReference<T> ref(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5NDkzOA=="}, "originalCommit": {"oid": "453f49fc3d6643e8cd2ea17badb5df851b67c7b2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ2MzkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0NToxN1rOHHkTgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0NToxN1rOHHkTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5Njg5OA==", "bodyText": "This place, probably, requires additional attention. I've added a test to TestReplaceTransaction.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477696898", "createdAt": "2020-08-26T23:45:17Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -598,20 +649,39 @@ public TableMetadata buildReplacement(Schema updatedSchema, PartitionSpec update\n       builder.add(freshSpec);\n     }\n \n+    // determine the next order id\n+    int maxOrderId = sortOrders.stream().mapToInt(SortOrder::orderId).max().orElse(INITIAL_SORT_ORDER_ID);\n+    int nextOrderId = maxOrderId + 1;\n+\n+    // rebuild the sort order using new column ids\n+    SortOrder freshSortOrder = freshSortOrder(nextOrderId, freshSchema, updatedSortOrder);\n+\n+    // if the order already exists, use the same ID. otherwise, use 1 more than the highest ID.\n+    Optional<SortOrder> sameSortOrder = sortOrders.stream()\n+        .filter(sortOrder -> sortOrder.sameOrder(freshSortOrder))\n+        .findAny();\n+    int orderId = sameSortOrder.map(SortOrder::orderId).orElse(nextOrderId);\n+\n+    ImmutableList.Builder<SortOrder> sortOrdersBuilder = ImmutableList.<SortOrder>builder().addAll(sortOrders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453f49fc3d6643e8cd2ea17badb5df851b67c7b2"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjQ3NzgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/iceberg/TestSortOrderParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Njo1NFrOHHkdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo0Njo1NFrOHHkdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5OTM2NA==", "bodyText": "I will add more tests here.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r477699364", "createdAt": "2020-08-26T23:46:54Z", "author": {"login": "aokolnychyi"}, "path": "core/src/test/java/org/apache/iceberg/TestSortOrderParser.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import org.apache.iceberg.transforms.UnknownTransform;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.iceberg.NullOrder.NULLS_FIRST;\n+import static org.apache.iceberg.SortDirection.DESC;\n+\n+public class TestSortOrderParser extends TableTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453f49fc3d6643e8cd2ea17badb5df851b67c7b2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Nzk5OTk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoxMjoyMlrOHJWowA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMjowMVrOHM0Fvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MDExMg==", "bodyText": "What about toString/fromString? Instead of using jsonValue? Since it is just a simple string, there is no need to call out that it is intended for JSON.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479570112", "createdAt": "2020-08-28T23:12:22Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MDU2NQ==", "bodyText": "I see toString is used for the SQL-ish representation. Maybe we should just embed this in a parser class instead of having them here.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479570565", "createdAt": "2020-08-28T23:14:42Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MDExMg=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2NDM1NA==", "bodyText": "Will move this logic to the parser.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481264354", "createdAt": "2020-09-01T16:10:48Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MDExMg=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODM5OQ==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483198399", "createdAt": "2020-09-03T19:12:01Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/NullOrder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+\n+public enum NullOrder {\n+  NULLS_FIRST(\"first\"), NULLS_LAST(\"last\");\n+\n+  private final String jsonValue;\n+\n+  NullOrder(String jsonValue) {\n+    this.jsonValue = jsonValue;\n+  }\n+\n+  public static NullOrder fromJsonValue(String jsonValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MDExMg=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODAwOTI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoxOTo0MVrOHJWuIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoxNTowM1rOHK-Wxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MTQ4OQ==", "bodyText": "Nit: I find it a bit less awkward to use a stream for these cases because it accepts a factory method:\nthis.fields = fields.stream().toArray(SortField[]::new);", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479571489", "createdAt": "2020-08-28T23:19:41Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2OTQ0Ng==", "bodyText": "Actually, Intellij highlights this and suggests to replace with fields.toArray(new SortField[0]). I am ok with both options but would prefer to avoid extra warnings.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481269446", "createdAt": "2020-09-01T16:15:03Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MTQ4OQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODAxNDEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzoyMzozMFrOHJWw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMjoxM1rOHM0GHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MjE5NQ==", "bodyText": "Should this delegate to sameOrder instead of checking fields directly?", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479572195", "createdAt": "2020-08-28T23:23:30Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI2OTg4MA==", "bodyText": "Will update.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481269880", "createdAt": "2020-09-01T16:15:33Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MjE5NQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODQ5Mw==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483198493", "createdAt": "2020-09-03T19:12:13Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3MjE5NQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODAyNjg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzozMjo0NFrOHJW31g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo1NTozNFrOHMzkug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3Mzk3NA==", "bodyText": "Probably worth a comment that states ValidationException is thrown by bind if binding fails so we can assume that boundTerm is defined correctly. (I just checked to make sure)", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479573974", "createdAt": "2020-08-28T23:32:44Z", "author": {"login": "rdblue"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {\n+      return addSortField(Expressions.ref(name), SortDirection.ASC, nullOrder);\n+    }\n+\n+    public Builder asc(Term term, NullOrder nullOrder) {\n+      return addSortField(term, SortDirection.ASC, nullOrder);\n+    }\n+\n+    public Builder desc(String name, NullOrder nullOrder) {\n+      return addSortField(Expressions.ref(name), SortDirection.DESC, nullOrder);\n+    }\n+\n+    public Builder desc(Term term, NullOrder nullOrder) {\n+      return addSortField(term, SortDirection.DESC, nullOrder);\n+    }\n+\n+    public Builder withOrderId(int newOrderId) {\n+      this.orderId = newOrderId;\n+      return this;\n+    }\n+\n+    public Builder caseSensitive(boolean sortCaseSensitive) {\n+      this.caseSensitive = sortCaseSensitive;\n+      return this;\n+    }\n+\n+    Builder addSortField(Term term, SortDirection direction, NullOrder nullOrder) {\n+      Preconditions.checkArgument(term instanceof UnboundTerm, \"Term must be unbound\");\n+      BoundTerm<?> boundTerm = ((UnboundTerm<?>) term).bind(schema.asStruct(), caseSensitive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mzg1Mg==", "bodyText": "Will add.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481283852", "createdAt": "2020-09-01T16:38:57Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {\n+      return addSortField(Expressions.ref(name), SortDirection.ASC, nullOrder);\n+    }\n+\n+    public Builder asc(Term term, NullOrder nullOrder) {\n+      return addSortField(term, SortDirection.ASC, nullOrder);\n+    }\n+\n+    public Builder desc(String name, NullOrder nullOrder) {\n+      return addSortField(Expressions.ref(name), SortDirection.DESC, nullOrder);\n+    }\n+\n+    public Builder desc(Term term, NullOrder nullOrder) {\n+      return addSortField(term, SortDirection.DESC, nullOrder);\n+    }\n+\n+    public Builder withOrderId(int newOrderId) {\n+      this.orderId = newOrderId;\n+      return this;\n+    }\n+\n+    public Builder caseSensitive(boolean sortCaseSensitive) {\n+      this.caseSensitive = sortCaseSensitive;\n+      return this;\n+    }\n+\n+    Builder addSortField(Term term, SortDirection direction, NullOrder nullOrder) {\n+      Preconditions.checkArgument(term instanceof UnboundTerm, \"Term must be unbound\");\n+      BoundTerm<?> boundTerm = ((UnboundTerm<?>) term).bind(schema.asStruct(), caseSensitive);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3Mzk3NA=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4OTk0Ng==", "bodyText": "Done.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483189946", "createdAt": "2020-09-03T18:55:34Z", "author": {"login": "aokolnychyi"}, "path": "api/src/main/java/org/apache/iceberg/SortOrder.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import org.apache.iceberg.exceptions.ValidationException;\n+import org.apache.iceberg.expressions.BoundReference;\n+import org.apache.iceberg.expressions.BoundTerm;\n+import org.apache.iceberg.expressions.BoundTransform;\n+import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.expressions.Term;\n+import org.apache.iceberg.expressions.UnboundTerm;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.relocated.com.google.common.collect.ImmutableList;\n+import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n+import org.apache.iceberg.transforms.Transform;\n+import org.apache.iceberg.transforms.Transforms;\n+import org.apache.iceberg.types.Types;\n+\n+public class SortOrder implements Serializable {\n+  // TODO: shall we reserve 0 for the unsorted order? PartitionSpec does not guarantee it?\n+  private static final SortOrder UNSORTED_ORDER = new SortOrder(new Schema(), 0, Collections.emptyList());\n+\n+  private final Schema schema;\n+  private final int orderId;\n+  private final SortField[] fields;\n+\n+  private transient volatile List<SortField> fieldList;\n+\n+  private SortOrder(Schema schema, int orderId, List<SortField> fields) {\n+    this.schema = schema;\n+    this.orderId = orderId;\n+    this.fields = fields.toArray(new SortField[0]);\n+  }\n+\n+  public Schema schema() {\n+    return schema;\n+  }\n+\n+  public int orderId() {\n+    return orderId;\n+  }\n+\n+  public List<SortField> fields() {\n+    return lazyFieldList();\n+  }\n+\n+  public boolean isUnsorted() {\n+    return fields.length < 1;\n+  }\n+\n+  public boolean satisfies(SortOrder anotherSortOrder) {\n+    // any ordering satisfies an unsorted ordering\n+    if (anotherSortOrder.isUnsorted()) {\n+      return true;\n+    }\n+\n+    // this ordering cannot satisfy an ordering with more sort fields\n+    if (anotherSortOrder.fields.length > fields.length) {\n+      return false;\n+    }\n+\n+    // this ordering has either more or the same number of sort fields\n+    return IntStream.range(0, anotherSortOrder.fields.length)\n+        .allMatch(index -> fields[index].equals(anotherSortOrder.fields[index]));\n+  }\n+\n+  public boolean sameOrder(SortOrder anotherSortOrder) {\n+    return Arrays.equals(fields, anotherSortOrder.fields);\n+  }\n+\n+  private List<SortField> lazyFieldList() {\n+    if (fieldList == null) {\n+      synchronized (this) {\n+        if (fieldList == null) {\n+          this.fieldList = ImmutableList.copyOf(fields);\n+        }\n+      }\n+    }\n+    return fieldList;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (SortField field : fields) {\n+      sb.append(\"\\n\");\n+      sb.append(\"  \").append(field);\n+    }\n+    if (fields.length > 0) {\n+      sb.append(\"\\n\");\n+    }\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    } else if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    SortOrder that = (SortOrder) other;\n+    return orderId == that.orderId && Arrays.equals(fields, that.fields);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 31 * Integer.hashCode(orderId) + Arrays.hashCode(fields);\n+  }\n+\n+  public static SortOrder unsorted() {\n+    return UNSORTED_ORDER;\n+  }\n+\n+  public static Builder builderFor(Schema schema) {\n+    return new Builder(schema);\n+  }\n+\n+  public static class Builder {\n+    private final Schema schema;\n+    private final List<SortField> fields = Lists.newArrayList();\n+    private int orderId = 0;\n+    private boolean caseSensitive = true;\n+\n+    private Builder(Schema schema) {\n+      this.schema = schema;\n+    }\n+\n+    public Builder asc(String name, NullOrder nullOrder) {\n+      return addSortField(Expressions.ref(name), SortDirection.ASC, nullOrder);\n+    }\n+\n+    public Builder asc(Term term, NullOrder nullOrder) {\n+      return addSortField(term, SortDirection.ASC, nullOrder);\n+    }\n+\n+    public Builder desc(String name, NullOrder nullOrder) {\n+      return addSortField(Expressions.ref(name), SortDirection.DESC, nullOrder);\n+    }\n+\n+    public Builder desc(Term term, NullOrder nullOrder) {\n+      return addSortField(term, SortDirection.DESC, nullOrder);\n+    }\n+\n+    public Builder withOrderId(int newOrderId) {\n+      this.orderId = newOrderId;\n+      return this;\n+    }\n+\n+    public Builder caseSensitive(boolean sortCaseSensitive) {\n+      this.caseSensitive = sortCaseSensitive;\n+      return this;\n+    }\n+\n+    Builder addSortField(Term term, SortDirection direction, NullOrder nullOrder) {\n+      Preconditions.checkArgument(term instanceof UnboundTerm, \"Term must be unbound\");\n+      BoundTerm<?> boundTerm = ((UnboundTerm<?>) term).bind(schema.asStruct(), caseSensitive);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3Mzk3NA=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA0MDM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzo0MjowNlrOHJW_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoxMTo0NVrOHLAbYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTgyMw==", "bodyText": "Should we have defaults for sortOrder and spec as well? It seems strange that we do this for properties, but not the others.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479575823", "createdAt": "2020-08-28T23:42:06Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -64,8 +65,8 @@ public Table createTable(\n       baseLocation = defaultWarehouseLocation(identifier);\n     }\n \n-    TableMetadata metadata = TableMetadata.newTableMetadata(\n-        schema, spec, baseLocation, properties == null ? Maps.newHashMap() : properties);\n+    Map<String, String> tableProps = properties != null ? properties : ImmutableMap.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTg3Ng==", "bodyText": "(Not something we need to decide in this PR)", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479575876", "createdAt": "2020-08-28T23:42:24Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -64,8 +65,8 @@ public Table createTable(\n       baseLocation = defaultWarehouseLocation(identifier);\n     }\n \n-    TableMetadata metadata = TableMetadata.newTableMetadata(\n-        schema, spec, baseLocation, properties == null ? Maps.newHashMap() : properties);\n+    Map<String, String> tableProps = properties != null ? properties : ImmutableMap.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTgyMw=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwMjExMw==", "bodyText": "Yeah, I think that will be safe. Right now, we pass null for table properties in overloaded methods so we must handle it explicitly. But nothing prohibits a user from passing null for spec and sortOrder even though we properly default them in overloaded methods.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481302113", "createdAt": "2020-09-01T17:09:32Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -64,8 +65,8 @@ public Table createTable(\n       baseLocation = defaultWarehouseLocation(identifier);\n     }\n \n-    TableMetadata metadata = TableMetadata.newTableMetadata(\n-        schema, spec, baseLocation, properties == null ? Maps.newHashMap() : properties);\n+    Map<String, String> tableProps = properties != null ? properties : ImmutableMap.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTgyMw=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwMzM5Mw==", "bodyText": "I've created #1411.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481303393", "createdAt": "2020-09-01T17:11:45Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/BaseMetastoreCatalog.java", "diffHunk": "@@ -64,8 +65,8 @@ public Table createTable(\n       baseLocation = defaultWarehouseLocation(identifier);\n     }\n \n-    TableMetadata metadata = TableMetadata.newTableMetadata(\n-        schema, spec, baseLocation, properties == null ? Maps.newHashMap() : properties);\n+    Map<String, String> tableProps = properties != null ? properties : ImmutableMap.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTgyMw=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA1NzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzo1NDo1MFrOHJXIVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoxMzoxOFrOHLAe4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3ODE5OA==", "bodyText": "Do we need to write a transform if it is identity? It would be nice to omit this when it is identity.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479578198", "createdAt": "2020-08-28T23:54:50Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.JsonUtil;\n+\n+public class SortOrderParser {\n+  private static final String ORDER_ID = \"order-id\";\n+  private static final String FIELDS = \"fields\";\n+  private static final String DIRECTION = \"direction\";\n+  private static final String NULL_ORDERING = \"null-order\";\n+  private static final String TRANSFORM = \"transform\";\n+  private static final String SOURCE_ID = \"source-id\";\n+\n+  private SortOrderParser() {\n+  }\n+\n+  public static void toJson(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartObject();\n+    generator.writeNumberField(ORDER_ID, sortOrder.orderId());\n+    generator.writeFieldName(FIELDS);\n+    toJsonFields(sortOrder, generator);\n+    generator.writeEndObject();\n+  }\n+\n+  private static void toJsonFields(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartArray();\n+    for (SortField field : sortOrder.fields()) {\n+      generator.writeStartObject();\n+      generator.writeStringField(TRANSFORM, field.transform().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNDI4OQ==", "bodyText": "I am ok omitting but it will add extra logic and it will behave differently compared to PartitionSpec.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481304289", "createdAt": "2020-09-01T17:13:18Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.JsonUtil;\n+\n+public class SortOrderParser {\n+  private static final String ORDER_ID = \"order-id\";\n+  private static final String FIELDS = \"fields\";\n+  private static final String DIRECTION = \"direction\";\n+  private static final String NULL_ORDERING = \"null-order\";\n+  private static final String TRANSFORM = \"transform\";\n+  private static final String SOURCE_ID = \"source-id\";\n+\n+  private SortOrderParser() {\n+  }\n+\n+  public static void toJson(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartObject();\n+    generator.writeNumberField(ORDER_ID, sortOrder.orderId());\n+    generator.writeFieldName(FIELDS);\n+    toJsonFields(sortOrder, generator);\n+    generator.writeEndObject();\n+  }\n+\n+  private static void toJsonFields(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartArray();\n+    for (SortField field : sortOrder.fields()) {\n+      generator.writeStartObject();\n+      generator.writeStringField(TRANSFORM, field.transform().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3ODE5OA=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA2MTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMzo1ODoxNVrOHJXKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMjo1MlrOHM0Hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3ODgwMQ==", "bodyText": "I think this needs to check whether json is null as well. That's a bug here and in PartitionSpecParser. If it is null because the field doesn't exist, then this will throw a NullPointerException instead of a good error message. I'm good with either checking here (json != null && json.isArray()) or in the method that calls this using json.has(FIELDS).", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479578801", "createdAt": "2020-08-28T23:58:15Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.JsonUtil;\n+\n+public class SortOrderParser {\n+  private static final String ORDER_ID = \"order-id\";\n+  private static final String FIELDS = \"fields\";\n+  private static final String DIRECTION = \"direction\";\n+  private static final String NULL_ORDERING = \"null-order\";\n+  private static final String TRANSFORM = \"transform\";\n+  private static final String SOURCE_ID = \"source-id\";\n+\n+  private SortOrderParser() {\n+  }\n+\n+  public static void toJson(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartObject();\n+    generator.writeNumberField(ORDER_ID, sortOrder.orderId());\n+    generator.writeFieldName(FIELDS);\n+    toJsonFields(sortOrder, generator);\n+    generator.writeEndObject();\n+  }\n+\n+  private static void toJsonFields(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartArray();\n+    for (SortField field : sortOrder.fields()) {\n+      generator.writeStartObject();\n+      generator.writeStringField(TRANSFORM, field.transform().toString());\n+      generator.writeNumberField(SOURCE_ID, field.sourceId());\n+      generator.writeStringField(DIRECTION, field.direction().toString().toLowerCase(Locale.ROOT));\n+      generator.writeStringField(NULL_ORDERING, field.nullOrder().jsonValue());\n+      generator.writeEndObject();\n+    }\n+    generator.writeEndArray();\n+  }\n+\n+  public static SortOrder fromJson(Schema schema, String json) {\n+    try {\n+      return fromJson(schema, JsonUtil.mapper().readValue(json, JsonNode.class));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  public static SortOrder fromJson(Schema schema, JsonNode json) {\n+    Preconditions.checkArgument(json.isObject(), \"Cannot parse sort order from non-object: %s\", json);\n+    int orderId = JsonUtil.getInt(ORDER_ID, json);\n+    SortOrder.Builder builder = SortOrder.builderFor(schema).withOrderId(orderId);\n+    buildFromJsonFields(builder, json.get(FIELDS));\n+    return builder.build();\n+  }\n+\n+  private static void buildFromJsonFields(SortOrder.Builder builder, JsonNode json) {\n+    Preconditions.checkArgument(json.isArray(), \"Cannot parse partition order fields, not an array: %s\", json);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNDQ3Mw==", "bodyText": "Will update.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481304473", "createdAt": "2020-09-01T17:13:38Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.JsonUtil;\n+\n+public class SortOrderParser {\n+  private static final String ORDER_ID = \"order-id\";\n+  private static final String FIELDS = \"fields\";\n+  private static final String DIRECTION = \"direction\";\n+  private static final String NULL_ORDERING = \"null-order\";\n+  private static final String TRANSFORM = \"transform\";\n+  private static final String SOURCE_ID = \"source-id\";\n+\n+  private SortOrderParser() {\n+  }\n+\n+  public static void toJson(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartObject();\n+    generator.writeNumberField(ORDER_ID, sortOrder.orderId());\n+    generator.writeFieldName(FIELDS);\n+    toJsonFields(sortOrder, generator);\n+    generator.writeEndObject();\n+  }\n+\n+  private static void toJsonFields(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartArray();\n+    for (SortField field : sortOrder.fields()) {\n+      generator.writeStartObject();\n+      generator.writeStringField(TRANSFORM, field.transform().toString());\n+      generator.writeNumberField(SOURCE_ID, field.sourceId());\n+      generator.writeStringField(DIRECTION, field.direction().toString().toLowerCase(Locale.ROOT));\n+      generator.writeStringField(NULL_ORDERING, field.nullOrder().jsonValue());\n+      generator.writeEndObject();\n+    }\n+    generator.writeEndArray();\n+  }\n+\n+  public static SortOrder fromJson(Schema schema, String json) {\n+    try {\n+      return fromJson(schema, JsonUtil.mapper().readValue(json, JsonNode.class));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  public static SortOrder fromJson(Schema schema, JsonNode json) {\n+    Preconditions.checkArgument(json.isObject(), \"Cannot parse sort order from non-object: %s\", json);\n+    int orderId = JsonUtil.getInt(ORDER_ID, json);\n+    SortOrder.Builder builder = SortOrder.builderFor(schema).withOrderId(orderId);\n+    buildFromJsonFields(builder, json.get(FIELDS));\n+    return builder.build();\n+  }\n+\n+  private static void buildFromJsonFields(SortOrder.Builder builder, JsonNode json) {\n+    Preconditions.checkArgument(json.isArray(), \"Cannot parse partition order fields, not an array: %s\", json);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3ODgwMQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODg1MA==", "bodyText": "Done on one level above.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483198850", "createdAt": "2020-09-03T19:12:52Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/SortOrderParser.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iceberg;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import org.apache.iceberg.relocated.com.google.common.base.Preconditions;\n+import org.apache.iceberg.util.JsonUtil;\n+\n+public class SortOrderParser {\n+  private static final String ORDER_ID = \"order-id\";\n+  private static final String FIELDS = \"fields\";\n+  private static final String DIRECTION = \"direction\";\n+  private static final String NULL_ORDERING = \"null-order\";\n+  private static final String TRANSFORM = \"transform\";\n+  private static final String SOURCE_ID = \"source-id\";\n+\n+  private SortOrderParser() {\n+  }\n+\n+  public static void toJson(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartObject();\n+    generator.writeNumberField(ORDER_ID, sortOrder.orderId());\n+    generator.writeFieldName(FIELDS);\n+    toJsonFields(sortOrder, generator);\n+    generator.writeEndObject();\n+  }\n+\n+  private static void toJsonFields(SortOrder sortOrder, JsonGenerator generator) throws IOException {\n+    generator.writeStartArray();\n+    for (SortField field : sortOrder.fields()) {\n+      generator.writeStartObject();\n+      generator.writeStringField(TRANSFORM, field.transform().toString());\n+      generator.writeNumberField(SOURCE_ID, field.sourceId());\n+      generator.writeStringField(DIRECTION, field.direction().toString().toLowerCase(Locale.ROOT));\n+      generator.writeStringField(NULL_ORDERING, field.nullOrder().jsonValue());\n+      generator.writeEndObject();\n+    }\n+    generator.writeEndArray();\n+  }\n+\n+  public static SortOrder fromJson(Schema schema, String json) {\n+    try {\n+      return fromJson(schema, JsonUtil.mapper().readValue(json, JsonNode.class));\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  public static SortOrder fromJson(Schema schema, JsonNode json) {\n+    Preconditions.checkArgument(json.isObject(), \"Cannot parse sort order from non-object: %s\", json);\n+    int orderId = JsonUtil.getInt(ORDER_ID, json);\n+    SortOrder.Builder builder = SortOrder.builderFor(schema).withOrderId(orderId);\n+    buildFromJsonFields(builder, json.get(FIELDS));\n+    return builder.build();\n+  }\n+\n+  private static void buildFromJsonFields(SortOrder.Builder builder, JsonNode json) {\n+    Preconditions.checkArgument(json.isArray(), \"Cannot parse partition order fields, not an array: %s\", json);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3ODgwMQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA2MzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDowMDowM1rOHJXL5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMzowM1rOHM0H1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3OTExMA==", "bodyText": "If we want to reserve unsorted, all we would do is change this to 1 and add checks for passing in an unsorted order.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479579110", "createdAt": "2020-08-29T00:00:03Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -49,6 +50,7 @@\n   static final int DEFAULT_TABLE_FORMAT_VERSION = 1;\n   static final int SUPPORTED_TABLE_FORMAT_VERSION = 2;\n   static final int INITIAL_SPEC_ID = 0;\n+  static final int INITIAL_SORT_ORDER_ID = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODkzNQ==", "bodyText": "Reserved.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483198935", "createdAt": "2020-09-03T19:13:03Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -49,6 +50,7 @@\n   static final int DEFAULT_TABLE_FORMAT_VERSION = 1;\n   static final int SUPPORTED_TABLE_FORMAT_VERSION = 2;\n   static final int INITIAL_SPEC_ID = 0;\n+  static final int INITIAL_SORT_ORDER_ID = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3OTExMA=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA3MDU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDowNTozM1rOHJXPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNTowMTozMFrOHM_o7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MDA0NQ==", "bodyText": "Should we also expose defaultSpecId directly? Normally, we use spec().specId().", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479580045", "createdAt": "2020-08-29T00:05:33Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -348,6 +375,22 @@ public int defaultSpecId() {\n     return defaultSpecId;\n   }\n \n+  public int defaultSortOrderId() {\n+    return defaultSortOrderId;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4NzYyOQ==", "bodyText": "I am following what we have for specs to be consisent.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483387629", "createdAt": "2020-09-04T05:01:30Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -348,6 +375,22 @@ public int defaultSpecId() {\n     return defaultSpecId;\n   }\n \n+  public int defaultSortOrderId() {\n+    return defaultSortOrderId;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MDA0NQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODA4OTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMDoyMjo1MFrOHJXZwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoxNTozMFrOHLAkBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MjY1Ng==", "bodyText": "This class might be a good one for a builder as well...", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479582656", "createdAt": "2020-08-29T00:22:50Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -61,18 +63,27 @@ public static TableMetadata newTableMetadata(TableOperations ops,\n                                                PartitionSpec spec,\n                                                String location,\n                                                Map<String, String> properties) {\n-    return newTableMetadata(schema, spec, location, properties, DEFAULT_TABLE_FORMAT_VERSION);\n+    return newTableMetadata(schema, spec, SortOrder.unsorted(), location, properties, DEFAULT_TABLE_FORMAT_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNTYwNA==", "bodyText": "Created #1412.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r481305604", "createdAt": "2020-09-01T17:15:30Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadata.java", "diffHunk": "@@ -61,18 +63,27 @@ public static TableMetadata newTableMetadata(TableOperations ops,\n                                                PartitionSpec spec,\n                                                String location,\n                                                Map<String, String> properties) {\n-    return newTableMetadata(schema, spec, location, properties, DEFAULT_TABLE_FORMAT_VERSION);\n+    return newTableMetadata(schema, spec, SortOrder.unsorted(), location, properties, DEFAULT_TABLE_FORMAT_VERSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4MjY1Ng=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODEyODM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadataParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQwMTowMToyOFrOHJXtmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NTozMVrOHMzQFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NzczOQ==", "bodyText": "Minor: This variable doesn't seem necessary.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r479587739", "createdAt": "2020-08-29T01:01:28Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadataParser.java", "diffHunk": "@@ -277,6 +286,22 @@ static TableMetadata fromJson(FileIO io, InputFile file, JsonNode node) {\n           schema, TableMetadata.INITIAL_SPEC_ID, node.get(PARTITION_SPEC)));\n     }\n \n+    JsonNode sortOrderArray = node.get(SORT_ORDERS);\n+    List<SortOrder> sortOrders;\n+    int defaultSortOrderId;\n+    if (sortOrderArray != null) {\n+      defaultSortOrderId = JsonUtil.getInt(DEFAULT_SORT_ORDER_ID, node);\n+      ImmutableList.Builder<SortOrder> sortOrdersBuilder = ImmutableList.builder();\n+      for (JsonNode sortOrder : sortOrderArray) {\n+        sortOrdersBuilder.add(SortOrderParser.fromJson(schema, sortOrder));\n+      }\n+      sortOrders = sortOrdersBuilder.build();\n+    } else {\n+      SortOrder defaultSortOrder = SortOrder.unsorted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NDY2Mw==", "bodyText": "That var is used in two lines below, I think it is a bit easier to read if we preassign it.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483184663", "createdAt": "2020-09-03T18:45:31Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadataParser.java", "diffHunk": "@@ -277,6 +286,22 @@ static TableMetadata fromJson(FileIO io, InputFile file, JsonNode node) {\n           schema, TableMetadata.INITIAL_SPEC_ID, node.get(PARTITION_SPEC)));\n     }\n \n+    JsonNode sortOrderArray = node.get(SORT_ORDERS);\n+    List<SortOrder> sortOrders;\n+    int defaultSortOrderId;\n+    if (sortOrderArray != null) {\n+      defaultSortOrderId = JsonUtil.getInt(DEFAULT_SORT_ORDER_ID, node);\n+      ImmutableList.Builder<SortOrder> sortOrdersBuilder = ImmutableList.builder();\n+      for (JsonNode sortOrder : sortOrderArray) {\n+        sortOrdersBuilder.add(SortOrderParser.fromJson(schema, sortOrder));\n+      }\n+      sortOrders = sortOrdersBuilder.build();\n+    } else {\n+      SortOrder defaultSortOrder = SortOrder.unsorted();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU4NzczOQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzQ4NDczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/iceberg/TableMetadataParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDozNToyMVrOHMQxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0NzozNVrOHMzURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxOTY3MQ==", "bodyText": "If the SortOrder list is required by v2, then I think that we should add a check here that the table is v1. That way, we fail to read a table and force recovery if a v2 table doesn't have an order list.\nWe should probably also update the PartitionSpec logic above to do the same thing.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r482619671", "createdAt": "2020-09-03T00:35:21Z", "author": {"login": "rdblue"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadataParser.java", "diffHunk": "@@ -277,6 +286,22 @@ static TableMetadata fromJson(FileIO io, InputFile file, JsonNode node) {\n           schema, TableMetadata.INITIAL_SPEC_ID, node.get(PARTITION_SPEC)));\n     }\n \n+    JsonNode sortOrderArray = node.get(SORT_ORDERS);\n+    List<SortOrder> sortOrders;\n+    int defaultSortOrderId;\n+    if (sortOrderArray != null) {\n+      defaultSortOrderId = JsonUtil.getInt(DEFAULT_SORT_ORDER_ID, node);\n+      ImmutableList.Builder<SortOrder> sortOrdersBuilder = ImmutableList.builder();\n+      for (JsonNode sortOrder : sortOrderArray) {\n+        sortOrdersBuilder.add(SortOrderParser.fromJson(schema, sortOrder));\n+      }\n+      sortOrders = sortOrdersBuilder.build();\n+    } else {\n+      SortOrder defaultSortOrder = SortOrder.unsorted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NTczMg==", "bodyText": "I tried that but we need to adapt tests. So, I've created #1419 to address this in a follow-up.", "url": "https://github.com/apache/iceberg/pull/1373#discussion_r483185732", "createdAt": "2020-09-03T18:47:35Z", "author": {"login": "aokolnychyi"}, "path": "core/src/main/java/org/apache/iceberg/TableMetadataParser.java", "diffHunk": "@@ -277,6 +286,22 @@ static TableMetadata fromJson(FileIO io, InputFile file, JsonNode node) {\n           schema, TableMetadata.INITIAL_SPEC_ID, node.get(PARTITION_SPEC)));\n     }\n \n+    JsonNode sortOrderArray = node.get(SORT_ORDERS);\n+    List<SortOrder> sortOrders;\n+    int defaultSortOrderId;\n+    if (sortOrderArray != null) {\n+      defaultSortOrderId = JsonUtil.getInt(DEFAULT_SORT_ORDER_ID, node);\n+      ImmutableList.Builder<SortOrder> sortOrdersBuilder = ImmutableList.builder();\n+      for (JsonNode sortOrder : sortOrderArray) {\n+        sortOrdersBuilder.add(SortOrderParser.fromJson(schema, sortOrder));\n+      }\n+      sortOrders = sortOrdersBuilder.build();\n+    } else {\n+      SortOrder defaultSortOrder = SortOrder.unsorted();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxOTY3MQ=="}, "originalCommit": {"oid": "de19ccbbc2146f78e355193bcb998029aedf4cd3"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3677, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}